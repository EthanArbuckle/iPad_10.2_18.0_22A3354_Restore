void sub_22FFF1A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19)
{
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  v21 = v19 + 144;
  while (1)
  {
    v23 = *(_QWORD *)(v21 - 8);
    v21 -= 8;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == v19)
    {
      __cxa_guard_abort(&_MergedGlobals_13);
      a19 = (void **)&a9;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a19);
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
      if ((a16 & 7) != 0)
      {
        v26 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t realityio::BuilderRegistry::unregisterBuilder(uint64_t *a1, _QWORD *__s1)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t EmptyString;
  size_t v11;
  _QWORD *v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  BOOL v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  __int128 v48;

  v3 = a1;
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    do
    {
      v6 = *(_OWORD *)(v4 + 16 * v5);
      v48 = v6;
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
      if (*((_QWORD *)&v6 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
      if (*((char *)__s1 + 23) < 0)
      {
        v12 = (_QWORD *)*__s1;
        v11 = __s1[1];
      }
      else
      {
        v11 = *((unsigned __int8 *)__s1 + 23);
        v12 = __s1;
      }
      v13 = *(char *)(EmptyString + 23);
      if (v13 >= 0)
        v14 = *(unsigned __int8 *)(EmptyString + 23);
      else
        v14 = *(_QWORD *)(EmptyString + 8);
      if (v13 >= 0)
        v15 = (const void *)EmptyString;
      else
        v15 = *(const void **)EmptyString;
      if (v14 >= v11)
        v16 = v11;
      else
        v16 = v14;
      a1 = (uint64_t *)memcmp(v12, v15, v16);
      if ((_DWORD)a1)
        v17 = 0;
      else
        v17 = v14 == v11;
      if (v17)
      {
        v25 = v3[1];
        v26 = *v3 + 16 * v5;
        v27 = v26 + 16;
        if (v26 + 16 != v25)
        {
          do
          {
            v28 = *(_OWORD *)v27;
            *(_QWORD *)v27 = 0;
            *(_QWORD *)(v27 + 8) = 0;
            v29 = *(std::__shared_weak_count **)(v26 + 8);
            *(_OWORD *)v26 = v28;
            if (v29)
            {
              p_shared_owners = (unint64_t *)&v29->__shared_owners_;
              do
                v31 = __ldaxr(p_shared_owners);
              while (__stlxr(v31 - 1, p_shared_owners));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
            v27 += 16;
            v26 += 16;
          }
          while (v27 != v25);
          v27 = v3[1];
        }
        while (v27 != v26)
        {
          v27 -= 16;
          std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v27);
        }
        v3[1] = v26;
        if (v7)
        {
          v32 = (unint64_t *)&v7->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        return 1;
      }
      if (v7)
      {
        v18 = (unint64_t *)&v7->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      ++v5;
      v4 = *v3;
    }
    while (v5 < (v3[1] - *v3) >> 4);
  }
  MEMORY[0x2348B2764](&v48, __s1);
  v20 = v48;
  v21 = (int8x8_t)v3[4];
  if (!*(_QWORD *)&v21)
    goto LABEL_92;
  v22 = bswap64(0x9E3779B97F4A7C55 * (v48 & 0xFFFFFFFFFFFFFFF8));
  v23 = (uint8x8_t)vcnt_s8(v21);
  v23.i16[0] = vaddlv_u8(v23);
  if (v23.u32[0] > 1uLL)
  {
    v24 = v22;
    if (v22 >= *(_QWORD *)&v21)
      v24 = v22 % *(_QWORD *)&v21;
  }
  else
  {
    v24 = v22 & (*(_QWORD *)&v21 - 1);
  }
  v34 = v3[3];
  v35 = *(uint64_t ***)(v34 + 8 * v24);
  if (!v35)
    goto LABEL_92;
  v36 = *v35;
  if (!*v35)
    goto LABEL_92;
  v37 = *(_QWORD *)&v21 - 1;
  while (1)
  {
    v38 = v36[1];
    if (v38 == v22)
      break;
    if (v23.u32[0] > 1uLL)
    {
      if (v38 >= *(_QWORD *)&v21)
        v38 %= *(_QWORD *)&v21;
    }
    else
    {
      v38 &= v37;
    }
    if (v38 != v24)
      goto LABEL_92;
LABEL_62:
    v36 = (uint64_t *)*v36;
    if (!v36)
      goto LABEL_92;
  }
  if ((v36[2] & 0xFFFFFFFFFFFFFFF8) != (v48 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_62;
  v39 = (_QWORD *)*v36;
  if (v23.u32[0] > 1uLL)
  {
    if (v22 >= *(_QWORD *)&v21)
      v22 %= *(_QWORD *)&v21;
  }
  else
  {
    v22 &= v37;
  }
  v40 = *(uint64_t **)(v34 + 8 * v22);
  do
  {
    v41 = v40;
    v40 = (uint64_t *)*v40;
  }
  while (v40 != v36);
  if (v41 == v3 + 5)
    goto LABEL_81;
  v42 = v41[1];
  if (v23.u32[0] > 1uLL)
  {
    if (v42 >= *(_QWORD *)&v21)
      v42 %= *(_QWORD *)&v21;
  }
  else
  {
    v42 &= v37;
  }
  if (v42 == v22)
  {
LABEL_83:
    if (v39)
    {
      v43 = v39[1];
      goto LABEL_85;
    }
  }
  else
  {
LABEL_81:
    if (!v39)
      goto LABEL_82;
    v43 = v39[1];
    if (v23.u32[0] > 1uLL)
    {
      v44 = v39[1];
      if (v43 >= *(_QWORD *)&v21)
        v44 = v43 % *(_QWORD *)&v21;
    }
    else
    {
      v44 = v43 & v37;
    }
    if (v44 != v22)
    {
LABEL_82:
      *(_QWORD *)(v34 + 8 * v22) = 0;
      v39 = (_QWORD *)*v36;
      goto LABEL_83;
    }
LABEL_85:
    if (v23.u32[0] > 1uLL)
    {
      if (v43 >= *(_QWORD *)&v21)
        v43 %= *(_QWORD *)&v21;
    }
    else
    {
      v43 &= v37;
    }
    if (v43 != v22)
    {
      *(_QWORD *)(v3[3] + 8 * v43) = v41;
      v39 = (_QWORD *)*v36;
    }
  }
  *v41 = (uint64_t)v39;
  *v36 = 0;
  --v3[6];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,void *>>>::operator()[abi:ne180100](1, v36);
  v20 = v48;
LABEL_92:
  if ((v20 & 7) != 0)
  {
    v45 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  return 1;
}

void sub_22FFF1FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::AnimationSceneAssetBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC138;
  realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder((realityio::AnimationSceneAssetBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF20E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::EntityBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x148uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC188;
  realityio::EntityBuilder::EntityBuilder((realityio::EntityBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF2204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::MaterialAssetBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x180uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC1D8;
  realityio::MaterialAssetBuilder::MaterialAssetBuilder((realityio::MaterialAssetBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF2320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::InstancedEntityBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x148uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC228;
  realityio::InstancedEntityBuilder::InstancedEntityBuilder((realityio::InstancedEntityBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF243C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::MeshAssetBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC278;
  realityio::MeshAssetBuilder::MeshAssetBuilder((realityio::MeshAssetBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF2558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::MeshComponentBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC2C8;
  realityio::MeshComponentBuilder::MeshComponentBuilder((realityio::MeshComponentBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF2674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::MeshModelDescriptorBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC318;
  realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder((realityio::MeshModelDescriptorBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF2790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::SkeletalAnimationAssetBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x260uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE46C0;
  realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder((realityio::SkeletalAnimationAssetBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF28AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::SkeletonPoseDefinitionBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x138uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC368;
  realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder((realityio::SkeletonPoseDefinitionBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF29C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::SkeletalAnimationAggregationBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC3B8;
  realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder((realityio::SkeletalAnimationAggregationBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF2AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::StageMetersPerUnitBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC408;
  realityio::StageMetersPerUnitBuilder::StageMetersPerUnitBuilder((realityio::StageMetersPerUnitBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF2C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::StageSceneLibraryAssetBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x1C0uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC458;
  realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder((realityio::StageSceneLibraryAssetBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF2D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::StageTimeCodeBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC4A8;
  realityio::StageTimeCodeBuilder::StageTimeCodeBuilder((realityio::StageTimeCodeBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF2E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::StageUpAxisBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC4F8;
  realityio::StageUpAxisBuilder::StageUpAxisBuilder((realityio::StageUpAxisBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF2F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::TextureBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x160uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC548;
  realityio::TextureBuilder::TextureBuilder((realityio::TextureBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF3070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::TransformAnimationAssetBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x1A8uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC598;
  realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder((realityio::TransformAnimationAssetBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF318C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::TransformAnimationAggregationBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x178uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC5E8;
  realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder((realityio::TransformAnimationAggregationBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF32A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::builderIdentifierToken<realityio::TransformComponentBuilder>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD v3[3];

  v3[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC638;
  realityio::TransformComponentBuilder::TransformComponentBuilder((realityio::TransformComponentBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
  v3[1] = v0 + 1;
  v3[2] = v0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  do
    v2 = __ldaxr(p_shared_owners);
  while (__stlxr(v2 - 1, p_shared_owners));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
}

void sub_22FFF33C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::AnimationSceneAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AnimationSceneAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::AnimationSceneAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::EntityBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::EntityBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC188;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::EntityBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::MaterialAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC1D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MaterialAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC1D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::MaterialAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::InstancedEntityBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InstancedEntityBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::InstancedEntityBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::MeshAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::MeshAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::MeshComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC2C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC2C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::MeshComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::MeshModelDescriptorBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshModelDescriptorBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::MeshModelDescriptorBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::SkeletonPoseDefinitionBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletonPoseDefinitionBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::SkeletonPoseDefinitionBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC3B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC3B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::StageMetersPerUnitBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::StageMetersPerUnitBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::StageMetersPerUnitBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::StageSceneLibraryAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::StageSceneLibraryAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::StageSceneLibraryAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::StageTimeCodeBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC4A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::StageTimeCodeBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC4A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::StageTimeCodeBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::StageUpAxisBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC4F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::StageUpAxisBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC4F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::StageUpAxisBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::TextureBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TextureBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::TextureBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::TransformAnimationAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TransformAnimationAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::TransformAnimationAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::TransformAnimationAggregationBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC5E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TransformAnimationAggregationBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC5E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::TransformAnimationAggregationBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::TransformComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TransformComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::TransformComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::set<pxrInternal__aapl__pxrReserved__::TfToken>::set[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;

  qword_255E54710 = 0;
  qword_255E54708 = 0;
  qword_255E54700 = (uint64_t)&qword_255E54708;
  if (a2)
  {
    v2 = (uint64_t *)result;
    v3 = 0;
    v4 = (uint64_t *)(result + 8 * a2);
    v5 = &qword_255E54708;
    while (1)
    {
      if (v5 == &qword_255E54708)
      {
        v6 = &qword_255E54708;
        if (v3)
          goto LABEL_8;
      }
      else
      {
        if (v3)
        {
          do
          {
            v6 = (uint64_t *)v3;
            v3 = *(_QWORD *)(v3 + 8);
          }
          while (v3);
        }
        else
        {
          v8 = &qword_255E54708;
          do
          {
            v6 = (uint64_t *)v8[2];
            v9 = *v6 == (_QWORD)v8;
            v8 = v6;
          }
          while (v9);
        }
        result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54710, v6 + 4, v2);
        if (!(_DWORD)result)
        {
          result = (uint64_t)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&qword_255E54700, &v11, v2);
          v7 = (uint64_t **)result;
LABEL_15:
          if (*v7)
            goto LABEL_17;
          goto LABEL_16;
        }
        if (qword_255E54708)
        {
LABEL_8:
          v11 = v6;
          v7 = (uint64_t **)(v6 + 1);
          goto LABEL_15;
        }
      }
      v11 = &qword_255E54708;
      v7 = (uint64_t **)&qword_255E54708;
LABEL_16:
      std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_node<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&qword_255E54700, v2, (uint64_t)&v10);
      result = (uint64_t)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)&qword_255E54700, (uint64_t)v11, v7, v10);
LABEL_17:
      if (++v2 == v4)
        return result;
      v5 = (uint64_t *)qword_255E54700;
      v3 = qword_255E54708;
    }
  }
  return result;
}

void sub_22FFF3A8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::destroy(a1, a2[1]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    v4 = a2[4];
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(a2);
  }
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_0,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_0,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEC688;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_0,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEC688;
}

realityio::AnimationSceneAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_0,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::AnimationSceneAssetBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::AnimationSceneAssetBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC138;
  result = realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder((realityio::AnimationSceneAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::AnimationSceneAssetBuilder *)v4;
  return result;
}

void sub_22FFF3BB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_0,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_0,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_1,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_1>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_1,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_1>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEC708;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_1,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_1>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEC708;
}

realityio::ArbitraryComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_1,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_1>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::ArbitraryComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::ArbitraryComponentBuilder *result;

  v4 = operator new(0x148uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC778;
  result = realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder((realityio::ArbitraryComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::ArbitraryComponentBuilder *)v4;
  return result;
}

void sub_22FFF3CB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_1,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_1>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_1,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_1>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::ArbitraryComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ArbitraryComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::ArbitraryComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_2,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_2>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_2,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_2>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEC7D8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_2,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_2>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEC7D8;
}

realityio::ArbitraryComponentStructBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_2,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_2>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::ArbitraryComponentStructBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::ArbitraryComponentStructBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC848;
  result = realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder((realityio::ArbitraryComponentStructBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::ArbitraryComponentStructBuilder *)v4;
  return result;
}

void sub_22FFF3E08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_2,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_2>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_2,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_2>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::ArbitraryComponentStructBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ArbitraryComponentStructBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC848;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::ArbitraryComponentStructBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_3,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_3>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_3,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_3>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEC8A8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_3,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_3>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEC8A8;
}

realityio::CameraComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_3,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_3>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::CameraComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::CameraComponentBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC918;
  result = realityio::CameraComponentBuilder::CameraComponentBuilder((realityio::CameraComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::CameraComponentBuilder *)v4;
  return result;
}

void sub_22FFF3F5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_3,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_3>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_3,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_3>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::CameraComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CameraComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::CameraComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_4,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_4>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_4,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_4>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEC978;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_4,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_4>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEC978;
}

realityio::EndOfUpdateBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_4,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_4>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::EndOfUpdateBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::EndOfUpdateBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC9E8;
  result = realityio::EndOfUpdateBuilder::EndOfUpdateBuilder((realityio::EndOfUpdateBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::EndOfUpdateBuilder *)v4;
  return result;
}

void sub_22FFF40B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_4,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_4>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_4,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_4>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::EndOfUpdateBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC9E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::EndOfUpdateBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC9E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::EndOfUpdateBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_5,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_5>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_5,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_5>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDECA48;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_5,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_5>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDECA48;
}

realityio::EntityBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_5,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_5>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::EntityBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::EntityBuilder *result;

  v4 = operator new(0x148uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC188;
  result = realityio::EntityBuilder::EntityBuilder((realityio::EntityBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::EntityBuilder *)v4;
  return result;
}

void sub_22FFF4204(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_5,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_5>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_5,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_5>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_6,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_6>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_6,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_6>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDECAC8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_6,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_6>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDECAC8;
}

realityio::MaterialAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_6,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_6>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::MaterialAssetBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::MaterialAssetBuilder *result;

  v4 = operator new(0x180uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC1D8;
  result = realityio::MaterialAssetBuilder::MaterialAssetBuilder((realityio::MaterialAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::MaterialAssetBuilder *)v4;
  return result;
}

void sub_22FFF4308(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_6,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_6>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_6,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_6>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_7,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_7>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_7,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_7>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDECB48;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_7,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_7>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDECB48;
}

realityio::DirectionalLightComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_7,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_7>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::DirectionalLightComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::DirectionalLightComponentBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDECBB8;
  result = realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder((realityio::DirectionalLightComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::DirectionalLightComponentBuilder *)v4;
  return result;
}

void sub_22FFF440C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_7,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_7>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_7,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_7>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::DirectionalLightComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDECBB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::DirectionalLightComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDECBB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::DirectionalLightComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_8,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_8>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_8,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_8>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDECC18;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_8,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_8>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDECC18;
}

realityio::GeomSubsetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_8,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_8>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::GeomSubsetBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::GeomSubsetBuilder *result;

  v4 = operator new(0x170uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDECC88;
  result = realityio::GeomSubsetBuilder::GeomSubsetBuilder((realityio::GeomSubsetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::GeomSubsetBuilder *)v4;
  return result;
}

void sub_22FFF4560(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_8,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_8>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_8,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_8>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::GeomSubsetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDECC88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::GeomSubsetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDECC88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::GeomSubsetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_9,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_9>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_9,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_9>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDECCE8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_9,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_9>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDECCE8;
}

realityio::IBLComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_9,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_9>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::IBLComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::IBLComponentBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDECD58;
  result = realityio::IBLComponentBuilder::IBLComponentBuilder((realityio::IBLComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::IBLComponentBuilder *)v4;
  return result;
}

void sub_22FFF46B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_9,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_9>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_9,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_9>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::IBLComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDECD58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::IBLComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDECD58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::IBLComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_10,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_10>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_10,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_10>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDECDB8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_10,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_10>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDECDB8;
}

realityio::IBLCubeMapAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_10,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_10>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::IBLCubeMapAssetBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::IBLCubeMapAssetBuilder *result;

  v4 = operator new(0x170uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDECE28;
  result = realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder((realityio::IBLCubeMapAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::IBLCubeMapAssetBuilder *)v4;
  return result;
}

void sub_22FFF4808(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_10,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_10>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_10,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_10>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::IBLCubeMapAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDECE28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::IBLCubeMapAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDECE28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::IBLCubeMapAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_11,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_11>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_11,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_11>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDECE88;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_11,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_11>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDECE88;
}

realityio::InstancedEntityBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_11,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_11>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::InstancedEntityBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::InstancedEntityBuilder *result;

  v4 = operator new(0x148uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC228;
  result = realityio::InstancedEntityBuilder::InstancedEntityBuilder((realityio::InstancedEntityBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::InstancedEntityBuilder *)v4;
  return result;
}

void sub_22FFF495C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_11,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_11>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_11,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_11>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_12,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_12>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_12,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_12>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDECF08;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_12,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_12>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDECF08;
}

realityio::MeshAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_12,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_12>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::MeshAssetBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::MeshAssetBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC278;
  result = realityio::MeshAssetBuilder::MeshAssetBuilder((realityio::MeshAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::MeshAssetBuilder *)v4;
  return result;
}

void sub_22FFF4A60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_12,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_12>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_12,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_12>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_13,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_13>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_13,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_13>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDECF88;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_13,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_13>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDECF88;
}

realityio::MeshComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_13,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_13>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::MeshComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::MeshComponentBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC2C8;
  result = realityio::MeshComponentBuilder::MeshComponentBuilder((realityio::MeshComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::MeshComponentBuilder *)v4;
  return result;
}

void sub_22FFF4B64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_13,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_13>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_13,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_13>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_14,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_14>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_14,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_14>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDED008;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_14,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_14>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDED008;
}

realityio::MeshModelDescriptorBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_14,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_14>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::MeshModelDescriptorBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::MeshModelDescriptorBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC318;
  result = realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder((realityio::MeshModelDescriptorBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::MeshModelDescriptorBuilder *)v4;
  return result;
}

void sub_22FFF4C68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_14,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_14>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_14,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_14>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_15,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_15>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_15,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_15>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDED088;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_15,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_15>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDED088;
}

realityio::PhysicsColliderAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_15,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_15>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::PhysicsColliderAssetBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::PhysicsColliderAssetBuilder *result;

  v4 = operator new(0x170uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDED0F8;
  result = realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder((realityio::PhysicsColliderAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::PhysicsColliderAssetBuilder *)v4;
  return result;
}

void sub_22FFF4D6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_15,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_15>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_15,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_15>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::PhysicsColliderAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED0F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::PhysicsColliderAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED0F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::PhysicsColliderAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_16,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_16>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_16,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_16>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDED158;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_16,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_16>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDED158;
}

realityio::PhysicsColliderComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_16,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_16>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::PhysicsColliderComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::PhysicsColliderComponentBuilder *result;

  v4 = operator new(0x148uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDED1C8;
  result = realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder((realityio::PhysicsColliderComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::PhysicsColliderComponentBuilder *)v4;
  return result;
}

void sub_22FFF4EC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_16,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_16>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_16,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_16>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::PhysicsColliderComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED1C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::PhysicsColliderComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED1C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::PhysicsColliderComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_17,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_17>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_17,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_17>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDED228;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_17,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_17>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDED228;
}

realityio::PhysicsMaterialAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_17,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_17>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::PhysicsMaterialAssetBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::PhysicsMaterialAssetBuilder *result;

  v4 = operator new(0x170uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDED298;
  result = realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder((realityio::PhysicsMaterialAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::PhysicsMaterialAssetBuilder *)v4;
  return result;
}

void sub_22FFF5014(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_17,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_17>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_17,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_17>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::PhysicsMaterialAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::PhysicsMaterialAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED298;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::PhysicsMaterialAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_18,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_18>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_18,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_18>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDED2F8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_18,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_18>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDED2F8;
}

realityio::PhysicsRigidBodyComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_18,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_18>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::PhysicsRigidBodyComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::PhysicsRigidBodyComponentBuilder *result;

  v4 = operator new(0x148uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDED368;
  result = realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder((realityio::PhysicsRigidBodyComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::PhysicsRigidBodyComponentBuilder *)v4;
  return result;
}

void sub_22FFF5168(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_18,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_18>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_18,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_18>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::PhysicsRigidBodyComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::PhysicsRigidBodyComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::PhysicsRigidBodyComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_19,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_19>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_19,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_19>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDED3C8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_19,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_19>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDED3C8;
}

realityio::PhysicsSceneGroundPlaneComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_19,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_19>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::PhysicsSceneGroundPlaneComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::PhysicsSceneGroundPlaneComponentBuilder *result;

  v4 = operator new(0x148uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDED438;
  result = realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder((realityio::PhysicsSceneGroundPlaneComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::PhysicsSceneGroundPlaneComponentBuilder *)v4;
  return result;
}

void sub_22FFF52BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_19,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_19>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_19,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_19>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::PhysicsSceneGroundPlaneComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::PhysicsSceneGroundPlaneComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::PhysicsSceneGroundPlaneComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_20,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_20>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_20,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_20>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDED498;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_20,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_20>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDED498;
}

realityio::RectAreaLightComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_20,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_20>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::RectAreaLightComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::RectAreaLightComponentBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDED508;
  result = realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder((realityio::RectAreaLightComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::RectAreaLightComponentBuilder *)v4;
  return result;
}

void sub_22FFF5410(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_20,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_20>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_20,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_20>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::RectAreaLightComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::RectAreaLightComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED508;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::RectAreaLightComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_21,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_21>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_21,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_21>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDED568;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_21,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_21>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDED568;
}

realityio::SceneAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_21,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_21>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::SceneAssetBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::SceneAssetBuilder *result;

  v4 = operator new(0x188uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDED5D8;
  result = realityio::SceneAssetBuilder::SceneAssetBuilder((realityio::SceneAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::SceneAssetBuilder *)v4;
  return result;
}

void sub_22FFF5564(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_21,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_21>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_21,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_21>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::SceneAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED5D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SceneAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED5D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::SceneAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_22,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_22>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_22,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_22>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDED638;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_22,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_22>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDED638;
}

realityio::ShadowComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_22,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_22>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::ShadowComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::ShadowComponentBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDED6A8;
  result = realityio::ShadowComponentBuilder::ShadowComponentBuilder((realityio::ShadowComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::ShadowComponentBuilder *)v4;
  return result;
}

void sub_22FFF56B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_22,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_22>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_22,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_22>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::ShadowComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED6A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ShadowComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED6A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::ShadowComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_23,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_23>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_23,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_23>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDED708;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_23,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_23>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDED708;
}

realityio::SkeletalAnimationAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_23,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_23>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::SkeletalAnimationAssetBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::SkeletalAnimationAssetBuilder *result;

  v4 = operator new(0x260uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDE46C0;
  result = realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder((realityio::SkeletalAnimationAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::SkeletalAnimationAssetBuilder *)v4;
  return result;
}

void sub_22FFF580C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_23,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_23>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_23,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_23>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_24,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_24>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_24,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_24>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDED788;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_24,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_24>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDED788;
}

realityio::SkeletonPoseDefinitionBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_24,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_24>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::SkeletonPoseDefinitionBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::SkeletonPoseDefinitionBuilder *result;

  v4 = operator new(0x138uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC368;
  result = realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder((realityio::SkeletonPoseDefinitionBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::SkeletonPoseDefinitionBuilder *)v4;
  return result;
}

void sub_22FFF5910(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_24,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_24>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_24,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_24>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_25,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_25>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_25,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_25>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDED808;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_25,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_25>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDED808;
}

realityio::SkeletalAnimationAggregationBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_25,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_25>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::SkeletalAnimationAggregationBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::SkeletalAnimationAggregationBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC3B8;
  result = realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder((realityio::SkeletalAnimationAggregationBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::SkeletalAnimationAggregationBuilder *)v4;
  return result;
}

void sub_22FFF5A14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_25,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_25>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_25,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_25>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_26,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_26>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_26,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_26>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDED888;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_26,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_26>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDED888;
}

realityio::SpatialAudioFileAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_26,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_26>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::SpatialAudioFileAssetBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::SpatialAudioFileAssetBuilder *result;

  v4 = operator new(0x138uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDED8F8;
  result = realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder((realityio::SpatialAudioFileAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::SpatialAudioFileAssetBuilder *)v4;
  return result;
}

void sub_22FFF5B18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_26,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_26>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_26,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_26>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::SpatialAudioFileAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED8F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SpatialAudioFileAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED8F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::SpatialAudioFileAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_27,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_27>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_27,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_27>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDED958;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_27,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_27>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDED958;
}

realityio::SpatialAudioComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_27,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_27>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::SpatialAudioComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::SpatialAudioComponentBuilder *result;

  v4 = operator new(0x150uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDED9C8;
  result = realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder((realityio::SpatialAudioComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::SpatialAudioComponentBuilder *)v4;
  return result;
}

void sub_22FFF5C6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_27,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_27>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_27,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_27>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::SpatialAudioComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SpatialAudioComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDED9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::SpatialAudioComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_28,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_28>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_28,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_28>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEDA28;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_28,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_28>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEDA28;
}

realityio::AcousticMeshComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_28,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_28>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::AcousticMeshComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::AcousticMeshComponentBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEDA98;
  result = realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder((realityio::AcousticMeshComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::AcousticMeshComponentBuilder *)v4;
  return result;
}

void sub_22FFF5DC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_28,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_28>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_28,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_28>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::AcousticMeshComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEDA98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AcousticMeshComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEDA98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::AcousticMeshComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_29,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_29>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_29,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_29>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEDAF8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_29,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_29>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEDAF8;
}

realityio::SpotOrPointOrAmbientLightComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_29,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_29>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::SpotOrPointOrAmbientLightComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::SpotOrPointOrAmbientLightComponentBuilder *result;

  v4 = operator new(0x138uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEDB68;
  result = realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder((realityio::SpotOrPointOrAmbientLightComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::SpotOrPointOrAmbientLightComponentBuilder *)v4;
  return result;
}

void sub_22FFF5F14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_29,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_29>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_29,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_29>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::SpotOrPointOrAmbientLightComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEDB68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SpotOrPointOrAmbientLightComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEDB68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::SpotOrPointOrAmbientLightComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_30,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_30>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_30,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_30>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEDBC8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_30,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_30>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEDBC8;
}

realityio::StageMetersPerUnitBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_30,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_30>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::StageMetersPerUnitBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::StageMetersPerUnitBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC408;
  result = realityio::StageMetersPerUnitBuilder::StageMetersPerUnitBuilder((realityio::StageMetersPerUnitBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::StageMetersPerUnitBuilder *)v4;
  return result;
}

void sub_22FFF6068(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_30,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_30>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_30,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_30>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_31,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_31>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_31,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_31>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEDC48;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_31,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_31>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEDC48;
}

realityio::StageSceneLibraryAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_31,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_31>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::StageSceneLibraryAssetBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::StageSceneLibraryAssetBuilder *result;

  v4 = operator new(0x1C0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC458;
  result = realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder((realityio::StageSceneLibraryAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::StageSceneLibraryAssetBuilder *)v4;
  return result;
}

void sub_22FFF616C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_31,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_31>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_31,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_31>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_32,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_32>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_32,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_32>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEDCC8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_32,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_32>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEDCC8;
}

realityio::StageTimeCodeBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_32,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_32>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::StageTimeCodeBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::StageTimeCodeBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC4A8;
  result = realityio::StageTimeCodeBuilder::StageTimeCodeBuilder((realityio::StageTimeCodeBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::StageTimeCodeBuilder *)v4;
  return result;
}

void sub_22FFF6270(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_32,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_32>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_32,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_32>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_33,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_33>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_33,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_33>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEDD48;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_33,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_33>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEDD48;
}

realityio::StageUpAxisBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_33,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_33>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::StageUpAxisBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::StageUpAxisBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC4F8;
  result = realityio::StageUpAxisBuilder::StageUpAxisBuilder((realityio::StageUpAxisBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::StageUpAxisBuilder *)v4;
  return result;
}

void sub_22FFF6374(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_33,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_33>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_33,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_33>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_34,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_34>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_34,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_34>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEDDC8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_34,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_34>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEDDC8;
}

realityio::TextComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_34,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_34>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::TextComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::TextComponentBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEDE38;
  result = realityio::TextComponentBuilder::TextComponentBuilder((realityio::TextComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::TextComponentBuilder *)v4;
  return result;
}

void sub_22FFF6478(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_34,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_34>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_34,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_34>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::TextComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEDE38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TextComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEDE38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::TextComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_35,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_35>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_35,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_35>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEDE98;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_35,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_35>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEDE98;
}

realityio::TextEntityBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_35,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_35>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::TextEntityBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::TextEntityBuilder *result;

  v4 = operator new(0x138uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEDF08;
  result = realityio::TextEntityBuilder::TextEntityBuilder((realityio::TextEntityBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::TextEntityBuilder *)v4;
  return result;
}

void sub_22FFF65CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_35,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_35>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_35,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_35>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::TextEntityBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEDF08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TextEntityBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEDF08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::TextEntityBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_36,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_36>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_36,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_36>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEDF68;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_36,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_36>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEDF68;
}

realityio::TextMeshAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_36,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_36>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::TextMeshAssetBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::TextMeshAssetBuilder *result;

  v4 = operator new(0x170uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEDFD8;
  result = realityio::TextMeshAssetBuilder::TextMeshAssetBuilder((realityio::TextMeshAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::TextMeshAssetBuilder *)v4;
  return result;
}

void sub_22FFF6720(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_36,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_36>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_36,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_36>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::TextMeshAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEDFD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TextMeshAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEDFD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::TextMeshAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_37,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_37>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_37,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_37>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEE038;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_37,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_37>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEE038;
}

realityio::TextureBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_37,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_37>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::TextureBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::TextureBuilder *result;

  v4 = operator new(0x160uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC548;
  result = realityio::TextureBuilder::TextureBuilder((realityio::TextureBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::TextureBuilder *)v4;
  return result;
}

void sub_22FFF6874(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_37,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_37>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_37,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_37>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_38,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_38>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_38,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_38>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEE0B8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_38,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_38>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEE0B8;
}

realityio::TransformAnimationAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_38,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_38>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::TransformAnimationAssetBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::TransformAnimationAssetBuilder *result;

  v4 = operator new(0x1A8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC598;
  result = realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder((realityio::TransformAnimationAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::TransformAnimationAssetBuilder *)v4;
  return result;
}

void sub_22FFF6978(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_38,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_38>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_38,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_38>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_39,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_39>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_39,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_39>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEE138;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_39,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_39>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEE138;
}

realityio::TransformAnimationAggregationBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_39,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_39>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::TransformAnimationAggregationBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::TransformAnimationAggregationBuilder *result;

  v4 = operator new(0x178uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC5E8;
  result = realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder((realityio::TransformAnimationAggregationBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::TransformAnimationAggregationBuilder *)v4;
  return result;
}

void sub_22FFF6A7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_39,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_39>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_39,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_39>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_40,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_40>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_40,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_40>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEE1B8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_40,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_40>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEE1B8;
}

realityio::TransformComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_40,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_40>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::TransformComponentBuilder **a2@<X8>)
{
  _QWORD *v4;
  realityio::TransformComponentBuilder *result;

  v4 = operator new(0x130uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDEC638;
  result = realityio::TransformComponentBuilder::TransformComponentBuilder((realityio::TransformComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::TransformComponentBuilder *)v4;
  return result;
}

void sub_22FFF6B80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_40,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_40>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_40,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_40>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_pointer<realityio::BuilderRegistrationInfo *,std::shared_ptr<realityio::BuilderRegistrationInfo>::__shared_ptr_default_delete<realityio::BuilderRegistrationInfo,realityio::BuilderRegistrationInfo>,std::allocator<realityio::BuilderRegistrationInfo>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__shared_ptr_pointer<realityio::BuilderRegistrationInfo *,std::shared_ptr<realityio::BuilderRegistrationInfo>::__shared_ptr_default_delete<realityio::BuilderRegistrationInfo,realityio::BuilderRegistrationInfo>,std::allocator<realityio::BuilderRegistrationInfo>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<realityio::BuilderRegistrationInfo>::operator()[abi:ne180100](*(_QWORD **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<realityio::BuilderRegistrationInfo *,std::shared_ptr<realityio::BuilderRegistrationInfo>::__shared_ptr_default_delete<realityio::BuilderRegistrationInfo,realityio::BuilderRegistrationInfo>,std::allocator<realityio::BuilderRegistrationInfo>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::default_delete<realityio::BuilderRegistrationInfo>::operator()[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (result)
  {
    v1 = result;
    v2 = result + 3;
    v3 = (_QWORD *)result[6];
    if (v3 == v2)
    {
      v4 = 4;
      v3 = v2;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 1));
    if ((*v1 & 7) != 0)
    {
      v5 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (a1)
  {
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(__p + 3));
    v3 = __p[2];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  operator delete(__p);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>(uint64_t **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char **v6;
  char **v7;
  uint64_t *v8;
  uint64_t *result;

  v4 = (char *)operator new(0x38uLL);
  *((_QWORD *)v4 + 4) = *(_QWORD *)a2;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6 = (char **)(a1 + 1);
  v5 = (char *)a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        v6 = (char **)v5;
        if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t *)v4 + 4, (uint64_t *)v5 + 4))break;
        v5 = *v6;
        v7 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v5 = v6[1];
    }
    while (v5);
    v7 = v6 + 1;
  }
  else
  {
    v7 = (char **)(a1 + 1);
  }
LABEL_8:
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = v6;
  *v7 = v4;
  v8 = (uint64_t *)**a1;
  if (v8)
  {
    *a1 = v8;
    v4 = *v7;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void sub_22FFF6E0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (a1)
  {
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    v3 = a2[4];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__count_unique<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if ((std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v4, a2, v2 + 4) & 1) == 0)
      {
        if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v4, v2 + 4, a2))return v5;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

_QWORD *RIO_MTLX::readFromXmlFile(std::string **a1, uint64_t a2, RIO_MTLX::FileSearchPath *a3, uint64_t a4)
{
  std::string *p_str;
  unsigned int v9;
  const RIO_MTLX::FilePath *v10;
  const std::string *v11;
  std::string *v12;
  std::string *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v20[2];
  std::string __str;
  void *__p[2];
  char v23;
  std::string *v24;
  __int128 *v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _QWORD v34[12];

  v34[11] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)RIO_MTLX::PATH_LIST_SEPARATOR);
  RIO_MTLX::getEnvironmentPath((unsigned __int8 **)__p, (RIO_MTLX::FileSearchPath *)&v24);
  RIO_MTLX::FileSearchPath::append((unint64_t)a3, (const RIO_MTLX::FileSearchPath *)&v24);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (v23 < 0)
    operator delete(__p[0]);
  RIO_MTLX::FileSearchPath::find(a3, (__int128 **)a2, (uint64_t)&v24);
  if (&v24 != (std::string **)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)a2, v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
  *(_DWORD *)(a2 + 24) = v27;
  __p[0] = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v27 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0x7FD8uLL;
  v29 = 10241;
  v34[0] = &v26;
  v34[1] = 32728;
  v34[2] = 0;
  v34[3] = 0;
  v24 = (std::string *)&v29;
  v25 = 0;
  v33 = 0;
  v32 = (unint64_t)&v29;
  v26 = v34;
  RIO_MTLX::FilePath::asString((char **)a2, 1, &__str);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v9 = 116;
  if (a4)
  {
    if (*(_BYTE *)a4)
      v9 = 118;
    else
      v9 = 116;
  }
  pugi::xml_document::load_file((uint64_t)&v24, (const char *)p_str, v9, 0, (uint64_t)__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (!a4 || (v11 = *(const std::string **)(a4 + 40), v11 == *(const std::string **)(a4 + 48)))
  {
    v12 = *a1;
    RIO_MTLX::FilePath::asString((char **)a2, 1, &__str);
    std::string::operator=(v12 + 3, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::operator=(*a1 + 3, v11);
  }
  v13 = *a1;
  v14 = (std::__shared_weak_count *)a1[1];
  v20[0] = v13;
  v20[1] = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return pugi::xml_document::_destroy((pugi::xml_document *)&v24);
}

void sub_22FFF717C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a17 < 0)
    operator delete(__p);
  pugi::xml_document::_destroy((pugi::xml_document *)&a24);
  _Unwind_Resume(a1);
}

void RIO_MTLX::`anonymous namespace'::validateParseResult(RIO_MTLX::_anonymous_namespace_ *this, char **a2, const RIO_MTLX::FilePath *a3)
{
  char *v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  std::string v20;
  std::string v21;
  std::string v22;
  void *__p[2];
  int64_t v24;
  std::string v25;
  std::string v26;
  void *v27;
  char v28;

  if (*(_DWORD *)this)
  {
    v5 = (char *)pugi::xml_parse_result::description(this);
    std::string::basic_string[abi:ne180100]<0>(&v27, v5);
    std::to_string(&v26, *((_QWORD *)this + 1));
    std::string::basic_string[abi:ne180100]<0>(&v25, "XML parse error");
    if (*a2 != a2[1])
    {
      RIO_MTLX::FilePath::asString(a2, 1, &v22);
      v6 = std::string::insert(&v22, 0, " in ");
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v24 = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (v24 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if (v24 >= 0)
        v9 = HIBYTE(v24);
      else
        v9 = (std::string::size_type)__p[1];
      std::string::append(&v25, (const std::string::value_type *)v8, v9);
      if (SHIBYTE(v24) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
    }
    std::operator+<char>();
    v10 = std::string::append(&v20, " at character ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v26;
    else
      v12 = (std::string *)v26.__r_.__value_.__r.__words[0];
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    else
      size = v26.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v21, (const std::string::value_type *)v12, size);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v22, ")");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v24 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v24 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    if (v24 >= 0)
      v19 = HIBYTE(v24);
    else
      v19 = (std::string::size_type)__p[1];
    std::string::append(&v25, (const std::string::value_type *)v18, v19);
    if (SHIBYTE(v24) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (v28 < 0)
      operator delete(v27);
  }
}

void sub_22FFF7444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v35 - 65) < 0)
    operator delete(*(void **)(v35 - 88));
  if (*(char *)(v35 - 41) < 0)
    operator delete(*(void **)(v35 - 64));
  if (*(char *)(v35 - 17) < 0)
    operator delete(*(void **)(v35 - 40));
  _Unwind_Resume(exception_object);
}

void sub_22FFF7518()
{
  JUMPOUT(0x22FFF7500);
}

void RIO_MTLX::`anonymous namespace'::documentFromXml(RIO_MTLX::Document *a1, pugi::xml_node *a2, uint64_t *a3, uint64_t a4)
{
  RIO_MTLX::Document *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  std::vector<std::string> **v17;
  const char *v18;
  uint64_t v20;
  char *v21;
  std::vector<std::string> **v22;
  RIO_MTLX *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  std::string *v31;
  unsigned __int8 *v32;
  const void *v33;
  BOOL v34;
  _OWORD *v35;
  __int128 v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::vector<std::string> *v39;
  _BOOL8 v41;
  std::string **v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  std::string *v46;
  uint64_t v47;
  std::string *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  std::string *v54;
  uint64_t v55;
  int64x2_t v56;
  int64x2_t v57;
  uint64_t v58;
  char *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  RIO_MTLX::Document *v83;
  uint64_t *v84;
  uint64_t *v85[2];
  uint64_t *v86;
  std::__shared_weak_count *v87;
  std::string v88;
  std::string *__str;
  __int128 *v90;
  int v91;
  __int128 *v92[4];
  std::string v93;
  __int128 v94;
  std::string __p;
  uint64_t *v96;
  std::vector<std::string> *v97;
  std::vector<std::string> *v98;
  std::vector<std::string> *v99;
  _OWORD v100[2];
  std::vector<std::string> **v101;
  _BYTE v102[24];
  char *v103;
  std::vector<std::string> **v104;
  std::vector<std::string> **v105;
  _QWORD v106[4];
  std::string v107;
  _QWORD v108[3];
  _QWORD *v109;
  uint64_t v110;

  v7 = a1;
  v110 = *MEMORY[0x24BDAC8D0];
  v8 = (const char *)RIO_MTLX::Document::CATEGORY(a1);
  if (v8[23] >= 0)
    v9 = v8;
  else
    v9 = *(const char **)v8;
  v10 = pugi::xml_node::child(a2, v9);
  v88.__r_.__value_.__r.__words[0] = v10;
  if (!v10)
    goto LABEL_149;
  v11 = v10;
  v12 = (std::__shared_weak_count *)*((_QWORD *)v7 + 1);
  v86 = *(uint64_t **)v7;
  v87 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v84 = a3;
  v83 = v7;
  if (a4)
  {
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v108, a4 + 8);
  }
  else
  {
    v108[0] = &off_24FDEE2B0;
    v108[1] = RIO_MTLX::readFromXmlFile;
    v109 = v108;
  }
  v15 = *(uint64_t **)(v11 + 32);
  v96 = v15;
  if (v15)
  {
    v16 = v106;
    v17 = &v99;
    while (1)
    {
      v18 = (const char *)v15[1];
      if (v18 ? v18 == "xi:include" : &str_15 == (_UNKNOWN *)"xi:include")
        break;
      v15 = (uint64_t *)v15[6];
      v96 = v15;
LABEL_131:
      if (!v15)
        goto LABEL_132;
    }
    if (!v109)
    {
LABEL_128:
      v105 = (std::vector<std::string> **)v15;
      if (v15)
        v15 = (uint64_t *)v15[6];
      v96 = v15;
      pugi::xml_node::remove_child((pugi::xml_node *)&v88, (uint64_t **)&v105);
      goto LABEL_131;
    }
    v20 = pugi::xml_node::attribute((pugi::xml_node *)&v96, "href");
    if (v20)
    {
      if (*(_QWORD *)(v20 + 16))
        v21 = *(char **)(v20 + 16);
      else
        v21 = (char *)&str_15;
    }
    else
    {
      v21 = (char *)&str_15;
    }
    v22 = v17;
    v23 = (RIO_MTLX *)std::string::basic_string[abi:ne180100]<0>(&__p, v21);
    if (a4)
    {
      v24 = *(unsigned __int8 **)(a4 + 40);
      v25 = *(unsigned __int8 **)(a4 + 48);
      if (v24 != v25)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        do
        {
          while (1)
          {
            v28 = v24[23];
            v29 = *((_QWORD *)v24 + 1);
            v30 = (v28 & 0x80u) == 0 ? v24[23] : *((_QWORD *)v24 + 1);
            if (v30 == size)
              break;
LABEL_42:
            v24 += 24;
            if (v24 == v25)
              goto LABEL_49;
          }
          if ((v28 & 0x80) == 0)
          {
            if (!v24[23])
              break;
            v31 = p_p;
            v32 = v24;
            while (*v32 == v31->__r_.__value_.__s.__data_[0])
            {
              ++v32;
              v31 = (std::string *)((char *)v31 + 1);
              if (!--v28)
                goto LABEL_49;
            }
            goto LABEL_42;
          }
          v33 = *(const void **)v24;
          v24 += 24;
          v23 = (RIO_MTLX *)memcmp(v33, p_p, v29);
          if ((_DWORD)v23)
            v34 = v24 == v25;
          else
            v34 = 1;
        }
        while (!v34);
      }
    }
LABEL_49:
    RIO_MTLX::Document::createDocument<RIO_MTLX::Document>(v23, &v94);
    if (a4)
    {
      LOWORD(v105) = *(_WORD *)a4;
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v16, a4 + 8);
      memset(&v107, 0, sizeof(v107));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v107, *(__int128 **)(a4 + 40), *(__int128 **)(a4 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 48) - *(_QWORD *)(a4 + 40)) >> 3));
      v17 = v22;
      v35 = (_OWORD *)v107.__r_.__value_.__l.__size_;
      if (v107.__r_.__value_.__l.__size_ < v107.__r_.__value_.__r.__words[2])
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v107.__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v36 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v107.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *v35 = v36;
        }
        v37 = (std::string::size_type)v35 + 24;
LABEL_57:
        v107.__r_.__value_.__l.__size_ = v37;
        if (v97 != v98)
        {
LABEL_103:
          *(_OWORD *)&v88.__r_.__value_.__r.__words[1] = v94;
          if (*((_QWORD *)&v94 + 1))
          {
            v60 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
          }
          RIO_MTLX::FilePath::FilePath(v102, &__p);
          v92[0] = (__int128 *)&v105;
          if (!v109)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, std::string::size_type *, _BYTE *, std::vector<std::string> **, __int128 **))(*v109 + 48))(v109, &v88.__r_.__value_.__l.__size_, v102, &v97, v92);
          *(_QWORD *)&v100[0] = v102;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
          v62 = (std::__shared_weak_count *)v88.__r_.__value_.__r.__words[2];
          if (v88.__r_.__value_.__r.__words[2])
          {
            v63 = (unint64_t *)(v88.__r_.__value_.__r.__words[2] + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          *(_OWORD *)v102 = v94;
          if (*((_QWORD *)&v94 + 1))
          {
            v65 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          RIO_MTLX::Document::importLibrary((uint64_t)v86, (RIO_MTLX::Element **)v102);
          v67 = *(std::__shared_weak_count **)&v102[8];
          if (*(_QWORD *)&v102[8])
          {
            v68 = (unint64_t *)(*(_QWORD *)&v102[8] + 8);
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          RIO_MTLX::XmlReadOptions::~XmlReadOptions((RIO_MTLX::XmlReadOptions *)&v105);
          v70 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
          if (*((_QWORD *)&v94 + 1))
          {
            v71 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v15 = v96;
          goto LABEL_128;
        }
        if (*((char *)v86 + 95) < 0)
          std::string::__init_copy_ctor_external(&v93, (const std::string::value_type *)v86[9], v86[10]);
        else
          v93 = *(std::string *)((_BYTE *)v86 + 3);
        v38 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v38 = v93.__r_.__value_.__l.__size_;
        if (!v38)
        {
LABEL_98:
          if (&v97 != (std::vector<std::string> **)v84 && v97 == v98)
            std::vector<RIO_MTLX::FilePath>::__assign_with_size[abi:ne180100]<RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(&v97, *v84, v84[1], (v84[1] - *v84) >> 5);
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v93.__r_.__value_.__l.__data_);
          goto LABEL_103;
        }
        RIO_MTLX::FilePath::FilePath(v102, &v93);
        RIO_MTLX::FileSearchPath::find((RIO_MTLX::FileSearchPath *)v84, (__int128 **)v102, (uint64_t)v92);
        *(_QWORD *)&v100[0] = v102;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
        if (v92[0] == v92[1])
        {
LABEL_97:
          *(_QWORD *)v102 = v92;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v102);
          goto LABEL_98;
        }
        if (&v97 != (std::vector<std::string> **)v84)
          std::vector<RIO_MTLX::FilePath>::__assign_with_size[abi:ne180100]<RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(&v97, *v84, v84[1], (v84[1] - *v84) >> 5);
        RIO_MTLX::FilePath::getParentPath(v92, (uint64_t)&__str);
        v39 = v97;
        if (v98 < v99)
        {
          if (v97 == v98)
          {
            v97->__begin_ = 0;
            v39->__end_ = 0;
            v39->__end_cap_.__value_ = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v39, (__int128 *)__str, v90, 0xAAAAAAAAAAAAAAABLL * (((char *)v90 - (char *)__str) >> 3));
            LODWORD(v39[1].__begin_) = v91;
            v98 = (std::vector<std::string> *)((char *)v39 + 32);
          }
          else
          {
            std::vector<RIO_MTLX::FilePath>::__move_range((uint64_t)&v97, (uint64_t)v97, (unint64_t)v98, (uint64_t)&v97[1].__end_);
            v41 = v39 <= (std::vector<std::string> *)&__str && v98 > (std::vector<std::string> *)&__str;
            v42 = &__str + 4 * v41;
            if (v39 != (std::vector<std::string> *)v42)
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v39, __str, (__int128 *)v42[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v42[1] - (char *)__str) >> 3));
            LODWORD(v39[1].__begin_) = v91;
          }
          goto LABEL_96;
        }
        v43 = (((char *)v98 - (char *)v97) >> 5) + 1;
        if (v43 >> 59)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v44 = (char *)v99 - (char *)v97;
        if (((char *)v99 - (char *)v97) >> 4 > v43)
          v43 = v44 >> 4;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0)
          v45 = 0x7FFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        v101 = v17;
        if (v45)
        {
          v46 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)v17, v45);
          *(_QWORD *)&v100[0] = v46;
          *((_QWORD *)&v100[0] + 1) = v46;
          *(_QWORD *)&v100[1] = v46;
          *((_QWORD *)&v100[1] + 1) = (char *)v46 + 32 * v47;
          if (v47)
          {
LABEL_95:
            v46->__r_.__value_.__r.__words[0] = 0;
            v46->__r_.__value_.__l.__size_ = 0;
            v46->__r_.__value_.__r.__words[2] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v46, (__int128 *)__str, v90, 0xAAAAAAAAAAAAAAABLL * (((char *)v90 - (char *)__str) >> 3));
            LODWORD(v46[1].__r_.__value_.__l.__data_) = v91;
            *(_QWORD *)&v100[1] += 32;
            std::vector<RIO_MTLX::FilePath>::__swap_out_circular_buffer((uint64_t *)&v97, v100, (uint64_t)v39);
            std::__split_buffer<RIO_MTLX::FilePath>::~__split_buffer((void **)v100);
LABEL_96:
            *(_QWORD *)v102 = &__str;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v102);
            goto LABEL_97;
          }
        }
        else
        {
          memset(v100, 0, sizeof(v100));
        }
        v104 = v17;
        v48 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)v17, 1uLL);
        v49 = (char *)v48;
        *(_QWORD *)v102 = v48;
        *(_QWORD *)&v102[8] = v48;
        v51 = (char *)v48 + 32 * v50;
        *(_QWORD *)&v102[16] = v48;
        v103 = v51;
        v52 = *((_QWORD *)&v100[0] + 1);
        v53 = *(_QWORD *)&v100[1] - *((_QWORD *)&v100[0] + 1);
        if (*(_QWORD *)&v100[1] == *((_QWORD *)&v100[0] + 1))
        {
          v56 = vdupq_n_s64((unint64_t)v48);
          v57 = vdupq_n_s64(*((unint64_t *)&v100[0] + 1));
        }
        else
        {
          v82 = v16;
          v54 = v48;
          v49 = (char *)v48 + (v53 & 0xFFFFFFFFFFFFFFE0);
          v55 = 32 * (v53 >> 5);
          do
          {
            v54->__r_.__value_.__r.__words[0] = 0;
            v54->__r_.__value_.__l.__size_ = 0;
            v54->__r_.__value_.__r.__words[2] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v54, *(__int128 **)v52, *(__int128 **)(v52 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v52 + 8) - *(_QWORD *)v52) >> 3));
            LODWORD(v54[1].__r_.__value_.__l.__data_) = *(_DWORD *)(v52 + 24);
            v54 = (std::string *)((char *)v54 + 32);
            v52 += 32;
            v55 -= 32;
          }
          while (v55);
          v56 = *(int64x2_t *)v102;
          v57 = *(int64x2_t *)((char *)v100 + 8);
          v51 = v103;
          v16 = v82;
        }
        v58 = *(_QWORD *)&v100[0];
        v59 = (char *)*((_QWORD *)&v100[1] + 1);
        v100[0] = v56;
        *(int64x2_t *)&v102[8] = v57;
        *(_QWORD *)&v100[1] = v49;
        *((_QWORD *)&v100[1] + 1) = v51;
        *(_QWORD *)v102 = v58;
        v103 = v59;
        std::__split_buffer<RIO_MTLX::FilePath>::~__split_buffer((void **)v102);
        v46 = *(std::string **)&v100[1];
        v17 = v22;
        goto LABEL_95;
      }
    }
    else
    {
      LOWORD(v105) = 256;
      v106[0] = &off_24FDEE2B0;
      v106[1] = RIO_MTLX::readFromXmlFile;
      v106[3] = v16;
      memset(&v107, 0, sizeof(v107));
      v17 = v22;
    }
    v37 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v107, (__int128 *)&__p);
    goto LABEL_57;
  }
LABEL_132:
  v73 = v109;
  if (v109 == v108)
  {
    v74 = 4;
    v73 = v108;
    v7 = v83;
    goto LABEL_136;
  }
  v7 = v83;
  if (v109)
  {
    v74 = 5;
LABEL_136:
    (*(void (**)(void))(*v73 + 8 * v74))();
  }
  v105 = &v97;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
  if (v87)
  {
    v75 = &v87->__shared_owners_;
    do
      v76 = __ldaxr((unint64_t *)v75);
    while (__stlxr(v76 - 1, (unint64_t *)v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v77 = (uint64_t *)*((_QWORD *)v7 + 1);
  v85[0] = *(uint64_t **)v7;
  v85[1] = v77;
  if (v77)
  {
    v78 = (unint64_t *)(v77 + 1);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  if (!v77)
    goto LABEL_149;
  v80 = (unint64_t *)(v77 + 1);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v81 - 1, v80));
  if (v81)
  {
LABEL_149:
    if (a4)
      goto LABEL_150;
    goto LABEL_151;
  }
  (*(void (**)(uint64_t *))(*v77 + 16))(v77);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v77);
  if (a4)
  {
LABEL_150:
    if (!*(_BYTE *)(a4 + 1))
      return;
  }
LABEL_151:
  RIO_MTLX::Document::upgradeVersion(*(uint64_t ***)v7);
}

void sub_22FFF7E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t *a48,uint64_t a49)
{
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;

  a48 = (uint64_t *)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  a21 = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (a34 < 0)
    operator delete(__p);
  RIO_MTLX::XmlReadOptions::~XmlReadOptions((RIO_MTLX::XmlReadOptions *)(v49 - 200));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  if (a43 < 0)
    operator delete(a38);
  v51 = *(_QWORD **)(v49 - 112);
  if (v51 == (_QWORD *)(v49 - 136))
  {
    v52 = 4;
    v51 = (_QWORD *)(v49 - 136);
  }
  else
  {
    if (!v51)
      goto LABEL_10;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_10:
  *(_QWORD *)(v49 - 200) = &a45;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v49 - 200));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::readFromXmlStream(uint64_t *a1, _QWORD *a2, uint64_t *a3, _BYTE *a4)
{
  unsigned int v8;
  const RIO_MTLX::FilePath *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v17[2];
  void *__p[2];
  uint64_t v19;
  int v20;
  void **v21[3];
  void **v22;
  _QWORD v23[2];
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[12];

  v33[11] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)RIO_MTLX::PATH_LIST_SEPARATOR);
  RIO_MTLX::getEnvironmentPath((unsigned __int8 **)__p, (RIO_MTLX::FileSearchPath *)v23);
  RIO_MTLX::FileSearchPath::append((unint64_t)a3, (const RIO_MTLX::FileSearchPath *)v23);
  v21[0] = (void **)v23;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100](v21);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  v25 = 0u;
  v31 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0x7FD8uLL;
  v27 = 10241;
  v33[0] = &v24;
  v33[1] = 32728;
  v33[2] = 0;
  v33[3] = 0;
  v23[0] = &v27;
  v23[1] = 0;
  v32 = 0;
  v30 = &v27;
  v8 = 116;
  v24 = v33;
  if (a4)
  {
    if (*a4)
      v8 = 118;
    else
      v8 = 116;
  }
  pugi::xml_document::load((uint64_t)v23, a2, v8, 0, (uint64_t)v21);
  __p[0] = 0;
  __p[1] = 0;
  v20 = 0;
  v19 = 0;
  v22 = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  v17[0] = v10;
  v17[1] = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return pugi::xml_document::_destroy((pugi::xml_document *)v23);
}

void sub_22FFF81A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t RIO_MTLX::readFromXmlString(uint64_t *a1, const std::string *a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14[3];
  uint64_t v15[2];
  _QWORD v16[12];
  char v17;
  uint64_t v18;
  void **v19;

  std::istringstream::basic_istringstream[abi:ne180100](v16, a2, 8);
  v7 = *a1;
  v8 = (std::__shared_weak_count *)a1[1];
  v15[0] = v7;
  v15[1] = (uint64_t)v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  memset(v14, 0, sizeof(v14));
  std::vector<RIO_MTLX::FilePath>::__init_with_size[abi:ne180100]<RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(v14, *a3, a3[1], (a3[1] - *a3) >> 5);
  RIO_MTLX::readFromXmlStream(v15, v16, v14, a4);
  v19 = (void **)v14;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v16[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v16[2] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x2348B4DA4](&v18);
}

void sub_22FFF8360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  *(_QWORD *)(v5 - 40) = v4;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 40));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::istringstream::~istringstream((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x24BEDB868];
  v7 = MEMORY[0x24BEDB868] + 64;
  a1[15] = MEMORY[0x24BEDB868] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_22FFF844C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x2348B4DA4](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x2348B4DA4](a1 + 120);
  return a1;
}

_QWORD *RIO_MTLX::writeToXmlStream(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *appended;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[2];
  char *v15;
  _QWORD v16[3];
  _QWORD *v17[2];
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[12];

  v27[11] = *MEMORY[0x24BDAC8D0];
  v19 = 0u;
  v25 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0x7FD8uLL;
  v21 = 10241;
  v27[0] = &v18;
  v27[1] = 32728;
  v27[2] = 0;
  v27[3] = 0;
  v17[0] = &v21;
  v17[1] = 0;
  v26 = 0;
  v24 = &v21;
  v18 = v27;
  appended = pugi::xml_node::append_child(v17, 2u);
  v16[0] = appended;
  pugi::xml_node::set_name((pugi::xml_node *)v16, "materialx");
  v7 = *a1;
  v8 = (std::__shared_weak_count *)a1[1];
  v14[0] = v7;
  v14[1] = v8;
  v15 = appended;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v16[0] = &off_24FDF4C38;
  v16[1] = a2;
  v16[2] = 0;
  pugi::xml_document::save((uint64_t)v17, (uint64_t)v16);
  return pugi::xml_document::_destroy((pugi::xml_document *)v17);
}

void sub_22FFF866C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *RIO_MTLX::`anonymous namespace'::elementToXml(uint64_t a1, pugi::xml_node *a2, uint64_t a3)
{
  RIO_MTLX::Element **v5;
  _BOOL4 v6;
  RIO_MTLX::Element *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  unsigned __int8 *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  char v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::string::size_type v28;
  char *v29;
  std::string::size_type size;
  uint64_t v31;
  int v32;
  uint64_t v33;
  std::string *v34;
  int v35;
  int v36;
  int v37;
  _BOOL4 v38;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  std::string *p_p;
  unsigned __int8 *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  char *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  char *v65;
  _QWORD *result;
  uint64_t v67;
  _QWORD v68[2];
  std::string __p;
  char *appended;
  std::__shared_weak_count *v71;
  char *v72;
  char *v73;
  std::string v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t *v79;
  _QWORD v80[2];
  _BYTE v81[24];
  _BYTE *v82;
  uint64_t v83;

  v5 = (RIO_MTLX::Element **)a1;
  v83 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v6 = *(_BYTE *)a3 != 0;
    a1 = *(_QWORD *)(a3 + 32);
    if (a1)
    {
      if (a1 == a3 + 8)
      {
        v82 = v81;
        a1 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, v81);
      }
      else
      {
        a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        v82 = (_BYTE *)a1;
      }
    }
    else
    {
      v82 = 0;
    }
  }
  else
  {
    v82 = 0;
    v6 = 1;
  }
  v7 = *v5;
  v8 = (char *)*v5 + 48;
  if (*((char *)*v5 + 71) < 0)
  {
    if (!*((_QWORD *)v7 + 7))
      goto LABEL_17;
    v8 = *(char **)v8;
  }
  else if (!*((_BYTE *)*v5 + 71))
  {
    goto LABEL_17;
  }
  v9 = (char *)RIO_MTLX::Element::NAME_ATTRIBUTE((RIO_MTLX::Element *)a1);
  if (v9[23] >= 0)
    v10 = v9;
  else
    v10 = *(char **)v9;
  appended = pugi::xml_node::append_attribute(a2, v10);
  a1 = pugi::xml_attribute::set_value((pugi::xml_attribute *)&appended, v8);
  v7 = *v5;
LABEL_17:
  v11 = (char *)*((_QWORD *)v7 + 25);
  v12 = (char *)*((_QWORD *)v7 + 26);
  if (v11 != v12)
  {
    do
    {
      v13 = v11;
      if (v11[23] < 0)
        v13 = *(char **)v11;
      appended = pugi::xml_node::append_attribute(a2, v13);
      v14 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)*v5 + 20, (unsigned __int8 *)v11);
      if (v14)
        v15 = (char *)(v14 + 40);
      else
        v15 = (char *)RIO_MTLX::EMPTY_STRING(0);
      if (v15[23] < 0)
        v15 = *(char **)v15;
      a1 = pugi::xml_attribute::set_value((pugi::xml_attribute *)&appended, v15);
      v11 += 24;
    }
    while (v11 != v12);
    v7 = *v5;
  }
  v80[0] = 0;
  v80[1] = 0;
  v79 = v80;
  v16 = (uint64_t *)*((_QWORD *)v7 + 17);
  v17 = (uint64_t *)*((_QWORD *)v7 + 18);
  if (v16 != v17)
  {
    while (1)
    {
      v18 = *v16;
      v19 = (std::__shared_weak_count *)v16[1];
      v77 = *v16;
      v78 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
        if (!v82)
          goto LABEL_43;
        v75 = v18;
        v76 = v19;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
        a1 = (uint64_t)v82;
        if (!v82)
          std::__throw_bad_function_call[abi:ne180100]();
      }
      else
      {
        a1 = (uint64_t)v82;
        if (!v82)
          goto LABEL_43;
        v75 = v18;
        v76 = 0;
      }
      a1 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v75);
      v23 = a1;
      v24 = v76;
      if (!v76)
        goto LABEL_42;
      v25 = (unint64_t *)&v76->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        if ((v23 & 1) == 0)
          goto LABEL_124;
      }
      else
      {
LABEL_42:
        if ((a1 & 1) == 0)
          goto LABEL_124;
      }
LABEL_43:
      v27 = v77;
      if (v6)
      {
        if (*(char *)(v77 + 95) < 0)
        {
          v28 = *(_QWORD *)(v77 + 80);
          if (v28)
          {
            std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)(v77 + 72), v28);
            goto LABEL_51;
          }
        }
        else if (*(_BYTE *)(v77 + 95))
        {
          v74 = *(std::string *)(v77 + 72);
LABEL_51:
          RIO_MTLX::Element::getDocument(*v5, &appended);
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
          else
            size = v74.__r_.__value_.__l.__size_;
          v31 = appended[95];
          v32 = (char)v31;
          if ((v31 & 0x80u) != 0)
            v31 = *((_QWORD *)appended + 10);
          if (size == v31)
          {
            if (v32 >= 0)
              v29 = appended + 72;
            else
              v29 = (char *)*((_QWORD *)appended + 9);
            if ((*((_BYTE *)&v74.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              a1 = memcmp(v74.__r_.__value_.__l.__data_, v29, v74.__r_.__value_.__l.__size_);
              v38 = a1 != 0;
            }
            else if (*((_BYTE *)&v74.__r_.__value_.__s + 23))
            {
              v33 = HIBYTE(v74.__r_.__value_.__r.__words[2]) - 1;
              v34 = &v74;
              do
              {
                v36 = v34->__r_.__value_.__s.__data_[0];
                v34 = (std::string *)((char *)v34 + 1);
                v35 = v36;
                v37 = *v29++;
                v38 = v35 != v37;
              }
              while (v35 == v37 && v33-- != 0);
            }
            else
            {
              v38 = 0;
            }
          }
          else
          {
            v38 = 1;
          }
          v40 = v71;
          if (!v71)
            goto LABEL_76;
          v41 = (unint64_t *)&v71->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *, char *))v40->__on_zero_shared)(v40, v29);
            std::__shared_weak_count::__release_weak(v40);
            if (v38)
            {
LABEL_77:
              a1 = std::__tree<std::string>::__count_unique<std::string>((uint64_t)&v79, (const void **)&v74.__r_.__value_.__l.__data_);
              if (!a1)
              {
                if (!pugi::xml_node::attribute(a2, "xmlns:xi"))
                {
                  appended = pugi::xml_node::append_attribute(a2, "xmlns:xi");
                  pugi::xml_attribute::set_value((pugi::xml_attribute *)&appended, "http://www.w3.org/2001/XInclude");
                }
                v43 = pugi::xml_node::append_child((_QWORD **)a2, 2u);
                appended = v43;
                pugi::xml_node::set_name((pugi::xml_node *)&appended, "xi:include");
                v73 = v43;
                v72 = pugi::xml_node::append_attribute((pugi::xml_node *)&v73, "href");
                RIO_MTLX::FilePath::FilePath(&appended, &v74);
                RIO_MTLX::FilePath::asString(&appended, 1, &__p);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_p = &__p;
                else
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                pugi::xml_attribute::set_value((pugi::xml_attribute *)&v72, (char *)p_p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v79, (const void **)&v74.__r_.__value_.__l.__data_, (uint64_t)&v74);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&appended;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              }
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v74.__r_.__value_.__l.__data_);
              goto LABEL_124;
            }
          }
          else
          {
LABEL_76:
            if (v38)
              goto LABEL_77;
          }
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v74.__r_.__value_.__l.__data_);
          v27 = v77;
        }
      }
      v45 = (unsigned __int8 *)RIO_MTLX::CommentElement::CATEGORY((RIO_MTLX::CommentElement *)a1);
      v46 = (_QWORD *)(v27 + 24);
      if (*(char *)(v27 + 47) >= 0)
        v47 = *(unsigned __int8 *)(v27 + 47);
      else
        v47 = *(_QWORD *)(v27 + 32);
      v48 = v45[23];
      v49 = (char)v48;
      if ((v48 & 0x80u) != 0)
        v48 = *((_QWORD *)v45 + 1);
      if (v47 != v48)
        goto LABEL_107;
      if (v49 >= 0)
        v50 = v45;
      else
        v50 = *(unsigned __int8 **)v45;
      if ((*(_BYTE *)(v27 + 47) & 0x80) != 0)
      {
        v46 = (_QWORD *)*v46;
        if (memcmp(v46, v50, *(_QWORD *)(v27 + 32)))
          goto LABEL_110;
      }
      else if (*(_BYTE *)(v27 + 47))
      {
        v51 = (unsigned __int8 *)(v27 + 24);
        v52 = *(unsigned __int8 *)(v27 + 47);
        while (*v51 == *v50)
        {
          ++v51;
          ++v50;
          if (!--v52)
            goto LABEL_118;
        }
LABEL_107:
        if ((*(_BYTE *)(v27 + 47) & 0x80) != 0)
          v46 = (_QWORD *)*v46;
LABEL_110:
        v53 = pugi::xml_node::append_child((_QWORD **)a2, 2u);
        appended = v53;
        pugi::xml_node::set_name((pugi::xml_node *)&appended, (char *)v46);
        v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
        v54 = v78;
        v68[0] = v27;
        v68[1] = v78;
        if (v78)
        {
          v55 = (unint64_t *)&v78->__shared_owners_;
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        if (v54)
        {
          v57 = (unint64_t *)&v54->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        goto LABEL_124;
      }
LABEL_118:
      appended = pugi::xml_node::append_child((_QWORD **)a2, 5u);
      v59 = (unsigned __int8 *)RIO_MTLX::Element::DOC_ATTRIBUTE((RIO_MTLX::Element *)appended);
      v60 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v27 + 160), v59);
      if (v60)
        v61 = (char *)(v60 + 40);
      else
        v61 = (char *)RIO_MTLX::EMPTY_STRING(0);
      if (v61[23] < 0)
        v61 = *(char **)v61;
      a1 = pugi::xml_node::set_value((pugi::xml_node *)&appended, v61);
LABEL_124:
      v62 = v78;
      if (v78)
      {
        v63 = (unint64_t *)&v78->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v16 += 2;
      if (v16 == v17)
      {
        v65 = (char *)v80[0];
        goto LABEL_132;
      }
    }
  }
  v65 = 0;
LABEL_132:
  std::__tree<std::string>::destroy((uint64_t)&v79, v65);
  result = v82;
  if (v82 == v81)
  {
    v67 = 4;
    result = v81;
  }
  else
  {
    if (!v82)
      return result;
    v67 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v67))();
}

void sub_22FFF8D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35)
{
  _Unwind_Resume(exception_object);
}

std::string *RIO_MTLX::GraphElement::addNode@<X0>(RIO_MTLX::Node *a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, const std::string *a4@<X3>, uint64_t *a5@<X8>)
{
  std::string *v8;
  uint64_t *v9;
  __int128 *v10;

  RIO_MTLX::Element::addChild<RIO_MTLX::Node>(a1, a3, a5);
  v8 = std::string::operator=((std::string *)(*a5 + 24), a2);
  v9 = (uint64_t *)*a5;
  v10 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v8);
  return RIO_MTLX::Element::setAttribute(v9, v10, a4);
}

void sub_22FFF8E80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RIO_MTLX::`anonymous namespace'::elementFromXml(std::string *a1, uint64_t **a2, _BYTE *a3)
{
  std::string::size_type v5;
  _QWORD *v6;
  std::string::__raw *v7;
  const char *v8;
  _QWORD *v9;
  size_t v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  RIO_MTLX::CommentElement *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *size;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  char *v43;
  RIO_MTLX::Element *v44;
  __int128 *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  size_t v52;
  _QWORD *i;
  const char *v54;
  _QWORD *v55;
  void *v56;
  std::string __p;
  __int128 v58;
  __int128 v59;
  std::string v60;
  __int128 v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::string::size_type v65;
  std::string v66;
  __int128 v67;
  unsigned __int8 v68;

  v5 = a1->__r_.__value_.__r.__words[0];
  if (!a1->__r_.__value_.__r.__words[0])
    goto LABEL_27;
  v6 = *(_QWORD **)(v5 + 56);
  if (!v6)
    goto LABEL_26;
  v7 = (std::string::__raw *)a1;
  do
  {
    if (v6[1])
      v8 = (const char *)v6[1];
    else
      v8 = (const char *)&str_15;
    v9 = RIO_MTLX::Element::NAME_ATTRIBUTE((RIO_MTLX::Element *)a1);
    v10 = strlen(v8);
    if (*((char *)v9 + 23) < 0)
    {
      if (v10 == v9[1])
      {
        if (v10 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v9 = (_QWORD *)*v9;
LABEL_13:
        a1 = (std::string *)memcmp(v9, v8, v10);
        if (!(_DWORD)a1)
          goto LABEL_24;
      }
    }
    else if (v10 == *((unsigned __int8 *)v9 + 23))
    {
      goto LABEL_13;
    }
    v11 = *a2;
    if (v6[1])
      v12 = (char *)v6[1];
    else
      v12 = (char *)&str_15;
    std::string::basic_string[abi:ne180100]<0>(&v67, v12);
    if (v6[2])
      v13 = (char *)v6[2];
    else
      v13 = (char *)&str_15;
    std::string::basic_string[abi:ne180100]<0>(&v66, v13);
    a1 = RIO_MTLX::Element::setAttribute(v11, &v67, &v66);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if ((char)v68 < 0)
      operator delete((void *)v67);
LABEL_24:
    v6 = (_QWORD *)v6[4];
  }
  while (v6);
  v5 = v7->__words[0];
  if (v7->__words[0])
  {
LABEL_26:
    v14 = *(_QWORD *)(v5 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v64 = v14;
  v65 = v5;
  if (v14)
  {
    while (1)
    {
      if (*(_QWORD *)(v14 + 8))
        v51 = *(char **)(v14 + 8);
      else
        v51 = (char *)&str_15;
      v52 = (size_t)std::string::basic_string[abi:ne180100]<0>(&v67, v51);
      memset(&v66, 0, sizeof(v66));
      for (i = *(_QWORD **)(v14 + 56); i; i = (_QWORD *)i[4])
      {
        if (i[1])
          v54 = (const char *)i[1];
        else
          v54 = (const char *)&str_15;
        v55 = RIO_MTLX::Element::NAME_ATTRIBUTE((RIO_MTLX::Element *)v52);
        v52 = strlen(v54);
        if (*((char *)v55 + 23) < 0)
        {
          if (v52 != v55[1])
            continue;
          if (v52 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v55 = (_QWORD *)*v55;
        }
        else if (v52 != *((unsigned __int8 *)v55 + 23))
        {
          continue;
        }
        v52 = memcmp(v55, v54, v52);
        if (!(_DWORD)v52)
        {
          if (i[2])
            v56 = (void *)i[2];
          else
            v56 = &str_15;
          MEMORY[0x2348B4AD4](&v66, v56);
          break;
        }
      }
LABEL_31:
      v15 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(*a2 + 12, (unsigned __int8 *)&v66);
      if (!v15)
        break;
      v16 = *((_QWORD *)v15 + 5);
      v17 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      v62 = v16;
      v63 = v17;
      if (!v16)
        goto LABEL_39;
      if (v17)
        goto LABEL_89;
LABEL_93:
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if ((char)v68 < 0)
        operator delete((void *)v67);
      v14 = *(_QWORD *)(v64 + 48);
      v64 = v14;
      if (!v14)
        goto LABEL_118;
    }
    v62 = 0;
    v63 = 0;
LABEL_39:
    v20 = (uint64_t)*a2;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v60, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
    else
      v60 = v66;
    RIO_MTLX::Element::addChildOfCategory(v20, (uint64_t)&v67, (uint64_t)&v60, &v61);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
    v59 = v61;
    if (*((_QWORD *)&v61 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (!v21)
      goto LABEL_51;
    v25 = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!a3)
        goto LABEL_83;
    }
    else
    {
LABEL_51:
      if (!a3)
        goto LABEL_83;
    }
    if (*a3)
    {
      v27 = v68;
      if ((v68 & 0x80u) != 0)
        v27 = *((_QWORD *)&v67 + 1);
      if (!v27)
      {
        v28 = *a2;
        v58 = v61;
        if (*((_QWORD *)&v61 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v31 = RIO_MTLX::CommentElement::CATEGORY(v24);
        RIO_MTLX::Element::changeChildCategory(v28, (std::string **)&v58, (uint64_t)v31, (uint64_t *)&__p);
        v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
        v61 = v32;
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v37 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
        if (*((_QWORD *)&v58 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v42 = (uint64_t *)v61;
        if (v64)
        {
          if (*(_QWORD *)(v64 + 16))
            v43 = *(char **)(v64 + 16);
          else
            v43 = (char *)&str_15;
        }
        else
        {
          v43 = (char *)&str_15;
        }
        v44 = (RIO_MTLX::Element *)std::string::basic_string[abi:ne180100]<0>(&__p, v43);
        v45 = (__int128 *)RIO_MTLX::Element::DOC_ATTRIBUTE(v44);
        RIO_MTLX::Element::setAttribute(v42, v45, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
LABEL_83:
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
    if (*((_QWORD *)&v61 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v17 = v63;
    if (!v63)
      goto LABEL_93;
LABEL_89:
    v49 = (unint64_t *)&v17->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    goto LABEL_93;
  }
LABEL_118:
  if (v65 != v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, (char *)&str_15);
    memset(&v66, 0, sizeof(v66));
    goto LABEL_31;
  }
}

void sub_22FFF93C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (*(char *)(v29 - 89) < 0)
    operator delete(*(void **)(v29 - 112));
  if (*(char *)(v29 - 65) < 0)
    operator delete(*(void **)(v29 - 88));
  _Unwind_Resume(a1);
}

void std::vector<RIO_MTLX::FilePath>::__assign_with_size[abi:ne180100]<RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(std::vector<std::string> **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  std::vector<std::string> *v10;
  void **v11;
  std::vector<std::string> *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;

  v9 = (uint64_t)(a1 + 2);
  v8 = (uint64_t)a1[2];
  v10 = *a1;
  if (a4 > (v8 - (uint64_t)*a1) >> 5)
  {
    if (v10)
    {
      v11 = (void **)a1[1];
      v12 = *a1;
      if (v11 != (void **)v10)
      {
        do
        {
          v11 -= 4;
          v21 = v11;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
        }
        while (v11 != (void **)v10);
        v12 = *a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v13 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v13 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    std::vector<RIO_MTLX::FilePath>::__vallocate[abi:ne180100](a1, v14);
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(v9, a2, a3, (uint64_t)a1[1]);
    goto LABEL_16;
  }
  v16 = ((char *)a1[1] - (char *)v10) >> 5;
  if (v16 < a4)
  {
    v17 = a2 + 32 * v16;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<RIO_MTLX::FilePath *,RIO_MTLX::FilePath *,RIO_MTLX::FilePath *>((int)&v21, a2, v17, v10);
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(v9, v17, a3, (uint64_t)a1[1]);
LABEL_16:
    a1[1] = (std::vector<std::string> *)v15;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<RIO_MTLX::FilePath *,RIO_MTLX::FilePath *,RIO_MTLX::FilePath *>((int)&v21, a2, a3, v10);
  v19 = v18;
  v20 = (void **)a1[1];
  if (v20 != v18)
  {
    do
    {
      v20 -= 4;
      v21 = v20;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
    }
    while (v20 != v19);
  }
  a1[1] = (std::vector<std::string> *)v19;
}

void sub_22FFF95F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22FFF95F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void RIO_MTLX::XmlReadOptions::~XmlReadOptions(RIO_MTLX::XmlReadOptions *this)
{
  RIO_MTLX::XmlReadOptions *v2;
  uint64_t v3;
  void **v4;

  v4 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (RIO_MTLX::XmlReadOptions *)*((_QWORD *)this + 4);
  if (v2 == (RIO_MTLX::XmlReadOptions *)((char *)this + 8))
  {
    v3 = 4;
    v2 = (RIO_MTLX::XmlReadOptions *)((char *)this + 8);
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void RIO_MTLX::Element::addChild<RIO_MTLX::Node>(RIO_MTLX::Node *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::string::size_type size;
  char *v6;
  char *v7;
  size_t v8;
  void **v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p[2];
  char v23;
  std::string v24;
  std::string v25;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v25.__r_.__value_.__l.__size_;
  if (!size)
  {
    v6 = (char *)RIO_MTLX::Node::CATEGORY(a1);
    v7 = v6;
    if (v6[23] >= 0)
      v8 = v6[23];
    else
      v8 = *((_QWORD *)v6 + 1);
    v9 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
    if (v23 < 0)
      v9 = (void **)__p[0];
    if (v8)
    {
      if (v7[23] >= 0)
        v10 = v7;
      else
        v10 = *(char **)v7;
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)v9 + v8) = 49;
    RIO_MTLX::Element::createValidChildName((uint64_t)a1, (uint64_t)__p, (uint64_t)&v24);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v25 = v24;
    *((_BYTE *)&v24.__r_.__value_.__s + 23) = 0;
    v24.__r_.__value_.__s.__data_[0] = 0;
    if (v23 < 0)
      operator delete(__p[0]);
  }
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v24, (_QWORD *)a1 + 1);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::Node,std::allocator<RIO_MTLX::Node>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>((__int128 *)&v24, (uint64_t)&v25, a3);
  v11 = (std::__shared_weak_count *)v24.__r_.__value_.__l.__size_;
  if (v24.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v24.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)a3[1];
  v20 = *a3;
  v21 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  (*(void (**)(RIO_MTLX::Node *, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v20);
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_22FFF98E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<RIO_MTLX::Node,std::allocator<RIO_MTLX::Node>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>(__int128 *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x128uLL);
  std::__shared_ptr_emplace<RIO_MTLX::Node>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::Node>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_22FFF9998(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<RIO_MTLX::Node>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::Node>,0>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDE43C0;
  std::allocator<RIO_MTLX::Node>::construct[abi:ne180100]<RIO_MTLX::Node,std::shared_ptr<RIO_MTLX::Element>,std::string &>((uint64_t)&v5, (RIO_MTLX::Node *)(a1 + 3), a2, a3);
  return a1;
}

void sub_22FFF99F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<RIO_MTLX::Node>::construct[abi:ne180100]<RIO_MTLX::Node,std::shared_ptr<RIO_MTLX::Element>,std::string &>(uint64_t a1, RIO_MTLX::Node *a2, __int128 *a3, uint64_t a4)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  RIO_MTLX::Node::Node(a2, (uint64_t *)&v7, a4);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_22FFF9A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*),std::allocator<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*)>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*),std::allocator<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*)>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDEE2B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*),std::allocator<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*)>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDEE2B0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*),std::allocator<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*)>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  void (*v8)(uint64_t *, std::string *, _QWORD *, _QWORD);
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[3];
  std::string v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::string *v18;

  v8 = *(void (**)(uint64_t *, std::string *, _QWORD *, _QWORD))(a1 + 8);
  v9 = (std::__shared_weak_count *)a2[1];
  v16 = *a2;
  v17 = v9;
  *a2 = 0;
  a2[1] = 0;
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v15 = *(_DWORD *)(a3 + 24);
  memset(v13, 0, sizeof(v13));
  std::vector<RIO_MTLX::FilePath>::__init_with_size[abi:ne180100]<RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(v13, *a4, a4[1], (a4[1] - *a4) >> 5);
  v8(&v16, &v14, v13, *a5);
  v18 = (std::string *)v13;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_22FFF9C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  *(_QWORD *)(v18 - 56) = v17;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 56));
  *(_QWORD *)(v18 - 56) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 56));
  v20 = a17;
  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*),std::allocator<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*)>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*),std::allocator<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*)>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::target_type()
{
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_22FFF9D24(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

uint64_t RIOPxrUsdUtilsCreateTopLevelEntityFromStage(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v2;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  uint64_t *EditTarget;
  pxrInternal__aapl__pxrReserved__::UsdStage *v10;
  pxrInternal__aapl__pxrReserved__ *PseudoRoot;
  uint64_t *UsdPrimDefaultPredicate;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::SdfPath *v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  unsigned int *v20;
  unsigned int v21;
  pxrInternal__aapl__pxrReserved__::UsdStage *v22;
  _BYTE *v23;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim *IsInstanceable;
  pxrInternal__aapl__pxrReserved__ *IsA;
  _BYTE *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t i;
  pxrInternal__aapl__pxrReserved__::SdfPath *v34;
  pxrInternal__aapl__pxrReserved__::SdfPath *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  char *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  pxrInternal__aapl__pxrReserved__::SdfPath *v65;
  uint64_t *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t String;
  char *v71;
  size_t v72;
  std::string *v73;
  char *v74;
  void **v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  const std::string::value_type *v81;
  std::string::size_type v82;
  std::string *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  pxrInternal__aapl__pxrReserved__::UsdStage *v96;
  const pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t *v102;
  uint64_t *v103;
  BOOL v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  pxrInternal__aapl__pxrReserved__::UsdStage *v111;
  pxrInternal__aapl__pxrReserved__::SdfPath *RootLayer;
  pxrInternal__aapl__pxrReserved__::UsdStage *v113;
  pxrInternal__aapl__pxrReserved__::SdfPath *v114;
  __n128 *v115;
  uint64_t v116;
  __int128 *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  pxrInternal__aapl__pxrReserved__::UsdStage *v127;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  pxrInternal__aapl__pxrReserved__::UsdStage *v133;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  pxrInternal__aapl__pxrReserved__::UsdStage *v139;
  unint64_t v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  unint64_t Data;
  unsigned int *v147;
  unsigned int v148;
  pxrInternal__aapl__pxrReserved__::SdfPath *k;
  pxrInternal__aapl__pxrReserved__::SdfPath *v150;
  const pxrInternal__aapl__pxrReserved__::TfToken *v151;
  pxrInternal__aapl__pxrReserved__::UsdStage *v152;
  unsigned int *v153;
  unsigned int v154;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v155;
  unsigned int *v156;
  unsigned int v157;
  pxrInternal__aapl__pxrReserved__::UsdStage *v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  const void *v163;
  unsigned int *v164;
  uint64_t v165;
  __n128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int *v170;
  unsigned int v171;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  uint64_t j;
  pxrInternal__aapl__pxrReserved__::SdfPath *v179;
  pxrInternal__aapl__pxrReserved__::SdfPath *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  pxrInternal__aapl__pxrReserved__::SdfPath *v184;
  pxrInternal__aapl__pxrReserved__::SdfPath *v185;
  unint64_t v186;
  unsigned int *v187;
  void **v188;
  _BYTE v189[4];
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  std::string v197;
  int v198;
  __int16 v199;
  std::string v200;
  int v201;
  unsigned __int8 v202;
  unsigned __int8 v203;
  uint64_t v204;
  void *__p[2];
  unsigned __int8 v206;
  uint64_t *v207;
  _QWORD *v208[2];
  char *v209;
  unint64_t v210;
  unint64_t v211;
  unsigned int *v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  __n128 v216;
  __int128 v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  __int128 v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;

  v230 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)&v219 + 1) = 0;
  *(_QWORD *)&v220 = 0;
  *(_QWORD *)&v219 = (char *)&v219 + 8;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v219, *((char **)&v219 + 1));
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory();
  v184 = 0;
  v185 = 0;
  v186 = 0;
  v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v2);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v181);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v3);
  v219 = 0uLL;
  *(_QWORD *)&v220 = 0;
  *(_QWORD *)&v217 = 0;
  v216.n128_u64[1] = 0;
  v216.n128_u64[0] = (unint64_t)&v216.n128_u64[1];
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous();
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v216, (_QWORD *)v216.n128_u64[1]);
  if (SBYTE7(v220) < 0)
    operator delete((void *)v219);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v219, (uint64_t *)&v183);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open();
  v4 = *((_QWORD *)&v219 + 1);
  if (*((_QWORD *)&v219 + 1))
  {
    v5 = (unsigned int *)(*((_QWORD *)&v219 + 1) + 8);
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v210 = 0;
  v208[1] = 0;
  v209 = 0;
  v211 = 0;
  v207 = (uint64_t *)v208;
  v208[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "relocated");
  MEMORY[0x2348B2764](&v204, __p);
  v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v212);
  EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v8);
  pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(EditTarget);
  pxrInternal__aapl__pxrReserved__::SdfLayer::InsertSubLayerPath();
  v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v212);
  PseudoRoot = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v10);
  UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(PseudoRoot);
  v14 = *UsdPrimDefaultPredicate;
  v13 = UsdPrimDefaultPredicate[1];
  v15 = UsdPrimDefaultPredicate[2];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v14 & 0x2000) != 0 || (v13 & 0x2000) == 0))
  {
    v14 |= 0x2000uLL;
    v13 &= ~0x2000uLL;
  }
  *(_QWORD *)&v213 = v14;
  *((_QWORD *)&v213 + 1) = v13;
  *(_QWORD *)&v214 = v15;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v216, (uint64_t *)&v213, (uint64_t)&v219);
  if ((BYTE8(v217) & 7) != 0)
  {
    v16 = (unsigned int *)(*((_QWORD *)&v217 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v173 = a1;
  v174 = (uint64_t *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v217);
  if (v216.n128_u64[1])
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v216.n128_i64[1]);
  v216.n128_u64[0] = v219;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v216.n128_u32[2], (_DWORD *)&v219 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v216.n128_u32[3], (_DWORD *)&v219 + 3);
  v217 = v220;
  v218 = v221;
  *(_QWORD *)&v213 = v222;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v213 + 2, &v223);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v213 + 3, &v224);
  v214 = v225;
  v215 = v226;
  while (*(_OWORD *)&v216 != v213
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v217, (uint64_t)&v214))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v216, (uint64_t)&v227);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v227, &v200);
    v18 = v185;
    if ((unint64_t)v185 >= v186)
    {
      v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v184, &v200);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v185, &v200);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v18 + 1, (_DWORD *)v200.__r_.__value_.__r.__words + 1);
      v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v18 + 8);
    }
    v185 = v19;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
    if ((BYTE8(v228) & 7) != 0)
    {
      v20 = (unsigned int *)(*((_QWORD *)&v228 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v228);
    if (*((_QWORD *)&v227 + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v227 + 1));
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v216);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v213 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v216.n128_i64[1]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v219 + 8);
  v22 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v212);
  pxrInternal__aapl__pxrReserved__::UsdStage::TraverseAll(v22);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&v216, (uint64_t)&v200);
  v197.__r_.__value_.__r.__words[0] = v216.n128_u64[1];
  v197.__r_.__value_.__l.__size_ = (std::string::size_type)&v216;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v198 = 0;
  v199 = 0;
  v23 = v189;
  while (*(_OWORD *)&v200.__r_.__value_.__l.__data_ != *(_OWORD *)&v197.__r_.__value_.__l.__data_
       || v200.__r_.__value_.__r.__words[2] != v197.__r_.__value_.__r.__words[2]
       || v201 != v198
       || v202 != v199
       || v203 != HIBYTE(v199))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v200, (uint64_t)&v193);
    IsInstanceable = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::IsInstanceable((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v193);
    if ((_DWORD)IsInstanceable)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(IsInstanceable);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      IsA = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if ((_DWORD)IsA)
      {
        v26 = v23;
        v27 = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(IsA);
        v29 = *v27;
        v28 = v27[1];
        v30 = v27[2];
        if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
          && ((v29 & 0x2000) != 0 || (v28 & 0x2000) == 0))
        {
          v29 |= 0x2000uLL;
          v28 &= ~0x2000uLL;
        }
        *(_QWORD *)&v213 = v29;
        *((_QWORD *)&v213 + 1) = v28;
        *(_QWORD *)&v214 = v30;
        pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v193, (uint64_t *)&v213, (uint64_t)&v219);
        *(_QWORD *)&v213 = v219;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v213 + 2, (_DWORD *)&v219 + 2);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v213 + 3, (_DWORD *)&v219 + 3);
        v214 = v220;
        v215 = v221;
        *(_QWORD *)&v227 = v222;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v227 + 2, &v223);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v227 + 3, &v224);
        v228 = v225;
        v229 = v226;
        v23 = v26;
        if (v213 == v227)
          v31 = pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v214, (uint64_t)&v228);
        else
          v31 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v227 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v213 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v219 + 8);
        if (v31)
          pxrInternal__aapl__pxrReserved__::UsdPrim::SetInstanceable((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v193);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v193);
    v32 = *((_QWORD *)&v213 + 1);
    v175 = *((_QWORD *)&v213 + 1);
    for (i = v213; i != v32; i += 32)
    {
      v227 = 0uLL;
      *(_QWORD *)&v228 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
      v34 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v227 + 1);
      v179 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v227 + 1);
      v35 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v227;
      for (j = i; v35 != v34; v35 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v35 + 8))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v193, &v191);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes((pxrInternal__aapl__pxrReserved__::SdfPath *)&v191);
        v36 = v219;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v192, (_DWORD *)v219);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v192 + 1, (_DWORD *)(v36 + 4));
        v188 = (void **)&v219;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v188);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v191);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(v35);
        v37 = v219;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v191, (_DWORD *)v219);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v191 + 1, (_DWORD *)(v37 + 4));
        v188 = (void **)&v219;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v188);
        if (v192 != v191)
        {
          v38 = v210;
          if (v210 >= v211)
          {
            v41 = (uint64_t)(v210 - (_QWORD)v209) >> 5;
            if ((unint64_t)(v41 + 1) >> 59)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v39 = v23;
            v42 = (uint64_t)(v211 - (_QWORD)v209) >> 4;
            if (v42 <= v41 + 1)
              v42 = v41 + 1;
            if (v211 - (unint64_t)v209 >= 0x7FFFFFFFFFFFFFE0)
              v43 = 0x7FFFFFFFFFFFFFFLL;
            else
              v43 = v42;
            if (v43)
            {
              if (v43 >> 59)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v44 = (char *)operator new(32 * v43);
            }
            else
            {
              v44 = 0;
            }
            v45 = (uint64_t)&v44[32 * v41];
            v46 = &v44[32 * v43];
            std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>(v45, i);
            v40 = v45 + 32;
            v47 = (char *)v210;
            v48 = v209;
            if ((char *)v210 == v209)
            {
              v209 = (char *)v45;
              v210 = v45 + 32;
              v211 = (unint64_t)v46;
            }
            else
            {
              v49 = (unint64_t)v46;
              v50 = 0;
              do
              {
                v51 = v45 + v50;
                *(_DWORD *)(v51 - 32) = *(_DWORD *)&v47[v50 - 32];
                *(_QWORD *)(v51 - 24) = *(_QWORD *)&v47[v50 - 24];
                *(_QWORD *)&v47[v50 - 24] = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v45 + v50 - 16), &v47[v50 - 16]);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v45 + v50 - 12), &v47[v50 - 12]);
                *(_QWORD *)(v51 - 8) = *(_QWORD *)&v47[v50 - 8];
                *(_QWORD *)&v47[v50 - 8] = 0;
                v50 -= 32;
              }
              while (&v47[v50] != v48);
              v47 = v209;
              v52 = v210;
              v209 = (char *)(v45 + v50);
              v210 = v45 + 32;
              v211 = v49;
              if ((char *)v52 == v47)
              {
                v39 = v189;
              }
              else
              {
                v39 = v189;
                do
                {
                  v52 -= 32;
                  std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::destroy[abi:ne180100]((uint64_t)&v211, v52);
                }
                while ((char *)v52 != v47);
              }
            }
            if (v47)
              operator delete(v47);
            i = j;
          }
          else
          {
            v39 = v23;
            std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>(v210, i);
            v40 = v38 + 32;
          }
          v210 = v40;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v188, &v191);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v188 + 1, (_DWORD *)&v191 + 1);
          v23 = v39;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v39, &v192);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v190, (_DWORD *)&v192 + 1);
          std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>((uint64_t)&v219, i, v35);
          v53 = std::map<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair,std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>,std::allocator<std::pair<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath> const,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>>>::operator[](&v207, (uint64_t)&v219);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v53, (int *)&v188);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v53 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v53 + 1), v39);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v53 + 12);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v221);
          if ((BYTE8(v220) & 7) != 0)
          {
            v54 = (unsigned int *)(*((_QWORD *)&v220 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v55 = __ldxr(v54);
            while (__stlxr(v55 - 2, v54));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v34 = v179;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v220);
          if (*((_QWORD *)&v219 + 1))
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v219 + 1));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v23);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v188);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v191);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v192);
      }
      *(_QWORD *)&v219 = &v227;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
      v32 = v175;
    }
    *(_QWORD *)&v219 = &v213;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
    if ((v196 & 7) != 0)
    {
      v56 = (unsigned int *)(v196 & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stlxr(v57 - 2, v56));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v195);
    if (v194)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v194);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v200);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v197.__r_.__value_.__r.__words[2]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200.__r_.__value_.__r.__words[2]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v217);
  v58 = v209;
  v176 = v210;
  if (v209 != (char *)v210)
  {
    do
    {
      v216.n128_u32[0] = *(_DWORD *)v58;
      v59 = *((_QWORD *)v58 + 1);
      v216.n128_u64[1] = v59;
      if (v59)
      {
        v60 = (unint64_t *)(v59 + 48);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v217, (_DWORD *)v58 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v217 + 1, (_DWORD *)v58 + 5);
      v62 = *((_QWORD *)v58 + 3);
      *((_QWORD *)&v217 + 1) = v62;
      if ((v62 & 7) != 0)
      {
        v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 2, v63));
        if ((v64 & 1) == 0)
          *((_QWORD *)&v217 + 1) &= 0xFFFFFFFFFFFFFFF8;
      }
      v177 = v58;
      v213 = 0uLL;
      *(_QWORD *)&v214 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
      v227 = 0uLL;
      *(_QWORD *)&v228 = 0;
      v180 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v213 + 1);
      v65 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v213;
      if ((_QWORD)v213 != *((_QWORD *)&v213 + 1))
      {
        do
        {
          std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>((uint64_t)&v219, (uint64_t)&v216, v65);
          v66 = std::map<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair,std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>,std::allocator<std::pair<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath> const,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>>>::operator[](&v207, (uint64_t)&v219);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v193, v66);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v193 + 1, (_DWORD *)v66 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v194, (_DWORD *)v66 + 2);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v194 + 1, (_DWORD *)v66 + 3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v221);
          if ((BYTE8(v220) & 7) != 0)
          {
            v67 = (unsigned int *)(*((_QWORD *)&v220 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v68 = __ldxr(v67);
            while (__stlxr(v68 - 2, v67));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v220);
          if (*((_QWORD *)&v219 + 1))
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v219 + 1));
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(v65);
          v69 = v219;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v188, (_DWORD *)v219);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v188 + 1, (_DWORD *)(v69 + 4));
          v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v192, &v194);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v192 + 1, (_DWORD *)&v194 + 1);
          String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v192);
          v71 = (char *)String;
          if (*(char *)(String + 23) >= 0)
            v72 = *(unsigned __int8 *)(String + 23);
          else
            v72 = *(_QWORD *)(String + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)&v197, v72 + 1);
          if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v73 = &v197;
          else
            v73 = (std::string *)v197.__r_.__value_.__r.__words[0];
          if (v72)
          {
            if (v71[23] >= 0)
              v74 = v71;
            else
              v74 = *(char **)v71;
            memmove(v73, v74, v72);
          }
          *(_WORD *)((char *)&v73->__r_.__value_.__l.__data_ + v72) = 47;
          if ((v206 & 0x80u) == 0)
            v75 = __p;
          else
            v75 = (void **)__p[0];
          if ((v206 & 0x80u) == 0)
            v76 = v206;
          else
            v76 = (std::string::size_type)__p[1];
          v77 = std::string::append(&v197, (const std::string::value_type *)v75, v76);
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v200.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          v79 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v65);
          v80 = *(char *)(v79 + 23);
          if (v80 >= 0)
            v81 = (const std::string::value_type *)v79;
          else
            v81 = *(const std::string::value_type **)v79;
          if (v80 >= 0)
            v82 = *(unsigned __int8 *)(v79 + 23);
          else
            v82 = *(_QWORD *)(v79 + 8);
          v83 = std::string::append(&v200, v81, v82);
          v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
          *(_QWORD *)&v220 = *((_QWORD *)&v83->__r_.__value_.__l + 2);
          v219 = v84;
          v83->__r_.__value_.__l.__size_ = 0;
          v83->__r_.__value_.__r.__words[2] = 0;
          v83->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v200.__r_.__value_.__l.__data_);
          if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v197.__r_.__value_.__l.__data_);
          MEMORY[0x2348B26F8](&v200, &v219);
          v85 = *((_QWORD *)&v227 + 1);
          if (*((_QWORD *)&v227 + 1) >= (unint64_t)v228)
          {
            v86 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v227, &v200);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v227 + 1), &v200);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v85 + 4), (_DWORD *)v200.__r_.__value_.__r.__words + 1);
            v86 = v85 + 8;
          }
          *((_QWORD *)&v227 + 1) = v86;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
          if (SBYTE7(v220) < 0)
            operator delete((void *)v219);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v192);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v188);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v194);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v193);
          v65 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v65 + 8);
        }
        while (v65 != v180);
        if ((_QWORD)v227 != *((_QWORD *)&v227 + 1))
          pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets();
      }
      *(_QWORD *)&v219 = &v227;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
      *(_QWORD *)&v219 = &v213;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
      if ((BYTE8(v217) & 7) != 0)
      {
        v87 = (unsigned int *)(*((_QWORD *)&v217 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v88 = __ldxr(v87);
        while (__stlxr(v88 - 2, v87));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v217);
      if (v216.n128_u64[1])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v216.n128_i64[1]);
      v58 = v177 + 32;
    }
    while (v177 + 32 != (char *)v176);
  }
  v89 = v207;
  if (v207 != (uint64_t *)v208)
  {
    do
    {
      LODWORD(v219) = *((_DWORD *)v89 + 8);
      v90 = v89[5];
      *((_QWORD *)&v219 + 1) = v90;
      if (v90)
      {
        v91 = (unint64_t *)(v90 + 48);
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v220, (_DWORD *)v89 + 12);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v220 + 1, (_DWORD *)v89 + 13);
      v93 = v89[7];
      *((_QWORD *)&v220 + 1) = v93;
      if ((v93 & 7) != 0)
      {
        v94 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 2, v94));
        if ((v95 & 1) == 0)
          *((_QWORD *)&v220 + 1) &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v221, (_DWORD *)v89 + 16);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v221 + 1, (_DWORD *)v89 + 17);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v222, (_DWORD *)v89 + 18);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v222 + 1, (_DWORD *)v89 + 19);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v223, (_DWORD *)v89 + 20);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v224, (_DWORD *)v89 + 21);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v200, &v222);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v200.__r_.__value_.__r.__words + 1, (_DWORD *)&v222 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v197, &v223);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v197.__r_.__value_.__r.__words + 1, &v224);
      v96 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v212);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v197, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v204);
      NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v200);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v227, NameToken);
      pxrInternal__aapl__pxrReserved__::UsdStage::OverridePrim(v96, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v213);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v213);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v227);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v216);
      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v227, 0.0, 1.0);
      pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
      if ((BYTE8(v214) & 7) != 0)
      {
        v98 = (unsigned int *)(*((_QWORD *)&v214 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v214);
      if (*((_QWORD *)&v213 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v213 + 1));
      if ((BYTE8(v217) & 7) != 0)
      {
        v100 = (unsigned int *)(*((_QWORD *)&v217 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v217);
      if (v216.n128_u64[1])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v216.n128_i64[1]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v197);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
      std::pair<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath> const,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>::~pair((uint64_t)&v219);
      v102 = (uint64_t *)v89[1];
      if (v102)
      {
        do
        {
          v103 = v102;
          v102 = (uint64_t *)*v102;
        }
        while (v102);
      }
      else
      {
        do
        {
          v103 = (uint64_t *)v89[2];
          v104 = *v103 == (_QWORD)v89;
          v89 = v103;
        }
        while (!v104);
      }
      v89 = v103;
    }
    while (v103 != (uint64_t *)v208);
  }
  if ((v204 & 7) != 0)
  {
    v105 = (unsigned int *)(v204 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  if ((char)v206 < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::__map_value_compare<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>,true>,std::allocator<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>>>::destroy(v208[0]);
  *(_QWORD *)&v219 = &v209;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v212);
  v107 = v182;
  if (v182)
  {
    v108 = (unsigned int *)(v182 + 8);
    do
    {
      v109 = __ldxr(v108);
      v110 = v109 - 1;
    }
    while (__stlxr(v110, v108));
    if (!v110)
      (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  }
  v111 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v174);
  RootLayer = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v111);
  pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(RootLayer);
  v113 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v187);
  v114 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v113);
  pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v114);
  *(_QWORD *)&v219 = &off_24FDEE3D0;
  *((_QWORD *)&v219 + 1) = tleShouldCopyValue;
  *((_QWORD *)&v220 + 1) = &v219;
  v216.n128_u64[0] = (unint64_t)&off_24FDEE480;
  v216.n128_u64[1] = (unint64_t)tleShouldCopyChildren;
  *((_QWORD *)&v217 + 1) = &v216;
  pxrInternal__aapl__pxrReserved__::SdfCopySpec();
  v115 = (__n128 *)*((_QWORD *)&v217 + 1);
  if (*((__n128 **)&v217 + 1) == &v216)
  {
    v116 = 4;
    v115 = &v216;
  }
  else
  {
    if (!*((_QWORD *)&v217 + 1))
      goto LABEL_184;
    v116 = 5;
  }
  (*(void (**)(void))(v115->n128_u64[0] + 8 * v116))();
LABEL_184:
  v117 = (__int128 *)*((_QWORD *)&v220 + 1);
  if (*((__int128 **)&v220 + 1) == &v219)
  {
    v118 = 4;
    v117 = &v219;
    goto LABEL_188;
  }
  if (*((_QWORD *)&v220 + 1))
  {
    v118 = 5;
LABEL_188:
    (*(void (**)(void))(*(_QWORD *)v117 + 8 * v118))();
  }
  v119 = *((_QWORD *)&v227 + 1);
  if (*((_QWORD *)&v227 + 1))
  {
    v120 = (unsigned int *)(*((_QWORD *)&v227 + 1) + 8);
    do
    {
      v121 = __ldxr(v120);
      v122 = v121 - 1;
    }
    while (__stlxr(v122, v120));
    if (!v122)
      (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  }
  v123 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v124 = (unsigned int *)(*((_QWORD *)&v213 + 1) + 8);
    do
    {
      v125 = __ldxr(v124);
      v126 = v125 - 1;
    }
    while (__stlxr(v126, v124));
    if (!v126)
      (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  }
  v127 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v187);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v127);
  v128 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v219);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v128);
  v129 = *((_QWORD *)&v219 + 1);
  if (*((_QWORD *)&v219 + 1))
  {
    v130 = (unsigned int *)(*((_QWORD *)&v219 + 1) + 8);
    do
    {
      v131 = __ldxr(v130);
      v132 = v131 - 1;
    }
    while (__stlxr(v132, v130));
    if (!v132)
      (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  }
  *((_QWORD *)&v227 + 1) = &unk_24FDE59C3;
  LOBYTE(v227) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v219, "RealityKit");
  pxrInternal__aapl__pxrReserved__::VtDictionary::erase();
  if (SBYTE7(v220) < 0)
    operator delete((void *)v219);
  std::string::basic_string[abi:ne180100]<0>(&v219, "RealityKit:requireEntityAPI");
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  if (SBYTE7(v220) < 0)
    operator delete((void *)v219);
  v133 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v187);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v133);
  v134 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v219);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(v134, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v197);
  v135 = *((_QWORD *)&v219 + 1);
  if (*((_QWORD *)&v219 + 1))
  {
    v136 = (unsigned int *)(*((_QWORD *)&v219 + 1) + 8);
    do
    {
      v137 = __ldxr(v136);
      v138 = v137 - 1;
    }
    while (__stlxr(v138, v136));
    if (!v138)
      (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  }
  LODWORD(v219) = 1;
  *((_QWORD *)&v219 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_QWORD *)&v220 + 1) = 0;
  v139 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v187);
  std::string::basic_string[abi:ne180100]<0>(&v213, "/model");
  MEMORY[0x2348B26F8](&v200, &v213);
  v193 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v139, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v200, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v193);
  LODWORD(v219) = v216.n128_u32[0];
  v140 = v216.n128_u64[1];
  v216.n128_u64[1] = 0;
  v141 = *((_QWORD *)&v219 + 1);
  *((_QWORD *)&v219 + 1) = v140;
  if (v141)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v141);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v220, (int *)&v217);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v220 + 4);
  if ((BYTE8(v220) & 7) != 0)
  {
    v142 = (unsigned int *)(*((_QWORD *)&v220 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v143 = __ldxr(v142);
    while (__stlxr(v143 - 2, v142));
  }
  *((_QWORD *)&v220 + 1) = *((_QWORD *)&v217 + 1);
  *((_QWORD *)&v217 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v217);
  if (v216.n128_u64[1])
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v216.n128_i64[1]);
  if ((v193 & 7) != 0)
  {
    v144 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stlxr(v145 - 2, v144));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
  if (SBYTE7(v214) < 0)
    operator delete((void *)v213);
  if (v185 != v184)
  {
    Data = atomic_load(MEMORY[0x24BEE7E98]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
    MEMORY[0x2348B274C](&v216, "RealityKit:entityName");
    pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v184);
    pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v219, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(Data + 72));
    if ((v216.n128_u8[0] & 7) != 0)
    {
      v147 = (unsigned int *)(v216.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v148 = __ldxr(v147);
      while (__stlxr(v148 - 2, v147));
    }
    v150 = v184;
    for (k = v185; v150 != k; v150 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v150 + 8))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v193, v150);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v193 + 1, (_DWORD *)v150 + 1);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v219, &v216);
      v151 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v193);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v216, v151);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v216);
      v152 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v187);
      *(_QWORD *)&v213 = 0;
      pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v152, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v209, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v213);
      if ((v213 & 7) != 0)
      {
        v153 = (unsigned int *)(v213 & 0xFFFFFFFFFFFFFFF8);
        do
          v154 = __ldxr(v153);
        while (__stlxr(v154 - 2, v153));
      }
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v216);
      v155 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v183);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v155);
      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v200, 0.0, 1.0);
      pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference();
      if ((BYTE8(v214) & 7) != 0)
      {
        v156 = (unsigned int *)(*((_QWORD *)&v214 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v157 = __ldxr(v156);
        while (__stlxr(v157 - 2, v156));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v214);
      if (*((_QWORD *)&v213 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v213 + 1));
      v158 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v187);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v158, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v209);
      markPrimAsEntityProducing((const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v213, 0, 1);
      if ((BYTE8(v214) & 7) != 0)
      {
        v159 = (unsigned int *)(*((_QWORD *)&v214 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v160 = __ldxr(v159);
        while (__stlxr(v160 - 2, v159));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v214);
      if (*((_QWORD *)&v213 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v213 + 1));
      if ((BYTE8(v217) & 7) != 0)
      {
        v161 = (unsigned int *)(*((_QWORD *)&v217 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v162 = __ldxr(v161);
        while (__stlxr(v162 - 2, v161));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v217);
      if (v216.n128_u64[1])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v216.n128_i64[1]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v209);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v193);
    }
  }
  markPrimAsEntityProducing((const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v219, 1, 0);
  v163 = *(const void **)(v173 + 24);
  v164 = v187;
  v187 = 0;
  v216.n128_u64[0] = (unint64_t)v164;
  v216.n128_u64[1] = (unint64_t)v163;
  if (v163)
    CFRetain(v163);
  v165 = *(_QWORD *)(v173 + 32);
  *(_QWORD *)(v173 + 32) = 0;
  *(_QWORD *)&v217 = v165;
  v166 = RIOPxrUsdStageCreate<realityio::RIOPxrUsdStageData>(&v216);
  v168 = v167;
  v169 = v217;
  *(_QWORD *)&v217 = 0;
  if (v169)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v169 + 8))(v169, v166);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&v216.n128_u64[1]);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&v216);
  if ((BYTE8(v220) & 7) != 0)
  {
    v170 = (unsigned int *)(*((_QWORD *)&v220 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v171 = __ldxr(v170);
    while (__stlxr(v171 - 2, v170));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v220);
  if (*((_QWORD *)&v219 + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v219 + 1));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v227);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)&v197, 0);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v183);
  *(_QWORD *)&v219 = &v184;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v187);
  return v168;
}

void sub_22FFFB84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,unsigned int *a44,__int16 a45,uint64_t a46,uint64_t a47,unsigned int *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  uint64_t v61;

  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&STACK[0x248]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v61 - 224));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v61 - 144));
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a57, 0);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a44);
  a61 = &a45;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a48);
  _Unwind_Resume(a1);
}

BOOL tleShouldCopyValue(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  _BOOL8 result;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x2348B274C](&v14, "defaultPrim");
  v3 = v14;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (v14 & 0xFFFFFFFFFFFFFFF8))
  {
    result = 0;
  }
  else
  {
    MEMORY[0x2348B274C](&v13, "subLayerOffsets");
    v4 = v13;
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (v13 & 0xFFFFFFFFFFFFFFF8))
    {
      result = 0;
    }
    else
    {
      MEMORY[0x2348B274C](&v12, "subLayers");
      v5 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      result = (*a2 & 0xFFFFFFFFFFFFFFF8) != (v12 & 0xFFFFFFFFFFFFFFF8);
      if ((v12 & 7) != 0)
      {
        do
          v7 = __ldxr(v5);
        while (__stlxr(v7 - 2, v5));
      }
      v4 = v13;
    }
    if ((v4 & 7) != 0)
    {
      v8 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    v3 = v14;
  }
  if ((v3 & 7) != 0)
  {
    v10 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  return result;
}

uint64_t tleShouldCopyChildren()
{
  return 0;
}

__n128 RIOPxrUsdStageCreate<realityio::RIOPxrUsdStageData>(__n128 *a1)
{
  uint64_t Instance;
  __n128 result;
  unint64_t v4;

  if (RIOPxrUsdStageGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrUsdStageGetTypeID::onceToken, &__block_literal_global_23);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    result = *a1;
    *(__n128 *)(Instance + 16) = *a1;
    a1->n128_u64[0] = 0;
    a1->n128_u64[1] = 0;
    v4 = a1[1].n128_u64[0];
    a1[1].n128_u64[0] = 0;
    *(_QWORD *)(Instance + 32) = v4;
  }
  return result;
}

void realityio::RIOPxrUsdStageData::~RIOPxrUsdStageData(realityio::RIOPxrUsdStageData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)this + 1);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsInstanceable(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  unint64_t Data;

  Data = atomic_load(MEMORY[0x24BEE7E98]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
  pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<BOOL>((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(Data + 200));
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::SetInstanceable(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  unint64_t Data;

  Data = atomic_load(MEMORY[0x24BEE7E98]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
  return pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<BOOL>((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(Data + 200));
}

uint64_t *std::map<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair,std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>,std::allocator<std::pair<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath> const,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>>>::operator[](uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v5 = a1 + 1;
  v4 = a1[1];
  if (!v4)
  {
    v6 = a1 + 1;
LABEL_10:
    v8 = (uint64_t *)operator new(0x58uLL);
    *((_DWORD *)v8 + 8) = *(_DWORD *)a2;
    v8[5] = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 12, (_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 13, (_DWORD *)(a2 + 20));
    v8[7] = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 16, (_DWORD *)(a2 + 32));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 17, (_DWORD *)(a2 + 36));
    v8[10] = 0;
    v8[9] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = (uint64_t *)**a1;
    v10 = v8;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v8 + 9;
  }
  while (1)
  {
    while (1)
    {
      v6 = (uint64_t **)v4;
      v7 = (uint64_t)(v4 + 4);
      if (!std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>::operator()[abi:ne180100](a2, (uint64_t)(v4 + 4)))break;
      v4 = *v6;
      v5 = v6;
      if (!*v6)
        goto LABEL_10;
    }
    if (!std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>::operator()[abi:ne180100](v7, a2))break;
    v5 = v6 + 1;
    v4 = v6[1];
    if (!v4)
      goto LABEL_10;
  }
  v8 = *v5;
  if (!*v5)
    goto LABEL_10;
  return v8 + 9;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  return a1;
}

uint64_t makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair::~toFromRootPair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath> const,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>::~pair(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 40);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  return a1;
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[8 * v4];
  v16 = &v10[8 * v9];
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v14, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v14 + 1, a2 + 1);
  v15 = v14 + 8;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(&v13);
  return v11;
}

void sub_22FFFC73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<BOOL>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataTypedValue<BOOL>::StoreValue(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_BYTE **)(a1 + 8) = *(_BYTE *)v2;
    return 1;
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

{
  uint64_t result;

  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(a2))
  {
    **(_BYTE **)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::UncheckedRemove<BOOL>(a2);
    return 1;
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::UncheckedRemove<BOOL>(_QWORD *a1)
{
  _BYTE *v2;
  int v3;
  uint64_t v4;
  BOOL v5;

  v2 = pxrInternal__aapl__pxrReserved__::VtValue::_GetMutable<BOOL>(a1);
  v3 = *v2;
  *v2 = 0;
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v3 != 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_GetMutable<BOOL>(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<BOOL>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<BOOL>::GetValue(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  BOOL v5;

  v3 = **(_BYTE **)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  *(_QWORD *)(a2 + 8) = &unk_24FDE59C3;
  *(_BYTE *)a2 = v3;
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<BOOL>::IsEqual(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t result;
  uint64_t v5;

  v2 = a2;
  result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)v2 + 1);
    if ((v5 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    return *(unsigned __int8 *)v2 == **(unsigned __int8 **)(a1 + 8);
  }
  return result;
}

_DWORD *std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _DWORD *result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if ((pxrInternal__aapl__pxrReserved__::operator<((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (pxrInternal__aapl__pxrReserved__::UsdObject *)a2) & 1) != 0)return 1;
  if ((pxrInternal__aapl__pxrReserved__::operator<((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, (pxrInternal__aapl__pxrReserved__::UsdObject *)a1) & 1) != 0)return 0;
  return pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<(pxrInternal__aapl__pxrReserved__::UsdObject *a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2)
{
  uint64_t v3;
  int v5;
  int v6;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, &v6);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v5);
  v3 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  return v3;
}

void sub_22FFFCC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a9);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 48);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 32), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 36), a3 + 1);
  return a1;
}

void std::__tree<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::__map_value_compare<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>,true>,std::allocator<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::__map_value_compare<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>,true>,std::allocator<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::__map_value_compare<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>,true>,std::allocator<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>>>::destroy(a1[1]);
    std::pair<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath> const,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>::~pair((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDEE3D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDEE3D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9, _QWORD *a10)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 8))(*a2, a3, a4, a5, *a6, a7, a8, *a9, *a10);
}

uint64_t std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target_type()
{
}

void std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDEE480;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDEE480;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, unsigned __int8 *a8, _QWORD *a9, _QWORD *a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 8))(a2, a3, a4, *a5, a6, a7, *a8, *a9, *a10);
}

uint64_t std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target_type()
{
}

uint64_t RIO_MTLX::Document::createDocument<RIO_MTLX::Document>@<X0>(RIO_MTLX *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v8 = 0;
  v9 = 0;
  v3 = RIO_MTLX::EMPTY_STRING(a1);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::Document,std::allocator<RIO_MTLX::Document>,std::shared_ptr<RIO_MTLX::Element>,std::string const&,void>(&v8, (__int128 *)v3, a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
}

void sub_22FFFCFD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

RIO_MTLX::Document *RIO_MTLX::Document::Document(RIO_MTLX::Document *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v5 = a2[1];
  v14 = *a2;
  v15 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (__int128 *)RIO_MTLX::Document::CATEGORY(a1);
  RIO_MTLX::GraphElement::GraphElement(a1, &v14, v8, a3);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)a1 = &off_24FDEE530;
  v12 = operator new();
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = 850045863;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 65) = 0u;
  *(_DWORD *)(v12 + 120) = 1065353216;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_DWORD *)(v12 + 160) = 1065353216;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 184) = 0u;
  *(_DWORD *)(v12 + 200) = 1065353216;
  *((_QWORD *)a1 + 34) = v12;
  return a1;
}

void sub_22FFFD108(_Unwind_Exception *a1)
{
  RIO_MTLX::Element *v1;

  RIO_MTLX::Element::~Element(v1);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Document::~Document(RIO_MTLX::Document *this)
{
  *(_QWORD *)this = &off_24FDEE530;
  std::unique_ptr<RIO_MTLX::Document::Cache>::reset[abi:ne180100]((uint64_t *)this + 34);
  RIO_MTLX::Element::~Element(this);
}

{
  *(_QWORD *)this = &off_24FDEE530;
  std::unique_ptr<RIO_MTLX::Document::Cache>::reset[abi:ne180100]((uint64_t *)this + 34);
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

void RIO_MTLX::Document::initialize(RIO_MTLX::Document *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v18, (_QWORD *)this + 1);
  v2 = v18;
  v3 = v19;
  if (v19)
  {
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 30) = v2;
  *((_QWORD *)this + 31) = v3;
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
    v3 = v19;
  }
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  RIO_MTLX::Element::getDocument(this, &v18);
  v9 = (_QWORD *)*((_QWORD *)this + 34);
  v11 = v18;
  v10 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (std::__shared_weak_count *)v9[1];
  *v9 = v11;
  v9[1] = v10;
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  RIO_MTLX::Element::clearContent(this);
  RIO_MTLX::InterfaceElement::setVersionIntegers(this, 1, 38);
}

std::string *RIO_MTLX::InterfaceElement::addOutput@<X0>(RIO_MTLX::Output *a1@<X0>, uint64_t a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v6;
  RIO_MTLX::TypedElement *v7;
  __int128 *v8;

  RIO_MTLX::Element::addChild<RIO_MTLX::Output>(a1, a2, a4);
  v6 = (uint64_t *)*a4;
  v8 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v7);
  return RIO_MTLX::Element::setAttribute(v6, v8, a3);
}

void sub_22FFFD30C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Document::importLibrary(uint64_t a1, RIO_MTLX::Element **a2)
{
  RIO_MTLX::Element *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  const std::string *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  RIO_MTLX::Element *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  std::string *v26;
  RIO_MTLX::Element *v27;
  unsigned __int8 *v28;
  uint64_t *v29;
  uint64_t *FilePrefix;
  __int128 *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  std::string *v34;
  RIO_MTLX::Element *v35;
  unsigned __int8 *v36;
  uint64_t *v37;
  uint64_t *GeomPrefix;
  __int128 *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  std::string *v42;
  RIO_MTLX::Element *v43;
  unsigned __int8 *v44;
  uint64_t *v45;
  uint64_t *ColorSpace;
  __int128 *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  RIO_MTLX::Element *v50;
  unsigned __int8 *v51;
  uint64_t *v52;
  uint64_t *Namespace;
  __int128 *v54;
  RIO_MTLX::Element *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  const std::string *v64;
  std::__shared_weak_count *v65;
  std::string v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  std::string __p;
  const std::string *v72;
  std::__shared_weak_count *v73;

  v2 = *a2;
  if (*a2)
  {
    v3 = *((_QWORD *)v2 + 17);
    v4 = *((_QWORD *)v2 + 18);
    if (v3 != v4)
    {
      v7 = (_QWORD *)(a1 + 96);
      while (1)
      {
        v8 = *(const std::string **)v3;
        v9 = *(std::__shared_weak_count **)(v3 + 8);
        v72 = *(const std::string **)v3;
        v73 = v9;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        RIO_MTLX::Element::getQualifiedName((uint64_t)v8, (std::string *)&v8[2], &__p);
        v12 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v7, (unsigned __int8 *)&__p);
        if (!v12)
          break;
        v13 = *((_QWORD *)v12 + 5);
        v14 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v69 = v13;
        v70 = v14;
        if (!v13)
          goto LABEL_15;
        if (v14)
          goto LABEL_55;
LABEL_59:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v61 = v73;
        if (v73)
        {
          v62 = (unint64_t *)&v73->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v3 += 16;
        if (v3 == v4)
          return;
      }
      v69 = 0;
      v70 = 0;
LABEL_15:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v66, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v66 = __p;
      RIO_MTLX::Element::addChildOfCategory(a1, (uint64_t)&v8[1], (uint64_t)&v66, &v67);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      v17 = v67;
      v64 = v8;
      v65 = v9;
      if (v9)
      {
        v18 = (unint64_t *)&v9->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      RIO_MTLX::Element::copyContentFrom(v17, &v64);
      v21 = v65;
      if (v65)
      {
        v22 = (unint64_t *)&v65->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = v67;
      v25 = (unsigned __int8 *)RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(v20);
      v26 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v24 + 160), v25);
      if (!v26)
      {
        v27 = *a2;
        v28 = (unsigned __int8 *)RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(0);
        v26 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v27 + 20, v28);
        if (v26)
        {
          v29 = (uint64_t *)v67;
          FilePrefix = RIO_MTLX::Element::getFilePrefix(*a2);
          v31 = (__int128 *)RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE((RIO_MTLX::Element *)FilePrefix);
          v26 = RIO_MTLX::Element::setAttribute(v29, v31, (const std::string *)FilePrefix);
        }
      }
      v32 = v67;
      v33 = (unsigned __int8 *)RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE((RIO_MTLX::Element *)v26);
      v34 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v32 + 160), v33);
      if (!v34)
      {
        v35 = *a2;
        v36 = (unsigned __int8 *)RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(0);
        v34 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v35 + 20, v36);
        if (v34)
        {
          v37 = (uint64_t *)v67;
          GeomPrefix = RIO_MTLX::Element::getGeomPrefix(*a2);
          v39 = (__int128 *)RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE((RIO_MTLX::Element *)GeomPrefix);
          v34 = RIO_MTLX::Element::setAttribute(v37, v39, (const std::string *)GeomPrefix);
        }
      }
      v40 = v67;
      v41 = (unsigned __int8 *)RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE((RIO_MTLX::Element *)v34);
      v42 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v40 + 160), v41);
      if (!v42)
      {
        v43 = *a2;
        v44 = (unsigned __int8 *)RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE(0);
        v42 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v43 + 20, v44);
        if (v42)
        {
          v45 = (uint64_t *)v67;
          ColorSpace = RIO_MTLX::Element::getColorSpace(*a2);
          v47 = (__int128 *)RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE((RIO_MTLX::Element *)ColorSpace);
          v42 = RIO_MTLX::Element::setAttribute(v45, v47, (const std::string *)ColorSpace);
        }
      }
      v48 = v67;
      v49 = (unsigned __int8 *)RIO_MTLX::Element::NAMESPACE_ATTRIBUTE((RIO_MTLX::Element *)v42);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v48 + 160), v49))
      {
        v50 = *a2;
        v51 = (unsigned __int8 *)RIO_MTLX::Element::NAMESPACE_ATTRIBUTE(0);
        if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v50 + 20, v51))
        {
          v52 = (uint64_t *)v67;
          Namespace = RIO_MTLX::Element::getNamespace(*a2);
          v54 = (__int128 *)RIO_MTLX::Element::NAMESPACE_ATTRIBUTE((RIO_MTLX::Element *)Namespace);
          RIO_MTLX::Element::setAttribute(v52, v54, (const std::string *)Namespace);
        }
      }
      if (*(char *)(v67 + 95) < 0)
      {
        if (*(_QWORD *)(v67 + 80))
          goto LABEL_49;
      }
      else if (*(_BYTE *)(v67 + 95))
      {
        goto LABEL_49;
      }
      v55 = *a2;
      if ((*((char *)*a2 + 95) & 0x80000000) == 0)
      {
        if (!*((_BYTE *)*a2 + 95))
          goto LABEL_49;
        goto LABEL_48;
      }
      if (*((_QWORD *)v55 + 10))
LABEL_48:
        std::string::operator=((std::string *)(v67 + 72), (const std::string *)v55 + 3);
LABEL_49:
      v56 = v68;
      if (v68)
      {
        v57 = (unint64_t *)&v68->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v14 = v70;
      if (!v70)
        goto LABEL_59;
LABEL_55:
      v59 = (unint64_t *)&v14->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_59;
    }
  }
}

void sub_22FFFD6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a26 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v26 - 80);
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::Element::getColorSpace(RIO_MTLX::Element *this)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  v2 = (unsigned __int8 *)RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE(this);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, v2);
  if (v3)
    return (uint64_t *)(v3 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::Document::getReferencedSourceUris(RIO_MTLX::Document *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void **v23[2];
  __int128 v24;
  _QWORD v25[3];
  __int128 v26;
  void **v27;
  void **v28;
  _QWORD v29[3];
  __int128 v30;
  void **v31;
  std::__shared_weak_count *v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 v35;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  RIO_MTLX::Element::traverseTree(this, (uint64_t)&v31);
  *((_QWORD *)&v35 + 1) = 0;
  v27 = v31;
  v28 = (void **)&v32->__vftable;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  memset(v29, 0, sizeof(v29));
  v5 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)v29, v33, v34, 0xAAAAAAAAAAAAAAABLL * (v34 - v33));
  v30 = v35;
  RIO_MTLX::NULL_TREE_ITERATOR((RIO_MTLX *)v5);
  v24 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  memset(v25, 0, sizeof(v25));
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)v25, (_QWORD *)qword_255E54218, unk_255E54220, 0xAAAAAAAAAAAAAAABLL * ((unk_255E54220 - qword_255E54218) >> 3));
  v26 = xmmword_255E54230;
  while (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v27, (uint64_t)&v24))
  {
    v8 = v27;
    v9 = (std::__shared_weak_count *)v28;
    v23[0] = v27;
    v23[1] = v28;
    if (v28)
    {
      v10 = (unint64_t *)(v28 + 1);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    if (*((char *)v8 + 95) < 0)
    {
      if (!v8[10])
        goto LABEL_17;
LABEL_16:
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a2, (const void **)v8 + 9, (uint64_t)(v8 + 9));
      goto LABEL_17;
    }
    if (*((_BYTE *)v8 + 95))
      goto LABEL_16;
LABEL_17:
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    RIO_MTLX::TreeIterator::operator++(&v27);
  }
  v23[0] = (void **)v25;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v23);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)&v24 = v29;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v17 = (std::__shared_weak_count *)v28;
  if (v28)
  {
    v18 = (unint64_t *)(v28 + 1);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v27 = (void **)&v33;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v27);
  v20 = v32;
  if (v32)
  {
    v21 = (unint64_t *)&v32->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_22FFFDA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)va1);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)(v5 - 104));
  std::__tree<std::string>::destroy(v4, *(char **)(v4 + 8));
  _Unwind_Resume(a1);
}

unint64_t RIO_MTLX::Document::getVersionIntegers(RIO_MTLX::Document *this)
{
  unsigned __int8 *v2;

  v2 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(this);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, v2))
  {
    return RIO_MTLX::InterfaceElement::getVersionIntegers(this);
  }
  else
  {
    return 0x2600000001;
  }
}

uint64_t RIO_MTLX::Document::getMatchingPorts@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  RIO_MTLX::Document::Cache::refresh(*(RIO_MTLX::Document::Cache **)(a1 + 272));
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__equal_range_multi<std::string>((_QWORD *)(*(_QWORD *)(a1 + 272) + 88), a2);
  v7 = result;
  v9 = v8;
  while (v7 != v9)
  {
    result = std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a3, (__int128 *)(v7 + 40));
    v7 = *(_QWORD *)v7;
  }
  return result;
}

void sub_22FFFDB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Document::Cache::refresh(RIO_MTLX::Document::Cache *this)
{
  RIO_MTLX::Document::Cache *v1;
  std::mutex *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t j;
  uint64_t v7;
  uint64_t k;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  _BOOL8 v18;
  void **v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  RIO_MTLX::NodeDef *v23;
  RIO_MTLX::NodeDef *v24;
  unsigned __int8 *v25;
  RIO_MTLX::InterfaceElement *v26;
  RIO_MTLX::InterfaceElement *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  int8x8_t prime;
  void *v43;
  void *v44;
  uint64_t v45;
  unsigned __int8 **v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  RIO_MTLX::Document::Cache *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  int v61;
  unsigned __int8 *v62;
  void *v63;
  uint8x8_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  uint8x8_t v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unsigned __int8 *v85;
  unint64_t v86;
  float v87;
  float v88;
  _BOOL8 v89;
  unint64_t v90;
  unint64_t v91;
  int8x8_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  unsigned __int8 **v96;
  unint64_t v97;
  uint8x8_t v98;
  unint64_t v99;
  unint64_t v100;
  uint8x8_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  RIO_MTLX::Document::Cache *v108;
  uint64_t v109;
  unsigned __int8 *v110;
  int v111;
  unsigned __int8 *v112;
  void *v113;
  uint8x8_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned __int8 **v117;
  unsigned __int8 *v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  uint8x8_t v123;
  unint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  RIO_MTLX *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *NodeGraph;
  unsigned __int8 *v133;
  uint64_t v134;
  std::__shared_weak_count *size;
  unint64_t *v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::mutex *v165;
  std::string::size_type v166;
  _QWORD *v167;
  unint64_t v168;
  RIO_MTLX::InterfaceElement *v169;
  unint64_t v170;
  _QWORD *v171;
  unsigned __int8 ***v172;
  unsigned __int8 ***v173;
  uint64_t *v174;
  uint64_t *v175;
  unint64_t *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  float *v180;
  float *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  RIO_MTLX::Element *v184;
  std::__shared_weak_count *v185;
  std::string __p;
  uint64_t v187;
  std::__shared_weak_count *v188;
  void **v189;
  std::__shared_weak_count *v190;
  __int128 v191;
  _QWORD v192[3];
  __int128 v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count *v195;
  _QWORD v196[3];
  __int128 v197;
  void **v198;
  std::__shared_weak_count *v199;
  _QWORD *v200;
  _QWORD *v201;
  __int128 v202;
  std::string v203;

  v1 = this;
  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  if (*((_BYTE *)v1 + 80))
    goto LABEL_326;
  v177 = (unint64_t *)((char *)v1 + 112);
  if (*((_QWORD *)v1 + 14))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__deallocate_node(*((_QWORD **)v1 + 13));
    *((_QWORD *)v1 + 13) = 0;
    v3 = *((_QWORD *)v1 + 12);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*((_QWORD *)v1 + 11) + 8 * i) = 0;
    }
    *v177 = 0;
  }
  v176 = (unint64_t *)((char *)v1 + 152);
  if (*((_QWORD *)v1 + 19))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__deallocate_node(*((_QWORD **)v1 + 18));
    *((_QWORD *)v1 + 18) = 0;
    v5 = *((_QWORD *)v1 + 17);
    if (v5)
    {
      for (j = 0; j != v5; ++j)
        *(_QWORD *)(*((_QWORD *)v1 + 16) + 8 * j) = 0;
    }
    *v176 = 0;
  }
  v167 = (_QWORD *)((char *)v1 + 192);
  v171 = (_QWORD *)((char *)v1 + 168);
  if (*((_QWORD *)v1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__deallocate_node(*((_QWORD **)v1 + 23));
    *((_QWORD *)v1 + 23) = 0;
    v7 = *((_QWORD *)v1 + 22);
    if (v7)
    {
      for (k = 0; k != v7; ++k)
        *(_QWORD *)(*v171 + 8 * k) = 0;
    }
    *v167 = 0;
  }
  v165 = v2;
  v194 = 0;
  v195 = 0;
  v9 = (std::__shared_weak_count *)*((_QWORD *)v1 + 1);
  if (v9)
  {
    v9 = std::__shared_weak_count::lock(v9);
    v10 = v9;
    v195 = v9;
    if (v9)
    {
      v9 = *(std::__shared_weak_count **)v1;
      v194 = *(std::__shared_weak_count **)v1;
    }
  }
  else
  {
    v10 = 0;
  }
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)v9, (uint64_t)&v198);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *((_QWORD *)&v202 + 1) = 0;
  v194 = (std::__shared_weak_count *)v198;
  v195 = v199;
  if (v199)
  {
    v13 = (unint64_t *)&v199->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  memset(v196, 0, sizeof(v196));
  v15 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)v196, v200, v201, 0xAAAAAAAAAAAAAAABLL * (v201 - v200));
  v197 = v202;
  RIO_MTLX::NULL_TREE_ITERATOR((RIO_MTLX *)v15);
  v191 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  memset(v192, 0, sizeof(v192));
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)v192, (_QWORD *)qword_255E54218, unk_255E54220, 0xAAAAAAAAAAAAAAABLL * ((unk_255E54220 - qword_255E54218) >> 3));
  v193 = xmmword_255E54230;
  v172 = (unsigned __int8 ***)((char *)v1 + 144);
  v173 = (unsigned __int8 ***)((char *)v1 + 104);
  v180 = (float *)((char *)v1 + 160);
  v181 = (float *)((char *)v1 + 120);
  v166 = (std::string::size_type)v1 + 184;
  while (1)
  {
    v18 = RIO_MTLX::TreeIterator::operator==((uint64_t)&v194, (uint64_t)&v191);
    if (v18)
      break;
    v19 = (void **)&v194->__vftable;
    v189 = (void **)&v194->__vftable;
    v190 = v195;
    if (v195)
    {
      v20 = (unint64_t *)&v195->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = (unsigned __int8 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v18);
    v23 = (RIO_MTLX::NodeDef *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v19 + 20, v22);
    if (v23)
    {
      v24 = (RIO_MTLX::NodeDef *)((char *)v23 + 40);
    }
    else
    {
      v23 = (RIO_MTLX::NodeDef *)RIO_MTLX::EMPTY_STRING(0);
      v24 = v23;
    }
    v25 = (unsigned __int8 *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE(v23);
    v26 = (RIO_MTLX::InterfaceElement *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v19 + 20, v25);
    if (v26)
    {
      v27 = (RIO_MTLX::InterfaceElement *)((char *)v26 + 40);
    }
    else
    {
      v26 = (RIO_MTLX::InterfaceElement *)RIO_MTLX::EMPTY_STRING(0);
      v27 = v26;
    }
    v28 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(v26);
    v29 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v19 + 20, v28);
    if (v29)
      v30 = (uint64_t *)(v29 + 40);
    else
      v30 = RIO_MTLX::EMPTY_STRING(0);
    if (*((char *)v24 + 23) < 0)
    {
      if (!*((_QWORD *)v24 + 1))
        goto LABEL_155;
    }
    else if (!*((_BYTE *)v24 + 23))
    {
      goto LABEL_155;
    }
    RIO_MTLX::Element::asA<RIO_MTLX::PortElement>((uint64_t)v19, &v187);
    if (v187)
    {
      RIO_MTLX::Element::getQualifiedName(v187, (std::string *)v24, &__p);
      v31 = operator new(0x38uLL);
      v32 = v187;
      v33 = v188;
      *((_QWORD *)v31 + 4) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *((_QWORD *)v31 + 5) = v32;
      v203.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
      v203.__r_.__value_.__l.__size_ = (std::string::size_type)v173;
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_OWORD *)v31 + 1) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      memset(&__p, 0, sizeof(__p));
      *((_QWORD *)v31 + 6) = v33;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v203.__r_.__value_.__s.__data_[16] = 1;
      *((_QWORD *)v31 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v177, (uint64_t)v31 + 16);
      v178 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v177, (uint64_t)v31 + 16);
      *((_QWORD *)v31 + 1) = v178;
      v36 = *((_QWORD *)v1 + 12);
      v37 = (float)(unint64_t)(*((_QWORD *)v1 + 14) + 1);
      v38 = *((float *)v1 + 30);
      if (!v36 || (float)(v38 * (float)v36) < v37)
      {
        v39 = (v36 & (v36 - 1)) != 0;
        if (v36 < 3)
          v39 = 1;
        v40 = v39 | (2 * v36);
        v41 = vcvtps_u32_f32(v37 / v38);
        if (v40 <= v41)
          prime = (int8x8_t)v41;
        else
          prime = (int8x8_t)v40;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          v36 = *((_QWORD *)v1 + 12);
        }
        v169 = v27;
        v174 = v30;
        if (*(_QWORD *)&prime > v36)
          goto LABEL_66;
        if (*(_QWORD *)&prime < v36)
        {
          v50 = vcvtps_u32_f32((float)*v177 / *v181);
          if (v36 < 3 || (v51 = (uint8x8_t)vcnt_s8((int8x8_t)v36), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
          {
            v50 = std::__next_prime(v50);
          }
          else
          {
            v52 = 1 << -(char)__clz(v50 - 1);
            if (v50 >= 2)
              v50 = v52;
          }
          if (*(_QWORD *)&prime <= v50)
            prime = (int8x8_t)v50;
          if (*(_QWORD *)&prime < v36)
          {
            if (prime)
            {
LABEL_66:
              if (*(_QWORD *)&prime >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v43 = operator new(8 * *(_QWORD *)&prime);
              v44 = (void *)*((_QWORD *)v1 + 11);
              *((_QWORD *)v1 + 11) = v43;
              if (v44)
                operator delete(v44);
              v45 = 0;
              *((int8x8_t *)v1 + 12) = prime;
              do
                *(_QWORD *)(*((_QWORD *)v1 + 11) + 8 * v45++) = 0;
              while (*(_QWORD *)&prime != v45);
              v46 = *v173;
              if (*v173)
              {
                v47 = (unint64_t)v46[1];
                v48 = (uint8x8_t)vcnt_s8(prime);
                v48.i16[0] = vaddlv_u8(v48);
                v49 = v48.u32[0];
                if (v48.u32[0] > 1uLL)
                {
                  if (v47 >= *(_QWORD *)&prime)
                    v47 %= *(_QWORD *)&prime;
                }
                else
                {
                  v47 &= *(_QWORD *)&prime - 1;
                }
                *(_QWORD *)(*((_QWORD *)v1 + 11) + 8 * v47) = v173;
                v53 = *v46;
                if (*v46)
                {
                  v54 = *(_QWORD *)&prime - 1;
                  v168 = v48.u32[0];
                  do
                  {
                    v55 = *((_QWORD *)v53 + 1);
                    if (v49 > 1)
                    {
                      if (v55 >= *(_QWORD *)&prime)
                        v55 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v55 &= v54;
                    }
                    if (v55 == v47)
                    {
                      v46 = (unsigned __int8 **)v53;
                    }
                    else
                    {
                      v56 = *((_QWORD *)v1 + 11);
                      if (*(_QWORD *)(v56 + 8 * v55))
                      {
                        v57 = *(unsigned __int8 **)v53;
                        if (*(_QWORD *)v53)
                        {
                          v58 = v1;
                          v59 = v54;
                          v60 = v53;
                          while (1)
                          {
                            v61 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v181, v53 + 16, v57 + 16);
                            v62 = *(unsigned __int8 **)v60;
                            if (!v61)
                              break;
                            v57 = *(unsigned __int8 **)v62;
                            v60 = *(unsigned __int8 **)v60;
                            if (!*(_QWORD *)v62)
                              goto LABEL_99;
                          }
                          v57 = *(unsigned __int8 **)v60;
                          v62 = v60;
LABEL_99:
                          v54 = v59;
                          v1 = v58;
                          v49 = v168;
                        }
                        else
                        {
                          v62 = v53;
                        }
                        *v46 = v57;
                        *(_QWORD *)v62 = **(_QWORD **)(*((_QWORD *)v1 + 11) + 8 * v55);
                        **(_QWORD **)(*((_QWORD *)v1 + 11) + 8 * v55) = v53;
                      }
                      else
                      {
                        *(_QWORD *)(v56 + 8 * v55) = v46;
                        v46 = (unsigned __int8 **)v53;
                        v47 = v55;
                      }
                    }
                    v53 = *v46;
                  }
                  while (*v46);
                }
              }
            }
            else
            {
              v63 = (void *)*((_QWORD *)v1 + 11);
              *((_QWORD *)v1 + 11) = 0;
              if (v63)
                operator delete(v63);
              *((_QWORD *)v1 + 12) = 0;
            }
          }
        }
        v36 = *((_QWORD *)v1 + 12);
        v30 = v174;
        v27 = v169;
      }
      v64 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
      v64.i16[0] = vaddlv_u8(v64);
      v65 = v64.u32[0];
      if (v64.u32[0] > 1uLL)
      {
        v66 = v178;
        if (v36 <= v178)
          v66 = v178 % v36;
      }
      else
      {
        v66 = (v36 - 1) & v178;
      }
      v67 = *(unsigned __int8 **)(*((_QWORD *)v1 + 11) + 8 * v66);
      if (v67)
      {
        v68 = *(unsigned __int8 **)v67;
        if (*(_QWORD *)v67)
        {
          v69 = 0;
          do
          {
            v70 = *((_QWORD *)v68 + 1);
            if (v65 > 1)
            {
              v71 = *((_QWORD *)v68 + 1);
              if (v70 >= v36)
                v71 = v70 % v36;
            }
            else
            {
              v71 = v70 & (v36 - 1);
            }
            if (v71 != v66)
              break;
            v72 = v70 == v178
                ? std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v181, v68 + 16, (unsigned __int8 *)v31 + 16): 0;
            if ((v69 & (v72 ^ 1) & 1) != 0)
              break;
            v69 |= v72;
            v67 = *(unsigned __int8 **)v67;
            v68 = *(unsigned __int8 **)v67;
          }
          while (*(_QWORD *)v67);
          v36 = *((_QWORD *)v1 + 12);
          v73 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
          v73.i16[0] = vaddlv_u8(v73);
          v65 = v73.u32[0];
        }
      }
      v74 = *((_QWORD *)v31 + 1);
      if (v65 > 1)
      {
        if (v74 >= v36)
          v74 %= v36;
      }
      else
      {
        v74 &= v36 - 1;
      }
      if (v67)
      {
        *(_QWORD *)v31 = *(_QWORD *)v67;
        *(_QWORD *)v67 = v31;
        if (!*(_QWORD *)v31)
          goto LABEL_148;
        v75 = *(_QWORD *)(*(_QWORD *)v31 + 8);
        if (v65 > 1)
        {
          if (v75 >= v36)
            v75 %= v36;
        }
        else
        {
          v75 &= v36 - 1;
        }
        if (v75 == v74)
          goto LABEL_148;
LABEL_147:
        *(_QWORD *)(*((_QWORD *)v1 + 11) + 8 * v75) = v31;
      }
      else
      {
        *(_QWORD *)v31 = *((_QWORD *)v1 + 13);
        *((_QWORD *)v1 + 13) = v31;
        *(_QWORD *)(*((_QWORD *)v1 + 11) + 8 * v74) = v173;
        if (*(_QWORD *)v31)
        {
          v75 = *(_QWORD *)(*(_QWORD *)v31 + 8);
          if (v65 > 1)
          {
            if (v75 >= v36)
              v75 %= v36;
          }
          else
          {
            v75 &= v36 - 1;
          }
          goto LABEL_147;
        }
      }
LABEL_148:
      ++*v177;
      v203.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v203);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v76 = v188;
    if (v188)
    {
      v77 = (unint64_t *)&v188->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
LABEL_155:
    if (*((char *)v27 + 23) < 0)
    {
      if (!*((_QWORD *)v27 + 1))
        goto LABEL_264;
    }
    else if (!*((_BYTE *)v27 + 23))
    {
      goto LABEL_264;
    }
    RIO_MTLX::Element::asA<RIO_MTLX::NodeDef>((uint64_t)v189, &v187);
    if (v187)
    {
      RIO_MTLX::Element::getQualifiedName(v187, (std::string *)v27, &__p);
      v79 = (unsigned __int8 *)operator new(0x38uLL);
      v80 = v79;
      v81 = v187;
      v82 = v188;
      *((_QWORD *)v79 + 4) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *((_QWORD *)v79 + 5) = v81;
      v203.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
      v203.__r_.__value_.__l.__size_ = (std::string::size_type)v172;
      *(_QWORD *)v79 = 0;
      *((_QWORD *)v79 + 1) = 0;
      *((_OWORD *)v79 + 1) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      memset(&__p, 0, sizeof(__p));
      *((_QWORD *)v79 + 6) = v82;
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      v85 = v79 + 16;
      v203.__r_.__value_.__s.__data_[16] = 1;
      *((_QWORD *)v79 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v176, (uint64_t)(v79 + 16));
      v179 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v176, (uint64_t)(v80 + 16));
      *((_QWORD *)v80 + 1) = v179;
      v86 = *((_QWORD *)v1 + 17);
      v87 = (float)(unint64_t)(*((_QWORD *)v1 + 19) + 1);
      v88 = *((float *)v1 + 40);
      if (!v86 || (float)(v88 * (float)v86) < v87)
      {
        v89 = (v86 & (v86 - 1)) != 0;
        if (v86 < 3)
          v89 = 1;
        v90 = v89 | (2 * v86);
        v91 = vcvtps_u32_f32(v87 / v88);
        if (v90 <= v91)
          v92 = (int8x8_t)v91;
        else
          v92 = (int8x8_t)v90;
        if (*(_QWORD *)&v92 == 1)
        {
          v92 = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&v92 & (*(_QWORD *)&v92 - 1)) != 0)
        {
          v92 = (int8x8_t)std::__next_prime(*(_QWORD *)&v92);
          v86 = *((_QWORD *)v1 + 17);
        }
        v175 = v30;
        if (*(_QWORD *)&v92 > v86)
          goto LABEL_175;
        if (*(_QWORD *)&v92 < v86)
        {
          v100 = vcvtps_u32_f32((float)*v176 / *v180);
          if (v86 < 3 || (v101 = (uint8x8_t)vcnt_s8((int8x8_t)v86), v101.i16[0] = vaddlv_u8(v101), v101.u32[0] > 1uLL))
          {
            v100 = std::__next_prime(v100);
          }
          else
          {
            v102 = 1 << -(char)__clz(v100 - 1);
            if (v100 >= 2)
              v100 = v102;
          }
          if (*(_QWORD *)&v92 <= v100)
            v92 = (int8x8_t)v100;
          if (*(_QWORD *)&v92 < v86)
          {
            if (v92)
            {
LABEL_175:
              if (*(_QWORD *)&v92 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v93 = operator new(8 * *(_QWORD *)&v92);
              v94 = (void *)*((_QWORD *)v1 + 16);
              *((_QWORD *)v1 + 16) = v93;
              if (v94)
                operator delete(v94);
              v95 = 0;
              *((int8x8_t *)v1 + 17) = v92;
              do
                *(_QWORD *)(*((_QWORD *)v1 + 16) + 8 * v95++) = 0;
              while (*(_QWORD *)&v92 != v95);
              v96 = *v172;
              if (*v172)
              {
                v97 = (unint64_t)v96[1];
                v98 = (uint8x8_t)vcnt_s8(v92);
                v98.i16[0] = vaddlv_u8(v98);
                v99 = v98.u32[0];
                if (v98.u32[0] > 1uLL)
                {
                  if (v97 >= *(_QWORD *)&v92)
                    v97 %= *(_QWORD *)&v92;
                }
                else
                {
                  v97 &= *(_QWORD *)&v92 - 1;
                }
                *(_QWORD *)(*((_QWORD *)v1 + 16) + 8 * v97) = v172;
                v103 = *v96;
                if (*v96)
                {
                  v104 = *(_QWORD *)&v92 - 1;
                  v170 = v98.u32[0];
                  do
                  {
                    v105 = *((_QWORD *)v103 + 1);
                    if (v99 > 1)
                    {
                      if (v105 >= *(_QWORD *)&v92)
                        v105 %= *(_QWORD *)&v92;
                    }
                    else
                    {
                      v105 &= v104;
                    }
                    if (v105 == v97)
                    {
                      v96 = (unsigned __int8 **)v103;
                    }
                    else
                    {
                      v106 = *((_QWORD *)v1 + 16);
                      if (*(_QWORD *)(v106 + 8 * v105))
                      {
                        v107 = *(unsigned __int8 **)v103;
                        if (*(_QWORD *)v103)
                        {
                          v108 = v1;
                          v109 = v104;
                          v110 = v103;
                          while (1)
                          {
                            v111 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v180, v103 + 16, v107 + 16);
                            v112 = *(unsigned __int8 **)v110;
                            if (!v111)
                              break;
                            v107 = *(unsigned __int8 **)v112;
                            v110 = *(unsigned __int8 **)v110;
                            if (!*(_QWORD *)v112)
                              goto LABEL_208;
                          }
                          v107 = *(unsigned __int8 **)v110;
                          v112 = v110;
LABEL_208:
                          v104 = v109;
                          v1 = v108;
                          v99 = v170;
                        }
                        else
                        {
                          v112 = v103;
                        }
                        *v96 = v107;
                        *(_QWORD *)v112 = **(_QWORD **)(*((_QWORD *)v1 + 16) + 8 * v105);
                        **(_QWORD **)(*((_QWORD *)v1 + 16) + 8 * v105) = v103;
                      }
                      else
                      {
                        *(_QWORD *)(v106 + 8 * v105) = v96;
                        v96 = (unsigned __int8 **)v103;
                        v97 = v105;
                      }
                    }
                    v103 = *v96;
                  }
                  while (*v96);
                }
              }
            }
            else
            {
              v113 = (void *)*((_QWORD *)v1 + 16);
              *((_QWORD *)v1 + 16) = 0;
              if (v113)
                operator delete(v113);
              *((_QWORD *)v1 + 17) = 0;
            }
          }
        }
        v86 = *((_QWORD *)v1 + 17);
        v30 = v175;
        v85 = v80 + 16;
      }
      v114 = (uint8x8_t)vcnt_s8((int8x8_t)v86);
      v114.i16[0] = vaddlv_u8(v114);
      v115 = v114.u32[0];
      if (v114.u32[0] > 1uLL)
      {
        v116 = v179;
        if (v86 <= v179)
          v116 = v179 % v86;
      }
      else
      {
        v116 = (v86 - 1) & v179;
      }
      v117 = *(unsigned __int8 ***)(*((_QWORD *)v1 + 16) + 8 * v116);
      if (v117)
      {
        v118 = *v117;
        if (*v117)
        {
          v119 = 0;
          do
          {
            v120 = *((_QWORD *)v118 + 1);
            if (v115 > 1)
            {
              v121 = *((_QWORD *)v118 + 1);
              if (v120 >= v86)
                v121 = v120 % v86;
            }
            else
            {
              v121 = v120 & (v86 - 1);
            }
            if (v121 != v116)
              break;
            v122 = v120 == v179
                 ? std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v180, v118 + 16, v85)
                 : 0;
            if ((v119 & (v122 ^ 1) & 1) != 0)
              break;
            v119 |= v122;
            v117 = (unsigned __int8 **)*v117;
            v118 = *v117;
          }
          while (*v117);
          v86 = *((_QWORD *)v1 + 17);
          v123 = (uint8x8_t)vcnt_s8((int8x8_t)v86);
          v123.i16[0] = vaddlv_u8(v123);
          v115 = v123.u32[0];
        }
      }
      v124 = *((_QWORD *)v80 + 1);
      if (v115 > 1)
      {
        if (v124 >= v86)
          v124 %= v86;
      }
      else
      {
        v124 &= v86 - 1;
      }
      if (v117)
      {
        *(_QWORD *)v80 = *v117;
        *v117 = v80;
        if (!*(_QWORD *)v80)
          goto LABEL_257;
        v125 = *(_QWORD *)(*(_QWORD *)v80 + 8);
        if (v115 > 1)
        {
          if (v125 >= v86)
            v125 %= v86;
        }
        else
        {
          v125 &= v86 - 1;
        }
        if (v125 == v124)
          goto LABEL_257;
LABEL_256:
        *(_QWORD *)(*((_QWORD *)v1 + 16) + 8 * v125) = v80;
      }
      else
      {
        *(_QWORD *)v80 = *((_QWORD *)v1 + 18);
        *((_QWORD *)v1 + 18) = v80;
        *(_QWORD *)(*((_QWORD *)v1 + 16) + 8 * v124) = v172;
        if (*(_QWORD *)v80)
        {
          v125 = *(_QWORD *)(*(_QWORD *)v80 + 8);
          if (v115 > 1)
          {
            if (v125 >= v86)
              v125 %= v86;
          }
          else
          {
            v125 &= v86 - 1;
          }
          goto LABEL_256;
        }
      }
LABEL_257:
      ++*v176;
      v203.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v203);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v126 = v188;
    if (v188)
    {
      v127 = (unint64_t *)&v188->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
LABEL_264:
    if (*((char *)v30 + 23) < 0)
    {
      if (!v30[1])
        goto LABEL_304;
    }
    else if (!*((_BYTE *)v30 + 23))
    {
      goto LABEL_304;
    }
    RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>((uint64_t)v189, &v187);
    v130 = v187;
    if (v187)
    {
      v131 = RIO_MTLX::EMPTY_STRING(v129);
      if (RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>(v130, (unsigned __int8 *)v131))
      {
        RIO_MTLX::Element::getQualifiedName(v187, (std::string *)v30, &v203);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>>>::__emplace_multi<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>&>((uint64_t)v171, (uint64_t)&v203, &v187);
        if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v203.__r_.__value_.__l.__data_);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Implementation>(v187, &v184);
      if (v184)
      {
        NodeGraph = RIO_MTLX::Implementation::getNodeGraph(v184);
        v133 = (unsigned __int8 *)NodeGraph;
        v134 = *((unsigned __int8 *)NodeGraph + 23);
        if ((v134 & 0x80u) != 0)
          v134 = NodeGraph[1];
        if (v134)
        {
          RIO_MTLX::Element::getDocument(v184, &v203);
          RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeGraph>((uint64_t)v203.__r_.__value_.__l.__data_, v133, &v182);
          size = (std::__shared_weak_count *)v203.__r_.__value_.__l.__size_;
          if (v203.__r_.__value_.__l.__size_)
          {
            v136 = (unint64_t *)(v203.__r_.__value_.__l.__size_ + 8);
            do
              v137 = __ldaxr(v136);
            while (__stlxr(v137 - 1, v136));
            if (!v137)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          if (v182)
          {
            RIO_MTLX::Element::getQualifiedName(v187, (std::string *)v30, &__p);
            v138 = operator new(0x38uLL);
            v139 = (uint64_t)v138;
            v141 = v182;
            v140 = v183;
            v138[4] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            v138[5] = v141;
            v203.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
            v203.__r_.__value_.__l.__size_ = v166;
            *v138 = 0;
            v138[1] = 0;
            *((_OWORD *)v138 + 1) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            memset(&__p, 0, sizeof(__p));
            v138[6] = v140;
            if (v140)
            {
              v142 = (unint64_t *)&v140->__shared_owners_;
              do
                v143 = __ldxr(v142);
              while (__stxr(v143 + 1, v142));
            }
            v203.__r_.__value_.__s.__data_[16] = 1;
            v138[1] = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v167, (uint64_t)(v138 + 2));
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi((uint64_t)v171, v139);
            v203.__r_.__value_.__r.__words[0] = 0;
            std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v203);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          v144 = v183;
          if (v183)
          {
            v145 = (unint64_t *)&v183->__shared_owners_;
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
        }
        else
        {
          RIO_MTLX::Element::getQualifiedName(v187, (std::string *)v30, &v203);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>>>::__emplace_multi<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>&>((uint64_t)v171, (uint64_t)&v203, &v187);
          if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v203.__r_.__value_.__l.__data_);
        }
      }
      v147 = v185;
      if (v185)
      {
        v148 = (unint64_t *)&v185->__shared_owners_;
        do
          v149 = __ldaxr(v148);
        while (__stlxr(v149 - 1, v148));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
          std::__shared_weak_count::__release_weak(v147);
        }
      }
    }
    v150 = v188;
    if (v188)
    {
      v151 = (unint64_t *)&v188->__shared_owners_;
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
LABEL_304:
    v153 = v190;
    if (v190)
    {
      v154 = (unint64_t *)&v190->__shared_owners_;
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    RIO_MTLX::TreeIterator::operator++(&v194);
  }
  v203.__r_.__value_.__r.__words[0] = (std::string::size_type)v192;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
  v156 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
  if (*((_QWORD *)&v191 + 1))
  {
    v157 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  *(_QWORD *)&v191 = v196;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
  v159 = v195;
  if (v195)
  {
    v160 = (unint64_t *)&v195->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v194 = (std::__shared_weak_count *)&v200;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
  v162 = v199;
  if (v199)
  {
    v163 = (unint64_t *)&v199->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  *((_BYTE *)v1 + 80) = 1;
  v2 = v165;
LABEL_326:
  std::mutex::unlock(v2);
}

void sub_22FFFED4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41)
{
  uint64_t v41;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)(v41 - 224));
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)(v41 - 168));
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

void sub_22FFFEEE4()
{
  JUMPOUT(0x22FFFEEBCLL);
}

void RIO_MTLX::Document::getGeomPropValue(RIO_MTLX *a1, uint64_t a2, unsigned __int8 *a3, RIO_MTLX *a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  RIO_MTLX::GeomElement *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char v15;
  char v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  std::string __p;
  RIO_MTLX::GeomElement *v31;
  std::__shared_weak_count *v32;
  _QWORD v33[3];

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v8 = RIO_MTLX::EMPTY_STRING(a1);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::GeomInfo>(a2, (unsigned __int8 *)v8, (uint64_t)v33);
  v9 = v33[0];
  v10 = v33[1];
  while (v9 != v10)
  {
    v12 = *(RIO_MTLX::GeomElement **)v9;
    v11 = *(std::__shared_weak_count **)(v9 + 8);
    v31 = *(RIO_MTLX::GeomElement **)v9;
    v32 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    RIO_MTLX::GeomElement::getActiveGeom(&__p, v12);
    v15 = RIO_MTLX::geomStringsMatch(a4, &__p, 0);
    v16 = v15;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v16 & 1) == 0)
      {
LABEL_8:
        if (!v11)
          goto LABEL_32;
LABEL_28:
        v27 = (unint64_t *)&v11->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_32;
      }
    }
    else if ((v15 & 1) == 0)
    {
      goto LABEL_8;
    }
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::GeomProp>(&__p, (uint64_t)v12, a3);
    if (__p.__r_.__value_.__r.__words[0])
    {
      RIO_MTLX::ValueElement::getValue((RIO_MTLX::ValueElement *)__p.__r_.__value_.__l.__data_, (uint64_t)&v29);
      v17 = v29;
      v29 = 0uLL;
      v18 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
      *(_OWORD *)a1 = v17;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
      if (*((_QWORD *)&v29 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v11 = v32;
    if (v32)
      goto LABEL_28;
LABEL_32:
    v9 += 16;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_22FFFF0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19)
{
  uint64_t v19;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::Document::getMatchingNodeDefs@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  RIO_MTLX::Document::Cache::refresh(*(RIO_MTLX::Document::Cache **)(a1 + 272));
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__equal_range_multi<std::string>((_QWORD *)(*(_QWORD *)(a1 + 272) + 128), a2);
  v7 = result;
  v9 = v8;
  while (v7 != v9)
  {
    result = std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a3, (__int128 *)(v7 + 40));
    v7 = *(_QWORD *)v7;
  }
  return result;
}

void sub_22FFFF1B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::Document::getMatchingImplementations@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  RIO_MTLX::Document::Cache::refresh(*(RIO_MTLX::Document::Cache **)(a1 + 272));
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__equal_range_multi<std::string>((_QWORD *)(*(_QWORD *)(a1 + 272) + 168), a2);
  v7 = result;
  v9 = v8;
  while (v7 != v9)
  {
    result = std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a3, (__int128 *)(v7 + 40));
    v7 = *(_QWORD *)v7;
  }
  return result;
}

void sub_22FFFF248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::Document::validate(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  BOOL v6;
  char v7;
  uint64_t v8;
  BOOL v10;
  char v11;
  uint64_t result;
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;
  char v17;

  v17 = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v6 = (_DWORD)v4 != 1 || SHIDWORD(v4) > 37;
  v7 = (int)v4 >= 1 && v6;
  std::string::basic_string[abi:ne180100]<0>(__p, "Unsupported document version");
  RIO_MTLX::Element::validateRequire(a1, v7, &v17, a2, (const void **)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v10 = (_DWORD)v8 != 1 || SHIDWORD(v8) < 39;
  v11 = (int)v8 <= 1 && v10;
  std::string::basic_string[abi:ne180100]<0>(v13, "Future document version");
  RIO_MTLX::Element::validateRequire(a1, v11, &v17, a2, (const void **)v13);
  if (v14 < 0)
    operator delete(v13[0]);
  LODWORD(result) = RIO_MTLX::Element::validate(a1, a2);
  if (v17)
    return result;
  else
    return 0;
}

void sub_22FFFF378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Document::upgradeVersion(uint64_t **this)
{
  std::string::size_type v1;
  RIO_MTLX *v2;
  BOOL v3;
  unint64_t *v4;
  unint64_t v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  _BOOL8 v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t *v15;
  int v16;
  __int128 *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  std::string::size_type v36;
  unint64_t *v37;
  unint64_t v38;
  std::string::size_type v39;
  int v40;
  int v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  std::string *v46;
  std::string::size_type v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  __int128 *v65;
  unsigned __int8 *v66;
  const std::string *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  char *v79;
  unint64_t *v80;
  unint64_t v81;
  _BOOL8 v82;
  __int128 v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  const std::string *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  char *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  std::string::size_type v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  int v112;
  unint64_t *v113;
  unint64_t v114;
  unsigned __int8 *v115;
  std::__shared_weak_count *v116;
  std::string *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  char *v133;
  unint64_t *v134;
  unint64_t v135;
  std::string::size_type v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unsigned __int8 *v140;
  RIO_MTLX::Node **v141;
  RIO_MTLX::Node **v142;
  RIO_MTLX::Node *v143;
  RIO_MTLX::Node *v144;
  unint64_t *v145;
  unint64_t v146;
  char *v147;
  int v148;
  uint64_t v149;
  uint64_t v151;
  int v152;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  int v156;
  int v157;
  _QWORD *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  int v168;
  int v169;
  _QWORD *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::string::size_type v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  RIO_MTLX *v184;
  const std::string *v185;
  uint64_t *v186;
  RIO_MTLX::TypedElement *v187;
  __int128 *v188;
  _QWORD *v189;
  std::string::size_type v190;
  unsigned __int8 *v191;
  uint64_t *v192;
  RIO_MTLX::NodeDef *v193;
  const std::string *v194;
  int v195;
  uint64_t *v197;
  uint64_t *v198;
  _BOOL8 v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t *v208;
  RIO_MTLX::PortElement *v209;
  const std::string *v210;
  __int128 *v211;
  _QWORD *v212;
  unint64_t *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t *v217;
  int v218;
  _WORD *v219;
  __int128 *v220;
  _QWORD *v221;
  __int128 v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t *v225;
  RIO_MTLX::TypedElement *v226;
  __int128 *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t *v231;
  __int128 *v232;
  unint64_t *v233;
  unsigned __int8 *v234;
  const std::string *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t *v247;
  std::string::size_type v248;
  std::__shared_weak_count *v249;
  uint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  uint64_t *v253;
  std::string::size_type v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  __int128 v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t *v268;
  RIO_MTLX::InterfaceElement *v269;
  __int128 *v270;
  std::string *v271;
  __int128 *v272;
  const std::string *NodeString;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  RIO_MTLX *v279;
  uint64_t *v280;
  std::string::size_type v281;
  std::string::size_type v282;
  unint64_t *v283;
  unint64_t v284;
  std::string::size_type v285;
  std::string::size_type i;
  _QWORD *v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  _BOOL4 v292;
  std::string *v293;
  std::string::size_type v294;
  unint64_t *v295;
  unint64_t v296;
  uint64_t *v297;
  uint64_t *j;
  std::__shared_weak_count *v299;
  uint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  _BOOL4 v304;
  unsigned __int8 *v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  RIO_MTLX::TypedElement *v317;
  uint64_t *v318;
  __int128 *v319;
  const std::string *v320;
  uint64_t *v321;
  unsigned __int8 *v322;
  const std::string *v323;
  uint64_t *v324;
  unsigned __int8 *v325;
  const std::string *v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  unint64_t *v330;
  unint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  RIO_MTLX *v338;
  uint64_t *v339;
  std::string::size_type *k;
  std::string::size_type v341;
  std::__shared_weak_count *v342;
  std::string::size_type v343;
  unint64_t *v344;
  unint64_t v345;
  std::string::size_type v346;
  std::string::size_type v347;
  std::string *v348;
  std::string::size_type v349;
  unint64_t *v350;
  unint64_t v351;
  _QWORD *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  RIO_MTLX *v365;
  __int128 *v366;
  RIO_MTLX *v367;
  RIO_MTLX *v368;
  __int128 *v369;
  std::__shared_weak_count *v370;
  _BOOL4 v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t *v377;
  RIO_MTLX *v378;
  std::string::size_type v379;
  std::string::size_type *m;
  std::string::size_type v381;
  std::string::size_type v382;
  unint64_t *v383;
  unint64_t v384;
  uint64_t *v385;
  uint64_t *v386;
  uint64_t *v387;
  uint64_t *v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  std::string::size_type v393;
  int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  const void **v398;
  unsigned __int8 *v399;
  std::string::size_type v400;
  _QWORD *v401;
  unint64_t *v402;
  unint64_t v403;
  std::string::size_type v404;
  std::string::size_type v405;
  uint64_t v406;
  unint64_t v407;
  int64_t v408;
  unint64_t v409;
  char *v410;
  std::string::size_type *v411;
  unint64_t *v412;
  unint64_t v413;
  _QWORD *v414;
  std::string::size_type v415;
  __int128 v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  uint64_t *v423;
  std::string::size_type v424;
  std::__shared_weak_count *v425;
  uint64_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  _QWORD *v430;
  int v431;
  uint64_t *ValueString;
  unint64_t *v433;
  unint64_t v434;
  unint64_t *v435;
  unint64_t v436;
  std::string *v437;
  std::string::size_type v438;
  std::string::size_type v439;
  std::string *v440;
  std::string::size_type v441;
  std::string *v442;
  std::string *v443;
  uint64_t *v444;
  __int128 *v445;
  const std::string *v446;
  __int128 v447;
  std::string::size_type v448;
  char *v449;
  char *v450;
  size_t v451;
  __int128 *v452;
  char *v453;
  _QWORD *v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  unint64_t *v461;
  unint64_t v462;
  RIO_MTLX::GeomElement *v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  uint64_t *v467;
  __int128 *v468;
  std::string *v469;
  _QWORD *v470;
  unsigned __int8 *v471;
  RIO_MTLX::GeomProp *v472;
  __int128 v473;
  std::string::size_type v474;
  char *v475;
  char *v476;
  size_t v477;
  __int128 *v478;
  char *v479;
  _QWORD *v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  unint64_t *v487;
  unint64_t v488;
  std::__shared_weak_count *v489;
  unint64_t *v490;
  unint64_t v491;
  __int128 v492;
  std::__shared_weak_count *v493;
  unint64_t *v494;
  unint64_t v495;
  std::__shared_weak_count *v496;
  unint64_t *v497;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  unint64_t *v505;
  unint64_t v506;
  char *v507;
  unint64_t *v508;
  unint64_t v509;
  _BOOL8 v510;
  uint64_t *v511;
  unint64_t *v512;
  unint64_t v513;
  unsigned __int8 *v514;
  unsigned __int8 *v515;
  uint64_t *v516;
  int v517;
  __int128 *v519;
  unsigned __int8 *v520;
  unsigned __int8 *v521;
  unsigned __int8 *v522;
  unsigned __int8 *v523;
  __int128 *v524;
  unsigned __int8 *v525;
  const std::string *v526;
  RIO_MTLX::MaterialAssign *v527;
  std::string *v528;
  __int128 *v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  std::__shared_weak_count *v542;
  unint64_t *v543;
  unint64_t v544;
  unint64_t *v545;
  unint64_t v546;
  char *v547;
  unint64_t *v548;
  unint64_t v549;
  uint64_t v550;
  unint64_t *v551;
  unint64_t v552;
  RIO_MTLX::TypedElement *v553;
  unsigned __int8 *v554;
  RIO_MTLX *v555;
  RIO_MTLX *v556;
  std::string *v557;
  uint64_t v558;
  uint64_t v559;
  std::string::size_type v560;
  int v561;
  unsigned __int8 *v562;
  unsigned __int8 *v563;
  unsigned __int8 *v564;
  int v565;
  RIO_MTLX *v566;
  __int128 *v567;
  unsigned __int8 *v568;
  RIO_MTLX *v569;
  RIO_MTLX *v570;
  RIO_MTLX *v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  int v575;
  unsigned __int8 *v576;
  const std::string *v577;
  unsigned __int8 *v578;
  std::string *v579;
  const std::string *v580;
  unsigned __int8 *v581;
  std::string *v582;
  RIO_MTLX::ValueElement *v583;
  unsigned __int8 *v584;
  unsigned __int8 *v585;
  uint64_t *v586;
  __int128 v587;
  uint64_t *v588;
  uint64_t *v589;
  uint64_t v590;
  unint64_t *v591;
  unint64_t v592;
  int v593;
  std::string::__raw *v594;
  std::string::__raw *v595;
  _QWORD *v596;
  int v597;
  _QWORD *v598;
  int v599;
  _QWORD *v600;
  uint64_t v601;
  RIO_MTLX::Element *v603;
  const std::string *v604;
  _QWORD *v605;
  int v606;
  std::string::size_type v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  unint64_t v610;
  unint64_t v611;
  unint64_t *v612;
  unint64_t v613;
  uint64_t *v614;
  std::string::size_type v615;
  std::__shared_weak_count *v616;
  uint64_t v617;
  unint64_t *v618;
  unint64_t v619;
  unsigned __int8 *v620;
  void *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  int v625;
  unsigned __int8 *v626;
  _BOOL4 v627;
  uint64_t v628;
  int v629;
  uint64_t v630;
  std::__shared_weak_count *v631;
  unint64_t *v632;
  unint64_t v633;
  unint64_t v634;
  uint64_t v635;
  int v636;
  uint64_t *v638;
  RIO_MTLX::TypedElement *v639;
  uint64_t *v640;
  __int128 *v641;
  const std::string *v642;
  std::string *v643;
  uint64_t *v644;
  __int128 *v645;
  unsigned __int8 *v646;
  const std::string *v647;
  std::__shared_weak_count *v648;
  unint64_t *v649;
  unint64_t v650;
  RIO_MTLX::TypedElement *v651;
  uint64_t *v652;
  __int128 *v653;
  const std::string *v654;
  std::string *v655;
  uint64_t *v656;
  __int128 *v657;
  unsigned __int8 *v658;
  const std::string *v659;
  unint64_t *v660;
  unint64_t *v661;
  unint64_t v662;
  std::__shared_weak_count *v663;
  unint64_t *v664;
  unint64_t v665;
  unint64_t *v666;
  unint64_t v667;
  __int128 *v668;
  unint64_t *v669;
  unint64_t v670;
  _QWORD *v671;
  uint64_t v672;
  RIO_MTLX::Element *v674;
  const std::string *v675;
  __int128 *v676;
  std::__shared_weak_count *v677;
  unint64_t *v678;
  unint64_t v679;
  std::__shared_weak_count *v680;
  unint64_t *v681;
  unint64_t v682;
  unint64_t *v683;
  unint64_t v684;
  std::__shared_weak_count *v685;
  unint64_t *v686;
  unint64_t v687;
  std::__shared_weak_count *v688;
  unint64_t *v689;
  unint64_t v690;
  std::__shared_weak_count *v691;
  unint64_t *v692;
  unint64_t v693;
  uint64_t *v694;
  unsigned __int8 *v695;
  std::string::size_type n;
  std::string::size_type v697;
  RIO_MTLX::Output *v698;
  std::__shared_weak_count *v699;
  unint64_t *v700;
  unint64_t v701;
  unint64_t v702;
  unsigned __int8 *v703;
  unsigned __int8 *v704;
  unsigned __int8 *v705;
  std::string *v706;
  __int128 v707;
  std::string::size_type v708;
  uint64_t v709;
  std::string::size_type v710;
  std::string::size_type v711;
  int v712;
  const std::string::value_type *v713;
  std::string *v714;
  __int128 v715;
  __int128 v716;
  unint64_t *v717;
  unint64_t v718;
  std::__shared_weak_count *v719;
  unint64_t *v720;
  unint64_t v721;
  unsigned __int8 *v722;
  RIO_MTLX::Output *v723;
  unsigned __int8 *v724;
  RIO_MTLX::Output *v725;
  RIO_MTLX::Output *v726;
  uint64_t *v727;
  __int128 *v728;
  _QWORD *v729;
  unsigned __int8 *v730;
  std::__shared_weak_count *v731;
  unint64_t *v732;
  unint64_t v733;
  unint64_t *v734;
  unint64_t v735;
  std::__shared_weak_count *v736;
  unint64_t *v737;
  unint64_t v738;
  RIO_MTLX *v739;
  uint64_t *v740;
  std::string::size_type ii;
  std::string::size_type v742;
  std::__shared_weak_count *v743;
  unsigned __int8 *v744;
  unint64_t *v745;
  unint64_t v746;
  uint64_t v747;
  int v748;
  unint64_t *v750;
  unint64_t v751;
  RIO_MTLX *v752;
  uint64_t *v753;
  uint64_t *jj;
  std::string::size_type v755;
  std::__shared_weak_count *v756;
  uint64_t v757;
  unint64_t *v758;
  unint64_t v759;
  std::string::size_type v760;
  std::string::size_type v761;
  std::string *v762;
  std::string::size_type v763;
  unint64_t *v764;
  unint64_t v765;
  _QWORD *v766;
  unint64_t v767;
  std::__shared_weak_count *v768;
  unint64_t *v769;
  unint64_t v770;
  std::__shared_weak_count *v771;
  unint64_t *v772;
  unint64_t v773;
  std::__shared_weak_count *v774;
  unint64_t *v775;
  unint64_t v776;
  unint64_t *v777;
  unint64_t v778;
  unint64_t *v779;
  unint64_t v780;
  char *v781;
  unint64_t *v782;
  unint64_t v783;
  uint64_t v784;
  unint64_t *v785;
  unint64_t v786;
  std::string *v787;
  int v788;
  uint64_t *v789;
  uint64_t v790;
  uint64_t v791;
  std::__shared_weak_count *v793;
  unint64_t *v794;
  unint64_t v795;
  std::__shared_weak_count *v796;
  unint64_t *v797;
  unint64_t v798;
  std::string::size_type v799;
  unsigned __int8 *v800;
  uint64_t *v801;
  std::string::size_type v802;
  unsigned __int8 *v803;
  const std::string *v804;
  _QWORD *v805;
  std::__shared_weak_count *v806;
  unint64_t *v807;
  unint64_t v808;
  std::__shared_weak_count *v809;
  unint64_t *v810;
  unint64_t v811;
  std::__shared_weak_count *v812;
  unint64_t *v813;
  unint64_t v814;
  unint64_t *v815;
  unint64_t v816;
  std::string::value_type *v817;
  char *v818;
  unint64_t *v819;
  unint64_t v820;
  uint64_t *v821;
  uint64_t v822;
  unint64_t *v823;
  unint64_t v824;
  uint64_t *v825;
  std::string::size_type v826;
  std::string::size_type v827;
  int v828;
  int *v829;
  int v830;
  int v831;
  int v833;
  int *v834;
  std::string *v837;
  unsigned __int8 *v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  char *v842;
  uint64_t *v843;
  unsigned __int8 *v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t *v848;
  int *v850;
  int v856;
  int v857;
  std::string *v859;
  uint64_t v860;
  std::string *v861;
  std::string::size_type v862;
  unsigned __int8 *v863;
  std::__shared_weak_count *v864;
  std::string *v865;
  unint64_t *v866;
  unint64_t v867;
  uint64_t *v868;
  uint64_t v870;
  uint64_t v871;
  std::string::size_type v873;
  unsigned __int8 *v874;
  std::string::size_type v875;
  std::__shared_weak_count *v876;
  unint64_t *v877;
  unint64_t v878;
  _BOOL4 v879;
  uint64_t v880;
  unsigned __int8 *v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t *v885;
  unsigned __int8 *v886;
  std::string::size_type v887;
  unsigned __int8 *v888;
  std::__shared_weak_count *v889;
  uint64_t v890;
  unint64_t *v891;
  unint64_t v892;
  unint64_t v893;
  std::string::size_type v894;
  unsigned __int8 *v895;
  std::__shared_weak_count *v896;
  uint64_t v897;
  unint64_t *v898;
  unint64_t v899;
  unint64_t v900;
  unint64_t *v901;
  unint64_t v902;
  std::string *v903;
  unsigned __int8 *v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t *v908;
  std::string *v909;
  _QWORD *v910;
  unint64_t *v911;
  unint64_t v912;
  __int128 v913;
  unint64_t *v914;
  unint64_t v915;
  std::__shared_weak_count *v916;
  unint64_t *v917;
  unint64_t v918;
  std::__shared_weak_count *v919;
  unint64_t *v920;
  unint64_t v921;
  std::string *v922;
  uint64_t v923;
  uint64_t v924;
  std::string *v925;
  std::string *v926;
  std::string *v927;
  std::__shared_weak_count *v928;
  unint64_t *v929;
  unint64_t v930;
  std::__shared_weak_count *v931;
  unint64_t *v932;
  unint64_t v933;
  std::__shared_weak_count *v934;
  unint64_t *v935;
  unint64_t v936;
  std::__shared_weak_count *v937;
  unint64_t *v938;
  unint64_t v939;
  std::string *v940;
  unsigned __int8 *v941;
  std::__shared_weak_count *v942;
  uint64_t v943;
  unint64_t *v944;
  unint64_t v945;
  unint64_t v946;
  int v947;
  uint64_t v948;
  char *v949;
  char *v950;
  size_t v951;
  std::string *v952;
  char *v953;
  _QWORD *v954;
  std::__shared_weak_count *v955;
  unint64_t *v956;
  unint64_t v957;
  std::__shared_weak_count *v958;
  unint64_t *v959;
  unint64_t v960;
  unint64_t *v961;
  unint64_t v962;
  std::__shared_weak_count *v963;
  unint64_t *v964;
  unint64_t v965;
  std::string::size_type v966;
  std::string *v967;
  uint64_t *v968;
  std::string::size_type v969;
  std::string::value_type *v970;
  std::string::size_type *kk;
  std::string::size_type *v972;
  std::__shared_weak_count *v973;
  std::string::size_type v974;
  unint64_t *v975;
  unint64_t v976;
  unsigned __int8 *v977;
  uint64_t *v978;
  unsigned __int8 *v979;
  unsigned __int8 *v980;
  const std::string *v981;
  unint64_t *v982;
  unint64_t v983;
  unint64_t *v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t *v988;
  unsigned __int8 *v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t *v993;
  unsigned __int8 *v994;
  std::string *v995;
  std::string *v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t *v1000;
  std::string *v1001;
  std::string *v1002;
  unint64_t *v1003;
  std::__shared_weak_count *v1004;
  unint64_t *v1005;
  unint64_t v1006;
  std::__shared_weak_count *v1007;
  unint64_t *v1008;
  unint64_t v1009;
  std::__shared_weak_count *v1010;
  unint64_t *v1011;
  unint64_t v1012;
  std::__shared_weak_count *v1013;
  unint64_t *v1014;
  unint64_t v1015;
  std::__shared_weak_count *v1016;
  unint64_t *v1017;
  unint64_t v1018;
  uint64_t v1019;
  unint64_t v1020;
  std::string::size_type v1021;
  unint64_t v1022;
  uint8x8_t v1023;
  unint64_t v1024;
  unsigned __int8 **v1025;
  unsigned __int8 *mm;
  unint64_t v1027;
  char *v1028;
  float v1029;
  _BOOL8 v1030;
  unint64_t v1031;
  unint64_t v1032;
  size_t v1033;
  _QWORD *v1034;
  unint64_t v1035;
  uint64_t nn;
  void **v1037;
  unint64_t *v1038;
  unint64_t v1039;
  char *v1040;
  unint64_t *v1041;
  unint64_t v1042;
  _BOOL8 v1043;
  uint64_t *v1044;
  unint64_t *v1045;
  unint64_t v1046;
  unsigned __int8 *v1047;
  unsigned __int8 *v1048;
  uint64_t *v1049;
  int v1050;
  std::__shared_weak_count *v1052;
  unint64_t *v1053;
  unint64_t v1054;
  __int128 *v1055;
  std::__shared_weak_count *v1056;
  std::__shared_weak_count *v1057;
  unint64_t *v1058;
  unint64_t v1059;
  std::string *v1060;
  uint64_t v1061;
  uint64_t v1062;
  std::__shared_weak_count *v1063;
  RIO_MTLX::PortElement *v1064;
  unint64_t *v1065;
  unint64_t v1066;
  unsigned __int8 *v1067;
  std::string *v1068;
  uint64_t *Channels;
  __int128 v1070;
  RIO_MTLX::PortElement *v1071;
  __int128 *v1072;
  unsigned __int8 *v1073;
  uint64_t *OutputString;
  __int128 v1075;
  RIO_MTLX::PortElement *v1076;
  __int128 *v1077;
  unint64_t *v1078;
  unint64_t v1079;
  RIO_MTLX::Node *v1080;
  unsigned __int8 *v1081;
  std::string::size_type v1082;
  std::string::size_type v1083;
  unint64_t *v1084;
  unint64_t v1085;
  std::__shared_weak_count *v1086;
  unint64_t *v1087;
  unint64_t v1088;
  unsigned __int8 *v1089;
  unsigned __int8 *v1090;
  uint64_t *v1091;
  unsigned __int8 *v1092;
  unsigned __int8 *v1093;
  uint64_t *v1094;
  __int128 v1095;
  RIO_MTLX::ValueElement *v1096;
  __int128 *v1097;
  std::__shared_weak_count *v1098;
  unint64_t *v1099;
  unint64_t v1100;
  unint64_t *v1101;
  std::__shared_weak_count *v1102;
  unint64_t *v1103;
  unint64_t v1104;
  std::__shared_weak_count *v1105;
  unint64_t *v1106;
  unint64_t v1107;
  std::__shared_weak_count *v1108;
  unint64_t *v1109;
  unint64_t v1110;
  std::string *v1111;
  std::__shared_weak_count *v1112;
  void *v1113;
  unint64_t *v1114;
  unint64_t v1115;
  std::string::size_type v1116;
  void *v1117;
  std::__shared_weak_count *v1118;
  unint64_t *v1119;
  unint64_t v1120;
  unint64_t v1121;
  unint64_t *v1122;
  unint64_t v1123;
  const std::string::value_type **v1124;
  __int128 v1125;
  uint64_t *v1126;
  _QWORD *v1127;
  unsigned __int8 *v1128;
  unsigned __int8 *v1129;
  __int128 v1130;
  const std::string *v1131;
  std::string *v1132;
  unsigned __int8 *v1133;
  unsigned __int8 *v1134;
  uint64_t *v1135;
  __int128 v1136;
  unsigned __int8 *v1137;
  unsigned __int8 *v1138;
  uint64_t *v1139;
  __int128 v1140;
  unsigned __int8 *v1141;
  unsigned __int8 *v1142;
  std::string *v1143;
  __int128 v1144;
  std::string::size_type v1145;
  uint64_t *v1146;
  __int128 *v1147;
  std::string::size_type v1148;
  uint64_t *v1149;
  __int128 *v1150;
  std::string::size_type v1151;
  uint64_t *v1152;
  __int128 *v1153;
  std::string *v1154;
  std::string::pointer data;
  void **v1156;
  std::string::size_type v1157;
  char *v1158;
  unint64_t *v1159;
  unint64_t v1160;
  char *v1161;
  int v1162;
  BOOL v1163;
  BOOL v1164;
  uint64_t v1165;
  int v1166;
  _QWORD *v1168;
  RIO_MTLX::Input *v1169;
  const std::string *v1170;
  std::__shared_weak_count *v1171;
  unint64_t *v1172;
  unint64_t v1173;
  std::__shared_weak_count *v1174;
  unint64_t *v1175;
  unint64_t v1176;
  unint64_t *v1177;
  unint64_t v1178;
  std::__shared_weak_count *v1179;
  unint64_t *v1180;
  unint64_t v1181;
  std::string::size_type v1182;
  char *v1183;
  char *v1184;
  size_t v1185;
  __int128 *v1186;
  char *v1187;
  _QWORD *v1188;
  std::__shared_weak_count *v1189;
  unint64_t *v1190;
  unint64_t v1191;
  std::__shared_weak_count *v1192;
  unint64_t *v1193;
  unint64_t v1194;
  unint64_t *v1195;
  unint64_t v1196;
  std::__shared_weak_count *v1197;
  unint64_t *v1198;
  unint64_t v1199;
  RIO_MTLX::Element *v1200;
  std::string *v1201;
  std::string::size_type v1202;
  unint64_t *v1203;
  unint64_t v1204;
  __int128 v1205;
  std::__shared_weak_count *v1206;
  unint64_t *v1207;
  unint64_t v1208;
  std::__shared_weak_count *v1209;
  unint64_t *v1210;
  unint64_t v1211;
  std::__shared_weak_count *v1212;
  unint64_t *v1213;
  unint64_t v1214;
  __int128 v1215;
  unint64_t *v1216;
  unint64_t v1217;
  std::__shared_weak_count *v1218;
  unint64_t *v1219;
  unint64_t v1220;
  std::__shared_weak_count *v1221;
  unint64_t *v1222;
  unint64_t v1223;
  std::__shared_weak_count *v1224;
  unint64_t *v1225;
  unint64_t v1226;
  std::string *v1227;
  uint64_t *v1228;
  const std::string *v1229;
  __int128 *v1230;
  std::__shared_weak_count *v1231;
  unint64_t *v1232;
  unint64_t v1233;
  uint64_t *v1234;
  _QWORD *v1235;
  unsigned __int8 *i1;
  unsigned __int8 *v1237;
  unsigned __int8 *v1238;
  const std::string *v1239;
  std::__shared_weak_count *v1240;
  unint64_t *v1241;
  unint64_t v1242;
  std::__shared_weak_count *v1243;
  unint64_t *v1244;
  unint64_t v1245;
  uint64_t *v1246;
  std::string::size_type v1247;
  char v1248;
  uint64_t v1249;
  uint64_t v1250;
  unint64_t *v1251;
  unint64_t v1252;
  uint64_t *v1253;
  __int128 v1254;
  uint64_t v1255;
  char v1256;
  std::string::size_type v1257;
  uint64_t v1258;
  unsigned __int8 *v1259;
  std::string *v1260;
  void *v1261;
  uint64_t *v1262;
  uint64_t *v1263;
  __int128 *v1264;
  std::string *v1265;
  uint64_t *v1266;
  __int128 *v1267;
  std::__shared_weak_count *v1268;
  unint64_t *v1269;
  unint64_t v1270;
  std::__shared_weak_count *v1271;
  unint64_t *v1272;
  unint64_t v1273;
  std::__shared_weak_count *v1274;
  unint64_t *v1275;
  unint64_t v1276;
  std::string::size_type v1277;
  std::string::size_type v1278;
  uint64_t v1279;
  _QWORD *v1280;
  unint64_t *v1281;
  unint64_t v1282;
  unsigned __int8 *v1283;
  std::string *v1284;
  std::__shared_weak_count *v1285;
  unint64_t *v1286;
  unint64_t v1287;
  unint64_t v1288;
  std::__shared_weak_count *v1289;
  unint64_t *v1290;
  unint64_t v1291;
  std::__shared_weak_count *v1292;
  unint64_t *v1293;
  unint64_t v1294;
  std::__shared_weak_count *v1295;
  unint64_t *v1296;
  unint64_t v1297;
  std::__shared_weak_count *v1298;
  unint64_t *v1299;
  unint64_t v1300;
  std::__shared_weak_count *v1301;
  unint64_t *v1302;
  unint64_t v1303;
  std::__shared_weak_count *v1304;
  unint64_t *v1305;
  unint64_t v1306;
  std::__shared_weak_count *v1307;
  unint64_t *v1308;
  unint64_t v1309;
  std::__shared_weak_count *v1310;
  unint64_t *v1311;
  unint64_t v1312;
  std::__shared_weak_count *v1313;
  unint64_t *v1314;
  unint64_t v1315;
  std::__shared_weak_count *v1316;
  unint64_t *v1317;
  unint64_t v1318;
  std::__shared_weak_count *v1319;
  unint64_t *v1320;
  unint64_t v1321;
  std::__shared_weak_count *v1322;
  unint64_t *v1323;
  unint64_t v1324;
  std::__shared_weak_count *v1325;
  unint64_t *v1326;
  unint64_t v1327;
  unint64_t *v1328;
  unint64_t v1329;
  char *v1330;
  unint64_t *v1331;
  unint64_t v1332;
  uint64_t v1333;
  unint64_t *v1334;
  unint64_t v1335;
  std::string *v1336;
  const void **v1337;
  RIO_MTLX::Element *v1338;
  size_t v1339;
  std::__shared_weak_count *v1340;
  std::__shared_weak_count *v1341;
  unsigned __int8 *v1342;
  unsigned __int8 *v1343;
  uint64_t v1344;
  RIO_MTLX::Element *v1345;
  RIO_MTLX::Element *v1346;
  unsigned __int8 *v1347;
  std::string *v1348;
  RIO_MTLX::Element *v1349;
  std::string::size_type v1350;
  std::string *p_p;
  std::string *v1352;
  RIO_MTLX::Element *v1353;
  std::string::size_type v1354;
  std::string *v1355;
  std::string::size_type v1356;
  unint64_t *v1357;
  unint64_t v1358;
  RIO_MTLX::Element *v1359;
  unint64_t *v1360;
  unint64_t v1361;
  std::__shared_weak_count *v1362;
  unint64_t *v1363;
  unint64_t v1364;
  std::__shared_weak_count *v1365;
  unint64_t *v1366;
  unint64_t v1367;
  std::string::size_type v1368;
  std::string *v1369;
  std::string *v1370;
  RIO_MTLX::Element *v1371;
  unint64_t *v1372;
  unint64_t v1373;
  std::__shared_weak_count *v1374;
  unint64_t *v1375;
  unint64_t v1376;
  RIO_MTLX *v1377;
  std::string *v1378;
  std::string *v1379;
  unint64_t *v1380;
  std::string::size_type v1381;
  std::string *v1382;
  std::string *v1383;
  RIO_MTLX::Element *v1384;
  RIO_MTLX::Element *v1385;
  RIO_MTLX *v1386;
  const std::string *v1387;
  uint64_t *v1388;
  RIO_MTLX::ValueElement *v1389;
  __int128 *v1390;
  unint64_t *v1391;
  std::string::size_type v1392;
  std::string *v1393;
  std::string *v1394;
  RIO_MTLX::Element *v1395;
  unint64_t *v1396;
  unint64_t v1397;
  unint64_t *v1398;
  RIO_MTLX::Element *v1399;
  RIO_MTLX::Element **v1400;
  std::string *v1401;
  RIO_MTLX::Element *v1402;
  unint64_t *v1403;
  unint64_t v1404;
  unint64_t *v1405;
  std::__shared_weak_count *v1406;
  unint64_t *v1407;
  unint64_t v1408;
  unint64_t *v1409;
  RIO_MTLX::Node *v1410;
  RIO_MTLX::Node **v1411;
  std::string *v1412;
  RIO_MTLX::Element *v1413;
  unint64_t *v1414;
  unint64_t v1415;
  unint64_t *v1416;
  std::__shared_weak_count *v1417;
  std::string::size_type v1418;
  std::string *v1419;
  const std::string *v1420;
  std::string *v1421;
  RIO_MTLX::Element *v1422;
  RIO_MTLX::Element *v1423;
  std::__shared_weak_count *v1424;
  int v1425;
  std::string::size_type v1426;
  std::string *v1427;
  std::string *v1428;
  RIO_MTLX::Element *v1429;
  int v1430;
  unint64_t v1431;
  void **v1432;
  std::string *v1433;
  RIO_MTLX::Element *v1434;
  int v1435;
  std::__shared_weak_count *v1436;
  unsigned __int8 *v1437;
  std::string *v1438;
  std::__shared_weak_count *v1439;
  unint64_t *v1440;
  unint64_t v1441;
  RIO_MTLX::Node *v1442;
  RIO_MTLX::Element *v1443;
  size_t v1444;
  std::string *v1445;
  const void *v1446;
  uint64_t v1447;
  unint64_t *v1448;
  unint64_t v1449;
  unint64_t *v1450;
  unint64_t v1451;
  unsigned __int8 *v1452;
  unsigned __int8 *v1453;
  uint64_t *v1454;
  unsigned __int8 *v1455;
  const std::string *v1456;
  std::__shared_weak_count *v1457;
  unint64_t *v1458;
  unint64_t v1459;
  std::__shared_weak_count *v1460;
  unint64_t *v1461;
  unint64_t v1462;
  std::__shared_weak_count *v1463;
  unint64_t *v1464;
  unint64_t v1465;
  uint64_t v1466;
  unint64_t *v1467;
  unint64_t v1468;
  unint64_t *v1469;
  unint64_t v1470;
  unsigned __int8 *v1471;
  unsigned __int8 *v1472;
  uint64_t *v1473;
  unsigned __int8 *v1474;
  const std::string *v1475;
  std::__shared_weak_count *v1476;
  unint64_t *v1477;
  unint64_t v1478;
  std::__shared_weak_count *v1479;
  unint64_t *v1480;
  unint64_t v1481;
  std::__shared_weak_count *v1482;
  unint64_t *v1483;
  unint64_t v1484;
  std::string *v1485;
  uint64_t *v1486;
  const std::string *v1487;
  __int128 *v1488;
  std::string *v1489;
  uint64_t *v1490;
  const std::string *v1491;
  __int128 *v1492;
  std::string *v1493;
  uint64_t *v1494;
  const std::string *v1495;
  __int128 *v1496;
  std::string *v1497;
  uint64_t *v1498;
  const std::string *v1499;
  __int128 *v1500;
  std::__shared_weak_count *v1501;
  unint64_t *v1502;
  unint64_t v1503;
  std::__shared_weak_count *v1504;
  unint64_t *v1505;
  unint64_t v1506;
  std::__shared_weak_count *v1507;
  unint64_t *v1508;
  unint64_t v1509;
  std::__shared_weak_count *v1510;
  unint64_t *v1511;
  unint64_t v1512;
  std::__shared_weak_count *v1513;
  unint64_t *v1514;
  unint64_t v1515;
  std::__shared_weak_count *v1516;
  unint64_t *v1517;
  unint64_t v1518;
  std::__shared_weak_count *v1519;
  unint64_t *v1520;
  unint64_t v1521;
  unint64_t *v1522;
  int v1523;
  RIO_MTLX::TypedElement *v1524;
  uint64_t *v1525;
  __int128 *v1526;
  RIO_MTLX::TypedElement *v1527;
  uint64_t *v1528;
  __int128 *v1529;
  RIO_MTLX::Element *v1530;
  uint64_t *v1531;
  std::string::size_type v1532;
  std::string::size_type v1533;
  RIO_MTLX::PortElement *v1534;
  std::string::size_type v1535;
  unint64_t *v1536;
  unint64_t v1537;
  uint64_t *v1538;
  uint64_t v1539;
  uint64_t v1540;
  std::string::size_type v1541;
  std::string *v1542;
  unsigned __int8 *v1543;
  uint64_t v1544;
  uint64_t v1545;
  std::string::size_type v1546;
  std::string *v1547;
  uint64_t *v1548;
  uint64_t v1549;
  uint64_t v1550;
  std::string::size_type v1551;
  std::string *v1552;
  unsigned __int8 *v1553;
  uint64_t v1554;
  uint64_t v1555;
  std::string::size_type v1556;
  std::string *v1557;
  uint64_t v1558;
  void *v1559;
  std::string::size_type v1560;
  const void **p_data;
  std::string *v1562;
  uint64_t v1563;
  void *v1564;
  std::string::size_type v1565;
  const void **v1566;
  std::string *v1567;
  std::__shared_weak_count *v1568;
  unint64_t *v1569;
  unint64_t v1570;
  unint64_t *v1571;
  std::__shared_weak_count *v1572;
  unint64_t *v1573;
  unint64_t v1574;
  std::__shared_weak_count *v1575;
  unint64_t *v1576;
  unint64_t v1577;
  std::__shared_weak_count *v1578;
  unint64_t *v1579;
  unint64_t v1580;
  std::__shared_weak_count *v1581;
  unint64_t *v1582;
  unint64_t v1583;
  std::__shared_weak_count *v1584;
  unint64_t *v1585;
  unint64_t v1586;
  RIO_MTLX *v1587;
  std::__shared_weak_count *v1588;
  unint64_t *v1589;
  unint64_t v1590;
  char *v1591;
  char *i2;
  uint64_t v1593;
  uint64_t v1594;
  unint64_t *v1595;
  unint64_t v1596;
  uint64_t v1597;
  std::string::size_type v1598;
  std::__shared_weak_count *v1599;
  std::__shared_weak_count *v1600;
  unint64_t *v1601;
  unint64_t v1602;
  RIO_MTLX::Node *v1603;
  std::string::size_type v1604;
  size_t v1605;
  std::string *v1606;
  const void *v1607;
  std::string *v1608;
  uint64_t *v1609;
  const std::string *v1610;
  __int128 *v1611;
  std::string *v1612;
  uint64_t *v1613;
  __int128 *v1614;
  std::string *v1615;
  uint64_t *v1616;
  const std::string *v1617;
  __int128 *v1618;
  std::string *v1619;
  _QWORD *v1620;
  unsigned __int8 *v1621;
  std::__shared_weak_count *v1622;
  unint64_t *v1623;
  unint64_t v1624;
  std::__shared_weak_count *v1625;
  unint64_t *v1626;
  unint64_t v1627;
  std::__shared_weak_count *v1628;
  unint64_t *v1629;
  unint64_t v1630;
  std::__shared_weak_count *v1631;
  unint64_t *v1632;
  unint64_t v1633;
  std::__shared_weak_count *v1634;
  unint64_t *v1635;
  unint64_t v1636;
  std::__shared_weak_count *v1637;
  unint64_t *v1638;
  unint64_t v1639;
  char *v1640;
  char *i3;
  uint64_t v1642;
  uint64_t v1643;
  unint64_t *v1644;
  unint64_t v1645;
  uint64_t v1646;
  std::string::size_type v1647;
  std::__shared_weak_count *v1648;
  std::__shared_weak_count *v1649;
  unint64_t *v1650;
  unint64_t v1651;
  RIO_MTLX::Node *v1652;
  std::string::size_type v1653;
  size_t v1654;
  std::string *v1655;
  const void *v1656;
  std::string *v1657;
  uint64_t *v1658;
  const std::string *v1659;
  __int128 *v1660;
  std::string *v1661;
  uint64_t *v1662;
  __int128 *v1663;
  std::string *v1664;
  uint64_t *v1665;
  const std::string *v1666;
  __int128 *v1667;
  std::string *v1668;
  _QWORD *v1669;
  unsigned __int8 *v1670;
  std::__shared_weak_count *v1671;
  unint64_t *v1672;
  unint64_t v1673;
  std::__shared_weak_count *v1674;
  unint64_t *v1675;
  unint64_t v1676;
  std::__shared_weak_count *v1677;
  unint64_t *v1678;
  unint64_t v1679;
  std::__shared_weak_count *v1680;
  unint64_t *v1681;
  unint64_t v1682;
  std::__shared_weak_count *v1683;
  unint64_t *v1684;
  unint64_t v1685;
  std::__shared_weak_count *v1686;
  unint64_t *v1687;
  unint64_t v1688;
  uint64_t *v1689;
  RIO_MTLX::InterfaceElement *v1690;
  std::string::size_type v1691;
  std::string::size_type v1692;
  uint64_t v1693;
  _QWORD *v1694;
  unint64_t *v1695;
  unint64_t v1696;
  unsigned __int8 *v1697;
  uint64_t *v1698;
  uint64_t *v1699;
  uint64_t v1700;
  std::string::size_type v1701;
  unint64_t *v1702;
  unint64_t v1703;
  RIO_MTLX *v1704;
  uint64_t v1705;
  uint64_t *v1706;
  uint64_t i4;
  uint64_t v1708;
  RIO_MTLX::ValueElement *v1709;
  std::__shared_weak_count *v1710;
  unint64_t *v1711;
  unint64_t v1712;
  uint64_t *InterfaceName;
  uint64_t v1714;
  std::__shared_weak_count *v1715;
  unint64_t *v1716;
  unint64_t v1717;
  std::__shared_weak_count *v1718;
  unint64_t *v1719;
  unint64_t v1720;
  std::__shared_weak_count *v1721;
  unint64_t *v1722;
  unint64_t v1723;
  _OWORD *v1724;
  uint64_t v1725;
  std::string::size_type i5;
  std::string::size_type v1727;
  void **v1728;
  std::__shared_weak_count *v1729;
  unint64_t *v1730;
  unint64_t v1731;
  uint64_t *NodeName;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  __int128 *v1736;
  uint64_t *v1737;
  __int128 *v1738;
  std::__shared_weak_count *v1739;
  unint64_t *v1740;
  unint64_t v1741;
  std::__shared_weak_count *v1742;
  unint64_t *v1743;
  unint64_t v1744;
  _QWORD *v1745;
  _OWORD *v1746;
  std::__shared_weak_count *v1747;
  unint64_t *v1748;
  unint64_t v1749;
  unint64_t *v1750;
  unint64_t v1751;
  char *v1752;
  unint64_t *v1753;
  unint64_t v1754;
  _BOOL8 v1755;
  uint64_t v1756;
  unint64_t *v1757;
  unint64_t v1758;
  uint64_t *v1759;
  __int128 v1760;
  unint64_t *v1761;
  unint64_t v1762;
  int v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  const void **v1767;
  unsigned __int8 *v1768;
  uint64_t v1769;
  std::string::size_type v1770;
  std::string::size_type v1771;
  RIO_MTLX::Element *v1772;
  std::__shared_weak_count *v1773;
  unint64_t *v1774;
  unint64_t v1775;
  _QWORD *v1776;
  unint64_t *v1777;
  unint64_t v1778;
  RIO_MTLX *v1779;
  std::__shared_weak_count *v1780;
  unint64_t *v1781;
  unint64_t v1782;
  std::__shared_weak_count *v1783;
  unint64_t *v1784;
  unint64_t v1785;
  uint64_t v1786;
  uint64_t *v1787;
  RIO_MTLX::ValueElement *v1788;
  __int128 v1789;
  unint64_t *v1790;
  unint64_t v1791;
  int v1792;
  uint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  const void **v1796;
  unsigned __int8 *v1797;
  uint64_t *v1798;
  __int128 *v1799;
  std::__shared_weak_count *v1800;
  unint64_t *v1801;
  unint64_t v1802;
  std::__shared_weak_count *v1803;
  unint64_t *v1804;
  unint64_t v1805;
  std::__shared_weak_count *v1806;
  unint64_t *v1807;
  unint64_t v1808;
  std::__shared_weak_count *v1809;
  unint64_t *v1810;
  unint64_t v1811;
  std::__shared_weak_count *v1812;
  unint64_t *v1813;
  unint64_t v1814;
  std::__shared_weak_count *v1815;
  unint64_t *v1816;
  unint64_t v1817;
  std::__shared_weak_count *v1818;
  std::string::size_type v1819;
  uint64_t *v1820;
  std::string::size_type v1821;
  uint64_t v1822;
  std::__shared_weak_count *v1823;
  std::string::size_type v1824;
  std::__shared_weak_count *v1825;
  std::string *v1826;
  std::string *v1827;
  std::string *v1829;
  std::string *v1830;
  std::string *v1831;
  std::string *v1832;
  std::__shared_weak_count *v1833;
  std::string *v1834;
  std::__shared_weak_count *v1835;
  std::string *v1836;
  std::string *v1837;
  std::string *v1838;
  std::string *v1839;
  std::string *v1840;
  std::string *v1841;
  std::__shared_weak_count *v1842;
  std::string v1843;
  uint64_t *v1844;
  std::__shared_weak_count *v1845;
  uint64_t v1846;
  std::__shared_weak_count *v1847;
  uint64_t v1848;
  std::__shared_weak_count *v1849;
  uint64_t *v1850;
  std::__shared_weak_count *v1851;
  uint64_t v1852;
  std::__shared_weak_count *v1853;
  uint64_t v1854;
  std::__shared_weak_count *v1855;
  uint64_t v1856;
  std::__shared_weak_count *v1857;
  uint64_t v1858;
  std::__shared_weak_count *v1859;
  std::string v1860;
  RIO_MTLX::Output *v1861;
  std::__shared_weak_count *v1862;
  std::string *v1863;
  std::__shared_weak_count *v1864;
  RIO_MTLX::Element *v1865;
  std::__shared_weak_count *v1866;
  RIO_MTLX::Element *v1867;
  std::__shared_weak_count *v1868;
  RIO_MTLX::Element *v1869;
  std::__shared_weak_count *v1870;
  RIO_MTLX::Element *v1871;
  std::__shared_weak_count *v1872;
  std::string v1873;
  std::string *v1874;
  std::string::size_type v1875;
  uint64_t v1876;
  std::__shared_weak_count *v1877;
  RIO_MTLX::Element *p_str;
  std::__shared_weak_count *v1879;
  __int128 v1880;
  __int128 __str;
  __int128 __str_16;
  uint64_t v1883;
  __int128 v1884;
  char *v1885;
  char *v1886;
  uint64_t v1887;
  char *v1888;
  char *v1889;
  uint64_t v1890;
  RIO_MTLX::Element *v1891;
  std::__shared_weak_count *v1892;
  RIO_MTLX::Element *v1893;
  std::__shared_weak_count *v1894;
  RIO_MTLX::Element *v1895;
  std::__shared_weak_count *v1896;
  RIO_MTLX::Element *v1897;
  std::__shared_weak_count *v1898;
  RIO_MTLX::Element *v1899;
  std::__shared_weak_count *v1900;
  RIO_MTLX::Element *v1901;
  std::__shared_weak_count *v1902;
  RIO_MTLX::Element *v1903;
  std::__shared_weak_count *v1904;
  std::string *v1905;
  std::__shared_weak_count *v1906;
  std::string *v1907;
  std::__shared_weak_count *v1908;
  std::string v1909;
  void *v1910[2];
  char v1911;
  std::string v1912;
  std::string v1913;
  std::string v1914;
  std::string v1915;
  std::string v1916;
  void *v1917[2];
  char v1918;
  void *v1919[2];
  char v1920;
  void *v1921[2];
  char v1922;
  std::string v1923;
  void *v1924[2];
  char v1925;
  __int128 v1926;
  uint64_t v1927;
  std::string v1928;
  __int128 v1929;
  uint64_t v1930;
  std::string v1931;
  std::string __s;
  RIO_MTLX::Element *v1933[2];
  unsigned __int8 v1934;
  std::string v1935;
  void *v1936;
  std::__shared_weak_count *v1937;
  unsigned __int8 v1938;
  std::string v1939;
  void *v1940[2];
  unsigned __int8 v1941;
  std::string v1942;
  std::string v1943;
  std::string v1944;
  std::string v1945;
  std::string v1946;
  std::string v1947;
  std::string v1948;
  RIO_MTLX::Node *v1949[2];
  unsigned __int8 v1950;
  std::string v1951;
  std::string v1952;
  std::string v1953;
  std::string v1954;
  std::string v1955;
  std::string __p;
  std::string v1957;
  std::string *v1958;
  std::__shared_weak_count *v1959;
  uint64_t v1960;
  std::__shared_weak_count *v1961;
  __int128 v1962;
  unsigned __int8 v1963;
  void *v1964;
  std::__shared_weak_count *v1965;
  char v1966;
  void *v1967;
  std::__shared_weak_count *v1968;
  unsigned __int8 v1969;
  std::string v1970;
  std::string v1971;
  void *v1972;
  std::__shared_weak_count *v1973;
  unsigned __int8 v1974;
  __int128 v1975;
  std::string v1976;
  std::string v1977;
  void *v1978;
  std::__shared_weak_count *v1979;
  std::string v1980;
  std::string v1981;
  std::string v1982;
  __int128 v1983;
  __int128 v1984;
  float v1985;
  void *v1986[2];
  char v1987;
  std::string *v1988;
  std::__shared_weak_count *v1989;
  std::string *v1990;
  std::__shared_weak_count *v1991;
  uint64_t v1992;
  std::__shared_weak_count *v1993;
  std::string v1994;
  std::string v1995;
  std::string *v1996;
  std::__shared_weak_count *v1997;
  std::string v1998;
  __int128 v1999;
  std::string *v2000;
  std::__shared_weak_count *v2001;
  uint64_t v2002;
  std::__shared_weak_count *v2003;
  std::string v2004;
  uint64_t v2005;
  std::__shared_weak_count *v2006;
  uint64_t v2007;
  uint64_t v2008;
  std::string *v2009;
  std::__shared_weak_count *v2010;
  std::string *v2011;
  std::__shared_weak_count *v2012;
  std::string *v2013;
  std::__shared_weak_count *v2014;
  uint64_t v2015;
  std::__shared_weak_count *v2016;
  std::string *v2017;
  std::__shared_weak_count *v2018;
  uint64_t v2019;
  std::__shared_weak_count *v2020;
  __int128 v2021;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t v2024;
  __int128 v2025;
  std::string v2026;
  _QWORD *v2027;
  uint64_t v2028;
  __int128 v2029;
  std::string v2030;
  __int128 v2031;
  _BYTE v2032[24];
  uint64_t v2033;
  std::string v2034;
  uint64_t v2035;

  v2035 = *MEMORY[0x24BDAC8D0];
  v2 = (RIO_MTLX *)((uint64_t (*)(uint64_t **))(*this)[8])(this);
  v3 = (int)v2 >= 1 && (_DWORD)v2 == 1;
  if (!v3 || SHIDWORD(v2) > 37)
    return;
  switch(HIDWORD(v2))
  {
    case 0x16:
      RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v2030);
      *(_QWORD *)&v2032[8] = 0;
      *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)&v2030.__r_.__value_.__l.__data_;
      if (v2030.__r_.__value_.__l.__size_)
      {
        v4 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
        do
          v5 = __ldxr(v4);
        while (__stxr(v5 + 1, v4));
      }
      v2027 = 0;
      v2026.__r_.__value_.__r.__words[2] = 0;
      v2028 = 0;
      v6 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v2026.__r_.__value_.__s.__data_[16], (_QWORD *)v2030.__r_.__value_.__r.__words[2], (_QWORD *)v2031, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2031 - v2030.__r_.__value_.__r.__words[2]) >> 3));
      v2029 = *(_OWORD *)v2032;
      RIO_MTLX::NULL_TREE_ITERATOR((RIO_MTLX *)v6);
      v2021 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
      if (*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v2023 = 0;
      v2022 = 0;
      v2024 = 0;
      std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)&v2022, (_QWORD *)qword_255E54218, unk_255E54220, 0xAAAAAAAAAAAAAAABLL * ((unk_255E54220 - qword_255E54218) >> 3));
      v2025 = xmmword_255E54230;
      break;
    case 0x17:
      goto LABEL_56;
    case 0x18:
      goto LABEL_136;
    case 0x19:
      goto LABEL_182;
    case 0x1A:
      goto LABEL_238;
    case 0x22:
      goto LABEL_863;
    case 0x23:
      goto LABEL_929;
    case 0x24:
      goto LABEL_1212;
    default:
      if (SHIDWORD(v2) < 37)
        return;
      goto LABEL_1850;
  }
  while (1)
  {
    v9 = RIO_MTLX::TreeIterator::operator==((uint64_t)&v2026, (uint64_t)&v2021);
    if (v9)
      break;
    v10 = *(_OWORD *)&v2026.__r_.__value_.__l.__data_;
    __str = *(_OWORD *)&v2026.__r_.__value_.__l.__data_;
    if (v2026.__r_.__value_.__l.__size_)
    {
      v11 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v9);
    v14 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v10 + 160), v13);
    if (v14)
      v15 = (uint64_t *)(v14 + 40);
    else
      v15 = RIO_MTLX::EMPTY_STRING(0);
    v16 = *((char *)v15 + 23);
    if (v16 < 0)
    {
      if (v15[1] != 6)
        goto LABEL_33;
      v15 = (uint64_t *)*v15;
    }
    else if (v16 != 6)
    {
      goto LABEL_33;
    }
    if (*(_DWORD *)v15 == 1952671094 && *((_WORD *)v15 + 2) == 29295)
    {
      v18 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v15);
      RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE();
      RIO_MTLX::Element::setAttribute((uint64_t *)v10, v18, (const std::string *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v);
    }
LABEL_33:
    if (*((_QWORD *)&v10 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
      }
    }
    RIO_MTLX::TreeIterator::operator++(&v2026);
  }
  *(_QWORD *)&__str = &v2022;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
  if (*((_QWORD *)&v2021 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_QWORD *)&v2021 = (char *)&v2026.__r_.__value_.__l + 16;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
  size = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030.__r_.__value_.__r.__words[2];
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v27 = (std::__shared_weak_count *)v2030.__r_.__value_.__l.__size_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_56:
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v2030);
  *(_QWORD *)&v2032[8] = 0;
  *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)&v2030.__r_.__value_.__l.__data_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v30 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v2027 = 0;
  v2026.__r_.__value_.__r.__words[2] = 0;
  v2028 = 0;
  v32 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v2026.__r_.__value_.__s.__data_[16], (_QWORD *)v2030.__r_.__value_.__r.__words[2], (_QWORD *)v2031, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2031 - v2030.__r_.__value_.__r.__words[2]) >> 3));
  v2029 = *(_OWORD *)v2032;
  RIO_MTLX::NULL_TREE_ITERATOR((RIO_MTLX *)v32);
  v2021 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v2023 = 0;
  v2022 = 0;
  v2024 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)&v2022, (_QWORD *)qword_255E54218, unk_255E54220, 0xAAAAAAAAAAAAAAABLL * ((unk_255E54220 - qword_255E54218) >> 3));
  v2025 = xmmword_255E54230;
  while (2)
  {
    if (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v2026, (uint64_t)&v2021))
    {
      v35 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
      v36 = v2026.__r_.__value_.__r.__words[0];
      *(_OWORD *)&v1954.__r_.__value_.__l.__data_ = *(_OWORD *)&v2026.__r_.__value_.__l.__data_;
      if (v2026.__r_.__value_.__l.__size_)
      {
        v37 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = v36 + 24;
      v40 = *(char *)(v36 + 47);
      if (v40 < 0)
      {
        if (*(_QWORD *)(v36 + 32) != 6)
        {
LABEL_76:
          std::string::basic_string[abi:ne180100]<0>(&__p, "assign");
          RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t)&__str, this[17], this[18], (unsigned __int8 *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v45 = *((_QWORD *)&__str + 1);
          v44 = __str;
          if ((_QWORD)__str != *((_QWORD *)&__str + 1))
          {
            do
            {
              v46 = *(std::string **)v44;
              v47 = *(_QWORD *)(v44 + 8);
              v1952.__r_.__value_.__r.__words[0] = *(_QWORD *)v44;
              v1952.__r_.__value_.__l.__size_ = v47;
              if (v47)
              {
                v48 = (unint64_t *)(v47 + 8);
                do
                  v49 = __ldxr(v48);
                while (__stxr(v49 + 1, v48));
                v50 = (_QWORD *)v1954.__r_.__value_.__r.__words[0];
                v2018 = (std::__shared_weak_count *)v47;
                do
                  v51 = __ldxr(v48);
                while (__stxr(v51 + 1, v48));
              }
              else
              {
                v50 = (_QWORD *)v1954.__r_.__value_.__r.__words[0];
                v2018 = 0;
              }
              v2017 = v46;
              std::string::basic_string[abi:ne180100]<0>(&__p, "materialassign");
              RIO_MTLX::Element::changeChildCategory(v50, &v2017, (uint64_t)&__p, &v2019);
              v52 = v2020;
              if (v2020)
              {
                p_shared_owners = (unint64_t *)&v2020->__shared_owners_;
                do
                  v54 = __ldaxr(p_shared_owners);
                while (__stlxr(v54 - 1, p_shared_owners));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v55 = v2018;
              if (v2018)
              {
                v56 = (unint64_t *)&v2018->__shared_owners_;
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              v58 = (std::__shared_weak_count *)v1952.__r_.__value_.__l.__size_;
              if (v1952.__r_.__value_.__l.__size_)
              {
                v59 = (unint64_t *)(v1952.__r_.__value_.__l.__size_ + 8);
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              v44 += 16;
            }
            while (v44 != v45);
            v35 = (std::__shared_weak_count *)v1954.__r_.__value_.__l.__size_;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          if (v35)
          {
            v61 = (unint64_t *)&v35->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          RIO_MTLX::TreeIterator::operator++(&v2026);
          continue;
        }
        v39 = *(_QWORD *)v39;
      }
      else if (v40 != 6)
      {
        goto LABEL_76;
      }
      v41 = *(_DWORD *)v39;
      v42 = *(unsigned __int16 *)(v39 + 4);
      if (v41 == 1684105331 && v42 == 29285)
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "shadername");
        v63 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v36 + 160), (unsigned __int8 *)&__str);
        v64 = v63;
        if (SBYTE7(__str_16) < 0)
          operator delete((void *)__str);
        if (v64)
        {
          v65 = (__int128 *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE((RIO_MTLX::NodeDef *)v63);
          std::string::basic_string[abi:ne180100]<0>(&__str, "shadername");
          v66 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v36 + 160), (unsigned __int8 *)&__str);
          if (v66)
            v67 = (const std::string *)(v66 + 40);
          else
            v67 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
          RIO_MTLX::Element::setAttribute((uint64_t *)v36, v65, v67);
          if (SBYTE7(__str_16) < 0)
            operator delete((void *)__str);
          std::string::basic_string[abi:ne180100]<0>(&__str, "shadername");
          RIO_MTLX::Element::removeAttribute((_QWORD *)v36, (unsigned __int8 *)&__str);
          if (SBYTE7(__str_16) < 0)
            operator delete((void *)__str);
        }
      }
      goto LABEL_76;
    }
    break;
  }
  *(_QWORD *)&__str = &v2022;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
  if (*((_QWORD *)&v2021 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  *(_QWORD *)&v2021 = (char *)&v2026.__r_.__value_.__l + 16;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
  v71 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v72 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030.__r_.__value_.__r.__words[2];
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v74 = (std::__shared_weak_count *)v2030.__r_.__value_.__l.__size_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v75 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
LABEL_136:
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v2030);
  *(_QWORD *)&v2032[8] = 0;
  *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)&v2030.__r_.__value_.__l.__data_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v77 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  v2027 = 0;
  v2026.__r_.__value_.__r.__words[2] = 0;
  v2028 = 0;
  v79 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v2026.__r_.__value_.__s.__data_[16], (_QWORD *)v2030.__r_.__value_.__r.__words[2], (_QWORD *)v2031, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2031 - v2030.__r_.__value_.__r.__words[2]) >> 3));
  v2029 = *(_OWORD *)v2032;
  RIO_MTLX::NULL_TREE_ITERATOR((RIO_MTLX *)v79);
  v2021 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  v2023 = 0;
  v2022 = 0;
  v2024 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)&v2022, (_QWORD *)qword_255E54218, unk_255E54220, 0xAAAAAAAAAAAAAAABLL * ((unk_255E54220 - qword_255E54218) >> 3));
  v2025 = xmmword_255E54230;
  while (2)
  {
    v82 = RIO_MTLX::TreeIterator::operator==((uint64_t)&v2026, (uint64_t)&v2021);
    if (!v82)
    {
      v83 = *(_OWORD *)&v2026.__r_.__value_.__l.__data_;
      *(_OWORD *)&v1954.__r_.__value_.__l.__data_ = *(_OWORD *)&v2026.__r_.__value_.__l.__data_;
      if (v2026.__r_.__value_.__l.__size_)
      {
        v84 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v86 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v82);
      if (!RIO_MTLX::Element::isA<RIO_MTLX::Input>(v83, (unsigned __int8 *)v86))
        goto LABEL_161;
      std::string::basic_string[abi:ne180100]<0>(&__str, "graphname");
      v87 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v83 + 160), (unsigned __int8 *)&__str);
      v88 = v87;
      if (SBYTE7(__str_16) < 0)
      {
        operator delete((void *)__str);
        if (!v88)
          goto LABEL_161;
      }
      else if (!v87)
      {
LABEL_161:
        if (*((_QWORD *)&v83 + 1))
        {
          v91 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 16))(*((_QWORD *)&v83 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v83 + 1));
          }
        }
        RIO_MTLX::TreeIterator::operator++(&v2026);
        continue;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "opgraph");
      std::string::basic_string[abi:ne180100]<0>(&__p, "graphname");
      v89 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v83 + 160), (unsigned __int8 *)&__p);
      if (v89)
        v90 = (const std::string *)(v89 + 40);
      else
        v90 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
      RIO_MTLX::Element::setAttribute((uint64_t *)v83, &__str, v90);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SBYTE7(__str_16) < 0)
        operator delete((void *)__str);
      std::string::basic_string[abi:ne180100]<0>(&__str, "graphname");
      RIO_MTLX::Element::removeAttribute((_QWORD *)v83, (unsigned __int8 *)&__str);
      if (SBYTE7(__str_16) < 0)
        operator delete((void *)__str);
      goto LABEL_161;
    }
    break;
  }
  *(_QWORD *)&__str = &v2022;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
  if (*((_QWORD *)&v2021 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  *(_QWORD *)&v2021 = (char *)&v2026.__r_.__value_.__l + 16;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
  v96 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v97 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030.__r_.__value_.__r.__words[2];
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v99 = (std::__shared_weak_count *)v2030.__r_.__value_.__l.__size_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v100 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
LABEL_182:
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v2030);
  *(_QWORD *)&v2032[8] = 0;
  *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)&v2030.__r_.__value_.__l.__data_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v102 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  v2027 = 0;
  v2026.__r_.__value_.__r.__words[2] = 0;
  v2028 = 0;
  v104 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v2026.__r_.__value_.__s.__data_[16], (_QWORD *)v2030.__r_.__value_.__r.__words[2], (_QWORD *)v2031, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2031 - v2030.__r_.__value_.__r.__words[2]) >> 3));
  v2029 = *(_OWORD *)v2032;
  RIO_MTLX::NULL_TREE_ITERATOR((RIO_MTLX *)v104);
  v2021 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
  v2023 = 0;
  v2022 = 0;
  v2024 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)&v2022, (_QWORD *)qword_255E54218, unk_255E54220, 0xAAAAAAAAAAAAAAABLL * ((unk_255E54220 - qword_255E54218) >> 3));
  v2025 = xmmword_255E54230;
  while (2)
  {
    if (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v2026, (uint64_t)&v2021))
    {
      v107 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
      v108 = v2026.__r_.__value_.__r.__words[0];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v2026.__r_.__value_.__l.__data_;
      if (v2026.__r_.__value_.__l.__size_)
      {
        v109 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
        do
          v110 = __ldxr(v109);
        while (__stxr(v110 + 1, v109));
      }
      v111 = (_QWORD *)(v108 + 24);
      v112 = *(char *)(v108 + 47);
      if (v112 < 0)
      {
        if (*(_QWORD *)(v108 + 32) != 8)
          goto LABEL_199;
        v111 = (_QWORD *)*v111;
      }
      else if (v112 != 8)
      {
LABEL_199:
        if (v107)
          goto LABEL_200;
        goto LABEL_222;
      }
      if (*v111 != 0x746E6174736E6F63)
        goto LABEL_199;
      std::string::basic_string[abi:ne180100]<0>(&__str, "color");
      v115 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v108 + 96), (unsigned __int8 *)&__str);
      if (v115)
      {
        v117 = (std::string *)*((_QWORD *)v115 + 5);
        v116 = (std::__shared_weak_count *)*((_QWORD *)v115 + 6);
        v1954.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
        v1954.__r_.__value_.__l.__size_ = (std::string::size_type)v116;
        if (v116)
        {
          v118 = (unint64_t *)&v116->__shared_owners_;
          do
            v119 = __ldxr(v118);
          while (__stxr(v119 + 1, v118));
        }
      }
      else
      {
        v116 = 0;
        v117 = 0;
        *(_OWORD *)&v1954.__r_.__value_.__l.__data_ = 0uLL;
      }
      if (SBYTE7(__str_16) < 0)
      {
        operator delete((void *)__str);
        if (v117)
          goto LABEL_214;
      }
      else
      {
        if (!v117)
          goto LABEL_216;
LABEL_214:
        std::string::basic_string[abi:ne180100]<0>(&__str, "value");
        RIO_MTLX::Element::setName(v117, (std::string *)&__str);
        if (SBYTE7(__str_16) < 0)
          operator delete((void *)__str);
      }
LABEL_216:
      if (v116)
      {
        v120 = (unint64_t *)&v116->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
      v107 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
LABEL_200:
        v113 = (unint64_t *)&v107->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
LABEL_222:
      RIO_MTLX::TreeIterator::operator++(&v2026);
      continue;
    }
    break;
  }
  *(_QWORD *)&__str = &v2022;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v122 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
  if (*((_QWORD *)&v2021 + 1))
  {
    v123 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  *(_QWORD *)&v2021 = (char *)&v2026.__r_.__value_.__l + 16;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
  v125 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v126 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030.__r_.__value_.__r.__words[2];
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v128 = (std::__shared_weak_count *)v2030.__r_.__value_.__l.__size_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v129 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
LABEL_238:
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v2030);
  *(_QWORD *)&v2032[8] = 0;
  *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)&v2030.__r_.__value_.__l.__data_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v131 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v132 = __ldxr(v131);
    while (__stxr(v132 + 1, v131));
  }
  v2027 = 0;
  v2026.__r_.__value_.__r.__words[2] = 0;
  v2028 = 0;
  v133 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v2026.__r_.__value_.__s.__data_[16], (_QWORD *)v2030.__r_.__value_.__r.__words[2], (_QWORD *)v2031, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2031 - v2030.__r_.__value_.__r.__words[2]) >> 3));
  v2029 = *(_OWORD *)v2032;
  RIO_MTLX::NULL_TREE_ITERATOR((RIO_MTLX *)v133);
  v2021 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8);
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
  }
  v2023 = 0;
  v2022 = 0;
  v2024 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)&v2022, (_QWORD *)qword_255E54218, unk_255E54220, 0xAAAAAAAAAAAAAAABLL * ((unk_255E54220 - qword_255E54218) >> 3));
  v2025 = xmmword_255E54230;
  while (2)
  {
    if (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v2026, (uint64_t)&v2021))
    {
      v137 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
      v136 = v2026.__r_.__value_.__r.__words[0];
      *(_OWORD *)&v1952.__r_.__value_.__l.__data_ = *(_OWORD *)&v2026.__r_.__value_.__l.__data_;
      if (v2026.__r_.__value_.__l.__size_)
      {
        v138 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
        do
          v139 = __ldxr(v138);
        while (__stxr(v139 + 1, v138));
      }
      __str = 0uLL;
      *(_QWORD *)&__str_16 = 0;
      v140 = (unsigned __int8 *)std::vector<std::shared_ptr<RIO_MTLX::Element>>::__init_with_size[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>*,std::shared_ptr<RIO_MTLX::Element>*>(&__str, *(_QWORD **)(v136 + 136), *(_QWORD **)(v136 + 144), (uint64_t)(*(_QWORD *)(v136 + 144) - *(_QWORD *)(v136 + 136)) >> 4);
      v141 = (RIO_MTLX::Node **)*((_QWORD *)&__str + 1);
      v142 = (RIO_MTLX::Node **)__str;
      if ((_QWORD)__str == *((_QWORD *)&__str + 1))
      {
LABEL_414:
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (v137)
        {
          v236 = (unint64_t *)&v137->__shared_owners_;
          do
            v237 = __ldaxr(v236);
          while (__stlxr(v237 - 1, v236));
          if (!v237)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
        RIO_MTLX::TreeIterator::operator++(&v2026);
        continue;
      }
      while (2)
      {
        v143 = *v142;
        v144 = v142[1];
        v1949[0] = *v142;
        v1949[1] = v144;
        if (v144)
        {
          v145 = (unint64_t *)((char *)v144 + 8);
          do
            v146 = __ldxr(v145);
          while (__stxr(v146 + 1, v145));
        }
        v147 = (char *)v143 + 24;
        if (*((char *)v143 + 47) < 0)
        {
          v149 = *((_QWORD *)v143 + 4);
          if (v149 != 6)
          {
            if (v149 != 7)
            {
              if (v149 == 9)
              {
                v147 = *(char **)v147;
                goto LABEL_262;
              }
              goto LABEL_371;
            }
            v147 = *(char **)v147;
            goto LABEL_274;
          }
          v147 = *(char **)v147;
        }
        else
        {
          v148 = *((unsigned __int8 *)v143 + 47);
          if (v148 != 6)
          {
            if (v148 != 7)
            {
              if (v148 != 9)
                goto LABEL_371;
LABEL_262:
              if (*(_QWORD *)v147 == 0x6572726564616873 && v147[8] == 102)
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "shadertype");
                v140 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v143 + 20, (unsigned __int8 *)&__p);
                v183 = v140;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__p.__r_.__value_.__l.__data_);
                  if (!v183)
                    goto LABEL_371;
                }
                else if (!v140)
                {
                  goto LABEL_371;
                }
                v184 = (RIO_MTLX *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v140);
                v185 = (const std::string *)RIO_MTLX::SURFACE_SHADER_TYPE_STRING(v184);
                RIO_MTLX::Element::setAttribute((uint64_t *)v143, (__int128 *)v184, v185);
                std::string::basic_string[abi:ne180100]<0>(&__p, "shadertype");
                RIO_MTLX::Element::removeAttribute(v143, (unsigned __int8 *)&__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_371:
                v214 = (std::__shared_weak_count *)v1949[1];
                if (v1949[1])
                {
                  v215 = (unint64_t *)((char *)v1949[1] + 8);
                  do
                    v216 = __ldaxr(v215);
                  while (__stlxr(v216 - 1, v215));
                  if (!v216)
                  {
                    ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                    std::__shared_weak_count::__release_weak(v214);
                  }
                }
                v142 += 2;
                if (v142 == v141)
                {
                  v137 = (std::__shared_weak_count *)v1952.__r_.__value_.__l.__size_;
                  goto LABEL_414;
                }
                continue;
              }
              v151 = *(_QWORD *)v147;
              v152 = v147[8];
              if (v151 != 0x6574656D61726170 || v152 != 114)
                goto LABEL_371;
              v154 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v140);
              v155 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v143 + 20, v154);
              v140 = v155 ? v155 + 40 : (unsigned __int8 *)RIO_MTLX::EMPTY_STRING(0);
              v195 = (char)v140[23];
              if (v195 < 0)
              {
                if (*((_QWORD *)v140 + 1) != 11)
                  goto LABEL_371;
                v140 = *(unsigned __int8 **)v140;
              }
              else if (v195 != 11)
              {
                goto LABEL_371;
              }
              if (*(_QWORD *)v140 != 0x6E6870617267706FLL || *(_QWORD *)(v140 + 3) != 0x65646F6E68706172)
                goto LABEL_371;
              v197 = (uint64_t *)v1952.__r_.__value_.__r.__words[0];
              v198 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v140);
              v199 = RIO_MTLX::Element::isA<RIO_MTLX::Node>((uint64_t)v197, (unsigned __int8 *)v198);
              if (v199)
              {
                v2009 = (std::string *)v143;
                v2010 = (std::__shared_weak_count *)v144;
                if (v144)
                {
                  v200 = (unint64_t *)((char *)v144 + 8);
                  do
                    v201 = __ldxr(v200);
                  while (__stxr(v201 + 1, v200));
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, "input");
                RIO_MTLX::Element::changeChildCategory(v197, &v2009, (uint64_t)&__p, (uint64_t *)&v1947);
                RIO_MTLX::Element::asA<RIO_MTLX::Input>((uint64_t)v1947.__r_.__value_.__l.__data_, &v1954);
                v202 = (std::__shared_weak_count *)v1947.__r_.__value_.__l.__size_;
                if (v1947.__r_.__value_.__l.__size_)
                {
                  v203 = (unint64_t *)(v1947.__r_.__value_.__l.__size_ + 8);
                  do
                    v204 = __ldaxr(v203);
                  while (__stlxr(v204 - 1, v203));
                  if (!v204)
                  {
                    ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                    std::__shared_weak_count::__release_weak(v202);
                  }
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v205 = v2010;
                if (v2010)
                {
                  v206 = (unint64_t *)&v2010->__shared_owners_;
                  do
                    v207 = __ldaxr(v206);
                  while (__stlxr(v207 - 1, v206));
                  if (!v207)
                  {
                    ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                    std::__shared_weak_count::__release_weak(v205);
                  }
                }
                v208 = (uint64_t *)v1954.__r_.__value_.__r.__words[0];
                std::string::basic_string[abi:ne180100]<0>(&__p, "value");
                v209 = (RIO_MTLX::PortElement *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v208 + 20, (unsigned __int8 *)&__p);
                if (v209)
                {
                  v210 = (const std::string *)((char *)v209 + 40);
                }
                else
                {
                  v209 = (RIO_MTLX::PortElement *)RIO_MTLX::EMPTY_STRING(0);
                  v210 = (const std::string *)v209;
                }
                v220 = (__int128 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(v209);
                RIO_MTLX::Element::setAttribute(v208, v220, v210);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v221 = (_QWORD *)v1954.__r_.__value_.__r.__words[0];
                std::string::basic_string[abi:ne180100]<0>(&__p, "value");
                RIO_MTLX::Element::removeAttribute(v221, (unsigned __int8 *)&__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v1954.__r_.__value_.__l.__data_ + 64))(&__p);
                v222 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                if (__p.__r_.__value_.__l.__size_)
                {
                  v223 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                  do
                    v224 = __ldaxr(v223);
                  while (__stlxr(v224 - 1, v223));
                  if (!v224)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v222 + 1) + 16))(*((_QWORD *)&v222 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v222 + 1));
                  }
                }
                v225 = (uint64_t *)v1954.__r_.__value_.__r.__words[0];
                if ((_QWORD)v222)
                {
                  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v1954.__r_.__value_.__l.__data_
                                                                                            + 64))(&__p, v1954.__r_.__value_.__r.__words[0]);
                  v226 = (RIO_MTLX::TypedElement *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 56))(__p.__r_.__value_.__r.__words[0]);
                  v227 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v226);
                  v140 = (unsigned __int8 *)RIO_MTLX::Element::setAttribute(v225, v227, (const std::string *)v226);
                  v228 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                  if (__p.__r_.__value_.__l.__size_)
                  {
                    v229 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                    do
                      v230 = __ldaxr(v229);
                    while (__stlxr(v230 - 1, v229));
                    if (!v230)
                    {
                      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                      std::__shared_weak_count::__release_weak(v228);
                    }
                  }
                }
                else
                {
                  v231 = RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE();
                  v232 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v231);
                  v140 = (unsigned __int8 *)RIO_MTLX::Element::setAttribute(v225, v232, (const std::string *)&RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v);
                }
                v165 = (std::__shared_weak_count *)v1954.__r_.__value_.__l.__size_;
                if (!v1954.__r_.__value_.__l.__size_)
                  goto LABEL_371;
                v233 = (unint64_t *)(v1954.__r_.__value_.__l.__size_ + 8);
                do
                  v167 = __ldaxr(v233);
                while (__stlxr(v167 - 1, v233));
                goto LABEL_369;
              }
              v217 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v199);
              v140 = (unsigned __int8 *)RIO_MTLX::Element::isA<RIO_MTLX::Output>((uint64_t)v197, (unsigned __int8 *)v217);
              if (!(_DWORD)v140)
                goto LABEL_371;
              v218 = *((char *)v143 + 71);
              if (v218 < 0)
              {
                if (*((_QWORD *)v143 + 7) != 2)
                {
LABEL_413:
                  RIO_MTLX::Element::removeChild(v197, (unsigned __int8 *)v143 + 48);
                  goto LABEL_371;
                }
                v219 = (_WORD *)*((_QWORD *)v143 + 6);
              }
              else
              {
                v219 = (_WORD *)((char *)v143 + 48);
                if (v218 != 2)
                  goto LABEL_413;
              }
              if (*v219 == 28265)
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "nodename");
                std::string::basic_string[abi:ne180100]<0>(&v1954, "value");
                v234 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v143 + 20, (unsigned __int8 *)&v1954);
                if (v234)
                  v235 = (const std::string *)(v234 + 40);
                else
                  v235 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
                RIO_MTLX::Element::setAttribute(v197, (__int128 *)&__p, v235);
                if (SHIBYTE(v1954.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v1954.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_413;
            }
LABEL_274:
            v156 = *(_DWORD *)v147;
            v157 = *(_DWORD *)(v147 + 3);
            if (v156 != 1919381615 || v157 != 1752195442)
              goto LABEL_371;
            v159 = (_QWORD *)v1952.__r_.__value_.__r.__words[0];
            v2013 = (std::string *)v143;
            v2014 = (std::__shared_weak_count *)v144;
            if (v144)
            {
              v160 = (unint64_t *)((char *)v144 + 8);
              do
                v161 = __ldxr(v160);
              while (__stxr(v161 + 1, v160));
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "nodegraph");
            RIO_MTLX::Element::changeChildCategory(v159, &v2013, (uint64_t)&__p, &v2015);
            v162 = v2016;
            if (v2016)
            {
              v163 = (unint64_t *)&v2016->__shared_owners_;
              do
                v164 = __ldaxr(v163);
              while (__stlxr(v164 - 1, v163));
              if (!v164)
              {
                ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                std::__shared_weak_count::__release_weak(v162);
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v165 = v2014;
            if (!v2014)
              goto LABEL_371;
            v166 = (unint64_t *)&v2014->__shared_owners_;
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
LABEL_369:
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
            goto LABEL_371;
          }
        }
        break;
      }
      v168 = *(_DWORD *)v147;
      v169 = *((unsigned __int16 *)v147 + 2);
      if (v168 != 1684105331 || v169 != 29285)
        goto LABEL_371;
      v171 = (_QWORD *)v1952.__r_.__value_.__r.__words[0];
      v2011 = (std::string *)v143;
      v2012 = (std::__shared_weak_count *)v144;
      if (v144)
      {
        v172 = (unint64_t *)((char *)v144 + 8);
        do
          v173 = __ldxr(v172);
        while (__stxr(v173 + 1, v172));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "nodedef");
      RIO_MTLX::Element::changeChildCategory(v171, &v2011, (uint64_t)&__p, (uint64_t *)&v1947);
      RIO_MTLX::Element::asA<RIO_MTLX::NodeDef>((uint64_t)v1947.__r_.__value_.__l.__data_, &v1954);
      v174 = (std::__shared_weak_count *)v1947.__r_.__value_.__l.__size_;
      if (v1947.__r_.__value_.__l.__size_)
      {
        v175 = (unint64_t *)(v1947.__r_.__value_.__l.__size_ + 8);
        do
          v176 = __ldaxr(v175);
        while (__stlxr(v176 - 1, v175));
        if (!v176)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v177 = v2012;
      if (v2012)
      {
        v178 = (unint64_t *)&v2012->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
      v180 = v1954.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, "shadertype");
      v181 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v180 + 160), (unsigned __int8 *)&__p);
      v182 = v181;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v182)
          goto LABEL_326;
      }
      else if (!v181)
      {
        goto LABEL_326;
      }
      v186 = (uint64_t *)v1954.__r_.__value_.__r.__words[0];
      v187 = (RIO_MTLX::TypedElement *)RIO_MTLX::SURFACE_SHADER_TYPE_STRING((RIO_MTLX *)v181);
      v188 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v187);
      RIO_MTLX::Element::setAttribute(v186, v188, (const std::string *)v187);
      v189 = (_QWORD *)v1954.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, "shadertype");
      RIO_MTLX::Element::removeAttribute(v189, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_326:
      v190 = v1954.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, "shaderprogram");
      v140 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v190 + 160), (unsigned __int8 *)&__p);
      v191 = v140;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v191)
        {
LABEL_366:
          v165 = (std::__shared_weak_count *)v1954.__r_.__value_.__l.__size_;
          if (!v1954.__r_.__value_.__l.__size_)
            goto LABEL_371;
          v213 = (unint64_t *)(v1954.__r_.__value_.__l.__size_ + 8);
          do
            v167 = __ldaxr(v213);
          while (__stlxr(v167 - 1, v213));
          goto LABEL_369;
        }
      }
      else if (!v140)
      {
        goto LABEL_366;
      }
      v192 = (uint64_t *)v1954.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, "shaderprogram");
      v193 = (RIO_MTLX::NodeDef *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v192 + 20, (unsigned __int8 *)&__p);
      if (v193)
      {
        v194 = (const std::string *)((char *)v193 + 40);
      }
      else
      {
        v193 = (RIO_MTLX::NodeDef *)RIO_MTLX::EMPTY_STRING(0);
        v194 = (const std::string *)v193;
      }
      v211 = (__int128 *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE(v193);
      RIO_MTLX::Element::setAttribute(v192, v211, v194);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v212 = (_QWORD *)v1954.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, "shaderprogram");
      RIO_MTLX::Element::removeAttribute(v212, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_366;
    }
    break;
  }
  *(_QWORD *)&__str = &v2022;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v238 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
  if (*((_QWORD *)&v2021 + 1))
  {
    v239 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  *(_QWORD *)&v2021 = (char *)&v2026.__r_.__value_.__l + 16;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
  v241 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v242 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030.__r_.__value_.__r.__words[2];
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v244 = (std::__shared_weak_count *)v2030.__r_.__value_.__l.__size_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v245 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v2026, "material");
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t)&v2030, this[17], this[18], (unsigned __int8 *)&v2026);
  if (SHIBYTE(v2026.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2026.__r_.__value_.__l.__data_);
  v248 = v2030.__r_.__value_.__l.__size_;
  v247 = (uint64_t *)v2030.__r_.__value_.__r.__words[0];
  if (v2030.__r_.__value_.__r.__words[0] != v2030.__r_.__value_.__l.__size_)
  {
    while (1)
    {
      v250 = *v247;
      v249 = (std::__shared_weak_count *)v247[1];
      *(_QWORD *)&__str = *v247;
      *((_QWORD *)&__str + 1) = v249;
      if (v249)
      {
        v251 = (unint64_t *)&v249->__shared_owners_;
        do
          v252 = __ldxr(v251);
        while (__stxr(v252 + 1, v251));
      }
      std::string::basic_string[abi:ne180100]<0>(&v2021, "shaderref");
      RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t)&v2026, *(uint64_t **)(v250 + 136), *(uint64_t **)(v250 + 144), (unsigned __int8 *)&v2021);
      if (SHIBYTE(v2022) < 0)
        operator delete((void *)v2021);
      v254 = v2026.__r_.__value_.__l.__size_;
      v253 = (uint64_t *)v2026.__r_.__value_.__r.__words[0];
      if (v2026.__r_.__value_.__r.__words[0] != v2026.__r_.__value_.__l.__size_)
        break;
LABEL_476:
      *(_QWORD *)&v2021 = &v2026;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
      if (v249)
      {
        v277 = (unint64_t *)&v249->__shared_owners_;
        do
          v278 = __ldaxr(v277);
        while (__stlxr(v278 - 1, v277));
        if (!v278)
        {
          ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
          std::__shared_weak_count::__release_weak(v249);
        }
      }
      v247 += 2;
      if (v247 == (uint64_t *)v248)
        goto LABEL_482;
    }
    while (2)
    {
      v255 = *v253;
      v256 = v253[1];
      *(_QWORD *)&v2021 = *v253;
      *((_QWORD *)&v2021 + 1) = v256;
      if (v256)
      {
        v257 = (unint64_t *)(v256 + 8);
        do
          v258 = __ldxr(v257);
        while (__stxr(v258 + 1, v257));
        v2008 = v256;
        do
          v259 = __ldxr(v257);
        while (__stxr(v259 + 1, v257));
      }
      else
      {
        v2008 = 0;
      }
      v2007 = v255;
      v260 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v261 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v262 = __ldaxr(v261);
        while (__stlxr(v262 - 1, v261));
        if (!v262)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v260 + 1) + 16))(*((_QWORD *)&v260 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v260 + 1));
        }
      }
      if (!v2008)
        goto LABEL_460;
      v263 = (unint64_t *)(v2008 + 8);
      do
        v264 = __ldaxr(v263);
      while (__stlxr(v264 - 1, v263));
      if (!v264)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v260 + 1) + 16))(*((_QWORD *)&v260 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v260 + 1));
        if ((_QWORD)v260)
          goto LABEL_461;
      }
      else
      {
LABEL_460:
        if ((_QWORD)v260)
          goto LABEL_461;
      }
      v268 = (uint64_t *)v2021;
      RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)(v2021 + 48), &__p);
      if (__p.__r_.__value_.__r.__words[0])
      {
        v270 = (__int128 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(v269);
        v271 = RIO_MTLX::Element::setAttribute(v268, v270, (const std::string *)(__p.__r_.__value_.__r.__words[0] + 48));
        v272 = (__int128 *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE((RIO_MTLX::NodeDef *)v271);
        NodeString = (const std::string *)RIO_MTLX::NodeDef::getNodeString((RIO_MTLX::NodeDef *)__p.__r_.__value_.__l.__data_);
        RIO_MTLX::Element::setAttribute(v268, v272, NodeString);
      }
      v274 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v275 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v276 = __ldaxr(v275);
        while (__stlxr(v276 - 1, v275));
        if (!v276)
        {
          ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
          std::__shared_weak_count::__release_weak(v274);
        }
      }
LABEL_461:
      v265 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
      if (*((_QWORD *)&v2021 + 1))
      {
        v266 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
        do
          v267 = __ldaxr(v266);
        while (__stlxr(v267 - 1, v266));
        if (!v267)
        {
          ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
          std::__shared_weak_count::__release_weak(v265);
        }
      }
      v253 += 2;
      if (v253 == (uint64_t *)v254)
      {
        v249 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
        goto LABEL_476;
      }
      continue;
    }
  }
LABEL_482:
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  std::string::basic_string[abi:ne180100]<0>(&v2030, "material");
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t)&__str, this[17], this[18], (unsigned __int8 *)&v2030);
  if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2030.__r_.__value_.__l.__data_);
  v280 = RIO_MTLX::EMPTY_STRING(v279);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)v280, (uint64_t)&v2030);
  v281 = v2030.__r_.__value_.__l.__size_;
  v1819 = v2030.__r_.__value_.__l.__size_;
  v282 = v2030.__r_.__value_.__r.__words[0];
LABEL_485:
  if (v282 != v281)
  {
    v1837 = *(std::string **)v282;
    v1821 = v282;
    v1823 = *(std::__shared_weak_count **)(v282 + 8);
    if (v1823)
    {
      v283 = (unint64_t *)&v1823->__shared_owners_;
      do
        v284 = __ldxr(v283);
      while (__stxr(v284 + 1, v283));
    }
    RIO_MTLX::InterfaceElement::getActiveInputs((RIO_MTLX::InterfaceElement *)v1837, (uint64_t)&v2026);
    v285 = v2026.__r_.__value_.__l.__size_;
    v1826 = (std::string *)v2026.__r_.__value_.__l.__size_;
    for (i = v2026.__r_.__value_.__r.__words[0]; ; i += 16)
    {
      if (i == v285)
      {
        *(_QWORD *)&v2021 = &v2026;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
        if (v1823)
        {
          v336 = (unint64_t *)&v1823->__shared_owners_;
          do
            v337 = __ldaxr(v336);
          while (__stlxr(v337 - 1, v336));
          if (!v337)
          {
            ((void (*)(std::__shared_weak_count *))v1823->__on_zero_shared)(v1823);
            std::__shared_weak_count::__release_weak(v1823);
          }
        }
        v281 = v1819;
        v282 = v1821 + 16;
        goto LABEL_485;
      }
      v287 = *(_QWORD **)i;
      v288 = *(std::__shared_weak_count **)(i + 8);
      if (v288)
      {
        v289 = (unint64_t *)&v288->__shared_owners_;
        do
          v290 = __ldxr(v289);
        while (__stxr(v290 + 1, v289));
      }
      std::string::basic_string[abi:ne180100]<0>(&v2021, "opgraph");
      v291 = v288;
      if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v287 + 20, (unsigned __int8 *)&v2021))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "graphoutput");
        v292 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v287 + 20, (unsigned __int8 *)&__p) != 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v292 = 0;
      }
      if (SHIBYTE(v2022) < 0)
      {
        operator delete((void *)v2021);
        if (!v292)
          goto LABEL_579;
      }
      else if (!v292)
      {
        goto LABEL_579;
      }
      v1829 = (std::string *)*((_QWORD *)&__str + 1);
      v293 = (std::string *)__str;
      if ((_QWORD)__str == *((_QWORD *)&__str + 1))
        goto LABEL_576;
      do
      {
        v294 = v293->__r_.__value_.__r.__words[0];
        v1833 = (std::__shared_weak_count *)v293->__r_.__value_.__l.__size_;
        if (v1833)
        {
          v295 = (unint64_t *)&v1833->__shared_owners_;
          do
            v296 = __ldxr(v295);
          while (__stxr(v296 + 1, v295));
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "shaderref");
        RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t)&v2021, *(uint64_t **)(v294 + 136), *(uint64_t **)(v294 + 144), (unsigned __int8 *)&__p);
        v1831 = v293;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v297 = (uint64_t *)*((_QWORD *)&v2021 + 1);
        for (j = (uint64_t *)v2021; j != v297; j += 2)
        {
          v300 = *j;
          v299 = (std::__shared_weak_count *)j[1];
          if (v299)
          {
            v301 = (unint64_t *)&v299->__shared_owners_;
            do
              v302 = __ldxr(v301);
            while (__stxr(v302 + 1, v301));
            do
              v303 = __ldxr(v301);
            while (__stxr(v303 + 1, v301));
          }
          v2005 = v300;
          v2006 = v299;
          if ((std::string *)__p.__r_.__value_.__l.__data_ == v1837)
          {
            v305 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v300 + 96), (unsigned __int8 *)v287 + 48);
            if (!v305)
            {
              v306 = 0;
LABEL_525:
              v304 = v306 == 0;
              goto LABEL_526;
            }
            v306 = *((_QWORD *)v305 + 5);
            v307 = (std::__shared_weak_count *)*((_QWORD *)v305 + 6);
            if (!v307)
              goto LABEL_525;
            v308 = (unint64_t *)&v307->__shared_owners_;
            do
              v309 = __ldxr(v308);
            while (__stxr(v309 + 1, v308));
            v304 = v306 == 0;
            do
              v310 = __ldaxr(v308);
            while (__stlxr(v310 - 1, v308));
            if (!v310)
            {
              ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
              std::__shared_weak_count::__release_weak(v307);
            }
          }
          else
          {
            v304 = 0;
          }
LABEL_526:
          v311 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v312 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v313 = __ldaxr(v312);
            while (__stlxr(v313 - 1, v312));
            if (!v313)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
            }
          }
          v314 = v2006;
          if (!v2006)
            goto LABEL_535;
          v315 = (unint64_t *)&v2006->__shared_owners_;
          do
            v316 = __ldaxr(v315);
          while (__stlxr(v316 - 1, v315));
          if (!v316)
          {
            ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
            std::__shared_weak_count::__release_weak(v314);
            if (!v304)
              goto LABEL_564;
          }
          else
          {
LABEL_535:
            if (!v304)
              goto LABEL_564;
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "bindinput");
          if (*((char *)v287 + 71) < 0)
            std::string::__init_copy_ctor_external(&v2004, (const std::string::value_type *)v287[6], v287[7]);
          else
            v2004 = *(std::string *)((_BYTE *)v287 + 2);
          RIO_MTLX::Element::addChildOfCategory(v300, (uint64_t)&__p, (uint64_t)&v2004, &v1952);
          if (SHIBYTE(v2004.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v2004.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v318 = (uint64_t *)v1952.__r_.__value_.__r.__words[0];
          v319 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v317);
          v320 = (const std::string *)(*(uint64_t (**)(_QWORD *))(*v287 + 56))(v287);
          RIO_MTLX::Element::setAttribute(v318, v319, v320);
          v321 = (uint64_t *)v1952.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__p, "nodegraph");
          std::string::basic_string[abi:ne180100]<0>(&v1954, "opgraph");
          v322 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v287 + 20, (unsigned __int8 *)&v1954);
          if (v322)
            v323 = (const std::string *)(v322 + 40);
          else
            v323 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
          RIO_MTLX::Element::setAttribute(v321, (__int128 *)&__p, v323);
          if (SHIBYTE(v1954.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1954.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v324 = (uint64_t *)v1952.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__p, "output");
          std::string::basic_string[abi:ne180100]<0>(&v1954, "graphoutput");
          v325 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v287 + 20, (unsigned __int8 *)&v1954);
          if (v325)
            v326 = (const std::string *)(v325 + 40);
          else
            v326 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
          RIO_MTLX::Element::setAttribute(v324, (__int128 *)&__p, v326);
          if (SHIBYTE(v1954.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1954.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v327 = (std::__shared_weak_count *)v1952.__r_.__value_.__l.__size_;
          if (v1952.__r_.__value_.__l.__size_)
          {
            v328 = (unint64_t *)(v1952.__r_.__value_.__l.__size_ + 8);
            do
              v329 = __ldaxr(v328);
            while (__stlxr(v329 - 1, v328));
            if (!v329)
            {
              ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
              std::__shared_weak_count::__release_weak(v327);
            }
          }
LABEL_564:
          v288 = v291;
          if (v299)
          {
            v330 = (unint64_t *)&v299->__shared_owners_;
            do
              v331 = __ldaxr(v330);
            while (__stlxr(v331 - 1, v330));
            if (!v331)
            {
              ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
              std::__shared_weak_count::__release_weak(v299);
            }
          }
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2021;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (v1833)
        {
          v332 = (unint64_t *)&v1833->__shared_owners_;
          do
            v333 = __ldaxr(v332);
          while (__stlxr(v333 - 1, v332));
          if (!v333)
          {
            ((void (*)(std::__shared_weak_count *))v1833->__on_zero_shared)(v1833);
            std::__shared_weak_count::__release_weak(v1833);
          }
        }
        v293 = (std::string *)&v1831->__r_.__value_.__r.__words[2];
      }
      while (&v1831->__r_.__value_.__r.__words[2] != (std::string::size_type *)v1829);
LABEL_576:
      std::string::basic_string[abi:ne180100]<0>(&v2021, "opgraph");
      RIO_MTLX::Element::removeAttribute(v287, (unsigned __int8 *)&v2021);
      if (SHIBYTE(v2022) < 0)
        operator delete((void *)v2021);
      std::string::basic_string[abi:ne180100]<0>(&v2021, "graphoutput");
      RIO_MTLX::Element::removeAttribute(v287, (unsigned __int8 *)&v2021);
      if (SHIBYTE(v2022) < 0)
      {
        operator delete((void *)v2021);
        if (v288)
        {
LABEL_580:
          v334 = (unint64_t *)&v288->__shared_owners_;
          do
            v335 = __ldaxr(v334);
          while (__stlxr(v335 - 1, v334));
          if (!v335)
          {
            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
            std::__shared_weak_count::__release_weak(v288);
          }
        }
      }
      else
      {
LABEL_579:
        if (v288)
          goto LABEL_580;
      }
      v285 = (std::string::size_type)v1826;
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v339 = RIO_MTLX::EMPTY_STRING(v338);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::GeomInfo>((uint64_t)this, (unsigned __int8 *)v339, (uint64_t)&v2030);
  v341 = v2030.__r_.__value_.__l.__size_;
  for (k = (std::string::size_type *)v2030.__r_.__value_.__r.__words[0]; k != (std::string::size_type *)v341; k += 2)
  {
    v343 = *k;
    v342 = (std::__shared_weak_count *)k[1];
    __p.__r_.__value_.__r.__words[0] = *k;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v342;
    if (v342)
    {
      v344 = (unint64_t *)&v342->__shared_owners_;
      do
        v345 = __ldxr(v344);
      while (__stxr(v345 + 1, v344));
    }
    std::string::basic_string[abi:ne180100]<0>(&v2021, "geomattr");
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t)&v2026, *(uint64_t **)(v343 + 136), *(uint64_t **)(v343 + 144), (unsigned __int8 *)&v2021);
    if (SHIBYTE(v2022) < 0)
      operator delete((void *)v2021);
    v347 = v2026.__r_.__value_.__l.__size_;
    v346 = v2026.__r_.__value_.__r.__words[0];
    if (v2026.__r_.__value_.__r.__words[0] != v2026.__r_.__value_.__l.__size_)
    {
      do
      {
        v348 = *(std::string **)v346;
        v349 = *(_QWORD *)(v346 + 8);
        v1954.__r_.__value_.__r.__words[0] = *(_QWORD *)v346;
        v1954.__r_.__value_.__l.__size_ = v349;
        if (v349)
        {
          v350 = (unint64_t *)(v349 + 8);
          do
            v351 = __ldxr(v350);
          while (__stxr(v351 + 1, v350));
          v352 = (_QWORD *)__p.__r_.__value_.__r.__words[0];
          v2001 = (std::__shared_weak_count *)v349;
          do
            v353 = __ldxr(v350);
          while (__stxr(v353 + 1, v350));
        }
        else
        {
          v352 = (_QWORD *)__p.__r_.__value_.__r.__words[0];
          v2001 = 0;
        }
        v2000 = v348;
        std::string::basic_string[abi:ne180100]<0>(&v2021, "geomprop");
        RIO_MTLX::Element::changeChildCategory(v352, &v2000, (uint64_t)&v2021, &v2002);
        v354 = v2003;
        if (v2003)
        {
          v355 = (unint64_t *)&v2003->__shared_owners_;
          do
            v356 = __ldaxr(v355);
          while (__stlxr(v356 - 1, v355));
          if (!v356)
          {
            ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
            std::__shared_weak_count::__release_weak(v354);
          }
        }
        if (SHIBYTE(v2022) < 0)
          operator delete((void *)v2021);
        v357 = v2001;
        if (v2001)
        {
          v358 = (unint64_t *)&v2001->__shared_owners_;
          do
            v359 = __ldaxr(v358);
          while (__stlxr(v359 - 1, v358));
          if (!v359)
          {
            ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
            std::__shared_weak_count::__release_weak(v357);
          }
        }
        v360 = (std::__shared_weak_count *)v1954.__r_.__value_.__l.__size_;
        if (v1954.__r_.__value_.__l.__size_)
        {
          v361 = (unint64_t *)(v1954.__r_.__value_.__l.__size_ + 8);
          do
            v362 = __ldaxr(v361);
          while (__stlxr(v362 - 1, v361));
          if (!v362)
          {
            ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
            std::__shared_weak_count::__release_weak(v360);
          }
        }
        v346 += 16;
      }
      while (v346 != v347);
      v342 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    }
    *(_QWORD *)&v2021 = &v2026;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
    if (v342)
    {
      v363 = (unint64_t *)&v342->__shared_owners_;
      do
        v364 = __ldaxr(v363);
      while (__stlxr(v364 - 1, v363));
      if (!v364)
      {
        ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
        std::__shared_weak_count::__release_weak(v342);
      }
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v365 = (RIO_MTLX *)std::string::basic_string[abi:ne180100]<0>(&v2030, "udim");
  v366 = RIO_MTLX::UNIVERSAL_GEOM_NAME(v365);
  RIO_MTLX::Document::getGeomPropValue((RIO_MTLX *)&v2021, (uint64_t)this, (unsigned __int8 *)&v2030, (RIO_MTLX *)v366);
  if ((_QWORD)v2021)
  {
    v368 = (RIO_MTLX *)std::string::basic_string[abi:ne180100]<0>(&v2026, "udimset");
    v369 = RIO_MTLX::UNIVERSAL_GEOM_NAME(v368);
    RIO_MTLX::Document::getGeomPropValue((RIO_MTLX *)&__p, (uint64_t)this, (unsigned __int8 *)&v2026, (RIO_MTLX *)v369);
    v370 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    v371 = __p.__r_.__value_.__r.__words[0] == 0;
    if (__p.__r_.__value_.__l.__size_)
    {
      v372 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v373 = __ldaxr(v372);
      while (__stlxr(v373 - 1, v372));
      if (!v373)
      {
        ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
        std::__shared_weak_count::__release_weak(v370);
      }
    }
    if (SHIBYTE(v2026.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v2026.__r_.__value_.__l.__data_);
  }
  else
  {
    v371 = 0;
  }
  v374 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
  if (*((_QWORD *)&v2021 + 1))
  {
    v375 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
    do
      v376 = __ldaxr(v375);
    while (__stlxr(v376 - 1, v375));
    if (!v376)
    {
      ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
      std::__shared_weak_count::__release_weak(v374);
    }
  }
  if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v2030.__r_.__value_.__l.__data_);
    if (!v371)
      goto LABEL_862;
  }
  else if (!v371)
  {
    goto LABEL_862;
  }
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  v377 = RIO_MTLX::EMPTY_STRING(v367);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::GeomInfo>((uint64_t)this, (unsigned __int8 *)v377, (uint64_t)&v2030);
  v379 = v2030.__r_.__value_.__l.__size_;
  v1834 = (std::string *)v2030.__r_.__value_.__l.__size_;
  for (m = (std::string::size_type *)v2030.__r_.__value_.__r.__words[0]; m != (std::string::size_type *)v379; m += 2)
  {
    v382 = *m;
    v381 = m[1];
    v1952.__r_.__value_.__r.__words[0] = *m;
    v1952.__r_.__value_.__l.__size_ = v381;
    if (v381)
    {
      v383 = (unint64_t *)(v381 + 8);
      do
        v384 = __ldxr(v383);
      while (__stxr(v384 + 1, v383));
    }
    v1838 = (std::string *)v381;
    v385 = RIO_MTLX::EMPTY_STRING(v378);
    v387 = *(uint64_t **)(v382 + 136);
    v386 = *(uint64_t **)(v382 + 144);
    memset(&v2026, 0, sizeof(v2026));
    if (v387 == v386)
    {
      v425 = (std::__shared_weak_count *)v1838;
      goto LABEL_732;
    }
    v388 = v385;
    do
    {
      v390 = *v387;
      v389 = v387[1];
      *(_QWORD *)&v2021 = *v387;
      *((_QWORD *)&v2021 + 1) = v389;
      if (v389)
      {
        v391 = (unint64_t *)(v389 + 8);
        do
          v392 = __ldxr(v391);
        while (__stxr(v392 + 1, v391));
      }
      RIO_MTLX::Element::asA<RIO_MTLX::GeomProp>(v390, &v1954);
      v393 = v1954.__r_.__value_.__r.__words[0];
      if (v1954.__r_.__value_.__r.__words[0])
      {
        v394 = *((char *)v388 + 23);
        v395 = v388[1];
        if (v394 >= 0)
          v395 = *((unsigned __int8 *)v388 + 23);
        if (!v395)
        {
LABEL_676:
          v400 = v1954.__r_.__value_.__l.__size_;
          v401 = (_QWORD *)v2026.__r_.__value_.__l.__size_;
          if (v2026.__r_.__value_.__l.__size_ < v2026.__r_.__value_.__r.__words[2])
          {
            *(_QWORD *)v2026.__r_.__value_.__l.__size_ = v393;
            v401[1] = v400;
            if (v400)
            {
              v402 = (unint64_t *)(v400 + 8);
              do
                v403 = __ldxr(v402);
              while (__stxr(v403 + 1, v402));
            }
            v404 = (std::string::size_type)(v401 + 2);
            goto LABEL_698;
          }
          v405 = v2026.__r_.__value_.__r.__words[0];
          v406 = (uint64_t)(v2026.__r_.__value_.__l.__size_ - v2026.__r_.__value_.__r.__words[0]) >> 4;
          v407 = v406 + 1;
          if ((unint64_t)(v406 + 1) >> 60)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v408 = v2026.__r_.__value_.__r.__words[2] - v2026.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v2026.__r_.__value_.__r.__words[2] - v2026.__r_.__value_.__r.__words[0]) >> 3 > v407)
            v407 = v408 >> 3;
          if ((unint64_t)v408 >= 0x7FFFFFFFFFFFFFF0)
            v409 = 0xFFFFFFFFFFFFFFFLL;
          else
            v409 = v407;
          if (v409 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v410 = (char *)operator new(16 * v409);
          v411 = (std::string::size_type *)&v410[16 * v406];
          *v411 = v393;
          v411[1] = v400;
          if (v400)
          {
            v412 = (unint64_t *)(v400 + 8);
            do
              v413 = __ldxr(v412);
            while (__stxr(v413 + 1, v412));
          }
          if (v401 == (_QWORD *)v405)
          {
            v404 = (std::string::size_type)(v411 + 2);
            v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v410[16 * v406];
            v2026.__r_.__value_.__r.__words[2] = (std::string::size_type)&v410[16 * v409];
            if (v401)
              goto LABEL_697;
          }
          else
          {
            v414 = v401;
            v415 = (std::string::size_type)&v410[16 * v406];
            do
            {
              v416 = *((_OWORD *)v414 - 1);
              v414 -= 2;
              *(_OWORD *)(v415 - 16) = v416;
              v415 -= 16;
              *v414 = 0;
              v414[1] = 0;
            }
            while (v414 != (_QWORD *)v405);
            v404 = (std::string::size_type)(v411 + 2);
            v2026.__r_.__value_.__r.__words[0] = v415;
            v2026.__r_.__value_.__l.__size_ = (std::string::size_type)(v411 + 2);
            v2026.__r_.__value_.__r.__words[2] = (std::string::size_type)&v410[16 * v409];
            do
            {
              v401 -= 2;
              std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v401);
            }
            while (v401 != (_QWORD *)v405);
            v401 = (_QWORD *)v405;
            if (v405)
LABEL_697:
              operator delete(v401);
          }
LABEL_698:
          v2026.__r_.__value_.__l.__size_ = v404;
          goto LABEL_699;
        }
        v396 = *(unsigned __int8 *)(v390 + 47);
        if ((v396 & 0x80u) == 0)
          v397 = *(unsigned __int8 *)(v390 + 47);
        else
          v397 = *(_QWORD *)(v390 + 32);
        if (v397 == v395)
        {
          v398 = (const void **)(v390 + 24);
          if (v394 >= 0)
            v399 = (unsigned __int8 *)v388;
          else
            v399 = (unsigned __int8 *)*v388;
          if ((v396 & 0x80) != 0)
          {
            if (!memcmp(*v398, v399, *(_QWORD *)(v390 + 32)))
              goto LABEL_676;
          }
          else
          {
            if (!*(_BYTE *)(v390 + 47))
              goto LABEL_676;
            while (*(unsigned __int8 *)v398 == *v399)
            {
              v398 = (const void **)((char *)v398 + 1);
              ++v399;
              if (!--v396)
                goto LABEL_676;
            }
          }
        }
      }
LABEL_699:
      v417 = (std::__shared_weak_count *)v1954.__r_.__value_.__l.__size_;
      if (v1954.__r_.__value_.__l.__size_)
      {
        v418 = (unint64_t *)(v1954.__r_.__value_.__l.__size_ + 8);
        do
          v419 = __ldaxr(v418);
        while (__stlxr(v419 - 1, v418));
        if (!v419)
        {
          ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
          std::__shared_weak_count::__release_weak(v417);
        }
      }
      v420 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
      if (*((_QWORD *)&v2021 + 1))
      {
        v421 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
        do
          v422 = __ldaxr(v421);
        while (__stlxr(v422 - 1, v421));
        if (!v422)
        {
          ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
          std::__shared_weak_count::__release_weak(v420);
        }
      }
      v387 += 2;
    }
    while (v387 != v386);
    v424 = v2026.__r_.__value_.__l.__size_;
    v423 = (uint64_t *)v2026.__r_.__value_.__r.__words[0];
    v425 = (std::__shared_weak_count *)v1838;
    if (v2026.__r_.__value_.__r.__words[0] != v2026.__r_.__value_.__l.__size_)
    {
      while (1)
      {
        v426 = *v423;
        v427 = (std::__shared_weak_count *)v423[1];
        *(_QWORD *)&v2021 = *v423;
        *((_QWORD *)&v2021 + 1) = v427;
        if (v427)
        {
          v428 = (unint64_t *)&v427->__shared_owners_;
          do
            v429 = __ldxr(v428);
          while (__stxr(v429 + 1, v428));
        }
        v430 = (_QWORD *)(v426 + 48);
        v431 = *(char *)(v426 + 71);
        if (v431 < 0)
        {
          if (*(_QWORD *)(v426 + 56) == 4)
          {
            v430 = (_QWORD *)*v430;
LABEL_722:
            if (*(_DWORD *)v430 == 1835623541)
            {
              ValueString = RIO_MTLX::ValueElement::getValueString((RIO_MTLX::ValueElement *)v426);
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&__p, (const void **)ValueString, (uint64_t)ValueString);
            }
          }
        }
        else if (v431 == 4)
        {
          goto LABEL_722;
        }
        if (v427)
        {
          v433 = (unint64_t *)&v427->__shared_owners_;
          do
            v434 = __ldaxr(v433);
          while (__stlxr(v434 - 1, v433));
          if (!v434)
          {
            ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
            std::__shared_weak_count::__release_weak(v427);
          }
        }
        v423 += 2;
        if (v423 == (uint64_t *)v424)
        {
          v425 = (std::__shared_weak_count *)v1952.__r_.__value_.__l.__size_;
          break;
        }
      }
    }
LABEL_732:
    *(_QWORD *)&v2021 = &v2026;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
    if (v425)
    {
      v435 = (unint64_t *)&v425->__shared_owners_;
      do
        v436 = __ldaxr(v435);
      while (__stlxr(v436 - 1, v435));
      if (!v436)
      {
        ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
        std::__shared_weak_count::__release_weak(v425);
      }
    }
    v379 = (std::string::size_type)v1834;
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  memset(&v1954, 0, sizeof(v1954));
  v438 = __p.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[1])
  {
    do
    {
      v439 = HIBYTE(v1954.__r_.__value_.__r.__words[2]);
      if ((v1954.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v439 = v1954.__r_.__value_.__l.__size_;
      if (v439)
      {
        std::operator+<char>();
        if ((v2030.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v440 = &v2030;
        else
          v440 = (std::string *)v2030.__r_.__value_.__r.__words[0];
        if ((v2030.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v441 = HIBYTE(v2030.__r_.__value_.__r.__words[2]);
        else
          v441 = v2030.__r_.__value_.__l.__size_;
        v437 = std::string::append(&v1954, (const std::string::value_type *)v440, v441);
        if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v2030.__r_.__value_.__l.__data_);
      }
      else
      {
        v437 = std::string::operator=(&v1954, (const std::string *)(v438 + 32));
      }
      v442 = *(std::string **)(v438 + 8);
      if (v442)
      {
        do
        {
          v443 = v442;
          v442 = (std::string *)v442->__r_.__value_.__r.__words[0];
        }
        while (v442);
      }
      else
      {
        do
        {
          v443 = *(std::string **)(v438 + 16);
          v3 = v443->__r_.__value_.__r.__words[0] == v438;
          v438 = (std::string::size_type)v443;
        }
        while (!v3);
      }
      v438 = (std::string::size_type)v443;
    }
    while (v443 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
  }
  v444 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v437);
  v445 = RIO_MTLX::UNIVERSAL_GEOM_NAME((RIO_MTLX *)v444);
  v446 = (const std::string *)v445;
  if (*((char *)v444 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v2030, (const std::string::value_type *)*v444, v444[1]);
  }
  else
  {
    v447 = *(_OWORD *)v444;
    v2030.__r_.__value_.__r.__words[2] = v444[2];
    *(_OWORD *)&v2030.__r_.__value_.__l.__data_ = v447;
  }
  v448 = HIBYTE(v2030.__r_.__value_.__r.__words[2]);
  if ((v2030.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v448 = v2030.__r_.__value_.__l.__size_;
  if (!v448)
  {
    v449 = (char *)RIO_MTLX::GeomInfo::CATEGORY((RIO_MTLX::GeomInfo *)v445);
    v450 = v449;
    if (v449[23] >= 0)
      v451 = v449[23];
    else
      v451 = *((_QWORD *)v449 + 1);
    v452 = &v2021;
    std::string::basic_string[abi:ne180100]((uint64_t)&v2021, v451 + 1);
    if (v2022 < 0)
      v452 = (__int128 *)v2021;
    if (v451)
    {
      if (v450[23] >= 0)
        v453 = v450;
      else
        v453 = *(char **)v450;
      memmove(v452, v453, v451);
    }
    *(_WORD *)((char *)v452 + v451) = 49;
    RIO_MTLX::Element::createValidChildName((uint64_t)this, (uint64_t)&v2021, (uint64_t)&v2026);
    if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v2030.__r_.__value_.__l.__data_);
    v2030 = v2026;
    *((_BYTE *)&v2026.__r_.__value_.__s + 23) = 0;
    v2026.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v2022) < 0)
      operator delete((void *)v2021);
  }
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v1952, this + 1);
  v454 = operator new(0x118uLL);
  v454[1] = 0;
  v454[2] = 0;
  *v454 = &off_24FDE3F08;
  *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)&v1952.__r_.__value_.__l.__data_;
  *(_OWORD *)&v1952.__r_.__value_.__l.__data_ = 0uLL;
  RIO_MTLX::GeomInfo::GeomInfo((RIO_MTLX::GeomInfo *)(v454 + 3), (uint64_t *)&v2026, (uint64_t)&v2030);
  v455 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v456 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v457 = __ldaxr(v456);
    while (__stlxr(v457 - 1, v456));
    if (!v457)
    {
      ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
      std::__shared_weak_count::__release_weak(v455);
    }
  }
  v1947.__r_.__value_.__r.__words[0] = (std::string::size_type)(v454 + 3);
  v1947.__r_.__value_.__l.__size_ = (std::string::size_type)v454;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v1947, v454 + 4, (uint64_t)(v454 + 3));
  v458 = (std::__shared_weak_count *)v1952.__r_.__value_.__l.__size_;
  if (v1952.__r_.__value_.__l.__size_)
  {
    v459 = (unint64_t *)(v1952.__r_.__value_.__l.__size_ + 8);
    do
      v460 = __ldaxr(v459);
    while (__stlxr(v460 - 1, v459));
    if (!v460)
    {
      ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
      std::__shared_weak_count::__release_weak(v458);
    }
  }
  *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)&v1947.__r_.__value_.__l.__data_;
  if (v1947.__r_.__value_.__l.__size_)
  {
    v461 = (unint64_t *)(v1947.__r_.__value_.__l.__size_ + 8);
    do
      v462 = __ldxr(v461);
    while (__stxr(v462 + 1, v461));
  }
  v463 = (RIO_MTLX::GeomElement *)((uint64_t (*)(uint64_t **, std::string *))(*this)[5])(this, &v2026);
  v464 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v465 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v466 = __ldaxr(v465);
    while (__stlxr(v466 - 1, v465));
    if (!v466)
    {
      ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
      std::__shared_weak_count::__release_weak(v464);
    }
  }
  if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2030.__r_.__value_.__l.__data_);
  v467 = (uint64_t *)v1947.__r_.__value_.__r.__words[0];
  v468 = (__int128 *)RIO_MTLX::GeomElement::GEOM_ATTRIBUTE(v463);
  v469 = RIO_MTLX::Element::setAttribute(v467, v468, v446);
  v470 = (_QWORD *)v1947.__r_.__value_.__r.__words[0];
  v471 = (unsigned __int8 *)RIO_MTLX::UDIM_SET_PROPERTY((RIO_MTLX *)v469);
  RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE();
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::GeomProp>(&v1999, (uint64_t)v470, v471);
  v472 = (RIO_MTLX::GeomProp *)v1999;
  if (!(_QWORD)v1999)
  {
    if ((char)v471[23] < 0)
    {
      std::string::__init_copy_ctor_external(&v2030, *(const std::string::value_type **)v471, *((_QWORD *)v471 + 1));
    }
    else
    {
      v473 = *(_OWORD *)v471;
      v2030.__r_.__value_.__r.__words[2] = *((_QWORD *)v471 + 2);
      *(_OWORD *)&v2030.__r_.__value_.__l.__data_ = v473;
    }
    v474 = HIBYTE(v2030.__r_.__value_.__r.__words[2]);
    if ((v2030.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v474 = v2030.__r_.__value_.__l.__size_;
    if (!v474)
    {
      v475 = (char *)RIO_MTLX::GeomProp::CATEGORY(v472);
      v476 = v475;
      if (v475[23] >= 0)
        v477 = v475[23];
      else
        v477 = *((_QWORD *)v475 + 1);
      v478 = &v2021;
      std::string::basic_string[abi:ne180100]((uint64_t)&v2021, v477 + 1);
      if (v2022 < 0)
        v478 = (__int128 *)v2021;
      if (v477)
      {
        if (v476[23] >= 0)
          v479 = v476;
        else
          v479 = *(char **)v476;
        memmove(v478, v479, v477);
      }
      *(_WORD *)((char *)v478 + v477) = 49;
      RIO_MTLX::Element::createValidChildName((uint64_t)v470, (uint64_t)&v2021, (uint64_t)&v2026);
      if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v2030.__r_.__value_.__l.__data_);
      v2030 = v2026;
      *((_BYTE *)&v2026.__r_.__value_.__s + 23) = 0;
      v2026.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v2022) < 0)
        operator delete((void *)v2021);
    }
    std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v1952, v470 + 1);
    v480 = operator new(0x118uLL);
    v480[1] = 0;
    v480[2] = 0;
    *v480 = &off_24FDE4160;
    *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)&v1952.__r_.__value_.__l.__data_;
    *(_OWORD *)&v1952.__r_.__value_.__l.__data_ = 0uLL;
    RIO_MTLX::GeomProp::GeomProp((RIO_MTLX::GeomProp *)(v480 + 3), (uint64_t *)&v2026, (uint64_t)&v2030);
    v481 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
    if (v2026.__r_.__value_.__l.__size_)
    {
      v482 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
      do
        v483 = __ldaxr(v482);
      while (__stlxr(v483 - 1, v482));
      if (!v483)
      {
        ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
        std::__shared_weak_count::__release_weak(v481);
      }
    }
    v1949[0] = (RIO_MTLX::Node *)(v480 + 3);
    v1949[1] = (RIO_MTLX::Node *)v480;
    std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)v1949, v480 + 4, (uint64_t)(v480 + 3));
    v484 = (std::__shared_weak_count *)v1952.__r_.__value_.__l.__size_;
    if (v1952.__r_.__value_.__l.__size_)
    {
      v485 = (unint64_t *)(v1952.__r_.__value_.__l.__size_ + 8);
      do
        v486 = __ldaxr(v485);
      while (__stlxr(v486 - 1, v485));
      if (!v486)
      {
        ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
        std::__shared_weak_count::__release_weak(v484);
      }
    }
    *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)v1949;
    if (v1949[1])
    {
      v487 = (unint64_t *)((char *)v1949[1] + 8);
      do
        v488 = __ldxr(v487);
      while (__stxr(v488 + 1, v487));
    }
    (*(void (**)(_QWORD *, std::string *))(*v470 + 40))(v470, &v2026);
    v489 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
    if (v2026.__r_.__value_.__l.__size_)
    {
      v490 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
      do
        v491 = __ldaxr(v490);
      while (__stlxr(v491 - 1, v490));
      if (!v491)
      {
        ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
        std::__shared_weak_count::__release_weak(v489);
      }
    }
    if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v2030.__r_.__value_.__l.__data_);
    v492 = *(_OWORD *)v1949;
    v1949[0] = 0;
    v1949[1] = 0;
    v493 = (std::__shared_weak_count *)*((_QWORD *)&v1999 + 1);
    v1999 = v492;
    if (v493)
    {
      v494 = (unint64_t *)&v493->__shared_owners_;
      do
        v495 = __ldaxr(v494);
      while (__stlxr(v495 - 1, v494));
      if (!v495)
      {
        ((void (*)(std::__shared_weak_count *))v493->__on_zero_shared)(v493);
        std::__shared_weak_count::__release_weak(v493);
      }
    }
    v496 = (std::__shared_weak_count *)v1949[1];
    if (v1949[1])
    {
      v497 = (unint64_t *)((char *)v1949[1] + 8);
      do
        v498 = __ldaxr(v497);
      while (__stlxr(v498 - 1, v497));
      if (!v498)
      {
        ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
        std::__shared_weak_count::__release_weak(v496);
      }
    }
    v472 = (RIO_MTLX::GeomProp *)v1999;
  }
  RIO_MTLX::ValueElement::setValue<std::string>(v472, &v1954, (uint64_t)RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE(void)::v);
  v499 = (std::__shared_weak_count *)*((_QWORD *)&v1999 + 1);
  if (*((_QWORD *)&v1999 + 1))
  {
    v500 = (unint64_t *)(*((_QWORD *)&v1999 + 1) + 8);
    do
      v501 = __ldaxr(v500);
    while (__stlxr(v501 - 1, v500));
    if (!v501)
    {
      ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
      std::__shared_weak_count::__release_weak(v499);
    }
  }
  v502 = (std::__shared_weak_count *)v1947.__r_.__value_.__l.__size_;
  if (v1947.__r_.__value_.__l.__size_)
  {
    v503 = (unint64_t *)(v1947.__r_.__value_.__l.__size_ + 8);
    do
      v504 = __ldaxr(v503);
    while (__stlxr(v504 - 1, v503));
    if (!v504)
    {
      ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
      std::__shared_weak_count::__release_weak(v502);
    }
  }
  if (SHIBYTE(v1954.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1954.__r_.__value_.__l.__data_);
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
LABEL_862:
  v2030.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2030);
LABEL_863:
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v2030);
  *(_QWORD *)&v2032[8] = 0;
  *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)&v2030.__r_.__value_.__l.__data_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v505 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v506 = __ldxr(v505);
    while (__stxr(v506 + 1, v505));
  }
  v2027 = 0;
  v2026.__r_.__value_.__r.__words[2] = 0;
  v2028 = 0;
  v507 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v2026.__r_.__value_.__s.__data_[16], (_QWORD *)v2030.__r_.__value_.__r.__words[2], (_QWORD *)v2031, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2031 - v2030.__r_.__value_.__r.__words[2]) >> 3));
  v2029 = *(_OWORD *)v2032;
  RIO_MTLX::NULL_TREE_ITERATOR((RIO_MTLX *)v507);
  v2021 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1))
  {
    v508 = (unint64_t *)(*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8);
    do
      v509 = __ldxr(v508);
    while (__stxr(v509 + 1, v508));
  }
  v2023 = 0;
  v2022 = 0;
  v2024 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)&v2022, (_QWORD *)qword_255E54218, unk_255E54220, 0xAAAAAAAAAAAAAAABLL * ((unk_255E54220 - qword_255E54218) >> 3));
  v2025 = xmmword_255E54230;
  while (1)
  {
    v510 = RIO_MTLX::TreeIterator::operator==((uint64_t)&v2026, (uint64_t)&v2021);
    if (v510)
      break;
    v511 = (uint64_t *)v2026.__r_.__value_.__r.__words[0];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v2026.__r_.__value_.__l.__data_;
    if (v2026.__r_.__value_.__l.__size_)
    {
      v512 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
      do
        v513 = __ldxr(v512);
      while (__stxr(v513 + 1, v512));
    }
    v514 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v510);
    v515 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v511 + 20, v514);
    if (v515)
      v516 = (uint64_t *)(v515 + 40);
    else
      v516 = RIO_MTLX::EMPTY_STRING(0);
    v517 = *((char *)v516 + 23);
    if (v517 < 0)
    {
      if (v516[1] != 6)
        goto LABEL_888;
      v516 = (uint64_t *)*v516;
    }
    else if (v517 != 6)
    {
      goto LABEL_888;
    }
    if (*(_DWORD *)v516 == 1920229741 && *((_WORD *)v516 + 2) == 30825)
    {
      v519 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v516);
      RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE();
      RIO_MTLX::Element::setAttribute(v511, v519, (const std::string *)&RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v);
    }
LABEL_888:
    std::string::basic_string[abi:ne180100]<0>(&__str, "default");
    v520 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v511 + 20, (unsigned __int8 *)&__str);
    if (v520)
    {
      v521 = (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v520);
      v522 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v511 + 20, v521);
      v523 = v522;
      if (SBYTE7(__str_16) < 0)
      {
        operator delete((void *)__str);
        if (v523)
          goto LABEL_901;
      }
      else if (v522)
      {
        goto LABEL_901;
      }
      v524 = (__int128 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v522);
      std::string::basic_string[abi:ne180100]<0>(&__str, "default");
      v525 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v511 + 20, (unsigned __int8 *)&__str);
      if (v525)
        v526 = (const std::string *)(v525 + 40);
      else
        v526 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
      RIO_MTLX::Element::setAttribute(v511, v524, v526);
      if (SBYTE7(__str_16) < 0)
        operator delete((void *)__str);
      std::string::basic_string[abi:ne180100]<0>(&__str, "default");
      RIO_MTLX::Element::removeAttribute(v511, (unsigned __int8 *)&__str);
    }
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
LABEL_901:
    RIO_MTLX::Element::asA<RIO_MTLX::MaterialAssign>((uint64_t)v511, &__str);
    v528 = (std::string *)__str;
    if ((_QWORD)__str)
    {
      v529 = (__int128 *)RIO_MTLX::MaterialAssign::MATERIAL_ATTRIBUTE(v527);
      RIO_MTLX::Element::setAttribute((uint64_t *)v528, v529, v528 + 2);
    }
    v530 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
    if (*((_QWORD *)&__str + 1))
    {
      v531 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
      do
        v532 = __ldaxr(v531);
      while (__stlxr(v532 - 1, v531));
      if (!v532)
      {
        ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
        std::__shared_weak_count::__release_weak(v530);
      }
    }
    v533 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v534 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v535 = __ldaxr(v534);
      while (__stlxr(v535 - 1, v534));
      if (!v535)
      {
        ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
        std::__shared_weak_count::__release_weak(v533);
      }
    }
    RIO_MTLX::TreeIterator::operator++(&v2026);
  }
  *(_QWORD *)&__str = &v2022;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v536 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
  if (*((_QWORD *)&v2021 + 1))
  {
    v537 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
    do
      v538 = __ldaxr(v537);
    while (__stlxr(v538 - 1, v537));
    if (!v538)
    {
      ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
      std::__shared_weak_count::__release_weak(v536);
    }
  }
  *(_QWORD *)&v2021 = (char *)&v2026.__r_.__value_.__l + 16;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
  v539 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v540 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v541 = __ldaxr(v540);
    while (__stlxr(v541 - 1, v540));
    if (!v541)
    {
      ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
      std::__shared_weak_count::__release_weak(v539);
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030.__r_.__value_.__r.__words[2];
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v542 = (std::__shared_weak_count *)v2030.__r_.__value_.__l.__size_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v543 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v544 = __ldaxr(v543);
    while (__stlxr(v544 - 1, v543));
    if (!v544)
    {
      ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
      std::__shared_weak_count::__release_weak(v542);
    }
  }
LABEL_929:
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v2030);
  *(_QWORD *)&v2032[8] = 0;
  *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)&v2030.__r_.__value_.__l.__data_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v545 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v546 = __ldxr(v545);
    while (__stxr(v546 + 1, v545));
  }
  v2027 = 0;
  v2026.__r_.__value_.__r.__words[2] = 0;
  v2028 = 0;
  v547 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v2026.__r_.__value_.__s.__data_[16], (_QWORD *)v2030.__r_.__value_.__r.__words[2], (_QWORD *)v2031, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2031 - v2030.__r_.__value_.__r.__words[2]) >> 3));
  v2029 = *(_OWORD *)v2032;
  RIO_MTLX::NULL_TREE_ITERATOR((RIO_MTLX *)v547);
  v2021 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1))
  {
    v548 = (unint64_t *)(*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8);
    do
      v549 = __ldxr(v548);
    while (__stxr(v549 + 1, v548));
  }
  v2023 = 0;
  v2022 = 0;
  v2024 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)&v2022, (_QWORD *)qword_255E54218, unk_255E54220, 0xAAAAAAAAAAAAAAABLL * ((unk_255E54220 - qword_255E54218) >> 3));
  v2025 = xmmword_255E54230;
  while (2)
  {
    if (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v2026, (uint64_t)&v2021))
    {
      v1818 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
      v550 = v2026.__r_.__value_.__r.__words[0];
      if (v2026.__r_.__value_.__l.__size_)
      {
        v551 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
        do
          v552 = __ldxr(v551);
        while (__stxr(v552 + 1, v551));
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Look>(v550, v1949);
      RIO_MTLX::Element::asA<RIO_MTLX::GeomInfo>(v550, &v1947);
      v554 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v553);
      v555 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v550 + 160), v554);
      if (v555)
      {
        v556 = (RIO_MTLX *)((char *)v555 + 40);
      }
      else
      {
        v555 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
        v556 = v555;
      }
      v557 = (std::string *)RIO_MTLX::GEOMNAME_TYPE_STRING(v555);
      v558 = *((unsigned __int8 *)v556 + 23);
      if ((v558 & 0x80u) == 0)
        v559 = *((unsigned __int8 *)v556 + 23);
      else
        v559 = *((_QWORD *)v556 + 1);
      v560 = HIBYTE(v557->__r_.__value_.__r.__words[2]);
      v561 = (char)v560;
      if ((v560 & 0x80u) != 0)
        v560 = v557->__r_.__value_.__l.__size_;
      if (v559 != v560)
        goto LABEL_968;
      if (v561 >= 0)
        v562 = (unsigned __int8 *)v557;
      else
        v562 = (unsigned __int8 *)v557->__r_.__value_.__r.__words[0];
      if ((v558 & 0x80) != 0)
      {
        v557 = (std::string *)memcmp(*(const void **)v556, v562, *((_QWORD *)v556 + 1));
        if ((_DWORD)v557)
          goto LABEL_968;
      }
      else if (*((_BYTE *)v556 + 23))
      {
        while (*(unsigned __int8 *)v556 == *v562)
        {
          v556 = (RIO_MTLX *)((char *)v556 + 1);
          ++v562;
          if (!--v558)
            goto LABEL_958;
        }
        goto LABEL_968;
      }
LABEL_958:
      v563 = (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v557);
      v564 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v550 + 160), v563);
      if (v564)
        v557 = (std::string *)(v564 + 40);
      else
        v557 = (std::string *)RIO_MTLX::EMPTY_STRING(0);
      v565 = SHIBYTE(v557->__r_.__value_.__r.__words[2]);
      if (v565 < 0)
      {
        if (v557->__r_.__value_.__l.__size_ != 1)
          goto LABEL_968;
        v557 = (std::string *)v557->__r_.__value_.__r.__words[0];
      }
      else if (v565 != 1)
      {
        goto LABEL_968;
      }
      if (v557->__r_.__value_.__s.__data_[0] == 42)
      {
        v566 = (RIO_MTLX *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v557);
        v567 = RIO_MTLX::UNIVERSAL_GEOM_NAME(v566);
        v557 = RIO_MTLX::Element::setAttribute((uint64_t *)v550, (__int128 *)v566, (const std::string *)v567);
      }
LABEL_968:
      v568 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v557);
      v569 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v550 + 160), v568);
      if (v569)
      {
        v570 = (RIO_MTLX *)((char *)v569 + 40);
      }
      else
      {
        v569 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
        v570 = v569;
      }
      v571 = (RIO_MTLX *)RIO_MTLX::FILENAME_TYPE_STRING(v569);
      v572 = *((unsigned __int8 *)v570 + 23);
      if ((v572 & 0x80u) == 0)
        v573 = *((unsigned __int8 *)v570 + 23);
      else
        v573 = *((_QWORD *)v570 + 1);
      v574 = *((unsigned __int8 *)v571 + 23);
      v575 = (char)v574;
      if ((v574 & 0x80u) != 0)
        v574 = *((_QWORD *)v571 + 1);
      if (v573 == v574)
      {
        if (v575 >= 0)
          v576 = (unsigned __int8 *)v571;
        else
          v576 = *(unsigned __int8 **)v571;
        if ((v572 & 0x80) != 0)
        {
          v571 = (RIO_MTLX *)memcmp(*(const void **)v570, v576, *((_QWORD *)v570 + 1));
          if ((_DWORD)v571)
            goto LABEL_1001;
        }
        else if (*((_BYTE *)v570 + 23))
        {
          while (*(unsigned __int8 *)v570 == *v576)
          {
            v570 = (RIO_MTLX *)((char *)v570 + 1);
            ++v576;
            if (!--v572)
              goto LABEL_986;
          }
          goto LABEL_1001;
        }
LABEL_986:
        __str = 0u;
        __str_16 = 0u;
        LODWORD(v1883) = 1065353216;
        v577 = (const std::string *)RIO_MTLX::UDIM_TOKEN(v571);
        std::string::basic_string[abi:ne180100]<0>(&__p, "%UDIM");
        v1954.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v578 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&__str, (unsigned __int8 *)&__p, (__int128 **)&v1954);
        v579 = std::string::operator=((std::string *)(v578 + 40), v577);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v580 = (const std::string *)RIO_MTLX::UV_TILE_TOKEN((RIO_MTLX *)v579);
        std::string::basic_string[abi:ne180100]<0>(&__p, "%UVTILE");
        v1954.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v581 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&__str, (unsigned __int8 *)&__p, (__int128 **)&v1954);
        v582 = std::string::operator=((std::string *)(v581 + 40), v580);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v583 = (RIO_MTLX::ValueElement *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v582);
        v584 = (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v583);
        v585 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v550 + 160), v584);
        if (v585)
          v586 = (uint64_t *)(v585 + 40);
        else
          v586 = RIO_MTLX::EMPTY_STRING(0);
        if (*((char *)v586 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v1998, (const std::string::value_type *)*v586, v586[1]);
        }
        else
        {
          v587 = *(_OWORD *)v586;
          v1998.__r_.__value_.__r.__words[2] = v586[2];
          *(_OWORD *)&v1998.__r_.__value_.__l.__data_ = v587;
        }
        RIO_MTLX::replaceSubstrings(&v1998, (uint64_t)&__str, (uint64_t)&__p);
        RIO_MTLX::Element::setAttribute((uint64_t *)v550, (__int128 *)v583, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1998.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1998.__r_.__value_.__l.__data_);
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&__str);
      }
LABEL_1001:
      __str = 0uLL;
      *(_QWORD *)&__str_16 = 0;
      std::vector<std::shared_ptr<RIO_MTLX::Element>>::__init_with_size[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>*,std::shared_ptr<RIO_MTLX::Element>*>(&__str, *(_QWORD **)(v550 + 136), *(_QWORD **)(v550 + 144), (uint64_t)(*(_QWORD *)(v550 + 144) - *(_QWORD *)(v550 + 136)) >> 4);
      v589 = (uint64_t *)*((_QWORD *)&__str + 1);
      v588 = (uint64_t *)__str;
      if ((_QWORD)__str == *((_QWORD *)&__str + 1))
      {
LABEL_1181:
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v677 = (std::__shared_weak_count *)v1947.__r_.__value_.__l.__size_;
        if (v1947.__r_.__value_.__l.__size_)
        {
          v678 = (unint64_t *)(v1947.__r_.__value_.__l.__size_ + 8);
          do
            v679 = __ldaxr(v678);
          while (__stlxr(v679 - 1, v678));
          if (!v679)
          {
            ((void (*)(std::__shared_weak_count *))v677->__on_zero_shared)(v677);
            std::__shared_weak_count::__release_weak(v677);
          }
        }
        v680 = (std::__shared_weak_count *)v1949[1];
        if (v1949[1])
        {
          v681 = (unint64_t *)((char *)v1949[1] + 8);
          do
            v682 = __ldaxr(v681);
          while (__stlxr(v682 - 1, v681));
          if (!v682)
          {
            ((void (*)(std::__shared_weak_count *))v680->__on_zero_shared)(v680);
            std::__shared_weak_count::__release_weak(v680);
          }
        }
        if (v1818)
        {
          v683 = (unint64_t *)&v1818->__shared_owners_;
          do
            v684 = __ldaxr(v683);
          while (__stlxr(v684 - 1, v683));
          if (!v684)
          {
            ((void (*)(std::__shared_weak_count *))v1818->__on_zero_shared)(v1818);
            std::__shared_weak_count::__release_weak(v1818);
          }
        }
        RIO_MTLX::TreeIterator::operator++(&v2026);
        continue;
      }
      v1827 = (std::string *)(v550 + 24);
      while (1)
      {
        v590 = *v588;
        v1835 = (std::__shared_weak_count *)v588[1];
        if (v1835)
        {
          v591 = (unint64_t *)&v1835->__shared_owners_;
          do
            v592 = __ldxr(v591);
          while (__stxr(v592 + 1, v591));
        }
        v593 = *(unsigned __int8 *)(v550 + 47);
        if (*(char *)(v550 + 47) < 0)
        {
          if (*(_QWORD *)(v550 + 32) != 8)
            goto LABEL_1021;
          v594 = (std::string::__raw *)v1827->__r_.__value_.__r.__words[0];
        }
        else
        {
          v594 = (std::string::__raw *)v1827;
          if (v593 != 8)
            goto LABEL_1021;
        }
        if (v594->__words[0] == 0x6C6169726574616DLL)
        {
          v596 = (_QWORD *)(v590 + 24);
          v597 = *(char *)(v590 + 47);
          if (v597 < 0)
          {
            if (*(_QWORD *)(v590 + 32) != 8)
              goto LABEL_1012;
            v596 = (_QWORD *)*v596;
          }
          else if (v597 != 8)
          {
            goto LABEL_1012;
          }
          if (*v596 == 0x656469727265766FLL)
            break;
        }
LABEL_1012:
        if ((v593 & 0x80) != 0)
        {
          if (*(_QWORD *)(v550 + 32) != 8)
            goto LABEL_1021;
          v595 = (std::string::__raw *)v1827->__r_.__value_.__r.__words[0];
        }
        else
        {
          v595 = (std::string::__raw *)v1827;
          if (v593 != 8)
            goto LABEL_1021;
        }
        if (v595->__words[0] != 0x6C6169726574616DLL)
          goto LABEL_1021;
        v605 = (_QWORD *)(v590 + 24);
        v606 = *(char *)(v590 + 47);
        if (v606 < 0)
        {
          if (*(_QWORD *)(v590 + 32) != 15)
            goto LABEL_1021;
          v605 = (_QWORD *)*v605;
        }
        else if (v606 != 15)
        {
          goto LABEL_1021;
        }
        v671 = (_QWORD *)*v605;
        v672 = *(_QWORD *)((char *)v605 + 7);
        if (v671 == (_QWORD *)0x6C6169726574616DLL && v672 == 0x74697265686E696CLL)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "material");
          v674 = (RIO_MTLX::Element *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v590 + 160), (unsigned __int8 *)&__p);
          if (v674)
          {
            v675 = (const std::string *)((char *)v674 + 40);
          }
          else
          {
            v674 = (RIO_MTLX::Element *)RIO_MTLX::EMPTY_STRING(0);
            v675 = (const std::string *)v674;
          }
          v676 = (__int128 *)RIO_MTLX::Element::INHERIT_ATTRIBUTE(v674);
          RIO_MTLX::Element::setAttribute((uint64_t *)v550, v676, v675);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_1160;
        }
LABEL_1021:
        if (!v1949[0])
          goto LABEL_1161;
        v598 = (_QWORD *)(v590 + 24);
        v599 = *(char *)(v590 + 47);
        if (v599 < 0)
        {
          if (*(_QWORD *)(v590 + 32) != 11)
            goto LABEL_1161;
          v598 = (_QWORD *)*v598;
LABEL_1027:
          v600 = (_QWORD *)*v598;
          v601 = *(_QWORD *)((char *)v598 + 3);
          if (v600 != (_QWORD *)0x65686E696B6F6F6CLL || v601 != 0x74697265686E696BLL)
            goto LABEL_1161;
          std::string::basic_string[abi:ne180100]<0>(&__p, "look");
          v603 = (RIO_MTLX::Element *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v590 + 160), (unsigned __int8 *)&__p);
          if (v603)
          {
            v604 = (const std::string *)((char *)v603 + 40);
          }
          else
          {
            v603 = (RIO_MTLX::Element *)RIO_MTLX::EMPTY_STRING(0);
            v604 = (const std::string *)v603;
          }
          v668 = (__int128 *)RIO_MTLX::Element::INHERIT_ATTRIBUTE(v603);
          RIO_MTLX::Element::setAttribute((uint64_t *)v550, v668, v604);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_1160:
          RIO_MTLX::Element::removeChild((_QWORD *)v550, (unsigned __int8 *)(v590 + 48));
          goto LABEL_1161;
        }
        if (v599 == 11)
          goto LABEL_1027;
LABEL_1161:
        if (v1835)
        {
          v669 = (unint64_t *)&v1835->__shared_owners_;
          do
            v670 = __ldaxr(v669);
          while (__stlxr(v670 - 1, v669));
          if (!v670)
          {
            ((void (*)(std::__shared_weak_count *))v1835->__on_zero_shared)(v1835);
            std::__shared_weak_count::__release_weak(v1835);
          }
        }
        v588 += 2;
        if (v588 == v589)
          goto LABEL_1181;
      }
      std::string::basic_string[abi:ne180100]<0>(&v1954, "shaderref");
      RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t)&__p, *(uint64_t **)(v550 + 136), *(uint64_t **)(v550 + 144), (unsigned __int8 *)&v1954);
      if (SHIBYTE(v1954.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1954.__r_.__value_.__l.__data_);
      v1824 = __p.__r_.__value_.__l.__size_;
      v607 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
      {
LABEL_1156:
        v1954.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1954);
        goto LABEL_1160;
      }
      v1830 = (std::string *)(v590 + 160);
      v1820 = v589;
      v1822 = v550;
      while (1)
      {
        v608 = *(std::__shared_weak_count **)(v607 + 8);
        v1839 = *(std::string **)v607;
        if (v608)
        {
          v609 = (unint64_t *)&v608->__shared_owners_;
          do
            v610 = __ldxr(v609);
          while (__stxr(v610 + 1, v609));
          v1997 = v608;
          do
            v611 = __ldxr(v609);
          while (__stxr(v611 + 1, v609));
        }
        else
        {
          v1997 = 0;
        }
        v1996 = v1839;
        if (v608)
        {
          v612 = (unint64_t *)&v608->__shared_owners_;
          do
            v613 = __ldaxr(v612);
          while (__stlxr(v613 - 1, v612));
          if (!v613)
          {
            ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
            std::__shared_weak_count::__release_weak(v608);
          }
        }
        if (v1945.__r_.__value_.__r.__words[0])
        {
          v1825 = v608;
          RIO_MTLX::InterfaceElement::getActiveValueElements((RIO_MTLX::InterfaceElement *)v1945.__r_.__value_.__l.__data_, (uint64_t)&v1954);
          v615 = v1954.__r_.__value_.__l.__size_;
          v614 = (uint64_t *)v1954.__r_.__value_.__r.__words[0];
          if (v1954.__r_.__value_.__r.__words[0] != v1954.__r_.__value_.__l.__size_)
          {
            while (1)
            {
              v617 = *v614;
              v616 = (std::__shared_weak_count *)v614[1];
              if (v616)
              {
                v618 = (unint64_t *)&v616->__shared_owners_;
                do
                  v619 = __ldxr(v618);
                while (__stxr(v619 + 1, v618));
              }
              std::string::basic_string[abi:ne180100]<0>(&v1952, "publicname");
              v620 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v617 + 160), (unsigned __int8 *)&v1952);
              if (v620)
                v621 = v620 + 40;
              else
                v621 = RIO_MTLX::EMPTY_STRING(0);
              v622 = *((unsigned __int8 *)v621 + 23);
              if ((v622 & 0x80u) == 0)
                v623 = *((unsigned __int8 *)v621 + 23);
              else
                v623 = *((_QWORD *)v621 + 1);
              v624 = *(unsigned __int8 *)(v590 + 71);
              v625 = (char)v624;
              if ((v624 & 0x80u) != 0)
                v624 = *(_QWORD *)(v590 + 56);
              if (v623 != v624)
                goto LABEL_1079;
              v626 = v625 >= 0 ? (unsigned __int8 *)(v590 + 48) : *(unsigned __int8 **)(v590 + 48);
              if ((v622 & 0x80) != 0)
              {
                v621 = (void *)memcmp(*(const void **)v621, v626, *((_QWORD *)v621 + 1));
                if ((_DWORD)v621)
                  goto LABEL_1079;
              }
              else if (*((_BYTE *)v621 + 23))
              {
                while (*(unsigned __int8 *)v621 == *v626)
                {
                  v621 = (char *)v621 + 1;
                  ++v626;
                  if (!--v622)
                    goto LABEL_1087;
                }
LABEL_1079:
                v627 = 0;
                goto LABEL_1080;
              }
LABEL_1087:
              v621 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v1839[4].__r_.__value_.__r.__words, (unsigned __int8 *)(v590 + 48));
              if (!v621)
                break;
              v630 = *((_QWORD *)v621 + 5);
              v631 = (std::__shared_weak_count *)*((_QWORD *)v621 + 6);
              if (!v631)
                goto LABEL_1122;
              v632 = (unint64_t *)&v631->__shared_owners_;
              do
                v633 = __ldxr(v632);
              while (__stxr(v633 + 1, v632));
              v627 = v630 == 0;
              do
                v634 = __ldaxr(v632);
              while (__stlxr(v634 - 1, v632));
              if (!v634)
              {
                ((void (*)(std::__shared_weak_count *))v631->__on_zero_shared)(v631);
                std::__shared_weak_count::__release_weak(v631);
              }
LABEL_1080:
              if (SHIBYTE(v1952.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v1952.__r_.__value_.__l.__data_);
                if (v627)
                {
LABEL_1084:
                  v628 = v617 + 24;
                  v629 = *(char *)(v617 + 47);
                  if (v629 < 0)
                  {
                    if (*(_QWORD *)(v617 + 32) == 9)
                    {
                      v628 = *(_QWORD *)v628;
                      goto LABEL_1098;
                    }
LABEL_1102:
                    v638 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v621);
                    if (!RIO_MTLX::Element::isA<RIO_MTLX::Input>(v617, (unsigned __int8 *)v638))
                      goto LABEL_1138;
                    std::string::basic_string[abi:ne180100]<0>(&v1952, "bindinput");
                    if (*(char *)(v617 + 71) < 0)
                      std::string::__init_copy_ctor_external(&v1994, *(const std::string::value_type **)(v617 + 48), *(_QWORD *)(v617 + 56));
                    else
                      v1994 = *(std::string *)(v617 + 48);
                    RIO_MTLX::Element::addChildOfCategory((uint64_t)v1839, (uint64_t)&v1952, (uint64_t)&v1994, &v1943);
                    if (SHIBYTE(v1994.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v1994.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v1952.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v1952.__r_.__value_.__l.__data_);
                    v640 = (uint64_t *)v1943.__r_.__value_.__r.__words[0];
                    v641 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v639);
                    v642 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v617 + 56))(v617);
                    v643 = RIO_MTLX::Element::setAttribute(v640, v641, v642);
                    v644 = (uint64_t *)v1943.__r_.__value_.__r.__words[0];
                    v645 = (__int128 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v643);
                    std::string::basic_string[abi:ne180100]<0>(&v1952, "value");
                    v646 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v1830, (unsigned __int8 *)&v1952);
                    if (v646)
                      v647 = (const std::string *)(v646 + 40);
                    else
                      v647 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
                    RIO_MTLX::Element::setAttribute(v644, v645, v647);
                    if (SHIBYTE(v1952.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v1952.__r_.__value_.__l.__data_);
                    v648 = (std::__shared_weak_count *)v1943.__r_.__value_.__l.__size_;
                    if (!v1943.__r_.__value_.__l.__size_)
                      goto LABEL_1138;
                    v649 = (unint64_t *)(v1943.__r_.__value_.__l.__size_ + 8);
                    do
                      v650 = __ldaxr(v649);
                    while (__stlxr(v650 - 1, v649));
                  }
                  else
                  {
                    if (v629 != 9)
                      goto LABEL_1102;
LABEL_1098:
                    v635 = *(_QWORD *)v628;
                    v636 = *(unsigned __int8 *)(v628 + 8);
                    if (v635 != 0x6574656D61726170 || v636 != 114)
                      goto LABEL_1102;
                    std::string::basic_string[abi:ne180100]<0>(&v1952, "bindparam");
                    if (*(char *)(v617 + 71) < 0)
                      std::string::__init_copy_ctor_external(&v1995, *(const std::string::value_type **)(v617 + 48), *(_QWORD *)(v617 + 56));
                    else
                      v1995 = *(std::string *)(v617 + 48);
                    RIO_MTLX::Element::addChildOfCategory((uint64_t)v1839, (uint64_t)&v1952, (uint64_t)&v1995, &v1943);
                    if (SHIBYTE(v1995.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v1995.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v1952.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v1952.__r_.__value_.__l.__data_);
                    v652 = (uint64_t *)v1943.__r_.__value_.__r.__words[0];
                    v653 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v651);
                    v654 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v617 + 56))(v617);
                    v655 = RIO_MTLX::Element::setAttribute(v652, v653, v654);
                    v656 = (uint64_t *)v1943.__r_.__value_.__r.__words[0];
                    v657 = (__int128 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v655);
                    std::string::basic_string[abi:ne180100]<0>(&v1952, "value");
                    v658 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v1830, (unsigned __int8 *)&v1952);
                    if (v658)
                      v659 = (const std::string *)(v658 + 40);
                    else
                      v659 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
                    RIO_MTLX::Element::setAttribute(v656, v657, v659);
                    if (SHIBYTE(v1952.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v1952.__r_.__value_.__l.__data_);
                    v648 = (std::__shared_weak_count *)v1943.__r_.__value_.__l.__size_;
                    if (!v1943.__r_.__value_.__l.__size_)
                      goto LABEL_1138;
                    v660 = (unint64_t *)(v1943.__r_.__value_.__l.__size_ + 8);
                    do
                      v650 = __ldaxr(v660);
                    while (__stlxr(v650 - 1, v660));
                  }
                  if (!v650)
                  {
                    ((void (*)(std::__shared_weak_count *))v648->__on_zero_shared)(v648);
                    std::__shared_weak_count::__release_weak(v648);
                  }
                }
              }
              else if (v627)
              {
                goto LABEL_1084;
              }
LABEL_1138:
              if (v616)
              {
                v661 = (unint64_t *)&v616->__shared_owners_;
                do
                  v662 = __ldaxr(v661);
                while (__stlxr(v662 - 1, v661));
                if (!v662)
                {
                  ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
                  std::__shared_weak_count::__release_weak(v616);
                }
              }
              v614 += 2;
              if (v614 == (uint64_t *)v615)
                goto LABEL_1144;
            }
            v630 = 0;
LABEL_1122:
            v627 = v630 == 0;
            goto LABEL_1080;
          }
LABEL_1144:
          v1952.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1954;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1952);
          v589 = v1820;
          v550 = v1822;
          v608 = v1825;
        }
        v663 = (std::__shared_weak_count *)v1945.__r_.__value_.__l.__size_;
        if (!v1945.__r_.__value_.__l.__size_)
          goto LABEL_1149;
        v664 = (unint64_t *)(v1945.__r_.__value_.__l.__size_ + 8);
        do
          v665 = __ldaxr(v664);
        while (__stlxr(v665 - 1, v664));
        if (!v665)
        {
          ((void (*)(std::__shared_weak_count *))v663->__on_zero_shared)(v663);
          std::__shared_weak_count::__release_weak(v663);
          if (v608)
          {
LABEL_1150:
            v666 = (unint64_t *)&v608->__shared_owners_;
            do
              v667 = __ldaxr(v666);
            while (__stlxr(v667 - 1, v666));
            if (!v667)
            {
              ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
              std::__shared_weak_count::__release_weak(v608);
            }
          }
        }
        else
        {
LABEL_1149:
          if (v608)
            goto LABEL_1150;
        }
        v607 += 16;
        if (v607 == v1824)
          goto LABEL_1156;
      }
    }
    break;
  }
  *(_QWORD *)&__str = &v2022;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v685 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
  if (*((_QWORD *)&v2021 + 1))
  {
    v686 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
    do
      v687 = __ldaxr(v686);
    while (__stlxr(v687 - 1, v686));
    if (!v687)
    {
      ((void (*)(std::__shared_weak_count *))v685->__on_zero_shared)(v685);
      std::__shared_weak_count::__release_weak(v685);
    }
  }
  *(_QWORD *)&v2021 = (char *)&v2026.__r_.__value_.__l + 16;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
  v688 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v689 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v690 = __ldaxr(v689);
    while (__stlxr(v690 - 1, v689));
    if (!v690)
    {
      ((void (*)(std::__shared_weak_count *))v688->__on_zero_shared)(v688);
      std::__shared_weak_count::__release_weak(v688);
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030.__r_.__value_.__r.__words[2];
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v691 = (std::__shared_weak_count *)v2030.__r_.__value_.__l.__size_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v692 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v693 = __ldaxr(v692);
    while (__stlxr(v693 - 1, v692));
    if (!v693)
    {
      ((void (*)(std::__shared_weak_count *))v691->__on_zero_shared)(v691);
      std::__shared_weak_count::__release_weak(v691);
    }
  }
LABEL_1212:
  v694 = RIO_MTLX::EMPTY_STRING(v2);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)v694, (uint64_t)&v2030);
  v697 = v2030.__r_.__value_.__l.__size_;
  for (n = v2030.__r_.__value_.__r.__words[0]; n != v697; n += 16)
  {
    v698 = *(RIO_MTLX::Output **)n;
    v699 = *(std::__shared_weak_count **)(n + 8);
    *(_QWORD *)&__str = *(_QWORD *)n;
    *((_QWORD *)&__str + 1) = v699;
    if (v699)
    {
      v700 = (unint64_t *)&v699->__shared_owners_;
      do
        v701 = __ldxr(v700);
      while (__stxr(v701 + 1, v700));
      do
        v702 = __ldxr(v700);
      while (__stxr(v702 + 1, v700));
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v698;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v699;
    if (!v698)
      goto LABEL_1278;
    v703 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v695);
    v695 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v698 + 20, v703);
    if (!v695)
      goto LABEL_1278;
    v704 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v695);
    v705 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v698 + 20, v704);
    if (v705)
      v706 = (std::string *)(v705 + 40);
    else
      v706 = (std::string *)RIO_MTLX::EMPTY_STRING(0);
    if (SHIBYTE(v706->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v2026, v706->__r_.__value_.__l.__data_, v706->__r_.__value_.__l.__size_);
    }
    else
    {
      v707 = *(_OWORD *)&v706->__r_.__value_.__l.__data_;
      v2026.__r_.__value_.__r.__words[2] = v706->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = v707;
    }
    *(_OWORD *)&v1954.__r_.__value_.__l.__data_ = 0uLL;
    v708 = HIBYTE(v2026.__r_.__value_.__r.__words[2]);
    if ((v2026.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v708 = v2026.__r_.__value_.__l.__size_;
    if (v708)
    {
      v706 = (std::string *)RIO_MTLX::MULTI_OUTPUT_TYPE_STRING((RIO_MTLX *)v706);
      v709 = HIBYTE(v2026.__r_.__value_.__r.__words[2]);
      if ((v2026.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v710 = HIBYTE(v2026.__r_.__value_.__r.__words[2]);
      else
        v710 = v2026.__r_.__value_.__l.__size_;
      v711 = HIBYTE(v706->__r_.__value_.__r.__words[2]);
      v712 = (char)v711;
      if ((v711 & 0x80u) != 0)
        v711 = v706->__r_.__value_.__l.__size_;
      if (v710 == v711)
      {
        if (v712 >= 0)
          v713 = (const std::string::value_type *)v706;
        else
          v713 = (const std::string::value_type *)v706->__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v2026.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v706 = (std::string *)memcmp(v2026.__r_.__value_.__l.__data_, v713, v2026.__r_.__value_.__l.__size_);
          if (!(_DWORD)v706)
            goto LABEL_1261;
        }
        else
        {
          if (!*((_BYTE *)&v2026.__r_.__value_.__s + 23))
            goto LABEL_1261;
          v714 = &v2026;
          while (v714->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v713)
          {
            v714 = (std::string *)((char *)v714 + 1);
            ++v713;
            if (!--v709)
              goto LABEL_1261;
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v2021, "out");
      RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>((uint64_t)v698, (unsigned __int8 *)&v2021, &v1952);
      v715 = *(_OWORD *)&v1952.__r_.__value_.__l.__data_;
      *(_OWORD *)&v1952.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)&v1954.__r_.__value_.__l.__data_ = v715;
      if (SHIBYTE(v2022) < 0)
      {
        operator delete((void *)v2021);
        if ((_QWORD)v715)
          goto LABEL_1261;
      }
      else if ((_QWORD)v715)
      {
        goto LABEL_1261;
      }
      std::string::basic_string[abi:ne180100]<0>(&v2021, "out");
      v706 = RIO_MTLX::InterfaceElement::addOutput(v698, (uint64_t)&v2021, &v2026, (uint64_t *)&v1952);
      v716 = *(_OWORD *)&v1952.__r_.__value_.__l.__data_;
      *(_OWORD *)&v1952.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)&v1954.__r_.__value_.__l.__data_ = v716;
      if (*((_QWORD *)&v715 + 1))
      {
        v717 = (unint64_t *)(*((_QWORD *)&v715 + 1) + 8);
        do
          v718 = __ldaxr(v717);
        while (__stlxr(v718 - 1, v717));
        if (!v718)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v715 + 1) + 16))(*((_QWORD *)&v715 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v715 + 1));
        }
      }
      v719 = (std::__shared_weak_count *)v1952.__r_.__value_.__l.__size_;
      if (v1952.__r_.__value_.__l.__size_)
      {
        v720 = (unint64_t *)(v1952.__r_.__value_.__l.__size_ + 8);
        do
          v721 = __ldaxr(v720);
        while (__stlxr(v721 - 1, v720));
        if (!v721)
        {
          ((void (*)(std::__shared_weak_count *))v719->__on_zero_shared)(v719);
          std::__shared_weak_count::__release_weak(v719);
        }
      }
      if (SHIBYTE(v2022) < 0)
        operator delete((void *)v2021);
      v698 = (RIO_MTLX::Output *)__p.__r_.__value_.__r.__words[0];
    }
LABEL_1261:
    v722 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v706);
    RIO_MTLX::Element::removeAttribute(v698, v722);
    v724 = (unsigned __int8 *)RIO_MTLX::Output::DEFAULT_INPUT_ATTRIBUTE(v723);
    v725 = (RIO_MTLX::Output *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v698 + 20, v724);
    if (v725)
    {
      v726 = (RIO_MTLX::Output *)((char *)v725 + 40);
    }
    else
    {
      v725 = (RIO_MTLX::Output *)RIO_MTLX::EMPTY_STRING(0);
      v726 = v725;
    }
    v727 = (uint64_t *)v1954.__r_.__value_.__r.__words[0];
    if (!v1954.__r_.__value_.__r.__words[0])
      goto LABEL_1270;
    if (*((char *)v726 + 23) < 0)
    {
      if (!*((_QWORD *)v726 + 1))
        goto LABEL_1270;
LABEL_1269:
      v728 = (__int128 *)RIO_MTLX::Output::DEFAULT_INPUT_ATTRIBUTE(v725);
      v725 = (RIO_MTLX::Output *)RIO_MTLX::Element::setAttribute(v727, v728, (const std::string *)v726);
      goto LABEL_1270;
    }
    if (*((_BYTE *)v726 + 23))
      goto LABEL_1269;
LABEL_1270:
    v729 = (_QWORD *)__p.__r_.__value_.__r.__words[0];
    v730 = (unsigned __int8 *)RIO_MTLX::Output::DEFAULT_INPUT_ATTRIBUTE(v725);
    RIO_MTLX::Element::removeAttribute(v729, v730);
    v731 = (std::__shared_weak_count *)v1954.__r_.__value_.__l.__size_;
    if (v1954.__r_.__value_.__l.__size_)
    {
      v732 = (unint64_t *)(v1954.__r_.__value_.__l.__size_ + 8);
      do
        v733 = __ldaxr(v732);
      while (__stlxr(v733 - 1, v732));
      if (!v733)
      {
        ((void (*)(std::__shared_weak_count *))v731->__on_zero_shared)(v731);
        std::__shared_weak_count::__release_weak(v731);
      }
    }
    if (SHIBYTE(v2026.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v2026.__r_.__value_.__l.__data_);
    v699 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
LABEL_1278:
    if (v699)
    {
      v734 = (unint64_t *)&v699->__shared_owners_;
      do
        v735 = __ldaxr(v734);
      while (__stlxr(v735 - 1, v734));
      if (!v735)
      {
        ((void (*)(std::__shared_weak_count *))v699->__on_zero_shared)(v699);
        std::__shared_weak_count::__release_weak(v699);
      }
    }
    v736 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
    if (*((_QWORD *)&__str + 1))
    {
      v737 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
      do
        v738 = __ldaxr(v737);
      while (__stlxr(v738 - 1, v737));
      if (!v738)
      {
        ((void (*)(std::__shared_weak_count *))v736->__on_zero_shared)(v736);
        std::__shared_weak_count::__release_weak(v736);
      }
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v740 = RIO_MTLX::EMPTY_STRING(v739);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)v740, (uint64_t)&v2030);
  v742 = v2030.__r_.__value_.__l.__size_;
  for (ii = v2030.__r_.__value_.__r.__words[0]; ii != v742; ii += 16)
  {
    v744 = *(unsigned __int8 **)ii;
    v743 = *(std::__shared_weak_count **)(ii + 8);
    v2026.__r_.__value_.__r.__words[0] = *(_QWORD *)ii;
    v2026.__r_.__value_.__l.__size_ = (std::string::size_type)v743;
    if (v743)
    {
      v745 = (unint64_t *)&v743->__shared_owners_;
      do
        v746 = __ldxr(v745);
      while (__stxr(v746 + 1, v745));
    }
    v747 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v744 + 56))(v744);
    v748 = *(char *)(v747 + 23);
    if (v748 < 0)
    {
      if (*(_QWORD *)(v747 + 8) == 7)
      {
        v747 = *(_QWORD *)v747;
LABEL_1298:
        if (*(_DWORD *)v747 == 1718777203 && *(_DWORD *)(v747 + 3) == 1701011814)
          RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, v744 + 48);
      }
    }
    else if (v748 == 7)
    {
      goto LABEL_1298;
    }
    if (v743)
    {
      v750 = (unint64_t *)&v743->__shared_owners_;
      do
        v751 = __ldaxr(v750);
      while (__stlxr(v751 - 1, v750));
      if (!v751)
      {
        ((void (*)(std::__shared_weak_count *))v743->__on_zero_shared)(v743);
        std::__shared_weak_count::__release_weak(v743);
      }
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v753 = RIO_MTLX::EMPTY_STRING(v752);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::GeomInfo>((uint64_t)this, (unsigned __int8 *)v753, (uint64_t)&v2030);
  v755 = v2030.__r_.__value_.__l.__size_;
  for (jj = (uint64_t *)v2030.__r_.__value_.__r.__words[0]; jj != (uint64_t *)v755; jj += 2)
  {
    v757 = *jj;
    v756 = (std::__shared_weak_count *)jj[1];
    *(_QWORD *)&__str = *jj;
    *((_QWORD *)&__str + 1) = v756;
    if (v756)
    {
      v758 = (unint64_t *)&v756->__shared_owners_;
      do
        v759 = __ldxr(v758);
      while (__stxr(v759 + 1, v758));
    }
    std::string::basic_string[abi:ne180100]<0>(&v2021, "geomattr");
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t)&v2026, *(uint64_t **)(v757 + 136), *(uint64_t **)(v757 + 144), (unsigned __int8 *)&v2021);
    if (SHIBYTE(v2022) < 0)
      operator delete((void *)v2021);
    v761 = v2026.__r_.__value_.__l.__size_;
    v760 = v2026.__r_.__value_.__r.__words[0];
    if (v2026.__r_.__value_.__r.__words[0] != v2026.__r_.__value_.__l.__size_)
    {
      do
      {
        v762 = *(std::string **)v760;
        v763 = *(_QWORD *)(v760 + 8);
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)v760;
        __p.__r_.__value_.__l.__size_ = v763;
        if (v763)
        {
          v764 = (unint64_t *)(v763 + 8);
          do
            v765 = __ldxr(v764);
          while (__stxr(v765 + 1, v764));
          v766 = (_QWORD *)__str;
          v1991 = (std::__shared_weak_count *)v763;
          do
            v767 = __ldxr(v764);
          while (__stxr(v767 + 1, v764));
        }
        else
        {
          v766 = (_QWORD *)__str;
          v1991 = 0;
        }
        v1990 = v762;
        std::string::basic_string[abi:ne180100]<0>(&v2021, "geomprop");
        RIO_MTLX::Element::changeChildCategory(v766, &v1990, (uint64_t)&v2021, &v1992);
        v768 = v1993;
        if (v1993)
        {
          v769 = (unint64_t *)&v1993->__shared_owners_;
          do
            v770 = __ldaxr(v769);
          while (__stlxr(v770 - 1, v769));
          if (!v770)
          {
            ((void (*)(std::__shared_weak_count *))v768->__on_zero_shared)(v768);
            std::__shared_weak_count::__release_weak(v768);
          }
        }
        if (SHIBYTE(v2022) < 0)
          operator delete((void *)v2021);
        v771 = v1991;
        if (v1991)
        {
          v772 = (unint64_t *)&v1991->__shared_owners_;
          do
            v773 = __ldaxr(v772);
          while (__stlxr(v773 - 1, v772));
          if (!v773)
          {
            ((void (*)(std::__shared_weak_count *))v771->__on_zero_shared)(v771);
            std::__shared_weak_count::__release_weak(v771);
          }
        }
        v774 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v775 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v776 = __ldaxr(v775);
          while (__stlxr(v776 - 1, v775));
          if (!v776)
          {
            ((void (*)(std::__shared_weak_count *))v774->__on_zero_shared)(v774);
            std::__shared_weak_count::__release_weak(v774);
          }
        }
        v760 += 16;
      }
      while (v760 != v761);
      v756 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
    }
    *(_QWORD *)&v2021 = &v2026;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
    if (v756)
    {
      v777 = (unint64_t *)&v756->__shared_owners_;
      do
        v778 = __ldaxr(v777);
      while (__stlxr(v778 - 1, v777));
      if (!v778)
      {
        ((void (*)(std::__shared_weak_count *))v756->__on_zero_shared)(v756);
        std::__shared_weak_count::__release_weak(v756);
      }
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v2030);
  *(_QWORD *)&v2032[8] = 0;
  *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)&v2030.__r_.__value_.__l.__data_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v779 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v780 = __ldxr(v779);
    while (__stxr(v780 + 1, v779));
  }
  v2027 = 0;
  v2026.__r_.__value_.__r.__words[2] = 0;
  v2028 = 0;
  v781 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v2026.__r_.__value_.__s.__data_[16], (_QWORD *)v2030.__r_.__value_.__r.__words[2], (_QWORD *)v2031, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2031 - v2030.__r_.__value_.__r.__words[2]) >> 3));
  v2029 = *(_OWORD *)v2032;
  RIO_MTLX::NULL_TREE_ITERATOR((RIO_MTLX *)v781);
  v2021 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1))
  {
    v782 = (unint64_t *)(*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8);
    do
      v783 = __ldxr(v782);
    while (__stxr(v783 + 1, v782));
  }
  v2023 = 0;
  v2022 = 0;
  v2024 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)&v2022, (_QWORD *)qword_255E54218, unk_255E54220, 0xAAAAAAAAAAAAAAABLL * ((unk_255E54220 - qword_255E54218) >> 3));
  v2025 = xmmword_255E54230;
  while (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v2026, (uint64_t)&v2021))
  {
    v784 = v2026.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v1954.__r_.__value_.__l.__data_ = *(_OWORD *)&v2026.__r_.__value_.__l.__data_;
    if (v2026.__r_.__value_.__l.__size_)
    {
      v785 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
      do
        v786 = __ldxr(v785);
      while (__stxr(v786 + 1, v785));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::Node>(v784, &v1952);
    if (v1952.__r_.__value_.__r.__words[0])
    {
      v787 = (std::string *)(v1952.__r_.__value_.__r.__words[0] + 24);
      v788 = *(char *)(v1952.__r_.__value_.__r.__words[0] + 47);
      if (v788 < 0)
      {
        if (*(_QWORD *)(v1952.__r_.__value_.__r.__words[0] + 32) != 13)
          goto LABEL_1370;
        v789 = (uint64_t *)v787->__r_.__value_.__r.__words[0];
      }
      else
      {
        v789 = (uint64_t *)(v1952.__r_.__value_.__r.__words[0] + 24);
        if (v788 != 13)
          goto LABEL_1370;
      }
      v790 = *v789;
      v791 = *(uint64_t *)((char *)v789 + 5);
      if (v790 == 0x727474616D6F6567 && v791 == 0x65756C6176727474)
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "geompropvalue");
        std::string::operator=(v787, (const std::string *)&__str);
        if (SBYTE7(__str_16) < 0)
          operator delete((void *)__str);
        v799 = v1952.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&__str, "attrname");
        v800 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v799 + 160), (unsigned __int8 *)&__str);
        if (SBYTE7(__str_16) < 0)
          operator delete((void *)__str);
        if (v800)
        {
          v801 = (uint64_t *)v1952.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__str, "geomprop");
          v802 = v1952.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__p, "attrname");
          v803 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v802 + 160), (unsigned __int8 *)&__p);
          if (v803)
            v804 = (const std::string *)(v803 + 40);
          else
            v804 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
          RIO_MTLX::Element::setAttribute(v801, &__str, v804);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SBYTE7(__str_16) < 0)
            operator delete((void *)__str);
          v805 = (_QWORD *)v1952.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__str, "attrname");
          RIO_MTLX::Element::removeAttribute(v805, (unsigned __int8 *)&__str);
          if (SBYTE7(__str_16) < 0)
            operator delete((void *)__str);
        }
      }
    }
LABEL_1370:
    v793 = (std::__shared_weak_count *)v1952.__r_.__value_.__l.__size_;
    if (v1952.__r_.__value_.__l.__size_)
    {
      v794 = (unint64_t *)(v1952.__r_.__value_.__l.__size_ + 8);
      do
        v795 = __ldaxr(v794);
      while (__stlxr(v795 - 1, v794));
      if (!v795)
      {
        ((void (*)(std::__shared_weak_count *))v793->__on_zero_shared)(v793);
        std::__shared_weak_count::__release_weak(v793);
      }
    }
    v796 = (std::__shared_weak_count *)v1954.__r_.__value_.__l.__size_;
    if (v1954.__r_.__value_.__l.__size_)
    {
      v797 = (unint64_t *)(v1954.__r_.__value_.__l.__size_ + 8);
      do
        v798 = __ldaxr(v797);
      while (__stlxr(v798 - 1, v797));
      if (!v798)
      {
        ((void (*)(std::__shared_weak_count *))v796->__on_zero_shared)(v796);
        std::__shared_weak_count::__release_weak(v796);
      }
    }
    RIO_MTLX::TreeIterator::operator++(&v2026);
  }
  *(_QWORD *)&__str = &v2022;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v806 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
  if (*((_QWORD *)&v2021 + 1))
  {
    v807 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
    do
      v808 = __ldaxr(v807);
    while (__stlxr(v808 - 1, v807));
    if (!v808)
    {
      ((void (*)(std::__shared_weak_count *))v806->__on_zero_shared)(v806);
      std::__shared_weak_count::__release_weak(v806);
    }
  }
  *(_QWORD *)&v2021 = (char *)&v2026.__r_.__value_.__l + 16;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
  v809 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v810 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v811 = __ldaxr(v810);
    while (__stlxr(v811 - 1, v810));
    if (!v811)
    {
      ((void (*)(std::__shared_weak_count *))v809->__on_zero_shared)(v809);
      std::__shared_weak_count::__release_weak(v809);
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030.__r_.__value_.__r.__words[2];
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v812 = (std::__shared_weak_count *)v2030.__r_.__value_.__l.__size_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v813 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v814 = __ldaxr(v813);
    while (__stlxr(v814 - 1, v813));
    if (!v814)
    {
      ((void (*)(std::__shared_weak_count *))v812->__on_zero_shared)(v812);
      std::__shared_weak_count::__release_weak(v812);
    }
  }
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v2030);
  *(_QWORD *)&v2032[8] = 0;
  *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)&v2030.__r_.__value_.__l.__data_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v815 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v816 = __ldxr(v815);
    while (__stxr(v816 + 1, v815));
  }
  v817 = &v2026.__r_.__value_.__s.__data_[16];
  v2027 = 0;
  v2026.__r_.__value_.__r.__words[2] = 0;
  v2028 = 0;
  v818 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v2026.__r_.__value_.__s.__data_[16], (_QWORD *)v2030.__r_.__value_.__r.__words[2], (_QWORD *)v2031, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2031 - v2030.__r_.__value_.__r.__words[2]) >> 3));
  v2029 = *(_OWORD *)v2032;
  RIO_MTLX::NULL_TREE_ITERATOR((RIO_MTLX *)v818);
  v2021 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1))
  {
    v819 = (unint64_t *)(*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8);
    do
      v820 = __ldxr(v819);
    while (__stxr(v820 + 1, v819));
  }
  v821 = &v2022;
  v2023 = 0;
  v2022 = 0;
  v2024 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)&v2022, (_QWORD *)qword_255E54218, unk_255E54220, 0xAAAAAAAAAAAAAAABLL * ((unk_255E54220 - qword_255E54218) >> 3));
  v1 = (std::string::size_type)&v2030.__r_.__value_.__r.__words[2];
  v2025 = xmmword_255E54230;
  while (2)
  {
    if (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v2026, (uint64_t)&v2021))
    {
      v822 = v2026.__r_.__value_.__r.__words[0];
      *(_OWORD *)v1949 = *(_OWORD *)&v2026.__r_.__value_.__l.__data_;
      if (v2026.__r_.__value_.__l.__size_)
      {
        v823 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
        do
          v824 = __ldxr(v823);
        while (__stxr(v824 + 1, v823));
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Node>(v822, &v1947);
      v826 = v1947.__r_.__value_.__r.__words[0];
      if (v1947.__r_.__value_.__r.__words[0])
      {
        v827 = v1947.__r_.__value_.__r.__words[0] + 24;
        if (*(char *)(v1947.__r_.__value_.__r.__words[0] + 47) < 0)
        {
          if (*(_QWORD *)(v1947.__r_.__value_.__r.__words[0] + 32) != 6)
            goto LABEL_1431;
          v829 = *(int **)v827;
        }
        else
        {
          v828 = *(unsigned __int8 *)(v1947.__r_.__value_.__r.__words[0] + 47);
          v829 = (int *)(v1947.__r_.__value_.__r.__words[0] + 24);
          if (v828 != 6)
            goto LABEL_1432;
        }
        v830 = *v829;
        v831 = *((unsigned __int16 *)v829 + 2);
        if (v830 != 1702260329 || v831 != 29810)
          goto LABEL_1431;
        v844 = (unsigned __int8 *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v1947.__r_.__value_.__l.__data_
                                                                                    + 56))(v1947.__r_.__value_.__r.__words[0]);
        RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE();
        v845 = v844[23];
        if ((v845 & 0x80u) == 0)
          v846 = v844[23];
        else
          v846 = *((_QWORD *)v844 + 1);
        v847 = byte_255E53F2F;
        if (byte_255E53F2F < 0)
          v847 = qword_255E53F20;
        if (v846 != v847)
          goto LABEL_1594;
        if (byte_255E53F2F >= 0)
          v848 = &RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v;
        else
          v848 = (uint64_t *)RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v;
        if ((v845 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v844, v848, *((_QWORD *)v844 + 1)))
          {
LABEL_1594:
            v904 = (unsigned __int8 *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v1947.__r_.__value_.__l.__data_
                                                                                        + 56))(v1947.__r_.__value_.__r.__words[0]);
            v825 = RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE();
            v905 = v904[23];
            if ((v905 & 0x80u) == 0)
              v906 = v904[23];
            else
              v906 = *((_QWORD *)v904 + 1);
            v907 = byte_255E53F5F;
            if (byte_255E53F5F < 0)
              v907 = qword_255E53F50;
            if (v906 != v907)
              goto LABEL_1431;
            if (byte_255E53F5F >= 0)
              v908 = &RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v;
            else
              v908 = (uint64_t *)RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v;
            if ((v905 & 0x80) != 0)
            {
              v825 = (uint64_t *)memcmp(*(const void **)v904, v908, *((_QWORD *)v904 + 1));
              if ((_DWORD)v825)
                goto LABEL_1431;
            }
            else if (v904[23])
            {
              while (*v904 == *(unsigned __int8 *)v908)
              {
                ++v904;
                v908 = (uint64_t *)((char *)v908 + 1);
                if (!--v905)
                  goto LABEL_1609;
              }
LABEL_1431:
              v828 = *(unsigned __int8 *)(v826 + 47);
              if ((*(char *)(v826 + 47) & 0x80000000) == 0)
              {
LABEL_1432:
                v833 = 0;
                v834 = (int *)(v826 + 24);
                switch(v828)
                {
                  case 6:
                    if (*(_DWORD *)v827 == 1635020658 && *(_WORD *)(v826 + 28) == 25972)
                      goto LABEL_1445;
                    goto LABEL_1814;
                  case 7:
                    if (*(_DWORD *)v827 == 1886220131 && *(_DWORD *)(v826 + 27) == 1701994864)
                      goto LABEL_1510;
                    v828 = 7;
                    v850 = (int *)(v826 + 24);
                    goto LABEL_1504;
                  case 8:
                    goto LABEL_1532;
                  case 14:
                    if (*(_QWORD *)v827 == 0x726F66736E617274 && *(_QWORD *)(v826 + 30) == 0x746E696F706D726FLL)
                      goto LABEL_1536;
                    goto LABEL_1814;
                  case 15:
                    if (*(_QWORD *)v827 == 0x726F66736E617274 && *(_QWORD *)(v826 + 31) == 0x726F746365766D72)
                      goto LABEL_1536;
                    if (*(_QWORD *)v827 == 0x726F66736E617274 && *(_QWORD *)(v826 + 31) == 0x6C616D726F6E6D72)
                      goto LABEL_1536;
                    goto LABEL_1814;
                  default:
                    goto LABEL_1814;
                }
              }
              switch(*(_QWORD *)(v826 + 32))
              {
                case 6:
                  if (**(_DWORD **)v827 != 1635020658 || *(_WORD *)(*(_QWORD *)v827 + 4) != 25972)
                    goto LABEL_1530;
LABEL_1445:
                  v837 = (std::string *)v1947.__r_.__value_.__r.__words[0];
                  v838 = (unsigned __int8 *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v1947.__r_.__value_.__l.__data_
                                                                                              + 56))(v1947.__r_.__value_.__r.__words[0]);
                  RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE();
                  v839 = v838[23];
                  if ((v839 & 0x80u) == 0)
                    v840 = v838[23];
                  else
                    v840 = *((_QWORD *)v838 + 1);
                  v841 = byte_255E53E9F;
                  if (byte_255E53E9F < 0)
                    v841 = qword_255E53E90;
                  v842 = "rotate3d";
                  if (v840 != v841)
                    goto LABEL_1762;
                  if (byte_255E53E9F >= 0)
                    v843 = &RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v;
                  else
                    v843 = (uint64_t *)RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v;
                  if ((v839 & 0x80) != 0)
                  {
                    v947 = memcmp(*(const void **)v838, v843, *((_QWORD *)v838 + 1));
                    v842 = "rotate3d";
                    if (v947)
                      goto LABEL_1762;
                  }
                  else if (v838[23])
                  {
                    while (*v838 == *(unsigned __int8 *)v843)
                    {
                      ++v838;
                      v843 = (uint64_t *)((char *)v843 + 1);
                      if (!--v839)
                        goto LABEL_1683;
                    }
                    v842 = "rotate3d";
LABEL_1762:
                    std::string::basic_string[abi:ne180100]<0>(&__str, v842);
                    std::string::operator=(v837 + 1, (const std::string *)&__str);
                    goto LABEL_1763;
                  }
LABEL_1683:
                  v842 = "rotate2d";
                  goto LABEL_1762;
                case 7:
                  v850 = *(int **)v827;
                  if (**(_DWORD **)v827 == 1886220131 && *(_DWORD *)(*(_QWORD *)v827 + 3) == 1701994864)
                  {
LABEL_1510:
                    v859 = (std::string *)v1947.__r_.__value_.__r.__words[0];
                    std::string::basic_string[abi:ne180100]<0>(&__str, "ifgreatereq");
                    std::string::operator=(v859 + 1, (const std::string *)&__str);
                    if (SBYTE7(__str_16) < 0)
                      operator delete((void *)__str);
                    v860 = v1947.__r_.__value_.__r.__words[0];
                    std::string::basic_string[abi:ne180100]<0>(&__str, "intest");
                    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(v860, (unsigned __int8 *)&__str, &__p);
                    if (SBYTE7(__str_16) < 0)
                      operator delete((void *)__str);
                    v861 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    if (__p.__r_.__value_.__r.__words[0])
                    {
                      std::string::basic_string[abi:ne180100]<0>(&__str, "value1");
                      RIO_MTLX::Element::setName(v861, (std::string *)&__str);
                      if (SBYTE7(__str_16) < 0)
                        operator delete((void *)__str);
                    }
                    v862 = v1947.__r_.__value_.__r.__words[0];
                    std::string::basic_string[abi:ne180100]<0>(&__str, "cutoff");
                    v863 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v862 + 96), (unsigned __int8 *)&__str);
                    if (v863)
                    {
                      v865 = (std::string *)*((_QWORD *)v863 + 5);
                      v864 = (std::__shared_weak_count *)*((_QWORD *)v863 + 6);
                      v1954.__r_.__value_.__r.__words[0] = (std::string::size_type)v865;
                      v1954.__r_.__value_.__l.__size_ = (std::string::size_type)v864;
                      if (v864)
                      {
                        v866 = (unint64_t *)&v864->__shared_owners_;
                        do
                          v867 = __ldxr(v866);
                        while (__stxr(v867 + 1, v866));
                      }
                    }
                    else
                    {
                      v864 = 0;
                      v865 = 0;
                      *(_OWORD *)&v1954.__r_.__value_.__l.__data_ = 0uLL;
                    }
                    if (SBYTE7(__str_16) < 0)
                    {
                      operator delete((void *)__str);
                      if (!v865)
                        goto LABEL_1637;
                    }
                    else if (!v865)
                    {
                      goto LABEL_1637;
                    }
                    v910 = (_QWORD *)v1947.__r_.__value_.__r.__words[0];
                    v1988 = v865;
                    v1989 = v864;
                    if (v864)
                    {
                      v911 = (unint64_t *)&v864->__shared_owners_;
                      do
                        v912 = __ldxr(v911);
                      while (__stxr(v912 + 1, v911));
                    }
                    std::string::basic_string[abi:ne180100]<0>(&__str, "input");
                    RIO_MTLX::Element::changeChildCategory(v910, &v1988, (uint64_t)&__str, (uint64_t *)&v1952);
                    v913 = *(_OWORD *)&v1952.__r_.__value_.__l.__data_;
                    *(_OWORD *)&v1952.__r_.__value_.__l.__data_ = 0uLL;
                    *(_OWORD *)&v1954.__r_.__value_.__l.__data_ = v913;
                    if (v864)
                    {
                      v914 = (unint64_t *)&v864->__shared_owners_;
                      do
                        v915 = __ldaxr(v914);
                      while (__stlxr(v915 - 1, v914));
                      if (!v915)
                      {
                        ((void (*)(std::__shared_weak_count *))v864->__on_zero_shared)(v864);
                        std::__shared_weak_count::__release_weak(v864);
                      }
                    }
                    v916 = (std::__shared_weak_count *)v1952.__r_.__value_.__l.__size_;
                    if (v1952.__r_.__value_.__l.__size_)
                    {
                      v917 = (unint64_t *)(v1952.__r_.__value_.__l.__size_ + 8);
                      do
                        v918 = __ldaxr(v917);
                      while (__stlxr(v918 - 1, v917));
                      if (!v918)
                      {
                        ((void (*)(std::__shared_weak_count *))v916->__on_zero_shared)(v916);
                        std::__shared_weak_count::__release_weak(v916);
                      }
                    }
                    if (SBYTE7(__str_16) < 0)
                      operator delete((void *)__str);
                    v919 = v1989;
                    if (v1989)
                    {
                      v920 = (unint64_t *)&v1989->__shared_owners_;
                      do
                        v921 = __ldaxr(v920);
                      while (__stlxr(v921 - 1, v920));
                      if (!v921)
                      {
                        ((void (*)(std::__shared_weak_count *))v919->__on_zero_shared)(v919);
                        std::__shared_weak_count::__release_weak(v919);
                      }
                    }
                    v922 = (std::string *)v1954.__r_.__value_.__r.__words[0];
                    std::string::basic_string[abi:ne180100]<0>(&__str, "value2");
                    RIO_MTLX::Element::setName(v922, (std::string *)&__str);
                    if (SBYTE7(__str_16) < 0)
                      operator delete((void *)__str);
LABEL_1637:
                    v923 = v1947.__r_.__value_.__r.__words[0];
                    std::string::basic_string[abi:ne180100]<0>(&__str, "in1");
                    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(v923, (unsigned __int8 *)&__str, &v1952);
                    if (SBYTE7(__str_16) < 0)
                      operator delete((void *)__str);
                    v924 = v1947.__r_.__value_.__r.__words[0];
                    std::string::basic_string[abi:ne180100]<0>(&__str, "in2");
                    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(v924, (unsigned __int8 *)&__str, &v1945);
                    if (SBYTE7(__str_16) < 0)
                      operator delete((void *)__str);
                    v925 = (std::string *)v1952.__r_.__value_.__r.__words[0];
                    if (v1952.__r_.__value_.__r.__words[0] && v1945.__r_.__value_.__r.__words[0])
                    {
                      std::string::basic_string[abi:ne180100]<0>(v1986, "temp");
                      RIO_MTLX::Element::createValidChildName((uint64_t)this, (uint64_t)v1986, (uint64_t)&__str);
                      RIO_MTLX::Element::setName(v925, (std::string *)&__str);
                      if (SBYTE7(__str_16) < 0)
                        operator delete((void *)__str);
                      if (v1987 < 0)
                        operator delete(v1986[0]);
                      v926 = (std::string *)v1945.__r_.__value_.__r.__words[0];
                      std::string::basic_string[abi:ne180100]<0>(&__str, "in1");
                      RIO_MTLX::Element::setName(v926, (std::string *)&__str);
                      if (SBYTE7(__str_16) < 0)
                        operator delete((void *)__str);
                      v927 = (std::string *)v1952.__r_.__value_.__r.__words[0];
                      std::string::basic_string[abi:ne180100]<0>(&__str, "in2");
                      RIO_MTLX::Element::setName(v927, (std::string *)&__str);
                      if (SBYTE7(__str_16) < 0)
                        operator delete((void *)__str);
                    }
                    v928 = (std::__shared_weak_count *)v1945.__r_.__value_.__l.__size_;
                    if (v1945.__r_.__value_.__l.__size_)
                    {
                      v929 = (unint64_t *)(v1945.__r_.__value_.__l.__size_ + 8);
                      do
                        v930 = __ldaxr(v929);
                      while (__stlxr(v930 - 1, v929));
                      if (!v930)
                      {
                        ((void (*)(std::__shared_weak_count *))v928->__on_zero_shared)(v928);
                        std::__shared_weak_count::__release_weak(v928);
                      }
                    }
                    v931 = (std::__shared_weak_count *)v1952.__r_.__value_.__l.__size_;
                    if (v1952.__r_.__value_.__l.__size_)
                    {
                      v932 = (unint64_t *)(v1952.__r_.__value_.__l.__size_ + 8);
                      do
                        v933 = __ldaxr(v932);
                      while (__stlxr(v933 - 1, v932));
                      if (!v933)
                      {
                        ((void (*)(std::__shared_weak_count *))v931->__on_zero_shared)(v931);
                        std::__shared_weak_count::__release_weak(v931);
                      }
                    }
                    v934 = (std::__shared_weak_count *)v1954.__r_.__value_.__l.__size_;
                    if (v1954.__r_.__value_.__l.__size_)
                    {
                      v935 = (unint64_t *)(v1954.__r_.__value_.__l.__size_ + 8);
                      do
                        v936 = __ldaxr(v935);
                      while (__stlxr(v936 - 1, v935));
                      if (!v936)
                      {
                        ((void (*)(std::__shared_weak_count *))v934->__on_zero_shared)(v934);
                        std::__shared_weak_count::__release_weak(v934);
                      }
                    }
                    v937 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                    if (__p.__r_.__value_.__l.__size_)
                    {
                      v938 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                      do
                        v939 = __ldaxr(v938);
                      while (__stlxr(v939 - 1, v938));
LABEL_1812:
                      if (!v939)
                      {
                        ((void (*)(std::__shared_weak_count *))v937->__on_zero_shared)(v937);
                        std::__shared_weak_count::__release_weak(v937);
                      }
                      goto LABEL_1814;
                    }
                    goto LABEL_1814;
                  }
LABEL_1504:
                  v856 = *v850;
                  v857 = *(int *)((char *)v850 + 3);
                  if (v856 == 1651339107 && v857 == 1701734754)
                  {
                    v894 = v1947.__r_.__value_.__r.__words[0];
                    std::string::basic_string[abi:ne180100]<0>(&__str, "in4");
                    v895 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v894 + 96), (unsigned __int8 *)&__str);
                    if (v895)
                    {
                      v897 = *((_QWORD *)v895 + 5);
                      v896 = (std::__shared_weak_count *)*((_QWORD *)v895 + 6);
                      if (v896)
                      {
                        v898 = (unint64_t *)&v896->__shared_owners_;
                        do
                          v899 = __ldxr(v898);
                        while (__stxr(v899 + 1, v898));
                        do
                          v900 = __ldaxr(v898);
                        while (__stlxr(v900 - 1, v898));
                        if (!v900)
                        {
                          ((void (*)(std::__shared_weak_count *))v896->__on_zero_shared)(v896);
                          std::__shared_weak_count::__release_weak(v896);
                        }
                      }
                    }
                    else
                    {
                      v897 = 0;
                    }
                    if (SBYTE7(__str_16) < 0)
                      operator delete((void *)__str);
                    v940 = (std::string *)v1947.__r_.__value_.__r.__words[0];
                    if (v897)
                    {
                      std::string::basic_string[abi:ne180100]<0>(&__str, "combine4");
                      std::string::operator=(v940 + 1, (const std::string *)&__str);
                    }
                    else
                    {
                      std::string::basic_string[abi:ne180100]<0>(&__str, "in3");
                      v941 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v940[4].__r_.__value_.__r.__words, (unsigned __int8 *)&__str);
                      if (v941)
                      {
                        v943 = *((_QWORD *)v941 + 5);
                        v942 = (std::__shared_weak_count *)*((_QWORD *)v941 + 6);
                        if (v942)
                        {
                          v944 = (unint64_t *)&v942->__shared_owners_;
                          do
                            v945 = __ldxr(v944);
                          while (__stxr(v945 + 1, v944));
                          do
                            v946 = __ldaxr(v944);
                          while (__stlxr(v946 - 1, v944));
                          if (!v946)
                          {
                            ((void (*)(std::__shared_weak_count *))v942->__on_zero_shared)(v942);
                            std::__shared_weak_count::__release_weak(v942);
                          }
                        }
                      }
                      else
                      {
                        v943 = 0;
                      }
                      if (SBYTE7(__str_16) < 0)
                        operator delete((void *)__str);
                      v996 = (std::string *)v1947.__r_.__value_.__r.__words[0];
                      if (v943)
                        std::string::basic_string[abi:ne180100]<0>(&__str, "combine3");
                      else
                        std::string::basic_string[abi:ne180100]<0>(&__str, "combine2");
                      std::string::operator=(v996 + 1, (const std::string *)&__str);
                    }
                    goto LABEL_1763;
                  }
                  if ((v828 & 0x80) == 0)
                    goto LABEL_1814;
LABEL_1530:
                  if (*(_QWORD *)(v826 + 32) == 8)
                  {
                    v834 = *(int **)v827;
                    v833 = 1;
LABEL_1532:
                    if (*(_QWORD *)v834 == 0x6574617261706573)
                    {
                      v880 = v1947.__r_.__value_.__r.__words[0];
                      std::string::basic_string[abi:ne180100]<0>(&__str, "in");
                      RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(v880, (unsigned __int8 *)&__str, &__p);
                      if (SBYTE7(__str_16) < 0)
                        operator delete((void *)__str);
                      if (!__p.__r_.__value_.__r.__words[0])
                        goto LABEL_1809;
                      v881 = (unsigned __int8 *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_
                                                                                                  + 56))(__p.__r_.__value_.__r.__words[0]);
                      RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE();
                      v882 = v881[23];
                      if ((v882 & 0x80u) == 0)
                        v883 = v881[23];
                      else
                        v883 = *((_QWORD *)v881 + 1);
                      v884 = byte_255E53EFF;
                      if (byte_255E53EFF < 0)
                        v884 = qword_255E53EF0;
                      if (v883 != v884)
                        goto LABEL_1746;
                      if (byte_255E53EFF >= 0)
                        v885 = &RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v;
                      else
                        v885 = (uint64_t *)RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v;
                      if ((v882 & 0x80) != 0)
                      {
                        if (memcmp(*(const void **)v881, v885, *((_QWORD *)v881 + 1)))
                          goto LABEL_1746;
                        goto LABEL_1781;
                      }
                      if (!v881[23])
                        goto LABEL_1781;
                      v886 = v881;
                      while (*v886 == *(unsigned __int8 *)v885)
                      {
                        ++v886;
                        v885 = (uint64_t *)((char *)v885 + 1);
                        if (!--v882)
                          goto LABEL_1781;
                      }
LABEL_1746:
                      RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE();
                      v985 = v881[23];
                      if ((v985 & 0x80u) == 0)
                        v986 = v881[23];
                      else
                        v986 = *((_QWORD *)v881 + 1);
                      v987 = byte_255E53E6F;
                      if (byte_255E53E6F < 0)
                        v987 = qword_255E53E60;
                      if (v986 == v987)
                      {
                        if (byte_255E53E6F >= 0)
                          v988 = &RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v;
                        else
                          v988 = (uint64_t *)RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v;
                        if ((v985 & 0x80) != 0)
                        {
                          if (memcmp(*(const void **)v881, v988, *((_QWORD *)v881 + 1)))
                            goto LABEL_1766;
                        }
                        else if (v881[23])
                        {
                          v989 = v881;
                          while (*v989 == *(unsigned __int8 *)v988)
                          {
                            ++v989;
                            v988 = (uint64_t *)((char *)v988 + 1);
                            if (!--v985)
                              goto LABEL_1781;
                          }
                          goto LABEL_1766;
                        }
LABEL_1781:
                        v995 = (std::string *)v1947.__r_.__value_.__r.__words[0];
                        std::string::basic_string[abi:ne180100]<0>(&__str, "separate4");
                        std::string::operator=(v995 + 1, (const std::string *)&__str);
LABEL_1807:
                        if (SBYTE7(__str_16) < 0)
                          operator delete((void *)__str);
LABEL_1809:
                        v937 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                        if (!__p.__r_.__value_.__l.__size_)
                          goto LABEL_1814;
                        v1003 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                        do
                          v939 = __ldaxr(v1003);
                        while (__stlxr(v939 - 1, v1003));
                        goto LABEL_1812;
                      }
LABEL_1766:
                      RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE();
                      v990 = v881[23];
                      if ((v990 & 0x80u) == 0)
                        v991 = v881[23];
                      else
                        v991 = *((_QWORD *)v881 + 1);
                      v992 = byte_255E53ECF;
                      if (byte_255E53ECF < 0)
                        v992 = qword_255E53EC0;
                      if (v991 == v992)
                      {
                        if (byte_255E53ECF >= 0)
                          v993 = &RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v;
                        else
                          v993 = (uint64_t *)RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v;
                        if ((v990 & 0x80) != 0)
                        {
                          if (memcmp(*(const void **)v881, v993, *((_QWORD *)v881 + 1)))
                            goto LABEL_1790;
                        }
                        else if (v881[23])
                        {
                          v994 = v881;
                          while (*v994 == *(unsigned __int8 *)v993)
                          {
                            ++v994;
                            v993 = (uint64_t *)((char *)v993 + 1);
                            if (!--v990)
                              goto LABEL_1806;
                          }
                          goto LABEL_1790;
                        }
LABEL_1806:
                        v1002 = (std::string *)v1947.__r_.__value_.__r.__words[0];
                        std::string::basic_string[abi:ne180100]<0>(&__str, "separate3");
                        std::string::operator=(v1002 + 1, (const std::string *)&__str);
                        goto LABEL_1807;
                      }
LABEL_1790:
                      RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE();
                      v997 = v881[23];
                      if ((v997 & 0x80u) == 0)
                        v998 = v881[23];
                      else
                        v998 = *((_QWORD *)v881 + 1);
                      v999 = byte_255E53E3F;
                      if (byte_255E53E3F < 0)
                        v999 = qword_255E53E30;
                      if (v998 == v999)
                      {
                        if (byte_255E53E3F >= 0)
                          v1000 = &RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v;
                        else
                          v1000 = (uint64_t *)RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v;
                        if ((v997 & 0x80) != 0)
                        {
                          if (!memcmp(*(const void **)v881, v1000, *((_QWORD *)v881 + 1)))
                            goto LABEL_1806;
                        }
                        else
                        {
                          if (!v881[23])
                            goto LABEL_1806;
                          while (*v881 == *(unsigned __int8 *)v1000)
                          {
                            ++v881;
                            v1000 = (uint64_t *)((char *)v1000 + 1);
                            if (!--v997)
                              goto LABEL_1806;
                          }
                        }
                      }
                      v1001 = (std::string *)v1947.__r_.__value_.__r.__words[0];
                      std::string::basic_string[abi:ne180100]<0>(&__str, "separate2");
                      std::string::operator=(v1001 + 1, (const std::string *)&__str);
                      goto LABEL_1807;
                    }
                    if (v833)
                    {
                      if (*(_QWORD *)(v826 + 32) != 8)
                        goto LABEL_1814;
                      v827 = *(_QWORD *)v827;
                    }
                    else if (v828 != 8)
                    {
                      goto LABEL_1814;
                    }
                    if (*(_QWORD *)v827 == 0x706F72646B636162)
                    {
                      if (*(char *)(v1947.__r_.__value_.__r.__words[0] + 71) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)(v1947.__r_.__value_.__r.__words[0] + 48), *(_QWORD *)(v1947.__r_.__value_.__r.__words[0] + 56));
                      }
                      else
                      {
                        __str = *(_OWORD *)(v1947.__r_.__value_.__r.__words[0] + 48);
                        *(_QWORD *)&__str_16 = *(_QWORD *)(v1947.__r_.__value_.__r.__words[0] + 64);
                      }
                      v948 = BYTE7(__str_16);
                      if (SBYTE7(__str_16) < 0)
                        v948 = *((_QWORD *)&__str + 1);
                      if (!v948)
                      {
                        v949 = (char *)RIO_MTLX::Backdrop::CATEGORY((RIO_MTLX::Backdrop *)v825);
                        v950 = v949;
                        if (v949[23] >= 0)
                          v951 = v949[23];
                        else
                          v951 = *((_QWORD *)v949 + 1);
                        std::string::basic_string[abi:ne180100]((uint64_t)&v1954, v951 + 1);
                        if ((v1954.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v952 = &v1954;
                        else
                          v952 = (std::string *)v1954.__r_.__value_.__r.__words[0];
                        if (v951)
                        {
                          if (v950[23] >= 0)
                            v953 = v950;
                          else
                            v953 = *(char **)v950;
                          memmove(v952, v953, v951);
                        }
                        *(_WORD *)((char *)&v952->__r_.__value_.__l.__data_ + v951) = 49;
                        RIO_MTLX::Element::createValidChildName((uint64_t)this, (uint64_t)&v1954, (uint64_t)&__p);
                        if (SBYTE7(__str_16) < 0)
                          operator delete((void *)__str);
                        __str = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                        *(_QWORD *)&__str_16 = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
                        __p.__r_.__value_.__s.__data_[0] = 0;
                        if (SHIBYTE(v1954.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v1954.__r_.__value_.__l.__data_);
                      }
                      std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v1952, this + 1);
                      v954 = operator new(0x118uLL);
                      v954[1] = 0;
                      v954[2] = 0;
                      *v954 = &off_24FDE3FB8;
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v1952.__r_.__value_.__l.__data_;
                      *(_OWORD *)&v1952.__r_.__value_.__l.__data_ = 0uLL;
                      RIO_MTLX::Backdrop::Backdrop((RIO_MTLX::Backdrop *)(v954 + 3), (uint64_t *)&__p, (uint64_t)&__str);
                      v955 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                      if (__p.__r_.__value_.__l.__size_)
                      {
                        v956 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                        do
                          v957 = __ldaxr(v956);
                        while (__stlxr(v957 - 1, v956));
                        if (!v957)
                        {
                          ((void (*)(std::__shared_weak_count *))v955->__on_zero_shared)(v955);
                          std::__shared_weak_count::__release_weak(v955);
                        }
                      }
                      v1945.__r_.__value_.__r.__words[0] = (std::string::size_type)(v954 + 3);
                      v1945.__r_.__value_.__l.__size_ = (std::string::size_type)v954;
                      std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v1945, v954 + 4, (uint64_t)(v954 + 3));
                      v958 = (std::__shared_weak_count *)v1952.__r_.__value_.__l.__size_;
                      if (v1952.__r_.__value_.__l.__size_)
                      {
                        v959 = (unint64_t *)(v1952.__r_.__value_.__l.__size_ + 8);
                        do
                          v960 = __ldaxr(v959);
                        while (__stlxr(v960 - 1, v959));
                        if (!v960)
                        {
                          ((void (*)(std::__shared_weak_count *))v958->__on_zero_shared)(v958);
                          std::__shared_weak_count::__release_weak(v958);
                        }
                      }
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v1945.__r_.__value_.__l.__data_;
                      if (v1945.__r_.__value_.__l.__size_)
                      {
                        v961 = (unint64_t *)(v1945.__r_.__value_.__l.__size_ + 8);
                        do
                          v962 = __ldxr(v961);
                        while (__stxr(v962 + 1, v961));
                      }
                      ((void (*)(uint64_t **, std::string *))(*this)[5])(this, &__p);
                      v963 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                      if (__p.__r_.__value_.__l.__size_)
                      {
                        v964 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                        do
                          v965 = __ldaxr(v964);
                        while (__stlxr(v965 - 1, v964));
                        if (!v965)
                        {
                          ((void (*)(std::__shared_weak_count *))v963->__on_zero_shared)(v963);
                          std::__shared_weak_count::__release_weak(v963);
                        }
                      }
                      if (SBYTE7(__str_16) < 0)
                        operator delete((void *)__str);
                      v966 = v1947.__r_.__value_.__r.__words[0];
                      std::string::basic_string[abi:ne180100]<0>(&__p, "parameter");
                      RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t)&__str, *(uint64_t **)(v966 + 136), *(uint64_t **)(v966 + 144), (unsigned __int8 *)&__p);
                      v968 = v821;
                      v969 = v1;
                      v970 = v817;
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                      v972 = (std::string::size_type *)*((_QWORD *)&__str + 1);
                      for (kk = (std::string::size_type *)__str; kk != v972; kk += 2)
                      {
                        v974 = *kk;
                        v973 = (std::__shared_weak_count *)kk[1];
                        __p.__r_.__value_.__r.__words[0] = *kk;
                        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v973;
                        if (v973)
                        {
                          v975 = (unint64_t *)&v973->__shared_owners_;
                          do
                            v976 = __ldxr(v975);
                          while (__stxr(v976 + 1, v975));
                        }
                        v977 = (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v967);
                        v967 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v974 + 160), v977);
                        if (v967)
                        {
                          v978 = (uint64_t *)v1945.__r_.__value_.__r.__words[0];
                          v979 = (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v967);
                          v980 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v974 + 160), v979);
                          if (v980)
                            v981 = (const std::string *)(v980 + 40);
                          else
                            v981 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
                          v967 = RIO_MTLX::Element::setAttribute(v978, (__int128 *)(v974 + 48), v981);
                        }
                        if (v973)
                        {
                          v982 = (unint64_t *)&v973->__shared_owners_;
                          do
                            v983 = __ldaxr(v982);
                          while (__stlxr(v983 - 1, v982));
                          if (!v983)
                          {
                            ((void (*)(std::__shared_weak_count *))v973->__on_zero_shared)(v973);
                            std::__shared_weak_count::__release_weak(v973);
                          }
                        }
                      }
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                      RIO_MTLX::Element::removeChildOfType<RIO_MTLX::Node>(this, (unsigned __int8 *)(v1947.__r_.__value_.__r.__words[0] + 48));
                      v937 = (std::__shared_weak_count *)v1945.__r_.__value_.__l.__size_;
                      v817 = v970;
                      v1 = v969;
                      v821 = v968;
                      if (v1945.__r_.__value_.__l.__size_)
                      {
                        v984 = (unint64_t *)(v1945.__r_.__value_.__l.__size_ + 8);
                        do
                          v939 = __ldaxr(v984);
                        while (__stlxr(v939 - 1, v984));
                        goto LABEL_1812;
                      }
                    }
                  }
                  goto LABEL_1814;
                case 0xELL:
                  if (**(_QWORD **)v827 != 0x726F66736E617274
                    || *(_QWORD *)(*(_QWORD *)v827 + 6) != 0x746E696F706D726FLL)
                  {
                    goto LABEL_1530;
                  }
                  goto LABEL_1536;
                case 0xFLL:
                  v868 = *(uint64_t **)v827;
                  if (**(_QWORD **)v827 != 0x726F66736E617274
                    || *(_QWORD *)(*(_QWORD *)v827 + 7) != 0x726F746365766D72)
                  {
                    v870 = *v868;
                    v871 = *(uint64_t *)((char *)v868 + 7);
                    if (v870 != 0x726F66736E617274 || v871 != 0x6C616D726F6E6D72)
                      goto LABEL_1530;
                  }
LABEL_1536:
                  v873 = v1947.__r_.__value_.__r.__words[0];
                  std::string::basic_string[abi:ne180100]<0>(&__str, "fromspace");
                  v874 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v873 + 96), (unsigned __int8 *)&__str);
                  if (v874)
                  {
                    v875 = *((_QWORD *)v874 + 5);
                    v876 = (std::__shared_weak_count *)*((_QWORD *)v874 + 6);
                    v1954.__r_.__value_.__r.__words[0] = v875;
                    v1954.__r_.__value_.__l.__size_ = (std::string::size_type)v876;
                    if (v876)
                    {
                      v877 = (unint64_t *)&v876->__shared_owners_;
                      do
                        v878 = __ldxr(v877);
                      while (__stxr(v878 + 1, v877));
                    }
                    if (v875)
                    {
                      v879 = 0;
                      if (!v876)
                        goto LABEL_1588;
LABEL_1584:
                      v901 = (unint64_t *)&v876->__shared_owners_;
                      do
                        v902 = __ldaxr(v901);
                      while (__stlxr(v902 - 1, v901));
                      if (!v902)
                      {
                        ((void (*)(std::__shared_weak_count *))v876->__on_zero_shared)(v876);
                        std::__shared_weak_count::__release_weak(v876);
                      }
                      goto LABEL_1588;
                    }
                  }
                  else
                  {
                    *(_OWORD *)&v1954.__r_.__value_.__l.__data_ = 0uLL;
                  }
                  v887 = v1947.__r_.__value_.__r.__words[0];
                  std::string::basic_string[abi:ne180100]<0>(&__p, "tospace");
                  v888 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v887 + 96), (unsigned __int8 *)&__p);
                  if (v888)
                  {
                    v890 = *((_QWORD *)v888 + 5);
                    v889 = (std::__shared_weak_count *)*((_QWORD *)v888 + 6);
                    if (v889)
                    {
                      v891 = (unint64_t *)&v889->__shared_owners_;
                      do
                        v892 = __ldxr(v891);
                      while (__stxr(v892 + 1, v891));
                      do
                        v893 = __ldaxr(v891);
                      while (__stlxr(v893 - 1, v891));
                      if (!v893)
                      {
                        ((void (*)(std::__shared_weak_count *))v889->__on_zero_shared)(v889);
                        std::__shared_weak_count::__release_weak(v889);
                      }
                    }
                  }
                  else
                  {
                    v890 = 0;
                  }
                  v879 = v890 == 0;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  v876 = (std::__shared_weak_count *)v1954.__r_.__value_.__l.__size_;
                  if (v1954.__r_.__value_.__l.__size_)
                    goto LABEL_1584;
LABEL_1588:
                  if (SBYTE7(__str_16) < 0)
                  {
                    operator delete((void *)__str);
                    if (!v879)
                      goto LABEL_1814;
                  }
                  else if (!v879)
                  {
                    goto LABEL_1814;
                  }
                  v903 = (std::string *)v1947.__r_.__value_.__r.__words[0];
                  std::string::basic_string[abi:ne180100]<0>(&__str, "transformmatrix");
                  std::string::operator=(v903 + 1, (const std::string *)&__str);
                  goto LABEL_1763;
                default:
                  goto LABEL_1530;
              }
            }
          }
        }
        else if (v844[23])
        {
          while (*v844 == *(unsigned __int8 *)v848)
          {
            ++v844;
            v848 = (uint64_t *)((char *)v848 + 1);
            if (!--v845)
              goto LABEL_1609;
          }
          goto LABEL_1594;
        }
LABEL_1609:
        v909 = (std::string *)v1947.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&__str, "invertmatrix");
        std::string::operator=(v909 + 1, (const std::string *)&__str);
LABEL_1763:
        if (SBYTE7(__str_16) < 0)
          operator delete((void *)__str);
      }
LABEL_1814:
      v1004 = (std::__shared_weak_count *)v1947.__r_.__value_.__l.__size_;
      if (v1947.__r_.__value_.__l.__size_)
      {
        v1005 = (unint64_t *)(v1947.__r_.__value_.__l.__size_ + 8);
        do
          v1006 = __ldaxr(v1005);
        while (__stlxr(v1006 - 1, v1005));
        if (!v1006)
        {
          ((void (*)(std::__shared_weak_count *))v1004->__on_zero_shared)(v1004);
          std::__shared_weak_count::__release_weak(v1004);
        }
      }
      v1007 = (std::__shared_weak_count *)v1949[1];
      if (v1949[1])
      {
        v1008 = (unint64_t *)((char *)v1949[1] + 8);
        do
          v1009 = __ldaxr(v1008);
        while (__stlxr(v1009 - 1, v1008));
        if (!v1009)
        {
          ((void (*)(std::__shared_weak_count *))v1007->__on_zero_shared)(v1007);
          std::__shared_weak_count::__release_weak(v1007);
        }
      }
      RIO_MTLX::TreeIterator::operator++(&v2026);
      continue;
    }
    break;
  }
  *(_QWORD *)&__str = v821;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v1010 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
  if (*((_QWORD *)&v2021 + 1))
  {
    v1011 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
    do
      v1012 = __ldaxr(v1011);
    while (__stlxr(v1012 - 1, v1011));
    if (!v1012)
    {
      ((void (*)(std::__shared_weak_count *))v1010->__on_zero_shared)(v1010);
      std::__shared_weak_count::__release_weak(v1010);
    }
  }
  *(_QWORD *)&v2021 = v817;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
  v1013 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v1014 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v1015 = __ldaxr(v1014);
    while (__stlxr(v1015 - 1, v1014));
    if (!v1015)
    {
      ((void (*)(std::__shared_weak_count *))v1013->__on_zero_shared)(v1013);
      std::__shared_weak_count::__release_weak(v1013);
    }
  }
  v2026.__r_.__value_.__r.__words[0] = v1;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v1016 = (std::__shared_weak_count *)v2030.__r_.__value_.__l.__size_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v1017 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v1018 = __ldaxr(v1017);
    while (__stlxr(v1018 - 1, v1017));
    if (!v1018)
    {
      ((void (*)(std::__shared_weak_count *))v1016->__on_zero_shared)(v1016);
      std::__shared_weak_count::__release_weak(v1016);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v2030, "ND_backdrop");
  RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, (unsigned __int8 *)&v2030);
  if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2030.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v2030, "ND_invert_matrix33");
  RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, (unsigned __int8 *)&v2030);
  if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2030.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v2030, "ND_invert_matrix44");
  RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, (unsigned __int8 *)&v2030);
  if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2030.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v2030, "ND_rotate_vector2");
  RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, (unsigned __int8 *)&v2030);
  if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2030.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v2030, "ND_rotate_vector3");
  RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, (unsigned __int8 *)&v2030);
  if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2030.__r_.__value_.__l.__data_);
LABEL_1850:
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(&v2030, "r", "x");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(&v2032[8], "a", "y");
  v1019 = 0;
  v1984 = 0u;
  v1983 = 0u;
  v1985 = 1.0;
  do
  {
    v1020 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v1984 + 8, (uint64_t)(&v2030 + 2 * v1019));
    v1021 = v1020;
    v1022 = *((_QWORD *)&v1983 + 1);
    if (*((_QWORD *)&v1983 + 1))
    {
      v1023 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v1983 + 8));
      v1023.i16[0] = vaddlv_u8(v1023);
      v1024 = v1023.u32[0];
      if (v1023.u32[0] > 1uLL)
      {
        v1 = v1020;
        if (v1020 >= *((_QWORD *)&v1983 + 1))
          v1 = v1020 % *((_QWORD *)&v1983 + 1);
      }
      else
      {
        v1 = (*((_QWORD *)&v1983 + 1) - 1) & v1020;
      }
      v1025 = *(unsigned __int8 ***)(v1983 + 8 * v1);
      if (v1025)
      {
        for (mm = *v1025; mm; mm = *(unsigned __int8 **)mm)
        {
          v1027 = *((_QWORD *)mm + 1);
          if (v1027 == v1021)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v1985, mm + 16, (unsigned __int8 *)&v2030 + 48 * v1019) & 1) != 0)goto LABEL_1888;
          }
          else
          {
            if (v1024 > 1)
            {
              if (v1027 >= v1022)
                v1027 %= v1022;
            }
            else
            {
              v1027 &= v1022 - 1;
            }
            if (v1027 != v1)
              break;
          }
        }
      }
    }
    v1028 = (char *)operator new(0x40uLL);
    v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)v1028;
    v2026.__r_.__value_.__l.__size_ = (std::string::size_type)&v1984;
    v2026.__r_.__value_.__s.__data_[16] = 0;
    *(_QWORD *)v1028 = 0;
    *((_QWORD *)v1028 + 1) = v1021;
    std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v1028 + 16), (__int128 *)&v2030 + 3 * v1019);
    v2026.__r_.__value_.__s.__data_[16] = 1;
    v1029 = (float)(unint64_t)(*((_QWORD *)&v1984 + 1) + 1);
    if (!v1022 || (float)(v1985 * (float)v1022) < v1029)
    {
      v1030 = (v1022 & (v1022 - 1)) != 0;
      if (v1022 < 3)
        v1030 = 1;
      v1031 = v1030 | (2 * v1022);
      v1032 = vcvtps_u32_f32(v1029 / v1985);
      if (v1031 <= v1032)
        v1033 = v1032;
      else
        v1033 = v1031;
      std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>((uint64_t)&v1983, v1033);
      v1022 = *((_QWORD *)&v1983 + 1);
      if ((*((_QWORD *)&v1983 + 1) & (*((_QWORD *)&v1983 + 1) - 1)) != 0)
      {
        if (v1021 >= *((_QWORD *)&v1983 + 1))
          v1 = v1021 % *((_QWORD *)&v1983 + 1);
        else
          v1 = v1021;
      }
      else
      {
        v1 = (*((_QWORD *)&v1983 + 1) - 1) & v1021;
      }
    }
    v1034 = *(_QWORD **)(v1983 + 8 * v1);
    if (v1034)
    {
      *(_QWORD *)v2026.__r_.__value_.__l.__data_ = *v1034;
      *v1034 = v2026.__r_.__value_.__r.__words[0];
    }
    else
    {
      *(_QWORD *)v2026.__r_.__value_.__l.__data_ = v1984;
      *(_QWORD *)&v1984 = v2026.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v1983 + 8 * v1) = &v1984;
      if (*(_QWORD *)v2026.__r_.__value_.__l.__data_)
      {
        v1035 = *(_QWORD *)(*(_QWORD *)v2026.__r_.__value_.__l.__data_ + 8);
        if ((v1022 & (v1022 - 1)) != 0)
        {
          if (v1035 >= v1022)
            v1035 %= v1022;
        }
        else
        {
          v1035 &= v1022 - 1;
        }
        *(_QWORD *)(v1983 + 8 * v1035) = v2026.__r_.__value_.__r.__words[0];
      }
    }
    v2026.__r_.__value_.__r.__words[0] = 0;
    ++*((_QWORD *)&v1984 + 1);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v2026, 0);
LABEL_1888:
    ++v1019;
  }
  while (v1019 != 2);
  for (nn = 0; nn != -12; nn -= 6)
  {
    v1037 = (void **)((char *)&v2030.__r_.__value_.__l.__data_ + nn * 8);
    if (SHIBYTE(v2034.__r_.__value_.__r.__words[nn + 2]) < 0)
      operator delete(v1037[9]);
    if (*((char *)v1037 + 71) < 0)
      operator delete(v1037[6]);
  }
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v2030);
  *(_QWORD *)&v2032[8] = 0;
  *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)&v2030.__r_.__value_.__l.__data_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v1038 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v1039 = __ldxr(v1038);
    while (__stxr(v1039 + 1, v1038));
  }
  v2027 = 0;
  v2026.__r_.__value_.__r.__words[2] = 0;
  v2028 = 0;
  v1040 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v2026.__r_.__value_.__s.__data_[16], (_QWORD *)v2030.__r_.__value_.__r.__words[2], (_QWORD *)v2031, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2031 - v2030.__r_.__value_.__r.__words[2]) >> 3));
  v2029 = *(_OWORD *)v2032;
  RIO_MTLX::NULL_TREE_ITERATOR((RIO_MTLX *)v1040);
  v2021 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1))
  {
    v1041 = (unint64_t *)(*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8);
    do
      v1042 = __ldxr(v1041);
    while (__stxr(v1042 + 1, v1041));
  }
  v2023 = 0;
  v2022 = 0;
  v2024 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)&v2022, (_QWORD *)qword_255E54218, unk_255E54220, 0xAAAAAAAAAAAAAAABLL * ((unk_255E54220 - qword_255E54218) >> 3));
  v2025 = xmmword_255E54230;
  while (2)
  {
    v1043 = RIO_MTLX::TreeIterator::operator==((uint64_t)&v2026, (uint64_t)&v2021);
    if (!v1043)
    {
      v1044 = (uint64_t *)v2026.__r_.__value_.__r.__words[0];
      *(_OWORD *)&v1952.__r_.__value_.__l.__data_ = *(_OWORD *)&v2026.__r_.__value_.__l.__data_;
      if (v2026.__r_.__value_.__l.__size_)
      {
        v1045 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
        do
          v1046 = __ldxr(v1045);
        while (__stxr(v1046 + 1, v1045));
      }
      v1047 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v1043);
      v1048 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v1044 + 20, v1047);
      if (v1048)
        v1049 = (uint64_t *)(v1048 + 40);
      else
        v1049 = RIO_MTLX::EMPTY_STRING(0);
      v1050 = *((char *)v1049 + 23);
      if (v1050 < 0)
      {
        if (v1049[1] != 6)
          goto LABEL_1918;
        v1049 = (uint64_t *)*v1049;
      }
      else if (v1050 != 6)
      {
        goto LABEL_1918;
      }
      if (*(_DWORD *)v1049 != 1869377379 || *((_WORD *)v1049 + 2) != 12914)
        goto LABEL_1918;
      v1055 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v1049);
      RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE();
      RIO_MTLX::Element::setAttribute(v1044, v1055, (const std::string *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v);
      __str = 0uLL;
      v1056 = (std::__shared_weak_count *)v1044[29];
      if (v1056)
      {
        v1056 = std::__shared_weak_count::lock(v1056);
        v1057 = v1056;
        *((_QWORD *)&__str + 1) = v1056;
        if (v1056)
        {
          v1056 = (std::__shared_weak_count *)v1044[28];
          *(_QWORD *)&__str = v1056;
        }
      }
      else
      {
        v1057 = 0;
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Node>((uint64_t)v1056, v1949);
      if (v1057)
      {
        v1058 = (unint64_t *)&v1057->__shared_owners_;
        do
          v1059 = __ldaxr(v1058);
        while (__stlxr(v1059 - 1, v1058));
        if (!v1059)
        {
          ((void (*)(std::__shared_weak_count *))v1057->__on_zero_shared)(v1057);
          std::__shared_weak_count::__release_weak(v1057);
        }
      }
      if (!v1949[0])
      {
        v1086 = (std::__shared_weak_count *)v1949[1];
        if (v1949[1])
        {
          v1087 = (unint64_t *)((char *)v1949[1] + 8);
          do
            v1088 = __ldaxr(v1087);
          while (__stlxr(v1088 - 1, v1087));
          goto LABEL_2009;
        }
LABEL_1918:
        v1052 = (std::__shared_weak_count *)v1952.__r_.__value_.__l.__size_;
        if (v1952.__r_.__value_.__l.__size_)
        {
          v1053 = (unint64_t *)(v1952.__r_.__value_.__l.__size_ + 8);
          do
            v1054 = __ldaxr(v1053);
          while (__stlxr(v1054 - 1, v1053));
          if (!v1054)
          {
            ((void (*)(std::__shared_weak_count *))v1052->__on_zero_shared)(v1052);
            std::__shared_weak_count::__release_weak(v1052);
          }
        }
        RIO_MTLX::TreeIterator::operator++(&v2026);
        continue;
      }
      RIO_MTLX::Node::getDownstreamPorts(v1949[0], (uint64_t)&__str);
      v1061 = *((_QWORD *)&__str + 1);
      v1062 = __str;
      while (2)
      {
        if (v1062 == v1061)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          v1080 = v1949[0];
          std::string::basic_string[abi:ne180100]<0>(&__str, "channels");
          v1081 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v1080 + 12, (unsigned __int8 *)&__str);
          if (v1081)
          {
            v1083 = *((_QWORD *)v1081 + 5);
            v1082 = *((_QWORD *)v1081 + 6);
            v1954.__r_.__value_.__r.__words[0] = v1083;
            v1954.__r_.__value_.__l.__size_ = v1082;
            if (v1082)
            {
              v1084 = (unint64_t *)(v1082 + 8);
              do
                v1085 = __ldxr(v1084);
              while (__stxr(v1085 + 1, v1084));
            }
          }
          else
          {
            v1083 = 0;
            *(_OWORD *)&v1954.__r_.__value_.__l.__data_ = 0uLL;
          }
          if (SBYTE7(__str_16) < 0)
          {
            operator delete((void *)__str);
            if (v1083)
              goto LABEL_1985;
          }
          else
          {
            if (!v1083)
              goto LABEL_2001;
LABEL_1985:
            v1089 = (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v1081);
            v1090 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v1083 + 160), v1089);
            if (v1090)
            {
              v1091 = (uint64_t *)v1954.__r_.__value_.__r.__words[0];
              v1092 = (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v1090);
              v1093 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v1091 + 20, v1092);
              if (v1093)
                v1094 = (uint64_t *)(v1093 + 40);
              else
                v1094 = RIO_MTLX::EMPTY_STRING(0);
              if (*((char *)v1094 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&__str, (const std::string::value_type *)*v1094, v1094[1]);
              }
              else
              {
                v1095 = *(_OWORD *)v1094;
                *(_QWORD *)&__str_16 = v1094[2];
                __str = v1095;
              }
              if (SBYTE7(__str_16) < 0)
              {
                std::string::__init_copy_ctor_external(&v1980, (const std::string::value_type *)__str, *((std::string::size_type *)&__str + 1));
              }
              else
              {
                *(_OWORD *)&v1980.__r_.__value_.__l.__data_ = __str;
                v1980.__r_.__value_.__r.__words[2] = __str_16;
              }
              RIO_MTLX::replaceSubstrings(&v1980, (uint64_t)&v1983, (uint64_t)&__p);
              if (SBYTE7(__str_16) < 0)
                operator delete((void *)__str);
              __str = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)&__str_16 = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
              __p.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v1980.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1980.__r_.__value_.__l.__data_);
              v1097 = (__int128 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v1096);
              RIO_MTLX::Element::setAttribute(v1091, v1097, (const std::string *)&__str);
              if (SBYTE7(__str_16) < 0)
                operator delete((void *)__str);
            }
          }
LABEL_2001:
          v1098 = (std::__shared_weak_count *)v1954.__r_.__value_.__l.__size_;
          if (v1954.__r_.__value_.__l.__size_)
          {
            v1099 = (unint64_t *)(v1954.__r_.__value_.__l.__size_ + 8);
            do
              v1100 = __ldaxr(v1099);
            while (__stlxr(v1100 - 1, v1099));
            if (!v1100)
            {
              ((void (*)(std::__shared_weak_count *))v1098->__on_zero_shared)(v1098);
              std::__shared_weak_count::__release_weak(v1098);
            }
          }
          v1086 = (std::__shared_weak_count *)v1949[1];
          if (v1949[1])
          {
            v1101 = (unint64_t *)((char *)v1949[1] + 8);
            do
              v1088 = __ldaxr(v1101);
            while (__stlxr(v1088 - 1, v1101));
LABEL_2009:
            if (!v1088)
            {
              ((void (*)(std::__shared_weak_count *))v1086->__on_zero_shared)(v1086);
              std::__shared_weak_count::__release_weak(v1086);
            }
          }
          goto LABEL_1918;
        }
        v1064 = *(RIO_MTLX::PortElement **)v1062;
        v1063 = *(std::__shared_weak_count **)(v1062 + 8);
        v1947.__r_.__value_.__r.__words[0] = *(_QWORD *)v1062;
        v1947.__r_.__value_.__l.__size_ = (std::string::size_type)v1063;
        if (v1063)
        {
          v1065 = (unint64_t *)&v1063->__shared_owners_;
          do
            v1066 = __ldxr(v1065);
          while (__stxr(v1066 + 1, v1065));
        }
        v1067 = (unsigned __int8 *)RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE((RIO_MTLX::PortElement *)v1060);
        v1068 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v1064 + 20, v1067);
        if (v1068)
        {
          Channels = RIO_MTLX::PortElement::getChannels(v1064);
          if (*((char *)Channels + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*Channels, Channels[1]);
          }
          else
          {
            v1070 = *(_OWORD *)Channels;
            __p.__r_.__value_.__r.__words[2] = Channels[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1070;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v1982, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v1982 = __p;
          RIO_MTLX::replaceSubstrings(&v1982, (uint64_t)&v1983, (uint64_t)&v1954);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = v1954;
          *((_BYTE *)&v1954.__r_.__value_.__s + 23) = 0;
          v1954.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v1982.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1982.__r_.__value_.__l.__data_);
          v1072 = (__int128 *)RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(v1071);
          v1068 = RIO_MTLX::Element::setAttribute((uint64_t *)v1064, v1072, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        v1073 = (unsigned __int8 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE((RIO_MTLX::PortElement *)v1068);
        v1060 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v1064 + 20, v1073);
        if (!v1060)
          goto LABEL_1964;
        OutputString = RIO_MTLX::PortElement::getOutputString(v1064);
        if (*((char *)OutputString + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*OutputString, OutputString[1]);
        }
        else
        {
          v1075 = *(_OWORD *)OutputString;
          __p.__r_.__value_.__r.__words[2] = OutputString[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1075;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v1981, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v1981 = __p;
        RIO_MTLX::replaceSubstrings(&v1981, (uint64_t)&v1983, (uint64_t)&v1954);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = v1954;
        *((_BYTE *)&v1954.__r_.__value_.__s + 23) = 0;
        v1954.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v1981.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1981.__r_.__value_.__l.__data_);
        v1077 = (__int128 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(v1076);
        v1060 = RIO_MTLX::Element::setAttribute((uint64_t *)v1064, v1077, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v1063)
          {
LABEL_1965:
            v1078 = (unint64_t *)&v1063->__shared_owners_;
            do
              v1079 = __ldaxr(v1078);
            while (__stlxr(v1079 - 1, v1078));
            if (!v1079)
            {
              ((void (*)(std::__shared_weak_count *))v1063->__on_zero_shared)(v1063);
              std::__shared_weak_count::__release_weak(v1063);
            }
          }
        }
        else
        {
LABEL_1964:
          if (v1063)
            goto LABEL_1965;
        }
        v1062 += 16;
        continue;
      }
    }
    break;
  }
  *(_QWORD *)&__str = &v2022;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v1102 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
  if (*((_QWORD *)&v2021 + 1))
  {
    v1103 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
    do
      v1104 = __ldaxr(v1103);
    while (__stlxr(v1104 - 1, v1103));
    if (!v1104)
    {
      ((void (*)(std::__shared_weak_count *))v1102->__on_zero_shared)(v1102);
      std::__shared_weak_count::__release_weak(v1102);
    }
  }
  *(_QWORD *)&v2021 = (char *)&v2026.__r_.__value_.__l + 16;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
  v1105 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v1106 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v1107 = __ldaxr(v1106);
    while (__stlxr(v1107 - 1, v1106));
    if (!v1107)
    {
      ((void (*)(std::__shared_weak_count *))v1105->__on_zero_shared)(v1105);
      std::__shared_weak_count::__release_weak(v1105);
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030.__r_.__value_.__r.__words[2];
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v1108 = (std::__shared_weak_count *)v2030.__r_.__value_.__l.__size_;
  if (v2030.__r_.__value_.__l.__size_)
  {
    v1109 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
    do
      v1110 = __ldaxr(v1109);
    while (__stlxr(v1110 - 1, v1109));
    if (!v1110)
    {
      ((void (*)(std::__shared_weak_count *))v1108->__on_zero_shared)(v1108);
      std::__shared_weak_count::__release_weak(v1108);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v2030, "material");
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t)&__str, this[17], this[18], (unsigned __int8 *)&v2030);
  if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2030.__r_.__value_.__l.__data_);
  v1832 = (std::string *)*((_QWORD *)&__str + 1);
  v1111 = (std::string *)__str;
  if ((_QWORD)__str != *((_QWORD *)&__str + 1))
  {
    while (1)
    {
      v1836 = v1111;
      v1113 = (void *)v1111->__r_.__value_.__r.__words[0];
      v1112 = (std::__shared_weak_count *)v1111->__r_.__value_.__l.__size_;
      v1936 = v1113;
      v1937 = v1112;
      if (v1112)
      {
        v1114 = (unint64_t *)&v1112->__shared_owners_;
        do
          v1115 = __ldxr(v1114);
        while (__stxr(v1115 + 1, v1114));
      }
      v1933[1] = 0;
      v1933[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v2030, "shaderref");
      RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t)&__p, *((uint64_t **)v1113 + 17), *((uint64_t **)v1113 + 18), (unsigned __int8 *)&v2030);
      if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v2030.__r_.__value_.__l.__data_);
      v1840 = (std::string *)__p.__r_.__value_.__l.__size_;
      v1116 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
        break;
LABEL_2257:
      v2030.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2030);
      RIO_MTLX::Element::removeChild(this, (unsigned __int8 *)v1113 + 48);
      v1234 = (uint64_t *)v1933[0];
      if (v1933[0])
      {
        v1235 = v1936;
        RIO_MTLX::Element::setName((std::string *)v1933[0], (std::string *)v1936 + 2);
        v1237 = (unsigned __int8 *)v1235[25];
        for (i1 = (unsigned __int8 *)v1235[26]; v1237 != i1; v1237 += 24)
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v1234 + 20, v1237))
          {
            v1238 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v1235 + 20, v1237);
            if (v1238)
              v1239 = (const std::string *)(v1238 + 40);
            else
              v1239 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
            RIO_MTLX::Element::setAttribute(v1234, (__int128 *)v1237, v1239);
          }
        }
      }
      v1240 = (std::__shared_weak_count *)v1933[1];
      if (v1933[1])
      {
        v1241 = (unint64_t *)((char *)v1933[1] + 8);
        do
          v1242 = __ldaxr(v1241);
        while (__stlxr(v1242 - 1, v1241));
        if (!v1242)
        {
          ((void (*)(std::__shared_weak_count *))v1240->__on_zero_shared)(v1240);
          std::__shared_weak_count::__release_weak(v1240);
        }
      }
      v1243 = v1937;
      if (v1937)
      {
        v1244 = (unint64_t *)&v1937->__shared_owners_;
        do
          v1245 = __ldaxr(v1244);
        while (__stlxr(v1245 - 1, v1244));
        if (!v1245)
        {
          ((void (*)(std::__shared_weak_count *))v1243->__on_zero_shared)(v1243);
          std::__shared_weak_count::__release_weak(v1243);
        }
      }
      v1111 = (std::string *)&v1836->__r_.__value_.__r.__words[2];
      if (&v1836->__r_.__value_.__r.__words[2] == (std::string::size_type *)v1832)
        goto LABEL_2276;
    }
LABEL_2035:
    v1117 = *(void **)v1116;
    v1118 = *(std::__shared_weak_count **)(v1116 + 8);
    v1972 = *(void **)v1116;
    v1973 = v1118;
    if (v1118)
    {
      v1119 = (unint64_t *)&v1118->__shared_owners_;
      do
        v1120 = __ldxr(v1119);
      while (__stxr(v1120 + 1, v1119));
      v1979 = v1118;
      do
        v1121 = __ldxr(v1119);
      while (__stxr(v1121 + 1, v1119));
    }
    else
    {
      v1979 = 0;
    }
    v1978 = v1117;
    if (v1118)
    {
      v1122 = (unint64_t *)&v1118->__shared_owners_;
      do
        v1123 = __ldaxr(v1122);
      while (__stlxr(v1123 - 1, v1122));
      if (!v1123)
      {
        ((void (*)(std::__shared_weak_count *))v1118->__on_zero_shared)(v1118);
        std::__shared_weak_count::__release_weak(v1118);
      }
    }
    if (v1971.__r_.__value_.__r.__words[0])
      v1124 = (const std::string::value_type **)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v1971.__r_.__value_.__l.__data_
                                                                                                  + 56))(v1971.__r_.__value_.__r.__words[0]);
    else
      v1124 = (const std::string::value_type **)RIO_MTLX::SURFACE_SHADER_TYPE_STRING(0);
    if (*((char *)v1124 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v1954, *v1124, (std::string::size_type)v1124[1]);
    }
    else
    {
      v1125 = *(_OWORD *)v1124;
      v1954.__r_.__value_.__r.__words[2] = (std::string::size_type)v1124[2];
      *(_OWORD *)&v1954.__r_.__value_.__l.__data_ = v1125;
    }
    if (v1971.__r_.__value_.__r.__words[0])
    {
      v1126 = RIO_MTLX::NodeDef::getNodeString((RIO_MTLX::NodeDef *)v1971.__r_.__value_.__l.__data_);
    }
    else
    {
      v1127 = v1972;
      v1128 = (unsigned __int8 *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE(0);
      v1129 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v1127 + 20, v1128);
      if (v1129)
        v1126 = (uint64_t *)(v1129 + 40);
      else
        v1126 = RIO_MTLX::EMPTY_STRING(0);
    }
    if (*((char *)v1126 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v1952, (const std::string::value_type *)*v1126, v1126[1]);
    }
    else
    {
      v1130 = *(_OWORD *)v1126;
      v1952.__r_.__value_.__r.__words[2] = v1126[2];
      *(_OWORD *)&v1952.__r_.__value_.__l.__data_ = v1130;
    }
    v1131 = (const std::string *)v1972;
    if (*((char *)v1972 + 71) < 0)
      std::string::__init_copy_ctor_external(&v1977, *((const std::string::value_type **)v1972 + 6), *((_QWORD *)v1972 + 7));
    else
      v1977 = *(std::string *)((_BYTE *)v1972 + 2);
    RIO_MTLX::Element::createValidChildName((uint64_t)this, (uint64_t)&v1977, (uint64_t)v1949);
    if (SHIBYTE(v1977.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1977.__r_.__value_.__l.__data_);
    v1132 = RIO_MTLX::GraphElement::addNode((RIO_MTLX::Node *)this, &v1952, (uint64_t)v1949, &v1954, (uint64_t *)&v1970);
    v1133 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v1132);
    v1134 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v1131[6].__r_.__value_.__r.__words[2], v1133);
    if (v1134)
      v1135 = (uint64_t *)(v1134 + 40);
    else
      v1135 = RIO_MTLX::EMPTY_STRING(0);
    if (*((char *)v1135 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v1947, (const std::string::value_type *)*v1135, v1135[1]);
    }
    else
    {
      v1136 = *(_OWORD *)v1135;
      v1947.__r_.__value_.__r.__words[2] = v1135[2];
      *(_OWORD *)&v1947.__r_.__value_.__l.__data_ = v1136;
    }
    v1137 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::TARGET_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v1135);
    v1138 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v1131[6].__r_.__value_.__r.__words[2], v1137);
    if (v1138)
      v1139 = (uint64_t *)(v1138 + 40);
    else
      v1139 = RIO_MTLX::EMPTY_STRING(0);
    if (*((char *)v1139 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v1945, (const std::string::value_type *)*v1139, v1139[1]);
    }
    else
    {
      v1140 = *(_OWORD *)v1139;
      v1945.__r_.__value_.__r.__words[2] = v1139[2];
      *(_OWORD *)&v1945.__r_.__value_.__l.__data_ = v1140;
    }
    v1141 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v1139);
    v1142 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v1131[6].__r_.__value_.__r.__words[2], v1141);
    if (v1142)
      v1143 = (std::string *)(v1142 + 40);
    else
      v1143 = (std::string *)RIO_MTLX::EMPTY_STRING(0);
    if (SHIBYTE(v1143->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v1943, v1143->__r_.__value_.__l.__data_, v1143->__r_.__value_.__l.__size_);
    }
    else
    {
      v1144 = *(_OWORD *)&v1143->__r_.__value_.__l.__data_;
      v1943.__r_.__value_.__r.__words[2] = v1143->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1943.__r_.__value_.__l.__data_ = v1144;
    }
    v1145 = HIBYTE(v1947.__r_.__value_.__r.__words[2]);
    if ((v1947.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v1145 = v1947.__r_.__value_.__l.__size_;
    if (v1145)
    {
      v1146 = (uint64_t *)v1970.__r_.__value_.__r.__words[0];
      v1147 = (__int128 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v1143);
      v1143 = RIO_MTLX::Element::setAttribute(v1146, v1147, &v1947);
    }
    v1148 = HIBYTE(v1945.__r_.__value_.__r.__words[2]);
    if ((v1945.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v1148 = v1945.__r_.__value_.__l.__size_;
    if (v1148)
    {
      v1149 = (uint64_t *)v1970.__r_.__value_.__r.__words[0];
      v1150 = (__int128 *)RIO_MTLX::InterfaceElement::TARGET_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v1143);
      v1143 = RIO_MTLX::Element::setAttribute(v1149, v1150, &v1945);
    }
    v1151 = HIBYTE(v1943.__r_.__value_.__r.__words[2]);
    if ((v1943.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v1151 = v1943.__r_.__value_.__l.__size_;
    if (v1151)
    {
      v1152 = (uint64_t *)v1970.__r_.__value_.__r.__words[0];
      v1153 = (__int128 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v1143);
      RIO_MTLX::Element::setAttribute(v1152, v1153, &v1943);
    }
    v1154 = std::string::operator=((std::string *)(v1970.__r_.__value_.__r.__words[0] + 72), v1131 + 3);
    v1156 = (void **)v1131[5].__r_.__value_.__r.__words[2];
    data = v1131[6].__r_.__value_.__l.__data_;
    while (1)
    {
      if (v1156 == (void **)data)
      {
        v1200 = v1933[0];
        if (!v1933[0])
        {
          std::string::basic_string[abi:ne180100]<0>(&v1976, "temp");
          if ((v1976.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v1201 = &v1976;
          else
            v1201 = (std::string *)v1976.__r_.__value_.__r.__words[0];
          if ((v1976.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v1202 = HIBYTE(v1976.__r_.__value_.__r.__words[2]);
          else
            v1202 = v1976.__r_.__value_.__l.__size_;
          for (; v1202; --v1202)
          {
              v1201->__r_.__value_.__s.__data_[0] = 95;
            v1201 = (std::string *)((char *)v1201 + 1);
          }
          v2030 = v1976;
          memset(&v1976, 0, sizeof(v1976));
          v1975 = *(_OWORD *)&v1970.__r_.__value_.__l.__data_;
          if (v1970.__r_.__value_.__l.__size_)
          {
            v1203 = (unint64_t *)(v1970.__r_.__value_.__l.__size_ + 8);
            do
              v1204 = __ldxr(v1203);
            while (__stxr(v1204 + 1, v1203));
          }
          RIO_MTLX::GraphElement::addMaterialNode((RIO_MTLX *)this, (uint64_t)&v2030, (const std::string **)&v1975, (uint64_t *)&v2026);
          v1205 = *(_OWORD *)&v2026.__r_.__value_.__l.__data_;
          *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = 0uLL;
          v1206 = (std::__shared_weak_count *)v1933[1];
          *(_OWORD *)v1933 = v1205;
          if (v1206)
          {
            v1207 = (unint64_t *)&v1206->__shared_owners_;
            do
              v1208 = __ldaxr(v1207);
            while (__stlxr(v1208 - 1, v1207));
            if (!v1208)
            {
              ((void (*)(std::__shared_weak_count *))v1206->__on_zero_shared)(v1206);
              std::__shared_weak_count::__release_weak(v1206);
            }
          }
          v1209 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
          if (v2026.__r_.__value_.__l.__size_)
          {
            v1210 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
            do
              v1211 = __ldaxr(v1210);
            while (__stlxr(v1211 - 1, v1210));
            if (!v1211)
            {
              ((void (*)(std::__shared_weak_count *))v1209->__on_zero_shared)(v1209);
              std::__shared_weak_count::__release_weak(v1209);
            }
          }
          v1212 = (std::__shared_weak_count *)*((_QWORD *)&v1975 + 1);
          if (*((_QWORD *)&v1975 + 1))
          {
            v1213 = (unint64_t *)(*((_QWORD *)&v1975 + 1) + 8);
            do
              v1214 = __ldaxr(v1213);
            while (__stlxr(v1214 - 1, v1213));
            if (!v1214)
            {
              ((void (*)(std::__shared_weak_count *))v1212->__on_zero_shared)(v1212);
              std::__shared_weak_count::__release_weak(v1212);
            }
          }
          if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v2030.__r_.__value_.__l.__data_);
          if (SHIBYTE(v1976.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1976.__r_.__value_.__l.__data_);
          v1200 = v1933[0];
          std::string::operator=((std::string *)v1933[0] + 3, (const std::string *)v1936 + 3);
        }
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v1200, (unsigned __int8 *)&v1954, &v2030);
        v1215 = *(_OWORD *)&v2030.__r_.__value_.__l.__data_;
        if (!v2030.__r_.__value_.__l.__size_)
          goto LABEL_2221;
        v1216 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
        do
          v1217 = __ldaxr(v1216);
        while (__stlxr(v1217 - 1, v1216));
        if (!v1217)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v1215 + 1) + 16))(*((_QWORD *)&v1215 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1215 + 1));
          if (!(_QWORD)v1215)
            goto LABEL_2252;
        }
        else
        {
LABEL_2221:
          if ((_QWORD)v1215)
            goto LABEL_2222;
LABEL_2252:
          v1227 = RIO_MTLX::InterfaceElement::addInput(v1933[0], (uint64_t)&v1954, &v1954, (uint64_t *)&v2030);
          v1228 = (uint64_t *)v2030.__r_.__value_.__r.__words[0];
          v1229 = (const std::string *)v1970.__r_.__value_.__r.__words[0];
          v1230 = (__int128 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v1227);
          RIO_MTLX::Element::setAttribute(v1228, v1230, v1229 + 2);
          v1231 = (std::__shared_weak_count *)v2030.__r_.__value_.__l.__size_;
          if (v2030.__r_.__value_.__l.__size_)
          {
            v1232 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
            do
              v1233 = __ldaxr(v1232);
            while (__stlxr(v1233 - 1, v1232));
            if (!v1233)
            {
              ((void (*)(std::__shared_weak_count *))v1231->__on_zero_shared)(v1231);
              std::__shared_weak_count::__release_weak(v1231);
            }
          }
        }
LABEL_2222:
        if (SHIBYTE(v1943.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1943.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1945.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1945.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1947.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1947.__r_.__value_.__l.__data_);
        v1218 = (std::__shared_weak_count *)v1970.__r_.__value_.__l.__size_;
        if (v1970.__r_.__value_.__l.__size_)
        {
          v1219 = (unint64_t *)(v1970.__r_.__value_.__l.__size_ + 8);
          do
            v1220 = __ldaxr(v1219);
          while (__stlxr(v1220 - 1, v1219));
          if (!v1220)
          {
            ((void (*)(std::__shared_weak_count *))v1218->__on_zero_shared)(v1218);
            std::__shared_weak_count::__release_weak(v1218);
          }
        }
        if ((char)v1950 < 0)
          operator delete(v1949[0]);
        if (SHIBYTE(v1952.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1952.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1954.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1954.__r_.__value_.__l.__data_);
        v1221 = (std::__shared_weak_count *)v1971.__r_.__value_.__l.__size_;
        if (v1971.__r_.__value_.__l.__size_)
        {
          v1222 = (unint64_t *)(v1971.__r_.__value_.__l.__size_ + 8);
          do
            v1223 = __ldaxr(v1222);
          while (__stlxr(v1223 - 1, v1222));
          if (!v1223)
          {
            ((void (*)(std::__shared_weak_count *))v1221->__on_zero_shared)(v1221);
            std::__shared_weak_count::__release_weak(v1221);
          }
        }
        v1224 = v1973;
        if (v1973)
        {
          v1225 = (unint64_t *)&v1973->__shared_owners_;
          do
            v1226 = __ldaxr(v1225);
          while (__stlxr(v1226 - 1, v1225));
          if (!v1226)
          {
            ((void (*)(std::__shared_weak_count *))v1224->__on_zero_shared)(v1224);
            std::__shared_weak_count::__release_weak(v1224);
          }
        }
        v1116 += 16;
        if ((std::string *)v1116 == v1840)
        {
          v1113 = v1936;
          goto LABEL_2257;
        }
        goto LABEL_2035;
      }
      v1158 = (char *)*v1156;
      v1157 = (std::string::size_type)v1156[1];
      v1967 = *v1156;
      v1968 = (std::__shared_weak_count *)v1157;
      if (v1157)
      {
        v1159 = (unint64_t *)(v1157 + 8);
        do
          v1160 = __ldxr(v1159);
        while (__stxr(v1160 + 1, v1159));
      }
      v1965 = 0;
      v1964 = 0;
      v1161 = v1158 + 24;
      v1162 = v1158[47];
      if (v1162 < 0)
      {
        if (*((_QWORD *)v1158 + 4) != 9)
          goto LABEL_2137;
        v1161 = *(char **)v1161;
      }
      else if (v1162 != 9)
      {
        goto LABEL_2137;
      }
      v1163 = *(_QWORD *)v1161 == 0x75706E69646E6962 && v1161[8] == 116;
      if (v1163 || (*(_QWORD *)v1161 == 0x61726170646E6962 ? (v1164 = v1161[8] == 109) : (v1164 = 0), v1164))
      {
        v1169 = (RIO_MTLX::Input *)v1970.__r_.__value_.__r.__words[0];
        v1170 = (const std::string *)RIO_MTLX::DEFAULT_TYPE_STRING((RIO_MTLX *)v1154);
        RIO_MTLX::InterfaceElement::addInput(v1169, (uint64_t)(v1158 + 48), v1170, (uint64_t *)&v2030);
        v1171 = (std::__shared_weak_count *)v2030.__r_.__value_.__l.__size_;
        v1154 = (std::string *)v2030.__r_.__value_.__r.__words[0];
      }
      else
      {
        v1165 = *(_QWORD *)v1161;
        v1166 = v1161[8];
        if (v1165 != 0x656B6F74646E6962 || v1166 != 110)
          goto LABEL_2137;
        v1168 = (_QWORD *)v1970.__r_.__value_.__r.__words[0];
        if (v1158[71] < 0)
          std::string::__init_copy_ctor_external(&v2030, *((const std::string::value_type **)v1158 + 6), *((_QWORD *)v1158 + 7));
        else
          v2030 = *(std::string *)(v1158 + 2);
        v1182 = HIBYTE(v2030.__r_.__value_.__r.__words[2]);
        if ((v2030.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v1182 = v2030.__r_.__value_.__l.__size_;
        if (!v1182)
        {
          v1183 = (char *)RIO_MTLX::Token::CATEGORY((RIO_MTLX::Token *)v1154);
          v1184 = v1183;
          if (v1183[23] >= 0)
            v1185 = v1183[23];
          else
            v1185 = *((_QWORD *)v1183 + 1);
          std::string::basic_string[abi:ne180100]((uint64_t)&v2021, v1185 + 1);
          if (v2022 >= 0)
            v1186 = &v2021;
          else
            v1186 = (__int128 *)v2021;
          if (v1185)
          {
            if (v1184[23] >= 0)
              v1187 = v1184;
            else
              v1187 = *(char **)v1184;
            memmove(v1186, v1187, v1185);
          }
          *(_WORD *)((char *)v1186 + v1185) = 49;
          RIO_MTLX::Element::createValidChildName((uint64_t)v1168, (uint64_t)&v2021, (uint64_t)&v2026);
          if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v2030.__r_.__value_.__l.__data_);
          v2030 = v2026;
          *((_BYTE *)&v2026.__r_.__value_.__s + 23) = 0;
          v2026.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v2022) < 0)
            operator delete((void *)v2021);
        }
        std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(v1940, v1168 + 1);
        v1188 = operator new(0x118uLL);
        v1188[1] = 0;
        v1188[2] = 0;
        *v1188 = &off_24FDE4008;
        *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = *(_OWORD *)v1940;
        v1940[0] = 0;
        v1940[1] = 0;
        RIO_MTLX::Token::Token((RIO_MTLX::Token *)(v1188 + 3), (uint64_t *)&v2026, (uint64_t)&v2030);
        v1189 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
        if (v2026.__r_.__value_.__l.__size_)
        {
          v1190 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
          do
            v1191 = __ldaxr(v1190);
          while (__stlxr(v1191 - 1, v1190));
          if (!v1191)
          {
            ((void (*)(std::__shared_weak_count *))v1189->__on_zero_shared)(v1189);
            std::__shared_weak_count::__release_weak(v1189);
          }
        }
        *(_QWORD *)&v1962 = v1188 + 3;
        *((_QWORD *)&v1962 + 1) = v1188;
        std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v1962, v1188 + 4, (uint64_t)(v1188 + 3));
        v1192 = (std::__shared_weak_count *)v1940[1];
        if (v1940[1])
        {
          v1193 = (unint64_t *)((char *)v1940[1] + 8);
          do
            v1194 = __ldaxr(v1193);
          while (__stlxr(v1194 - 1, v1193));
          if (!v1194)
          {
            ((void (*)(std::__shared_weak_count *))v1192->__on_zero_shared)(v1192);
            std::__shared_weak_count::__release_weak(v1192);
          }
        }
        *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = v1962;
        if (*((_QWORD *)&v1962 + 1))
        {
          v1195 = (unint64_t *)(*((_QWORD *)&v1962 + 1) + 8);
          do
            v1196 = __ldxr(v1195);
          while (__stxr(v1196 + 1, v1195));
        }
        (*(void (**)(_QWORD *, std::string *))(*v1168 + 40))(v1168, &v2026);
        v1197 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
        if (v2026.__r_.__value_.__l.__size_)
        {
          v1198 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
          do
            v1199 = __ldaxr(v1198);
          while (__stlxr(v1199 - 1, v1198));
          if (!v1199)
          {
            ((void (*)(std::__shared_weak_count *))v1197->__on_zero_shared)(v1197);
            std::__shared_weak_count::__release_weak(v1197);
          }
        }
        if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v2030.__r_.__value_.__l.__data_);
        v1171 = (std::__shared_weak_count *)*((_QWORD *)&v1962 + 1);
        v1154 = (std::string *)v1962;
      }
      v1964 = v1154;
      v1965 = v1171;
      if (v1154)
      {
        v2030.__r_.__value_.__r.__words[0] = (std::string::size_type)v1158;
        v2030.__r_.__value_.__l.__size_ = v1157;
        if (v1157)
        {
          v1172 = (unint64_t *)(v1157 + 8);
          do
            v1173 = __ldxr(v1172);
          while (__stxr(v1173 + 1, v1172));
        }
        RIO_MTLX::Element::copyContentFrom((uint64_t)v1154, (const std::string **)&v2030);
        v1174 = (std::__shared_weak_count *)v2030.__r_.__value_.__l.__size_;
        if (v2030.__r_.__value_.__l.__size_)
        {
          v1175 = (unint64_t *)(v2030.__r_.__value_.__l.__size_ + 8);
          do
            v1176 = __ldaxr(v1175);
          while (__stlxr(v1176 - 1, v1175));
          if (!v1176)
          {
            ((void (*)(std::__shared_weak_count *))v1174->__on_zero_shared)(v1174);
            std::__shared_weak_count::__release_weak(v1174);
          }
        }
        v1171 = v1965;
      }
      if (v1171)
      {
        v1177 = (unint64_t *)&v1171->__shared_owners_;
        do
          v1178 = __ldaxr(v1177);
        while (__stlxr(v1178 - 1, v1177));
        if (!v1178)
        {
          ((void (*)(std::__shared_weak_count *))v1171->__on_zero_shared)(v1171);
          std::__shared_weak_count::__release_weak(v1171);
        }
      }
LABEL_2137:
      v1179 = v1968;
      if (v1968)
      {
        v1180 = (unint64_t *)&v1968->__shared_owners_;
        do
          v1181 = __ldaxr(v1180);
        while (__stlxr(v1181 - 1, v1180));
        if (!v1181)
        {
          ((void (*)(std::__shared_weak_count *))v1179->__on_zero_shared)(v1179);
          std::__shared_weak_count::__release_weak(v1179);
        }
      }
      v1156 += 2;
    }
  }
LABEL_2276:
  v2030.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2030);
  std::string::basic_string[abi:ne180100]<0>(&v1972, "atan2");
  std::string::basic_string[abi:ne180100]<0>(&v1971, "in1");
  std::string::basic_string[abi:ne180100]<0>(&v1970, "in2");
  std::string::basic_string[abi:ne180100]<0>(&v1967, "rotate3d");
  std::string::basic_string[abi:ne180100]<0>(&v1964, "axis");
  std::string::basic_string[abi:ne180100]<0>(&v1962, "1.0");
  RIO_MTLX::Document::getMatchingNodeDefs((uint64_t)this, (unsigned __int8 *)&v1972, (uint64_t)&v2030);
  v1247 = v2030.__r_.__value_.__l.__size_;
  v1246 = (uint64_t *)v2030.__r_.__value_.__r.__words[0];
  if (v2030.__r_.__value_.__r.__words[0] != v2030.__r_.__value_.__l.__size_)
  {
    v1248 = 0;
    while (1)
    {
      v1250 = *v1246;
      v1249 = v1246[1];
      *(_QWORD *)&v2021 = *v1246;
      *((_QWORD *)&v2021 + 1) = v1249;
      if (v1249)
      {
        v1251 = (unint64_t *)(v1249 + 8);
        do
          v1252 = __ldxr(v1251);
        while (__stxr(v1252 + 1, v1251));
      }
      RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(v1250, (unsigned __int8 *)&v1971, &__str);
      RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(v1250, (unsigned __int8 *)&v1970, &__p);
      v1253 = RIO_MTLX::ValueElement::getValueString((RIO_MTLX::ValueElement *)__str);
      if (*((char *)v1253 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v2026, (const std::string::value_type *)*v1253, v1253[1]);
      }
      else
      {
        v1254 = *(_OWORD *)v1253;
        v2026.__r_.__value_.__r.__words[2] = v1253[2];
        *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = v1254;
      }
      v1255 = HIBYTE(v2026.__r_.__value_.__r.__words[2]);
      v1256 = HIBYTE(v2026.__r_.__value_.__r.__words[2]);
      if ((v2026.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1257 = HIBYTE(v2026.__r_.__value_.__r.__words[2]);
      else
        v1257 = v2026.__r_.__value_.__l.__size_;
      v1258 = v1963;
      if ((v1963 & 0x80u) != 0)
        v1258 = *((_QWORD *)&v1962 + 1);
      if (v1257 == v1258)
      {
        if ((v1963 & 0x80u) == 0)
          v1259 = (unsigned __int8 *)&v1962;
        else
          v1259 = (unsigned __int8 *)v1962;
        if (SHIBYTE(v2026.__r_.__value_.__r.__words[2]) < 0)
        {
          v1261 = (void *)v2026.__r_.__value_.__r.__words[0];
          if (memcmp(v2026.__r_.__value_.__l.__data_, v1259, v2026.__r_.__value_.__l.__size_))
            goto LABEL_2303;
        }
        else if (*((_BYTE *)&v2026.__r_.__value_.__s + 23))
        {
          v1260 = &v2026;
          while (v1260->__r_.__value_.__s.__data_[0] == *v1259)
          {
            v1260 = (std::string *)((char *)v1260 + 1);
            ++v1259;
            if (!--v1255)
              goto LABEL_2300;
          }
          goto LABEL_2301;
        }
LABEL_2300:
        v1262 = (uint64_t *)__str;
        v1263 = RIO_MTLX::ValueElement::getValueString((RIO_MTLX::ValueElement *)__p.__r_.__value_.__l.__data_);
        v1264 = (__int128 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v1263);
        v1265 = RIO_MTLX::Element::setAttribute(v1262, v1264, (const std::string *)v1263);
        v1266 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
        v1267 = (__int128 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v1265);
        RIO_MTLX::Element::setAttribute(v1266, v1267, &v2026);
        v1248 = 1;
        v1256 = HIBYTE(v2026.__r_.__value_.__r.__words[2]);
      }
LABEL_2301:
      if ((v1256 & 0x80) == 0)
        goto LABEL_2304;
      v1261 = (void *)v2026.__r_.__value_.__r.__words[0];
LABEL_2303:
      operator delete(v1261);
LABEL_2304:
      v1268 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v1269 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v1270 = __ldaxr(v1269);
        while (__stlxr(v1270 - 1, v1269));
        if (!v1270)
        {
          ((void (*)(std::__shared_weak_count *))v1268->__on_zero_shared)(v1268);
          std::__shared_weak_count::__release_weak(v1268);
        }
      }
      v1271 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
      if (*((_QWORD *)&__str + 1))
      {
        v1272 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
        do
          v1273 = __ldaxr(v1272);
        while (__stlxr(v1273 - 1, v1272));
        if (!v1273)
        {
          ((void (*)(std::__shared_weak_count *))v1271->__on_zero_shared)(v1271);
          std::__shared_weak_count::__release_weak(v1271);
        }
      }
      v1274 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
      if (*((_QWORD *)&v2021 + 1))
      {
        v1275 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
        do
          v1276 = __ldaxr(v1275);
        while (__stlxr(v1276 - 1, v1275));
        if (!v1276)
        {
          ((void (*)(std::__shared_weak_count *))v1274->__on_zero_shared)(v1274);
          std::__shared_weak_count::__release_weak(v1274);
        }
      }
      v1246 += 2;
      if (v1246 == (uint64_t *)v1247)
        goto LABEL_2322;
    }
  }
  v1248 = 0;
LABEL_2322:
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  RIO_MTLX::Document::getMatchingNodeDefs((uint64_t)this, (unsigned __int8 *)&v1967, (uint64_t)&v2030);
  v1278 = v2030.__r_.__value_.__l.__size_;
  v1277 = v2030.__r_.__value_.__r.__words[0];
  if (v2030.__r_.__value_.__r.__words[0] != v2030.__r_.__value_.__l.__size_)
  {
    while (1)
    {
      v1280 = *(_QWORD **)v1277;
      v1279 = *(_QWORD *)(v1277 + 8);
      *(_QWORD *)&v2021 = *(_QWORD *)v1277;
      *((_QWORD *)&v2021 + 1) = v1279;
      if (v1279)
      {
        v1281 = (unint64_t *)(v1279 + 8);
        do
          v1282 = __ldxr(v1281);
        while (__stxr(v1282 + 1, v1281));
      }
      v1283 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v1280 + 12, (unsigned __int8 *)&v1964);
      if (!v1283)
        break;
      v1284 = (std::string *)*((_QWORD *)v1283 + 5);
      v1285 = (std::__shared_weak_count *)*((_QWORD *)v1283 + 6);
      *(_QWORD *)&__str = v1284;
      *((_QWORD *)&__str + 1) = v1285;
      if (v1285)
      {
        v1286 = (unint64_t *)&v1285->__shared_owners_;
        do
          v1287 = __ldxr(v1286);
        while (__stxr(v1287 + 1, v1286));
        if (v1284)
        {
          v1958 = v1284;
          v1959 = v1285;
          do
            v1288 = __ldxr(v1286);
          while (__stxr(v1288 + 1, v1286));
LABEL_2337:
          std::string::basic_string[abi:ne180100]<0>(&v2026, "input");
          RIO_MTLX::Element::changeChildCategory(v1280, &v1958, (uint64_t)&v2026, &v1960);
          v1289 = v1961;
          if (v1961)
          {
            v1290 = (unint64_t *)&v1961->__shared_owners_;
            do
              v1291 = __ldaxr(v1290);
            while (__stlxr(v1291 - 1, v1290));
            if (!v1291)
            {
              ((void (*)(std::__shared_weak_count *))v1289->__on_zero_shared)(v1289);
              std::__shared_weak_count::__release_weak(v1289);
            }
          }
          if (SHIBYTE(v2026.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v2026.__r_.__value_.__l.__data_);
          v1292 = v1959;
          if (v1959)
          {
            v1293 = (unint64_t *)&v1959->__shared_owners_;
            do
              v1294 = __ldaxr(v1293);
            while (__stlxr(v1294 - 1, v1293));
            if (!v1294)
            {
              ((void (*)(std::__shared_weak_count *))v1292->__on_zero_shared)(v1292);
              std::__shared_weak_count::__release_weak(v1292);
            }
          }
        }
LABEL_2349:
        v1295 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
        if (*((_QWORD *)&__str + 1))
        {
          v1296 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
          do
            v1297 = __ldaxr(v1296);
          while (__stlxr(v1297 - 1, v1296));
          if (!v1297)
          {
            ((void (*)(std::__shared_weak_count *))v1295->__on_zero_shared)(v1295);
            std::__shared_weak_count::__release_weak(v1295);
          }
        }
        goto LABEL_2354;
      }
      if (v1284)
      {
        v1958 = v1284;
        v1959 = 0;
        goto LABEL_2337;
      }
LABEL_2354:
      v1298 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
      if (*((_QWORD *)&v2021 + 1))
      {
        v1299 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
        do
          v1300 = __ldaxr(v1299);
        while (__stlxr(v1300 - 1, v1299));
        if (!v1300)
        {
          ((void (*)(std::__shared_weak_count *))v1298->__on_zero_shared)(v1298);
          std::__shared_weak_count::__release_weak(v1298);
        }
      }
      v1277 += 16;
      if (v1277 == v1278)
        goto LABEL_2360;
    }
    __str = 0uLL;
    goto LABEL_2349;
  }
LABEL_2360:
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2030;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(&__p, "dielectric_brdf", "dielectric_bsdf");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(&v1954, "dielectric_btdf", "dielectric_bsdf");
  std::string::basic_string[abi:ne180100]<0>(&v1952, "generalized_schlick_brdf");
  std::string::basic_string[abi:ne180100]<0>(&v1953, "generalized_schlick_bsdf");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v1949, "conductor_brdf", "conductor_bsdf");
  std::string::basic_string[abi:ne180100]<0>(&v1947, "sheen_brdf");
  std::string::basic_string[abi:ne180100]<0>(&v1948, "sheen_bsdf");
  std::string::basic_string[abi:ne180100]<0>(&v1945, "diffuse_brdf");
  std::string::basic_string[abi:ne180100]<0>(&v1946, "oren_nayar_diffuse_bsdf");
  std::string::basic_string[abi:ne180100]<0>(&v1943, "burley_diffuse_brdf");
  std::string::basic_string[abi:ne180100]<0>(&v1944, "burley_diffuse_bsdf");
  std::string::basic_string[abi:ne180100]<0>(v1940, "diffuse_btdf");
  std::string::basic_string[abi:ne180100]<0>(&v1942, "translucent_bsdf");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(&v1936, "subsurface_brdf", "subsurface_bsdf");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v1933, "thin_film_brdf", "thin_film_bsdf");
  std::string::basic_string[abi:ne180100]<0>(&__s, "scatter_mode");
  std::string::basic_string[abi:ne180100]<0>(&v1931, "BSDF");
  std::string::basic_string[abi:ne180100]<0>(&v1929, "layer");
  std::string::basic_string[abi:ne180100]<0>(&v1928, "top");
  std::string::basic_string[abi:ne180100]<0>(&v1926, "base");
  std::string::basic_string[abi:ne180100]<0>(v1924, "interior");
  std::string::basic_string[abi:ne180100]<0>(&v1923, "artistic_ior");
  std::string::basic_string[abi:ne180100]<0>(v1921, "complex_ior");
  std::string::basic_string[abi:ne180100]<0>(v1919, "reflectivity");
  std::string::basic_string[abi:ne180100]<0>(v1917, "edge_color");
  std::string::basic_string[abi:ne180100]<0>(&v1916, "ior");
  std::string::basic_string[abi:ne180100]<0>(&v1915, "extinction");
  std::string::basic_string[abi:ne180100]<0>(&v1914, "color3");
  std::string::basic_string[abi:ne180100]<0>(&v1913, "vector3");
  std::string::basic_string[abi:ne180100]<0>(&v1912, "convert");
  std::string::basic_string[abi:ne180100]<0>(v1910, "in");
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v1909, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v1909 = __s;
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)&__p, &v1907);
  RIO_MTLX::Document::upgradeVersion(void)::$_0::operator()((uint64_t)&v1909, &v1907, &v1957);
  v1301 = v1908;
  if (v1908)
  {
    v1302 = (unint64_t *)&v1908->__shared_owners_;
    do
      v1303 = __ldaxr(v1302);
    while (__stlxr(v1303 - 1, v1302));
    if (!v1303)
    {
      ((void (*)(std::__shared_weak_count *))v1301->__on_zero_shared)(v1301);
      std::__shared_weak_count::__release_weak(v1301);
    }
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)&v1952, &v1905);
  RIO_MTLX::Document::upgradeVersion(void)::$_0::operator()((uint64_t)&v1909, &v1905, &v1953);
  v1304 = v1906;
  if (v1906)
  {
    v1305 = (unint64_t *)&v1906->__shared_owners_;
    do
      v1306 = __ldaxr(v1305);
    while (__stlxr(v1306 - 1, v1305));
    if (!v1306)
    {
      ((void (*)(std::__shared_weak_count *))v1304->__on_zero_shared)(v1304);
      std::__shared_weak_count::__release_weak(v1304);
    }
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)v1949, &v1903);
  if (v1903)
    RIO_MTLX::Element::setName((std::string *)v1903, &v1951);
  v1307 = v1904;
  if (v1904)
  {
    v1308 = (unint64_t *)&v1904->__shared_owners_;
    do
      v1309 = __ldaxr(v1308);
    while (__stlxr(v1309 - 1, v1308));
    if (!v1309)
    {
      ((void (*)(std::__shared_weak_count *))v1307->__on_zero_shared)(v1307);
      std::__shared_weak_count::__release_weak(v1307);
    }
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)&v1947, &v1901);
  if (v1901)
    RIO_MTLX::Element::setName((std::string *)v1901, &v1948);
  v1310 = v1902;
  if (v1902)
  {
    v1311 = (unint64_t *)&v1902->__shared_owners_;
    do
      v1312 = __ldaxr(v1311);
    while (__stlxr(v1312 - 1, v1311));
    if (!v1312)
    {
      ((void (*)(std::__shared_weak_count *))v1310->__on_zero_shared)(v1310);
      std::__shared_weak_count::__release_weak(v1310);
    }
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)&v1945, &v1899);
  if (v1899)
    RIO_MTLX::Element::setName((std::string *)v1899, &v1946);
  v1313 = v1900;
  if (v1900)
  {
    v1314 = (unint64_t *)&v1900->__shared_owners_;
    do
      v1315 = __ldaxr(v1314);
    while (__stlxr(v1315 - 1, v1314));
    if (!v1315)
    {
      ((void (*)(std::__shared_weak_count *))v1313->__on_zero_shared)(v1313);
      std::__shared_weak_count::__release_weak(v1313);
    }
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)&v1943, &v1897);
  if (v1897)
    RIO_MTLX::Element::setName((std::string *)v1897, &v1944);
  v1316 = v1898;
  if (v1898)
  {
    v1317 = (unint64_t *)&v1898->__shared_owners_;
    do
      v1318 = __ldaxr(v1317);
    while (__stlxr(v1318 - 1, v1317));
    if (!v1318)
    {
      ((void (*)(std::__shared_weak_count *))v1316->__on_zero_shared)(v1316);
      std::__shared_weak_count::__release_weak(v1316);
    }
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)v1940, &v1895);
  if (v1895)
    RIO_MTLX::Element::setName((std::string *)v1895, &v1942);
  v1319 = v1896;
  if (v1896)
  {
    v1320 = (unint64_t *)&v1896->__shared_owners_;
    do
      v1321 = __ldaxr(v1320);
    while (__stlxr(v1321 - 1, v1320));
    if (!v1321)
    {
      ((void (*)(std::__shared_weak_count *))v1319->__on_zero_shared)(v1319);
      std::__shared_weak_count::__release_weak(v1319);
    }
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)&v1936, &v1893);
  if (v1893)
    RIO_MTLX::Element::setName((std::string *)v1893, &v1939);
  v1322 = v1894;
  if (v1894)
  {
    v1323 = (unint64_t *)&v1894->__shared_owners_;
    do
      v1324 = __ldaxr(v1323);
    while (__stlxr(v1324 - 1, v1323));
    if (!v1324)
    {
      ((void (*)(std::__shared_weak_count *))v1322->__on_zero_shared)(v1322);
      std::__shared_weak_count::__release_weak(v1322);
    }
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)v1933, &v1891);
  if (v1891)
    RIO_MTLX::Element::setName((std::string *)v1891, &v1935);
  v1325 = v1892;
  if (v1892)
  {
    v1326 = (unint64_t *)&v1892->__shared_owners_;
    do
      v1327 = __ldaxr(v1326);
    while (__stlxr(v1327 - 1, v1326));
    if (!v1327)
    {
      ((void (*)(std::__shared_weak_count *))v1325->__on_zero_shared)(v1325);
      std::__shared_weak_count::__release_weak(v1325);
    }
  }
  RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, (unsigned __int8 *)&v1954);
  RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, (unsigned __int8 *)v1921);
  if (SHIBYTE(v1928.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v2030, v1928.__r_.__value_.__l.__data_, v1928.__r_.__value_.__l.__size_);
  else
    v2030 = v1928;
  if (SHIBYTE(v1927) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v2031, (const std::string::value_type *)v1926, *((std::string::size_type *)&v1926 + 1));
  }
  else
  {
    v2031 = v1926;
    *(_QWORD *)v2032 = v1927;
  }
  if (SHIBYTE(v1930) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v2032[8], (const std::string::value_type *)v1929, *((std::string::size_type *)&v1929 + 1));
  }
  else
  {
    *(_OWORD *)&v2032[8] = v1929;
    v2033 = v1930;
  }
  if (SHIBYTE(v1931.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v2034, v1931.__r_.__value_.__l.__data_, v1931.__r_.__value_.__l.__size_);
  else
    v2034 = v1931;
  v1889 = 0;
  v1888 = 0;
  v1890 = 0;
  v1886 = 0;
  v1885 = 0;
  v1887 = 0;
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v2026);
  *((_QWORD *)&v2029 + 1) = 0;
  v2021 = *(_OWORD *)&v2026.__r_.__value_.__l.__data_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v1328 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v1329 = __ldxr(v1328);
    while (__stxr(v1329 + 1, v1328));
  }
  v2023 = 0;
  v2022 = 0;
  v2024 = 0;
  v1330 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)&v2022, (_QWORD *)v2026.__r_.__value_.__r.__words[2], v2027, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v2027 - v2026.__r_.__value_.__r.__words[2]) >> 3));
  v2025 = v2029;
  RIO_MTLX::NULL_TREE_ITERATOR((RIO_MTLX *)v1330);
  __str = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1))
  {
    v1331 = (unint64_t *)(*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8);
    do
      v1332 = __ldxr(v1331);
    while (__stxr(v1332 + 1, v1331));
  }
  __str_16 = 0uLL;
  v1883 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)&__str_16, (_QWORD *)qword_255E54218, unk_255E54220, 0xAAAAAAAAAAAAAAABLL * ((unk_255E54220 - qword_255E54218) >> 3));
  v1884 = xmmword_255E54230;
  while (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v2021, (uint64_t)&__str))
  {
    v1333 = v2021;
    v1880 = v2021;
    if (*((_QWORD *)&v2021 + 1))
    {
      v1334 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
      do
        v1335 = __ldxr(v1334);
      while (__stxr(v1335 + 1, v1334));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::Node>(v1333, &p_str);
    v1336 = (std::string *)p_str;
    if (p_str)
    {
      v1337 = (const void **)((char *)p_str + 24);
      v1338 = (RIO_MTLX::Element *)*((unsigned __int8 *)p_str + 47);
      if ((v1248 & 1) == 0)
      {
        v1339 = *((_QWORD *)p_str + 4);
        goto LABEL_2463;
      }
      v1339 = *((_QWORD *)p_str + 4);
      if ((char)v1338 >= 0)
        v1340 = (std::__shared_weak_count *)*((unsigned __int8 *)p_str + 47);
      else
        v1340 = (std::__shared_weak_count *)*((_QWORD *)p_str + 4);
      v1341 = (std::__shared_weak_count *)v1974;
      if ((v1974 & 0x80u) != 0)
        v1341 = v1973;
      if (v1340 == v1341)
      {
        if ((v1974 & 0x80u) == 0)
          v1342 = (unsigned __int8 *)&v1972;
        else
          v1342 = (unsigned __int8 *)v1972;
        if ((v1338 & 0x80) != 0)
        {
          if (memcmp(*v1337, v1342, *((_QWORD *)p_str + 4)))
            goto LABEL_2463;
        }
        else if (*((_BYTE *)p_str + 47))
        {
          v1343 = (unsigned __int8 *)p_str + 24;
          v1344 = *((unsigned __int8 *)p_str + 47);
          while (*v1343 == *v1342)
          {
            ++v1343;
            ++v1342;
            if (!--v1344)
              goto LABEL_2532;
          }
          goto LABEL_2463;
        }
LABEL_2532:
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v1336, (unsigned __int8 *)&v1971, &v1873);
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)p_str, (unsigned __int8 *)&v1970, &v1860);
        v1378 = (std::string *)v1873.__r_.__value_.__r.__words[0];
        if (v1873.__r_.__value_.__r.__words[0])
        {
          if (v1860.__r_.__value_.__r.__words[0])
          {
            v1379 = (std::string *)RIO_MTLX::EMPTY_STRING(v1377);
            RIO_MTLX::Element::setName(v1378, v1379);
            RIO_MTLX::Element::setName((std::string *)v1860.__r_.__value_.__l.__data_, &v1971);
            RIO_MTLX::Element::setName((std::string *)v1873.__r_.__value_.__l.__data_, &v1970);
            goto LABEL_2602;
          }
          RIO_MTLX::Element::setName((std::string *)v1873.__r_.__value_.__l.__data_, &v1970);
        }
        v1354 = v1860.__r_.__value_.__r.__words[0];
        if (v1860.__r_.__value_.__r.__words[0])
          RIO_MTLX::Element::setName((std::string *)v1860.__r_.__value_.__l.__data_, &v1971);
LABEL_2602:
        v1406 = (std::__shared_weak_count *)v1860.__r_.__value_.__l.__size_;
        if (v1860.__r_.__value_.__l.__size_)
        {
          v1407 = (unint64_t *)(v1860.__r_.__value_.__l.__size_ + 8);
          do
            v1408 = __ldaxr(v1407);
          while (__stlxr(v1408 - 1, v1407));
          if (!v1408)
          {
            ((void (*)(std::__shared_weak_count *))v1406->__on_zero_shared)(v1406);
            std::__shared_weak_count::__release_weak(v1406);
          }
        }
        v1374 = (std::__shared_weak_count *)v1873.__r_.__value_.__l.__size_;
        if (v1873.__r_.__value_.__l.__size_)
        {
          v1409 = (unint64_t *)(v1873.__r_.__value_.__l.__size_ + 8);
          do
            v1376 = __ldaxr(v1409);
          while (__stlxr(v1376 - 1, v1409));
LABEL_2804:
          if (!v1376)
          {
            ((void (*)(std::__shared_weak_count *))v1374->__on_zero_shared)(v1374);
            std::__shared_weak_count::__release_weak(v1374);
          }
        }
        goto LABEL_2814;
      }
LABEL_2463:
      if ((char)v1338 >= 0)
        v1345 = v1338;
      else
        v1345 = (RIO_MTLX::Element *)v1339;
      v1346 = (RIO_MTLX::Element *)v1969;
      if ((v1969 & 0x80u) != 0)
        v1346 = (RIO_MTLX::Element *)v1968;
      if (v1345 == v1346)
      {
        if ((v1969 & 0x80u) == 0)
          v1347 = (unsigned __int8 *)&v1967;
        else
          v1347 = (unsigned __int8 *)v1967;
        if ((v1338 & 0x80) != 0)
        {
          if (memcmp(*v1337, v1347, v1339))
            goto LABEL_2479;
        }
        else if ((_DWORD)v1338)
        {
          v1348 = v1336 + 1;
          v1349 = v1338;
          while (v1348->__r_.__value_.__s.__data_[0] == *v1347)
          {
            v1348 = (std::string *)((char *)v1348 + 1);
            ++v1347;
            v1349 = (RIO_MTLX::Element *)((char *)v1349 - 1);
            if (!v1349)
              goto LABEL_2491;
          }
          goto LABEL_2479;
        }
LABEL_2491:
        v1354 = (std::string::size_type)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v1336[4].__r_.__value_.__r.__words, (unsigned __int8 *)&v1964);
        if (v1354)
        {
          v1355 = *(std::string **)(v1354 + 40);
          v1356 = *(_QWORD *)(v1354 + 48);
          v1860.__r_.__value_.__r.__words[0] = (std::string::size_type)v1355;
          v1860.__r_.__value_.__l.__size_ = v1356;
          if (v1356)
          {
            v1357 = (unint64_t *)(v1356 + 8);
            do
              v1358 = __ldxr(v1357);
            while (__stxr(v1358 + 1, v1357));
          }
          if (v1355)
          {
            v1359 = p_str;
            v1874 = v1355;
            v1875 = v1860.__r_.__value_.__l.__size_;
            if (v1860.__r_.__value_.__l.__size_)
            {
              v1360 = (unint64_t *)(v1860.__r_.__value_.__l.__size_ + 8);
              do
                v1361 = __ldxr(v1360);
              while (__stxr(v1361 + 1, v1360));
            }
            std::string::basic_string[abi:ne180100]<0>(&v1873, "input");
            RIO_MTLX::Element::changeChildCategory(v1359, &v1874, (uint64_t)&v1873, &v1876);
            v1362 = v1877;
            if (v1877)
            {
              v1363 = (unint64_t *)&v1877->__shared_owners_;
              do
                v1364 = __ldaxr(v1363);
              while (__stlxr(v1364 - 1, v1363));
              if (!v1364)
              {
                ((void (*)(std::__shared_weak_count *))v1362->__on_zero_shared)(v1362);
                std::__shared_weak_count::__release_weak(v1362);
              }
            }
            if (SHIBYTE(v1873.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1873.__r_.__value_.__l.__data_);
            v1365 = (std::__shared_weak_count *)v1875;
            if (v1875)
            {
              v1366 = (unint64_t *)(v1875 + 8);
              do
                v1367 = __ldaxr(v1366);
              while (__stlxr(v1367 - 1, v1366));
              if (!v1367)
              {
                ((void (*)(std::__shared_weak_count *))v1365->__on_zero_shared)(v1365);
                std::__shared_weak_count::__release_weak(v1365);
              }
            }
          }
        }
        else
        {
          *(_OWORD *)&v1860.__r_.__value_.__l.__data_ = 0uLL;
        }
        v1374 = (std::__shared_weak_count *)v1860.__r_.__value_.__l.__size_;
        if (v1860.__r_.__value_.__l.__size_)
        {
          v1380 = (unint64_t *)(v1860.__r_.__value_.__l.__size_ + 8);
          do
            v1376 = __ldaxr(v1380);
          while (__stlxr(v1376 - 1, v1380));
          goto LABEL_2804;
        }
LABEL_2814:
        v1530 = p_str;
        v1531 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v1354);
        RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>((uint64_t)v1530, (unsigned __int8 *)v1531, (uint64_t)&v1873);
        v1533 = v1873.__r_.__value_.__l.__size_;
        v1532 = v1873.__r_.__value_.__r.__words[0];
        while (2)
        {
          if (v1532 == v1533)
          {
            v1860.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1873;
            std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1860);
            goto LABEL_2929;
          }
          v1534 = *(RIO_MTLX::PortElement **)v1532;
          v1535 = *(_QWORD *)(v1532 + 8);
          v1860.__r_.__value_.__r.__words[0] = *(_QWORD *)v1532;
          v1860.__r_.__value_.__l.__size_ = v1535;
          if (v1535)
          {
            v1536 = (unint64_t *)(v1535 + 8);
            do
              v1537 = __ldxr(v1536);
            while (__stxr(v1537 + 1, v1536));
          }
          v1538 = RIO_MTLX::PortElement::getOutputString(v1534);
          v1539 = *((unsigned __int8 *)v1538 + 23);
          if ((v1539 & 0x80u) == 0)
            v1540 = *((unsigned __int8 *)v1538 + 23);
          else
            v1540 = v1538[1];
          v1541 = HIBYTE(v1916.__r_.__value_.__r.__words[2]);
          if ((v1916.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v1541 = v1916.__r_.__value_.__l.__size_;
          if (v1540 == v1541)
          {
            if ((v1916.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v1542 = &v1916;
            else
              v1542 = (std::string *)v1916.__r_.__value_.__r.__words[0];
            if ((v1539 & 0x80) != 0)
            {
              if (memcmp((const void *)*v1538, v1542, v1538[1]))
                goto LABEL_2849;
            }
            else if (*((_BYTE *)v1538 + 23))
            {
              while (*(unsigned __int8 *)v1538 == v1542->__r_.__value_.__s.__data_[0])
              {
                v1538 = (uint64_t *)((char *)v1538 + 1);
                v1542 = (std::string *)((char *)v1542 + 1);
                if (!--v1539)
                  goto LABEL_2834;
              }
              goto LABEL_2849;
            }
LABEL_2834:
            v1543 = (unsigned __int8 *)(*(uint64_t (**)(std::string::size_type, std::string *))(*(_QWORD *)v1860.__r_.__value_.__l.__data_ + 56))(v1860.__r_.__value_.__r.__words[0], v1542);
            v1544 = v1543[23];
            if ((v1544 & 0x80u) == 0)
              v1545 = v1543[23];
            else
              v1545 = *((_QWORD *)v1543 + 1);
            v1546 = HIBYTE(v1913.__r_.__value_.__r.__words[2]);
            if ((v1913.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v1546 = v1913.__r_.__value_.__l.__size_;
            if (v1545 != v1546)
              goto LABEL_2849;
            if ((v1913.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v1547 = &v1913;
            else
              v1547 = (std::string *)v1913.__r_.__value_.__r.__words[0];
            if ((v1544 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v1543, v1547, *((_QWORD *)v1543 + 1)))
                goto LABEL_2849;
            }
            else if (v1543[23])
            {
              while (*v1543 == v1547->__r_.__value_.__s.__data_[0])
              {
                ++v1543;
                v1547 = (std::string *)((char *)v1547 + 1);
                if (!--v1544)
                  goto LABEL_2878;
              }
              goto LABEL_2849;
            }
LABEL_2878:
            (*(void (**)(std::string **__return_ptr))(*(_QWORD *)v1860.__r_.__value_.__l.__data_ + 64))(&v1863);
            if (v1863)
            {
              v1558 = HIBYTE(v1863[1].__r_.__value_.__r.__words[2]);
              if ((v1558 & 0x80u) == 0)
                v1559 = (void *)HIBYTE(v1863[1].__r_.__value_.__r.__words[2]);
              else
                v1559 = (void *)v1863[1].__r_.__value_.__l.__size_;
              v1560 = HIBYTE(v1923.__r_.__value_.__r.__words[2]);
              if ((v1923.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v1560 = v1923.__r_.__value_.__l.__size_;
              if (v1559 == (void *)v1560)
              {
                p_data = (const void **)&v1863[1].__r_.__value_.__l.__data_;
                if ((v1923.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v1562 = &v1923;
                else
                  v1562 = (std::string *)v1923.__r_.__value_.__r.__words[0];
                if ((v1558 & 0x80) != 0)
                {
                  if (memcmp(*p_data, v1562, v1863[1].__r_.__value_.__l.__size_))
                    goto LABEL_2911;
                }
                else if (*((_BYTE *)&v1863[1].__r_.__value_.__s + 23))
                {
                  while (*(unsigned __int8 *)p_data == v1562->__r_.__value_.__s.__data_[0])
                  {
                    p_data = (const void **)((char *)p_data + 1);
                    v1562 = (std::string *)((char *)v1562 + 1);
                    if (!--v1558)
                      goto LABEL_2910;
                  }
                  goto LABEL_2911;
                }
LABEL_2910:
                std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100](&v1888, (__int128 *)&v1860);
              }
            }
LABEL_2911:
            v1568 = v1864;
            if (v1864)
            {
              v1569 = (unint64_t *)&v1864->__shared_owners_;
              do
                v1570 = __ldaxr(v1569);
              while (__stlxr(v1570 - 1, v1569));
LABEL_2920:
              if (!v1570)
              {
                ((void (*)(std::__shared_weak_count *))v1568->__on_zero_shared)(v1568);
                std::__shared_weak_count::__release_weak(v1568);
              }
            }
            goto LABEL_2922;
          }
LABEL_2849:
          v1548 = RIO_MTLX::PortElement::getOutputString((RIO_MTLX::PortElement *)v1860.__r_.__value_.__l.__data_);
          v1549 = *((unsigned __int8 *)v1548 + 23);
          if ((v1549 & 0x80u) == 0)
            v1550 = *((unsigned __int8 *)v1548 + 23);
          else
            v1550 = v1548[1];
          v1551 = HIBYTE(v1915.__r_.__value_.__r.__words[2]);
          if ((v1915.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v1551 = v1915.__r_.__value_.__l.__size_;
          if (v1550 != v1551)
            goto LABEL_2922;
          if ((v1915.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v1552 = &v1915;
          else
            v1552 = (std::string *)v1915.__r_.__value_.__r.__words[0];
          if ((v1549 & 0x80) != 0)
          {
            if (memcmp((const void *)*v1548, v1552, v1548[1]))
              goto LABEL_2922;
          }
          else if (*((_BYTE *)v1548 + 23))
          {
            while (*(unsigned __int8 *)v1548 == v1552->__r_.__value_.__s.__data_[0])
            {
              v1548 = (uint64_t *)((char *)v1548 + 1);
              v1552 = (std::string *)((char *)v1552 + 1);
              if (!--v1549)
                goto LABEL_2864;
            }
            goto LABEL_2922;
          }
LABEL_2864:
          v1553 = (unsigned __int8 *)(*(uint64_t (**)(std::string::size_type, std::string *))(*(_QWORD *)v1860.__r_.__value_.__l.__data_ + 56))(v1860.__r_.__value_.__r.__words[0], v1552);
          v1554 = v1553[23];
          if ((v1554 & 0x80u) == 0)
            v1555 = v1553[23];
          else
            v1555 = *((_QWORD *)v1553 + 1);
          v1556 = HIBYTE(v1913.__r_.__value_.__r.__words[2]);
          if ((v1913.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v1556 = v1913.__r_.__value_.__l.__size_;
          if (v1555 != v1556)
            goto LABEL_2922;
          if ((v1913.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v1557 = &v1913;
          else
            v1557 = (std::string *)v1913.__r_.__value_.__r.__words[0];
          if ((v1554 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v1553, v1557, *((_QWORD *)v1553 + 1)))
              goto LABEL_2922;
          }
          else if (v1553[23])
          {
            while (*v1553 == v1557->__r_.__value_.__s.__data_[0])
            {
              ++v1553;
              v1557 = (std::string *)((char *)v1557 + 1);
              if (!--v1554)
                goto LABEL_2894;
            }
            goto LABEL_2922;
          }
LABEL_2894:
          (*(void (**)(std::string **__return_ptr))(*(_QWORD *)v1860.__r_.__value_.__l.__data_ + 64))(&v1863);
          if (v1863)
          {
            v1563 = HIBYTE(v1863[1].__r_.__value_.__r.__words[2]);
            if ((v1563 & 0x80u) == 0)
              v1564 = (void *)HIBYTE(v1863[1].__r_.__value_.__r.__words[2]);
            else
              v1564 = (void *)v1863[1].__r_.__value_.__l.__size_;
            v1565 = HIBYTE(v1923.__r_.__value_.__r.__words[2]);
            if ((v1923.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v1565 = v1923.__r_.__value_.__l.__size_;
            if (v1564 == (void *)v1565)
            {
              v1566 = (const void **)&v1863[1].__r_.__value_.__l.__data_;
              if ((v1923.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v1567 = &v1923;
              else
                v1567 = (std::string *)v1923.__r_.__value_.__r.__words[0];
              if ((v1563 & 0x80) != 0)
              {
                if (memcmp(*v1566, v1567, v1863[1].__r_.__value_.__l.__size_))
                  goto LABEL_2917;
              }
              else if (*((_BYTE *)&v1863[1].__r_.__value_.__s + 23))
              {
                while (*(unsigned __int8 *)v1566 == v1567->__r_.__value_.__s.__data_[0])
                {
                  v1566 = (const void **)((char *)v1566 + 1);
                  v1567 = (std::string *)((char *)v1567 + 1);
                  if (!--v1563)
                    goto LABEL_2916;
                }
                goto LABEL_2917;
              }
LABEL_2916:
              std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100](&v1885, (__int128 *)&v1860);
            }
          }
LABEL_2917:
          v1568 = v1864;
          if (v1864)
          {
            v1571 = (unint64_t *)&v1864->__shared_owners_;
            do
              v1570 = __ldaxr(v1571);
            while (__stlxr(v1570 - 1, v1571));
            goto LABEL_2920;
          }
LABEL_2922:
          v1572 = (std::__shared_weak_count *)v1860.__r_.__value_.__l.__size_;
          if (v1860.__r_.__value_.__l.__size_)
          {
            v1573 = (unint64_t *)(v1860.__r_.__value_.__l.__size_ + 8);
            do
              v1574 = __ldaxr(v1573);
            while (__stlxr(v1574 - 1, v1573));
            if (!v1574)
            {
              ((void (*)(std::__shared_weak_count *))v1572->__on_zero_shared)(v1572);
              std::__shared_weak_count::__release_weak(v1572);
            }
          }
          v1532 += 16;
          continue;
        }
      }
LABEL_2479:
      v1350 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v1350 = __p.__r_.__value_.__l.__size_;
      if (v1345 == (RIO_MTLX::Element *)v1350)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((v1338 & 0x80) != 0)
        {
          if (memcmp(*v1337, p_p, v1339))
            goto LABEL_2512;
        }
        else if ((_DWORD)v1338)
        {
          v1352 = v1336 + 1;
          v1353 = v1338;
          while (v1352->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
          {
            v1352 = (std::string *)((char *)v1352 + 1);
            p_p = (std::string *)((char *)p_p + 1);
            v1353 = (RIO_MTLX::Element *)((char *)v1353 - 1);
            if (!v1353)
              goto LABEL_2524;
          }
          goto LABEL_2512;
        }
LABEL_2524:
        std::string::operator=(v1336 + 1, &v1957);
        v1871 = p_str;
        v1872 = v1879;
        if (v1879)
        {
          v1372 = (unint64_t *)&v1879->__shared_owners_;
          do
            v1373 = __ldxr(v1372);
          while (__stxr(v1373 + 1, v1372));
        }
        RIO_MTLX::Document::upgradeVersion(void)::$_1::operator()(&v2030, (uint64_t *)&v1871);
        v1374 = v1872;
        if (v1872)
        {
          v1375 = (unint64_t *)&v1872->__shared_owners_;
          do
            v1376 = __ldaxr(v1375);
          while (__stlxr(v1376 - 1, v1375));
          goto LABEL_2804;
        }
        goto LABEL_2814;
      }
LABEL_2512:
      v1368 = HIBYTE(v1954.__r_.__value_.__r.__words[2]);
      if ((v1954.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v1368 = v1954.__r_.__value_.__l.__size_;
      if (v1345 == (RIO_MTLX::Element *)v1368)
      {
        if ((v1954.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1369 = &v1954;
        else
          v1369 = (std::string *)v1954.__r_.__value_.__r.__words[0];
        if ((v1338 & 0x80) != 0)
        {
          if (memcmp(*v1337, v1369, v1339))
            goto LABEL_2541;
        }
        else if ((_DWORD)v1338)
        {
          v1370 = v1336 + 1;
          v1371 = v1338;
          while (v1370->__r_.__value_.__s.__data_[0] == v1369->__r_.__value_.__s.__data_[0])
          {
            v1370 = (std::string *)((char *)v1370 + 1);
            v1369 = (std::string *)((char *)v1369 + 1);
            v1371 = (RIO_MTLX::Element *)((char *)v1371 - 1);
            if (!v1371)
              goto LABEL_2553;
          }
          goto LABEL_2541;
        }
LABEL_2553:
        std::string::operator=(v1336 + 1, &v1955);
        RIO_MTLX::Element::removeChildOfType<RIO_MTLX::Input>(p_str, (unsigned __int8 *)v1924);
        v1385 = p_str;
        v1387 = (const std::string *)RIO_MTLX::STRING_TYPE_STRING(v1386);
        RIO_MTLX::InterfaceElement::addInput(v1385, (uint64_t)&__s, v1387, (uint64_t *)&v1860);
        v1388 = (uint64_t *)v1860.__r_.__value_.__r.__words[0];
        v1389 = (RIO_MTLX::ValueElement *)std::string::basic_string[abi:ne180100]<0>(&v1873, "T");
        v1390 = (__int128 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v1389);
        v1354 = (std::string::size_type)RIO_MTLX::Element::setAttribute(v1388, v1390, &v1873);
        if (SHIBYTE(v1873.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1873.__r_.__value_.__l.__data_);
        v1374 = (std::__shared_weak_count *)v1860.__r_.__value_.__l.__size_;
        if (v1860.__r_.__value_.__l.__size_)
        {
          v1391 = (unint64_t *)(v1860.__r_.__value_.__l.__size_ + 8);
          do
            v1376 = __ldaxr(v1391);
          while (__stlxr(v1376 - 1, v1391));
          goto LABEL_2804;
        }
        goto LABEL_2814;
      }
LABEL_2541:
      v1381 = HIBYTE(v1952.__r_.__value_.__r.__words[2]);
      if ((v1952.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v1381 = v1952.__r_.__value_.__l.__size_;
      if (v1345 == (RIO_MTLX::Element *)v1381)
      {
        if ((v1952.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1382 = &v1952;
        else
          v1382 = (std::string *)v1952.__r_.__value_.__r.__words[0];
        if ((v1338 & 0x80) != 0)
        {
          if (memcmp(*v1337, v1382, v1339))
            goto LABEL_2560;
        }
        else if ((_DWORD)v1338)
        {
          v1383 = v1336 + 1;
          v1384 = v1338;
          while (v1383->__r_.__value_.__s.__data_[0] == v1382->__r_.__value_.__s.__data_[0])
          {
            v1383 = (std::string *)((char *)v1383 + 1);
            v1382 = (std::string *)((char *)v1382 + 1);
            v1384 = (RIO_MTLX::Element *)((char *)v1384 - 1);
            if (!v1384)
              goto LABEL_2572;
          }
          goto LABEL_2560;
        }
LABEL_2572:
        std::string::operator=(v1336 + 1, &v1953);
        v1869 = p_str;
        v1870 = v1879;
        if (v1879)
        {
          v1396 = (unint64_t *)&v1879->__shared_owners_;
          do
            v1397 = __ldxr(v1396);
          while (__stxr(v1397 + 1, v1396));
        }
        RIO_MTLX::Document::upgradeVersion(void)::$_1::operator()(&v2030, (uint64_t *)&v1869);
        v1374 = v1870;
        if (v1870)
        {
          v1398 = (unint64_t *)&v1870->__shared_owners_;
          do
            v1376 = __ldaxr(v1398);
          while (__stlxr(v1376 - 1, v1398));
          goto LABEL_2804;
        }
        goto LABEL_2814;
      }
LABEL_2560:
      v1392 = HIBYTE(v1947.__r_.__value_.__r.__words[2]);
      if ((v1947.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v1392 = v1947.__r_.__value_.__l.__size_;
      if (v1345 == (RIO_MTLX::Element *)v1392)
      {
        if ((v1947.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1393 = &v1947;
        else
          v1393 = (std::string *)v1947.__r_.__value_.__r.__words[0];
        if ((v1338 & 0x80) != 0)
        {
          if (memcmp(*v1337, v1393, v1339))
            goto LABEL_2580;
        }
        else if ((_DWORD)v1338)
        {
          v1394 = v1336 + 1;
          v1395 = v1338;
          while (v1394->__r_.__value_.__s.__data_[0] == v1393->__r_.__value_.__s.__data_[0])
          {
            v1394 = (std::string *)((char *)v1394 + 1);
            v1393 = (std::string *)((char *)v1393 + 1);
            v1395 = (RIO_MTLX::Element *)((char *)v1395 - 1);
            if (!v1395)
              goto LABEL_2592;
          }
          goto LABEL_2580;
        }
LABEL_2592:
        std::string::operator=(v1336 + 1, &v1948);
        v1867 = p_str;
        v1868 = v1879;
        if (v1879)
        {
          v1403 = (unint64_t *)&v1879->__shared_owners_;
          do
            v1404 = __ldxr(v1403);
          while (__stxr(v1404 + 1, v1403));
        }
        RIO_MTLX::Document::upgradeVersion(void)::$_1::operator()(&v2030, (uint64_t *)&v1867);
        v1374 = v1868;
        if (v1868)
        {
          v1405 = (unint64_t *)&v1868->__shared_owners_;
          do
            v1376 = __ldaxr(v1405);
          while (__stlxr(v1376 - 1, v1405));
          goto LABEL_2804;
        }
        goto LABEL_2814;
      }
LABEL_2580:
      v1399 = (RIO_MTLX::Element *)v1934;
      if ((v1934 & 0x80u) != 0)
        v1399 = v1933[1];
      if (v1345 == v1399)
      {
        if ((v1934 & 0x80u) == 0)
          v1400 = v1933;
        else
          v1400 = (RIO_MTLX::Element **)v1933[0];
        if ((v1338 & 0x80) != 0)
        {
          if (memcmp(*v1337, v1400, v1339))
            goto LABEL_2612;
        }
        else if ((_DWORD)v1338)
        {
          v1401 = v1336 + 1;
          v1402 = v1338;
          while (v1401->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v1400)
          {
            v1401 = (std::string *)((char *)v1401 + 1);
            v1400 = (RIO_MTLX::Element **)((char *)v1400 + 1);
            v1402 = (RIO_MTLX::Element *)((char *)v1402 - 1);
            if (!v1402)
              goto LABEL_2624;
          }
          goto LABEL_2612;
        }
LABEL_2624:
        std::string::operator=(v1336 + 1, &v1935);
        v1865 = p_str;
        v1866 = v1879;
        if (v1879)
        {
          v1414 = (unint64_t *)&v1879->__shared_owners_;
          do
            v1415 = __ldxr(v1414);
          while (__stxr(v1415 + 1, v1414));
        }
        RIO_MTLX::Document::upgradeVersion(void)::$_1::operator()(&v2030, (uint64_t *)&v1865);
        v1374 = v1866;
        if (v1866)
        {
          v1416 = (unint64_t *)&v1866->__shared_owners_;
          do
            v1376 = __ldaxr(v1416);
          while (__stlxr(v1376 - 1, v1416));
          goto LABEL_2804;
        }
        goto LABEL_2814;
      }
LABEL_2612:
      v1410 = (RIO_MTLX::Node *)v1950;
      if ((v1950 & 0x80u) != 0)
        v1410 = v1949[1];
      if (v1345 == v1410)
      {
        if ((v1950 & 0x80u) == 0)
          v1411 = v1949;
        else
          v1411 = (RIO_MTLX::Node **)v1949[0];
        if ((v1338 & 0x80) != 0)
        {
          if (memcmp(*v1337, v1411, v1339))
            goto LABEL_2632;
        }
        else if ((_DWORD)v1338)
        {
          v1412 = v1336 + 1;
          v1413 = v1338;
          while (v1412->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v1411)
          {
            v1412 = (std::string *)((char *)v1412 + 1);
            v1411 = (RIO_MTLX::Node **)((char *)v1411 + 1);
            v1413 = (RIO_MTLX::Element *)((char *)v1413 - 1);
            if (!v1413)
              goto LABEL_2647;
          }
          goto LABEL_2632;
        }
LABEL_2647:
        std::string::operator=(v1336 + 1, &v1951);
        v1423 = p_str;
        *(_OWORD *)&v1873.__r_.__value_.__l.__data_ = 0uLL;
        v1424 = (std::__shared_weak_count *)*((_QWORD *)p_str + 29);
        if (v1424)
        {
          v1873.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v1424);
          if (v1873.__r_.__value_.__l.__size_)
          {
            v1424 = (std::__shared_weak_count *)*((_QWORD *)v1423 + 28);
            v1873.__r_.__value_.__r.__words[0] = (std::string::size_type)v1424;
          }
          else
          {
            v1424 = (std::__shared_weak_count *)v1873.__r_.__value_.__r.__words[0];
          }
        }
        RIO_MTLX::Element::asA<RIO_MTLX::GraphElement>((uint64_t)v1424, &v1863);
        v1439 = (std::__shared_weak_count *)v1873.__r_.__value_.__l.__size_;
        if (v1873.__r_.__value_.__l.__size_)
        {
          v1440 = (unint64_t *)(v1873.__r_.__value_.__l.__size_ + 8);
          do
            v1441 = __ldaxr(v1440);
          while (__stlxr(v1441 - 1, v1440));
          if (!v1441)
          {
            ((void (*)(std::__shared_weak_count *))v1439->__on_zero_shared)(v1439);
            std::__shared_weak_count::__release_weak(v1439);
          }
        }
        v1442 = (RIO_MTLX::Node *)v1863;
        v1443 = p_str;
        if (*((char *)p_str + 71) >= 0)
          v1444 = *((unsigned __int8 *)p_str + 71);
        else
          v1444 = *((_QWORD *)p_str + 7);
        std::string::basic_string[abi:ne180100]((uint64_t)&v1873, v1444 + 14);
        if ((v1873.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1445 = &v1873;
        else
          v1445 = (std::string *)v1873.__r_.__value_.__r.__words[0];
        if (v1444)
        {
          if (*((char *)v1443 + 71) >= 0)
            v1446 = (char *)v1443 + 48;
          else
            v1446 = (const void *)*((_QWORD *)v1443 + 6);
          memmove(v1445, v1446, v1444);
        }
        strcpy((char *)v1445 + v1444, "__artistic_ior");
        std::string::basic_string[abi:ne180100]<0>(&v1860, "multioutput");
        RIO_MTLX::GraphElement::addNode(v1442, &v1923, (uint64_t)&v1873, &v1860, (uint64_t *)&v1861);
        if (SHIBYTE(v1860.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1860.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1873.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1873.__r_.__value_.__l.__data_);
        RIO_MTLX::InterfaceElement::addOutput(v1861, (uint64_t)&v1916, &v1914, (uint64_t *)&v1873);
        RIO_MTLX::InterfaceElement::addOutput(v1861, (uint64_t)&v1915, &v1914, (uint64_t *)&v1860);
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)p_str, (unsigned __int8 *)v1919, &v1858);
        if (v1858)
        {
          RIO_MTLX::InterfaceElement::addInput(v1861, (uint64_t)v1919, &v1914, &v1856);
          v1447 = v1858;
          v1854 = v1858;
          v1855 = v1859;
          if (v1859)
          {
            v1448 = (unint64_t *)&v1859->__shared_owners_;
            do
              v1449 = __ldxr(v1448);
            while (__stxr(v1449 + 1, v1448));
          }
          v1852 = v1856;
          v1853 = v1857;
          if (v1857)
          {
            v1450 = (unint64_t *)&v1857->__shared_owners_;
            do
              v1451 = __ldxr(v1450);
            while (__stxr(v1451 + 1, v1450));
          }
          v1452 = *(unsigned __int8 **)(v1447 + 200);
          v1453 = *(unsigned __int8 **)(v1447 + 208);
          while (v1452 != v1453)
          {
            v1454 = (uint64_t *)v1852;
            v1455 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v1854 + 160), v1452);
            if (v1455)
              v1456 = (const std::string *)(v1455 + 40);
            else
              v1456 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
            RIO_MTLX::Element::setAttribute(v1454, (__int128 *)v1452, v1456);
            v1452 += 24;
          }
          v1457 = v1853;
          if (v1853)
          {
            v1458 = (unint64_t *)&v1853->__shared_owners_;
            do
              v1459 = __ldaxr(v1458);
            while (__stlxr(v1459 - 1, v1458));
            if (!v1459)
            {
              ((void (*)(std::__shared_weak_count *))v1457->__on_zero_shared)(v1457);
              std::__shared_weak_count::__release_weak(v1457);
            }
          }
          v1460 = v1855;
          if (v1855)
          {
            v1461 = (unint64_t *)&v1855->__shared_owners_;
            do
              v1462 = __ldaxr(v1461);
            while (__stlxr(v1462 - 1, v1461));
            if (!v1462)
            {
              ((void (*)(std::__shared_weak_count *))v1460->__on_zero_shared)(v1460);
              std::__shared_weak_count::__release_weak(v1460);
            }
          }
          v1463 = v1857;
          if (v1857)
          {
            v1464 = (unint64_t *)&v1857->__shared_owners_;
            do
              v1465 = __ldaxr(v1464);
            while (__stlxr(v1465 - 1, v1464));
            if (!v1465)
            {
              ((void (*)(std::__shared_weak_count *))v1463->__on_zero_shared)(v1463);
              std::__shared_weak_count::__release_weak(v1463);
            }
          }
        }
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)p_str, (unsigned __int8 *)v1917, &v1856);
        if (v1856)
        {
          RIO_MTLX::InterfaceElement::addInput(v1861, (uint64_t)v1917, &v1914, (uint64_t *)&v1850);
          v1466 = v1856;
          v1848 = v1856;
          v1849 = v1857;
          if (v1857)
          {
            v1467 = (unint64_t *)&v1857->__shared_owners_;
            do
              v1468 = __ldxr(v1467);
            while (__stxr(v1468 + 1, v1467));
          }
          v1846 = (uint64_t)v1850;
          v1847 = v1851;
          if (v1851)
          {
            v1469 = (unint64_t *)&v1851->__shared_owners_;
            do
              v1470 = __ldxr(v1469);
            while (__stxr(v1470 + 1, v1469));
          }
          v1471 = *(unsigned __int8 **)(v1466 + 200);
          v1472 = *(unsigned __int8 **)(v1466 + 208);
          while (v1471 != v1472)
          {
            v1473 = (uint64_t *)v1846;
            v1474 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v1848 + 160), v1471);
            if (v1474)
              v1475 = (const std::string *)(v1474 + 40);
            else
              v1475 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
            RIO_MTLX::Element::setAttribute(v1473, (__int128 *)v1471, v1475);
            v1471 += 24;
          }
          v1476 = v1847;
          if (v1847)
          {
            v1477 = (unint64_t *)&v1847->__shared_owners_;
            do
              v1478 = __ldaxr(v1477);
            while (__stlxr(v1478 - 1, v1477));
            if (!v1478)
            {
              ((void (*)(std::__shared_weak_count *))v1476->__on_zero_shared)(v1476);
              std::__shared_weak_count::__release_weak(v1476);
            }
          }
          v1479 = v1849;
          if (v1849)
          {
            v1480 = (unint64_t *)&v1849->__shared_owners_;
            do
              v1481 = __ldaxr(v1480);
            while (__stlxr(v1481 - 1, v1480));
            if (!v1481)
            {
              ((void (*)(std::__shared_weak_count *))v1479->__on_zero_shared)(v1479);
              std::__shared_weak_count::__release_weak(v1479);
            }
          }
          v1482 = v1851;
          if (v1851)
          {
            v1483 = (unint64_t *)&v1851->__shared_owners_;
            do
              v1484 = __ldaxr(v1483);
            while (__stlxr(v1484 - 1, v1483));
            if (!v1484)
            {
              ((void (*)(std::__shared_weak_count *))v1482->__on_zero_shared)(v1482);
              std::__shared_weak_count::__release_weak(v1482);
            }
          }
        }
        RIO_MTLX::Element::removeChildOfType<RIO_MTLX::Input>(p_str, (unsigned __int8 *)v1919);
        RIO_MTLX::Element::removeChildOfType<RIO_MTLX::Input>(p_str, (unsigned __int8 *)v1917);
        v1485 = RIO_MTLX::InterfaceElement::addInput(p_str, (uint64_t)&v1916, &v1914, (uint64_t *)&v1850);
        v1486 = v1850;
        v1487 = (const std::string *)v1861;
        v1488 = (__int128 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v1485);
        v1489 = RIO_MTLX::Element::setAttribute(v1486, v1488, v1487 + 2);
        v1490 = v1850;
        v1491 = (const std::string *)v1873.__r_.__value_.__r.__words[0];
        v1492 = (__int128 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE((RIO_MTLX::PortElement *)v1489);
        RIO_MTLX::Element::setAttribute(v1490, v1492, v1491 + 2);
        v1493 = RIO_MTLX::InterfaceElement::addInput(p_str, (uint64_t)&v1915, &v1914, (uint64_t *)&v1844);
        v1494 = v1844;
        v1495 = (const std::string *)v1861;
        v1496 = (__int128 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v1493);
        v1497 = RIO_MTLX::Element::setAttribute(v1494, v1496, v1495 + 2);
        v1498 = v1844;
        v1499 = (const std::string *)v1860.__r_.__value_.__r.__words[0];
        v1500 = (__int128 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE((RIO_MTLX::PortElement *)v1497);
        v1354 = (std::string::size_type)RIO_MTLX::Element::setAttribute(v1498, v1500, v1499 + 2);
        v1501 = v1845;
        if (v1845)
        {
          v1502 = (unint64_t *)&v1845->__shared_owners_;
          do
            v1503 = __ldaxr(v1502);
          while (__stlxr(v1503 - 1, v1502));
          if (!v1503)
          {
            ((void (*)(std::__shared_weak_count *))v1501->__on_zero_shared)(v1501);
            std::__shared_weak_count::__release_weak(v1501);
          }
        }
        v1504 = v1851;
        if (v1851)
        {
          v1505 = (unint64_t *)&v1851->__shared_owners_;
          do
            v1506 = __ldaxr(v1505);
          while (__stlxr(v1506 - 1, v1505));
          if (!v1506)
          {
            ((void (*)(std::__shared_weak_count *))v1504->__on_zero_shared)(v1504);
            std::__shared_weak_count::__release_weak(v1504);
          }
        }
        v1507 = v1857;
        if (v1857)
        {
          v1508 = (unint64_t *)&v1857->__shared_owners_;
          do
            v1509 = __ldaxr(v1508);
          while (__stlxr(v1509 - 1, v1508));
          if (!v1509)
          {
            ((void (*)(std::__shared_weak_count *))v1507->__on_zero_shared)(v1507);
            std::__shared_weak_count::__release_weak(v1507);
          }
        }
        v1510 = v1859;
        if (v1859)
        {
          v1511 = (unint64_t *)&v1859->__shared_owners_;
          do
            v1512 = __ldaxr(v1511);
          while (__stlxr(v1512 - 1, v1511));
          if (!v1512)
          {
            ((void (*)(std::__shared_weak_count *))v1510->__on_zero_shared)(v1510);
            std::__shared_weak_count::__release_weak(v1510);
          }
        }
        v1513 = (std::__shared_weak_count *)v1860.__r_.__value_.__l.__size_;
        if (v1860.__r_.__value_.__l.__size_)
        {
          v1514 = (unint64_t *)(v1860.__r_.__value_.__l.__size_ + 8);
          do
            v1515 = __ldaxr(v1514);
          while (__stlxr(v1515 - 1, v1514));
          if (!v1515)
          {
            ((void (*)(std::__shared_weak_count *))v1513->__on_zero_shared)(v1513);
            std::__shared_weak_count::__release_weak(v1513);
          }
        }
        v1516 = (std::__shared_weak_count *)v1873.__r_.__value_.__l.__size_;
        if (v1873.__r_.__value_.__l.__size_)
        {
          v1517 = (unint64_t *)(v1873.__r_.__value_.__l.__size_ + 8);
          do
            v1518 = __ldaxr(v1517);
          while (__stlxr(v1518 - 1, v1517));
          if (!v1518)
          {
            ((void (*)(std::__shared_weak_count *))v1516->__on_zero_shared)(v1516);
            std::__shared_weak_count::__release_weak(v1516);
          }
        }
        v1519 = v1862;
        if (v1862)
        {
          v1520 = (unint64_t *)&v1862->__shared_owners_;
          do
            v1521 = __ldaxr(v1520);
          while (__stlxr(v1521 - 1, v1520));
          if (!v1521)
          {
            ((void (*)(std::__shared_weak_count *))v1519->__on_zero_shared)(v1519);
            std::__shared_weak_count::__release_weak(v1519);
          }
        }
        v1374 = v1864;
        if (v1864)
        {
          v1522 = (unint64_t *)&v1864->__shared_owners_;
          do
            v1376 = __ldaxr(v1522);
          while (__stlxr(v1376 - 1, v1522));
          goto LABEL_2804;
        }
        goto LABEL_2814;
      }
LABEL_2632:
      if ((char)v1338 >= 0)
        v1417 = (std::__shared_weak_count *)v1338;
      else
        v1417 = (std::__shared_weak_count *)v1339;
      v1418 = HIBYTE(v1945.__r_.__value_.__r.__words[2]);
      if ((v1945.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v1418 = v1945.__r_.__value_.__l.__size_;
      if (v1417 != (std::__shared_weak_count *)v1418)
        goto LABEL_2651;
      if ((v1945.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1419 = &v1945;
      else
        v1419 = (std::string *)v1945.__r_.__value_.__r.__words[0];
      if ((v1338 & 0x80) == 0)
      {
        v1420 = &v1946;
        if ((_DWORD)v1338)
        {
          v1421 = v1336 + 1;
          v1422 = v1338;
          do
          {
            if (v1421->__r_.__value_.__s.__data_[0] != v1419->__r_.__value_.__s.__data_[0])
              goto LABEL_2651;
            v1421 = (std::string *)((char *)v1421 + 1);
            v1419 = (std::string *)((char *)v1419 + 1);
            v1422 = (RIO_MTLX::Element *)((char *)v1422 - 1);
          }
          while (v1422);
          v1420 = &v1946;
        }
        goto LABEL_2813;
      }
      v1425 = memcmp(*v1337, v1419, v1339);
      v1420 = &v1946;
      if (v1425)
      {
LABEL_2651:
        v1426 = HIBYTE(v1943.__r_.__value_.__r.__words[2]);
        if ((v1943.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v1426 = v1943.__r_.__value_.__l.__size_;
        if (v1417 != (std::__shared_weak_count *)v1426)
          goto LABEL_2664;
        if ((v1943.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1427 = &v1943;
        else
          v1427 = (std::string *)v1943.__r_.__value_.__r.__words[0];
        if ((v1338 & 0x80) == 0)
        {
          v1420 = &v1944;
          if ((_DWORD)v1338)
          {
            v1428 = v1336 + 1;
            v1429 = v1338;
            do
            {
              if (v1428->__r_.__value_.__s.__data_[0] != v1427->__r_.__value_.__s.__data_[0])
                goto LABEL_2664;
              v1428 = (std::string *)((char *)v1428 + 1);
              v1427 = (std::string *)((char *)v1427 + 1);
              v1429 = (RIO_MTLX::Element *)((char *)v1429 - 1);
            }
            while (v1429);
            v1420 = &v1944;
          }
          goto LABEL_2813;
        }
        v1430 = memcmp(*v1337, v1427, v1339);
        v1420 = &v1944;
        if (v1430)
        {
LABEL_2664:
          v1431 = v1941;
          if ((v1941 & 0x80u) != 0)
            v1431 = (unint64_t)v1940[1];
          if (v1417 != (std::__shared_weak_count *)v1431)
            goto LABEL_2677;
          if ((v1941 & 0x80u) == 0)
            v1432 = v1940;
          else
            v1432 = (void **)v1940[0];
          if ((v1338 & 0x80) == 0)
          {
            v1420 = &v1942;
            if ((_DWORD)v1338)
            {
              v1433 = v1336 + 1;
              v1434 = v1338;
              do
              {
                if (v1433->__r_.__value_.__s.__data_[0] != *(unsigned __int8 *)v1432)
                  goto LABEL_2677;
                v1433 = (std::string *)((char *)v1433 + 1);
                v1432 = (void **)((char *)v1432 + 1);
                v1434 = (RIO_MTLX::Element *)((char *)v1434 - 1);
              }
              while (v1434);
              v1420 = &v1942;
            }
            goto LABEL_2813;
          }
          v1435 = memcmp(*v1337, v1432, v1339);
          v1420 = &v1942;
          if (v1435)
          {
LABEL_2677:
            v1436 = (std::__shared_weak_count *)v1938;
            if ((v1938 & 0x80u) != 0)
              v1436 = v1937;
            if (v1417 != v1436)
              goto LABEL_2807;
            if ((v1938 & 0x80u) == 0)
              v1437 = (unsigned __int8 *)&v1936;
            else
              v1437 = (unsigned __int8 *)v1936;
            if ((v1338 & 0x80) == 0)
            {
              v1420 = &v1939;
              if ((_DWORD)v1338)
              {
                v1438 = v1336 + 1;
                do
                {
                  if (v1438->__r_.__value_.__s.__data_[0] != *v1437)
                    goto LABEL_2807;
                  v1438 = (std::string *)((char *)v1438 + 1);
                  ++v1437;
                  v1338 = (RIO_MTLX::Element *)((char *)v1338 - 1);
                }
                while (v1338);
                v1420 = &v1939;
              }
              goto LABEL_2813;
            }
            v1523 = memcmp(*v1337, v1437, v1339);
            v1420 = &v1939;
            if (v1523)
            {
LABEL_2807:
              v1354 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&v1336[1], (unsigned __int8 *)&v1923);
              if ((_DWORD)v1354)
              {
                RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>((uint64_t)p_str, (unsigned __int8 *)&v1916, &v1873);
                v1525 = (uint64_t *)v1873.__r_.__value_.__r.__words[0];
                if (v1873.__r_.__value_.__r.__words[0])
                {
                  v1526 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v1524);
                  RIO_MTLX::Element::setAttribute(v1525, v1526, &v1914);
                }
                RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>((uint64_t)p_str, (unsigned __int8 *)&v1915, &v1860);
                v1528 = (uint64_t *)v1860.__r_.__value_.__r.__words[0];
                if (v1860.__r_.__value_.__r.__words[0])
                {
                  v1529 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v1527);
                  RIO_MTLX::Element::setAttribute(v1528, v1529, &v1914);
                }
                std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v1860);
                v1354 = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v1873);
              }
              goto LABEL_2814;
            }
          }
        }
      }
LABEL_2813:
      v1354 = (std::string::size_type)std::string::operator=(v1336 + 1, v1420);
      goto LABEL_2814;
    }
LABEL_2929:
    v1575 = v1879;
    if (v1879)
    {
      v1576 = (unint64_t *)&v1879->__shared_owners_;
      do
        v1577 = __ldaxr(v1576);
      while (__stlxr(v1577 - 1, v1576));
      if (!v1577)
      {
        ((void (*)(std::__shared_weak_count *))v1575->__on_zero_shared)(v1575);
        std::__shared_weak_count::__release_weak(v1575);
      }
    }
    v1578 = (std::__shared_weak_count *)*((_QWORD *)&v1880 + 1);
    if (*((_QWORD *)&v1880 + 1))
    {
      v1579 = (unint64_t *)(*((_QWORD *)&v1880 + 1) + 8);
      do
        v1580 = __ldaxr(v1579);
      while (__stlxr(v1580 - 1, v1579));
      if (!v1580)
      {
        ((void (*)(std::__shared_weak_count *))v1578->__on_zero_shared)(v1578);
        std::__shared_weak_count::__release_weak(v1578);
      }
    }
    RIO_MTLX::TreeIterator::operator++(&v2021);
  }
  v1873.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str_16;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1873);
  v1581 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
  if (*((_QWORD *)&__str + 1))
  {
    v1582 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
    do
      v1583 = __ldaxr(v1582);
    while (__stlxr(v1583 - 1, v1582));
    if (!v1583)
    {
      ((void (*)(std::__shared_weak_count *))v1581->__on_zero_shared)(v1581);
      std::__shared_weak_count::__release_weak(v1581);
    }
  }
  *(_QWORD *)&__str = &v2022;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v1584 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
  if (*((_QWORD *)&v2021 + 1))
  {
    v1585 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
    do
      v1586 = __ldaxr(v1585);
    while (__stlxr(v1586 - 1, v1585));
    if (!v1586)
    {
      ((void (*)(std::__shared_weak_count *))v1584->__on_zero_shared)(v1584);
      std::__shared_weak_count::__release_weak(v1584);
    }
  }
  *(_QWORD *)&v2021 = (char *)&v2026.__r_.__value_.__l + 16;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
  v1588 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v1589 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v1590 = __ldaxr(v1589);
    while (__stlxr(v1590 - 1, v1589));
    if (!v1590)
    {
      ((void (*)(std::__shared_weak_count *))v1588->__on_zero_shared)(v1588);
      std::__shared_weak_count::__release_weak(v1588);
    }
  }
  v1591 = v1888;
  for (i2 = v1889; v1591 != i2; v1591 += 16)
  {
    v1593 = *(_QWORD *)v1591;
    v1594 = *((_QWORD *)v1591 + 1);
    *(_QWORD *)&v2021 = *(_QWORD *)v1591;
    *((_QWORD *)&v2021 + 1) = v1594;
    if (v1594)
    {
      v1595 = (unint64_t *)(v1594 + 8);
      do
        v1596 = __ldxr(v1595);
      while (__stxr(v1596 + 1, v1595));
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v1593 + 64))(&__str);
    v1597 = v2021;
    v1873.__r_.__value_.__r.__words[0] = 0;
    v1873.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v2021 + 232));
    if (v1873.__r_.__value_.__l.__size_)
    {
      v1598 = *(_QWORD *)(v1597 + 224);
      v1873.__r_.__value_.__r.__words[0] = v1598;
    }
    else
    {
      v1598 = v1873.__r_.__value_.__r.__words[0];
    }
    *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = 0uLL;
    v1599 = *(std::__shared_weak_count **)(v1598 + 232);
    if (v1599)
    {
      v2026.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v1599);
      if (v2026.__r_.__value_.__l.__size_)
      {
        v1599 = *(std::__shared_weak_count **)(v1598 + 224);
        v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)v1599;
      }
      else
      {
        v1599 = (std::__shared_weak_count *)v2026.__r_.__value_.__r.__words[0];
      }
    }
    RIO_MTLX::Element::asA<RIO_MTLX::GraphElement>((uint64_t)v1599, &v1860);
    v1600 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
    if (v2026.__r_.__value_.__l.__size_)
    {
      v1601 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
      do
        v1602 = __ldaxr(v1601);
      while (__stlxr(v1602 - 1, v1601));
      if (!v1602)
      {
        ((void (*)(std::__shared_weak_count *))v1600->__on_zero_shared)(v1600);
        std::__shared_weak_count::__release_weak(v1600);
      }
    }
    v1603 = (RIO_MTLX::Node *)v1860.__r_.__value_.__r.__words[0];
    v1604 = v1873.__r_.__value_.__r.__words[0];
    if (*(char *)(v1873.__r_.__value_.__r.__words[0] + 71) >= 0)
      v1605 = *(unsigned __int8 *)(v1873.__r_.__value_.__r.__words[0] + 71);
    else
      v1605 = *(_QWORD *)(v1873.__r_.__value_.__r.__words[0] + 56);
    std::string::basic_string[abi:ne180100]((uint64_t)&v2026, v1605 + 13);
    if ((v2026.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1606 = &v2026;
    else
      v1606 = (std::string *)v2026.__r_.__value_.__r.__words[0];
    if (v1605)
    {
      if (*(char *)(v1604 + 71) >= 0)
        v1607 = (const void *)(v1604 + 48);
      else
        v1607 = *(const void **)(v1604 + 48);
      memmove(v1606, v1607, v1605);
    }
    strcpy((char *)v1606 + v1605, "__convert_ior");
    RIO_MTLX::GraphElement::addNode(v1603, &v1912, (uint64_t)&v2026, &v1913, (uint64_t *)&v1880);
    if (SHIBYTE(v2026.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v2026.__r_.__value_.__l.__data_);
    v1608 = RIO_MTLX::InterfaceElement::addInput((RIO_MTLX::Input *)v1880, (uint64_t)v1910, &v1914, (uint64_t *)&v2026);
    v1609 = (uint64_t *)v2026.__r_.__value_.__r.__words[0];
    v1610 = (const std::string *)__str;
    v1611 = (__int128 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v1608);
    v1612 = RIO_MTLX::Element::setAttribute(v1609, v1611, v1610 + 2);
    v1613 = (uint64_t *)v2026.__r_.__value_.__r.__words[0];
    v1614 = (__int128 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE((RIO_MTLX::PortElement *)v1612);
    v1615 = RIO_MTLX::Element::setAttribute(v1613, v1614, &v1916);
    v1616 = (uint64_t *)v2021;
    v1617 = (const std::string *)v1880;
    v1618 = (__int128 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v1615);
    v1619 = RIO_MTLX::Element::setAttribute(v1616, v1618, v1617 + 2);
    v1620 = (_QWORD *)v2021;
    v1621 = (unsigned __int8 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE((RIO_MTLX::PortElement *)v1619);
    RIO_MTLX::Element::removeAttribute(v1620, v1621);
    v1622 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
    if (v2026.__r_.__value_.__l.__size_)
    {
      v1623 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
      do
        v1624 = __ldaxr(v1623);
      while (__stlxr(v1624 - 1, v1623));
      if (!v1624)
      {
        ((void (*)(std::__shared_weak_count *))v1622->__on_zero_shared)(v1622);
        std::__shared_weak_count::__release_weak(v1622);
      }
    }
    v1625 = (std::__shared_weak_count *)*((_QWORD *)&v1880 + 1);
    if (*((_QWORD *)&v1880 + 1))
    {
      v1626 = (unint64_t *)(*((_QWORD *)&v1880 + 1) + 8);
      do
        v1627 = __ldaxr(v1626);
      while (__stlxr(v1627 - 1, v1626));
      if (!v1627)
      {
        ((void (*)(std::__shared_weak_count *))v1625->__on_zero_shared)(v1625);
        std::__shared_weak_count::__release_weak(v1625);
      }
    }
    v1628 = (std::__shared_weak_count *)v1860.__r_.__value_.__l.__size_;
    if (v1860.__r_.__value_.__l.__size_)
    {
      v1629 = (unint64_t *)(v1860.__r_.__value_.__l.__size_ + 8);
      do
        v1630 = __ldaxr(v1629);
      while (__stlxr(v1630 - 1, v1629));
      if (!v1630)
      {
        ((void (*)(std::__shared_weak_count *))v1628->__on_zero_shared)(v1628);
        std::__shared_weak_count::__release_weak(v1628);
      }
    }
    v1631 = (std::__shared_weak_count *)v1873.__r_.__value_.__l.__size_;
    if (v1873.__r_.__value_.__l.__size_)
    {
      v1632 = (unint64_t *)(v1873.__r_.__value_.__l.__size_ + 8);
      do
        v1633 = __ldaxr(v1632);
      while (__stlxr(v1633 - 1, v1632));
      if (!v1633)
      {
        ((void (*)(std::__shared_weak_count *))v1631->__on_zero_shared)(v1631);
        std::__shared_weak_count::__release_weak(v1631);
      }
    }
    v1634 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
    if (*((_QWORD *)&__str + 1))
    {
      v1635 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
      do
        v1636 = __ldaxr(v1635);
      while (__stlxr(v1636 - 1, v1635));
      if (!v1636)
      {
        ((void (*)(std::__shared_weak_count *))v1634->__on_zero_shared)(v1634);
        std::__shared_weak_count::__release_weak(v1634);
      }
    }
    v1637 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
    if (*((_QWORD *)&v2021 + 1))
    {
      v1638 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
      do
        v1639 = __ldaxr(v1638);
      while (__stlxr(v1639 - 1, v1638));
      if (!v1639)
      {
        ((void (*)(std::__shared_weak_count *))v1637->__on_zero_shared)(v1637);
        std::__shared_weak_count::__release_weak(v1637);
      }
    }
  }
  v1640 = v1885;
  for (i3 = v1886; v1640 != i3; v1640 += 16)
  {
    v1642 = *(_QWORD *)v1640;
    v1643 = *((_QWORD *)v1640 + 1);
    *(_QWORD *)&v2021 = *(_QWORD *)v1640;
    *((_QWORD *)&v2021 + 1) = v1643;
    if (v1643)
    {
      v1644 = (unint64_t *)(v1643 + 8);
      do
        v1645 = __ldxr(v1644);
      while (__stxr(v1645 + 1, v1644));
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v1642 + 64))(&__str);
    v1646 = v2021;
    v1873.__r_.__value_.__r.__words[0] = 0;
    v1873.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v2021 + 232));
    if (v1873.__r_.__value_.__l.__size_)
    {
      v1647 = *(_QWORD *)(v1646 + 224);
      v1873.__r_.__value_.__r.__words[0] = v1647;
    }
    else
    {
      v1647 = v1873.__r_.__value_.__r.__words[0];
    }
    *(_OWORD *)&v2026.__r_.__value_.__l.__data_ = 0uLL;
    v1648 = *(std::__shared_weak_count **)(v1647 + 232);
    if (v1648)
    {
      v2026.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v1648);
      if (v2026.__r_.__value_.__l.__size_)
      {
        v1648 = *(std::__shared_weak_count **)(v1647 + 224);
        v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)v1648;
      }
      else
      {
        v1648 = (std::__shared_weak_count *)v2026.__r_.__value_.__r.__words[0];
      }
    }
    RIO_MTLX::Element::asA<RIO_MTLX::GraphElement>((uint64_t)v1648, &v1860);
    v1649 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
    if (v2026.__r_.__value_.__l.__size_)
    {
      v1650 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
      do
        v1651 = __ldaxr(v1650);
      while (__stlxr(v1651 - 1, v1650));
      if (!v1651)
      {
        ((void (*)(std::__shared_weak_count *))v1649->__on_zero_shared)(v1649);
        std::__shared_weak_count::__release_weak(v1649);
      }
    }
    v1652 = (RIO_MTLX::Node *)v1860.__r_.__value_.__r.__words[0];
    v1653 = v1873.__r_.__value_.__r.__words[0];
    if (*(char *)(v1873.__r_.__value_.__r.__words[0] + 71) >= 0)
      v1654 = *(unsigned __int8 *)(v1873.__r_.__value_.__r.__words[0] + 71);
    else
      v1654 = *(_QWORD *)(v1873.__r_.__value_.__r.__words[0] + 56);
    std::string::basic_string[abi:ne180100]((uint64_t)&v2026, v1654 + 20);
    if ((v2026.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1655 = &v2026;
    else
      v1655 = (std::string *)v2026.__r_.__value_.__r.__words[0];
    if (v1654)
    {
      if (*(char *)(v1653 + 71) >= 0)
        v1656 = (const void *)(v1653 + 48);
      else
        v1656 = *(const void **)(v1653 + 48);
      memmove(v1655, v1656, v1654);
    }
    strcpy((char *)v1655 + v1654, "__convert_extinction");
    RIO_MTLX::GraphElement::addNode(v1652, &v1912, (uint64_t)&v2026, &v1913, (uint64_t *)&v1880);
    if (SHIBYTE(v2026.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v2026.__r_.__value_.__l.__data_);
    v1657 = RIO_MTLX::InterfaceElement::addInput((RIO_MTLX::Input *)v1880, (uint64_t)v1910, &v1914, (uint64_t *)&v2026);
    v1658 = (uint64_t *)v2026.__r_.__value_.__r.__words[0];
    v1659 = (const std::string *)__str;
    v1660 = (__int128 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v1657);
    v1661 = RIO_MTLX::Element::setAttribute(v1658, v1660, v1659 + 2);
    v1662 = (uint64_t *)v2026.__r_.__value_.__r.__words[0];
    v1663 = (__int128 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE((RIO_MTLX::PortElement *)v1661);
    v1664 = RIO_MTLX::Element::setAttribute(v1662, v1663, &v1915);
    v1665 = (uint64_t *)v2021;
    v1666 = (const std::string *)v1880;
    v1667 = (__int128 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v1664);
    v1668 = RIO_MTLX::Element::setAttribute(v1665, v1667, v1666 + 2);
    v1669 = (_QWORD *)v2021;
    v1670 = (unsigned __int8 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE((RIO_MTLX::PortElement *)v1668);
    RIO_MTLX::Element::removeAttribute(v1669, v1670);
    v1671 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
    if (v2026.__r_.__value_.__l.__size_)
    {
      v1672 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
      do
        v1673 = __ldaxr(v1672);
      while (__stlxr(v1673 - 1, v1672));
      if (!v1673)
      {
        ((void (*)(std::__shared_weak_count *))v1671->__on_zero_shared)(v1671);
        std::__shared_weak_count::__release_weak(v1671);
      }
    }
    v1674 = (std::__shared_weak_count *)*((_QWORD *)&v1880 + 1);
    if (*((_QWORD *)&v1880 + 1))
    {
      v1675 = (unint64_t *)(*((_QWORD *)&v1880 + 1) + 8);
      do
        v1676 = __ldaxr(v1675);
      while (__stlxr(v1676 - 1, v1675));
      if (!v1676)
      {
        ((void (*)(std::__shared_weak_count *))v1674->__on_zero_shared)(v1674);
        std::__shared_weak_count::__release_weak(v1674);
      }
    }
    v1677 = (std::__shared_weak_count *)v1860.__r_.__value_.__l.__size_;
    if (v1860.__r_.__value_.__l.__size_)
    {
      v1678 = (unint64_t *)(v1860.__r_.__value_.__l.__size_ + 8);
      do
        v1679 = __ldaxr(v1678);
      while (__stlxr(v1679 - 1, v1678));
      if (!v1679)
      {
        ((void (*)(std::__shared_weak_count *))v1677->__on_zero_shared)(v1677);
        std::__shared_weak_count::__release_weak(v1677);
      }
    }
    v1680 = (std::__shared_weak_count *)v1873.__r_.__value_.__l.__size_;
    if (v1873.__r_.__value_.__l.__size_)
    {
      v1681 = (unint64_t *)(v1873.__r_.__value_.__l.__size_ + 8);
      do
        v1682 = __ldaxr(v1681);
      while (__stlxr(v1682 - 1, v1681));
      if (!v1682)
      {
        ((void (*)(std::__shared_weak_count *))v1680->__on_zero_shared)(v1680);
        std::__shared_weak_count::__release_weak(v1680);
      }
    }
    v1683 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
    if (*((_QWORD *)&__str + 1))
    {
      v1684 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
      do
        v1685 = __ldaxr(v1684);
      while (__stlxr(v1685 - 1, v1684));
      if (!v1685)
      {
        ((void (*)(std::__shared_weak_count *))v1683->__on_zero_shared)(v1683);
        std::__shared_weak_count::__release_weak(v1683);
      }
    }
    v1686 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
    if (*((_QWORD *)&v2021 + 1))
    {
      v1687 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
      do
        v1688 = __ldaxr(v1687);
      while (__stlxr(v1688 - 1, v1687));
      if (!v1688)
      {
        ((void (*)(std::__shared_weak_count *))v1686->__on_zero_shared)(v1686);
        std::__shared_weak_count::__release_weak(v1686);
      }
    }
  }
  v1689 = RIO_MTLX::EMPTY_STRING(v1587);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeGraph>((uint64_t)this, (unsigned __int8 *)v1689, (uint64_t)&v2026);
  v1692 = v2026.__r_.__value_.__l.__size_;
  v1691 = v2026.__r_.__value_.__r.__words[0];
  if (v2026.__r_.__value_.__r.__words[0] != v2026.__r_.__value_.__l.__size_)
  {
LABEL_3076:
    v1694 = *(_QWORD **)v1691;
    v1693 = *(_QWORD *)(v1691 + 8);
    *(_QWORD *)&v1880 = *(_QWORD *)v1691;
    *((_QWORD *)&v1880 + 1) = v1693;
    if (v1693)
    {
      v1695 = (unint64_t *)(v1693 + 8);
      do
        v1696 = __ldxr(v1695);
      while (__stxr(v1696 + 1, v1695));
    }
    v1697 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(v1690);
    RIO_MTLX::Element::removeAttribute(v1694, v1697);
    *((_QWORD *)&v2021 + 1) = 0;
    v2022 = 0;
    *(_QWORD *)&v2021 = (char *)&v2021 + 8;
    v1698 = *(uint64_t **)(v1880 + 136);
    v1699 = *(uint64_t **)(v1880 + 144);
    if (v1698 == v1699)
      goto LABEL_3163;
    do
    {
      v1700 = *v1698;
      v1701 = v1698[1];
      v1873.__r_.__value_.__r.__words[0] = *v1698;
      v1873.__r_.__value_.__l.__size_ = v1701;
      if (v1701)
      {
        v1702 = (unint64_t *)(v1701 + 8);
        do
          v1703 = __ldxr(v1702);
        while (__stxr(v1703 + 1, v1702));
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Node>(v1700, &v1860);
      v1705 = v1860.__r_.__value_.__r.__words[0];
      if (v1860.__r_.__value_.__r.__words[0])
      {
        v1706 = RIO_MTLX::EMPTY_STRING(v1704);
        RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::ValueElement>(v1705, (unsigned __int8 *)v1706, (uint64_t)&__str);
        v1708 = *((_QWORD *)&__str + 1);
        for (i4 = __str; i4 != v1708; i4 += 16)
        {
          v1709 = *(RIO_MTLX::ValueElement **)i4;
          v1710 = *(std::__shared_weak_count **)(i4 + 8);
          p_str = *(RIO_MTLX::Element **)i4;
          v1879 = v1710;
          if (v1710)
          {
            v1711 = (unint64_t *)&v1710->__shared_owners_;
            do
              v1712 = __ldxr(v1711);
            while (__stxr(v1712 + 1, v1711));
          }
          InterfaceName = RIO_MTLX::ValueElement::getInterfaceName(v1709);
          v1714 = *((unsigned __int8 *)InterfaceName + 23);
          if ((v1714 & 0x80u) != 0)
            v1714 = InterfaceName[1];
          if (v1714)
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v2021, (const void **)InterfaceName, (uint64_t)InterfaceName);
          v1715 = v1879;
          if (v1879)
          {
            v1716 = (unint64_t *)&v1879->__shared_owners_;
            do
              v1717 = __ldaxr(v1716);
            while (__stlxr(v1717 - 1, v1716));
            if (!v1717)
            {
              ((void (*)(std::__shared_weak_count *))v1715->__on_zero_shared)(v1715);
              std::__shared_weak_count::__release_weak(v1715);
            }
          }
        }
        p_str = (RIO_MTLX::Element *)&__str;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
      }
      v1718 = (std::__shared_weak_count *)v1860.__r_.__value_.__l.__size_;
      if (v1860.__r_.__value_.__l.__size_)
      {
        v1719 = (unint64_t *)(v1860.__r_.__value_.__l.__size_ + 8);
        do
          v1720 = __ldaxr(v1719);
        while (__stlxr(v1720 - 1, v1719));
        if (!v1720)
        {
          ((void (*)(std::__shared_weak_count *))v1718->__on_zero_shared)(v1718);
          std::__shared_weak_count::__release_weak(v1718);
        }
      }
      v1721 = (std::__shared_weak_count *)v1873.__r_.__value_.__l.__size_;
      if (v1873.__r_.__value_.__l.__size_)
      {
        v1722 = (unint64_t *)(v1873.__r_.__value_.__l.__size_ + 8);
        do
          v1723 = __ldaxr(v1722);
        while (__stlxr(v1723 - 1, v1722));
        if (!v1723)
        {
          ((void (*)(std::__shared_weak_count *))v1721->__on_zero_shared)(v1721);
          std::__shared_weak_count::__release_weak(v1721);
        }
      }
      v1698 += 2;
    }
    while (v1698 != v1699);
    v1724 = (_OWORD *)v2021;
    if ((__int128 *)v2021 == (__int128 *)((char *)&v2021 + 8))
      goto LABEL_3163;
    while (1)
    {
      if (*((char *)v1724 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__str, *((const std::string::value_type **)v1724 + 4), *((_QWORD *)v1724 + 5));
      }
      else
      {
        __str = v1724[2];
        *(_QWORD *)&__str_16 = *((_QWORD *)v1724 + 6);
      }
      RIO_MTLX::Element::getChildOfType<RIO_MTLX::Node>(v1880, (unsigned __int8 *)&__str, &p_str);
      if (!p_str)
        goto LABEL_3150;
      v1725 = v1880;
      if (SBYTE7(__str_16) < 0)
      {
        std::string::__init_copy_ctor_external(&v1843, (const std::string::value_type *)__str, *((std::string::size_type *)&__str + 1));
      }
      else
      {
        *(_OWORD *)&v1843.__r_.__value_.__l.__data_ = __str;
        v1843.__r_.__value_.__r.__words[2] = __str_16;
      }
      RIO_MTLX::Element::createValidChildName(v1725, (uint64_t)&v1843, (uint64_t)&v1873);
      if (SHIBYTE(v1843.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1843.__r_.__value_.__l.__data_);
      RIO_MTLX::Node::getDownstreamPorts(p_str, (uint64_t)&v1860);
      v1727 = v1860.__r_.__value_.__l.__size_;
      for (i5 = v1860.__r_.__value_.__r.__words[0]; i5 != v1727; i5 += 16)
      {
        v1728 = *(void ***)i5;
        v1729 = *(std::__shared_weak_count **)(i5 + 8);
        v1863 = *(std::string **)i5;
        v1864 = v1729;
        if (v1729)
        {
          v1730 = (unint64_t *)&v1729->__shared_owners_;
          do
            v1731 = __ldxr(v1730);
          while (__stxr(v1731 + 1, v1730));
        }
        NodeName = RIO_MTLX::PortElement::getNodeName((RIO_MTLX::PortElement *)v1728);
        v1733 = *((unsigned __int8 *)NodeName + 23);
        if ((v1733 & 0x80u) == 0)
          v1734 = *((unsigned __int8 *)NodeName + 23);
        else
          v1734 = NodeName[1];
        v1735 = BYTE7(__str_16);
        if (SBYTE7(__str_16) < 0)
          v1735 = *((_QWORD *)&__str + 1);
        if (v1734 == v1735)
        {
          if ((SBYTE7(__str_16) & 0x80u) == 0)
            v1736 = &__str;
          else
            v1736 = (__int128 *)__str;
          if ((v1733 & 0x80) != 0)
          {
            NodeName = (uint64_t *)memcmp((const void *)*NodeName, v1736, NodeName[1]);
            if (!(_DWORD)NodeName)
            {
LABEL_3141:
              v1737 = (uint64_t *)v1863;
              v1738 = (__int128 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)NodeName);
              RIO_MTLX::Element::setAttribute(v1737, v1738, &v1873);
            }
          }
          else
          {
            if (!*((_BYTE *)NodeName + 23))
              goto LABEL_3141;
            while (*(unsigned __int8 *)NodeName == *(unsigned __int8 *)v1736)
            {
              NodeName = (uint64_t *)((char *)NodeName + 1);
              v1736 = (__int128 *)((char *)v1736 + 1);
              if (!--v1733)
                goto LABEL_3141;
            }
          }
        }
        v1739 = v1864;
        if (v1864)
        {
          v1740 = (unint64_t *)&v1864->__shared_owners_;
          do
            v1741 = __ldaxr(v1740);
          while (__stlxr(v1741 - 1, v1740));
          if (!v1741)
          {
            ((void (*)(std::__shared_weak_count *))v1739->__on_zero_shared)(v1739);
            std::__shared_weak_count::__release_weak(v1739);
          }
        }
      }
      RIO_MTLX::Element::setName((std::string *)p_str, &v1873);
      v1863 = &v1860;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1863);
      if (SHIBYTE(v1873.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1873.__r_.__value_.__l.__data_);
LABEL_3150:
      v1742 = v1879;
      if (v1879)
      {
        v1743 = (unint64_t *)&v1879->__shared_owners_;
        do
          v1744 = __ldaxr(v1743);
        while (__stlxr(v1744 - 1, v1743));
        if (!v1744)
        {
          ((void (*)(std::__shared_weak_count *))v1742->__on_zero_shared)(v1742);
          std::__shared_weak_count::__release_weak(v1742);
        }
      }
      if (SBYTE7(__str_16) < 0)
        operator delete((void *)__str);
      v1745 = (_QWORD *)*((_QWORD *)v1724 + 1);
      if (v1745)
      {
        do
        {
          v1746 = v1745;
          v1745 = (_QWORD *)*v1745;
        }
        while (v1745);
      }
      else
      {
        do
        {
          v1746 = (_OWORD *)*((_QWORD *)v1724 + 2);
          v3 = *(_QWORD *)v1746 == (_QWORD)v1724;
          v1724 = v1746;
        }
        while (!v3);
      }
      v1724 = v1746;
      if (v1746 == (__int128 *)((char *)&v2021 + 8))
      {
LABEL_3163:
        std::__tree<std::string>::destroy((uint64_t)&v2021, *((char **)&v2021 + 1));
        v1747 = (std::__shared_weak_count *)*((_QWORD *)&v1880 + 1);
        if (*((_QWORD *)&v1880 + 1))
        {
          v1748 = (unint64_t *)(*((_QWORD *)&v1880 + 1) + 8);
          do
            v1749 = __ldaxr(v1748);
          while (__stlxr(v1749 - 1, v1748));
          if (!v1749)
          {
            ((void (*)(std::__shared_weak_count *))v1747->__on_zero_shared)(v1747);
            std::__shared_weak_count::__release_weak(v1747);
          }
        }
        v1691 += 16;
        if (v1691 == v1692)
          break;
        goto LABEL_3076;
      }
    }
  }
  *(_QWORD *)&v2021 = &v2026;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v2026);
  *((_QWORD *)&v2029 + 1) = 0;
  v2021 = *(_OWORD *)&v2026.__r_.__value_.__l.__data_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v1750 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v1751 = __ldxr(v1750);
    while (__stxr(v1751 + 1, v1750));
  }
  v2023 = 0;
  v2022 = 0;
  v2024 = 0;
  v1752 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)&v2022, (_QWORD *)v2026.__r_.__value_.__r.__words[2], v2027, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v2027 - v2026.__r_.__value_.__r.__words[2]) >> 3));
  v2025 = v2029;
  RIO_MTLX::NULL_TREE_ITERATOR((RIO_MTLX *)v1752);
  __str = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1))
  {
    v1753 = (unint64_t *)(*((_QWORD *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8);
    do
      v1754 = __ldxr(v1753);
    while (__stxr(v1754 + 1, v1753));
  }
  __str_16 = 0uLL;
  v1883 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)&__str_16, (_QWORD *)qword_255E54218, unk_255E54220, 0xAAAAAAAAAAAAAAABLL * ((unk_255E54220 - qword_255E54218) >> 3));
  v1884 = xmmword_255E54230;
  while (1)
  {
    v1755 = RIO_MTLX::TreeIterator::operator==((uint64_t)&v2021, (uint64_t)&__str);
    if (v1755)
      break;
    v1756 = v2021;
    v1880 = v2021;
    if (*((_QWORD *)&v2021 + 1))
    {
      v1757 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
      do
        v1758 = __ldxr(v1757);
      while (__stxr(v1758 + 1, v1757));
    }
    v1759 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v1755);
    RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>(v1756, &v1873);
    v1760 = *(_OWORD *)&v1873.__r_.__value_.__l.__data_;
    if (!v1873.__r_.__value_.__l.__size_)
      goto LABEL_3184;
    v1761 = (unint64_t *)(v1873.__r_.__value_.__l.__size_ + 8);
    do
      v1762 = __ldaxr(v1761);
    while (__stlxr(v1762 - 1, v1761));
    if (!v1762)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1760 + 1) + 16))(*((_QWORD *)&v1760 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1760 + 1));
      if (!(_QWORD)v1760)
        goto LABEL_3263;
    }
    else
    {
LABEL_3184:
      if (!(_QWORD)v1760)
        goto LABEL_3263;
    }
    v1763 = *((char *)v1759 + 23);
    v1764 = v1759[1];
    if (v1763 >= 0)
      v1764 = *((unsigned __int8 *)v1759 + 23);
    if (!v1764)
    {
LABEL_3203:
      v1769 = v1880;
      std::string::basic_string[abi:ne180100]<0>(&v1860, "parameter");
      RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t)&v1873, *(uint64_t **)(v1769 + 136), *(uint64_t **)(v1769 + 144), (unsigned __int8 *)&v1860);
      if (SHIBYTE(v1860.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1860.__r_.__value_.__l.__data_);
      v1770 = v1873.__r_.__value_.__l.__size_;
      v1771 = v1873.__r_.__value_.__r.__words[0];
      while (2)
      {
        if (v1771 == v1770)
        {
          v1860.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1873;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1860);
          goto LABEL_3263;
        }
        v1772 = *(RIO_MTLX::Element **)v1771;
        v1773 = *(std::__shared_weak_count **)(v1771 + 8);
        p_str = *(RIO_MTLX::Element **)v1771;
        v1879 = v1773;
        if (v1773)
        {
          v1774 = (unint64_t *)&v1773->__shared_owners_;
          do
            v1775 = __ldxr(v1774);
          while (__stxr(v1775 + 1, v1774));
          v1776 = (_QWORD *)v1880;
          v1841 = (std::string *)v1772;
          v1842 = v1879;
          if (v1879)
          {
            v1777 = (unint64_t *)&v1879->__shared_owners_;
            do
              v1778 = __ldxr(v1777);
            while (__stxr(v1778 + 1, v1777));
          }
        }
        else
        {
          v1776 = (_QWORD *)v1880;
          v1841 = (std::string *)v1772;
          v1842 = 0;
        }
        std::string::basic_string[abi:ne180100]<0>(&v1860, "input");
        RIO_MTLX::Element::changeChildCategory(v1776, &v1841, (uint64_t)&v1860, (uint64_t *)&v1861);
        RIO_MTLX::Element::asA<RIO_MTLX::Input>((uint64_t)v1861, &v1863);
        v1780 = v1862;
        if (v1862)
        {
          v1781 = (unint64_t *)&v1862->__shared_owners_;
          do
            v1782 = __ldaxr(v1781);
          while (__stlxr(v1782 - 1, v1781));
          if (!v1782)
          {
            ((void (*)(std::__shared_weak_count *))v1780->__on_zero_shared)(v1780);
            std::__shared_weak_count::__release_weak(v1780);
          }
        }
        if (SHIBYTE(v1860.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1860.__r_.__value_.__l.__data_);
        v1783 = v1842;
        if (v1842)
        {
          v1784 = (unint64_t *)&v1842->__shared_owners_;
          do
            v1785 = __ldaxr(v1784);
          while (__stlxr(v1785 - 1, v1784));
          if (!v1785)
          {
            ((void (*)(std::__shared_weak_count *))v1783->__on_zero_shared)(v1783);
            std::__shared_weak_count::__release_weak(v1783);
          }
        }
        v1786 = v1880;
        v1787 = RIO_MTLX::EMPTY_STRING(v1779);
        RIO_MTLX::Element::asA<RIO_MTLX::NodeDef>(v1786, &v1860);
        v1789 = *(_OWORD *)&v1860.__r_.__value_.__l.__data_;
        if (!v1860.__r_.__value_.__l.__size_)
          goto LABEL_3231;
        v1790 = (unint64_t *)(v1860.__r_.__value_.__l.__size_ + 8);
        do
          v1791 = __ldaxr(v1790);
        while (__stlxr(v1791 - 1, v1790));
        if (!v1791)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v1789 + 1) + 16))(*((_QWORD *)&v1789 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1789 + 1));
          if ((_QWORD)v1789)
          {
LABEL_3232:
            v1792 = *((char *)v1787 + 23);
            v1793 = v1787[1];
            if (v1792 >= 0)
              v1793 = *((unsigned __int8 *)v1787 + 23);
            if (v1793)
            {
              v1794 = *(unsigned __int8 *)(v1786 + 47);
              if ((v1794 & 0x80u) == 0)
                v1795 = *(unsigned __int8 *)(v1786 + 47);
              else
                v1795 = *(_QWORD *)(v1786 + 32);
              if (v1795 != v1793)
                goto LABEL_3251;
              v1796 = (const void **)(v1786 + 24);
              if (v1792 >= 0)
                v1797 = (unsigned __int8 *)v1787;
              else
                v1797 = (unsigned __int8 *)*v1787;
              if ((v1794 & 0x80) != 0)
              {
                v1788 = (RIO_MTLX::ValueElement *)memcmp(*v1796, v1797, *(_QWORD *)(v1786 + 32));
                if ((_DWORD)v1788)
                  goto LABEL_3251;
              }
              else if (*(_BYTE *)(v1786 + 47))
              {
                while (*(unsigned __int8 *)v1796 == *v1797)
                {
                  v1796 = (const void **)((char *)v1796 + 1);
                  ++v1797;
                  if (!--v1794)
                    goto LABEL_3250;
                }
                goto LABEL_3251;
              }
            }
LABEL_3250:
            v1798 = (uint64_t *)v1863;
            v1860.__r_.__value_.__s.__data_[0] = 1;
            v1799 = (__int128 *)RIO_MTLX::ValueElement::UNIFORM_ATTRIBUTE(v1788);
            RIO_MTLX::Element::setTypedAttribute<BOOL>(v1798, v1799, (RIO_MTLX *)&v1860);
          }
        }
        else
        {
LABEL_3231:
          if ((_QWORD)v1789)
            goto LABEL_3232;
        }
LABEL_3251:
        v1800 = v1864;
        if (v1864)
        {
          v1801 = (unint64_t *)&v1864->__shared_owners_;
          do
            v1802 = __ldaxr(v1801);
          while (__stlxr(v1802 - 1, v1801));
          if (!v1802)
          {
            ((void (*)(std::__shared_weak_count *))v1800->__on_zero_shared)(v1800);
            std::__shared_weak_count::__release_weak(v1800);
          }
        }
        v1803 = v1879;
        if (v1879)
        {
          v1804 = (unint64_t *)&v1879->__shared_owners_;
          do
            v1805 = __ldaxr(v1804);
          while (__stlxr(v1805 - 1, v1804));
          if (!v1805)
          {
            ((void (*)(std::__shared_weak_count *))v1803->__on_zero_shared)(v1803);
            std::__shared_weak_count::__release_weak(v1803);
          }
        }
        v1771 += 16;
        continue;
      }
    }
    v1765 = *(unsigned __int8 *)(v1756 + 47);
    if ((v1765 & 0x80u) == 0)
      v1766 = *(unsigned __int8 *)(v1756 + 47);
    else
      v1766 = *(_QWORD *)(v1756 + 32);
    if (v1766 == v1764)
    {
      v1767 = (const void **)(v1756 + 24);
      if (v1763 >= 0)
        v1768 = (unsigned __int8 *)v1759;
      else
        v1768 = (unsigned __int8 *)*v1759;
      if ((v1765 & 0x80) != 0)
      {
        if (!memcmp(*v1767, v1768, *(_QWORD *)(v1756 + 32)))
          goto LABEL_3203;
      }
      else
      {
        if (!*(_BYTE *)(v1756 + 47))
          goto LABEL_3203;
        while (*(unsigned __int8 *)v1767 == *v1768)
        {
          v1767 = (const void **)((char *)v1767 + 1);
          ++v1768;
          if (!--v1765)
            goto LABEL_3203;
        }
      }
    }
LABEL_3263:
    v1806 = (std::__shared_weak_count *)*((_QWORD *)&v1880 + 1);
    if (*((_QWORD *)&v1880 + 1))
    {
      v1807 = (unint64_t *)(*((_QWORD *)&v1880 + 1) + 8);
      do
        v1808 = __ldaxr(v1807);
      while (__stlxr(v1808 - 1, v1807));
      if (!v1808)
      {
        ((void (*)(std::__shared_weak_count *))v1806->__on_zero_shared)(v1806);
        std::__shared_weak_count::__release_weak(v1806);
      }
    }
    RIO_MTLX::TreeIterator::operator++(&v2021);
  }
  v1873.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str_16;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1873);
  v1809 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
  if (*((_QWORD *)&__str + 1))
  {
    v1810 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
    do
      v1811 = __ldaxr(v1810);
    while (__stlxr(v1811 - 1, v1810));
    if (!v1811)
    {
      ((void (*)(std::__shared_weak_count *))v1809->__on_zero_shared)(v1809);
      std::__shared_weak_count::__release_weak(v1809);
    }
  }
  *(_QWORD *)&__str = &v2022;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v1812 = (std::__shared_weak_count *)*((_QWORD *)&v2021 + 1);
  if (*((_QWORD *)&v2021 + 1))
  {
    v1813 = (unint64_t *)(*((_QWORD *)&v2021 + 1) + 8);
    do
      v1814 = __ldaxr(v1813);
    while (__stlxr(v1814 - 1, v1813));
    if (!v1814)
    {
      ((void (*)(std::__shared_weak_count *))v1812->__on_zero_shared)(v1812);
      std::__shared_weak_count::__release_weak(v1812);
    }
  }
  *(_QWORD *)&v2021 = (char *)&v2026.__r_.__value_.__l + 16;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2021);
  v1815 = (std::__shared_weak_count *)v2026.__r_.__value_.__l.__size_;
  if (v2026.__r_.__value_.__l.__size_)
  {
    v1816 = (unint64_t *)(v2026.__r_.__value_.__l.__size_ + 8);
    do
      v1817 = __ldaxr(v1816);
    while (__stlxr(v1817 - 1, v1816));
    if (!v1817)
    {
      ((void (*)(std::__shared_weak_count *))v1815->__on_zero_shared)(v1815);
      std::__shared_weak_count::__release_weak(v1815);
    }
  }
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1885;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  v2026.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1888;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2026);
  if (SHIBYTE(v2034.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2034.__r_.__value_.__l.__data_);
  if (SHIBYTE(v2033) < 0)
    operator delete(*(void **)&v2032[8]);
  if ((v2032[7] & 0x80000000) != 0)
    operator delete((void *)v2031);
  if (SHIBYTE(v2030.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2030.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1909.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1909.__r_.__value_.__l.__data_);
  if (v1911 < 0)
    operator delete(v1910[0]);
  if (SHIBYTE(v1912.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1912.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1913.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1913.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1914.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1914.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1915.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1915.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1916.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1916.__r_.__value_.__l.__data_);
  if (v1918 < 0)
    operator delete(v1917[0]);
  if (v1920 < 0)
    operator delete(v1919[0]);
  if (v1922 < 0)
    operator delete(v1921[0]);
  if (SHIBYTE(v1923.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1923.__r_.__value_.__l.__data_);
  if (v1925 < 0)
    operator delete(v1924[0]);
  if (SHIBYTE(v1927) < 0)
    operator delete((void *)v1926);
  if (SHIBYTE(v1928.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1928.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1930) < 0)
    operator delete((void *)v1929);
  if (SHIBYTE(v1931.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1931.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1935.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1935.__r_.__value_.__l.__data_);
  if ((char)v1934 < 0)
    operator delete(v1933[0]);
  if (SHIBYTE(v1939.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1939.__r_.__value_.__l.__data_);
  if ((char)v1938 < 0)
    operator delete(v1936);
  if (SHIBYTE(v1942.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1942.__r_.__value_.__l.__data_);
  if ((char)v1941 < 0)
    operator delete(v1940[0]);
  if (SHIBYTE(v1944.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1944.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1943.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1943.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1946.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1946.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1945.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1945.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1948.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1948.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1947.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1947.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1951.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1951.__r_.__value_.__l.__data_);
  if ((char)v1950 < 0)
    operator delete(v1949[0]);
  if (SHIBYTE(v1953.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1953.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1952.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1952.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1955.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1955.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1954.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1954.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1957.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1957.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v1963 < 0)
    operator delete((void *)v1962);
  if (v1966 < 0)
    operator delete(v1964);
  if ((char)v1969 < 0)
    operator delete(v1967);
  if (SHIBYTE(v1970.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1970.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1971.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1971.__r_.__value_.__l.__data_);
  if ((char)v1974 < 0)
    operator delete(v1972);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v1983);
  RIO_MTLX::InterfaceElement::setVersionIntegers((RIO_MTLX::InterfaceElement *)this, 1, 38);
}

void sub_23000A70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;
  uint64_t v71;

  if (SLOBYTE(STACK[0x99F]) < 0)
    operator delete((void *)STACK[0x988]);
  if (*(char *)(v71 - 185) < 0)
    operator delete(*(void **)(v71 - 208));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x8C0]);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x580]);
  if (SLOBYTE(STACK[0x627]) < 0)
    operator delete((void *)STACK[0x610]);
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x640], (char *)STACK[0x648]);
  STACK[0x640] = (unint64_t)&a71;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x640]);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void **v16;
  unsigned __int8 *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2 != a3)
  {
    for (i = a2; i != a3; i += 2)
    {
      v9 = *i;
      v8 = i[1];
      v25 = *i;
      v26 = (std::__shared_weak_count *)v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Element>(v9, &v24);
      if (!(_QWORD)v24)
        goto LABEL_24;
      v12 = (char)a4[23];
      v13 = *((_QWORD *)a4 + 1);
      if (v12 >= 0)
        v13 = a4[23];
      if (v13)
      {
        v14 = *(unsigned __int8 *)(v9 + 47);
        if ((v14 & 0x80u) == 0)
          v15 = *(unsigned __int8 *)(v9 + 47);
        else
          v15 = *(_QWORD *)(v9 + 32);
        if (v15 != v13)
          goto LABEL_24;
        v16 = (const void **)(v9 + 24);
        if (v12 >= 0)
          v17 = a4;
        else
          v17 = *(unsigned __int8 **)a4;
        if ((v14 & 0x80) != 0)
        {
          if (memcmp(*v16, v17, *(_QWORD *)(v9 + 32)))
            goto LABEL_24;
        }
        else if (*(_BYTE *)(v9 + 47))
        {
          while (*(unsigned __int8 *)v16 == *v17)
          {
            v16 = (const void **)((char *)v16 + 1);
            ++v17;
            if (!--v14)
              goto LABEL_23;
          }
          goto LABEL_24;
        }
      }
LABEL_23:
      std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a1, &v24);
LABEL_24:
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
}

void sub_23000C75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

BOOL RIO_MTLX::Element::isA<RIO_MTLX::Node>(uint64_t a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  unsigned __int8 *v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  RIO_MTLX::Element::asA<RIO_MTLX::Node>(a1, &v15);
  v5 = v15;
  v4 = v16;
  if (!v16)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      return 0;
  }
  else
  {
LABEL_5:
    if (!v5)
      return 0;
  }
  v8 = (char)a2[23];
  v9 = *((_QWORD *)a2 + 1);
  if (v8 >= 0)
    v9 = a2[23];
  if (!v9)
    return 1;
  v10 = *(unsigned __int8 *)(a1 + 47);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 47);
  else
    v11 = *(_QWORD *)(a1 + 32);
  if (v11 != v9)
    return 0;
  v12 = (const void **)(a1 + 24);
  if (v8 >= 0)
    v13 = a2;
  else
    v13 = *(unsigned __int8 **)a2;
  if ((v10 & 0x80) != 0)
    return !memcmp(*v12, v13, *(_QWORD *)(a1 + 32));
  if (*(_BYTE *)(a1 + 47))
  {
    while (*(unsigned __int8 *)v12 == *v13)
    {
      v12 = (const void **)((char *)v12 + 1);
      ++v13;
      if (!--v10)
        return 1;
    }
    return 0;
  }
  return 1;
}

BOOL RIO_MTLX::Element::isA<RIO_MTLX::Output>(uint64_t a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  unsigned __int8 *v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  RIO_MTLX::Element::asA<RIO_MTLX::Output>(a1, &v15);
  v5 = v15;
  v4 = v16;
  if (!v16)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      return 0;
  }
  else
  {
LABEL_5:
    if (!v5)
      return 0;
  }
  v8 = (char)a2[23];
  v9 = *((_QWORD *)a2 + 1);
  if (v8 >= 0)
    v9 = a2[23];
  if (!v9)
    return 1;
  v10 = *(unsigned __int8 *)(a1 + 47);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 47);
  else
    v11 = *(_QWORD *)(a1 + 32);
  if (v11 != v9)
    return 0;
  v12 = (const void **)(a1 + 24);
  if (v8 >= 0)
    v13 = a2;
  else
    v13 = *(unsigned __int8 **)a2;
  if ((v10 & 0x80) != 0)
    return !memcmp(*v12, v13, *(_QWORD *)(a1 + 32));
  if (*(_BYTE *)(a1 + 47))
  {
    while (*(unsigned __int8 *)v12 == *v13)
    {
      v12 = (const void **)((char *)v12 + 1);
      ++v13;
      if (!--v10)
        return 1;
    }
    return 0;
  }
  return 1;
}

void RIO_MTLX::`anonymous namespace'::getShaderNodeDef(RIO_MTLX::InterfaceElement *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t *v28;
  __int128 v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t *v33;
  __int128 v34;
  void **p_data;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  RIO_MTLX::InterfaceElement *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *Target;
  std::string::size_type size;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  std::string::size_type v53;
  std::string *v54;
  char v55;
  std::string __p;
  std::string *p_p;
  std::__shared_weak_count *v58;
  uint64_t v59;
  uint64_t v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;

  v4 = *a2;
  v5 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(a1);
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v4 + 160), v5);
  if (v6)
  {
    v7 = *a2;
    v8 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v6);
    v9 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v7 + 160), v8);
    if (v9)
      v10 = (uint64_t *)(v9 + 40);
    else
      v10 = RIO_MTLX::EMPTY_STRING(0);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v64, (const std::string::value_type *)*v10, v10[1]);
    }
    else
    {
      v18 = *(_OWORD *)v10;
      v64.__r_.__value_.__r.__words[2] = v10[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v18;
    }
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeDef>(*a2, &v64, a1);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    return;
  }
  v11 = *a2;
  v12 = (unsigned __int8 *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE(0);
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v11 + 160), v12);
  if (!v13)
    goto LABEL_84;
  v14 = *a2;
  v15 = (unsigned __int8 *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE((RIO_MTLX::NodeDef *)v13);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v14 + 160), v15);
  if (v16)
    v17 = (uint64_t *)(v16 + 40);
  else
    v17 = RIO_MTLX::EMPTY_STRING(0);
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v64, (const std::string::value_type *)*v17, v17[1]);
  }
  else
  {
    v19 = *(_OWORD *)v17;
    v64.__r_.__value_.__r.__words[2] = v17[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v19;
  }
  v20 = *a2;
  v21 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v17);
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v20 + 160), v21);
  if (v22)
    v23 = (uint64_t *)(v22 + 40);
  else
    v23 = RIO_MTLX::EMPTY_STRING(0);
  if (*((char *)v23 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v63, (const std::string::value_type *)*v23, v23[1]);
  }
  else
  {
    v24 = *(_OWORD *)v23;
    v63.__r_.__value_.__r.__words[2] = v23[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v24;
  }
  v25 = *a2;
  v26 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::TARGET_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v23);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v25 + 160), v26);
  if (v27)
    v28 = (uint64_t *)(v27 + 40);
  else
    v28 = RIO_MTLX::EMPTY_STRING(0);
  if (*((char *)v28 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v62, (const std::string::value_type *)*v28, v28[1]);
  }
  else
  {
    v29 = *(_OWORD *)v28;
    v62.__r_.__value_.__r.__words[2] = v28[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v29;
  }
  v30 = *a2;
  v31 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v28);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v30 + 160), v31);
  if (v32)
    v33 = (uint64_t *)(v32 + 40);
  else
    v33 = RIO_MTLX::EMPTY_STRING(0);
  if (*((char *)v33 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)*v33, v33[1]);
  }
  else
  {
    v34 = *(_OWORD *)v33;
    v61.__r_.__value_.__r.__words[2] = v33[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v34;
  }
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)*a2, &p_p);
  p_data = (void **)&p_p->__r_.__value_.__l.__data_;
  RIO_MTLX::Element::getQualifiedName(*a2, &v64, &__p);
  RIO_MTLX::Document::getMatchingNodeDefs((uint64_t)p_data, (unsigned __int8 *)&__p, (uint64_t)&v59);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v36 = v58;
  if (v58)
  {
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)*a2, &p_p);
  RIO_MTLX::Document::getMatchingNodeDefs((uint64_t)p_p, (unsigned __int8 *)&v64, (uint64_t)&__p);
  v39 = v58;
  if (v58)
  {
    v40 = (unint64_t *)&v58->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<RIO_MTLX::NodeDef>*>,std::__wrap_iter<std::shared_ptr<RIO_MTLX::NodeDef>*>>(&v59, v60, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
  v42 = v59;
  v43 = v60;
  if (v59 == v60)
  {
LABEL_73:
    v55 = 1;
    goto LABEL_75;
  }
  while (1)
  {
    v44 = *(RIO_MTLX::InterfaceElement **)v42;
    *(_QWORD *)a1 = *(_QWORD *)v42;
    v45 = *(_QWORD *)(v42 + 8);
    *((_QWORD *)a1 + 1) = v45;
    if (v45)
    {
      v46 = (unint64_t *)(v45 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      v44 = *(RIO_MTLX::InterfaceElement **)a1;
    }
    Target = RIO_MTLX::InterfaceElement::getTarget(v44);
    if (!RIO_MTLX::targetStringsMatch((uint64_t)Target, (uint64_t)&v62)
      || !RIO_MTLX::NodeDef::isVersionCompatible(*(RIO_MTLX::InterfaceElement **)a1, (unsigned __int8 *)&v61))
    {
      goto LABEL_72;
    }
    size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v63.__r_.__value_.__l.__size_;
    if (!size)
      break;
    v50 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 56))(*(_QWORD *)a1);
    v51 = v50[23];
    if ((v51 & 0x80u) == 0)
      v52 = v50[23];
    else
      v52 = *((_QWORD *)v50 + 1);
    v53 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v53 = v63.__r_.__value_.__l.__size_;
    if (v52 == v53)
    {
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = &v63;
      else
        v54 = (std::string *)v63.__r_.__value_.__r.__words[0];
      if ((v51 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v50, v54, *((_QWORD *)v50 + 1)))
          break;
      }
      else
      {
        if (!v50[23])
          break;
        while (*v50 == v54->__r_.__value_.__s.__data_[0])
        {
          ++v50;
          v54 = (std::string *)((char *)v54 + 1);
          if (!--v51)
            goto LABEL_74;
        }
      }
    }
LABEL_72:
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a1);
    v42 += 16;
    if (v42 == v43)
      goto LABEL_73;
  }
LABEL_74:
  v55 = 0;
LABEL_75:
  p_p = &__p;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if ((v55 & 1) != 0)
  {
LABEL_84:
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
  }
}

void sub_23000CDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void **a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  a15 = (void **)&a9;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  a9 = &a17;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a25 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (*(char *)(v32 - 73) < 0)
    operator delete(*(void **)(v32 - 96));
  if (*(char *)(v32 - 41) < 0)
    operator delete(*(void **)(v32 - 64));
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::NodeDef::getNodeString(RIO_MTLX::NodeDef *this)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  v2 = (unsigned __int8 *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE(this);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, v2);
  if (v3)
    return (uint64_t *)(v3 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

uint64_t *RIO_MTLX::PortElement::getOutputString(RIO_MTLX::PortElement *this)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  v2 = (unsigned __int8 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(this);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, v2);
  if (v3)
    return (uint64_t *)(v3 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

std::string *RIO_MTLX::InterfaceElement::addInput@<X0>(RIO_MTLX::Input *a1@<X0>, uint64_t a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v6;
  RIO_MTLX::TypedElement *v7;
  __int128 *v8;

  RIO_MTLX::Element::addChild<RIO_MTLX::Input>(a1, a2, a4);
  v6 = (uint64_t *)*a4;
  v8 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v7);
  return RIO_MTLX::Element::setAttribute(v6, v8, a3);
}

void sub_23000CF9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Document::upgradeVersion(void)::$_0::operator()(uint64_t a1, std::string **a2, std::string *a3)
{
  std::string *v5;
  RIO_MTLX *v6;
  const std::string *v7;
  std::string *v8;
  uint64_t *v9;
  __int128 *v10;
  uint64_t *v11;
  RIO_MTLX::ValueElement *v12;
  __int128 *v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string v18;
  std::string __p;
  uint64_t *v20;
  std::__shared_weak_count *v21;

  if (*a2)
  {
    RIO_MTLX::Element::setName(*a2, a3);
    v5 = *a2;
    v7 = (const std::string *)RIO_MTLX::STRING_TYPE_STRING(v6);
    v8 = RIO_MTLX::InterfaceElement::addInput((RIO_MTLX::Input *)v5, a1, v7, (uint64_t *)&v20);
    v9 = v20;
    __p.__r_.__value_.__s.__data_[0] = 1;
    v10 = (__int128 *)RIO_MTLX::ValueElement::UNIFORM_ATTRIBUTE((RIO_MTLX::ValueElement *)v8);
    RIO_MTLX::Element::setTypedAttribute<BOOL>(v9, v10, (RIO_MTLX *)&__p);
    v11 = v20;
    v12 = (RIO_MTLX::ValueElement *)std::string::basic_string[abi:ne180100]<0>(&__p, "R");
    v13 = (__int128 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v12);
    RIO_MTLX::Element::setAttribute(v11, v13, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v14 = v20;
    std::string::basic_string[abi:ne180100]<0>(&__p, "enum");
    std::string::basic_string[abi:ne180100]<0>(&v18, "R,T,RT");
    RIO_MTLX::Element::setAttribute(v14, (__int128 *)&__p, &v18);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v15 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_23000D0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v20 - 32);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Document::upgradeVersion(void)::$_1::operator()(const std::string *a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string *v10;
  size_t size;
  std::string *p_p;
  std::string *v13;
  RIO_MTLX::PortElement *v14;
  std::string *v15;
  unint64_t *p_size;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  RIO_MTLX::PortElement *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  const std::string *v44[2];
  const std::string *v45[2];
  RIO_MTLX::PortElement *v46;
  std::__shared_weak_count *v47;
  RIO_MTLX::PortElement *v48;
  std::__shared_weak_count *v49;
  std::string __p;
  std::string v51;
  RIO_MTLX::Node *v52;
  std::__shared_weak_count *v53;
  const std::string *v54;
  const std::string *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;

  v4 = (unsigned __int8 *)&a1[1];
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(*a2, (unsigned __int8 *)&a1[1], &v56);
  if (v56)
  {
    (*(void (**)(const std::string **__return_ptr))(*(_QWORD *)v56 + 64))(&v54);
    if (v54)
    {
      v5 = *a2;
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = 0uLL;
      v6 = *(std::__shared_weak_count **)(v5 + 232);
      if (v6)
      {
        v6 = std::__shared_weak_count::lock(v6);
        v7 = v6;
        v51.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
        if (v6)
        {
          v6 = *(std::__shared_weak_count **)(v5 + 224);
          v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
        }
      }
      else
      {
        v7 = 0;
      }
      RIO_MTLX::Element::asA<RIO_MTLX::GraphElement>((uint64_t)v6, &v52);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = (std::string *)*a2;
      if (*(char *)(*a2 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v51, v10[2].__r_.__value_.__l.__data_, v10[2].__r_.__value_.__l.__size_);
        v10 = (std::string *)*a2;
      }
      else
      {
        v51 = v10[2];
      }
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
      else
        size = v51.__r_.__value_.__l.__size_;
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 11);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v13 = &v51;
        else
          v13 = (std::string *)v51.__r_.__value_.__r.__words[0];
        memmove(p_p, v13, size);
      }
      strcpy((char *)p_p + size, "__layer_top");
      RIO_MTLX::Element::setName(v10, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      RIO_MTLX::GraphElement::addNode(v52, a1 + 2, (uint64_t)&v51, a1 + 3, (uint64_t *)&__p);
      RIO_MTLX::InterfaceElement::addInput((RIO_MTLX::Input *)__p.__r_.__value_.__l.__data_, (uint64_t)a1, a1 + 3, (uint64_t *)&v48);
      RIO_MTLX::InterfaceElement::addInput((RIO_MTLX::Input *)__p.__r_.__value_.__l.__data_, (uint64_t)&a1[1], a1 + 3, (uint64_t *)&v46);
      v14 = v48;
      v15 = (std::string *)a2[1];
      v45[0] = (const std::string *)*a2;
      v45[1] = v15;
      if (v15)
      {
        p_size = &v15->__r_.__value_.__l.__size_;
        do
          v17 = __ldxr(p_size);
        while (__stxr(v17 + 1, p_size));
      }
      RIO_MTLX::PortElement::setConnectedNode(v14, v45);
      if (v15)
      {
        v18 = &v15->__r_.__value_.__l.__size_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          (*(void (**)(std::string *))(v15->__r_.__value_.__r.__words[0] + 16))(v15);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
        }
      }
      v20 = v46;
      v21 = (std::__shared_weak_count *)v55;
      v44[0] = v54;
      v44[1] = v55;
      if (v55)
      {
        v22 = &v55->__r_.__value_.__l.__size_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      RIO_MTLX::PortElement::setConnectedNode(v20, v44);
      if (v21)
      {
        v24 = (unint64_t *)&v21->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v26 = v47;
      if (v47)
      {
        v27 = (unint64_t *)&v47->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = v49;
      if (v49)
      {
        v30 = (unint64_t *)&v49->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v33 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      v35 = v53;
      if (v53)
      {
        v36 = (unint64_t *)&v53->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    RIO_MTLX::Element::removeChildOfType<RIO_MTLX::Input>((_QWORD *)*a2, v4);
    v38 = (std::__shared_weak_count *)v55;
    if (v55)
    {
      v39 = &v55->__r_.__value_.__l.__size_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  v41 = v57;
  if (v57)
  {
    v42 = (unint64_t *)&v57->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_23000D550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v29 - 96);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v29 - 80);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v29 - 64);
  _Unwind_Resume(a1);
}

void sub_23000D5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x23000D5D4);
}

void sub_23000D5FC()
{
  JUMPOUT(0x23000D5D4);
}

void sub_23000D604()
{
  JUMPOUT(0x23000D5DCLL);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::ValueElement>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::ValueElement>(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_23000D790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::PortElement::getNodeName(RIO_MTLX::PortElement *this)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  v2 = (unsigned __int8 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(this);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, v2);
  if (v3)
    return (uint64_t *)(v3 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

uint64_t RIO_MTLX::Document::upgradeVersion(void)::$_1::~$_1(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void RIO_MTLX::Document::copy(RIO_MTLX::Document *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const std::string *v8;
  std::__shared_weak_count *v9;

  RIO_MTLX::Document::createDocument<RIO_MTLX::Document>(this, a2);
  v4 = *a2;
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v8, (_QWORD *)this + 1);
  RIO_MTLX::Element::copyContentFrom(v4, &v8);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_23000D8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::addChild<RIO_MTLX::NodeGraph>(RIO_MTLX::NodeGraph *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::string::size_type size;
  char *v6;
  char *v7;
  size_t v8;
  void **v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p[2];
  char v23;
  std::string v24;
  std::string v25;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v25.__r_.__value_.__l.__size_;
  if (!size)
  {
    v6 = (char *)RIO_MTLX::NodeGraph::CATEGORY(a1);
    v7 = v6;
    if (v6[23] >= 0)
      v8 = v6[23];
    else
      v8 = *((_QWORD *)v6 + 1);
    v9 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
    if (v23 < 0)
      v9 = (void **)__p[0];
    if (v8)
    {
      if (v7[23] >= 0)
        v10 = v7;
      else
        v10 = *(char **)v7;
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)v9 + v8) = 49;
    RIO_MTLX::Element::createValidChildName((uint64_t)a1, (uint64_t)__p, (uint64_t)&v24);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v25 = v24;
    *((_BYTE *)&v24.__r_.__value_.__s + 23) = 0;
    v24.__r_.__value_.__s.__data_[0] = 0;
    if (v23 < 0)
      operator delete(__p[0]);
  }
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v24, (_QWORD *)a1 + 1);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::NodeGraph,std::allocator<RIO_MTLX::NodeGraph>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>((__int128 *)&v24, (uint64_t)&v25, a3);
  v11 = (std::__shared_weak_count *)v24.__r_.__value_.__l.__size_;
  if (v24.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v24.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)a3[1];
  v20 = *a3;
  v21 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  (*(void (**)(RIO_MTLX::NodeGraph *, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v20);
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_23000DB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<RIO_MTLX::NodeGraph,std::allocator<RIO_MTLX::NodeGraph>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>(__int128 *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x128uLL);
  std::__shared_ptr_emplace<RIO_MTLX::NodeGraph>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::NodeGraph>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_23000DBC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<RIO_MTLX::NodeGraph>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::NodeGraph>,0>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDE3E68;
  std::allocator<RIO_MTLX::NodeGraph>::construct[abi:ne180100]<RIO_MTLX::NodeGraph,std::shared_ptr<RIO_MTLX::Element>,std::string &>((uint64_t)&v5, (RIO_MTLX::NodeGraph *)(a1 + 3), a2, a3);
  return a1;
}

void sub_23000DC20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<RIO_MTLX::NodeGraph>::construct[abi:ne180100]<RIO_MTLX::NodeGraph,std::shared_ptr<RIO_MTLX::Element>,std::string &>(uint64_t a1, RIO_MTLX::NodeGraph *a2, __int128 *a3, uint64_t a4)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  RIO_MTLX::NodeGraph::NodeGraph(a2, (uint64_t *)&v7, a4);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_23000DCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::setTypedAttribute<BOOL>(uint64_t *a1, __int128 *a2, RIO_MTLX *a3)
{
  std::string __p;

  RIO_MTLX::toValueString<BOOL>(a3, &__p);
  RIO_MTLX::Element::setAttribute(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_23000DD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::Output>(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_23000DEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::addChild<RIO_MTLX::Output>(RIO_MTLX::Output *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::string::size_type size;
  char *v6;
  char *v7;
  size_t v8;
  void **v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p[2];
  char v23;
  std::string v24;
  std::string v25;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v25.__r_.__value_.__l.__size_;
  if (!size)
  {
    v6 = (char *)RIO_MTLX::Output::CATEGORY(a1);
    v7 = v6;
    if (v6[23] >= 0)
      v8 = v6[23];
    else
      v8 = *((_QWORD *)v6 + 1);
    v9 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
    if (v23 < 0)
      v9 = (void **)__p[0];
    if (v8)
    {
      if (v7[23] >= 0)
        v10 = v7;
      else
        v10 = *(char **)v7;
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)v9 + v8) = 49;
    RIO_MTLX::Element::createValidChildName((uint64_t)a1, (uint64_t)__p, (uint64_t)&v24);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v25 = v24;
    *((_BYTE *)&v24.__r_.__value_.__s + 23) = 0;
    v24.__r_.__value_.__s.__data_[0] = 0;
    if (v23 < 0)
      operator delete(__p[0]);
  }
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v24, (_QWORD *)a1 + 1);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::Output,std::allocator<RIO_MTLX::Output>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>((__int128 *)&v24, (uint64_t)&v25, a3);
  v11 = (std::__shared_weak_count *)v24.__r_.__value_.__l.__size_;
  if (v24.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v24.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)a3[1];
  v20 = *a3;
  v21 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  (*(void (**)(RIO_MTLX::Output *, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v20);
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_23000E0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<RIO_MTLX::Output,std::allocator<RIO_MTLX::Output>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>(__int128 *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x118uLL);
  std::__shared_ptr_emplace<RIO_MTLX::Output>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::Output>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_23000E194(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<RIO_MTLX::Output>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::Output>,0>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDE3EB8;
  std::allocator<RIO_MTLX::Output>::construct[abi:ne180100]<RIO_MTLX::Output,std::shared_ptr<RIO_MTLX::Element>,std::string &>((uint64_t)&v5, (RIO_MTLX::Output *)(a1 + 3), a2, a3);
  return a1;
}

void sub_23000E1F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<RIO_MTLX::Output>::construct[abi:ne180100]<RIO_MTLX::Output,std::shared_ptr<RIO_MTLX::Element>,std::string &>(uint64_t a1, RIO_MTLX::Output *a2, __int128 *a3, uint64_t a4)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  RIO_MTLX::Output::Output(a2, (uint64_t *)&v7, a4);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_23000E27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>(uint64_t a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  unsigned __int8 *v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  RIO_MTLX::Element::asA<RIO_MTLX::NodeGraph>(a1, &v15);
  v5 = v15;
  v4 = v16;
  if (!v16)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      return 0;
  }
  else
  {
LABEL_5:
    if (!v5)
      return 0;
  }
  v8 = (char)a2[23];
  v9 = *((_QWORD *)a2 + 1);
  if (v8 >= 0)
    v9 = a2[23];
  if (!v9)
    return 1;
  v10 = *(unsigned __int8 *)(a1 + 47);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 47);
  else
    v11 = *(_QWORD *)(a1 + 32);
  if (v11 != v9)
    return 0;
  v12 = (const void **)(a1 + 24);
  if (v8 >= 0)
    v13 = a2;
  else
    v13 = *(unsigned __int8 **)a2;
  if ((v10 & 0x80) != 0)
    return !memcmp(*v12, v13, *(_QWORD *)(a1 + 32));
  if (*(_BYTE *)(a1 + 47))
  {
    while (*(unsigned __int8 *)v12 == *v13)
    {
      v12 = (const void **)((char *)v12 + 1);
      ++v13;
      if (!--v10)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t *RIO_MTLX::Implementation::getNodeGraph(RIO_MTLX::Implementation *this)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  v2 = (unsigned __int8 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(this);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, v2);
  if (v3)
    return (uint64_t *)(v3 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>>>::__emplace_multi<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];
  char v14;

  v6 = a1 + 16;
  v7 = operator new(0x38uLL);
  v13[0] = v7;
  v13[1] = v6;
  *v7 = 0;
  v7[1] = 0;
  *((_OWORD *)v7 + 1) = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v10 = *a3;
  v9 = a3[1];
  v7[4] = v8;
  v7[5] = v10;
  v7[6] = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v14 = 1;
  v7[1] = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, (uint64_t)v7);
  v13[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
}

void sub_23000E510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::GeomProp>(_QWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a2 + 96), a3);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a1 = 0;
    a1[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::GeomProp>(v6, a1);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_23000E5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeGraph>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::NodeGraph>(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_23000E778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<RIO_MTLX::NodeDef>*>,std::__wrap_iter<std::shared_ptr<RIO_MTLX::NodeDef>*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD v33[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v33[4] = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v9, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v15];
    v33[0] = v18;
    v33[1] = v26;
    v33[3] = &v18[16 * v17];
    v27 = &v26[2 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26 += 2;
      a3 += 2;
    }
    while (v26 != v27);
    v33[2] = v27;
    v5 = (_QWORD *)std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__swap_out_circular_buffer(a1, v33, v5);
    std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)v33);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
LABEL_29:
    std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__move_range((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      v31 = v5;
      do
      {
        std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](v31, a3);
        a3 += 2;
        v31 += 2;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_23000E980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v7 = (uint64_t)(v4 - 16);
    v8 = 16 * ((v4 - a4) >> 4);
    v9 = a2 - 16;
    do
    {
      result = std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v7, (__int128 *)(v9 + v8));
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeDef>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::NodeDef>(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_23000EC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::Output>(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_23000ED18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(_QWORD *a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)a1, a2, &v8);
  v5 = v8;
  v4 = v9;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    if (!v5)
      return;
  }
  RIO_MTLX::Element::removeChild(a1, a2);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::Input>(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_23000EE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::removeChildOfType<RIO_MTLX::Node>(_QWORD *a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Node>((uint64_t)a1, a2, &v8);
  v5 = v8;
  v4 = v9;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    if (!v5)
      return;
  }
  RIO_MTLX::Element::removeChild(a1, a2);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_23000EF3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::addChild<RIO_MTLX::Input>(RIO_MTLX::Input *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::string::size_type size;
  char *v6;
  char *v7;
  size_t v8;
  void **v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p[2];
  char v23;
  std::string v24;
  std::string v25;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v25.__r_.__value_.__l.__size_;
  if (!size)
  {
    v6 = (char *)RIO_MTLX::Input::CATEGORY(a1);
    v7 = v6;
    if (v6[23] >= 0)
      v8 = v6[23];
    else
      v8 = *((_QWORD *)v6 + 1);
    v9 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
    if (v23 < 0)
      v9 = (void **)__p[0];
    if (v8)
    {
      if (v7[23] >= 0)
        v10 = v7;
      else
        v10 = *(char **)v7;
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)v9 + v8) = 49;
    RIO_MTLX::Element::createValidChildName((uint64_t)a1, (uint64_t)__p, (uint64_t)&v24);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v25 = v24;
    *((_BYTE *)&v24.__r_.__value_.__s + 23) = 0;
    v24.__r_.__value_.__s.__data_[0] = 0;
    if (v23 < 0)
      operator delete(__p[0]);
  }
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v24, (_QWORD *)a1 + 1);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::Input,std::allocator<RIO_MTLX::Input>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>((__int128 *)&v24, (uint64_t)&v25, a3);
  v11 = (std::__shared_weak_count *)v24.__r_.__value_.__l.__size_;
  if (v24.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v24.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)a3[1];
  v20 = *a3;
  v21 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  (*(void (**)(RIO_MTLX::Input *, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v20);
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_23000F158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<RIO_MTLX::Input,std::allocator<RIO_MTLX::Input>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>(__int128 *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x118uLL);
  std::__shared_ptr_emplace<RIO_MTLX::Input>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::Input>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_23000F20C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<RIO_MTLX::Input>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::Input>,0>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDE4270;
  std::allocator<RIO_MTLX::Input>::construct[abi:ne180100]<RIO_MTLX::Input,std::shared_ptr<RIO_MTLX::Element>,std::string &>((uint64_t)&v5, (RIO_MTLX::Input *)(a1 + 3), a2, a3);
  return a1;
}

void sub_23000F26C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<RIO_MTLX::Input>::construct[abi:ne180100]<RIO_MTLX::Input,std::shared_ptr<RIO_MTLX::Element>,std::string &>(uint64_t a1, RIO_MTLX::Input *a2, __int128 *a3, uint64_t a4)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  RIO_MTLX::Input::Input(a2, (uint64_t *)&v7, a4);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_23000F2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_23000F33C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_23000F38C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::removeChildOfType<RIO_MTLX::Input>(_QWORD *a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)a1, a2, &v8);
  v5 = v8;
  v4 = v9;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    if (!v5)
      return;
  }
  RIO_MTLX::Element::removeChild(a1, a2);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::Input>(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_23000F5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<RIO_MTLX::Document,std::allocator<RIO_MTLX::Document>,std::shared_ptr<RIO_MTLX::Element>,std::string const&,void>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x130uLL);
  std::__shared_ptr_emplace<RIO_MTLX::Document>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string const&,std::allocator<RIO_MTLX::Document>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_23000F638(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<RIO_MTLX::Document>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string const&,std::allocator<RIO_MTLX::Document>,0>(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDE40C0;
  std::allocator<RIO_MTLX::Document>::construct[abi:ne180100]<RIO_MTLX::Document,std::shared_ptr<RIO_MTLX::Element>,std::string const&>((uint64_t)&v5, (RIO_MTLX::Document *)(a1 + 3), a2, a3);
  return a1;
}

void sub_23000F698(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<RIO_MTLX::Document>::construct[abi:ne180100]<RIO_MTLX::Document,std::shared_ptr<RIO_MTLX::Element>,std::string const&>(uint64_t a1, RIO_MTLX::Document *a2, uint64_t *a3, __int128 *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7[2];

  v4 = (std::__shared_weak_count *)a3[1];
  v7[0] = *a3;
  v7[1] = (uint64_t)v4;
  *a3 = 0;
  a3[1] = 0;
  RIO_MTLX::Document::Document(a2, v7, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_23000F728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<RIO_MTLX::Document::Cache>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__deallocate_node(*(_QWORD **)(v1 + 184));
    v2 = *(void **)(v1 + 168);
    *(_QWORD *)(v1 + 168) = 0;
    if (v2)
      operator delete(v2);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__deallocate_node(*(_QWORD **)(v1 + 144));
    v3 = *(void **)(v1 + 128);
    *(_QWORD *)(v1 + 128) = 0;
    if (v3)
      operator delete(v3);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__deallocate_node(*(_QWORD **)(v1 + 104));
    v4 = *(void **)(v1 + 88);
    *(_QWORD *)(v1 + 88) = 0;
    if (v4)
      operator delete(v4);
    std::mutex::~mutex((std::mutex *)(v1 + 16));
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__equal_range_multi<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v4 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  v5 = v4;
  if (v4)
  {
    v6 = (uint64_t)(a1 + 4);
    v7 = v4;
    do
      v7 = *(unsigned __int8 **)v7;
    while (v7 && (std::equal_to<std::string>::operator()[abi:ne180100](v6, v7 + 16, a2) & 1) != 0);
  }
  return v5;
}

_QWORD *std::vector<std::shared_ptr<RIO_MTLX::Element>>::__init_with_size[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>*,std::shared_ptr<RIO_MTLX::Element>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v4 = result;
    if (a4 >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(result + 2), a4);
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v7];
    while (a2 != a3)
    {
      *result = *a2;
      v8 = a2[1];
      result[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      result += 2;
    }
    v4[1] = result;
  }
  return result;
}

void sub_23000F8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::ValueElement::setValue<std::string>(RIO_MTLX::TypedElement *a1, std::string *a2, uint64_t a3)
{
  const std::string *v3;
  uint64_t *v5;
  uint64_t v6;
  __int128 *v7;
  std::string *v8;
  __int128 *v9;
  std::string __p;

  v3 = (const std::string *)a3;
  v5 = (uint64_t *)a1;
  v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a3 + 8);
  if (!v6)
  {
    a1 = (RIO_MTLX::TypedElement *)RIO_MTLX::TypedValue<std::string>::TYPE();
    v3 = (const std::string *)RIO_MTLX::TypedValue<std::string>::TYPE(void)::v;
  }
  v7 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(a1);
  RIO_MTLX::Element::setAttribute(v5, v7, v3);
  v8 = RIO_MTLX::toValueString<std::string>(a2, &__p);
  v9 = (__int128 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v8);
  RIO_MTLX::Element::setAttribute(v5, v9, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_23000F9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = operator new(0x40uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a3;
  v18 = **a3;
  v16[4] = *((_QWORD *)*a3 + 2);
  *((_OWORD *)v16 + 1) = v18;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = 0;
  v16[6] = 0;
  v16[7] = 0;
  v16[5] = 0;
  v29 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v24);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10)
          v26 %= v10;
      }
      else
      {
        v26 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_23000FC3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t realityio::meshAttributeRateForInterpolation(realityio *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t *v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *Data;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;

  v3 = (unint64_t *)MEMORY[0x24BEE7FE8];
  Data = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 17) & 0xFFFFFFFFFFFFFFF8))
  {
    return 0;
  }
  else
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v3);
    if (!v5)
      v5 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v5 + 145) & 0xFFFFFFFFFFFFFFF8))
    {
      return 2;
    }
    else
    {
      v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v3);
      if (!v6)
        v6 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
      if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 151) & 0xFFFFFFFFFFFFFFF8))
        return 1;
      v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v3);
      if (!v7)
        v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
      if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 153) & 0xFFFFFFFFFFFFFFF8))
      {
        return 1;
      }
      else
      {
        v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v3);
        if (!v8)
          v8 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
        if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 40) & 0xFFFFFFFFFFFFFFF8))
          return 3;
        else
          return -1;
      }
    }
  }
}

uint64_t realityio::isTexCoord2(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  unint64_t *v2;
  _QWORD v10[2];

  v10[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  v10[1] = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v10);
  v2 = (unint64_t *)MEMORY[0x24BEE82A0];
  if (!atomic_load(MEMORY[0x24BEE82A0]))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v2))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v2))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v2))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v2))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v2))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
}

uint64_t realityio::isTexCoord3(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  unint64_t *v2;
  _QWORD v10[2];

  v10[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  v10[1] = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v10);
  v2 = (unint64_t *)MEMORY[0x24BEE82A0];
  if (!atomic_load(MEMORY[0x24BEE82A0]))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v2))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v2))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v2))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v2))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v2))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
}

uint64_t realityio::isScalar2(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  unint64_t *v2;
  _QWORD v7[2];

  v7[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  v7[1] = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v7);
  v2 = (unint64_t *)MEMORY[0x24BEE82A0];
  if (!atomic_load(MEMORY[0x24BEE82A0]))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v2))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v2))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
}

uint64_t realityio::addUsdAttributeToGeomModelDescriptor(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *this, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  unint64_t *v8;
  int IsPrimvar;
  const pxrInternal__aapl__pxrReserved__::TfToken *v16;
  std::vector<unsigned int>::size_type v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  std::vector<unsigned int>::size_type v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _OWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int Indices;
  char v39;
  unsigned int *v40;
  std::vector<unsigned int>::size_type v41;
  std::vector<unsigned int>::pointer begin;
  unsigned int v43;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v45;
  char IsArray;
  char v47;
  int IsScalar;
  int v49;
  pxrInternal__aapl__pxrReserved__::TfToken *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *New;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::vector<unsigned int>::size_type v73;
  char *v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  uint64_t TypeName;
  std::vector<unsigned int>::size_type __sz[5];
  _QWORD *v106;
  uint64_t v107;
  void *v108;
  void *v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  _QWORD *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::vector<unsigned int> v119;
  const char *v120;
  char v121;
  uint64_t v122;
  int v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
  v8 = (unint64_t *)MEMORY[0x24BEE82A0];
  if (!atomic_load(MEMORY[0x24BEE82A0]))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    goto LABEL_19;
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    goto LABEL_19;
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    goto LABEL_19;
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    goto LABEL_19;
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    goto LABEL_19;
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_19:
    IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
    if (IsPrimvar)
    {
      MEMORY[0x2348B1E64](&v114, this);
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v114);
    }
    else
    {
      v114 = 3;
      v115 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v117 = 0;
      v118 = 0;
      v17 = *a4;
      __sz[0] = v17;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 2, v18));
        if ((v19 & 1) == 0)
          __sz[0] &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    v20 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v16);
    if ((__sz[0] & 7) != 0)
    {
      v21 = (unsigned int *)(__sz[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    v113 = 0;
    v111 = 0u;
    v112 = 0u;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v107 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v107))
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v107))
        goto LABEL_91;
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(this, (uint64_t)__sz);
      if (!LOBYTE(__sz[0]))
      {
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_91;
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v111);
      v111 = *(_OWORD *)&__sz[1];
      v112 = *(_OWORD *)&__sz[3];
      memset(&__sz[1], 0, 32);
      v113 = v106;
      v106 = 0;
      if ((_DWORD)v20)
        v20 = v20;
      else
        v20 = 4 * ((unint64_t)v111 > 1);
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)__sz);
LABEL_57:
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&v108, v111);
      v35 = v108;
      if ((_QWORD)v111)
      {
        v36 = v113;
        v37 = 12 * v111;
        do
        {
          *(_QWORD *)&v34 = *v36;
          DWORD2(v34) = *((_DWORD *)v36 + 2);
          *v35++ = v34;
          v36 = (_QWORD *)((char *)v36 + 12);
          v37 -= 12;
        }
        while (v37);
        v35 = v108;
      }
      if (IsPrimvar)
      {
        memset(__sz, 0, sizeof(__sz));
        Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
        v39 = Indices;
        if (Indices)
        {
          memset(&v119, 0, sizeof(v119));
          std::vector<int>::resize(&v119, __sz[0]);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
          v40 = (unsigned int *)__sz[4];
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
          v41 = __sz[4] + 4 * __sz[0];
          if (v40 != (unsigned int *)v41)
          {
            begin = v119.__begin_;
            do
            {
              v43 = *v40++;
              *begin++ = v43;
            }
            while (v40 != (unsigned int *)v41);
          }
          if (!a3)
          {
            Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
            if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
              pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          v45 = REGeomModelDescriptorAddIndexedAttributeVector3F();
          if (v119.__begin_)
          {
            v119.__end_ = v119.__begin_;
            operator delete(v119.__begin_);
          }
        }
        else
        {
          v45 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
        if ((v39 & 1) != 0)
          goto LABEL_92;
      }
      IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v107);
      if ((_DWORD)v20 == 4)
        v47 = 1;
      else
        v47 = IsArray;
      if ((v47 & 1) != 0
        || ((IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v107),
             !(_DWORD)v20)
          ? (v49 = IsScalar)
          : (v49 = 0),
            v49 == 1))
      {
        if (!a3)
        {
          v50 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          a3 = (*(_QWORD *)v50 & 0xFFFFFFFFFFFFFFF8) != 0
             ? (*(_QWORD *)v50 & 0xFFFFFFFFFFFFFFF8) + 16
             : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v50);
          if (*(char *)(a3 + 23) < 0)
            a3 = *(_QWORD *)a3;
        }
        if ((MEMORY[0x2348B0B08](a1, a3, v20, v111, v35) & 1) != 0)
        {
          v45 = 1;
LABEL_92:
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v111);
          if ((v118 & 7) != 0)
          {
            v51 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFFFF8);
            do
              v52 = __ldxr(v51);
            while (__stlxr(v52 - 2, v51));
          }
          if ((v117 & 7) != 0)
          {
            v53 = (unsigned int *)(v117 & 0xFFFFFFFFFFFFFFF8);
            do
              v54 = __ldxr(v53);
            while (__stlxr(v54 - 2, v53));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v116);
          if (v115)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v115);
          return v45;
        }
      }
LABEL_91:
      v45 = 0;
      goto LABEL_92;
    }
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(this, (uint64_t)__sz);
    if (LOBYTE(__sz[0]))
    {
      if (!DWORD2(v111))
      {
        v23 = v111;
        if (!*((_QWORD *)&v112 + 1))
        {
          v24 = v113;
          if (!v113)
          {
            v26 = 0;
LABEL_43:
            if ((_QWORD)v111 != v26)
            {
              v27 = __sz[1];
              v28 = (uint64_t)v24 + 12 * v111;
              *(_DWORD *)(v28 + 8) = __sz[2];
              *(_QWORD *)v28 = v27;
LABEL_53:
              *(_QWORD *)&v111 = v111 + 1;
LABEL_54:
              if (!LOBYTE(__sz[0]) && SHIBYTE(v106) < 0)
                operator delete((void *)__sz[3]);
              goto LABEL_57;
            }
            goto LABEL_130;
          }
          v25 = atomic_load(v113 - 2);
          if (v25 == 1)
          {
            v24 = v113;
            v26 = *(v113 - 1);
            goto LABEL_43;
          }
        }
LABEL_130:
        v65 = v113;
        v66 = 1;
        do
        {
          v67 = v66;
          v66 *= 2;
        }
        while (v67 < (uint64_t)v111 + 1);
        New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew((uint64_t)&v111, v67);
        v69 = New;
        if (v23)
        {
          v70 = 12 * v23;
          v71 = New;
          do
          {
            v72 = *v65;
            *((_DWORD *)v71 + 2) = *((_DWORD *)v65 + 2);
            *v71 = v72;
            v71 = (_QWORD *)((char *)v71 + 12);
            v65 = (uint64_t *)((char *)v65 + 12);
            v70 -= 12;
          }
          while (v70);
        }
        v73 = __sz[1];
        v74 = (char *)New + 12 * v23;
        *((_DWORD *)v74 + 2) = __sz[2];
        *(_QWORD *)v74 = v73;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v111);
LABEL_142:
        v113 = v69;
        goto LABEL_53;
      }
      v119.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v119.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v119.__end_cap_.__value_ = (unsigned int *)433;
      v120 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::emplace_back(Arg"
             "s &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3f, Args = <const pxrInternal__aapl__pxrReserved__::GfVec3f &>]";
      v121 = 0;
LABEL_144:
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
      goto LABEL_54;
    }
    v123 = 0;
    v122 = 0;
    if (DWORD2(v111))
    {
      v119.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v119.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v119.__end_cap_.__value_ = (unsigned int *)433;
      v120 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::emplace_back(Arg"
             "s &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3f, Args = <pxrInternal__aapl__pxrReserved__::GfVec3f>]";
      v121 = 0;
      goto LABEL_144;
    }
    v29 = v111;
    if (!*((_QWORD *)&v112 + 1))
    {
      v30 = v113;
      if (!v113)
      {
        v32 = 0;
LABEL_51:
        if ((_QWORD)v111 != v32)
        {
          v33 = (uint64_t)v30 + 12 * v111;
          *(_QWORD *)v33 = v122;
          *(_DWORD *)(v33 + 8) = v123;
          goto LABEL_53;
        }
        goto LABEL_136;
      }
      v31 = atomic_load(v113 - 2);
      if (v31 == 1)
      {
        v30 = v113;
        v32 = *(v113 - 1);
        goto LABEL_51;
      }
    }
LABEL_136:
    v75 = v113;
    v76 = 1;
    do
    {
      v77 = v76;
      v76 *= 2;
    }
    while (v77 < (uint64_t)v111 + 1);
    v78 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew((uint64_t)&v111, v77);
    v69 = v78;
    if (v29)
    {
      v79 = 12 * v29;
      v80 = v78;
      do
      {
        v81 = *v75;
        *((_DWORD *)v80 + 2) = *((_DWORD *)v75 + 2);
        *v80 = v81;
        v80 = (_QWORD *)((char *)v80 + 12);
        v75 = (uint64_t *)((char *)v75 + 12);
        v79 -= 12;
      }
      while (v79);
    }
    v82 = (char *)v78 + 12 * v29;
    *(_QWORD *)v82 = v122;
    *((_DWORD *)v82 + 2) = v123;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v111);
    goto LABEL_142;
  }
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2fEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2fEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2dEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2dEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2hEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2hEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4fEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4fEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4dEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4dEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4hEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4hEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    return realityio::convertAndAddAttributeToModelDescriptor<int,int>(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    return realityio::convertAndAddAttributeToModelDescriptor<unsigned int,unsigned int>(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    return realityio::convertAndAddAttributeToModelDescriptor<unsigned char,unsigned char>(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    return realityio::convertAndAddAttributeToModelDescriptor<float,float>(a1, this, a3, a4);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    return 0;
  return realityio::convertAndAddAttributeToModelDescriptor<double,double>(a1, this, a3, a4);
}

void sub_230010E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (!(_BYTE)a13 && a21 < 0)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a26);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a32);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2fEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int IsPrimvar;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  std::vector<unsigned int>::size_type v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int Indices;
  char v29;
  unsigned int *v30;
  std::vector<unsigned int>::size_type v31;
  std::vector<unsigned int>::pointer begin;
  unsigned int v33;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v35;
  char IsArray;
  char v37;
  int IsScalar;
  int v39;
  pxrInternal__aapl__pxrReserved__::TfToken *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *New;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  std::vector<unsigned int>::size_type __sz[5];
  _QWORD *v62;
  uint64_t TypeName;
  void *v64;
  void *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::vector<unsigned int> v75;
  const char *v76;
  char v77;

  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2348B1E64](&v70, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v70);
  }
  else
  {
    v70 = 3;
    v71 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v73 = 0;
    v74 = 0;
    v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v13 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0)
  {
    v14 = (unsigned int *)(__sz[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  v69 = 0;
  v67 = 0u;
  v68 = 0u;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(a2, (uint64_t)__sz);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v67);
        v67 = *(_OWORD *)&__sz[1];
        v68 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        v69 = v62;
        v62 = 0;
        if ((_DWORD)v13)
          v13 = v13;
        else
          v13 = 4 * ((unint64_t)v67 > 1);
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_39;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_73:
    v35 = 0;
    goto LABEL_74;
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec2f>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    if (DWORD2(v67))
    {
      v75.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v75.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v75.__end_cap_.__value_ = (unsigned int *)433;
      v76 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::emplace_back(Args"
            " &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2f, Args = <pxrInternal__aapl__pxrReserved__::GfVec2f>]";
      v77 = 0;
      goto LABEL_99;
    }
    v20 = v67;
    if (!*((_QWORD *)&v68 + 1))
    {
      v21 = v69;
      if (!v69)
      {
        v23 = 0;
LABEL_33:
        if ((_QWORD)v67 != v23)
        {
          v21[(_QWORD)v67] = 0;
          goto LABEL_35;
        }
        goto LABEL_91;
      }
      v22 = atomic_load(v69 - 2);
      if (v22 == 1)
      {
        v21 = v69;
        v23 = *(v69 - 1);
        goto LABEL_33;
      }
    }
LABEL_91:
    v54 = v69;
    v55 = 1;
    do
    {
      v56 = v55;
      v55 *= 2;
    }
    while (v56 < (uint64_t)v67 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew((uint64_t)&v67, v56);
    v50 = New;
    if (v20)
    {
      v58 = 8 * v20;
      v59 = New;
      do
      {
        v60 = *v54++;
        *v59++ = v60;
        v58 -= 8;
      }
      while (v58);
    }
    New[v20] = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v67);
    goto LABEL_97;
  }
  if (DWORD2(v67))
  {
    v75.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v75.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v75.__end_cap_.__value_ = (unsigned int *)433;
    v76 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::emplace_back(Args &"
          "&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2f, Args = <const pxrInternal__aapl__pxrReserved__::GfVec2f &>]";
    v77 = 0;
LABEL_99:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_36;
  }
  v16 = v67;
  if (*((_QWORD *)&v68 + 1))
    goto LABEL_85;
  v17 = v69;
  if (v69)
  {
    v18 = atomic_load(v69 - 2);
    if (v18 != 1)
      goto LABEL_85;
    v17 = v69;
    v19 = *(v69 - 1);
  }
  else
  {
    v19 = 0;
  }
  if ((_QWORD)v67 == v19)
  {
LABEL_85:
    v46 = v69;
    v47 = 1;
    do
    {
      v48 = v47;
      v47 *= 2;
    }
    while (v48 < (uint64_t)v67 + 1);
    v49 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew((uint64_t)&v67, v48);
    v50 = v49;
    if (v16)
    {
      v51 = 8 * v16;
      v52 = v49;
      do
      {
        v53 = *v46++;
        *v52++ = v53;
        v51 -= 8;
      }
      while (v51);
    }
    v49[v16] = __sz[1];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v67);
LABEL_97:
    v69 = v50;
    goto LABEL_35;
  }
  v17[(_QWORD)v67] = __sz[1];
LABEL_35:
  *(_QWORD *)&v67 = v67 + 1;
LABEL_36:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v62) < 0)
    operator delete((void *)__sz[3]);
LABEL_39:
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(&v64, v67);
  v24 = v64;
  if ((_QWORD)v67)
  {
    v25 = v69;
    v26 = 8 * v67;
    do
    {
      v27 = *v25++;
      *v24++ = v27;
      v26 -= 8;
    }
    while (v26);
    v24 = v64;
  }
  if (!IsPrimvar)
    goto LABEL_57;
  memset(__sz, 0, sizeof(__sz));
  Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  v29 = Indices;
  if (Indices)
  {
    memset(&v75, 0, sizeof(v75));
    std::vector<int>::resize(&v75, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v30 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v31 = __sz[4] + 4 * __sz[0];
    if (v30 != (unsigned int *)v31)
    {
      begin = v75.__begin_;
      do
      {
        v33 = *v30++;
        *begin++ = v33;
      }
      while (v30 != (unsigned int *)v31);
    }
    if (!a3)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    v35 = REGeomModelDescriptorAddIndexedAttributeVector2F();
    if (v75.__begin_)
    {
      v75.__end_ = v75.__begin_;
      operator delete(v75.__begin_);
    }
  }
  else
  {
    v35 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v29 & 1) == 0)
  {
LABEL_57:
    IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if ((_DWORD)v13 == 4)
      v37 = 1;
    else
      v37 = IsArray;
    if ((v37 & 1) != 0
      || ((IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !(_DWORD)v13)
        ? (v39 = IsScalar)
        : (v39 = 0),
          v39 == 1))
    {
      if (!a3)
      {
        v40 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v40);
        if (*(char *)(a3 + 23) < 0)
          a3 = *(_QWORD *)a3;
      }
      if ((MEMORY[0x2348B0AFC](a1, a3, v13, v67, v24) & 1) != 0)
      {
        v35 = 1;
        goto LABEL_74;
      }
    }
    goto LABEL_73;
  }
LABEL_74:
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v67);
  if ((v74 & 7) != 0)
  {
    v41 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
  if ((v73 & 7) != 0)
  {
    v43 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
  if (v71)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v71);
  return v35;
}

void sub_2300115C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (!(_BYTE)a11 && a19 < 0)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a29);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int IsPrimvar;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  std::vector<unsigned int>::size_type v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  float64x2_t *v17;
  unint64_t v18;
  float64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t *v23;
  unint64_t v24;
  float64_t v25;
  uint64_t v26;
  float64x2_t *v27;
  float64x2_t *v28;
  float64x2_t *v29;
  float64x2_t v30;
  float v31;
  int Indices;
  char v33;
  unsigned int *v34;
  std::vector<unsigned int>::size_type v35;
  std::vector<unsigned int>::pointer begin;
  unsigned int v37;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v39;
  char IsArray;
  char v41;
  int IsScalar;
  int v43;
  pxrInternal__aapl__pxrReserved__::TfToken *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  float64x2_t *v50;
  uint64_t v51;
  unint64_t v52;
  float64x2_t *v53;
  float64x2_t *v54;
  uint64_t v55;
  float64x2_t *v56;
  float64x2_t v57;
  __int128 v58;
  _QWORD *v59;
  float64x2_t *v60;
  uint64_t v61;
  unint64_t v62;
  float64x2_t *New;
  uint64_t v64;
  float64x2_t *v65;
  float64x2_t v66;
  _QWORD *v67;
  std::vector<unsigned int>::size_type __sz[5];
  float64x2_t *v69;
  uint64_t TypeName;
  void *v71;
  void *v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  float64x2_t *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::vector<unsigned int> v82;
  const char *v83;
  char v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2348B1E64](&v77, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v77);
  }
  else
  {
    v77 = 3;
    v78 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v80 = 0;
    v81 = 0;
    v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v13 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0)
  {
    v14 = (unsigned int *)(__sz[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  v76 = 0;
  v74 = 0u;
  v75 = 0u;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((uint64_t)__sz, a2);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v74);
        v74 = *(_OWORD *)&__sz[1];
        v75 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        v76 = v69;
        v69 = 0;
        if ((_DWORD)v13)
          v13 = v13;
        else
          v13 = 4 * ((unint64_t)v74 > 1);
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_39;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_73:
    v39 = 0;
    goto LABEL_74;
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3d>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    v85 = 0uLL;
    v86 = 0;
    if (DWORD2(v74))
    {
      v82.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v82.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v82.__end_cap_.__value_ = (unsigned int *)433;
      v83 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::emplace_back(Args"
            " &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3d, Args = <pxrInternal__aapl__pxrReserved__::GfVec3d>]";
      v84 = 0;
      goto LABEL_99;
    }
    v22 = v74;
    if (!*((_QWORD *)&v75 + 1))
    {
      v23 = v76;
      if (!v76)
      {
        v25 = 0.0;
LABEL_33:
        if ((_QWORD)v74 != *(_QWORD *)&v25)
        {
          v26 = (uint64_t)v23 + 24 * v74;
          *(_OWORD *)v26 = v85;
          *(_QWORD *)(v26 + 16) = v86;
          goto LABEL_35;
        }
        goto LABEL_91;
      }
      v24 = atomic_load((unint64_t *)&v76[-1]);
      if (v24 == 1)
      {
        v23 = v76;
        v25 = v76[-1].f64[1];
        goto LABEL_33;
      }
    }
LABEL_91:
    v60 = v76;
    v61 = 1;
    do
    {
      v62 = v61;
      v61 *= 2;
    }
    while (v62 < (uint64_t)v74 + 1);
    New = (float64x2_t *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)&v74, v62);
    v54 = New;
    if (v22)
    {
      v64 = 24 * v22;
      v65 = New;
      do
      {
        v66 = *v60;
        v65[1].f64[0] = v60[1].f64[0];
        *v65 = v66;
        v65 = (float64x2_t *)((char *)v65 + 24);
        v60 = (float64x2_t *)((char *)v60 + 24);
        v64 -= 24;
      }
      while (v64);
    }
    v67 = (_QWORD *)&New->f64[3 * v22];
    *(_OWORD *)v67 = v85;
    v67[2] = v86;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v74);
    goto LABEL_97;
  }
  if (DWORD2(v74))
  {
    v82.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v82.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v82.__end_cap_.__value_ = (unsigned int *)433;
    v83 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::emplace_back(Args &"
          "&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3d, Args = <const pxrInternal__aapl__pxrReserved__::GfVec3d &>]";
    v84 = 0;
LABEL_99:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_36;
  }
  v16 = v74;
  if (*((_QWORD *)&v75 + 1))
    goto LABEL_85;
  v17 = v76;
  if (v76)
  {
    v18 = atomic_load((unint64_t *)&v76[-1]);
    if (v18 != 1)
      goto LABEL_85;
    v17 = v76;
    v19 = v76[-1].f64[1];
  }
  else
  {
    v19 = 0.0;
  }
  if ((_QWORD)v74 == *(_QWORD *)&v19)
  {
LABEL_85:
    v50 = v76;
    v51 = 1;
    do
    {
      v52 = v51;
      v51 *= 2;
    }
    while (v52 < (uint64_t)v74 + 1);
    v53 = (float64x2_t *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)&v74, v52);
    v54 = v53;
    if (v16)
    {
      v55 = 24 * v16;
      v56 = v53;
      do
      {
        v57 = *v50;
        v56[1].f64[0] = v50[1].f64[0];
        *v56 = v57;
        v56 = (float64x2_t *)((char *)v56 + 24);
        v50 = (float64x2_t *)((char *)v50 + 24);
        v55 -= 24;
      }
      while (v55);
    }
    v58 = *(_OWORD *)&__sz[1];
    v59 = (_QWORD *)&v53->f64[3 * v16];
    v59[2] = __sz[3];
    *(_OWORD *)v59 = v58;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v74);
LABEL_97:
    v76 = v54;
    goto LABEL_35;
  }
  v20 = *(_OWORD *)&__sz[1];
  v21 = (uint64_t)v17 + 24 * v74;
  *(_QWORD *)(v21 + 16) = __sz[3];
  *(_OWORD *)v21 = v20;
LABEL_35:
  *(_QWORD *)&v74 = v74 + 1;
LABEL_36:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v69) < 0)
    operator delete((void *)__sz[3]);
LABEL_39:
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&v71, v74);
  v27 = (float64x2_t *)v71;
  if ((_QWORD)v74)
  {
    v28 = v76;
    v29 = (float64x2_t *)((char *)v76 + 24 * v74);
    do
    {
      v30 = *v28;
      *(float32x2_t *)&v30.f64[0] = vcvt_f32_f64(*v28);
      v31 = v28[1].f64[0];
      *(float *)&v30.f64[1] = v31;
      *v27++ = v30;
      v28 = (float64x2_t *)((char *)v28 + 24);
    }
    while (v28 != v29);
    v27 = (float64x2_t *)v71;
  }
  if (!IsPrimvar)
    goto LABEL_57;
  memset(__sz, 0, sizeof(__sz));
  Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  v33 = Indices;
  if (Indices)
  {
    memset(&v82, 0, sizeof(v82));
    std::vector<int>::resize(&v82, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v34 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v35 = __sz[4] + 4 * __sz[0];
    if (v34 != (unsigned int *)v35)
    {
      begin = v82.__begin_;
      do
      {
        v37 = *v34++;
        *begin++ = v37;
      }
      while (v34 != (unsigned int *)v35);
    }
    if (!a3)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    v39 = REGeomModelDescriptorAddIndexedAttributeVector3F();
    if (v82.__begin_)
    {
      v82.__end_ = v82.__begin_;
      operator delete(v82.__begin_);
    }
  }
  else
  {
    v39 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v33 & 1) == 0)
  {
LABEL_57:
    IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if ((_DWORD)v13 == 4)
      v41 = 1;
    else
      v41 = IsArray;
    if ((v41 & 1) != 0
      || ((IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !(_DWORD)v13)
        ? (v43 = IsScalar)
        : (v43 = 0),
          v43 == 1))
    {
      if (!a3)
      {
        v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
        if (*(char *)(a3 + 23) < 0)
          a3 = *(_QWORD *)a3;
      }
      if ((MEMORY[0x2348B0B08](a1, a3, v13, v74, v27) & 1) != 0)
      {
        v39 = 1;
        goto LABEL_74;
      }
    }
    goto LABEL_73;
  }
LABEL_74:
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v74);
  if ((v81 & 7) != 0)
  {
    v45 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  if ((v80 & 7) != 0)
  {
    v47 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
  if (v78)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v78);
  return v39;
}

void sub_230011DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (!(_BYTE)a11 && a19 < 0)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a29);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2dEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, uint64_t *a4)
{
  int *v4;
  char v5;
  int IsPrimvar;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::UsdStage *v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  pxrInternal__aapl__pxrReserved__::UsdStage *v20;
  pxrInternal__aapl__pxrReserved__::UsdStage *v21;
  pxrInternal__aapl__pxrReserved__::TfToken *v22;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v24;
  double v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  pxrInternal__aapl__pxrReserved__::TfToken *v30;
  pxrInternal__aapl__pxrReserved__::UsdStage *v31;
  double v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  pxrInternal__aapl__pxrReserved__::TfToken *v38;
  pxrInternal__aapl__pxrReserved__::TfToken *v39;
  char v40;
  pxrInternal__aapl__pxrReserved__::VtValue *v41;
  const std::type_info *v42;
  std::type_info *v43;
  pxrInternal__aapl__pxrReserved__::VtValue *v44;
  unint64_t *v45;
  pxrInternal__aapl__pxrReserved__::TfToken *v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  void *v53;
  char v54;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v56;
  const pxrInternal__aapl__pxrReserved__::VtValue *v57;
  std::type_info *v58;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  std::string::size_type size;
  std::string *v76;
  __int128 v77;
  char v78;
  void *v79;
  char v80;
  pxrInternal__aapl__pxrReserved__::TfToken *v81;
  pxrInternal__aapl__pxrReserved__::VtValue *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  pxrInternal__aapl__pxrReserved__::TfToken *v88;
  char v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  float32x2_t *v94;
  float64x2_t *v95;
  uint64_t v96;
  float64x2_t v97;
  int Indices;
  char v99;
  int *v100;
  uint64_t v101;
  _DWORD *v102;
  int v103;
  pxrInternal__aapl__pxrReserved__::TfToken *v104;
  uint64_t v105;
  char IsArray;
  char v107;
  int IsScalar;
  int v109;
  pxrInternal__aapl__pxrReserved__::TfToken *v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t *New;
  unint64_t *v120;
  uint64_t v121;
  unint64_t *v122;
  __int128 v123;
  unint64_t *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t *v128;
  uint64_t v129;
  unint64_t *v130;
  __int128 v131;
  unint64_t *v132;
  _BYTE __sz[48];
  uint64_t TypeName;
  void *v135;
  void *v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  unint64_t *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  uint64_t v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::type_info v152;
  std::string v153;
  __int128 v154;
  _BYTE v155[24];
  uint64_t v156;

  v156 = *MEMORY[0x24BDAC8D0];
  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2348B1E64](&v141, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v141);
  }
  else
  {
    v141 = 3;
    v142 = 0;
    v4 = &v141;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v144 = 0;
    v145 = 0;
    v12 = *a4;
    *(_QWORD *)__sz = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        *(_QWORD *)__sz &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v15 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v11);
  if ((__sz[0] & 7) != 0)
  {
    v16 = (unsigned int *)(*(_QWORD *)__sz & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  v140 = 0;
  v138 = 0u;
  v139 = 0u;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
      goto LABEL_193;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v154, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v153);
      *(_OWORD *)&__sz[8] = v154;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v155;
      *(_QWORD *)&__sz[39] = *(_QWORD *)&v155[15];
      v40 = v155[23];
      memset(v155, 0, sizeof(v155));
      __sz[0] = 0;
      __sz[47] = v40;
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      goto LABEL_154;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2);
    v20 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v147);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v20))
    {
      v31 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v147);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v31);
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v147);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v21);
    v146 = v32;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      v39 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v39 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v39);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v154, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v153);
      *(_OWORD *)&__sz[8] = v154;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v155;
      *(_QWORD *)&__sz[39] = *(_QWORD *)&v155[15];
      v54 = v155[23];
      memset(v155, 0, sizeof(v155));
      __sz[0] = 0;
      __sz[47] = v54;
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      goto LABEL_149;
    }
    v152.__type_name = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v152))
      {
        v33 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v152);
        v34 = *(_OWORD *)(v33 + 16);
        v154 = *(_OWORD *)v33;
        *(_OWORD *)v155 = v34;
        v35 = *(_QWORD *)(v33 + 32);
        if (v35)
        {
          v36 = *(unint64_t **)&v155[8];
          if (!*(_QWORD *)&v155[8])
            v36 = (unint64_t *)(v35 - 16);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        __sz[0] = 1;
        *(_OWORD *)&__sz[8] = v154;
        *(_OWORD *)&__sz[24] = *(_OWORD *)v155;
        v154 = 0u;
        memset(v155, 0, sizeof(v155));
        *(_QWORD *)&__sz[40] = v35;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v154);
        goto LABEL_148;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v152);
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v152) & 1) != 0)
        {
          v58 = &v152;
        }
        else
        {
          v58 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v152, &v154);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v154);
        }
        v82 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v151, (const pxrInternal__aapl__pxrReserved__::VtValue *)v58);
        if (v151.__r_.__value_.__l.__size_)
        {
          v83 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(v82);
          v84 = *(_OWORD *)(v83 + 16);
          v154 = *(_OWORD *)v83;
          *(_OWORD *)v155 = v84;
          v85 = *(_QWORD *)(v83 + 32);
          if (v85)
          {
            v86 = *(unint64_t **)&v155[8];
            if (!*(_QWORD *)&v155[8])
              v86 = (unint64_t *)(v85 - 16);
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          __sz[0] = 1;
          *(_OWORD *)&__sz[8] = v154;
          *(_OWORD *)&__sz[24] = *(_OWORD *)v155;
          v154 = 0u;
          memset(v155, 0, sizeof(v155));
          *(_QWORD *)&__sz[40] = v85;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v154);
        }
        else
        {
          v88 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(_QWORD *)v88 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v88);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v154, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v153);
          *(_OWORD *)&__sz[8] = v154;
          *(_OWORD *)&__sz[24] = *(_OWORD *)v155;
          *(_QWORD *)&__sz[39] = *(_QWORD *)&v155[15];
          v89 = v155[23];
          memset(v155, 0, sizeof(v155));
          __sz[0] = 0;
          __sz[47] = v89;
          if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v153.__r_.__value_.__l.__data_);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v151);
        goto LABEL_148;
      }
      std::string::basic_string[abi:ne180100]<0>(&v153, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v154, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v153);
      *(_OWORD *)&__sz[8] = v154;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v155;
      *(_QWORD *)&__sz[39] = *(_QWORD *)&v155[15];
      v80 = v155[23];
      memset(v155, 0, sizeof(v155));
      __sz[0] = 0;
      __sz[47] = v80;
      if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_148:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v152);
LABEL_149:
        v90 = v148;
        if (v148)
        {
          v91 = (unsigned int *)(v148 + 8);
          do
          {
            v92 = __ldxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (!v93)
            (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
        }
LABEL_154:
        if (__sz[0])
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v138);
          v138 = *(_OWORD *)&__sz[8];
          v139 = *(_OWORD *)&__sz[24];
          memset(&__sz[8], 0, 40);
          v140 = *(unint64_t **)&__sz[40];
          if ((_DWORD)v15)
            v15 = v15;
          else
            v15 = 4 * ((unint64_t)v138 > 1);
          realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,realityio::DetailedError>::~Result((uint64_t)__sz);
          goto LABEL_159;
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,realityio::DetailedError>::~Result((uint64_t)__sz);
LABEL_193:
        v105 = 0;
        goto LABEL_194;
      }
      v79 = (void *)v153.__r_.__value_.__r.__words[0];
    }
    else
    {
      v46 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v46);
      std::operator+<char>();
      v72 = std::string::append(&v149, ") at the given time: ");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v151.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v150, v146);
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v150;
      else
        v74 = (std::string *)v150.__r_.__value_.__r.__words[0];
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      else
        size = v150.__r_.__value_.__l.__size_;
      v76 = std::string::append(&v151, (const std::string::value_type *)v74, size);
      v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v153.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v154, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v153);
      *(_OWORD *)&__sz[8] = v154;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v155;
      *(_QWORD *)&__sz[39] = *(_QWORD *)&v155[15];
      v78 = v155[23];
      memset(v155, 0, sizeof(v155));
      __sz[0] = 0;
      __sz[47] = v78;
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v150.__r_.__value_.__l.__data_);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_148;
      v79 = (void *)v149.__r_.__value_.__r.__words[0];
    }
    operator delete(v79);
    goto LABEL_148;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
  {
    v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
    if ((*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v154);
    v4 = *(int **)&__sz[16];
    v5 = __sz[39];
    memset(&__sz[16], 0, 24);
    if ((v155[7] & 0x80000000) != 0)
      operator delete((void *)v154);
LABEL_95:
    v154 = 0uLL;
    if (DWORD2(v138))
    {
      *(_QWORD *)__sz = "vt/array.h";
      *(_QWORD *)&__sz[8] = "emplace_back";
      *(_QWORD *)&__sz[16] = 433;
      *(_QWORD *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::"
                             "emplace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2d, Args = <pxrInterna"
                             "l__aapl__pxrReserved__::GfVec2d>]";
      __sz[32] = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_104:
      if (v5 < 0)
        operator delete(v4);
      goto LABEL_159;
    }
    v67 = v138;
    if (*((_QWORD *)&v139 + 1))
      goto LABEL_205;
    v68 = v140;
    if (v140)
    {
      v69 = atomic_load(v140 - 2);
      if (v69 != 1)
        goto LABEL_205;
      v68 = v140;
      v70 = *(v140 - 1);
    }
    else
    {
      v70 = 0;
    }
    if ((_QWORD)v138 != v70)
    {
      *(_OWORD *)&v68[2 * v138] = v154;
LABEL_103:
      *(_QWORD *)&v138 = v138 + 1;
      goto LABEL_104;
    }
LABEL_205:
    v116 = v140;
    v117 = 1;
    do
    {
      v118 = v117;
      v117 *= 2;
    }
    while (v118 < (uint64_t)v138 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew((uint64_t)&v138, v118);
    v120 = New;
    if (v67)
    {
      v121 = 16 * v67;
      v122 = New;
      do
      {
        v123 = *(_OWORD *)v116;
        v116 += 2;
        *(_OWORD *)v122 = v123;
        v122 += 2;
        v121 -= 16;
      }
      while (v121);
    }
    *(_OWORD *)&New[2 * v67] = v154;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v138);
    v140 = v120;
    goto LABEL_103;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2);
  v18 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v152);
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v18))
  {
    v24 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v152);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v24);
  }
  v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v152);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v19);
  v147 = v25;
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) != 0)
  {
    v150.__r_.__value_.__l.__size_ = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v150))
      {
        v26 = (unint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v150);
        v27 = *v26;
        v28 = v26[1];
        v29 = 1;
LABEL_83:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v150);
        goto LABEL_84;
      }
      v41 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v150);
      {
        v43 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v150);
        v44 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v153, (const pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        if (v153.__r_.__value_.__l.__size_)
        {
          v45 = (unint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2d>(v44);
          v27 = *v45;
          v28 = v45[1];
          v29 = 1;
        }
        else
        {
          v81 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(_QWORD *)v81 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v81);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v154);
          v27 = *(_QWORD *)__sz;
          v28 = *(_QWORD *)&__sz[8];
          v4 = *(int **)&__sz[16];
          v5 = __sz[39];
          memset(&__sz[16], 0, 24);
          if ((v155[7] & 0x80000000) != 0)
            operator delete((void *)v154);
          v29 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v153);
        goto LABEL_83;
      }
      std::string::basic_string[abi:ne180100]<0>(&v154, "Value is not of the given type");
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v154);
      v27 = *(_QWORD *)__sz;
      v28 = *(_QWORD *)&__sz[8];
      v4 = *(int **)&__sz[16];
      v5 = __sz[39];
      memset(&__sz[16], 0, 24);
      if ((v155[7] & 0x80000000) == 0)
      {
LABEL_82:
        v29 = 0;
        goto LABEL_83;
      }
      v53 = (void *)v154;
    }
    else
    {
      v38 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v38);
      std::operator+<char>();
      v47 = std::string::append(&v151, ") at the given time: ");
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v153.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v149, v147);
      if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v149;
      else
        v49 = (std::string *)v149.__r_.__value_.__r.__words[0];
      if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
      else
        v50 = v149.__r_.__value_.__l.__size_;
      v51 = std::string::append(&v153, (const std::string::value_type *)v49, v50);
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      *(_QWORD *)v155 = *((_QWORD *)&v51->__r_.__value_.__l + 2);
      v154 = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v154);
      v27 = *(_QWORD *)__sz;
      v28 = *(_QWORD *)&__sz[8];
      v4 = *(int **)&__sz[16];
      v5 = __sz[39];
      memset(&__sz[16], 0, 24);
      if ((v155[7] & 0x80000000) != 0)
        operator delete((void *)v154);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v151.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_82;
      v53 = (void *)v151.__r_.__value_.__r.__words[0];
    }
    operator delete(v53);
    goto LABEL_82;
  }
  v30 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
  if ((*(_QWORD *)v30 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v30);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v154);
  v27 = *(_QWORD *)__sz;
  v28 = *(_QWORD *)&__sz[8];
  v4 = *(int **)&__sz[16];
  v5 = __sz[39];
  memset(&__sz[16], 0, 24);
  if ((v155[7] & 0x80000000) != 0)
    operator delete((void *)v154);
  v29 = 0;
LABEL_84:
  type_name = v152.__type_name;
  if (v152.__type_name)
  {
    v60 = (unsigned int *)(v152.__type_name + 8);
    do
    {
      v61 = __ldxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
      (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t))(*(_QWORD *)type_name + 8))(type_name);
  }
  if (!v29)
    goto LABEL_95;
  if (!DWORD2(v138))
  {
    v63 = v138;
    if (*((_QWORD *)&v139 + 1))
      goto LABEL_211;
    v64 = v140;
    if (v140)
    {
      v65 = atomic_load(v140 - 2);
      if (v65 != 1)
        goto LABEL_211;
      v64 = v140;
      v66 = *(v140 - 1);
    }
    else
    {
      v66 = 0;
    }
    if ((_QWORD)v138 != v66)
    {
      v71 = &v64[2 * v138];
      *v71 = v27;
      v71[1] = v28;
LABEL_109:
      *(_QWORD *)&v138 = v138 + 1;
      goto LABEL_159;
    }
LABEL_211:
    v124 = v140;
    v125 = 1;
    do
    {
      v126 = v125;
      v125 *= 2;
    }
    while (v126 < (uint64_t)v138 + 1);
    v127 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew((uint64_t)&v138, v126);
    v128 = v127;
    if (v63)
    {
      v129 = 16 * v63;
      v130 = v127;
      do
      {
        v131 = *(_OWORD *)v124;
        v124 += 2;
        *(_OWORD *)v130 = v131;
        v130 += 2;
        v129 -= 16;
      }
      while (v129);
    }
    v132 = &v127[2 * v63];
    *v132 = v27;
    v132[1] = v28;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v138);
    v140 = v128;
    goto LABEL_109;
  }
  *(_QWORD *)__sz = "vt/array.h";
  *(_QWORD *)&__sz[8] = "emplace_back";
  *(_QWORD *)&__sz[16] = 433;
  *(_QWORD *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::empl"
                         "ace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2d, Args = <const pxrInternal_"
                         "_aapl__pxrReserved__::GfVec2d &>]";
  __sz[32] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_159:
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(&v135, v138);
  v94 = (float32x2_t *)v135;
  if ((_QWORD)v138)
  {
    v95 = (float64x2_t *)v140;
    v96 = 16 * v138;
    do
    {
      v97 = *v95++;
      *v94++ = vcvt_f32_f64(v97);
      v96 -= 16;
    }
    while (v96);
    v94 = (float32x2_t *)v135;
  }
  if (!IsPrimvar)
    goto LABEL_177;
  memset(__sz, 0, 40);
  Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  v99 = Indices;
  if (Indices)
  {
    v154 = 0uLL;
    *(_QWORD *)v155 = 0;
    std::vector<int>::resize((std::vector<unsigned int> *)&v154, *(std::vector<unsigned int>::size_type *)__sz);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v100 = *(int **)&__sz[32];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v101 = *(_QWORD *)&__sz[32] + 4 * *(_QWORD *)__sz;
    if (v100 != (int *)v101)
    {
      v102 = (_DWORD *)v154;
      do
      {
        v103 = *v100++;
        *v102++ = v103;
      }
      while (v100 != (int *)v101);
    }
    if (!a3)
    {
      v104 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v104 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v104);
    }
    v105 = REGeomModelDescriptorAddIndexedAttributeVector2F();
    if ((_QWORD)v154)
    {
      *((_QWORD *)&v154 + 1) = v154;
      operator delete((void *)v154);
    }
  }
  else
  {
    v105 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v99 & 1) == 0)
  {
LABEL_177:
    IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if ((_DWORD)v15 == 4)
      v107 = 1;
    else
      v107 = IsArray;
    if ((v107 & 1) != 0
      || ((IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !(_DWORD)v15)
        ? (v109 = IsScalar)
        : (v109 = 0),
          v109 == 1))
    {
      if (!a3)
      {
        v110 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(_QWORD *)v110 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(_QWORD *)v110 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v110);
        if (*(char *)(a3 + 23) < 0)
          a3 = *(_QWORD *)a3;
      }
      if ((MEMORY[0x2348B0AFC](a1, a3, v15, v138, v94) & 1) != 0)
      {
        v105 = 1;
        goto LABEL_194;
      }
    }
    goto LABEL_193;
  }
LABEL_194:
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v138);
  if ((v145 & 7) != 0)
  {
    v111 = (unsigned int *)(v145 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  if ((v144 & 7) != 0)
  {
    v113 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
    do
      v114 = __ldxr(v113);
    while (__stlxr(v114 - 2, v113));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v143);
  if (v142)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v142);
  return v105;
}

void sub_230012EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;

  v47 = a34;
  if (a34)
  {
    v48 = (unsigned int *)(a34 + 8);
    do
    {
      v49 = __ldxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a26);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int *v4;
  char v5;
  int IsPrimvar;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  std::vector<unsigned int>::size_type v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::UsdStage *v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v21;
  double v22;
  unsigned int *v23;
  unint64_t v24;
  int v25;
  pxrInternal__aapl__pxrReserved__::TfToken *v26;
  pxrInternal__aapl__pxrReserved__::TfToken *v27;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v29;
  std::type_info *v30;
  pxrInternal__aapl__pxrReserved__::VtValue *v31;
  unsigned int *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  std::vector<unsigned int>::pointer begin;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  _OWORD *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  uint64_t v60;
  int Indices;
  char v62;
  unsigned int *v63;
  std::vector<unsigned int>::size_type v64;
  std::vector<unsigned int>::pointer v65;
  unsigned int v66;
  pxrInternal__aapl__pxrReserved__::TfToken *v67;
  uint64_t v68;
  char IsArray;
  char v70;
  int IsScalar;
  int v72;
  pxrInternal__aapl__pxrReserved__::TfToken *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  pxrInternal__aapl__pxrReserved__::TfToken *v79;
  unint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t *New;
  unint64_t *v84;
  uint64_t v85;
  unint64_t *v86;
  int v87;
  char *v88;
  unint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t *v93;
  uint64_t v94;
  unint64_t *v95;
  int v96;
  char *v97;
  std::vector<unsigned int>::size_type __sz[5];
  unint64_t *v99;
  uint64_t TypeName;
  void *v101;
  void *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  unint64_t *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  std::string v115;
  std::string v116;
  std::vector<unsigned int> v117;
  std::string v118;
  char v119[8];
  uint64_t v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2348B1E64](&v107, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v107);
  }
  else
  {
    v107 = 3;
    v108 = 0;
    v4 = &v107;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v110 = 0;
    v111 = 0;
    v12 = *a4;
    __sz[0] = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v15 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v11);
  if ((__sz[0] & 7) != 0)
  {
    v16 = (unsigned int *)(__sz[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  v106 = 0;
  v104 = 0u;
  v105 = 0u;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((uint64_t)__sz, a2);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v104);
        v104 = *(_OWORD *)&__sz[1];
        v105 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        v106 = v99;
        v99 = 0;
        if ((_DWORD)v15)
          v15 = v15;
        else
          v15 = 4 * ((unint64_t)v104 > 1);
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_89;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_122:
    v68 = 0;
    goto LABEL_123;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v117);
    v4 = (int *)__sz[2];
    v5 = HIBYTE(__sz[4]);
    memset(&__sz[2], 0, 24);
    if (SHIBYTE(v117.__end_cap_.__value_) < 0)
      operator delete(v117.__begin_);
LABEL_74:
    WORD2(v117.__begin_) = 0;
    LODWORD(v117.__begin_) = 0;
    if (DWORD2(v104))
    {
      __sz[0] = (std::vector<unsigned int>::size_type)"vt/array.h";
      __sz[1] = (std::vector<unsigned int>::size_type)"emplace_back";
      __sz[2] = 433;
      __sz[3] = (std::vector<unsigned int>::size_type)"void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__"
                                                      "pxrReserved__::GfVec3h>::emplace_back(Args &&...) [T = pxrInternal"
                                                      "__aapl__pxrReserved__::GfVec3h, Args = <pxrInternal__aapl__pxrRese"
                                                      "rved__::GfVec3h>]";
      LOBYTE(__sz[4]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_83:
      if (v5 < 0)
        operator delete(v4);
      goto LABEL_89;
    }
    v50 = v104;
    if (*((_QWORD *)&v105 + 1))
      goto LABEL_140;
    v51 = v106;
    if (v106)
    {
      v52 = atomic_load(v106 - 2);
      if (v52 != 1)
        goto LABEL_140;
      v51 = v106;
      v53 = *(v106 - 1);
    }
    else
    {
      v53 = 0;
    }
    if ((_QWORD)v104 != v53)
    {
      v54 = (uint64_t)v51 + 6 * v104;
      *(_DWORD *)v54 = v117.__begin_;
      *(_WORD *)(v54 + 4) = WORD2(v117.__begin_);
LABEL_82:
      *(_QWORD *)&v104 = v104 + 1;
      goto LABEL_83;
    }
LABEL_140:
    v80 = v106;
    v81 = 1;
    do
    {
      v82 = v81;
      v81 *= 2;
    }
    while (v82 < (uint64_t)v104 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew((uint64_t)&v104, v82);
    v84 = New;
    if (v50)
    {
      v85 = 6 * v50;
      v86 = New;
      do
      {
        v87 = *(_DWORD *)v80;
        *((_WORD *)v86 + 2) = *((_WORD *)v80 + 2);
        *(_DWORD *)v86 = v87;
        v86 = (unint64_t *)((char *)v86 + 6);
        v80 = (unint64_t *)((char *)v80 + 6);
        v85 -= 6;
      }
      while (v85);
    }
    v88 = (char *)New + 6 * v50;
    *(_DWORD *)v88 = v117.__begin_;
    *((_WORD *)v88 + 2) = WORD2(v117.__begin_);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v104);
    v106 = v84;
    goto LABEL_82;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2);
  v18 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v113);
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v18))
  {
    v21 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v113);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v21);
  }
  v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v113);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v19);
  v112 = v22;
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) != 0)
  {
    v120 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)v119))
      {
        v23 = (unsigned int *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)v119);
        v24 = *v23 | ((unint64_t)*((unsigned __int16 *)v23 + 2) << 32);
        v25 = 1;
LABEL_62:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v119);
        goto LABEL_63;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v119);
      {
        v30 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)v119);
        v31 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v118, (const pxrInternal__aapl__pxrReserved__::VtValue *)v30);
        if (v118.__r_.__value_.__l.__size_)
        {
          v32 = (unsigned int *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3h>(v31);
          v24 = *v32 | ((unint64_t)*((unsigned __int16 *)v32 + 2) << 32);
          v25 = 1;
        }
        else
        {
          v79 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(_QWORD *)v79 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v79);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v117);
          v24 = LODWORD(__sz[0]) | ((unint64_t)WORD2(__sz[0]) << 32);
          v4 = (int *)__sz[2];
          v5 = HIBYTE(__sz[4]);
          memset(&__sz[2], 0, 24);
          if (SHIBYTE(v117.__end_cap_.__value_) < 0)
            operator delete(v117.__begin_);
          v25 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v118);
        goto LABEL_62;
      }
      std::string::basic_string[abi:ne180100]<0>(&v117, "Value is not of the given type");
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v117);
      v24 = LODWORD(__sz[0]) | ((unint64_t)WORD2(__sz[0]) << 32);
      v4 = (int *)__sz[2];
      v5 = HIBYTE(__sz[4]);
      memset(&__sz[2], 0, 24);
      if ((SHIBYTE(v117.__end_cap_.__value_) & 0x80000000) == 0)
      {
LABEL_61:
        v25 = 0;
        goto LABEL_62;
      }
      begin = v117.__begin_;
    }
    else
    {
      v27 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v27 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v27);
      std::operator+<char>();
      v33 = std::string::append(&v116, ") at the given time: ");
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v118.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v115, v112);
      if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v115;
      else
        v35 = (std::string *)v115.__r_.__value_.__r.__words[0];
      if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v115.__r_.__value_.__r.__words[2]);
      else
        size = v115.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v118, (const std::string::value_type *)v35, size);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v117.__end_cap_.__value_ = (unsigned int *)v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v117.__begin_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v117);
      v39 = WORD2(__sz[0]);
      v40 = LODWORD(__sz[0]);
      v4 = (int *)__sz[2];
      v5 = HIBYTE(__sz[4]);
      memset(&__sz[2], 0, 24);
      if (SHIBYTE(v117.__end_cap_.__value_) < 0)
        operator delete(v117.__begin_);
      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v115.__r_.__value_.__l.__data_);
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v118.__r_.__value_.__l.__data_);
      v24 = v40 | (v39 << 32);
      if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_61;
      begin = (std::vector<unsigned int>::pointer)v116.__r_.__value_.__r.__words[0];
    }
    operator delete(begin);
    goto LABEL_61;
  }
  v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
  if ((*(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v117);
  v24 = LODWORD(__sz[0]) | ((unint64_t)WORD2(__sz[0]) << 32);
  v4 = (int *)__sz[2];
  v5 = HIBYTE(__sz[4]);
  memset(&__sz[2], 0, 24);
  if (SHIBYTE(v117.__end_cap_.__value_) < 0)
    operator delete(v117.__begin_);
  v25 = 0;
LABEL_63:
  v42 = v114;
  if (v114)
  {
    v43 = (unsigned int *)(v114 + 8);
    do
    {
      v44 = __ldxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  if (!v25)
    goto LABEL_74;
  if (!DWORD2(v104))
  {
    v46 = v104;
    if (*((_QWORD *)&v105 + 1))
      goto LABEL_146;
    v47 = v106;
    if (v106)
    {
      v48 = atomic_load(v106 - 2);
      if (v48 != 1)
        goto LABEL_146;
      v47 = v106;
      v49 = *(v106 - 1);
    }
    else
    {
      v49 = 0;
    }
    if ((_QWORD)v104 != v49)
    {
      v55 = (uint64_t)v47 + 6 * v104;
      *(_WORD *)(v55 + 4) = WORD2(v24);
      *(_DWORD *)v55 = v24;
LABEL_88:
      *(_QWORD *)&v104 = v104 + 1;
      goto LABEL_89;
    }
LABEL_146:
    v89 = v106;
    v90 = 1;
    do
    {
      v91 = v90;
      v90 *= 2;
    }
    while (v91 < (uint64_t)v104 + 1);
    v92 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew((uint64_t)&v104, v91);
    v93 = v92;
    if (v46)
    {
      v94 = 6 * v46;
      v95 = v92;
      do
      {
        v96 = *(_DWORD *)v89;
        *((_WORD *)v95 + 2) = *((_WORD *)v89 + 2);
        *(_DWORD *)v95 = v96;
        v95 = (unint64_t *)((char *)v95 + 6);
        v89 = (unint64_t *)((char *)v89 + 6);
        v94 -= 6;
      }
      while (v94);
    }
    v97 = (char *)v92 + 6 * v46;
    *((_WORD *)v97 + 2) = WORD2(v24);
    *(_DWORD *)v97 = v24;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v104);
    v106 = v93;
    goto LABEL_88;
  }
  __sz[0] = (std::vector<unsigned int>::size_type)"vt/array.h";
  __sz[1] = (std::vector<unsigned int>::size_type)"emplace_back";
  __sz[2] = 433;
  __sz[3] = (std::vector<unsigned int>::size_type)"void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrR"
                                                  "eserved__::GfVec3h>::emplace_back(Args &&...) [T = pxrInternal__aapl__"
                                                  "pxrReserved__::GfVec3h, Args = <const pxrInternal__aapl__pxrReserved__::GfVec3h &>]";
  LOBYTE(__sz[4]) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_89:
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&v101, v104);
  v57 = v101;
  if ((_QWORD)v104)
  {
    v58 = (unsigned __int16 *)v106;
    v59 = (unsigned __int16 *)v106 + 3 * v104;
    v60 = MEMORY[0x24BEE8B20];
    do
    {
      LODWORD(v56) = *(_DWORD *)(v60 + 4 * *v58);
      DWORD1(v56) = *(_DWORD *)(v60 + 4 * v58[1]);
      DWORD2(v56) = *(_DWORD *)(v60 + 4 * v58[2]);
      *v57++ = v56;
      v58 += 3;
    }
    while (v58 != v59);
    v57 = v101;
  }
  if (!IsPrimvar)
    goto LABEL_106;
  memset(__sz, 0, sizeof(__sz));
  Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  v62 = Indices;
  if (Indices)
  {
    memset(&v117, 0, sizeof(v117));
    std::vector<int>::resize(&v117, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v63 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v64 = __sz[4] + 4 * __sz[0];
    if (v63 != (unsigned int *)v64)
    {
      v65 = v117.__begin_;
      do
      {
        v66 = *v63++;
        *v65++ = v66;
      }
      while (v63 != (unsigned int *)v64);
    }
    if (!a3)
    {
      v67 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v67 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v67);
    }
    v68 = REGeomModelDescriptorAddIndexedAttributeVector3F();
    if (v117.__begin_)
    {
      v117.__end_ = v117.__begin_;
      operator delete(v117.__begin_);
    }
  }
  else
  {
    v68 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v62 & 1) == 0)
  {
LABEL_106:
    IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if ((_DWORD)v15 == 4)
      v70 = 1;
    else
      v70 = IsArray;
    if ((v70 & 1) != 0
      || ((IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !(_DWORD)v15)
        ? (v72 = IsScalar)
        : (v72 = 0),
          v72 == 1))
    {
      if (!a3)
      {
        v73 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(_QWORD *)v73 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(_QWORD *)v73 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v73);
        if (*(char *)(a3 + 23) < 0)
          a3 = *(_QWORD *)a3;
      }
      if ((MEMORY[0x2348B0B08](a1, a3, v15, v104, v57) & 1) != 0)
      {
        v68 = 1;
        goto LABEL_123;
      }
    }
    goto LABEL_122;
  }
LABEL_123:
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v104);
  if ((v111 & 7) != 0)
  {
    v74 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
    do
      v75 = __ldxr(v74);
    while (__stlxr(v75 - 2, v74));
  }
  if ((v110 & 7) != 0)
  {
    v76 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v77 = __ldxr(v76);
    while (__stlxr(v77 - 2, v76));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v109);
  if (v108)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v108);
  return v68;
}

void sub_230013C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;

  v41 = a34;
  if (a34)
  {
    v42 = (unsigned int *)(a34 + 8);
    do
    {
      v43 = __ldxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a26);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2hEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, uint64_t *a4)
{
  int *v4;
  char v5;
  int IsPrimvar;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::UsdStage *v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  pxrInternal__aapl__pxrReserved__::UsdStage *v20;
  pxrInternal__aapl__pxrReserved__::UsdStage *v21;
  pxrInternal__aapl__pxrReserved__::TfToken *v22;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v24;
  double v25;
  int v26;
  int v27;
  pxrInternal__aapl__pxrReserved__::TfToken *v28;
  pxrInternal__aapl__pxrReserved__::UsdStage *v29;
  double v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t *end;
  unint64_t v35;
  pxrInternal__aapl__pxrReserved__::TfToken *v36;
  pxrInternal__aapl__pxrReserved__::TfToken *v37;
  char value_high;
  pxrInternal__aapl__pxrReserved__::VtValue *v39;
  const std::type_info *v40;
  std::type_info *v41;
  pxrInternal__aapl__pxrReserved__::VtValue *v42;
  pxrInternal__aapl__pxrReserved__::TfToken *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  void *v50;
  char v51;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v53;
  const pxrInternal__aapl__pxrReserved__::VtValue *v54;
  std::type_info *v55;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  std::string::size_type size;
  std::string *v72;
  __int128 v73;
  char v74;
  void *v75;
  char v76;
  pxrInternal__aapl__pxrReserved__::TfToken *v77;
  pxrInternal__aapl__pxrReserved__::VtValue *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  pxrInternal__aapl__pxrReserved__::TfToken *v84;
  char v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  _QWORD *v90;
  unsigned __int16 *v91;
  unsigned __int16 *v92;
  uint64_t v93;
  uint64_t v94;
  int Indices;
  char v96;
  int *v97;
  uint64_t v98;
  _DWORD *v99;
  int v100;
  pxrInternal__aapl__pxrReserved__::TfToken *v101;
  uint64_t v102;
  char IsArray;
  char v104;
  int IsScalar;
  int v106;
  pxrInternal__aapl__pxrReserved__::TfToken *v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t *New;
  unint64_t *v117;
  uint64_t v118;
  unint64_t *v119;
  int v120;
  unint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t *v125;
  uint64_t v126;
  unint64_t *v127;
  int v128;
  _BYTE __sz[48];
  uint64_t TypeName;
  void *v131;
  void *v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  unint64_t *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  double v143;
  uint64_t v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::type_info v148;
  std::string v149;
  __int128 v150;
  std::vector<unsigned int> v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2348B1E64](&v137, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v137);
  }
  else
  {
    v137 = 3;
    v138 = 0;
    v4 = &v137;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v140 = 0;
    v141 = 0;
    v12 = *a4;
    *(_QWORD *)__sz = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        *(_QWORD *)__sz &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v15 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v11);
  if ((__sz[0] & 7) != 0)
  {
    v16 = (unsigned int *)(*(_QWORD *)__sz & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  v136 = 0;
  v134 = 0u;
  v135 = 0u;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
      goto LABEL_193;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v150, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v149);
      *(_OWORD *)&__sz[8] = v150;
      *(_QWORD *)&__sz[24] = v151.__begin_;
      *(_QWORD *)&__sz[32] = v151.__end_;
      *(_QWORD *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v151.__end_ + 7);
      value_high = HIBYTE(v151.__end_cap_.__value_);
      memset(&v151, 0, sizeof(v151));
      __sz[0] = 0;
      __sz[47] = value_high;
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      goto LABEL_154;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2);
    v20 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v143);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v20))
    {
      v29 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v143);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v29);
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v143);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v21);
    v142 = v30;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      v37 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v37 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v150, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v149);
      *(_OWORD *)&__sz[8] = v150;
      *(_QWORD *)&__sz[24] = v151.__begin_;
      *(_QWORD *)&__sz[32] = v151.__end_;
      *(_QWORD *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v151.__end_ + 7);
      v51 = HIBYTE(v151.__end_cap_.__value_);
      memset(&v151, 0, sizeof(v151));
      __sz[0] = 0;
      __sz[47] = v51;
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      goto LABEL_149;
    }
    v148.__type_name = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v148))
      {
        v31 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v148);
        v32 = *(_OWORD *)(v31 + 16);
        v150 = *(_OWORD *)v31;
        *(_OWORD *)&v151.__begin_ = v32;
        v33 = *(_QWORD *)(v31 + 32);
        if (v33)
        {
          end = (unint64_t *)v151.__end_;
          if (!v151.__end_)
            end = (unint64_t *)(v33 - 16);
          do
            v35 = __ldxr(end);
          while (__stxr(v35 + 1, end));
        }
        __sz[0] = 1;
        *(_OWORD *)&__sz[8] = v150;
        *(_OWORD *)&__sz[24] = *(_OWORD *)&v151.__begin_;
        v150 = 0u;
        memset(&v151, 0, sizeof(v151));
        *(_QWORD *)&__sz[40] = v33;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v150);
        goto LABEL_148;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v148);
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v148) & 1) != 0)
        {
          v55 = &v148;
        }
        else
        {
          v55 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v148, &v150);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v150);
        }
        v78 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v147, (const pxrInternal__aapl__pxrReserved__::VtValue *)v55);
        if (v147.__r_.__value_.__l.__size_)
        {
          v79 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(v78);
          v80 = *(_OWORD *)(v79 + 16);
          v150 = *(_OWORD *)v79;
          *(_OWORD *)&v151.__begin_ = v80;
          v81 = *(_QWORD *)(v79 + 32);
          if (v81)
          {
            v82 = (unint64_t *)v151.__end_;
            if (!v151.__end_)
              v82 = (unint64_t *)(v81 - 16);
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
          }
          __sz[0] = 1;
          *(_OWORD *)&__sz[8] = v150;
          *(_OWORD *)&__sz[24] = *(_OWORD *)&v151.__begin_;
          v150 = 0u;
          memset(&v151, 0, sizeof(v151));
          *(_QWORD *)&__sz[40] = v81;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v150);
        }
        else
        {
          v84 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(_QWORD *)v84 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v84);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v150, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v149);
          *(_OWORD *)&__sz[8] = v150;
          *(_QWORD *)&__sz[24] = v151.__begin_;
          *(_QWORD *)&__sz[32] = v151.__end_;
          *(_QWORD *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v151.__end_ + 7);
          v85 = HIBYTE(v151.__end_cap_.__value_);
          memset(&v151, 0, sizeof(v151));
          __sz[0] = 0;
          __sz[47] = v85;
          if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v149.__r_.__value_.__l.__data_);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v147);
        goto LABEL_148;
      }
      std::string::basic_string[abi:ne180100]<0>(&v149, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v150, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v149);
      *(_OWORD *)&__sz[8] = v150;
      *(_QWORD *)&__sz[24] = v151.__begin_;
      *(_QWORD *)&__sz[32] = v151.__end_;
      *(_QWORD *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v151.__end_ + 7);
      v76 = HIBYTE(v151.__end_cap_.__value_);
      memset(&v151, 0, sizeof(v151));
      __sz[0] = 0;
      __sz[47] = v76;
      if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_148:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v148);
LABEL_149:
        v86 = v144;
        if (v144)
        {
          v87 = (unsigned int *)(v144 + 8);
          do
          {
            v88 = __ldxr(v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v87));
          if (!v89)
            (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
        }
LABEL_154:
        if (__sz[0])
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v134);
          v134 = *(_OWORD *)&__sz[8];
          v135 = *(_OWORD *)&__sz[24];
          memset(&__sz[8], 0, 40);
          v136 = *(unint64_t **)&__sz[40];
          if ((_DWORD)v15)
            v15 = v15;
          else
            v15 = 4 * ((unint64_t)v134 > 1);
          realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,realityio::DetailedError>::~Result((uint64_t)__sz);
          goto LABEL_159;
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,realityio::DetailedError>::~Result((uint64_t)__sz);
LABEL_193:
        v102 = 0;
        goto LABEL_194;
      }
      v75 = (void *)v149.__r_.__value_.__r.__words[0];
    }
    else
    {
      v43 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v43 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v43);
      std::operator+<char>();
      v68 = std::string::append(&v145, ") at the given time: ");
      v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      v147.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v146, v142);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v70 = &v146;
      else
        v70 = (std::string *)v146.__r_.__value_.__r.__words[0];
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      else
        size = v146.__r_.__value_.__l.__size_;
      v72 = std::string::append(&v147, (const std::string::value_type *)v70, size);
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v150, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v149);
      *(_OWORD *)&__sz[8] = v150;
      *(_QWORD *)&__sz[24] = v151.__begin_;
      *(_QWORD *)&__sz[32] = v151.__end_;
      *(_QWORD *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v151.__end_ + 7);
      v74 = HIBYTE(v151.__end_cap_.__value_);
      memset(&v151, 0, sizeof(v151));
      __sz[0] = 0;
      __sz[47] = v74;
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v147.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_148;
      v75 = (void *)v145.__r_.__value_.__r.__words[0];
    }
    operator delete(v75);
    goto LABEL_148;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
  {
    v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
    if ((*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v150);
    v4 = *(int **)&__sz[16];
    v5 = __sz[39];
    memset(&__sz[16], 0, 24);
    if (SHIBYTE(v151.__begin_) < 0)
      operator delete((void *)v150);
LABEL_95:
    if (DWORD2(v134))
    {
      *(_QWORD *)__sz = "vt/array.h";
      *(_QWORD *)&__sz[8] = "emplace_back";
      *(_QWORD *)&__sz[16] = 433;
      *(_QWORD *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::"
                             "emplace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2h, Args = <pxrInterna"
                             "l__aapl__pxrReserved__::GfVec2h>]";
      __sz[32] = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_104:
      if (v5 < 0)
        operator delete(v4);
      goto LABEL_159;
    }
    v64 = v134;
    if (*((_QWORD *)&v135 + 1))
      goto LABEL_205;
    v65 = v136;
    if (v136)
    {
      v66 = atomic_load(v136 - 2);
      if (v66 != 1)
        goto LABEL_205;
      v65 = v136;
      v67 = *(v136 - 1);
    }
    else
    {
      v67 = 0;
    }
    if ((_QWORD)v134 != v67)
    {
      *((_DWORD *)v65 + v134) = 0;
LABEL_103:
      *(_QWORD *)&v134 = v134 + 1;
      goto LABEL_104;
    }
LABEL_205:
    v113 = v136;
    v114 = 1;
    do
    {
      v115 = v114;
      v114 *= 2;
    }
    while (v115 < (uint64_t)v134 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew((uint64_t)&v134, v115);
    v117 = New;
    if (v64)
    {
      v118 = 4 * v64;
      v119 = New;
      do
      {
        v120 = *(_DWORD *)v113;
        v113 = (unint64_t *)((char *)v113 + 4);
        *(_DWORD *)v119 = v120;
        v119 = (unint64_t *)((char *)v119 + 4);
        v118 -= 4;
      }
      while (v118);
    }
    *((_DWORD *)New + v64) = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v134);
    v136 = v117;
    goto LABEL_103;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2);
  v18 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v148);
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v18))
  {
    v24 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v148);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v24);
  }
  v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v148);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v19);
  v143 = v25;
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) != 0)
  {
    v146.__r_.__value_.__l.__size_ = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v146))
      {
        v26 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v146);
        v27 = 1;
LABEL_83:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v146);
        goto LABEL_84;
      }
      v39 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v146);
      {
        v41 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v146);
        v42 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v149, (const pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        if (v149.__r_.__value_.__l.__size_)
        {
          v26 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2h>(v42);
          v27 = 1;
        }
        else
        {
          v77 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(_QWORD *)v77 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v77);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v150);
          v26 = *(_DWORD *)__sz;
          v4 = *(int **)&__sz[16];
          v5 = __sz[39];
          memset(&__sz[16], 0, 24);
          if (SHIBYTE(v151.__begin_) < 0)
            operator delete((void *)v150);
          v27 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v149);
        goto LABEL_83;
      }
      std::string::basic_string[abi:ne180100]<0>(&v150, "Value is not of the given type");
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v150);
      v26 = *(_DWORD *)__sz;
      v4 = *(int **)&__sz[16];
      v5 = __sz[39];
      memset(&__sz[16], 0, 24);
      if ((SHIBYTE(v151.__begin_) & 0x80000000) == 0)
      {
LABEL_82:
        v27 = 0;
        goto LABEL_83;
      }
      v50 = (void *)v150;
    }
    else
    {
      v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
      std::operator+<char>();
      v44 = std::string::append(&v147, ") at the given time: ");
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v145, v143);
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = &v145;
      else
        v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
      else
        v47 = v145.__r_.__value_.__l.__size_;
      v48 = std::string::append(&v149, (const std::string::value_type *)v46, v47);
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v151.__begin_ = (std::vector<unsigned int>::pointer)v48->__r_.__value_.__r.__words[2];
      v150 = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v150);
      v26 = *(_DWORD *)__sz;
      v4 = *(int **)&__sz[16];
      v5 = __sz[39];
      memset(&__sz[16], 0, 24);
      if (SHIBYTE(v151.__begin_) < 0)
        operator delete((void *)v150);
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v145.__r_.__value_.__l.__data_);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_82;
      v50 = (void *)v147.__r_.__value_.__r.__words[0];
    }
    operator delete(v50);
    goto LABEL_82;
  }
  v28 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
  if ((*(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v28);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v150);
  v26 = *(_DWORD *)__sz;
  v4 = *(int **)&__sz[16];
  v5 = __sz[39];
  memset(&__sz[16], 0, 24);
  if (SHIBYTE(v151.__begin_) < 0)
    operator delete((void *)v150);
  v27 = 0;
LABEL_84:
  type_name = v148.__type_name;
  if (v148.__type_name)
  {
    v57 = (unsigned int *)(v148.__type_name + 8);
    do
    {
      v58 = __ldxr(v57);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v57));
    if (!v59)
      (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t))(*(_QWORD *)type_name + 8))(type_name);
  }
  if (!v27)
    goto LABEL_95;
  if (!DWORD2(v134))
  {
    v60 = v134;
    if (*((_QWORD *)&v135 + 1))
      goto LABEL_211;
    v61 = v136;
    if (v136)
    {
      v62 = atomic_load(v136 - 2);
      if (v62 != 1)
        goto LABEL_211;
      v61 = v136;
      v63 = *(v136 - 1);
    }
    else
    {
      v63 = 0;
    }
    if ((_QWORD)v134 != v63)
    {
      *((_DWORD *)v61 + v134) = v26;
LABEL_109:
      *(_QWORD *)&v134 = v134 + 1;
      goto LABEL_159;
    }
LABEL_211:
    v121 = v136;
    v122 = 1;
    do
    {
      v123 = v122;
      v122 *= 2;
    }
    while (v123 < (uint64_t)v134 + 1);
    v124 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew((uint64_t)&v134, v123);
    v125 = v124;
    if (v60)
    {
      v126 = 4 * v60;
      v127 = v124;
      do
      {
        v128 = *(_DWORD *)v121;
        v121 = (unint64_t *)((char *)v121 + 4);
        *(_DWORD *)v127 = v128;
        v127 = (unint64_t *)((char *)v127 + 4);
        v126 -= 4;
      }
      while (v126);
    }
    *((_DWORD *)v124 + v60) = v26;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v134);
    v136 = v125;
    goto LABEL_109;
  }
  *(_QWORD *)__sz = "vt/array.h";
  *(_QWORD *)&__sz[8] = "emplace_back";
  *(_QWORD *)&__sz[16] = 433;
  *(_QWORD *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::empl"
                         "ace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2h, Args = <const pxrInternal_"
                         "_aapl__pxrReserved__::GfVec2h &>]";
  __sz[32] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_159:
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(&v131, v134);
  v90 = v131;
  if ((_QWORD)v134)
  {
    v91 = (unsigned __int16 *)v136;
    v92 = (unsigned __int16 *)v136 + 2 * v134;
    v93 = MEMORY[0x24BEE8B20];
    do
    {
      LODWORD(v94) = *(_DWORD *)(v93 + 4 * *v91);
      HIDWORD(v94) = *(_DWORD *)(v93 + 4 * v91[1]);
      *v90++ = v94;
      v91 += 2;
    }
    while (v91 != v92);
    v90 = v131;
  }
  if (!IsPrimvar)
    goto LABEL_177;
  memset(__sz, 0, 40);
  Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  v96 = Indices;
  if (Indices)
  {
    v150 = 0uLL;
    v151.__begin_ = 0;
    std::vector<int>::resize((std::vector<unsigned int> *)&v150, *(std::vector<unsigned int>::size_type *)__sz);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v97 = *(int **)&__sz[32];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v98 = *(_QWORD *)&__sz[32] + 4 * *(_QWORD *)__sz;
    if (v97 != (int *)v98)
    {
      v99 = (_DWORD *)v150;
      do
      {
        v100 = *v97++;
        *v99++ = v100;
      }
      while (v97 != (int *)v98);
    }
    if (!a3)
    {
      v101 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v101 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v101);
    }
    v102 = REGeomModelDescriptorAddIndexedAttributeVector2F();
    if ((_QWORD)v150)
    {
      *((_QWORD *)&v150 + 1) = v150;
      operator delete((void *)v150);
    }
  }
  else
  {
    v102 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v96 & 1) == 0)
  {
LABEL_177:
    IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if ((_DWORD)v15 == 4)
      v104 = 1;
    else
      v104 = IsArray;
    if ((v104 & 1) != 0
      || ((IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !(_DWORD)v15)
        ? (v106 = IsScalar)
        : (v106 = 0),
          v106 == 1))
    {
      if (!a3)
      {
        v107 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(_QWORD *)v107 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(_QWORD *)v107 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v107);
        if (*(char *)(a3 + 23) < 0)
          a3 = *(_QWORD *)a3;
      }
      if ((MEMORY[0x2348B0AFC](a1, a3, v15, v134, v90) & 1) != 0)
      {
        v102 = 1;
        goto LABEL_194;
      }
    }
    goto LABEL_193;
  }
LABEL_194:
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v134);
  if ((v141 & 7) != 0)
  {
    v108 = (unsigned int *)(v141 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  if ((v140 & 7) != 0)
  {
    v110 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v111 = __ldxr(v110);
    while (__stlxr(v111 - 2, v110));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v139);
  if (v138)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v138);
  return v102;
}

void sub_230014E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;

  v47 = a34;
  if (a34)
  {
    v48 = (unsigned int *)(a34 + 8);
    do
    {
      v49 = __ldxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a26);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4fEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int IsPrimvar;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  std::vector<unsigned int>::size_type v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  std::vector<unsigned int>::size_type *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t *v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  unint64_t *v32;
  uint64_t v33;
  __int128 v34;
  int Indices;
  char v36;
  unsigned int *v37;
  std::vector<unsigned int>::size_type v38;
  std::vector<unsigned int>::pointer begin;
  unsigned int v40;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v42;
  char IsArray;
  char v44;
  int IsScalar;
  int v46;
  pxrInternal__aapl__pxrReserved__::TfToken *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t *New;
  uint64_t v57;
  unint64_t *v58;
  __int128 v59;
  std::vector<unsigned int>::size_type __sz[5];
  unint64_t *v61;
  uint64_t TypeName;
  void *v63;
  void *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  unint64_t *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::vector<unsigned int> v74;
  const char *v75;
  char v76;
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2348B1E64](&v69, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v69);
  }
  else
  {
    v69 = 3;
    v70 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v72 = 0;
    v73 = 0;
    v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v13 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0)
  {
    v14 = (unsigned int *)(__sz[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  v68 = 0;
  v66 = 0u;
  v67 = 0u;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(a2, (uint64_t)__sz);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v66);
        v66 = *(_OWORD *)&__sz[1];
        v67 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        v68 = v61;
        v61 = 0;
        if ((_DWORD)v13)
          v13 = v13;
        else
          v13 = 4 * ((unint64_t)v66 > 1);
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_44;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_78:
    v42 = 0;
    goto LABEL_79;
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    v77 = 0uLL;
    if (DWORD2(v66))
    {
      v74.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v74.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v74.__end_cap_.__value_ = (unsigned int *)433;
      v75 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::emplace_back(Args"
            " &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4f, Args = <pxrInternal__aapl__pxrReserved__::GfVec4f>]";
      v76 = 0;
      goto LABEL_98;
    }
    v16 = (std::vector<unsigned int>::size_type *)&v77;
    v17 = v66;
    if (!*((_QWORD *)&v67 + 1))
    {
      v18 = v68;
      if (v68)
      {
        v29 = atomic_load(v68 - 2);
        if (v29 != 1)
          goto LABEL_90;
        v18 = v68;
        v30 = *(v68 - 1);
      }
      else
      {
        v30 = 0;
      }
      if ((_QWORD)v66 != v30)
        goto LABEL_39;
    }
LABEL_90:
    v53 = v68;
    v54 = 1;
    do
    {
      v55 = v54;
      v54 *= 2;
    }
    while (v55 < (uint64_t)v66 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew((uint64_t)&v66, v55);
    v25 = New;
    if (v17)
    {
      v57 = 16 * v17;
      v58 = New;
      do
      {
        v59 = *(_OWORD *)v53;
        v53 += 2;
        *(_OWORD *)v58 = v59;
        v58 += 2;
        v57 -= 16;
      }
      while (v57);
    }
    *(_OWORD *)&New[2 * v17] = v77;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v66);
    goto LABEL_96;
  }
  if (DWORD2(v66))
  {
    v74.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v74.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v74.__end_cap_.__value_ = (unsigned int *)433;
    v75 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::emplace_back(Args &"
          "&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4f, Args = <const pxrInternal__aapl__pxrReserved__::GfVec4f &>]";
    v76 = 0;
LABEL_98:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_41;
  }
  v16 = &__sz[1];
  v17 = v66;
  if (*((_QWORD *)&v67 + 1))
    goto LABEL_26;
  v18 = v68;
  if (v68)
  {
    v19 = atomic_load(v68 - 2);
    if (v19 != 1)
      goto LABEL_26;
    v18 = v68;
    v20 = *(v68 - 1);
  }
  else
  {
    v20 = 0;
  }
  if ((_QWORD)v66 == v20)
  {
LABEL_26:
    v21 = v68;
    v22 = 1;
    do
    {
      v23 = v22;
      v22 *= 2;
    }
    while (v23 < (uint64_t)v66 + 1);
    v24 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew((uint64_t)&v66, v23);
    v25 = v24;
    if (v17)
    {
      v26 = 16 * v17;
      v27 = v24;
      do
      {
        v28 = *(_OWORD *)v21;
        v21 += 2;
        *(_OWORD *)v27 = v28;
        v27 += 2;
        v26 -= 16;
      }
      while (v26);
    }
    *(_OWORD *)&v24[2 * v17] = *(_OWORD *)&__sz[1];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v66);
LABEL_96:
    v68 = v25;
    goto LABEL_40;
  }
LABEL_39:
  *(_OWORD *)&v18[2 * v17] = *(_OWORD *)v16;
LABEL_40:
  *(_QWORD *)&v66 = v66 + 1;
LABEL_41:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v61) < 0)
    operator delete((void *)__sz[3]);
LABEL_44:
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&v63, v66);
  v31 = v63;
  if ((_QWORD)v66)
  {
    v32 = v68;
    v33 = 16 * v66;
    do
    {
      v34 = *(_OWORD *)v32;
      v32 += 2;
      *v31++ = v34;
      v33 -= 16;
    }
    while (v33);
    v31 = v63;
  }
  if (!IsPrimvar)
    goto LABEL_62;
  memset(__sz, 0, sizeof(__sz));
  Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  v36 = Indices;
  if (Indices)
  {
    memset(&v74, 0, sizeof(v74));
    std::vector<int>::resize(&v74, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v37 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v38 = __sz[4] + 4 * __sz[0];
    if (v37 != (unsigned int *)v38)
    {
      begin = v74.__begin_;
      do
      {
        v40 = *v37++;
        *begin++ = v40;
      }
      while (v37 != (unsigned int *)v38);
    }
    if (!a3)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    v42 = REGeomModelDescriptorAddIndexedAttributeVector4F();
    if (v74.__begin_)
    {
      v74.__end_ = v74.__begin_;
      operator delete(v74.__begin_);
    }
  }
  else
  {
    v42 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v36 & 1) == 0)
  {
LABEL_62:
    IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if ((_DWORD)v13 == 4)
      v44 = 1;
    else
      v44 = IsArray;
    if ((v44 & 1) != 0
      || ((IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !(_DWORD)v13)
        ? (v46 = IsScalar)
        : (v46 = 0),
          v46 == 1))
    {
      if (!a3)
      {
        v47 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(_QWORD *)v47 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(_QWORD *)v47 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v47);
        if (*(char *)(a3 + 23) < 0)
          a3 = *(_QWORD *)a3;
      }
      if ((MEMORY[0x2348B0B14](a1, a3, v13, v66, v31) & 1) != 0)
      {
        v42 = 1;
        goto LABEL_79;
      }
    }
    goto LABEL_78;
  }
LABEL_79:
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v66);
  if ((v73 & 7) != 0)
  {
    v48 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  if ((v72 & 7) != 0)
  {
    v50 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
  if (v70)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
  return v42;
}

void sub_23001573C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (!(_BYTE)a11 && a19 < 0)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a30);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4dEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, uint64_t *a4)
{
  char v4;
  int IsPrimvar;
  const pxrInternal__aapl__pxrReserved__::TfToken *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdStage *v17;
  pxrInternal__aapl__pxrReserved__::UsdStage *v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  pxrInternal__aapl__pxrReserved__::UsdStage *v20;
  pxrInternal__aapl__pxrReserved__::TfToken *v21;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  pxrInternal__aapl__pxrReserved__::TfToken *v30;
  void *v31;
  pxrInternal__aapl__pxrReserved__::UsdStage *v32;
  void *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  pxrInternal__aapl__pxrReserved__::TfToken *v39;
  pxrInternal__aapl__pxrReserved__::TfToken *v40;
  char v41;
  void *v42;
  pxrInternal__aapl__pxrReserved__::VtValue *v43;
  const std::type_info *v44;
  std::type_info *v45;
  pxrInternal__aapl__pxrReserved__::VtValue *v46;
  uint64_t v47;
  pxrInternal__aapl__pxrReserved__::TfToken *v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  void *v55;
  void *v56;
  char v57;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v59;
  const pxrInternal__aapl__pxrReserved__::VtValue *v60;
  std::type_info *v61;
  void *v62;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  std::string::size_type size;
  std::string *v81;
  __int128 v82;
  char v83;
  void *v84;
  char v85;
  pxrInternal__aapl__pxrReserved__::TfToken *v86;
  pxrInternal__aapl__pxrReserved__::VtValue *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  pxrInternal__aapl__pxrReserved__::TfToken *v93;
  void *v94;
  char v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  float32x4_t *v100;
  float64x2_t *v101;
  uint64_t v102;
  float64x2_t v103;
  float64x2_t v104;
  int Indices;
  char v106;
  int *v107;
  uint64_t v108;
  _DWORD *v109;
  int v110;
  pxrInternal__aapl__pxrReserved__::TfToken *v111;
  uint64_t v112;
  char IsArray;
  char v114;
  int IsScalar;
  int v116;
  pxrInternal__aapl__pxrReserved__::TfToken *v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t *New;
  unint64_t *v127;
  uint64_t v128;
  unint64_t *v129;
  __int128 v130;
  __int128 v131;
  unint64_t *v132;
  unint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t *v137;
  uint64_t v138;
  unint64_t *v139;
  __int128 v140;
  __int128 v141;
  unint64_t *v142;
  _BYTE __sz[48];
  uint64_t TypeName;
  void *v145;
  void *v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  unint64_t *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *__p;
  double v157;
  uint64_t v158;
  std::string v159;
  std::string v160;
  std::string v161;
  std::type_info v162;
  std::string v163;
  __int128 v164;
  _BYTE v165[24];
  uint64_t v166;

  v166 = *MEMORY[0x24BDAC8D0];
  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2348B1E64](&v151, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v151);
  }
  else
  {
    v151 = 3;
    v152 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v154 = 0;
    v155 = 0;
    v11 = *a4;
    *(_QWORD *)__sz = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        *(_QWORD *)__sz &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v14 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v10);
  if ((__sz[0] & 7) != 0)
  {
    v15 = (unsigned int *)(*(_QWORD *)__sz & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v150 = 0;
  v148 = 0u;
  v149 = 0u;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
      goto LABEL_193;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v164, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v163);
      *(_OWORD *)&__sz[8] = v164;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v165;
      *(_QWORD *)&__sz[39] = *(_QWORD *)&v165[15];
      v41 = v165[23];
      memset(v165, 0, sizeof(v165));
      __sz[0] = 0;
      __sz[47] = v41;
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v163.__r_.__value_.__l.__data_);
      goto LABEL_154;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2);
    v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v157);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v19))
    {
      v32 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v157);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v32);
    }
    v20 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v157);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v20);
    __p = v33;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      v40 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v40);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v164, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v163);
      *(_OWORD *)&__sz[8] = v164;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v165;
      *(_QWORD *)&__sz[39] = *(_QWORD *)&v165[15];
      v57 = v165[23];
      memset(v165, 0, sizeof(v165));
      __sz[0] = 0;
      __sz[47] = v57;
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v163.__r_.__value_.__l.__data_);
      goto LABEL_149;
    }
    v162.__type_name = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v162))
      {
        v34 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v162);
        v35 = *(_OWORD *)(v34 + 16);
        v164 = *(_OWORD *)v34;
        *(_OWORD *)v165 = v35;
        v36 = *(_QWORD *)(v34 + 32);
        if (v36)
        {
          v37 = *(unint64_t **)&v165[8];
          if (!*(_QWORD *)&v165[8])
            v37 = (unint64_t *)(v36 - 16);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        __sz[0] = 1;
        *(_OWORD *)&__sz[8] = v164;
        *(_OWORD *)&__sz[24] = *(_OWORD *)v165;
        v164 = 0u;
        memset(v165, 0, sizeof(v165));
        *(_QWORD *)&__sz[40] = v36;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v164);
        goto LABEL_148;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v162);
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v162) & 1) != 0)
        {
          v61 = &v162;
        }
        else
        {
          v61 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v162, &v164);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v164);
        }
        v87 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v161, (const pxrInternal__aapl__pxrReserved__::VtValue *)v61);
        if (v161.__r_.__value_.__l.__size_)
        {
          v88 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(v87);
          v89 = *(_OWORD *)(v88 + 16);
          v164 = *(_OWORD *)v88;
          *(_OWORD *)v165 = v89;
          v90 = *(_QWORD *)(v88 + 32);
          if (v90)
          {
            v91 = *(unint64_t **)&v165[8];
            if (!*(_QWORD *)&v165[8])
              v91 = (unint64_t *)(v90 - 16);
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
          }
          __sz[0] = 1;
          *(_OWORD *)&__sz[8] = v164;
          *(_OWORD *)&__sz[24] = *(_OWORD *)v165;
          v164 = 0u;
          memset(v165, 0, sizeof(v165));
          *(_QWORD *)&__sz[40] = v90;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v164);
        }
        else
        {
          v93 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(_QWORD *)v93 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v93);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v164, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v163);
          *(_OWORD *)&__sz[8] = v164;
          *(_OWORD *)&__sz[24] = *(_OWORD *)v165;
          *(_QWORD *)&__sz[39] = *(_QWORD *)&v165[15];
          v95 = v165[23];
          memset(v165, 0, sizeof(v165));
          __sz[0] = 0;
          __sz[47] = v95;
          if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v163.__r_.__value_.__l.__data_);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v161);
        goto LABEL_148;
      }
      std::string::basic_string[abi:ne180100]<0>(&v163, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v164, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v163);
      *(_OWORD *)&__sz[8] = v164;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v165;
      *(_QWORD *)&__sz[39] = *(_QWORD *)&v165[15];
      v85 = v165[23];
      memset(v165, 0, sizeof(v165));
      __sz[0] = 0;
      __sz[47] = v85;
      if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_148:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v162);
LABEL_149:
        v96 = v158;
        if (v158)
        {
          v97 = (unsigned int *)(v158 + 8);
          do
          {
            v98 = __ldxr(v97);
            v99 = v98 - 1;
          }
          while (__stlxr(v99, v97));
          if (!v99)
            (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
        }
LABEL_154:
        if (__sz[0])
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v148);
          v148 = *(_OWORD *)&__sz[8];
          v149 = *(_OWORD *)&__sz[24];
          memset(&__sz[8], 0, 40);
          v150 = *(unint64_t **)&__sz[40];
          if ((_DWORD)v14)
            v14 = v14;
          else
            v14 = 4 * ((unint64_t)v148 > 1);
          realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,realityio::DetailedError>::~Result((uint64_t)__sz);
          goto LABEL_159;
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,realityio::DetailedError>::~Result((uint64_t)__sz);
LABEL_193:
        v112 = 0;
        goto LABEL_194;
      }
      v84 = (void *)v163.__r_.__value_.__r.__words[0];
    }
    else
    {
      v48 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v48 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v48);
      std::operator+<char>();
      v77 = std::string::append(&v159, ") at the given time: ");
      v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v161.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v160, *(double *)&__p);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = &v160;
      else
        v79 = (std::string *)v160.__r_.__value_.__r.__words[0];
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v160.__r_.__value_.__r.__words[2]);
      else
        size = v160.__r_.__value_.__l.__size_;
      v81 = std::string::append(&v161, (const std::string::value_type *)v79, size);
      v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v163.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v164, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v163);
      *(_OWORD *)&__sz[8] = v164;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v165;
      *(_QWORD *)&__sz[39] = *(_QWORD *)&v165[15];
      v83 = v165[23];
      memset(v165, 0, sizeof(v165));
      __sz[0] = 0;
      __sz[47] = v83;
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v163.__r_.__value_.__l.__data_);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v160.__r_.__value_.__l.__data_);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_148;
      v84 = (void *)v159.__r_.__value_.__r.__words[0];
    }
    operator delete(v84);
    goto LABEL_148;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
  {
    v21 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
    if ((*(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v164);
    v31 = *(void **)&__sz[16];
    v4 = __sz[39];
    memset(&__sz[16], 0, 24);
    __p = v31;
    if ((v165[7] & 0x80000000) != 0)
      operator delete((void *)v164);
LABEL_95:
    v164 = 0u;
    *(_OWORD *)v165 = 0u;
    if (DWORD2(v148))
    {
      *(_QWORD *)__sz = "vt/array.h";
      *(_QWORD *)&__sz[8] = "emplace_back";
      *(_QWORD *)&__sz[16] = 433;
      *(_QWORD *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::"
                             "emplace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4d, Args = <pxrInterna"
                             "l__aapl__pxrReserved__::GfVec4d>]";
      __sz[32] = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_104:
      if (v4 < 0)
        operator delete(__p);
      goto LABEL_159;
    }
    v71 = v148;
    if (*((_QWORD *)&v149 + 1))
      goto LABEL_205;
    v72 = v150;
    if (v150)
    {
      v73 = atomic_load(v150 - 2);
      if (v73 != 1)
        goto LABEL_205;
      v72 = v150;
      v74 = *(v150 - 1);
    }
    else
    {
      v74 = 0;
    }
    if ((_QWORD)v148 != v74)
    {
      v75 = &v72[4 * v148];
      *(_OWORD *)v75 = v164;
      *((_OWORD *)v75 + 1) = *(_OWORD *)v165;
LABEL_103:
      *(_QWORD *)&v148 = v148 + 1;
      goto LABEL_104;
    }
LABEL_205:
    v123 = v150;
    v124 = 1;
    do
    {
      v125 = v124;
      v124 *= 2;
    }
    while (v125 < (uint64_t)v148 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew((uint64_t)&v148, v125);
    v127 = New;
    if (v71)
    {
      v128 = 32 * v71;
      v129 = New;
      do
      {
        v130 = *(_OWORD *)v123;
        v131 = *((_OWORD *)v123 + 1);
        v123 += 4;
        *(_OWORD *)v129 = v130;
        *((_OWORD *)v129 + 1) = v131;
        v129 += 4;
        v128 -= 32;
      }
      while (v128);
    }
    v132 = &New[4 * v71];
    *(_OWORD *)v132 = v164;
    *((_OWORD *)v132 + 1) = *(_OWORD *)v165;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v148);
    v150 = v127;
    goto LABEL_103;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2);
  v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v162);
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v17))
  {
    v23 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v162);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v23);
  }
  v18 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v162);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v18);
  v157 = v24;
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) != 0)
  {
    v160.__r_.__value_.__l.__size_ = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v160))
      {
        v25 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v160);
        v26 = *(_QWORD *)v25;
        v27 = *(_QWORD *)(v25 + 8);
        v28 = *(_QWORD *)(v25 + 24);
        __p = *(void **)(v25 + 16);
        v29 = 1;
LABEL_83:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v160);
        goto LABEL_84;
      }
      v43 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v160);
      {
        v45 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v160);
        v46 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v163, (const pxrInternal__aapl__pxrReserved__::VtValue *)v45);
        if (v163.__r_.__value_.__l.__size_)
        {
          v47 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4d>(v46);
          v26 = *(_QWORD *)v47;
          v27 = *(_QWORD *)(v47 + 8);
          v28 = *(_QWORD *)(v47 + 24);
          __p = *(void **)(v47 + 16);
          v29 = 1;
        }
        else
        {
          v86 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(_QWORD *)v86 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v86);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v164);
          v26 = *(_QWORD *)__sz;
          v27 = *(_QWORD *)&__sz[8];
          v94 = *(void **)&__sz[16];
          v28 = *(_QWORD *)&__sz[24];
          v4 = __sz[39];
          memset(&__sz[16], 0, 24);
          __p = v94;
          if ((v165[7] & 0x80000000) != 0)
            operator delete((void *)v164);
          v29 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v163);
        goto LABEL_83;
      }
      std::string::basic_string[abi:ne180100]<0>(&v164, "Value is not of the given type");
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v164);
      v26 = *(_QWORD *)__sz;
      v27 = *(_QWORD *)&__sz[8];
      v62 = *(void **)&__sz[16];
      v28 = *(_QWORD *)&__sz[24];
      v4 = __sz[39];
      memset(&__sz[16], 0, 24);
      __p = v62;
      if ((v165[7] & 0x80000000) == 0)
      {
LABEL_82:
        v29 = 0;
        goto LABEL_83;
      }
      v56 = (void *)v164;
    }
    else
    {
      v39 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v39 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v39);
      std::operator+<char>();
      v49 = std::string::append(&v161, ") at the given time: ");
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v163.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v159, v157);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v159;
      else
        v51 = (std::string *)v159.__r_.__value_.__r.__words[0];
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      else
        v52 = v159.__r_.__value_.__l.__size_;
      v53 = std::string::append(&v163, (const std::string::value_type *)v51, v52);
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      *(_QWORD *)v165 = *((_QWORD *)&v53->__r_.__value_.__l + 2);
      v164 = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v164);
      v26 = *(_QWORD *)__sz;
      v27 = *(_QWORD *)&__sz[8];
      v55 = *(void **)&__sz[16];
      v28 = *(_QWORD *)&__sz[24];
      v4 = __sz[39];
      memset(&__sz[16], 0, 24);
      __p = v55;
      if ((v165[7] & 0x80000000) != 0)
        operator delete((void *)v164);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v163.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_82;
      v56 = (void *)v161.__r_.__value_.__r.__words[0];
    }
    operator delete(v56);
    goto LABEL_82;
  }
  v30 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
  if ((*(_QWORD *)v30 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v30);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v164);
  v26 = *(_QWORD *)__sz;
  v27 = *(_QWORD *)&__sz[8];
  v42 = *(void **)&__sz[16];
  v28 = *(_QWORD *)&__sz[24];
  v4 = __sz[39];
  memset(&__sz[16], 0, 24);
  __p = v42;
  if ((v165[7] & 0x80000000) != 0)
    operator delete((void *)v164);
  v29 = 0;
LABEL_84:
  type_name = v162.__type_name;
  if (v162.__type_name)
  {
    v64 = (unsigned int *)(v162.__type_name + 8);
    do
    {
      v65 = __ldxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
      (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t))(*(_QWORD *)type_name + 8))(type_name);
  }
  if (!v29)
    goto LABEL_95;
  if (!DWORD2(v148))
  {
    v67 = v148;
    if (*((_QWORD *)&v149 + 1))
      goto LABEL_211;
    v68 = v150;
    if (v150)
    {
      v69 = atomic_load(v150 - 2);
      if (v69 != 1)
        goto LABEL_211;
      v68 = v150;
      v70 = *(v150 - 1);
    }
    else
    {
      v70 = 0;
    }
    if ((_QWORD)v148 != v70)
    {
      v76 = &v68[4 * v148];
      *v76 = v26;
      v76[1] = v27;
      v76[2] = (unint64_t)__p;
      v76[3] = v28;
LABEL_109:
      *(_QWORD *)&v148 = v148 + 1;
      goto LABEL_159;
    }
LABEL_211:
    v133 = v150;
    v134 = 1;
    do
    {
      v135 = v134;
      v134 *= 2;
    }
    while (v135 < (uint64_t)v148 + 1);
    v136 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew((uint64_t)&v148, v135);
    v137 = v136;
    if (v67)
    {
      v138 = 32 * v67;
      v139 = v136;
      do
      {
        v140 = *(_OWORD *)v133;
        v141 = *((_OWORD *)v133 + 1);
        v133 += 4;
        *(_OWORD *)v139 = v140;
        *((_OWORD *)v139 + 1) = v141;
        v139 += 4;
        v138 -= 32;
      }
      while (v138);
    }
    v142 = &v136[4 * v67];
    *v142 = v26;
    v142[1] = v27;
    v142[2] = (unint64_t)__p;
    v142[3] = v28;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v148);
    v150 = v137;
    goto LABEL_109;
  }
  *(_QWORD *)__sz = "vt/array.h";
  *(_QWORD *)&__sz[8] = "emplace_back";
  *(_QWORD *)&__sz[16] = 433;
  *(_QWORD *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::empl"
                         "ace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4d, Args = <const pxrInternal_"
                         "_aapl__pxrReserved__::GfVec4d &>]";
  __sz[32] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_159:
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&v145, v148);
  v100 = (float32x4_t *)v145;
  if ((_QWORD)v148)
  {
    v101 = (float64x2_t *)v150;
    v102 = 32 * v148;
    do
    {
      v104 = *v101;
      v103 = v101[1];
      v101 += 2;
      *v100++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v104), v103);
      v102 -= 32;
    }
    while (v102);
    v100 = (float32x4_t *)v145;
  }
  if (!IsPrimvar)
    goto LABEL_177;
  memset(__sz, 0, 40);
  Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  v106 = Indices;
  if (Indices)
  {
    v164 = 0uLL;
    *(_QWORD *)v165 = 0;
    std::vector<int>::resize((std::vector<unsigned int> *)&v164, *(std::vector<unsigned int>::size_type *)__sz);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v107 = *(int **)&__sz[32];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v108 = *(_QWORD *)&__sz[32] + 4 * *(_QWORD *)__sz;
    if (v107 != (int *)v108)
    {
      v109 = (_DWORD *)v164;
      do
      {
        v110 = *v107++;
        *v109++ = v110;
      }
      while (v107 != (int *)v108);
    }
    if (!a3)
    {
      v111 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v111 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v111);
    }
    v112 = REGeomModelDescriptorAddIndexedAttributeVector4F();
    if ((_QWORD)v164)
    {
      *((_QWORD *)&v164 + 1) = v164;
      operator delete((void *)v164);
    }
  }
  else
  {
    v112 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v106 & 1) == 0)
  {
LABEL_177:
    IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if ((_DWORD)v14 == 4)
      v114 = 1;
    else
      v114 = IsArray;
    if ((v114 & 1) != 0
      || ((IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !(_DWORD)v14)
        ? (v116 = IsScalar)
        : (v116 = 0),
          v116 == 1))
    {
      if (!a3)
      {
        v117 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(_QWORD *)v117 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(_QWORD *)v117 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v117);
        if (*(char *)(a3 + 23) < 0)
          a3 = *(_QWORD *)a3;
      }
      if ((MEMORY[0x2348B0B14](a1, a3, v14, v148, v100) & 1) != 0)
      {
        v112 = 1;
        goto LABEL_194;
      }
    }
    goto LABEL_193;
  }
LABEL_194:
  if (v145)
  {
    v146 = v145;
    operator delete(v145);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v148);
  if ((v155 & 7) != 0)
  {
    v118 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
    do
      v119 = __ldxr(v118);
    while (__stlxr(v119 - 2, v118));
  }
  if ((v154 & 7) != 0)
  {
    v120 = (unsigned int *)(v154 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v153);
  if (v152)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v152);
  return v112;
}

void sub_2300168C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;

  v47 = a34;
  if (a34)
  {
    v48 = (unsigned int *)(a34 + 8);
    do
    {
      v49 = __ldxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a26);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4hEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, uint64_t *a4)
{
  int *v4;
  char v5;
  int IsPrimvar;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::UsdStage *v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  pxrInternal__aapl__pxrReserved__::UsdStage *v20;
  pxrInternal__aapl__pxrReserved__::UsdStage *v21;
  pxrInternal__aapl__pxrReserved__::TfToken *v22;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v24;
  double v25;
  uint64_t v26;
  int v27;
  pxrInternal__aapl__pxrReserved__::TfToken *v28;
  pxrInternal__aapl__pxrReserved__::UsdStage *v29;
  double v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t *end;
  unint64_t v35;
  pxrInternal__aapl__pxrReserved__::TfToken *v36;
  pxrInternal__aapl__pxrReserved__::TfToken *v37;
  char value_high;
  pxrInternal__aapl__pxrReserved__::VtValue *v39;
  const std::type_info *v40;
  std::type_info *v41;
  pxrInternal__aapl__pxrReserved__::VtValue *v42;
  pxrInternal__aapl__pxrReserved__::TfToken *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  void *v50;
  char v51;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v53;
  const pxrInternal__aapl__pxrReserved__::VtValue *v54;
  std::type_info *v55;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  std::string::size_type size;
  std::string *v72;
  __int128 v73;
  char v74;
  void *v75;
  char v76;
  pxrInternal__aapl__pxrReserved__::TfToken *v77;
  pxrInternal__aapl__pxrReserved__::VtValue *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  pxrInternal__aapl__pxrReserved__::TfToken *v84;
  char v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  _OWORD *v90;
  unsigned __int16 *v91;
  unsigned __int16 *v92;
  uint64_t v93;
  __int128 v94;
  int Indices;
  char v96;
  int *v97;
  uint64_t v98;
  _DWORD *v99;
  int v100;
  pxrInternal__aapl__pxrReserved__::TfToken *v101;
  uint64_t v102;
  char IsArray;
  char v104;
  int IsScalar;
  int v106;
  pxrInternal__aapl__pxrReserved__::TfToken *v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  _QWORD *New;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _BYTE __sz[48];
  uint64_t TypeName;
  void *v131;
  void *v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  _QWORD *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  double v143;
  uint64_t v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::type_info v148;
  std::string v149;
  __int128 v150;
  std::vector<unsigned int> v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2348B1E64](&v137, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v137);
  }
  else
  {
    v137 = 3;
    v138 = 0;
    v4 = &v137;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v140 = 0;
    v141 = 0;
    v12 = *a4;
    *(_QWORD *)__sz = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        *(_QWORD *)__sz &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v15 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v11);
  if ((__sz[0] & 7) != 0)
  {
    v16 = (unsigned int *)(*(_QWORD *)__sz & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  v136 = 0;
  v134 = 0u;
  v135 = 0u;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
      goto LABEL_193;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v150, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v149);
      *(_OWORD *)&__sz[8] = v150;
      *(_QWORD *)&__sz[24] = v151.__begin_;
      *(_QWORD *)&__sz[32] = v151.__end_;
      *(_QWORD *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v151.__end_ + 7);
      value_high = HIBYTE(v151.__end_cap_.__value_);
      memset(&v151, 0, sizeof(v151));
      __sz[0] = 0;
      __sz[47] = value_high;
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      goto LABEL_154;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2);
    v20 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v143);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v20))
    {
      v29 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v143);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v29);
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v143);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v21);
    v142 = v30;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      v37 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v37 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v150, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v149);
      *(_OWORD *)&__sz[8] = v150;
      *(_QWORD *)&__sz[24] = v151.__begin_;
      *(_QWORD *)&__sz[32] = v151.__end_;
      *(_QWORD *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v151.__end_ + 7);
      v51 = HIBYTE(v151.__end_cap_.__value_);
      memset(&v151, 0, sizeof(v151));
      __sz[0] = 0;
      __sz[47] = v51;
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      goto LABEL_149;
    }
    v148.__type_name = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v148))
      {
        v31 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v148);
        v32 = *(_OWORD *)(v31 + 16);
        v150 = *(_OWORD *)v31;
        *(_OWORD *)&v151.__begin_ = v32;
        v33 = *(_QWORD *)(v31 + 32);
        if (v33)
        {
          end = (unint64_t *)v151.__end_;
          if (!v151.__end_)
            end = (unint64_t *)(v33 - 16);
          do
            v35 = __ldxr(end);
          while (__stxr(v35 + 1, end));
        }
        __sz[0] = 1;
        *(_OWORD *)&__sz[8] = v150;
        *(_OWORD *)&__sz[24] = *(_OWORD *)&v151.__begin_;
        v150 = 0u;
        memset(&v151, 0, sizeof(v151));
        *(_QWORD *)&__sz[40] = v33;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v150);
        goto LABEL_148;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v148);
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v148) & 1) != 0)
        {
          v55 = &v148;
        }
        else
        {
          v55 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v148, &v150);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v150);
        }
        v78 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v147, (const pxrInternal__aapl__pxrReserved__::VtValue *)v55);
        if (v147.__r_.__value_.__l.__size_)
        {
          v79 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(v78);
          v80 = *(_OWORD *)(v79 + 16);
          v150 = *(_OWORD *)v79;
          *(_OWORD *)&v151.__begin_ = v80;
          v81 = *(_QWORD *)(v79 + 32);
          if (v81)
          {
            v82 = (unint64_t *)v151.__end_;
            if (!v151.__end_)
              v82 = (unint64_t *)(v81 - 16);
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
          }
          __sz[0] = 1;
          *(_OWORD *)&__sz[8] = v150;
          *(_OWORD *)&__sz[24] = *(_OWORD *)&v151.__begin_;
          v150 = 0u;
          memset(&v151, 0, sizeof(v151));
          *(_QWORD *)&__sz[40] = v81;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v150);
        }
        else
        {
          v84 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(_QWORD *)v84 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v84);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v150, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v149);
          *(_OWORD *)&__sz[8] = v150;
          *(_QWORD *)&__sz[24] = v151.__begin_;
          *(_QWORD *)&__sz[32] = v151.__end_;
          *(_QWORD *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v151.__end_ + 7);
          v85 = HIBYTE(v151.__end_cap_.__value_);
          memset(&v151, 0, sizeof(v151));
          __sz[0] = 0;
          __sz[47] = v85;
          if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v149.__r_.__value_.__l.__data_);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v147);
        goto LABEL_148;
      }
      std::string::basic_string[abi:ne180100]<0>(&v149, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v150, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v149);
      *(_OWORD *)&__sz[8] = v150;
      *(_QWORD *)&__sz[24] = v151.__begin_;
      *(_QWORD *)&__sz[32] = v151.__end_;
      *(_QWORD *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v151.__end_ + 7);
      v76 = HIBYTE(v151.__end_cap_.__value_);
      memset(&v151, 0, sizeof(v151));
      __sz[0] = 0;
      __sz[47] = v76;
      if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_148:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v148);
LABEL_149:
        v86 = v144;
        if (v144)
        {
          v87 = (unsigned int *)(v144 + 8);
          do
          {
            v88 = __ldxr(v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v87));
          if (!v89)
            (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
        }
LABEL_154:
        if (__sz[0])
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v134);
          v134 = *(_OWORD *)&__sz[8];
          v135 = *(_OWORD *)&__sz[24];
          memset(&__sz[8], 0, 40);
          v136 = *(_QWORD **)&__sz[40];
          if ((_DWORD)v15)
            v15 = v15;
          else
            v15 = 4 * ((unint64_t)v134 > 1);
          realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,realityio::DetailedError>::~Result((uint64_t)__sz);
          goto LABEL_159;
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,realityio::DetailedError>::~Result((uint64_t)__sz);
LABEL_193:
        v102 = 0;
        goto LABEL_194;
      }
      v75 = (void *)v149.__r_.__value_.__r.__words[0];
    }
    else
    {
      v43 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v43 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v43);
      std::operator+<char>();
      v68 = std::string::append(&v145, ") at the given time: ");
      v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      v147.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v146, v142);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v70 = &v146;
      else
        v70 = (std::string *)v146.__r_.__value_.__r.__words[0];
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      else
        size = v146.__r_.__value_.__l.__size_;
      v72 = std::string::append(&v147, (const std::string::value_type *)v70, size);
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v150, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v149);
      *(_OWORD *)&__sz[8] = v150;
      *(_QWORD *)&__sz[24] = v151.__begin_;
      *(_QWORD *)&__sz[32] = v151.__end_;
      *(_QWORD *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v151.__end_ + 7);
      v74 = HIBYTE(v151.__end_cap_.__value_);
      memset(&v151, 0, sizeof(v151));
      __sz[0] = 0;
      __sz[47] = v74;
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v147.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_148;
      v75 = (void *)v145.__r_.__value_.__r.__words[0];
    }
    operator delete(v75);
    goto LABEL_148;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
  {
    v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
    if ((*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v150);
    v4 = *(int **)&__sz[16];
    v5 = __sz[39];
    memset(&__sz[16], 0, 24);
    if (SHIBYTE(v151.__begin_) < 0)
      operator delete((void *)v150);
LABEL_95:
    if (DWORD2(v134))
    {
      *(_QWORD *)__sz = "vt/array.h";
      *(_QWORD *)&__sz[8] = "emplace_back";
      *(_QWORD *)&__sz[16] = 433;
      *(_QWORD *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::"
                             "emplace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4h, Args = <pxrInterna"
                             "l__aapl__pxrReserved__::GfVec4h>]";
      __sz[32] = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_104:
      if (v5 < 0)
        operator delete(v4);
      goto LABEL_159;
    }
    v64 = v134;
    if (*((_QWORD *)&v135 + 1))
      goto LABEL_205;
    v65 = v136;
    if (v136)
    {
      v66 = atomic_load(v136 - 2);
      if (v66 != 1)
        goto LABEL_205;
      v65 = v136;
      v67 = *(v136 - 1);
    }
    else
    {
      v67 = 0;
    }
    if ((_QWORD)v134 != v67)
    {
      v65[(_QWORD)v134] = 0;
LABEL_103:
      *(_QWORD *)&v134 = v134 + 1;
      goto LABEL_104;
    }
LABEL_205:
    v113 = v136;
    v114 = 1;
    do
    {
      v115 = v114;
      v114 *= 2;
    }
    while (v115 < (uint64_t)v134 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew((uint64_t)&v134, v115);
    v117 = New;
    if (v64)
    {
      v118 = 8 * v64;
      v119 = New;
      do
      {
        v120 = *v113++;
        *v119++ = v120;
        v118 -= 8;
      }
      while (v118);
    }
    New[v64] = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v134);
    v136 = v117;
    goto LABEL_103;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2);
  v18 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v148);
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v18))
  {
    v24 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v148);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v24);
  }
  v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v148);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v19);
  v143 = v25;
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) != 0)
  {
    v146.__r_.__value_.__l.__size_ = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v146))
      {
        v26 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v146);
        v27 = 1;
LABEL_83:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v146);
        goto LABEL_84;
      }
      v39 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v146);
      {
        v41 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v146);
        v42 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v149, (const pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        if (v149.__r_.__value_.__l.__size_)
        {
          v26 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4h>(v42);
          v27 = 1;
        }
        else
        {
          v77 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(_QWORD *)v77 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v77);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v150);
          v26 = *(_QWORD *)__sz;
          v4 = *(int **)&__sz[16];
          v5 = __sz[39];
          memset(&__sz[16], 0, 24);
          if (SHIBYTE(v151.__begin_) < 0)
            operator delete((void *)v150);
          v27 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v149);
        goto LABEL_83;
      }
      std::string::basic_string[abi:ne180100]<0>(&v150, "Value is not of the given type");
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v150);
      v26 = *(_QWORD *)__sz;
      v4 = *(int **)&__sz[16];
      v5 = __sz[39];
      memset(&__sz[16], 0, 24);
      if ((SHIBYTE(v151.__begin_) & 0x80000000) == 0)
      {
LABEL_82:
        v27 = 0;
        goto LABEL_83;
      }
      v50 = (void *)v150;
    }
    else
    {
      v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
      std::operator+<char>();
      v44 = std::string::append(&v147, ") at the given time: ");
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v145, v143);
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = &v145;
      else
        v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
      else
        v47 = v145.__r_.__value_.__l.__size_;
      v48 = std::string::append(&v149, (const std::string::value_type *)v46, v47);
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v151.__begin_ = (std::vector<unsigned int>::pointer)v48->__r_.__value_.__r.__words[2];
      v150 = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v150);
      v26 = *(_QWORD *)__sz;
      v4 = *(int **)&__sz[16];
      v5 = __sz[39];
      memset(&__sz[16], 0, 24);
      if (SHIBYTE(v151.__begin_) < 0)
        operator delete((void *)v150);
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v145.__r_.__value_.__l.__data_);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_82;
      v50 = (void *)v147.__r_.__value_.__r.__words[0];
    }
    operator delete(v50);
    goto LABEL_82;
  }
  v28 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
  if ((*(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v28);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v150);
  v26 = *(_QWORD *)__sz;
  v4 = *(int **)&__sz[16];
  v5 = __sz[39];
  memset(&__sz[16], 0, 24);
  if (SHIBYTE(v151.__begin_) < 0)
    operator delete((void *)v150);
  v27 = 0;
LABEL_84:
  type_name = v148.__type_name;
  if (v148.__type_name)
  {
    v57 = (unsigned int *)(v148.__type_name + 8);
    do
    {
      v58 = __ldxr(v57);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v57));
    if (!v59)
      (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t))(*(_QWORD *)type_name + 8))(type_name);
  }
  if (!v27)
    goto LABEL_95;
  if (!DWORD2(v134))
  {
    v60 = v134;
    if (*((_QWORD *)&v135 + 1))
      goto LABEL_211;
    v61 = v136;
    if (v136)
    {
      v62 = atomic_load(v136 - 2);
      if (v62 != 1)
        goto LABEL_211;
      v61 = v136;
      v63 = *(v136 - 1);
    }
    else
    {
      v63 = 0;
    }
    if ((_QWORD)v134 != v63)
    {
      v61[(_QWORD)v134] = v26;
LABEL_109:
      *(_QWORD *)&v134 = v134 + 1;
      goto LABEL_159;
    }
LABEL_211:
    v121 = v136;
    v122 = 1;
    do
    {
      v123 = v122;
      v122 *= 2;
    }
    while (v123 < (uint64_t)v134 + 1);
    v124 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew((uint64_t)&v134, v123);
    v125 = v124;
    if (v60)
    {
      v126 = 8 * v60;
      v127 = v124;
      do
      {
        v128 = *v121++;
        *v127++ = v128;
        v126 -= 8;
      }
      while (v126);
    }
    v124[v60] = v26;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v134);
    v136 = v125;
    goto LABEL_109;
  }
  *(_QWORD *)__sz = "vt/array.h";
  *(_QWORD *)&__sz[8] = "emplace_back";
  *(_QWORD *)&__sz[16] = 433;
  *(_QWORD *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::empl"
                         "ace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4h, Args = <const pxrInternal_"
                         "_aapl__pxrReserved__::GfVec4h &>]";
  __sz[32] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_159:
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&v131, v134);
  v90 = v131;
  if ((_QWORD)v134)
  {
    v91 = (unsigned __int16 *)v136;
    v92 = (unsigned __int16 *)&v136[v134];
    v93 = MEMORY[0x24BEE8B20];
    do
    {
      LODWORD(v94) = *(_DWORD *)(v93 + 4 * *v91);
      DWORD1(v94) = *(_DWORD *)(v93 + 4 * v91[1]);
      DWORD2(v94) = *(_DWORD *)(v93 + 4 * v91[2]);
      HIDWORD(v94) = *(_DWORD *)(v93 + 4 * v91[3]);
      *v90++ = v94;
      v91 += 4;
    }
    while (v91 != v92);
    v90 = v131;
  }
  if (!IsPrimvar)
    goto LABEL_177;
  memset(__sz, 0, 40);
  Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  v96 = Indices;
  if (Indices)
  {
    v150 = 0uLL;
    v151.__begin_ = 0;
    std::vector<int>::resize((std::vector<unsigned int> *)&v150, *(std::vector<unsigned int>::size_type *)__sz);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v97 = *(int **)&__sz[32];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v98 = *(_QWORD *)&__sz[32] + 4 * *(_QWORD *)__sz;
    if (v97 != (int *)v98)
    {
      v99 = (_DWORD *)v150;
      do
      {
        v100 = *v97++;
        *v99++ = v100;
      }
      while (v97 != (int *)v98);
    }
    if (!a3)
    {
      v101 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)v101 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v101);
    }
    v102 = REGeomModelDescriptorAddIndexedAttributeVector4F();
    if ((_QWORD)v150)
    {
      *((_QWORD *)&v150 + 1) = v150;
      operator delete((void *)v150);
    }
  }
  else
  {
    v102 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v96 & 1) == 0)
  {
LABEL_177:
    IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if ((_DWORD)v15 == 4)
      v104 = 1;
    else
      v104 = IsArray;
    if ((v104 & 1) != 0
      || ((IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !(_DWORD)v15)
        ? (v106 = IsScalar)
        : (v106 = 0),
          v106 == 1))
    {
      if (!a3)
      {
        v107 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(_QWORD *)v107 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(_QWORD *)v107 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v107);
        if (*(char *)(a3 + 23) < 0)
          a3 = *(_QWORD *)a3;
      }
      if ((MEMORY[0x2348B0B14](a1, a3, v15, v134, v90) & 1) != 0)
      {
        v102 = 1;
        goto LABEL_194;
      }
    }
    goto LABEL_193;
  }
LABEL_194:
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v134);
  if ((v141 & 7) != 0)
  {
    v108 = (unsigned int *)(v141 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  if ((v140 & 7) != 0)
  {
    v110 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v111 = __ldxr(v110);
    while (__stlxr(v111 - 2, v110));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v139);
  if (v138)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v138);
  return v102;
}

void sub_230017B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;

  v47 = a34;
  if (a34)
  {
    v48 = (unsigned int *)(a34 + 8);
    do
    {
      v49 = __ldxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a26);
  _Unwind_Resume(a1);
}

uint64_t realityio::convertAndAddAttributeToModelDescriptor<int,int>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int IsPrimvar;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  std::vector<unsigned int>::size_type v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  int Indices;
  char v22;
  unsigned int *v23;
  std::vector<unsigned int>::size_type v24;
  std::vector<unsigned int>::pointer begin;
  unsigned int v26;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v28;
  char IsArray;
  char v30;
  int IsScalar;
  int v32;
  pxrInternal__aapl__pxrReserved__::TfToken *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *New;
  unint64_t *v43;
  uint64_t v44;
  unint64_t *v45;
  int v46;
  std::vector<unsigned int>::size_type __sz[5];
  unint64_t *v48;
  uint64_t TypeName;
  __int128 v50;
  __int128 v51;
  unint64_t *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::vector<unsigned int> v58;
  const char *v59;
  char v60;

  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2348B1E64](&v53, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v53);
  }
  else
  {
    v53 = 3;
    v54 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v56 = 0;
    v57 = 0;
    v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v13 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0)
  {
    v14 = (unsigned int *)(__sz[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  v52 = 0;
  v50 = 0u;
  v51 = 0u;
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a2, (uint64_t)__sz);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v50);
        v50 = *(_OWORD *)&__sz[1];
        v51 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        v52 = v48;
        v48 = 0;
        if ((_DWORD)v13)
          v13 = v13;
        else
          v13 = 4 * ((unint64_t)v50 > 1);
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_32;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_62:
    v28 = 0;
    goto LABEL_63;
  }
  realityio::getAttributeValue<int>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    LODWORD(v58.__begin_) = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<int>::emplace_back<int>((uint64_t)&v50, &v58);
    goto LABEL_29;
  }
  if (DWORD2(v50))
  {
    v58.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v58.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v58.__end_cap_.__value_ = (unsigned int *)433;
    v59 = "void pxrInternal__aapl__pxrReserved__::VtArray<int>::emplace_back(Args &&...) [T = int, Args = <const int &>]";
    v60 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_29;
  }
  v16 = v50;
  if (*((_QWORD *)&v51 + 1))
    goto LABEL_72;
  v17 = v52;
  if (v52)
  {
    v18 = atomic_load(v52 - 2);
    if (v18 != 1)
      goto LABEL_72;
    v17 = v52;
    v19 = *(v52 - 1);
  }
  else
  {
    v19 = 0;
  }
  if ((_QWORD)v50 == v19)
  {
LABEL_72:
    v39 = v52;
    v40 = 1;
    do
    {
      v41 = v40;
      v40 *= 2;
    }
    while (v41 < (uint64_t)v50 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew((uint64_t)&v50, v41);
    v43 = New;
    if (v16)
    {
      v44 = 4 * v16;
      v45 = New;
      do
      {
        v46 = *(_DWORD *)v39;
        v39 = (unint64_t *)((char *)v39 + 4);
        *(_DWORD *)v45 = v46;
        v45 = (unint64_t *)((char *)v45 + 4);
        v44 -= 4;
      }
      while (v44);
    }
    *((_DWORD *)New + v16) = __sz[1];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v50);
    v52 = v43;
    goto LABEL_27;
  }
  *((_DWORD *)v17 + v50) = __sz[1];
LABEL_27:
  *(_QWORD *)&v50 = v50 + 1;
LABEL_29:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v48) < 0)
    operator delete((void *)__sz[3]);
LABEL_32:
  v20 = v52;
  if (!IsPrimvar)
    goto LABEL_46;
  memset(__sz, 0, sizeof(__sz));
  Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  v22 = Indices;
  if (Indices)
  {
    memset(&v58, 0, sizeof(v58));
    std::vector<int>::resize(&v58, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v23 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v24 = __sz[4] + 4 * __sz[0];
    if (v23 != (unsigned int *)v24)
    {
      begin = v58.__begin_;
      do
      {
        v26 = *v23++;
        *begin++ = v26;
      }
      while (v23 != (unsigned int *)v24);
    }
    if (!a3)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    v28 = REGeomModelDescriptorAddIndexedAttributeInt32();
    if (v58.__begin_)
    {
      v58.__end_ = v58.__begin_;
      operator delete(v58.__begin_);
    }
  }
  else
  {
    v28 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v22 & 1) == 0)
  {
LABEL_46:
    IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if ((_DWORD)v13 == 4)
      v30 = 1;
    else
      v30 = IsArray;
    if ((v30 & 1) != 0
      || ((IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !(_DWORD)v13)
        ? (v32 = IsScalar)
        : (v32 = 0),
          v32 == 1))
    {
      if (!a3)
      {
        v33 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(_QWORD *)v33 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(_QWORD *)v33 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
        if (*(char *)(a3 + 23) < 0)
          a3 = *(_QWORD *)a3;
      }
      if ((MEMORY[0x2348B0AC0](a1, a3, v13, v50, v20) & 1) != 0)
      {
        v28 = 1;
        goto LABEL_63;
      }
    }
    goto LABEL_62;
  }
LABEL_63:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v50);
  if ((v57 & 7) != 0)
  {
    v34 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if ((v56 & 7) != 0)
  {
    v36 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
  if (v54)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
  return v28;
}

void sub_2300182CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!(_BYTE)a11 && a19 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a22);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a27);
  _Unwind_Resume(a1);
}

uint64_t realityio::convertAndAddAttributeToModelDescriptor<unsigned int,unsigned int>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int IsPrimvar;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  std::vector<unsigned int>::size_type v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  int Indices;
  char v26;
  unsigned int *v27;
  std::vector<unsigned int>::size_type v28;
  std::vector<unsigned int>::pointer begin;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v32;
  char IsArray;
  char v34;
  int IsScalar;
  int v36;
  pxrInternal__aapl__pxrReserved__::TfToken *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t *v49;
  int v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t *New;
  uint64_t v55;
  unint64_t *v56;
  int v57;
  std::vector<unsigned int>::size_type __sz[5];
  unint64_t *v59;
  uint64_t TypeName;
  __int128 v61;
  __int128 v62;
  unint64_t *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::vector<unsigned int> v69;
  const char *v70;
  char v71;

  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2348B1E64](&v64, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v64);
  }
  else
  {
    v64 = 3;
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v67 = 0;
    v68 = 0;
    v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v13 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0)
  {
    v14 = (unsigned int *)(__sz[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  v63 = 0;
  v61 = 0u;
  v62 = 0u;
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(a2, (uint64_t)__sz);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v61);
        v61 = *(_OWORD *)&__sz[1];
        v62 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        v63 = v59;
        v59 = 0;
        if ((_DWORD)v13)
          v13 = v13;
        else
          v13 = 4 * ((unint64_t)v61 > 1);
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_39;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_69:
    v32 = 0;
    goto LABEL_70;
  }
  realityio::getAttributeValue<unsigned int>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    if (DWORD2(v61))
    {
      v69.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v69.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v69.__end_cap_.__value_ = (unsigned int *)433;
      v70 = "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::emplace_back(Args &&...) [T = unsigned int, Ar"
            "gs = <unsigned int>]";
      v71 = 0;
      goto LABEL_93;
    }
    v20 = v61;
    if (!*((_QWORD *)&v62 + 1))
    {
      v21 = v63;
      if (!v63)
      {
        v23 = 0;
LABEL_33:
        if ((_QWORD)v61 != v23)
        {
          *((_DWORD *)v21 + v61) = 0;
          goto LABEL_35;
        }
        goto LABEL_85;
      }
      v22 = atomic_load(v63 - 2);
      if (v22 == 1)
      {
        v21 = v63;
        v23 = *(v63 - 1);
        goto LABEL_33;
      }
    }
LABEL_85:
    v51 = v63;
    v52 = 1;
    do
    {
      v53 = v52;
      v52 *= 2;
    }
    while (v53 < (uint64_t)v61 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew((uint64_t)&v61, v53);
    v47 = New;
    if (v20)
    {
      v55 = 4 * v20;
      v56 = New;
      do
      {
        v57 = *(_DWORD *)v51;
        v51 = (unint64_t *)((char *)v51 + 4);
        *(_DWORD *)v56 = v57;
        v56 = (unint64_t *)((char *)v56 + 4);
        v55 -= 4;
      }
      while (v55);
    }
    *((_DWORD *)New + v20) = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v61);
    goto LABEL_91;
  }
  if (DWORD2(v61))
  {
    v69.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v69.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v69.__end_cap_.__value_ = (unsigned int *)433;
    v70 = "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::emplace_back(Args &&...) [T = unsigned int, Args"
          " = <const unsigned int &>]";
    v71 = 0;
LABEL_93:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_36;
  }
  v16 = v61;
  if (*((_QWORD *)&v62 + 1))
    goto LABEL_79;
  v17 = v63;
  if (v63)
  {
    v18 = atomic_load(v63 - 2);
    if (v18 != 1)
      goto LABEL_79;
    v17 = v63;
    v19 = *(v63 - 1);
  }
  else
  {
    v19 = 0;
  }
  if ((_QWORD)v61 == v19)
  {
LABEL_79:
    v43 = v63;
    v44 = 1;
    do
    {
      v45 = v44;
      v44 *= 2;
    }
    while (v45 < (uint64_t)v61 + 1);
    v46 = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew((uint64_t)&v61, v45);
    v47 = v46;
    if (v16)
    {
      v48 = 4 * v16;
      v49 = v46;
      do
      {
        v50 = *(_DWORD *)v43;
        v43 = (unint64_t *)((char *)v43 + 4);
        *(_DWORD *)v49 = v50;
        v49 = (unint64_t *)((char *)v49 + 4);
        v48 -= 4;
      }
      while (v48);
    }
    *((_DWORD *)v46 + v16) = __sz[1];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v61);
LABEL_91:
    v63 = v47;
    goto LABEL_35;
  }
  *((_DWORD *)v17 + v61) = __sz[1];
LABEL_35:
  *(_QWORD *)&v61 = v61 + 1;
LABEL_36:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v59) < 0)
    operator delete((void *)__sz[3]);
LABEL_39:
  v24 = v63;
  if (!IsPrimvar)
    goto LABEL_53;
  memset(__sz, 0, sizeof(__sz));
  Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  v26 = Indices;
  if (Indices)
  {
    memset(&v69, 0, sizeof(v69));
    std::vector<int>::resize(&v69, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v27 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v28 = __sz[4] + 4 * __sz[0];
    if (v27 != (unsigned int *)v28)
    {
      begin = v69.__begin_;
      do
      {
        v30 = *v27++;
        *begin++ = v30;
      }
      while (v27 != (unsigned int *)v28);
    }
    if (!a3)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    v32 = REGeomModelDescriptorAddIndexedAttributeUInt32();
    if (v69.__begin_)
    {
      v69.__end_ = v69.__begin_;
      operator delete(v69.__begin_);
    }
  }
  else
  {
    v32 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v26 & 1) == 0)
  {
LABEL_53:
    IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if ((_DWORD)v13 == 4)
      v34 = 1;
    else
      v34 = IsArray;
    if ((v34 & 1) != 0
      || ((IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !(_DWORD)v13)
        ? (v36 = IsScalar)
        : (v36 = 0),
          v36 == 1))
    {
      if (!a3)
      {
        v37 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(_QWORD *)v37 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(_QWORD *)v37 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
        if (*(char *)(a3 + 23) < 0)
          a3 = *(_QWORD *)a3;
      }
      if ((MEMORY[0x2348B0AE4](a1, a3, v13, v61, v24) & 1) != 0)
      {
        v32 = 1;
        goto LABEL_70;
      }
    }
    goto LABEL_69;
  }
LABEL_70:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v61);
  if ((v68 & 7) != 0)
  {
    v38 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  if ((v67 & 7) != 0)
  {
    v40 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
  if (v65)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v65);
  return v32;
}

void sub_2300189A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!(_BYTE)a11 && a19 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a22);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a27);
  _Unwind_Resume(a1);
}

uint64_t realityio::convertAndAddAttributeToModelDescriptor<unsigned char,unsigned char>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int IsPrimvar;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  std::vector<unsigned int>::size_type v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  int Indices;
  char v26;
  unsigned int *v27;
  std::vector<unsigned int>::size_type v28;
  std::vector<unsigned int>::pointer begin;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v32;
  char IsArray;
  char v34;
  int IsScalar;
  int v36;
  pxrInternal__aapl__pxrReserved__::TfToken *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t *v49;
  char v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t *New;
  uint64_t v55;
  unint64_t *v56;
  char v57;
  std::vector<unsigned int>::size_type __sz[5];
  unint64_t *v59;
  uint64_t TypeName;
  __int128 v61;
  __int128 v62;
  unint64_t *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::vector<unsigned int> v69;
  const char *v70;
  char v71;

  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2348B1E64](&v64, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v64);
  }
  else
  {
    v64 = 3;
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v67 = 0;
    v68 = 0;
    v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v13 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0)
  {
    v14 = (unsigned int *)(__sz[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  v63 = 0;
  v61 = 0u;
  v62 = 0u;
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(a2, (uint64_t)__sz);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v61);
        v61 = *(_OWORD *)&__sz[1];
        v62 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        v63 = v59;
        v59 = 0;
        if ((_DWORD)v13)
          v13 = v13;
        else
          v13 = 4 * ((unint64_t)v61 > 1);
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_39;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_69:
    v32 = 0;
    goto LABEL_70;
  }
  realityio::getAttributeValue<unsigned char>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    if (DWORD2(v61))
    {
      v69.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v69.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v69.__end_cap_.__value_ = (unsigned int *)433;
      v70 = "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::emplace_back(Args &&...) [T = unsigned char, "
            "Args = <unsigned char>]";
      v71 = 0;
      goto LABEL_93;
    }
    v20 = v61;
    if (!*((_QWORD *)&v62 + 1))
    {
      v21 = v63;
      if (!v63)
      {
        v23 = 0;
LABEL_33:
        if ((_QWORD)v61 != v23)
        {
          *((_BYTE *)v21 + v61) = 0;
          goto LABEL_35;
        }
        goto LABEL_85;
      }
      v22 = atomic_load(v63 - 2);
      if (v22 == 1)
      {
        v21 = v63;
        v23 = *(v63 - 1);
        goto LABEL_33;
      }
    }
LABEL_85:
    v51 = v63;
    v52 = 1;
    do
    {
      v53 = v52;
      v52 *= 2;
    }
    while (v53 < (uint64_t)v61 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew((uint64_t)&v61, v53);
    v47 = New;
    if (v20)
    {
      v55 = v20;
      v56 = New;
      do
      {
        v57 = *(_BYTE *)v51;
        v51 = (unint64_t *)((char *)v51 + 1);
        *(_BYTE *)v56 = v57;
        v56 = (unint64_t *)((char *)v56 + 1);
        --v55;
      }
      while (v55);
    }
    *((_BYTE *)New + v20) = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v61);
    goto LABEL_91;
  }
  if (DWORD2(v61))
  {
    v69.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v69.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v69.__end_cap_.__value_ = (unsigned int *)433;
    v70 = "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::emplace_back(Args &&...) [T = unsigned char, Ar"
          "gs = <const unsigned char &>]";
    v71 = 0;
LABEL_93:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_36;
  }
  v16 = v61;
  if (*((_QWORD *)&v62 + 1))
    goto LABEL_79;
  v17 = v63;
  if (v63)
  {
    v18 = atomic_load(v63 - 2);
    if (v18 != 1)
      goto LABEL_79;
    v17 = v63;
    v19 = *(v63 - 1);
  }
  else
  {
    v19 = 0;
  }
  if ((_QWORD)v61 == v19)
  {
LABEL_79:
    v43 = v63;
    v44 = 1;
    do
    {
      v45 = v44;
      v44 *= 2;
    }
    while (v45 < (uint64_t)v61 + 1);
    v46 = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew((uint64_t)&v61, v45);
    v47 = v46;
    if (v16)
    {
      v48 = v16;
      v49 = v46;
      do
      {
        v50 = *(_BYTE *)v43;
        v43 = (unint64_t *)((char *)v43 + 1);
        *(_BYTE *)v49 = v50;
        v49 = (unint64_t *)((char *)v49 + 1);
        --v48;
      }
      while (v48);
    }
    *((_BYTE *)v46 + v16) = __sz[1];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v61);
LABEL_91:
    v63 = v47;
    goto LABEL_35;
  }
  *((_BYTE *)v17 + v61) = __sz[1];
LABEL_35:
  *(_QWORD *)&v61 = v61 + 1;
LABEL_36:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v59) < 0)
    operator delete((void *)__sz[3]);
LABEL_39:
  v24 = v63;
  if (!IsPrimvar)
    goto LABEL_53;
  memset(__sz, 0, sizeof(__sz));
  Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  v26 = Indices;
  if (Indices)
  {
    memset(&v69, 0, sizeof(v69));
    std::vector<int>::resize(&v69, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v27 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v28 = __sz[4] + 4 * __sz[0];
    if (v27 != (unsigned int *)v28)
    {
      begin = v69.__begin_;
      do
      {
        v30 = *v27++;
        *begin++ = v30;
      }
      while (v27 != (unsigned int *)v28);
    }
    if (!a3)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    v32 = REGeomModelDescriptorAddIndexedAttributeUInt8();
    if (v69.__begin_)
    {
      v69.__end_ = v69.__begin_;
      operator delete(v69.__begin_);
    }
  }
  else
  {
    v32 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v26 & 1) == 0)
  {
LABEL_53:
    IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if ((_DWORD)v13 == 4)
      v34 = 1;
    else
      v34 = IsArray;
    if ((v34 & 1) != 0
      || ((IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !(_DWORD)v13)
        ? (v36 = IsScalar)
        : (v36 = 0),
          v36 == 1))
    {
      if (!a3)
      {
        v37 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(_QWORD *)v37 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(_QWORD *)v37 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
        if (*(char *)(a3 + 23) < 0)
          a3 = *(_QWORD *)a3;
      }
      if ((MEMORY[0x2348B0AF0](a1, a3, v13, v61, v24) & 1) != 0)
      {
        v32 = 1;
        goto LABEL_70;
      }
    }
    goto LABEL_69;
  }
LABEL_70:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v61);
  if ((v68 & 7) != 0)
  {
    v38 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  if ((v67 & 7) != 0)
  {
    v40 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
  if (v65)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v65);
  return v32;
}

void sub_230019074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!(_BYTE)a11 && a19 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a22);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a27);
  _Unwind_Resume(a1);
}

uint64_t realityio::convertAndAddAttributeToModelDescriptor<float,float>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int IsPrimvar;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  std::vector<unsigned int>::size_type v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  int Indices;
  char v22;
  unsigned int *v23;
  std::vector<unsigned int>::size_type v24;
  std::vector<unsigned int>::pointer begin;
  unsigned int v26;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v28;
  char IsArray;
  char v30;
  int IsScalar;
  int v32;
  pxrInternal__aapl__pxrReserved__::TfToken *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *New;
  unint64_t *v43;
  uint64_t v44;
  unint64_t *v45;
  int v46;
  std::vector<unsigned int>::size_type __sz[5];
  unint64_t *v48;
  uint64_t TypeName;
  __int128 v50;
  __int128 v51;
  unint64_t *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::vector<unsigned int> v58;
  const char *v59;
  char v60;

  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2348B1E64](&v53, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v53);
  }
  else
  {
    v53 = 3;
    v54 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v56 = 0;
    v57 = 0;
    v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v13 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0)
  {
    v14 = (unsigned int *)(__sz[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  v52 = 0;
  v50 = 0u;
  v51 = 0u;
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a2, (uint64_t)__sz);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v50);
        v50 = *(_OWORD *)&__sz[1];
        v51 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        v52 = v48;
        v48 = 0;
        if ((_DWORD)v13)
          v13 = v13;
        else
          v13 = 4 * ((unint64_t)v50 > 1);
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_32;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_62:
    v28 = 0;
    goto LABEL_63;
  }
  realityio::getAttributeValue<float>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    LODWORD(v58.__begin_) = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<float>::emplace_back<float>((uint64_t)&v50, &v58);
    goto LABEL_29;
  }
  if (DWORD2(v50))
  {
    v58.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v58.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v58.__end_cap_.__value_ = (unsigned int *)433;
    v59 = "void pxrInternal__aapl__pxrReserved__::VtArray<float>::emplace_back(Args &&...) [T = float, Args = <const float &>]";
    v60 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_29;
  }
  v16 = v50;
  if (*((_QWORD *)&v51 + 1))
    goto LABEL_72;
  v17 = v52;
  if (v52)
  {
    v18 = atomic_load(v52 - 2);
    if (v18 != 1)
      goto LABEL_72;
    v17 = v52;
    v19 = *(v52 - 1);
  }
  else
  {
    v19 = 0;
  }
  if ((_QWORD)v50 == v19)
  {
LABEL_72:
    v39 = v52;
    v40 = 1;
    do
    {
      v41 = v40;
      v40 *= 2;
    }
    while (v41 < (uint64_t)v50 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)&v50, v41);
    v43 = New;
    if (v16)
    {
      v44 = 4 * v16;
      v45 = New;
      do
      {
        v46 = *(_DWORD *)v39;
        v39 = (unint64_t *)((char *)v39 + 4);
        *(_DWORD *)v45 = v46;
        v45 = (unint64_t *)((char *)v45 + 4);
        v44 -= 4;
      }
      while (v44);
    }
    *((_DWORD *)New + v16) = __sz[1];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v50);
    v52 = v43;
    goto LABEL_27;
  }
  *((_DWORD *)v17 + v50) = __sz[1];
LABEL_27:
  *(_QWORD *)&v50 = v50 + 1;
LABEL_29:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v48) < 0)
    operator delete((void *)__sz[3]);
LABEL_32:
  v20 = v52;
  if (!IsPrimvar)
    goto LABEL_46;
  memset(__sz, 0, sizeof(__sz));
  Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  v22 = Indices;
  if (Indices)
  {
    memset(&v58, 0, sizeof(v58));
    std::vector<int>::resize(&v58, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v23 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v24 = __sz[4] + 4 * __sz[0];
    if (v23 != (unsigned int *)v24)
    {
      begin = v58.__begin_;
      do
      {
        v26 = *v23++;
        *begin++ = v26;
      }
      while (v23 != (unsigned int *)v24);
    }
    if (!a3)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    v28 = REGeomModelDescriptorAddIndexedAttributeFloat();
    if (v58.__begin_)
    {
      v58.__end_ = v58.__begin_;
      operator delete(v58.__begin_);
    }
  }
  else
  {
    v28 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v22 & 1) == 0)
  {
LABEL_46:
    IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if ((_DWORD)v13 == 4)
      v30 = 1;
    else
      v30 = IsArray;
    if ((v30 & 1) != 0
      || ((IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !(_DWORD)v13)
        ? (v32 = IsScalar)
        : (v32 = 0),
          v32 == 1))
    {
      if (!a3)
      {
        v33 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(_QWORD *)v33 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(_QWORD *)v33 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
        if (*(char *)(a3 + 23) < 0)
          a3 = *(_QWORD *)a3;
      }
      if ((MEMORY[0x2348B0AB4](a1, a3, v13, v50, v20) & 1) != 0)
      {
        v28 = 1;
        goto LABEL_63;
      }
    }
    goto LABEL_62;
  }
LABEL_63:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v50);
  if ((v57 & 7) != 0)
  {
    v34 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if ((v56 & 7) != 0)
  {
    v36 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
  if (v54)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
  return v28;
}

void sub_230019644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!(_BYTE)a11 && a19 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a22);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a27);
  _Unwind_Resume(a1);
}

uint64_t realityio::convertAndAddAttributeToModelDescriptor<double,double>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int IsPrimvar;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  std::vector<unsigned int>::size_type v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int Indices;
  char v26;
  unsigned int *v27;
  std::vector<unsigned int>::size_type v28;
  std::vector<unsigned int>::pointer begin;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v32;
  char IsArray;
  char v34;
  int IsScalar;
  int v36;
  pxrInternal__aapl__pxrReserved__::TfToken *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *New;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::vector<unsigned int>::size_type __sz[5];
  _QWORD *v59;
  uint64_t TypeName;
  __int128 v61;
  __int128 v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::vector<unsigned int> v69;
  const char *v70;
  char v71;

  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2348B1E64](&v64, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v64);
  }
  else
  {
    v64 = 3;
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v67 = 0;
    v68 = 0;
    v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v13 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0)
  {
    v14 = (unsigned int *)(__sz[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  v63 = 0;
  v61 = 0u;
  v62 = 0u;
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(a2, (uint64_t)__sz);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v61);
        v61 = *(_OWORD *)&__sz[1];
        v62 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        v63 = v59;
        v59 = 0;
        if ((_DWORD)v13)
          v13 = v13;
        else
          v13 = 4 * ((unint64_t)v61 > 1);
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_39;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_69:
    v32 = 0;
    goto LABEL_70;
  }
  realityio::getAttributeValue<double>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    if (DWORD2(v61))
    {
      v69.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v69.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v69.__end_cap_.__value_ = (unsigned int *)433;
      v70 = "void pxrInternal__aapl__pxrReserved__::VtArray<double>::emplace_back(Args &&...) [T = double, Args = <double>]";
      v71 = 0;
      goto LABEL_93;
    }
    v20 = v61;
    if (!*((_QWORD *)&v62 + 1))
    {
      v21 = v63;
      if (!v63)
      {
        v23 = 0;
LABEL_33:
        if ((_QWORD)v61 != v23)
        {
          v21[(_QWORD)v61] = 0;
          goto LABEL_35;
        }
        goto LABEL_85;
      }
      v22 = atomic_load(v63 - 2);
      if (v22 == 1)
      {
        v21 = v63;
        v23 = *(v63 - 1);
        goto LABEL_33;
      }
    }
LABEL_85:
    v51 = v63;
    v52 = 1;
    do
    {
      v53 = v52;
      v52 *= 2;
    }
    while (v53 < (uint64_t)v61 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)&v61, v53);
    v47 = New;
    if (v20)
    {
      v55 = 8 * v20;
      v56 = New;
      do
      {
        v57 = *v51++;
        *v56++ = v57;
        v55 -= 8;
      }
      while (v55);
    }
    New[v20] = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v61);
    goto LABEL_91;
  }
  if (DWORD2(v61))
  {
    v69.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v69.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v69.__end_cap_.__value_ = (unsigned int *)433;
    v70 = "void pxrInternal__aapl__pxrReserved__::VtArray<double>::emplace_back(Args &&...) [T = double, Args = <const double &>]";
    v71 = 0;
LABEL_93:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_36;
  }
  v16 = v61;
  if (*((_QWORD *)&v62 + 1))
    goto LABEL_79;
  v17 = v63;
  if (v63)
  {
    v18 = atomic_load(v63 - 2);
    if (v18 != 1)
      goto LABEL_79;
    v17 = v63;
    v19 = *(v63 - 1);
  }
  else
  {
    v19 = 0;
  }
  if ((_QWORD)v61 == v19)
  {
LABEL_79:
    v43 = v63;
    v44 = 1;
    do
    {
      v45 = v44;
      v44 *= 2;
    }
    while (v45 < (uint64_t)v61 + 1);
    v46 = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)&v61, v45);
    v47 = v46;
    if (v16)
    {
      v48 = 8 * v16;
      v49 = v46;
      do
      {
        v50 = *v43++;
        *v49++ = v50;
        v48 -= 8;
      }
      while (v48);
    }
    v46[v16] = __sz[1];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v61);
LABEL_91:
    v63 = v47;
    goto LABEL_35;
  }
  v17[(_QWORD)v61] = __sz[1];
LABEL_35:
  *(_QWORD *)&v61 = v61 + 1;
LABEL_36:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v59) < 0)
    operator delete((void *)__sz[3]);
LABEL_39:
  v24 = v63;
  if (!IsPrimvar)
    goto LABEL_53;
  memset(__sz, 0, sizeof(__sz));
  Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  v26 = Indices;
  if (Indices)
  {
    memset(&v69, 0, sizeof(v69));
    std::vector<int>::resize(&v69, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v27 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v28 = __sz[4] + 4 * __sz[0];
    if (v27 != (unsigned int *)v28)
    {
      begin = v69.__begin_;
      do
      {
        v30 = *v27++;
        *begin++ = v30;
      }
      while (v27 != (unsigned int *)v28);
    }
    if (!a3)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    v32 = REGeomModelDescriptorAddIndexedAttributeDouble();
    if (v69.__begin_)
    {
      v69.__end_ = v69.__begin_;
      operator delete(v69.__begin_);
    }
  }
  else
  {
    v32 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v26 & 1) == 0)
  {
LABEL_53:
    IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if ((_DWORD)v13 == 4)
      v34 = 1;
    else
      v34 = IsArray;
    if ((v34 & 1) != 0
      || ((IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !(_DWORD)v13)
        ? (v36 = IsScalar)
        : (v36 = 0),
          v36 == 1))
    {
      if (!a3)
      {
        v37 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(_QWORD *)v37 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(_QWORD *)v37 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
        if (*(char *)(a3 + 23) < 0)
          a3 = *(_QWORD *)a3;
      }
      if ((MEMORY[0x2348B0AA8](a1, a3, v13, v61, v24) & 1) != 0)
      {
        v32 = 1;
        goto LABEL_70;
      }
    }
    goto LABEL_69;
  }
LABEL_70:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v61);
  if ((v68 & 7) != 0)
  {
    v38 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  if ((v67 & 7) != 0)
  {
    v40 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
  if (v65)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v65);
  return v32;
}

void sub_230019D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!(_BYTE)a11 && a19 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a22);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a27);
  _Unwind_Resume(a1);
}

void realityio::addSkeletonJointBindingsToModelDescriptor(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *a2, realityio *a3, const pxrInternal__aapl__pxrReserved__::UsdPrim *a4)
{
  uint64_t v4;
  const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v9;
  pxrInternal__aapl__pxrReserved__ *v10;
  int8x16_t *UsdPrimDefaultPredicate;
  uint64_t v12;
  int8x16_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  unsigned int v26;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  int ElementSize;
  uint64_t i;
  int v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  int *v41;
  std::vector<unsigned int>::pointer v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t j;
  std::vector<unsigned int>::pointer v51;
  const void *v52;
  int v53;
  unint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  realityio *v57;
  NSObject *v58;
  uint64_t Text;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  unint64_t k;
  char *v72;
  void *v73;
  int v74;
  _DWORD __sz[3];
  __int128 v76;
  __int128 v77;
  void *__src;
  __int128 v79;
  __int128 v80;
  int *v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  void *__dst;
  void *v98;
  uint64_t v99;
  std::vector<unsigned int> v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  std::vector<unsigned int> v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int8x16_t v112;
  uint64_t v113;
  _BYTE v114[32];
  unsigned int v115;
  unint64_t *v116;
  unsigned int *v117;
  unsigned int *v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125[8];
  std::__shared_weak_count *v126;
  uint8_t buf[24];
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a3 + 1);
  if (!v4
    || (*(_BYTE *)(v4 + 57) & 8) != 0
    || !(*(unsigned int (**)(realityio *))(*(_QWORD *)a3 + 32))(a3)
    || !realityio::isValidSkeleton(a3, v9))
  {
    return;
  }
  __sz[0] = REGeomModelDescriptorGetVertexCount();
  MEMORY[0x2348B1C0C](v125);
  pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Find();
  v122 = 0;
  v121 = 0u;
  v120 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v125, a3);
  if (v117)
  {
    MEMORY[0x2348B2290](v114);
    if (v124
      && (*(_BYTE *)(v124 + 57) & 8) == 0
      && (v10 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(uint64_t *))(v123 + 32))(&v123),
          (_DWORD)v10))
    {
      UsdPrimDefaultPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v10);
      v12 = UsdPrimDefaultPredicate[1].i64[0];
      v13.i64[0] = -8193;
      v13.i64[0] = vandq_s8(*UsdPrimDefaultPredicate, v13).u64[0];
      v13.i64[1] = vorrq_s8(*UsdPrimDefaultPredicate, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
      v112 = v13;
      v113 = v12;
      pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate();
      pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v125, a4);
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::operator=((uint64_t)v114, (uint64_t)&v107);
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)&v107);
    }
    else
    {
      v101 = v120;
      v102 = v121;
      *(_QWORD *)&v103 = v122;
      if (v122)
      {
        v14 = (unint64_t *)(v122 - 16);
        if (*((_QWORD *)&v102 + 1))
          v14 = (unint64_t *)*((_QWORD *)&v102 + 1);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesAttr(a2);
      pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsAttr(a2);
      pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointsAttr(a2);
      *(_QWORD *)&v95 = 0;
      v93 = 0u;
      v94 = 0u;
      LODWORD(v79) = 3;
      *((_QWORD *)&v79 + 1) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      *((_QWORD *)&v80 + 1) = 0;
      LODWORD(v76) = 3;
      *((_QWORD *)&v76 + 1) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      *((_QWORD *)&v77 + 1) = 0;
      LODWORD(v105.__begin_) = 4;
      v105.__end_ = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v106 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery();
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::operator=((uint64_t)v114, (uint64_t)&v107);
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)&v107);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v105.__end_cap_);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v77);
      if ((BYTE8(v80) & 7) != 0)
      {
        v16 = (unsigned int *)(*((_QWORD *)&v80 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v80);
      if (*((_QWORD *)&v79 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v79 + 1));
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v93);
      if ((BYTE8(v83) & 7) != 0)
      {
        v18 = (unsigned int *)(*((_QWORD *)&v83 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
      if (*((_QWORD *)&v82 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v82 + 1));
      if ((v87 & 7) != 0)
      {
        v20 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v86);
      if (*((_QWORD *)&v85 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v85 + 1));
      if ((v92 & 7) != 0)
      {
        v22 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v91);
      if (v90)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v90);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v101);
    }
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v114) & 1) == 0)
      goto LABEL_107;
    v24 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    v101 = *MEMORY[0x24BDAEE00];
    v102 = v24;
    v25 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    v103 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
    v104 = v25;
    memset(&v105, 0, sizeof(v105));
    memset(&v100, 0, sizeof(v100));
    __dst = 0;
    v98 = 0;
    v99 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform();
    MEMORY[0x2348B199C](&v93, &v107);
    v101 = v93;
    v102 = v94;
    v103 = v95;
    v104 = v96;
    v26 = v115;
    std::vector<int>::resize(&v105, __sz[0]);
    begin = v105.__begin_;
    end = v105.__end_;
    if (v105.__begin_ != v105.__end_)
    {
      v29 = v26;
      do
      {
        *begin++ = v29;
        v29 += v26;
      }
      while (begin != end);
    }
    v30 = v116;
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)&v117);
    v31 = v89;
    v107 = 3;
    v108 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v110 = 0;
    v111 = 0;
    LODWORD(v93) = 3;
    *((_QWORD *)&v93 + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *((_QWORD *)&v94 + 1) = 0;
    *(_QWORD *)&v95 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::HasJointInfluences((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)v114))
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=();
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=();
      ElementSize = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v107);
    }
    else
    {
      ElementSize = 0;
    }
    if (!v31
      || pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()
      && ElementSize != pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v93))
    {
LABEL_85:
      if ((v95 & 7) != 0)
      {
        v60 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((BYTE8(v94) & 7) != 0)
      {
        v62 = (unsigned int *)(*((_QWORD *)&v94 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v94);
      if (*((_QWORD *)&v93 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v93 + 1));
      if ((v111 & 7) != 0)
      {
        v64 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((v110 & 7) != 0)
      {
        v66 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v109);
      if (v108)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v108);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v89);
      if (__dst)
      {
        v98 = __dst;
        operator delete(__dst);
      }
      if (v100.__begin_)
      {
        v100.__end_ = v100.__begin_;
        operator delete(v100.__begin_);
      }
      if (v105.__begin_)
      {
        v105.__end_ = v105.__begin_;
        operator delete(v105.__begin_);
      }
LABEL_107:
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)v114);
      goto LABEL_108;
    }
    pxrInternal__aapl__pxrReserved__::VtArray<int>::VtArray((uint64_t)&v85, v31);
    for (i = 0; i != v31; ++i)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v85);
      *(_DWORD *)(v88 + 4 * i) = i;
    }
    v84 = 0;
    v82 = 0u;
    v83 = 0u;
    if (v30)
      pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap<pxrInternal__aapl__pxrReserved__::VtArray<int>>(v30, (uint64_t)&v85, (unint64_t *)&v82);
    else
      pxrInternal__aapl__pxrReserved__::VtArray<int>::operator=((uint64_t)&v82, &v85);
    v81 = 0;
    v79 = 0u;
    v80 = 0u;
    if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()
      && pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>())
    {
      v34 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v107);
      if ((_QWORD)v79 != v34 * __sz[0])
      {
LABEL_84:
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v79);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v82);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v85);
        goto LABEL_85;
      }
      v35 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v107);
      std::vector<int>::resize(&v100, (v35 * __sz[0]));
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v107);
      MEMORY[0x2348B274C](buf, "constant");
      v36 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
      if ((buf[0] & 7) != 0)
      {
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
        v38 = v76;
      }
      else
      {
        v38 = v76;
      }
      if ((v38 & 7) != 0)
      {
        v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8) == v36)
      {
        for (j = 0;
              j < pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v107)
                * __sz[0];
              j += (int)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v107))
        {
          v51 = v100.__begin_;
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v79);
          v52 = v81;
          v53 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v107);
          memcpy(&v51[j], v52, 4 * v53);
        }
      }
      else if ((_QWORD)v79)
      {
        v41 = v81;
        v42 = v100.__begin_;
        v43 = 4 * v79;
        do
        {
          v44 = *v41;
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v82);
          *v42++ = *(_DWORD *)(v84 + 4 * v44);
          ++v41;
          v43 -= 4;
        }
        while (v43);
      }
    }
    __src = 0;
    v76 = 0u;
    v77 = 0u;
    if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()
      && pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>())
    {
      if ((_QWORD)v76 != pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v93)
                        * __sz[0])
      {
LABEL_83:
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v76);
        goto LABEL_84;
      }
      v45 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v93);
      std::vector<float>::resize((uint64_t)&__dst, (v45 * __sz[0]));
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v93);
      MEMORY[0x2348B274C](&__sz[1], "constant");
      v46 = *(_QWORD *)buf;
      v47 = (unsigned int *)(*(_QWORD *)&__sz[1] & 0xFFFFFFFFFFFFFFF8);
      if ((__sz[1] & 7) != 0)
      {
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
        v49 = *(_QWORD *)buf;
      }
      else
      {
        v49 = *(_QWORD *)buf;
      }
      v54 = v46 & 0xFFFFFFFFFFFFFFF8;
      if ((v49 & 7) != 0)
      {
        v55 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      if ((unsigned int *)v54 == v47)
      {
        for (k = 0;
              k < pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v93)
                * __sz[0];
              k += (int)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v93))
        {
          v72 = (char *)__dst;
          pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v76);
          v73 = __src;
          v74 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v93);
          memcpy(&v72[4 * k], v73, 4 * v74);
        }
      }
      else if ((_QWORD)v76)
      {
        memmove(__dst, __src, 4 * v76);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(a3, buf);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
    REGeomModelDescriptorAddSkinningData();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
    v57 = (realityio *)MEMORY[0x2348B0B14](a1, "skinnedAnimationGeometryBindTransform", 4, 4, &v101);
    if ((v57 & 1) == 0)
    {
      v58 = *(NSObject **)(realityio::logObjects(v57) + 24);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a4, &__sz[1]);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__sz[1]);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = Text;
        _os_log_impl(&dword_22FF26000, v58, OS_LOG_TYPE_DEFAULT, "Did not add bind transforms for (Prim \"%s\")", buf, 0xCu);
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__sz[1]);
      }
    }
    goto LABEL_83;
  }
LABEL_108:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v119);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr(&v118);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::~TfRefPtr(&v117);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v120);
  MEMORY[0x2348B1B1C](&v123);
  v68 = v126;
  if (v126)
  {
    p_shared_owners = (unint64_t *)&v126->__shared_owners_;
    do
      v70 = __ldaxr(p_shared_owners);
    while (__stlxr(v70 - 1, p_shared_owners));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
}

void sub_23001A900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  uint64_t a66;
  char a69;
  uint64_t v69;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;

  v71 = *(_QWORD *)(v69 - 128);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a15);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a27);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a33);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a43);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a69);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&a38);
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)&STACK[0x390]);
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::~UsdSkelSkeletonQuery((unsigned int **)&STACK[0x520]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((_QWORD *)(v69 - 208));
  MEMORY[0x2348B1B1C](v69 - 168);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v69 - 144);
  _Unwind_Resume(a1);
}

uint64_t realityio::isValidSkeleton(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2)
{
  uint64_t NumElements;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  _BYTE v10[32];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[8];
  uint64_t v18;
  _BYTE v19[8];
  uint64_t v20;
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointsAttr(this);
  v22 = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
    && (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)v21) & 1) != 0
    && (NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v21)) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetBindTransformsAttr(this);
    v20 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
      && pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v19) == NumElements
      && (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)v19) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr(this);
      v18 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
        && pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v17) == NumElements)
      {
        v4 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
      }
      else
      {
        v4 = 0;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v10);
    }
    else
    {
      v4 = 0;
    }
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
    if ((v13 & 7) != 0)
    {
      v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
    if (v11)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  }
  else
  {
    v4 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v21);
  if ((v16 & 7) != 0)
  {
    v5 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if (v14)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
  return v4;
}

void sub_23001AD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v6 - 56));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v6 - 40));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 16, (int *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 20);
  if (a2 != a1)
  {
    v6 = *(_QWORD *)(a1 + 24);
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    if ((v9 & 7) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=();
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  v12 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  v13 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v12;
  if (v13)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 160, (int *)(a2 + 160));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 164);
  if (a2 != a1)
  {
    v14 = *(_QWORD *)(a1 + 168);
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
  }
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  v17 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  v18 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v17;
  if (v18)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 192, (int *)(a2 + 192));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 196);
  if (a2 != a1)
  {
    v19 = *(_QWORD *)(a1 + 200);
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a2 + 200) = 0;
  }
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  v22 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  v23 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v22;
  if (v23)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v23);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 224, (int *)(a2 + 224));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 228);
  if (a2 != a1)
  {
    v24 = *(_QWORD *)(a1 + 232);
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a2 + 232) = 0;
  }
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  v27 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  v28 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v27;
  if (v28)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v28);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 256, (int *)(a2 + 256));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 260);
  if (a2 != a1)
  {
    v29 = *(_QWORD *)(a1 + 264);
    if ((v29 & 7) != 0)
    {
      v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a2 + 264) = 0;
  }
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](a1 + 272, (__int128 *)(a2 + 272));
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](a1 + 288, (__int128 *)(a2 + 288));
  std::__optional_storage_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>>(a1 + 304, a2 + 304);
  std::__optional_storage_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>>(a1 + 352, a2 + 352);
  return a1;
}

void std::vector<int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap<pxrInternal__aapl__pxrReserved__::VtArray<int>>(unint64_t *a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unsigned int v15;
  _DWORD *v16[4];
  char v17;
  int v18;

  if (a3)
  {
    v6 = *a1;
    if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsIdentity((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)a1)
      && *(_QWORD *)a2 == v6)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<int>::operator=((uint64_t)a3, (__int128 *)a2);
    }
    else
    {
      v7 = *a3;
      v18 = 0;
      v16[0] = &v18;
      pxrInternal__aapl__pxrReserved__::VtArray<int>::resize<pxrInternal__aapl__pxrReserved__::VtArray<int>::assign(unsigned long,int const&)::_Filler>(a3, v6, v16);
      pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      if (v6 > v7)
        bzero((void *)(a3[4] + 4 * v7), 4 * (v6 - v7));
      if ((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)a1) & 1) == 0)
      {
        if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_IsOrdered((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)a1))
        {
          if (v6 - a1[1] >= *(_QWORD *)a2)
            v8 = *(_QWORD *)a2;
          else
            v8 = v6 - a1[1];
          v9 = *(const void **)(a2 + 32);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
          if (v8)
            memmove((void *)(a3[4] + 4 * a1[1]), v9, 4 * v8);
        }
        else
        {
          v10 = *(_DWORD **)(a2 + 32);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
          v11 = *(_QWORD *)a2;
          if (a1[2] < *(_QWORD *)a2)
            v11 = a1[2];
          if (v11)
          {
            v12 = a3[4];
            v13 = (unsigned int *)a1[6];
            do
            {
              v15 = *v13++;
              v14 = v15;
              if ((v15 & 0x80000000) == 0 && *a3 > v14)
                *(_DWORD *)(v12 + 4 * v14) = *v10;
              ++v10;
              --v11;
            }
            while (v11);
          }
        }
      }
    }
  }
  else
  {
    v16[0] = "usdSkel/animMapper.h";
    v16[1] = "Remap";
    v16[2] = (_DWORD *)204;
    v16[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const "
             "typename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<int>]";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<int>::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v9);
  }
  return a1;
}

void sub_23001B2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 4);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 3);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v8 = *((_QWORD *)this + 1);
  if (v8)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
}

void realityio::makeValueLookupByIndex(_QWORD *a1, std::vector<unsigned int>::size_type __sz, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, std::vector<unsigned int> *a8)
{
  std::vector<unsigned int> *v10;
  uint64_t v11;
  std::vector<unsigned int>::size_type v12;
  uint64_t v13;
  std::vector<unsigned int>::pointer v14;
  uint64_t v15;
  std::vector<unsigned int>::size_type v16;
  uint64_t v17;
  std::vector<unsigned int>::pointer v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer v23;
  std::vector<unsigned int> *v24;
  std::vector<unsigned int>::value_type __x;
  std::vector<unsigned int> v26;

  memset(&v26, 0, sizeof(v26));
  v10 = a8;
  if (!a8)
  {
    switch(a7)
    {
      case 0:
        __x = 0;
        std::vector<unsigned int>::resize(&v26, 1uLL, &__x);
        break;
      case 1:
        v19 = __sz;
        v20 = __sz;
        std::vector<int>::resize(&v26, __sz);
        if (v19)
        {
          v21 = 0;
          begin = v26.__begin_;
          do
          {
            begin[v21] = v21;
            ++v21;
          }
          while (v20 != v21);
        }
        break;
      case 2:
        v11 = a4 - a3;
        v12 = ((unint64_t)(a4 - a3) >> 2);
        std::vector<int>::resize(&v26, v12);
        if ((v11 & 0x3FFFFFFFCLL) != 0)
        {
          v13 = 0;
          v14 = v26.__begin_;
          do
          {
            v14[v13] = v13;
            ++v13;
          }
          while (v12 != v13);
        }
        break;
      case 3:
        v15 = a6 - a5;
        v16 = ((unint64_t)(a6 - a5) >> 2);
        std::vector<int>::resize(&v26, v16);
        if ((v15 & 0x3FFFFFFFCLL) != 0)
        {
          v17 = 0;
          v18 = v26.__begin_;
          do
          {
            v18[v17] = v17;
            ++v17;
          }
          while (v16 != v17);
        }
        break;
      default:
        break;
    }
    v10 = &v26;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v23 = v10->__begin_;
  v24 = &v26;
  if (a8)
    v24 = a8;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, v23, (uint64_t)v24->__end_, v24->__end_ - v23);
  if (v26.__begin_)
  {
    v26.__end_ = v26.__begin_;
    operator delete(v26.__begin_);
  }
}

void sub_23001B4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::size_type v3;

  v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v3, __x);
  }
}

void realityio::makeFaceVertexIndexList(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type a2, uint64_t *a3, uint64_t *a4, int a5, void **a6)
{
  void **v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::vector<unsigned int>::size_type v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::vector<unsigned int>::pointer v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  std::vector<unsigned int>::pointer begin;
  void *__p;
  _BYTE *v29;
  void *v30;
  void *v31;
  uint64_t v32;

  v6 = a6;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v12 = *a3;
  v11 = a3[1];
  if (!a6)
  {
    realityio::makeValueLookupByIndex(&__p, a2, *a3, v11, *a4, a4[1], a5, 0);
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v30, (char *)__p, (uint64_t)v29, (v29 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v29 = __p;
      operator delete(__p);
    }
    v6 = &v30;
  }
  v14 = *a4;
  v13 = a4[1];
  v15 = (v13 - *a4) >> 2;
  LODWORD(__p) = 0;
  std::vector<unsigned int>::vector(this, v15, (const std::vector<unsigned int>::value_type *)&__p);
  if (a5 == 1)
  {
    if (v13 != v14)
    {
      v24 = 0;
      v25 = *a4;
      v26 = (char *)*v6;
      begin = this->__begin_;
      do
      {
        begin[v24] = *(_DWORD *)&v26[4 * *(unsigned int *)(v25 + 4 * v24)];
        ++v24;
      }
      while (v15 > v24);
    }
  }
  else if (a5 == 3)
  {
    if (v6 != (void **)this)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)this, (char *)*v6, (uint64_t)v6[1], ((_BYTE *)v6[1] - (_BYTE *)*v6) >> 2);
  }
  else if (a5 == 2 && ((v11 - v12) & 0x3FFFFFFFCLL) != 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = *a3;
    v19 = this->__begin_;
    do
    {
      v20 = *(unsigned int *)(v18 + 4 * v16);
      if (v17 < v20)
      {
        v21 = (char *)*v6;
        v22 = v20 - v17;
        v23 = &v19[v17];
        do
        {
          *v23++ = *(_DWORD *)&v21[4 * v16];
          --v22;
        }
        while (v22);
        v17 = v20;
      }
      ++v16;
    }
    while (v16 != ((unint64_t)(v11 - v12) >> 2));
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
}

void sub_23001B6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL realityio::isCatmullClarkSurface(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdGeomMesh *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *Data;
  unsigned int *v3;
  _BOOL8 v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  _BYTE v9[8];
  uint64_t v10;
  void *__p;
  char v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetSubdivisionSchemeAttr(this);
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)v13, (uint64_t)v9);
  if (v9[0])
  {
    Data = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    v4 = (v10 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 12) & 0xFFFFFFFFFFFFFFF8);
    if (v9[0])
    {
      if ((v10 & 7) != 0)
      {
        do
          v5 = __ldxr(v3);
        while (__stlxr(v5 - 2, v3));
      }
      goto LABEL_11;
    }
  }
  else
  {
    v4 = 0;
  }
  if (v12 < 0)
    operator delete(__p);
LABEL_11:
  if ((v16 & 7) != 0)
  {
    v6 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if (v14)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
  return v4;
}

void sub_23001B818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::DetailedError>::~Result((uint64_t)&a9);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a15);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_23001B9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::getBoundSubsetsAndCoverage(uint64_t a1, void **a2, BOOL *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v5;
  char IsA;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *v9;
  unint64_t NumElements;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v18;
  uint64_t v19;
  int *v20;
  int *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int *v28;
  unsigned int v29;
  char *v30;
  char *v31;
  void *v32;
  char *v33;
  char *v34;
  void (**v35)(char *);
  BOOL v36;
  unsigned int *v37;
  unsigned int v38;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  char v45[8];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *__p;
  unint64_t v50;
  uint64_t v51;
  char v52[8];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  void *v57;
  _QWORD v58[4];
  char v59[8];
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v40, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v5);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((v43 & 7) != 0)
  {
    v7 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
  if (v41)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v41);
  if ((IsA & 1) == 0)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v58[3] = 0;
  v58[0] = MEMORY[0x24BEE9DC8] + 16;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets(v9);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v40 = (void **)(MEMORY[0x24BEE9CF0] + 16);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v40);
  MEMORY[0x2348B1AF8](&v40);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v52)
    && (_QWORD)v56 != *((_QWORD *)&v56 + 1))
  {
    v60 = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v59);
    *a3 = 0;
    __p = 0;
    v50 = 0;
    v51 = 0;
    if (!NumElements)
    {
LABEL_21:
      v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)*((_QWORD *)&v56 + 1);
      v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v56;
      if ((_QWORD)v56 != *((_QWORD *)&v56 + 1))
      {
        v19 = 0;
        while (1)
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(v17);
          realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v45, (uint64_t)&v40);
          if ((_BYTE)v40)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v41);
            v20 = v44;
            pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v41);
            v21 = &v44[v41];
            if (v20 == v21)
            {
LABEL_30:
              v27 = 1;
              goto LABEL_32;
            }
            v22 = __p;
            while (1)
            {
              v23 = *v20;
              if ((v23 & 0x80000000) != 0)
                break;
              if (NumElements <= v23)
                break;
              v24 = v23 >> 6;
              v25 = 1 << v23;
              v26 = v22[v24];
              if ((v26 & v25) != 0)
                break;
              v22[v24] = v26 | v25;
              ++v19;
              if (++v20 == v21)
                goto LABEL_30;
            }
          }
          v27 = 0;
LABEL_32:
          realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)&v40);
          if ((v48 & 7) != 0)
          {
            v28 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
            do
              v29 = __ldxr(v28);
            while (__stlxr(v29 - 2, v28));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
          if (v46)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
          if ((v27 & 1) == 0)
          {
            v14 = 0;
            goto LABEL_50;
          }
          v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)((char *)v17 + 24);
          if (v17 == v18)
            goto LABEL_41;
        }
      }
      v19 = 0;
LABEL_41:
      *a3 = v19 == NumElements;
      v30 = (char *)*a2;
      if (*a2)
      {
        v31 = (char *)a2[1];
        v32 = *a2;
        if (v31 != v30)
        {
          v33 = v31 - 24;
          v34 = v31 - 24;
          do
          {
            v35 = *(void (***)(char *))v34;
            v34 -= 24;
            (*v35)(v33);
            v36 = v33 == v30;
            v33 = v34;
          }
          while (!v36);
          v32 = *a2;
        }
        a2[1] = v30;
        operator delete(v32);
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      *(_OWORD *)a2 = v56;
      a2[2] = v57;
      v57 = 0;
      v56 = 0uLL;
      v14 = 1;
LABEL_50:
      if (__p)
        operator delete(__p);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v59);
      goto LABEL_53;
    }
    std::vector<BOOL>::__vallocate[abi:ne180100](&__p, NumElements);
    v11 = v50;
    v12 = v50 + NumElements;
    v50 += NumElements;
    if (v11)
    {
      v13 = v12 - 1;
      if (((v12 - 1) ^ (v11 - 1)) < 0x40)
      {
LABEL_20:
        v40 = (void **)((char *)__p + 8 * (v11 >> 6));
        LODWORD(v41) = v11 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v40, NumElements);
        goto LABEL_21;
      }
    }
    else
    {
      v13 = v12 - 1;
    }
    v15 = v13 >> 6;
    if (v12 >= 0x41)
      v16 = v15;
    else
      v16 = 0;
    *((_QWORD *)__p + v16) = 0;
    goto LABEL_20;
  }
  v14 = 0;
LABEL_53:
  if ((v55 & 7) != 0)
  {
    v37 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  if (v53)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  v40 = (void **)&v56;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](&v40);
  MEMORY[0x2348B24C4](v58);
  return v14;
}

void sub_23001BE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v27 - 112));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a23);
  a23 = &a27;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  MEMORY[0x2348B24C4](v27 - 144);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_23001C060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::addOpenSubdivDataToModelDescriptor(uint64_t a1, realityio *this)
{
  uint64_t result;
  unsigned int VertexCount;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  std::vector<unsigned int>::pointer begin;
  int v25;
  _DWORD *v26;
  unsigned int v27;
  char v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  void *__p;
  _BYTE *v44;
  std::vector<unsigned int> v45;
  char v46[8];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[8];
  _QWORD v52[4];
  uint64_t v53;
  char v54[8];
  _QWORD v55[4];
  _DWORD *v56;
  char v57[8];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61[8];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65[8];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  result = realityio::isCatmullClarkSurface(this, this);
  if ((_DWORD)result)
  {
    VertexCount = REGeomModelDescriptorGetVertexCount();
    REGeomModelDescriptorSetSurfaceType();
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseIndicesAttr(this);
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseLengthsAttr(this);
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseSharpnessesAttr(this);
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v65, (uint64_t)v54);
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v61, (uint64_t)v51);
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v57, (uint64_t)v46);
    if (v54[0] && v51[0] && v46[0] && v47 && v47 == v52[0])
    {
      pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v52);
      v6 = v53;
      v7 = v52[0];
      if (v52[0])
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 1;
        while (1)
        {
          v12 = *(_DWORD *)(v53 + 4 * v8);
          if (v12 < 2)
            break;
          v10 += v12;
          v9 = v9 + v12 - 1;
          v8 = v11;
          if (v52[0] <= (unint64_t)v11++)
            goto LABEL_13;
        }
      }
      else
      {
        v10 = 0;
        v9 = 0;
LABEL_13:
        if (v55[0] == v10)
        {
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v55);
          v14 = v56;
          pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v47);
          v15 = v50;
          std::vector<unsigned int>::vector(&v45, 2 * v9);
          std::vector<float>::vector(&__p, v9);
          if (v7)
          {
            v16 = 0;
            v17 = 0;
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *(_DWORD *)(v6 + 4 * v16);
              v22 = v21 - 1;
              if (v21 != 1)
              {
                v23 = *(_DWORD *)(v15 + 4 * v16);
                begin = v45.__begin_;
                v25 = v22 + v18;
                v26 = __p;
                while (1)
                {
                  v27 = v14[v19];
                  v21 = v27 < VertexCount;
                  if (v27 >= VertexCount)
                    break;
                  begin[v17] = v27;
                  begin[v17 + 1] = v14[++v19];
                  v26[v18++] = v23;
                  v17 += 2;
                  if (!--v22)
                  {
                    v18 = v25;
                    break;
                  }
                }
              }
              if (v14[v19] >= VertexCount)
                break;
              ++v19;
              v16 = (v20 + 1);
              if (v7 > v16)
                v28 = v21;
              else
                v28 = 0;
              ++v20;
              if ((v28 & 1) == 0)
              {
                if (!v21)
                  break;
                goto LABEL_27;
              }
            }
          }
          else
          {
LABEL_27:
            MEMORY[0x2348B0AE4](a1, "osdEdgeCreaseIndices", 4, (unint64_t)((char *)v45.__end_ - (char *)v45.__begin_) >> 2);
            MEMORY[0x2348B0AB4](a1, "osdEdgeCreaseWeights", 4, (unint64_t)(v44 - (_BYTE *)__p) >> 2);
          }
          if (__p)
          {
            v44 = __p;
            operator delete(__p);
          }
          if (v45.__begin_)
          {
            v45.__end_ = v45.__begin_;
            operator delete(v45.__begin_);
          }
        }
      }
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)v46);
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v51);
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v54);
    if ((v60 & 7) != 0)
    {
      v29 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
    if (v58)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v58);
    if ((v64 & 7) != 0)
    {
      v31 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
    if (v62)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62);
    if ((v68 & 7) != 0)
    {
      v33 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v67);
    if (v66)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v66);
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCornerIndicesAttr(this);
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCornerSharpnessesAttr(this);
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v46, (uint64_t)v54);
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v65, (uint64_t)v51);
    if (v54[0] && v51[0] && v55[0] && v55[0] == v52[0])
    {
      pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v55);
      if (v55[0])
      {
        v35 = v55[0];
        v36 = v56;
        while (1)
        {
          v37 = *v36++;
          if (v37 >= VertexCount)
            break;
          if (!--v35)
            goto LABEL_55;
        }
      }
      else
      {
LABEL_55:
        MEMORY[0x2348B0AE4](a1, "osdVertexCreaseIndices", 4);
        v38 = v52[0];
        pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v52);
        MEMORY[0x2348B0AB4](a1, "osdVertexCreaseWeights", 4, v38, v53);
      }
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)v51);
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v54);
    if ((v68 & 7) != 0)
    {
      v39 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stlxr(v40 - 2, v39));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v67);
    if (v66)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v66);
    if ((v49 & 7) != 0)
    {
      v41 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stlxr(v42 - 2, v41));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
    result = v47;
    if (v47)
      return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v47);
  }
  return result;
}

void sub_23001C554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)&a15);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)&a21);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)&a27);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v27 - 176));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v27 - 144));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v27 - 112));
  _Unwind_Resume(a1);
}

void sub_23001C63C()
{
  JUMPOUT(0x23001C62CLL);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_23001C7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_23001C980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(_QWORD *a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = (uint64_t)&v4[-*a1] >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v20 = &v3[16 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 4)
  {
    bzero(v4, 16 * v6);
    v20 = &v4[16 * v6];
LABEL_17:
    a1[1] = v20;
    return;
  }
  if (a2 >> 60)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v9 = v8 - (_QWORD)v3;
  v10 = v9 >> 3;
  if (v9 >> 3 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v7, v11);
  v13 = &v12[16 * v5];
  v15 = &v12[16 * v14];
  bzero(v13, 16 * v6);
  v16 = &v13[16 * v6];
  v18 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      v19 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *((_OWORD *)v13 - 1) = v19;
      v13 -= 16;
    }
    while (v17 != v18);
    v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
    operator delete(v17);
}

__n128 realityio::getGeomPrimitiveOrientation(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCone *IsValid;
  uint64_t IsA;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  int8x16_t v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  char v23[8];
  unsigned int *v24;
  void *__p;
  char v26;

  v19 = xmmword_230204CF0;
  IsValid = (pxrInternal__aapl__pxrReserved__::UsdGeomCone *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
  if (!(_DWORD)IsValid)
    return (__n128)v19;
  pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(IsValid);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((IsA & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)IsA);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    v5 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((v5 & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)v5);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
        return (__n128)v19;
    }
  }
  MEMORY[0x2348B274C](&v21, "axis");
  MEMORY[0x2348B274C](&v20, "Z");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, (uint64_t)v23);
  if (v23[0])
  {
    v22 = v24;
    if ((v24 & 7) != 0)
    {
      v6 = (unsigned int *)((unint64_t)v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      goto LABEL_13;
    }
  }
  else
  {
    v22 = v20;
    if ((v20 & 7) != 0)
    {
      v6 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
LABEL_13:
      if ((v7 & 1) == 0)
        v22 = v6;
    }
  }
  if (v23[0])
  {
    if ((v24 & 7) != 0)
    {
      v8 = (unsigned int *)((unint64_t)v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
  }
  else if (v26 < 0)
  {
    operator delete(__p);
  }
  if ((v20 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if ((v21 & 7) != 0)
  {
    v12 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) != 0)
  {
    v14 = (int8x16_t)xmmword_23020CF60;
  }
  else
  {
    if (pxrInternal__aapl__pxrReserved__::TfToken::operator==())
      v15 = -1;
    else
      v15 = 0;
    v14 = vbslq_s8((int8x16_t)vdupq_n_s32(v15), (int8x16_t)xmmword_23020CF70, (int8x16_t)xmmword_230204CF0);
  }
  v19 = (__int128)v14;
  if ((v22 & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  return (__n128)v19;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCylinder>(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

pxrInternal__aapl__pxrReserved__::UsdGeomGprim *realityio::createGeomModelDescriptorWithPrimitivePrim@<X0>(realityio *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, __int16 a3@<W3>, __int16 a4@<W4>, __int16 a5@<W5>, uint64_t *a6@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim *result;
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere *IsA;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *Data;
  float v14;
  pxrInternal__aapl__pxrReserved__::UsdGeomCone *v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v16;
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *v17;
  unint64_t *v18;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v19;
  uint64_t v20;
  unint64_t *v21;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v22;
  float AttributeValueWithDefault;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v24;
  float v25;
  float v26;
  unint64_t *v27;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v28;
  float v29;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v30;
  float v31;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  __int128 v49;
  void *__p;
  void *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  unsigned int *v55;
  char v56[8];
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  _OWORD v64[2];
  _BYTE v65[40];
  unsigned int *v66;

  *a6 = 0;
  result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
  if (!(_DWORD)result)
    return result;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(result);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (!(_DWORD)result)
    return result;
  pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(result);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((_DWORD)IsA)
  {
    Data = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    realityio::getAttributeValue<float>(this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)Data + 1008), (uint64_t)v65);
    if (v65[0])
    {
      v14 = *(float *)&v65[8];
    }
    else
    {
      v14 = 2.0;
      if (SHIBYTE(v66) < 0)
        operator delete(*(void **)&v65[24]);
    }
    memset(v65, 0, 28);
    REGeomBuildBoxDefaultOptions();
    *(float *)&v65[12] = v14;
    *(float *)&v65[16] = v14;
    *(float *)&v65[20] = v14;
    v64[0] = *(_OWORD *)v65;
    *(_OWORD *)((char *)v64 + 12) = *(_OWORD *)&v65[12];
    v20 = REGeomModelDescriptorCreateFromBoxOptions();
LABEL_44:
    v33 = v20;
    goto LABEL_45;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(IsA);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomCone *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((_DWORD)v15)
  {
    REGeomBuildSphereDefaultOptions();
    v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
    if (!v16)
      v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    realityio::getAttributeValue<float>(this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v16 + 920), (uint64_t)v65);
    if (!v65[0] && SHIBYTE(v66) < 0)
      operator delete(*(void **)&v65[24]);
    v20 = REGeomModelDescriptorCreateFromSphereOptions();
    goto LABEL_44;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(v15);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((_DWORD)v17)
  {
    v18 = (unint64_t *)MEMORY[0x24BEE7FE8];
    v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
    if (!v19)
      v19 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    realityio::getAttributeValue<float>(this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v19 + 920), (uint64_t)v65);
    if (!v65[0] && SHIBYTE(v66) < 0)
      operator delete(*(void **)&v65[24]);
    v32 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v18);
    if (!v32)
      v32 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    realityio::getAttributeValue<float>(this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v32 + 408), (uint64_t)v65);
    if (!v65[0] && SHIBYTE(v66) < 0)
      operator delete(*(void **)&v65[24]);
    REGeomBuildConeDefaultOptions();
    v20 = REGeomModelDescriptorCreateFromConeOptions();
    goto LABEL_44;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(v17);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
  {
    v21 = (unint64_t *)MEMORY[0x24BEE7FE8];
    v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
    if (!v22)
      v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    *(_DWORD *)v65 = 1056964608;
    AttributeValueWithDefault = realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v22 + 920), (float *)v65, this);
    v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v21);
    if (!v24)
      v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    *(_DWORD *)v65 = 1065353216;
    v25 = realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v24 + 408), (float *)v65, this);
    memset(v65, 0, 20);
    REGeomBuildCapsuleDefaultOptions();
    v26 = v25 + AttributeValueWithDefault * 2.0;
    *(float *)&v65[8] = AttributeValueWithDefault;
    *(float *)&v65[12] = v26;
    *(_WORD *)v65 = a3;
    *(_WORD *)&v65[4] = a4;
    v63 = *(_DWORD *)&v65[16];
    v62 = *(_OWORD *)v65;
    v20 = REGeomModelDescriptorCreateFromCapsuleOptions();
    goto LABEL_44;
  }
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCylinder>(this))
  {
    v27 = (unint64_t *)MEMORY[0x24BEE7FE8];
    v28 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
    if (!v28)
      v28 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    *(_DWORD *)v65 = 1065353216;
    v29 = realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v28 + 920), (float *)v65, this);
    v30 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v27);
    if (!v30)
      v30 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    *(_DWORD *)v65 = 0x40000000;
    v31 = realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v30 + 408), (float *)v65, this);
    memset(v65, 0, 24);
    REGeomBuildCylinderDefaultOptions();
    *(float *)&v65[8] = v29;
    *(float *)&v65[12] = v29;
    *(float *)&v65[4] = v31;
    *(_WORD *)v65 = a5;
    v61 = *(_QWORD *)&v65[16];
    v60 = *(_OWORD *)v65;
    v20 = REGeomModelDescriptorCreateFromCylinderOptions();
    goto LABEL_44;
  }
  v33 = 0;
LABEL_45:
  v34 = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *(_QWORD *)v65 = MEMORY[0x24BEE9D10] + 16;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorAttr(v34);
  MEMORY[0x2348B1BE8](v65);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v56)
    && pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v56))
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v56, (uint64_t)v65);
    if (v65[0])
    {
      v53 = *(_OWORD *)&v65[8];
      v54 = *(_OWORD *)&v65[24];
      v55 = v66;
      if (v66)
      {
        v35 = (unint64_t *)(v66 - 4);
        if (*((_QWORD *)&v54 + 1))
          v35 = (unint64_t *)*((_QWORD *)&v54 + 1);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if ((_QWORD)v53 == 1)
      {
        __p = 0;
        v51 = 0;
        v52 = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v53);
        v48 = *v55;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v53);
        v47 = v55[1];
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v53);
        __asm { FMOV            V0.4S, #1.0 }
        *(_QWORD *)&_Q0 = __PAIR64__(v47, v48);
        DWORD2(_Q0) = v55[2];
        v49 = _Q0;
        _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE9push_backB8ne180100EOS1_(&__p, &v49);
        MEMORY[0x2348B0B14](v33, "vertexColor", 0, 1, __p);
        if (__p)
        {
          v51 = __p;
          operator delete(__p);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)v65);
  }
  if (v33)
  {
    *(_QWORD *)v65 = v33;
    RERetain();
    v42 = *a6;
    if (*a6 != v33)
    {
      *a6 = v33;
      *(_QWORD *)v65 = v42;
    }
    realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(v65);
    RERelease();
    if ((v59 & 7) != 0)
    {
      v43 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stlxr(v44 - 2, v43));
    }
  }
  else if ((v59 & 7) != 0)
  {
    v45 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
  result = v57;
  if (v57)
    return (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v57);
  return result;
}

void sub_23001D384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _QWORD *v25;

  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(v25);
  _Unwind_Resume(a1);
}

float realityio::getAttributeValueWithDefaultValue<float>(const pxrInternal__aapl__pxrReserved__::TfToken *a1, float *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  float v4;
  _BYTE v6[8];
  float v7;
  void *__p;
  char v9;

  realityio::getAttributeValue<float>(this, a1, (uint64_t)v6);
  if (v6[0])
    return v7;
  v4 = *a2;
  if (v9 < 0)
    operator delete(__p);
  return v4;
}

void _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE9push_backB8ne180100EOS1_(void **a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_OWORD *)v14 = *a2;
    v8 = v14 + 16;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_OWORD *)v16 - 1);
        v16 -= 16;
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

pxrInternal__aapl__pxrReserved__::UsdGeomGprim *realityio::approximateGeomWithPrimitivePrim@<X0>(realityio *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim *result;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v9 = (int)a2;
  result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(result);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((_DWORD)result)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(result);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if ((_DWORD)result)
      {
        *(_OWORD *)a6 = xmmword_23020CF80;
LABEL_14:
        *(_QWORD *)(a6 + 16) = 14;
        return result;
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(result);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if ((_DWORD)result)
      {
        v13 = ((v9 - 2) * v9 + 2);
        v14 = v9 * (v9 - 1);
LABEL_12:
        v15 = (2 * v14);
        goto LABEL_13;
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(result);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if ((_DWORD)result)
      {
        v13 = (a3 + 1);
        v15 = (2 * a3 - 2);
LABEL_13:
        *(_QWORD *)a6 = v13;
        *(_QWORD *)(a6 + 8) = v15;
        goto LABEL_14;
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(result);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if ((_DWORD)result
        || (result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCylinder>(this),
            (_DWORD)result))
      {
        v13 = (2 * a4 * (a5 - 1) + 2);
        v14 = a5 * a4;
        goto LABEL_12;
      }
    }
  }
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  return result;
}

_QWORD *realityio::createModelDescriptorFromUsdGeomMesh@<X0>(realityio *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdGeomMesh *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  int v10;
  int v13;
  int v14;
  unsigned int *v15;
  unsigned int *v16;
  std::vector<unsigned int>::pointer begin;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  unsigned int *v23;
  unsigned int *v24;
  std::vector<unsigned int>::pointer v25;
  unsigned int v26;
  char v27;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  void **v36;
  _QWORD *v37;
  pxrInternal__aapl__pxrReserved__::UsdObject *v38;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  unsigned int *v40;
  unsigned int v41;
  pxrInternal__aapl__pxrReserved__::TfToken *v42;
  unsigned int *v43;
  unsigned int v44;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *Data;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int *v54;
  pxrInternal__aapl__pxrReserved__::UsdPrim *v55;
  unsigned int *v56;
  unsigned int v57;
  pxrInternal__aapl__pxrReserved__::TfToken *v58;
  unsigned __int8 *EmptyString;
  unsigned int *v60;
  unsigned int v61;
  pxrInternal__aapl__pxrReserved__::TfToken *v62;
  unsigned __int8 *v63;
  unsigned int *v64;
  unsigned int v65;
  pxrInternal__aapl__pxrReserved__::TfToken *v66;
  unsigned __int8 *v67;
  unsigned int *v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  pxrInternal__aapl__pxrReserved__::TfToken *v74;
  unsigned __int8 *v75;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v76;
  pxrInternal__aapl__pxrReserved__::TfToken *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  pxrInternal__aapl__pxrReserved__::TfToken *v86;
  unsigned __int8 *v87;
  int v88;
  unsigned int *v89;
  unsigned int v90;
  pxrInternal__aapl__pxrReserved__::TfToken *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v96;
  std::vector<unsigned int>::size_type i;
  void **v98;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  pxrInternal__aapl__pxrReserved__::TfToken *v108;
  unsigned __int8 *v109;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v110;
  pxrInternal__aapl__pxrReserved__::TfToken *v111;
  unsigned int *v112;
  unsigned int v113;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v114;
  unsigned __int8 *v115;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v116;
  unsigned __int8 *v117;
  int HasValue;
  int v119;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v120;
  int v121;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v122;
  int v123;
  const pxrInternal__aapl__pxrReserved__::TfToken *v124;
  int v125;
  unsigned int *v126;
  unsigned int v127;
  const pxrInternal__aapl__pxrReserved__::TfToken *v128;
  unsigned int *v129;
  unsigned int v130;
  int v131;
  _BOOL4 v133;
  unsigned int FaceCount;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  char *v140;
  unsigned int v141;
  std::vector<unsigned int>::pointer v142;
  std::vector<unsigned int>::pointer v143;
  int v144;
  pxrInternal__aapl__pxrReserved__::TfToken *v145;
  unsigned int AttributeValueCount;
  unsigned int AttributeIndexCount;
  std::vector<unsigned int> *v148;
  uint64_t j;
  pxrInternal__aapl__pxrReserved__::TfToken *v150;
  unsigned int v151;
  unsigned int v152;
  std::vector<unsigned int> *v153;
  uint64_t k;
  unsigned int *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int *v165;
  unsigned int v166;
  int v167;
  unsigned int *v168;
  unsigned int v169;
  const pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v170;
  unint64_t *v171;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v172;
  unsigned __int8 *v173;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v174;
  unsigned __int8 *v175;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v176;
  unsigned __int8 *v177;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v178;
  unsigned __int8 *v179;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v180;
  unsigned __int8 *v181;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v182;
  unsigned __int8 *v183;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v184;
  unsigned __int8 *v185;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v186;
  unsigned __int8 *v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int *v190;
  unsigned int v191;
  pxrInternal__aapl__pxrReserved__::UsdObject *v192;
  unint64_t v193;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v194;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v195;
  pxrInternal__aapl__pxrReserved__::TfToken *v196;
  unsigned __int8 *v197;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v198;
  pxrInternal__aapl__pxrReserved__::TfToken *v199;
  unsigned __int8 *v200;
  pxrInternal__aapl__pxrReserved__::UsdObject *v201;
  unint64_t v202;
  pxrInternal__aapl__pxrReserved__::TfToken *v203;
  unsigned __int8 *v204;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v205;
  pxrInternal__aapl__pxrReserved__::TfToken *v206;
  unsigned __int8 *v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int VertexCount;
  int v211;
  uint64_t v212;
  int v213;
  int v214;
  int v215;
  char v216;
  _DWORD *v217;
  int v218;
  _QWORD v220[3];
  int v221[2];
  std::vector<unsigned int>::size_type __sz[2];
  __int128 v223;
  float v224;
  unsigned int *v225;
  std::vector<unsigned int> __x;
  uint64_t v227;
  std::vector<unsigned int> v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  std::vector<unsigned int> __p;
  std::vector<unsigned int> v235;
  std::vector<unsigned int> v236;
  std::vector<unsigned int> v237;
  std::vector<unsigned int>::value_type v238[2];
  char *v239;
  uint64_t v240;
  void **p_HighVertexPerPolygon;
  std::vector<unsigned int>::size_type v242;
  _BYTE v243[4];
  _BYTE v244[4];
  unint64_t v245;
  uint64_t v246;
  unsigned int *v247;
  uint64_t HighVertexPerPolygon;
  unint64_t v249;
  int v250;
  int v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;

  *(_QWORD *)v221 = 0;
  v8 = (uint64_t *)((char *)this + 8);
  v7 = *((_QWORD *)this + 1);
  if (!v7)
    goto LABEL_23;
  if ((*(_BYTE *)(v7 + 57) & 8) != 0)
  {
    v7 = 0;
LABEL_23:
    *a6 = v7;
    *(_QWORD *)v221 = 0;
    return realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(v221);
  }
  v10 = (int)a3;
  if (((*(uint64_t (**)(realityio *))(*(_QWORD *)this + 32))(this) & 1) == 0)
  {
    v7 = *(_QWORD *)v221;
    goto LABEL_23;
  }
  *(_QWORD *)v238 = 0;
  v239 = 0;
  v240 = 0;
  memset(&v237, 0, sizeof(v237));
  memset(&v236, 0, sizeof(v236));
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(this);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr(this);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr(this);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v230)
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v228)
    || (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__x) & 1) == 0)
  {
    v13 = v10;
    v27 = 0;
    goto LABEL_26;
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v230, (uint64_t)&HighVertexPerPolygon);
  if ((_BYTE)HighVertexPerPolygon)
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v228, (uint64_t)&p_HighVertexPerPolygon);
    if (!(_BYTE)p_HighVertexPerPolygon)
    {
      v13 = v10;
      v27 = 0;
LABEL_320:
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)&p_HighVertexPerPolygon);
      goto LABEL_321;
    }
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__x, (uint64_t)__sz);
    v13 = v10;
    if (LOBYTE(__sz[0]))
    {
      v14 = a4;
      if (pxrInternal__aapl__pxrReserved__::UsdGeomMesh::ValidateTopology())
      {
        std::vector<int>::resize(&v237, v242);
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v242);
        v15 = v247;
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v242);
        v16 = &v247[v242];
        if (v15 != v16)
        {
          begin = v237.__begin_;
          do
          {
            v18 = *v15++;
            *begin++ = v18;
          }
          while (v15 != v16);
        }
        _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(v238, v249);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v249);
        v19 = v254;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v249);
        v21 = v254 + 12 * v249;
        if (v19 != v21)
        {
          v22 = *(char **)v238;
          do
          {
            *(_QWORD *)&v20 = *(_QWORD *)v19;
            DWORD2(v20) = *(_DWORD *)(v19 + 8);
            *(_OWORD *)v22 = v20;
            v22 += 16;
            v19 += 12;
          }
          while (v19 != v21);
        }
        std::vector<int>::resize(&v236, __sz[1]);
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__sz[1]);
        v23 = v225;
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__sz[1]);
        v24 = &v225[__sz[1]];
        if (v23 != v24)
        {
          v25 = v236.__begin_;
          a4 = v14;
          do
          {
            v26 = *v23++;
            *v25++ = v26;
          }
          while (v23 != v24);
          v27 = 1;
          goto LABEL_319;
        }
        v27 = 1;
      }
      else
      {
        v27 = 0;
      }
      a4 = v14;
    }
    else
    {
      v27 = 0;
    }
LABEL_319:
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)__sz);
    goto LABEL_320;
  }
  v13 = v10;
  v27 = 0;
LABEL_321:
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)&HighVertexPerPolygon);
LABEL_26:
  v218 = a4;
  if ((v227 & 7) != 0)
  {
    v29 = (unsigned int *)(v227 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__x.__end_cap_);
  if (__x.__end_)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__x.__end_);
  if ((v229 & 7) != 0)
  {
    v31 = (unsigned int *)(v229 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v228.__end_cap_);
  if (v228.__end_)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v228.__end_);
  if ((v233 & 7) != 0)
  {
    v33 = (unsigned int *)(v233 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v232);
  if (v231)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v231);
  if ((v27 & 1) == 0)
  {
    *a6 = *(_QWORD *)v221;
LABEL_52:
    *(_QWORD *)v221 = 0;
    goto LABEL_53;
  }
  HighVertexPerPolygon = REGeomModelDescriptorCreateHighVertexPerPolygon();
  if (HighVertexPerPolygon)
  {
    RERetain();
    v35 = HighVertexPerPolygon;
  }
  else
  {
    v35 = 0;
  }
  v36 = *(void ***)v221;
  if (*(_QWORD *)v221 != v35)
  {
    *(_QWORD *)v221 = v35;
    HighVertexPerPolygon = (uint64_t)v36;
  }
  v37 = realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&HighVertexPerPolygon);
  if (!*(_QWORD *)v221)
  {
    *a6 = 0;
    goto LABEL_52;
  }
  v217 = (_DWORD *)((char *)this + 16);
  v38 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v37, v8, (_DWORD *)this + 4);
  Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v38);
  if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
  REGeomModelDescriptorSetName();
  if ((v252 & 7) != 0)
  {
    v40 = (unsigned int *)(v252 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v250);
  if (v249)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v249);
  RERelease();
  if ((MEMORY[0x2348B0B08](*(_QWORD *)v221, "vertexPosition", 1, (unint64_t)&v239[-*(_QWORD *)v238] >> 4) & 1) != 0)
  {
    v215 = v13;
    pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(this);
    v42 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
    if ((*(_QWORD *)v42 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v42);
    REGeomModelDescriptorAddAttributeAlias();
    if ((v252 & 7) != 0)
    {
      v43 = (unsigned int *)(v252 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stlxr(v44 - 2, v43));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v250);
    if (v249)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v249);
    if (v236.__begin_)
    {
      v236.__end_ = v236.__begin_;
      operator delete(v236.__begin_);
    }
    if (v237.__begin_)
    {
      v237.__end_ = v237.__begin_;
      operator delete(v237.__begin_);
    }
    if (*(_QWORD *)v238)
    {
      v239 = *(char **)v238;
      operator delete(*(void **)v238);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetOrientationAttr(this);
    Data = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon, (uint64_t)&HighVertexPerPolygon);
    if ((_BYTE)HighVertexPerPolygon)
    {
      v46 = v249;
      if ((v249 & 7) == 0)
        goto LABEL_93;
      v47 = (unsigned int *)(v249 & 0xFFFFFFFFFFFFFFF8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 2, v47));
    }
    else
    {
      v46 = *((_QWORD *)Data + 122);
      if ((v46 & 7) == 0)
        goto LABEL_93;
      v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 2, v47));
    }
    if ((v48 & 1) == 0)
      v46 = (unint64_t)v47;
LABEL_93:
    if ((_BYTE)HighVertexPerPolygon)
    {
      if ((v249 & 7) != 0)
      {
        v49 = (unsigned int *)(v249 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
    }
    else if (SHIBYTE(v254) < 0)
    {
      operator delete((void *)v252);
    }
    if ((v245 & 7) != 0)
    {
      v51 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
      do
        v52 = __ldxr(v51);
      while (__stlxr(v52 - 2, v51));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v243);
    if (v242)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v242);
    v53 = atomic_load(MEMORY[0x24BEE7FE8]);
    v216 = v46;
    if (!v53)
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    v54 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
    REGeomModelDescriptorSetWindingOrder();
    *(_OWORD *)__sz = 0u;
    v223 = 0u;
    v224 = 1.0;
    v55 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&HighVertexPerPolygon, v8, v217);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes(v55);
    if ((v252 & 7) != 0)
    {
      v56 = (unsigned int *)(v252 & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stlxr(v57 - 2, v56));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v250);
    if (v249)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v249);
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>((uint64_t)__sz, vcvtps_u32_f32((float)(unint64_t)((uint64_t)(v220[1] - v220[0]) >> 5) / v224));
    pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(this);
    v58 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
    if ((*(_QWORD *)v58 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (unsigned __int8 *)((*(_QWORD *)v58 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v58);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, EmptyString, (uint64_t)EmptyString);
    if ((v252 & 7) != 0)
    {
      v60 = (unsigned int *)(v252 & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stlxr(v61 - 2, v60));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v250);
    if (v249)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v249);
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr(this);
    v62 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
    if ((*(_QWORD *)v62 & 0xFFFFFFFFFFFFFFF8) != 0)
      v63 = (unsigned __int8 *)((*(_QWORD *)v62 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v63 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v62);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v63, (uint64_t)v63);
    if ((v252 & 7) != 0)
    {
      v64 = (unsigned int *)(v252 & 0xFFFFFFFFFFFFFFF8);
      do
        v65 = __ldxr(v64);
      while (__stlxr(v65 - 2, v64));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v250);
    if (v249)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v249);
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr(this);
    v66 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
    if ((*(_QWORD *)v66 & 0xFFFFFFFFFFFFFFF8) != 0)
      v67 = (unsigned __int8 *)((*(_QWORD *)v66 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v67 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v66);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v67, (uint64_t)v67);
    if ((v252 & 7) != 0)
    {
      v68 = (unsigned int *)(v252 & 0xFFFFFFFFFFFFFFF8);
      do
        v69 = __ldxr(v68);
      while (__stlxr(v69 - 2, v68));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v250);
    if (v249)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v249);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v233 = 0;
    v230 = MEMORY[0x24BEE9DB0] + 16;
    MEMORY[0x2348B274C](&v228, "primvars:normals");
    LODWORD(p_HighVertexPerPolygon) = 3;
    v242 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v245 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v230, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v228))
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v230, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v228);
      LODWORD(p_HighVertexPerPolygon) = HighVertexPerPolygon;
      v70 = v249;
      if (v249)
      {
        v71 = (unint64_t *)(v249 + 48);
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      v73 = v242;
      v242 = v70;
      if (v73)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v73);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v243, &v250);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v244, &v251);
      pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v245, &v252);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon))
      {
        v74 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon);
        if ((*(_QWORD *)v74 & 0xFFFFFFFFFFFFFFF8) != 0)
          v75 = (unsigned __int8 *)((*(_QWORD *)v74 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v75 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v74);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v75, (uint64_t)v75);
        v76 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
        if (!v76)
          v76 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
        if (realityio::addUsdAttributeToGeomModelDescriptor(*(uint64_t *)v221, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&p_HighVertexPerPolygon, (unint64_t)"vertexNormal", (std::vector<unsigned int>::size_type *)v76 + 153))
        {
          v77 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
          if ((*(_QWORD *)v77 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v77);
          REGeomModelDescriptorAddAttributeAlias();
        }
      }
      if ((v253 & 7) != 0)
      {
        v78 = (unsigned int *)(v253 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((v252 & 7) != 0)
      {
        v80 = (unsigned int *)(v252 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v250);
      if (v249)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v249);
    }
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsAttr(this);
      LODWORD(p_HighVertexPerPolygon) = HighVertexPerPolygon;
      v82 = v249;
      v249 = 0;
      v83 = v242;
      v242 = v82;
      if (v83)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v83);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v243, &v250);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v244);
      if ((v245 & 7) != 0)
      {
        v84 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      v245 = v252;
      v252 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v250);
      if (v249)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v249);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon))
      {
        v86 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon);
        if ((*(_QWORD *)v86 & 0xFFFFFFFFFFFFFFF8) != 0)
          v87 = (unsigned __int8 *)((*(_QWORD *)v86 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v87 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v86);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v87, (uint64_t)v87);
        pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsInterpolation(this);
        v88 = realityio::addUsdAttributeToGeomModelDescriptor(*(uint64_t *)v221, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&p_HighVertexPerPolygon, (unint64_t)"vertexNormal", (std::vector<unsigned int>::size_type *)&HighVertexPerPolygon);
        if ((HighVertexPerPolygon & 7) != 0)
        {
          v89 = (unsigned int *)(HighVertexPerPolygon & 0xFFFFFFFFFFFFFFF8);
          do
            v90 = __ldxr(v89);
          while (__stlxr(v90 - 2, v89));
        }
        if (v88)
        {
          v91 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon);
          if ((*(_QWORD *)v91 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v91);
          REGeomModelDescriptorAddAttributeAlias();
        }
      }
    }
    if ((v245 & 7) != 0)
    {
      v92 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
      do
        v93 = __ldxr(v92);
      while (__stlxr(v93 - 2, v92));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v243);
    if (v242)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v242);
    if (((uint64_t)v228.__begin_ & 7) != 0)
    {
      v94 = (unsigned int *)((unint64_t)v228.__begin_ & 0xFFFFFFFFFFFFFFF8);
      do
        v95 = __ldxr(v94);
      while (__stlxr(v95 - 2, v94));
    }
    LODWORD(HighVertexPerPolygon) = 3;
    v249 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v252 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithAuthoredValues((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v230);
    v98 = p_HighVertexPerPolygon;
    for (i = v242; v98 != (void **)i; v98 += 6)
    {
      if ((realityio::isTexCoord2((realityio *)v98, v96) & 1) != 0
        || realityio::isScalar2((realityio *)v98, v99))
      {
        if ((*(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v98) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
        {
          LODWORD(HighVertexPerPolygon) = *(_DWORD *)v98;
          v104 = (unint64_t)v98[1];
          if (v104)
          {
            v105 = (unint64_t *)(v104 + 48);
            do
              v106 = __ldxr(v105);
            while (__stxr(v106 + 1, v105));
          }
          v107 = v249;
          v249 = v104;
          if (v107)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v250, (_DWORD *)v98 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v251, (_DWORD *)v98 + 5);
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v252, v98 + 3);
          break;
        }
        if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon) & 1) == 0)
        {
          LODWORD(HighVertexPerPolygon) = *(_DWORD *)v98;
          v100 = (unint64_t)v98[1];
          if (v100)
          {
            v101 = (unint64_t *)(v100 + 48);
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
          }
          v103 = v249;
          v249 = v100;
          if (v103)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v103);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v250, (_DWORD *)v98 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v251, (_DWORD *)v98 + 5);
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v252, v98 + 3);
        }
      }
    }
    v228.__begin_ = (std::vector<unsigned int>::pointer)&p_HighVertexPerPolygon;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon))
    {
      v108 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
      if ((*(_QWORD *)v108 & 0xFFFFFFFFFFFFFFF8) != 0)
        v109 = (unsigned __int8 *)((*(_QWORD *)v108 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v109 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v108);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v109, (uint64_t)v109);
      v110 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
      if (!v110)
        v110 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
      if (realityio::addUsdAttributeToGeomModelDescriptor(*(uint64_t *)v221, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&HighVertexPerPolygon, (unint64_t)"vertexUV", (std::vector<unsigned int>::size_type *)v110 + 17))
      {
        v111 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
        if ((*(_QWORD *)v111 & 0xFFFFFFFFFFFFFFF8) == 0)
          pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v111);
        REGeomModelDescriptorAddAttributeAlias();
      }
    }
    if ((v252 & 7) != 0)
    {
      v112 = (unsigned int *)(v252 & 0xFFFFFFFFFFFFFFF8);
      do
        v113 = __ldxr(v112);
      while (__stlxr(v113 - 2, v112));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v250);
    if (v249)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v249);
    v114 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
    if (!v114)
      v114 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    if ((*((_QWORD *)v114 + 106) & 0xFFFFFFFFFFFFFFF8) != 0)
      v115 = (unsigned __int8 *)((*((_QWORD *)v114 + 106) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v115 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v114);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v115, (uint64_t)v115);
    v116 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
    if (!v116)
      v116 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    if ((*((_QWORD *)v116 + 107) & 0xFFFFFFFFFFFFFFF8) != 0)
      v117 = (unsigned __int8 *)((*((_QWORD *)v116 + 107) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v117 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v116);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v117, (uint64_t)v117);
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorPrimvar(this);
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayOpacityPrimvar(this);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar())
      HasValue = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&HighVertexPerPolygon);
    else
      HasValue = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar())
      v119 = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&p_HighVertexPerPolygon);
    else
      v119 = 0;
    if (((HasValue | v119) & 1) == 0)
      goto LABEL_344;
    if (HasValue)
    {
      v120 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
      if (!v120)
        v120 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
      v121 = realityio::addUsdAttributeToGeomModelDescriptor(*(uint64_t *)v221, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&HighVertexPerPolygon, 0, (std::vector<unsigned int>::size_type *)v120 + 17);
    }
    else
    {
      v121 = 0;
    }
    v214 = v121;
    if (v119)
    {
      v122 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
      if (!v122)
        v122 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
      v123 = realityio::addUsdAttributeToGeomModelDescriptor(*(uint64_t *)v221, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&p_HighVertexPerPolygon, 0, (std::vector<unsigned int>::size_type *)v122 + 17);
    }
    else
    {
      v123 = 0;
    }
    if ((v214 | v123) != 1)
      goto LABEL_344;
    if (v214)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&HighVertexPerPolygon);
      v125 = realityio::meshAttributeRateForInterpolation((realityio *)&v228, v124);
      if (((uint64_t)v228.__begin_ & 7) != 0)
      {
        v126 = (unsigned int *)((unint64_t)v228.__begin_ & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stlxr(v127 - 2, v126));
      }
    }
    else
    {
      v125 = 255;
    }
    if (v123)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&p_HighVertexPerPolygon);
      v213 = realityio::meshAttributeRateForInterpolation((realityio *)&v228, v128);
      if (((uint64_t)v228.__begin_ & 7) != 0)
      {
        v129 = (unsigned int *)((unint64_t)v228.__begin_ & 0xFFFFFFFFFFFFFFF8);
        do
          v130 = __ldxr(v129);
        while (__stlxr(v130 - 2, v129));
      }
      if (v214)
      {
        v211 = 1;
        if (v213 != v125 || (v131 = v125, v213 == 2))
        {
LABEL_276:
          LODWORD(v136) = REGeomModelDescriptorGetIndexCount();
          FaceCount = REGeomModelDescriptorGetFaceCount();
          v212 = *(_QWORD *)v221;
          VertexCount = REGeomModelDescriptorGetVertexCount();
          v135 = FaceCount;
          LODWORD(__x.__begin_) = 0;
          std::vector<unsigned int>::vector(&v228, FaceCount, (const std::vector<unsigned int>::value_type *)&__x);
          v136 = v136;
          v238[0] = -1;
          std::vector<unsigned int>::vector(&__x, v136, v238);
          REGeomModelDescriptorGetFaceVertexCountsHighVertexPerPolygon();
          REGeomModelDescriptorGetIndices();
          v137 = VertexCount;
          v138 = v213;
          if (v214)
            v138 = v125;
          if (v211)
            v138 = 3;
          if (v138 != 1)
            v137 = 1;
          v209 = v138;
          if (v138 != 3)
            v136 = v137;
          *(_QWORD *)v238 = 0;
          v239 = 0;
          v240 = 0;
          if (v136)
          {
            v139 = v125;
            std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__vallocate[abi:ne180100](v238, v136);
            v140 = v239;
            memset_pattern16(v239, &xmmword_230204CF0, 16 * v136);
            v239 = &v140[16 * v136];
            v125 = v139;
          }
          LODWORD(v236.__begin_) = 0;
          std::vector<unsigned int>::vector(&v237, FaceCount, (const std::vector<unsigned int>::value_type *)&v236);
          if (FaceCount)
          {
            v141 = 0;
            v142 = v228.__begin_;
            v143 = v237.__begin_;
            do
            {
              v144 = *v142++;
              v141 += v144;
              *v143++ = v141;
              --v135;
            }
            while (v135);
          }
          if ((v123 & 1) != 0)
          {
            v145 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon);
            if ((*(_QWORD *)v145 & 0xFFFFFFFFFFFFFFF8) == 0)
              pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v145);
            if (REGeomModelDescriptorGetAttributeIndex() == -1)
              goto LABEL_336;
            AttributeValueCount = REGeomModelDescriptorGetAttributeValueCount();
            std::vector<float>::vector(&v236, AttributeValueCount);
            memset(&v235, 0, sizeof(v235));
            REGeomModelDescriptorGetAttributeValuesFloat();
            if (REGeomModelDescriptorIsAttributeIndexed())
            {
              AttributeIndexCount = REGeomModelDescriptorGetAttributeIndexCount();
              std::vector<int>::resize(&v235, AttributeIndexCount);
              REGeomModelDescriptorGetAttributeIndices();
              v148 = &v235;
            }
            else
            {
              v148 = 0;
            }
            if (v211)
              realityio::makeFaceVertexIndexList(&__p, VertexCount, (uint64_t *)&v237, (uint64_t *)&__x, v213, (void **)&v148->__begin_);
            else
              realityio::makeValueLookupByIndex(&__p, VertexCount, (uint64_t)v237.__begin_, (uint64_t)v237.__end_, (uint64_t)__x.__begin_, (uint64_t)__x.__end_, v213, v148);
            if (v136)
            {
              for (j = 0; j != v136; ++j)
                *(_DWORD *)(*(_QWORD *)v238 + 1 * j + 12) = v236.__begin_[__p.__begin_[j]];
            }
            if (__p.__begin_)
            {
              __p.__end_ = __p.__begin_;
              operator delete(__p.__begin_);
            }
            if (v235.__begin_)
            {
              v235.__end_ = v235.__begin_;
              operator delete(v235.__begin_);
            }
            if (v236.__begin_)
            {
              v236.__end_ = v236.__begin_;
              operator delete(v236.__begin_);
            }
          }
          if (v214)
          {
            v150 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
            if ((*(_QWORD *)v150 & 0xFFFFFFFFFFFFFFF8) == 0)
              pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v150);
            if (REGeomModelDescriptorGetAttributeIndex() == -1)
              goto LABEL_336;
            v151 = REGeomModelDescriptorGetAttributeValueCount();
            _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(&v236, v151);
            memset(&v235, 0, sizeof(v235));
            REGeomModelDescriptorGetAttributeValuesVector3F();
            if (REGeomModelDescriptorIsAttributeIndexed())
            {
              v152 = REGeomModelDescriptorGetAttributeIndexCount();
              std::vector<int>::resize(&v235, v152);
              REGeomModelDescriptorGetAttributeIndices();
              v153 = &v235;
            }
            else
            {
              v153 = 0;
            }
            if (v211)
              realityio::makeFaceVertexIndexList(&__p, VertexCount, (uint64_t *)&v237, (uint64_t *)&__x, v125, (void **)&v153->__begin_);
            else
              realityio::makeValueLookupByIndex(&__p, VertexCount, (uint64_t)v237.__begin_, (uint64_t)v237.__end_, (uint64_t)__x.__begin_, (uint64_t)__x.__end_, v125, v153);
            if (v136)
            {
              for (k = 0; k != v136; ++k)
              {
                v155 = &v236.__begin_[4 * __p.__begin_[k]];
                v156 = *(_OWORD *)(*(_QWORD *)v238 + 16 * k);
                LODWORD(v156) = *v155;
                *(_OWORD *)(*(_QWORD *)v238 + 16 * k) = v156;
                v157 = *(_OWORD *)(*(_QWORD *)v238 + 16 * k);
                DWORD1(v157) = v155[1];
                *(_OWORD *)(*(_QWORD *)v238 + 16 * k) = v157;
                v158 = *(_OWORD *)(*(_QWORD *)v238 + 16 * k);
                DWORD2(v158) = v155[2];
                *(_OWORD *)(*(_QWORD *)v238 + 16 * k) = v158;
              }
            }
            if (__p.__begin_)
            {
              __p.__end_ = __p.__begin_;
              operator delete(__p.__begin_);
            }
            if (v235.__begin_)
            {
              v235.__end_ = v235.__begin_;
              operator delete(v235.__begin_);
            }
            if (v236.__begin_)
            {
              v236.__end_ = v236.__begin_;
              operator delete(v236.__begin_);
            }
          }
          MEMORY[0x2348B0B14](v212, "vertexColor", v209, (unint64_t)&v239[-*(_QWORD *)v238] >> 4);
LABEL_336:
          if (v237.__begin_)
          {
            v237.__end_ = v237.__begin_;
            operator delete(v237.__begin_);
          }
          if (*(_QWORD *)v238)
          {
            v239 = *(char **)v238;
            operator delete(*(void **)v238);
          }
          if (__x.__begin_)
          {
            __x.__end_ = __x.__begin_;
            operator delete(__x.__begin_);
          }
          if (v228.__begin_)
          {
            v228.__end_ = v228.__begin_;
            operator delete(v228.__begin_);
          }
LABEL_344:
          if ((v246 & 7) != 0)
          {
            v159 = (unsigned int *)(v246 & 0xFFFFFFFFFFFFFFF8);
            do
              v160 = __ldxr(v159);
            while (__stlxr(v160 - 2, v159));
          }
          if ((v245 & 7) != 0)
          {
            v161 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
            do
              v162 = __ldxr(v161);
            while (__stlxr(v162 - 2, v161));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v243);
          if (v242)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v242);
          if ((v253 & 7) != 0)
          {
            v163 = (unsigned int *)(v253 & 0xFFFFFFFFFFFFFFF8);
            do
              v164 = __ldxr(v163);
            while (__stlxr(v164 - 2, v163));
          }
          if ((v252 & 7) != 0)
          {
            v165 = (unsigned int *)(v252 & 0xFFFFFFFFFFFFFFF8);
            do
              v166 = __ldxr(v165);
            while (__stlxr(v166 - 2, v165));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v250);
          if (v249)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v249);
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&HighVertexPerPolygon, v8, v217);
          pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Find();
          if (!v242 || (*(_BYTE *)(v242 + 57) & 8) != 0)
            v167 = 0;
          else
            v167 = ((uint64_t (*)(void ***))p_HighVertexPerPolygon[4])(&p_HighVertexPerPolygon);
          MEMORY[0x2348B1B1C](&p_HighVertexPerPolygon);
          if ((v252 & 7) != 0)
          {
            v168 = (unsigned int *)(v252 & 0xFFFFFFFFFFFFFFF8);
            do
              v169 = __ldxr(v168);
            while (__stlxr(v169 - 2, v168));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v250);
          if (v249)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v249);
          if (v167)
          {
            v171 = (unint64_t *)MEMORY[0x24BEE8040];
            v172 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(MEMORY[0x24BEE8040]);
            if (!v172)
              v172 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
            if ((*((_QWORD *)v172 + 6) & 0xFFFFFFFFFFFFFFF8) != 0)
              v173 = (unsigned __int8 *)((*((_QWORD *)v172 + 6) & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v173 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v172);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v173, (uint64_t)v173);
            v174 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v171);
            if (!v174)
              v174 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
            if ((*((_QWORD *)v174 + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
              v175 = (unsigned __int8 *)((*((_QWORD *)v174 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v175 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v174);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v175, (uint64_t)v175);
            v176 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v171);
            if (!v176)
              v176 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
            if ((*((_QWORD *)v176 + 20) & 0xFFFFFFFFFFFFFFF8) != 0)
              v177 = (unsigned __int8 *)((*((_QWORD *)v176 + 20) & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v177 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v176);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v177, (uint64_t)v177);
            v178 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v171);
            if (!v178)
              v178 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
            if ((*((_QWORD *)v178 + 23) & 0xFFFFFFFFFFFFFFF8) != 0)
              v179 = (unsigned __int8 *)((*((_QWORD *)v178 + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v179 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v178);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v179, (uint64_t)v179);
            v180 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v171);
            if (!v180)
              v180 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
            if ((*((_QWORD *)v180 + 14) & 0xFFFFFFFFFFFFFFF8) != 0)
              v181 = (unsigned __int8 *)((*((_QWORD *)v180 + 14) & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v181 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v180);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v181, (uint64_t)v181);
            v182 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v171);
            if (!v182)
              v182 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
            if ((*((_QWORD *)v182 + 11) & 0xFFFFFFFFFFFFFFF8) != 0)
              v183 = (unsigned __int8 *)((*((_QWORD *)v182 + 11) & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v183 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v182);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v183, (uint64_t)v183);
            v184 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v171);
            if (!v184)
              v184 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
            if ((*((_QWORD *)v184 + 12) & 0xFFFFFFFFFFFFFFF8) != 0)
              v185 = (unsigned __int8 *)((*((_QWORD *)v184 + 12) & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v185 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v184);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v185, (uint64_t)v185);
            v186 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v171);
            if (!v186)
              v186 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
            if ((*((_QWORD *)v186 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
              v187 = (unsigned __int8 *)((*((_QWORD *)v186 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v187 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v186);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v187, (uint64_t)v187);
            pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&p_HighVertexPerPolygon, v8, v217);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            v252 = 0;
            HighVertexPerPolygon = MEMORY[0x24BEE9DA0] + 16;
            if ((v245 & 7) != 0)
            {
              v188 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
              do
                v189 = __ldxr(v188);
              while (__stlxr(v189 - 2, v188));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v243);
            if (v242)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v242);
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&HighVertexPerPolygon);
            pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&p_HighVertexPerPolygon, v8, v217);
            realityio::addSkeletonJointBindingsToModelDescriptor(*(uint64_t *)v221, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&HighVertexPerPolygon, (realityio *)&v228, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&p_HighVertexPerPolygon);
            if ((v245 & 7) != 0)
            {
              v190 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
              do
                v191 = __ldxr(v190);
              while (__stlxr(v191 - 2, v190));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v243);
            if (v242)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v242);
            MEMORY[0x2348B1F9C](&v228);
            MEMORY[0x2348B217C](&HighVertexPerPolygon);
          }
          if (v215)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithAuthoredValues((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v230);
            v192 = (pxrInternal__aapl__pxrReserved__::UsdObject *)HighVertexPerPolygon;
            v193 = v249;
            while (v192 != (pxrInternal__aapl__pxrReserved__::UsdObject *)v193)
            {
              if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()
                && ((realityio::isTexCoord2(v192, v194) & 1) != 0 || realityio::isTexCoord3(v192, v195)))
              {
                v196 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v192);
                v197 = (unsigned __int8 *)((*(_QWORD *)v196 & 0xFFFFFFFFFFFFFFF8) != 0
                                         ? (*(_QWORD *)v196 & 0xFFFFFFFFFFFFFFF8) + 16
                                         : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v196));
                if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(__sz, v197))
                {
                  v198 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
                  if (!v198)
                    v198 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
                  realityio::addUsdAttributeToGeomModelDescriptor(*(uint64_t *)v221, v192, 0, (std::vector<unsigned int>::size_type *)v198 + 17);
                  v199 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v192);
                  if ((*(_QWORD *)v199 & 0xFFFFFFFFFFFFFFF8) != 0)
                    v200 = (unsigned __int8 *)((*(_QWORD *)v199 & 0xFFFFFFFFFFFFFFF8) + 16);
                  else
                    v200 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v199);
                  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v200, (uint64_t)v200);
                }
              }
              v192 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v192 + 48);
            }
            p_HighVertexPerPolygon = (void **)&HighVertexPerPolygon;
            std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100](&p_HighVertexPerPolygon);
          }
          if ((realityio::isCatmullClarkSurface(this, v170) & a5) == 1)
            realityio::addOpenSubdivDataToModelDescriptor(*(uint64_t *)v221, this);
          if (v218)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithAuthoredValues((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v230);
            v201 = (pxrInternal__aapl__pxrReserved__::UsdObject *)HighVertexPerPolygon;
            v202 = v249;
            while (v201 != (pxrInternal__aapl__pxrReserved__::UsdObject *)v202)
            {
              if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar())
              {
                v203 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v201);
                v204 = (unsigned __int8 *)((*(_QWORD *)v203 & 0xFFFFFFFFFFFFFFF8) != 0
                                         ? (*(_QWORD *)v203 & 0xFFFFFFFFFFFFFFF8) + 16
                                         : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v203));
                if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(__sz, v204))
                {
                  v205 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
                  if (!v205)
                    v205 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
                  realityio::addUsdAttributeToGeomModelDescriptor(*(uint64_t *)v221, v201, 0, (std::vector<unsigned int>::size_type *)v205 + 17);
                  v206 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v201);
                  if ((*(_QWORD *)v206 & 0xFFFFFFFFFFFFFFF8) != 0)
                    v207 = (unsigned __int8 *)((*(_QWORD *)v206 & 0xFFFFFFFFFFFFFFF8) + 16);
                  else
                    v207 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v206);
                  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v207, (uint64_t)v207);
                }
              }
              v201 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v201 + 48);
            }
            p_HighVertexPerPolygon = (void **)&HighVertexPerPolygon;
            std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100](&p_HighVertexPerPolygon);
          }
          *a6 = *(_QWORD *)v221;
          *(_QWORD *)v221 = 0;
          MEMORY[0x2348B21DC](&v230);
          HighVertexPerPolygon = (uint64_t)v220;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&HighVertexPerPolygon);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__sz);
          if ((v216 & 7) != 0)
          {
            do
              v208 = __ldxr(v54);
            while (__stlxr(v208 - 2, v54));
          }
          return realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(v221);
        }
      }
      else
      {
        v131 = v213;
        if (v213 == 2)
        {
          v211 = 1;
          v131 = 2;
LABEL_275:
          v213 = v131;
          goto LABEL_276;
        }
      }
    }
    else
    {
      v131 = 255;
    }
    v133 = (v125 & 0xFE) == 2 || v131 == 3;
    v211 = v133;
    goto LABEL_275;
  }
  *a6 = 0;
LABEL_53:
  if (v236.__begin_)
  {
    v236.__end_ = v236.__begin_;
    operator delete(v236.__begin_);
  }
  if (v237.__begin_)
  {
    v237.__end_ = v237.__begin_;
    operator delete(v237.__begin_);
  }
  if (*(_QWORD *)v238)
  {
    v239 = *(char **)v238;
    operator delete(*(void **)v238);
  }
  return realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(v221);
}

void sub_23001F368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  uint64_t v47;
  void *v49;
  void *v50;
  void *v51;
  unsigned int *v52;
  unsigned int v53;

  if (__p)
  {
    a47 = (uint64_t)__p;
    operator delete(__p);
  }
  v49 = *(void **)(v47 - 256);
  if (v49)
  {
    *(_QWORD *)(v47 - 248) = v49;
    operator delete(v49);
  }
  v50 = *(void **)(v47 - 232);
  if (v50)
  {
    *(_QWORD *)(v47 - 224) = v50;
    operator delete(v50);
  }
  v51 = *(void **)(v47 - 208);
  if (v51)
  {
    *(_QWORD *)(v47 - 200) = v51;
    operator delete(v51);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(v47 - 184));
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(v47 - 136));
  MEMORY[0x2348B21DC](&a39);
  a39 = &a19;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  if ((a16 & 7) != 0)
  {
    v52 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&a22);
  _Unwind_Resume(a1);
}

uint64_t realityio::approximateGeomFromUsdGeomMesh@<X0>(realityio *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdGeomMesh *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  int v6;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  unsigned __int8 *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v17;
  unsigned __int8 *v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  unsigned __int8 *v20;
  unsigned int *v21;
  unsigned int v22;
  pxrInternal__aapl__pxrReserved__::TfToken *HasPrimvar;
  unsigned __int8 *v24;
  pxrInternal__aapl__pxrReserved__::TfToken *v25;
  unsigned __int8 *v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::TfToken *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  pxrInternal__aapl__pxrReserved__::TfToken *v32;
  unsigned __int8 *v33;
  uint64_t *v34;
  _DWORD *v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  unint64_t *v39;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *Data;
  unsigned __int8 *v41;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v42;
  unsigned __int8 *v43;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v44;
  unsigned __int8 *v45;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v46;
  unsigned __int8 *v47;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v48;
  unsigned __int8 *v49;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v50;
  unsigned __int8 *v51;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v52;
  unsigned __int8 *v53;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v54;
  unsigned __int8 *v55;
  unsigned int *v56;
  unsigned int v57;
  const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v58;
  pxrInternal__aapl__pxrReserved__::UsdObject *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  pxrInternal__aapl__pxrReserved__::TfToken *v63;
  unsigned __int8 *v64;
  pxrInternal__aapl__pxrReserved__::UsdObject *v65;
  uint64_t v66;
  pxrInternal__aapl__pxrReserved__::TfToken *v67;
  unsigned __int8 *v68;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v69;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v70;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v71;
  pxrInternal__aapl__pxrReserved__::TfToken *v72;
  unsigned __int8 *v73;
  pxrInternal__aapl__pxrReserved__::TfToken *v74;
  unsigned __int8 *v75;
  pxrInternal__aapl__pxrReserved__::UsdObject *v76;
  uint64_t v77;
  pxrInternal__aapl__pxrReserved__::TfToken *v78;
  unsigned __int8 *v79;
  pxrInternal__aapl__pxrReserved__::TfToken *v80;
  unsigned __int8 *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t result;
  uint64_t TypeName;
  void **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106[8];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111[8];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[4];
  _OWORD v118[2];
  int v119;
  _OWORD v120[2];
  int *v121;
  char v122[8];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _OWORD v126[2];
  uint64_t v127;
  char v128[8];
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v6 = (int)a3;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(this);
  v127 = 0;
  memset(v126, 0, sizeof(v126));
  if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>() & 1) != 0)
  {
    v10 = *(_QWORD *)&v126[0];
    *a5 = *(_QWORD *)&v126[0];
    if (v10)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr(this);
      v121 = 0;
      memset(v120, 0, sizeof(v120));
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>())
      {
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v120);
        v11 = v121;
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v120);
        v12 = &v121[*(_QWORD *)&v120[0]];
        if (v11 != v12)
        {
          v13 = 0;
          do
          {
            v14 = *v11++;
            v13 = v14 + v13 - 2;
          }
          while (v11 != v12);
          a5[1] = v13;
        }
      }
      memset(v118, 0, sizeof(v118));
      v119 = 1065353216;
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v128);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (unsigned __int8 *)((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, EmptyString, (uint64_t)EmptyString);
      v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v122);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) != 0)
        v18 = (unsigned __int8 *)((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v18 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v18, (uint64_t)v18);
      pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr(this);
      v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v111);
      if ((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8) != 0)
        v20 = (unsigned __int8 *)((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v20 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v20, (uint64_t)v20);
      if ((v114 & 7) != 0)
      {
        v21 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v113);
      if (v112)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v112);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v117[3] = 0;
      v117[0] = MEMORY[0x24BEE9DB0] + 16;
      MEMORY[0x2348B274C](&v116, "primvars:normals");
      HasPrimvar = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v117, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v116);
      if ((_DWORD)HasPrimvar)
      {
        if ((v116 & 0xFFFFFFFFFFFFFFF8) != 0)
          v24 = (unsigned __int8 *)((v116 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v24 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(HasPrimvar);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v24, (uint64_t)v24);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsAttr(this);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v111))
        {
          v25 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v111);
          if ((*(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8) != 0)
            v26 = (unsigned __int8 *)((*(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            v26 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v25);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v26, (uint64_t)v26);
        }
        if ((v114 & 7) != 0)
        {
          v27 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFF8);
          do
            v28 = __ldxr(v27);
          while (__stlxr(v28 - 2, v27));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v113);
        if (v112)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v112);
      }
      a5[2] = 6;
      pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorPrimvar(this);
      pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayOpacityPrimvar(this);
      if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()
        && pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v111))
      {
        a5[2] = 9;
        v29 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v111);
        if ((*(_QWORD *)v29 & 0xFFFFFFFFFFFFFFF8) != 0)
          v30 = (unsigned __int8 *)((*(_QWORD *)v29 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v30 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v30, (uint64_t)v30);
        v31 = 10;
      }
      else
      {
        v31 = 7;
      }
      if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()
        && pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v106))
      {
        a5[2] = v31;
        v32 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v106);
        if ((*(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8) != 0)
          v33 = (unsigned __int8 *)((*(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v33 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v32);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v33, (uint64_t)v33);
      }
      v34 = (uint64_t *)((char *)this + 8);
      v35 = (_DWORD *)((char *)this + 16);
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v102, v34, v35);
      pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Find();
      if (!v99 || (*(_BYTE *)(v99 + 57) & 8) != 0)
        v36 = 0;
      else
        v36 = ((uint64_t (*)(void ***))v98[4])(&v98);
      MEMORY[0x2348B1B1C](&v98);
      if ((v105 & 7) != 0)
      {
        v37 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v104);
      if (v103)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v103);
      if (v36)
      {
        v39 = (unint64_t *)MEMORY[0x24BEE8040];
        Data = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(MEMORY[0x24BEE8040]);
        if (!Data)
          Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
        if ((*((_QWORD *)Data + 6) & 0xFFFFFFFFFFFFFFF8) != 0)
          v41 = (unsigned __int8 *)((*((_QWORD *)Data + 6) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v41 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Data);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v41, (uint64_t)v41);
        v42 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v39);
        if (!v42)
          v42 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
        if ((*((_QWORD *)v42 + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
          v43 = (unsigned __int8 *)((*((_QWORD *)v42 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v43 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v42);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v43, (uint64_t)v43);
        v44 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v39);
        if (!v44)
          v44 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
        if ((*((_QWORD *)v44 + 20) & 0xFFFFFFFFFFFFFFF8) != 0)
          v45 = (unsigned __int8 *)((*((_QWORD *)v44 + 20) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v45 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v45, (uint64_t)v45);
        v46 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v39);
        if (!v46)
          v46 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
        if ((*((_QWORD *)v46 + 23) & 0xFFFFFFFFFFFFFFF8) != 0)
          v47 = (unsigned __int8 *)((*((_QWORD *)v46 + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v47 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v46);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v47, (uint64_t)v47);
        v48 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v39);
        if (!v48)
          v48 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
        if ((*((_QWORD *)v48 + 14) & 0xFFFFFFFFFFFFFFF8) != 0)
          v49 = (unsigned __int8 *)((*((_QWORD *)v48 + 14) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v49 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v48);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v49, (uint64_t)v49);
        v50 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v39);
        if (!v50)
          v50 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
        if ((*((_QWORD *)v50 + 11) & 0xFFFFFFFFFFFFFFF8) != 0)
          v51 = (unsigned __int8 *)((*((_QWORD *)v50 + 11) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v51 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v50);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v51, (uint64_t)v51);
        v52 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v39);
        if (!v52)
          v52 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
        if ((*((_QWORD *)v52 + 12) & 0xFFFFFFFFFFFFFFF8) != 0)
          v53 = (unsigned __int8 *)((*((_QWORD *)v52 + 12) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v53 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v52);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v53, (uint64_t)v53);
        v54 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v39);
        if (!v54)
          v54 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
        if ((*((_QWORD *)v54 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
          v55 = (unsigned __int8 *)((*((_QWORD *)v54 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v55 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v54);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v55, (uint64_t)v55);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v98, v34, v35);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v105 = 0;
        v102 = MEMORY[0x24BEE9DA0] + 16;
        if ((v101 & 7) != 0)
        {
          v56 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
          do
            v57 = __ldxr(v56);
          while (__stlxr(v57 - 2, v56));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v100);
        if (v99)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v99);
        pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v102);
        if (v99
          && (*(_BYTE *)(v99 + 57) & 8) == 0
          && ((unsigned int (*)(void ***))v98[4])(&v98)
          && realityio::isValidSkeleton((realityio *)&v98, v58))
        {
          a5[2] += 12;
        }
        MEMORY[0x2348B1F9C](&v98);
        MEMORY[0x2348B217C](&v102);
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithAuthoredValues((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v117);
      v59 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v102;
      v60 = v103;
      v61 = a5[2];
      if (v102 == v103)
      {
        v62 = 0;
      }
      else
      {
        v62 = 0;
        do
        {
          if ((*(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v59) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
          {
            v61 += 2;
            a5[2] = v61;
            v63 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v59);
            if ((*(_QWORD *)v63 & 0xFFFFFFFFFFFFFFF8) != 0)
              v64 = (unsigned __int8 *)((*(_QWORD *)v63 & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v64 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v63);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v64, (uint64_t)v64);
            v62 = 1;
          }
          v59 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v59 + 48);
        }
        while (v59 != (pxrInternal__aapl__pxrReserved__::UsdObject *)v60);
      }
      v98 = (void **)&v102;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100](&v98);
      if ((v62 & 1) == 0 || (v6 & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithAuthoredValues((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v117);
        v65 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v102;
        v66 = v103;
        while (1)
        {
          if (v65 == (pxrInternal__aapl__pxrReserved__::UsdObject *)v66)
          {
            v98 = (void **)&v102;
            std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100](&v98);
            break;
          }
          v67 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v65);
          if ((*(_QWORD *)v67 & 0xFFFFFFFFFFFFFFF8) != 0)
            v68 = (unsigned __int8 *)((*(_QWORD *)v67 & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            v68 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v67);
          if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v118, v68))
          {
            if ((realityio::isTexCoord2(v65, v69) & 1) != 0 || realityio::isScalar2(v65, v70))
            {
              v61 += 2;
              a5[2] = v61;
              v72 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v65);
              if ((*(_QWORD *)v72 & 0xFFFFFFFFFFFFFFF8) != 0)
                v73 = (unsigned __int8 *)((*(_QWORD *)v72 & 0xFFFFFFFFFFFFFFF8) + 16);
              else
                v73 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v72);
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v73, (uint64_t)v73);
              if ((v6 & 1) == 0)
                goto LABEL_142;
LABEL_135:
              v62 = 1;
              goto LABEL_136;
            }
            if (realityio::isTexCoord3(v65, v71))
            {
              v61 += 3;
              a5[2] = v61;
              v74 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v65);
              if ((*(_QWORD *)v74 & 0xFFFFFFFFFFFFFFF8) != 0)
                v75 = (unsigned __int8 *)((*(_QWORD *)v74 & 0xFFFFFFFFFFFFFFF8) + 16);
              else
                v75 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v74);
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v75, (uint64_t)v75);
              if (!v6)
              {
LABEL_142:
                v98 = (void **)&v102;
                std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100](&v98);
                goto LABEL_145;
              }
              goto LABEL_135;
            }
          }
LABEL_136:
          v65 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v65 + 48);
        }
      }
      if ((v62 & 1) != 0)
      {
LABEL_145:
        v61 += 6;
        a5[2] = v61;
      }
      if (a4)
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithAuthoredValues((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v117);
        v76 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v102;
        v77 = v103;
        while (v76 != (pxrInternal__aapl__pxrReserved__::UsdObject *)v77)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar())
          {
            v78 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v76);
            v79 = (unsigned __int8 *)((*(_QWORD *)v78 & 0xFFFFFFFFFFFFFFF8) != 0
                                    ? (*(_QWORD *)v78 & 0xFFFFFFFFFFFFFFF8) + 16
                                    : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v78));
            if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v118, v79))
            {
              TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(v76);
              pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
              v61 += v100;
              a5[2] = v61;
              v80 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v76);
              if ((*(_QWORD *)v80 & 0xFFFFFFFFFFFFFFF8) != 0)
                v81 = (unsigned __int8 *)((*(_QWORD *)v80 & 0xFFFFFFFFFFFFFFF8) + 16);
              else
                v81 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v80);
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, v81, (uint64_t)v81);
            }
          }
          v76 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v76 + 48);
        }
        v98 = (void **)&v102;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100](&v98);
      }
      if ((v110 & 7) != 0)
      {
        v82 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((v109 & 7) != 0)
      {
        v84 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
      if (v107)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107);
      if ((v115 & 7) != 0)
      {
        v86 = (unsigned int *)(v115 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((v114 & 7) != 0)
      {
        v88 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v113);
      if (v112)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v112);
      if ((v116 & 7) != 0)
      {
        v90 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      MEMORY[0x2348B21DC](v117);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v118);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v120);
      if ((v125 & 7) != 0)
      {
        v92 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v124);
      if (v123)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v123);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v126);
  if ((v131 & 7) != 0)
  {
    v94 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v95 = __ldxr(v94);
    while (__stlxr(v95 - 2, v94));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v130);
  result = v129;
  if (v129)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v129);
  return result;
}

uint64_t realityio::addAttributeFromUsdSkelBlendShape(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *a3)
{
  unint64_t *v5;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int VertexCount;
  uint64_t v17;
  std::string *v18;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *Data;
  uint64_t v20;
  __int128 v21;
  _OWORD *v22;
  float64x2_t *v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  _OWORD *v27;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  std::vector<unsigned int>::pointer begin;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  float64x2_t *v60;
  float64x2_t *v61;
  float64x2_t *v62;
  float64x2_t v63;
  float v64;
  _OWORD *v65;
  uint64_t v66;
  _OWORD *v67;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  std::vector<unsigned int>::pointer v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t TypeName;
  char v88[8];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92[8];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::string v96;
  std::vector<unsigned int>::value_type __x;
  std::vector<unsigned int> v98;
  void *__p;
  _OWORD *v100;
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  float64x2_t *v107;
  char v108[8];
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  char v112[8];
  __int128 v113;
  __int128 v114;
  float64x2_t *v115;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v96 = *(std::string *)a2;
  std::string::append(&v96, "|blendTargetPosDeltas");
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetOffsetsAttr(a3);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v92) & 1) == 0)
  {
    v9 = 0;
    goto LABEL_99;
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetPointIndicesAttr(a3);
  if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v88) & 1) != 0)
  {
    TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v92);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    v5 = (unint64_t *)MEMORY[0x24BEE82A0];
    if (!atomic_load(MEMORY[0x24BEE82A0]))
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
      goto LABEL_15;
    if (!atomic_load(v5))
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
      goto LABEL_15;
    if (!atomic_load(v5))
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
LABEL_15:
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v92, (uint64_t)v112);
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v88, (uint64_t)v108);
      v9 = 0;
      if (v112[0] && v108[0])
      {
        v105 = v113;
        v106 = v114;
        v107 = v115;
        if (v115)
        {
          v10 = (unint64_t *)&v115[-1];
          if (*((_QWORD *)&v106 + 1))
            v10 = (unint64_t *)*((_QWORD *)&v106 + 1);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v102 = v109;
        v103 = v110;
        v104 = v111;
        if (v111)
        {
          v12 = (unint64_t *)(v111 - 16);
          if (*((_QWORD *)&v103 + 1))
            v12 = (unint64_t *)*((_QWORD *)&v103 + 1);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v14 = v102;
        VertexCount = REGeomModelDescriptorGetVertexCount();
        if (v14 <= VertexCount && (_QWORD)v105 == v14)
        {
          __p = 0;
          v100 = 0;
          v101 = 0;
          memset(&v98, 0, sizeof(v98));
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, v14 + 1);
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&__p, v105);
          v22 = __p;
          if ((_QWORD)v105)
          {
            v23 = v107;
            v24 = 12 * v105;
            do
            {
              *(float64_t *)&v21 = v23->f64[0];
              DWORD2(v21) = LODWORD(v23->f64[1]);
              *v22++ = v21;
              v23 = (float64x2_t *)((char *)v23 + 12);
              v24 -= 12;
            }
            while (v24);
            v22 = __p;
          }
          v25 = v100;
          v26 = v100 - v22;
          __x = v26;
          if ((unint64_t)v100 >= v101)
          {
            if ((unint64_t)(v26 + 1) >> 60)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v38 = v101 - (_QWORD)v22;
            v39 = v38 >> 3;
            if (v38 >> 3 <= (unint64_t)(v26 + 1))
              v39 = v26 + 1;
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
              v40 = 0xFFFFFFFFFFFFFFFLL;
            else
              v40 = v39;
            if (v40)
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v101, v40);
            else
              v41 = 0;
            v42 = &v41[16 * v26];
            v43 = &v41[16 * v40];
            *(_OWORD *)v42 = 0u;
            v27 = v42 + 16;
            v45 = (char *)__p;
            v44 = (char *)v100;
            if (v100 != __p)
            {
              do
              {
                v46 = *((_OWORD *)v44 - 1);
                v44 -= 16;
                *((_OWORD *)v42 - 1) = v46;
                v42 -= 16;
              }
              while (v44 != v45);
              v44 = (char *)__p;
            }
            __p = v42;
            v100 = v27;
            v101 = (unint64_t)v43;
            if (v44)
              operator delete(v44);
          }
          else
          {
            *v100 = 0u;
            v27 = v25 + 1;
          }
          v100 = v27;
          std::vector<unsigned int>::resize(&v98, VertexCount, &__x);
          v47 = v102;
          if ((_QWORD)v102)
          {
            v48 = 0;
            v49 = v104;
            v50 = 1;
            begin = v98.__begin_;
            while (1)
            {
              v9 = 0;
              v52 = *(unsigned int *)(v49 + 4 * v48);
              if ((v52 & 0x80000000) != 0 || v52 >= VertexCount)
                break;
              v53 = v50 - 1;
              v48 = v50;
              v54 = v47 > v50++;
              begin[v52] = v53;
              if (!v54)
                goto LABEL_87;
            }
          }
          else
          {
LABEL_87:
            v9 = REGeomModelDescriptorAddIndexedAttributeVector3F();
          }
          if (v98.__begin_)
          {
            v98.__end_ = v98.__begin_;
            operator delete(v98.__begin_);
          }
          if (__p)
          {
            v100 = __p;
            operator delete(__p);
          }
        }
        else
        {
          v9 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v102);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v105);
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v108);
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)v112);
      goto LABEL_94;
    }
    if (!atomic_load(v5))
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
      goto LABEL_53;
    if (!atomic_load(v5))
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
      goto LABEL_53;
    if (!atomic_load(v5))
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
LABEL_53:
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((uint64_t)v112, (pxrInternal__aapl__pxrReserved__::UsdObject *)v92);
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v88, (uint64_t)v108);
      v9 = 0;
      if (v112[0] && v108[0])
      {
        v105 = v113;
        v106 = v114;
        v107 = v115;
        if (v115)
        {
          v31 = (unint64_t *)&v115[-1];
          if (*((_QWORD *)&v106 + 1))
            v31 = (unint64_t *)*((_QWORD *)&v106 + 1);
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        v102 = v109;
        v103 = v110;
        v104 = v111;
        if (v111)
        {
          v33 = (unint64_t *)(v111 - 16);
          if (*((_QWORD *)&v103 + 1))
            v33 = (unint64_t *)*((_QWORD *)&v103 + 1);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        v35 = v102;
        v36 = REGeomModelDescriptorGetVertexCount();
        if (v35 <= v36 && (_QWORD)v105 == v35)
        {
          __p = 0;
          v100 = 0;
          v101 = 0;
          memset(&v98, 0, sizeof(v98));
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, v35 + 1);
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&__p, v105);
          v60 = (float64x2_t *)__p;
          if ((_QWORD)v105)
          {
            v61 = v107;
            v62 = (float64x2_t *)((char *)v107 + 24 * v105);
            do
            {
              v63 = *v61;
              *(float32x2_t *)&v63.f64[0] = vcvt_f32_f64(*v61);
              v64 = v61[1].f64[0];
              *(float *)&v63.f64[1] = v64;
              *v60++ = v63;
              v61 = (float64x2_t *)((char *)v61 + 24);
            }
            while (v61 != v62);
            v60 = (float64x2_t *)__p;
          }
          v65 = v100;
          v66 = ((char *)v100 - (char *)v60) >> 4;
          __x = v66;
          if ((unint64_t)v100 >= v101)
          {
            if ((unint64_t)(v66 + 1) >> 60)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v71 = v101 - (_QWORD)v60;
            v72 = v71 >> 3;
            if (v71 >> 3 <= (unint64_t)(v66 + 1))
              v72 = v66 + 1;
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0)
              v73 = 0xFFFFFFFFFFFFFFFLL;
            else
              v73 = v72;
            if (v73)
              v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v101, v73);
            else
              v74 = 0;
            v75 = &v74[16 * v66];
            v76 = &v74[16 * v73];
            *(_OWORD *)v75 = 0u;
            v67 = v75 + 16;
            v78 = (char *)__p;
            v77 = (char *)v100;
            if (v100 != __p)
            {
              do
              {
                v79 = *((_OWORD *)v77 - 1);
                v77 -= 16;
                *((_OWORD *)v75 - 1) = v79;
                v75 -= 16;
              }
              while (v77 != v78);
              v77 = (char *)__p;
            }
            __p = v75;
            v100 = v67;
            v101 = (unint64_t)v76;
            if (v77)
              operator delete(v77);
          }
          else
          {
            *v100 = 0u;
            v67 = v65 + 1;
          }
          v100 = v67;
          std::vector<unsigned int>::resize(&v98, v36, &__x);
          v80 = v102;
          if ((_QWORD)v102)
          {
            v81 = 0;
            v82 = v104;
            v83 = 1;
            v84 = v98.__begin_;
            while (1)
            {
              v9 = 0;
              v85 = *(unsigned int *)(v82 + 4 * v81);
              if ((v85 & 0x80000000) != 0 || v85 >= v36)
                break;
              v86 = v83 - 1;
              v81 = v83;
              v54 = v80 > v83++;
              v84[v85] = v86;
              if (!v54)
                goto LABEL_142;
            }
          }
          else
          {
LABEL_142:
            v9 = REGeomModelDescriptorAddIndexedAttributeVector3F();
          }
          if (v98.__begin_)
          {
            v98.__end_ = v98.__begin_;
            operator delete(v98.__begin_);
          }
          if (__p)
          {
            v100 = __p;
            operator delete(__p);
          }
        }
        else
        {
          v9 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v102);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v105);
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v108);
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,realityio::DetailedError>::~Result((uint64_t)v112);
      goto LABEL_94;
    }
    if (!atomic_load(v5))
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
    {
      if (!atomic_load(v5))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
      {
        if (!atomic_load(v5))
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
        if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        {
          v9 = 0;
          goto LABEL_94;
        }
      }
    }
    v20 = _ZN9realityio29addIndexedBlendShapeAttributeIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKNS1_12UsdAttributeESH_(*a1, (int)&v96, (pxrInternal__aapl__pxrReserved__::UsdObject *)v92, (pxrInternal__aapl__pxrReserved__::UsdObject *)v88);
  }
  else
  {
    v17 = *a1;
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v96;
    else
      v18 = (std::string *)v96.__r_.__value_.__r.__words[0];
    Data = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
    v20 = realityio::addUsdAttributeToGeomModelDescriptor(v17, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v92, (unint64_t)v18, (std::vector<unsigned int>::size_type *)Data + 153);
  }
  v9 = v20;
LABEL_94:
  if ((v91 & 7) != 0)
  {
    v55 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFFFF8);
    do
      v56 = __ldxr(v55);
    while (__stlxr(v56 - 2, v55));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v90);
  if (v89)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v89);
LABEL_99:
  if ((v95 & 7) != 0)
  {
    v57 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v94);
  if (v93)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v93);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  return v9;
}

void sub_230020D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a32);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v32 - 192);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result(v32 - 144);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,realityio::DetailedError>::~Result(v32 - 96);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a11);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a15);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio29addIndexedBlendShapeAttributeIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKNS1_12UsdAttributeESH_(int a1, int a2, pxrInternal__aapl__pxrReserved__::UsdObject *this, pxrInternal__aapl__pxrReserved__::UsdObject *a4)
{
  BOOL v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int VertexCount;
  __int128 v13;
  _OWORD *v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  std::vector<unsigned int>::pointer begin;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  std::vector<unsigned int>::value_type __x;
  std::vector<unsigned int> v40;
  void *__p;
  _OWORD *v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  unsigned __int16 *v49;
  char v50[8];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54[8];
  __int128 v55;
  __int128 v56;
  unsigned __int16 *v57;

  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((uint64_t)v54, this);
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a4, (uint64_t)v50);
  if (v54[0])
    v5 = v50[0] == 0;
  else
    v5 = 1;
  if (v5)
  {
    v6 = 0;
  }
  else
  {
    v47 = v55;
    v48 = v56;
    v49 = v57;
    if (v57)
    {
      v7 = (unint64_t *)(v57 - 8);
      if (*((_QWORD *)&v48 + 1))
        v7 = (unint64_t *)*((_QWORD *)&v48 + 1);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v44 = v51;
    v45 = v52;
    v46 = v53;
    if (v53)
    {
      v9 = (unint64_t *)(v53 - 16);
      if (*((_QWORD *)&v45 + 1))
        v9 = (unint64_t *)*((_QWORD *)&v45 + 1);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    VertexCount = REGeomModelDescriptorGetVertexCount();
    if ((unint64_t)v44 <= VertexCount && (_QWORD)v47 == (_QWORD)v44)
    {
      __p = 0;
      v42 = 0;
      v43 = 0;
      memset(&v40, 0, sizeof(v40));
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, v44 + 1);
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&__p, v47);
      v14 = __p;
      if ((_QWORD)v47)
      {
        v15 = v49;
        v16 = &v49[3 * v47];
        v17 = MEMORY[0x24BEE8B20];
        do
        {
          LODWORD(v13) = *(_DWORD *)(v17 + 4 * *v15);
          DWORD1(v13) = *(_DWORD *)(v17 + 4 * v15[1]);
          DWORD2(v13) = *(_DWORD *)(v17 + 4 * v15[2]);
          *v14++ = v13;
          v15 += 3;
        }
        while (v15 != v16);
        v14 = __p;
      }
      v18 = v42;
      v19 = v42 - v14;
      __x = v19;
      if ((unint64_t)v42 >= v43)
      {
        if ((unint64_t)(v19 + 1) >> 60)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v21 = v43 - (_QWORD)v14;
        v22 = v21 >> 3;
        if (v21 >> 3 <= (unint64_t)(v19 + 1))
          v22 = v19 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
          v23 = 0xFFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v43, v23);
        else
          v24 = 0;
        v25 = &v24[16 * v19];
        v26 = &v24[16 * v23];
        *(_OWORD *)v25 = 0u;
        v20 = v25 + 16;
        v28 = (char *)__p;
        v27 = (char *)v42;
        if (v42 != __p)
        {
          do
          {
            v29 = *((_OWORD *)v27 - 1);
            v27 -= 16;
            *((_OWORD *)v25 - 1) = v29;
            v25 -= 16;
          }
          while (v27 != v28);
          v27 = (char *)__p;
        }
        __p = v25;
        v42 = v20;
        v43 = (unint64_t)v26;
        if (v27)
          operator delete(v27);
      }
      else
      {
        *v42 = 0u;
        v20 = v18 + 1;
      }
      v42 = v20;
      std::vector<unsigned int>::resize(&v40, VertexCount, &__x);
      v30 = v44;
      if ((_QWORD)v44)
      {
        v31 = 0;
        v32 = v46;
        v33 = 1;
        begin = v40.__begin_;
        while (1)
        {
          v6 = 0;
          v35 = *(unsigned int *)(v32 + 4 * v31);
          if ((v35 & 0x80000000) != 0 || v35 >= VertexCount)
            break;
          v36 = v33 - 1;
          v31 = v33;
          v37 = v30 > v33++;
          begin[v35] = v36;
          if (!v37)
            goto LABEL_45;
        }
      }
      else
      {
LABEL_45:
        v6 = REGeomModelDescriptorAddIndexedAttributeVector3F();
      }
      if (v40.__begin_)
      {
        v40.__end_ = v40.__begin_;
        operator delete(v40.__begin_);
      }
      if (__p)
      {
        v42 = __p;
        operator delete(__p);
      }
    }
    else
    {
      v6 = 0;
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v44);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v47);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v50);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,realityio::DetailedError>::~Result((uint64_t)v54);
  return v6;
}

void sub_230021164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a17);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a23);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result(v23 - 144);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,realityio::DetailedError>::~Result(v23 - 96);
  _Unwind_Resume(a1);
}

double std::__optional_storage_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  double result;
  __int128 v6;

  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 40))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((_QWORD *)a1);
        v4 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v4;
        result = 0.0;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 32) = 0;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    std::__optional_destruct_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::reset[abi:ne180100](a1);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return result;
}

void std::__optional_destruct_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((_QWORD *)a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;

  std::__optional_destruct_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 352);
  std::__optional_destruct_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 304);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  v2 = *((_QWORD *)this + 33);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 256);
  v5 = *((_QWORD *)this + 31);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  v6 = *((_QWORD *)this + 29);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 224);
  v9 = *((_QWORD *)this + 27);
  if (v9)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  v10 = *((_QWORD *)this + 25);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 192);
  v13 = *((_QWORD *)this + 23);
  if (v13)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  v14 = *((_QWORD *)this + 21);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 160);
  v17 = *((_QWORD *)this + 19);
  if (v17)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
  v18 = *((_QWORD *)this + 16);
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  v21 = *((_QWORD *)this + 15);
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 112);
  v24 = *((_QWORD *)this + 13);
  if (v24)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
  v25 = *((_QWORD *)this + 10);
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  v28 = *((_QWORD *)this + 9);
  if ((v28 & 7) != 0)
  {
    v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 64);
  v31 = *((_QWORD *)this + 7);
  if (v31)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
  v32 = *((_QWORD *)this + 5);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 3);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v38 = *((_QWORD *)this + 1);
  if (v38)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v38);
}

uint64_t std::__optional_destruct_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((_QWORD *)a1);
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_2300216B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v12;
  std::type_info *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  uint64_t v15;
  int v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v27;
  std::string v28;
  std::string v29;
  void *__p[2];
  std::string::size_type v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  std::string v35;
  _BYTE v36[8];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v37 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v36))
      {
        v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        v7 = *(_DWORD *)(v6 + 8);
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = *(_QWORD *)v6;
        *(_DWORD *)(a3 + 16) = v7;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
      {
        v13 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        v14 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v35, (const pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        if (v35.__r_.__value_.__l.__size_)
        {
          v15 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>(v14);
          v16 = *(_DWORD *)(v15 + 8);
          *(_BYTE *)a3 = 1;
          *(_QWORD *)(a3 + 8) = *(_QWORD *)v15;
          *(_DWORD *)(a3 + 16) = v16;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v32;
          v27 = v34;
          *(_QWORD *)(a3 + 24) = v33;
          *(_QWORD *)(a3 + 32) = v27;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v34 + 7);
          LOBYTE(v27) = HIBYTE(v34);
          v34 = 0uLL;
          v33 = 0;
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v27;
          if (SHIBYTE(v31) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v35);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v32;
      v25 = v34;
      *(_QWORD *)(a3 + 24) = v33;
      *(_QWORD *)(a3 + 32) = v25;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v34 + 7);
      LOBYTE(v25) = HIBYTE(v34);
      v34 = 0uLL;
      v33 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v25;
      if ((SHIBYTE(v31) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        return;
      }
      v24 = __p[0];
    }
    else
    {
      v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
      std::operator+<char>();
      v17 = std::string::append(&v29, ") at the given time: ");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v28, *a2);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v28;
      else
        v19 = (std::string *)v28.__r_.__value_.__r.__words[0];
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      else
        size = v28.__r_.__value_.__l.__size_;
      v21 = std::string::append(&v35, (const std::string::value_type *)v19, size);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v31 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v32;
      v23 = v34;
      *(_QWORD *)(a3 + 24) = v33;
      *(_QWORD *)(a3 + 32) = v23;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v34 + 7);
      LOBYTE(v23) = HIBYTE(v34);
      v34 = 0uLL;
      v33 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v23;
      if (SHIBYTE(v31) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      v24 = (void *)v29.__r_.__value_.__r.__words[0];
    }
    operator delete(v24);
    goto LABEL_38;
  }
  v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v32;
  v10 = v34;
  *(_QWORD *)(a3 + 24) = v33;
  *(_QWORD *)(a3 + 32) = v10;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v34 + 7);
  LOBYTE(v10) = HIBYTE(v34);
  v34 = 0uLL;
  v33 = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v10;
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
}

void sub_230021ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_230021CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v16;
  std::type_info *v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v35;
  std::string v36;
  std::string v37;
  void *__p[2];
  std::string::size_type v39;
  __int128 v40;
  _OWORD v41[2];
  std::string v42;
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v44 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43))
      {
        v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v7 = *(_OWORD *)(v6 + 16);
        v40 = *(_OWORD *)v6;
        v41[0] = v7;
        v8 = *(_QWORD *)(v6 + 32);
        if (v8)
        {
          v9 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
          if (!*((_QWORD *)&v41[0] + 1))
            v9 = (unint64_t *)(v8 - 16);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        *(_BYTE *)a3 = 1;
        v11 = v41[0];
        *(_OWORD *)(a3 + 8) = v40;
        *(_OWORD *)(a3 + 24) = v11;
        v40 = 0u;
        v41[0] = 0u;
        *(_QWORD *)(a3 + 40) = v8;
        *(_QWORD *)&v41[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
      {
        v17 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v18 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, (const pxrInternal__aapl__pxrReserved__::VtValue *)v17);
        if (v42.__r_.__value_.__l.__size_)
        {
          v19 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(v18);
          v20 = *(_OWORD *)(v19 + 16);
          v40 = *(_OWORD *)v19;
          v41[0] = v20;
          v21 = *(_QWORD *)(v19 + 32);
          if (v21)
          {
            v22 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
            if (!*((_QWORD *)&v41[0] + 1))
              v22 = (unint64_t *)(v21 - 16);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          *(_BYTE *)a3 = 1;
          v24 = v41[0];
          *(_OWORD *)(a3 + 8) = v40;
          *(_OWORD *)(a3 + 24) = v24;
          v40 = 0u;
          v41[0] = 0u;
          *(_QWORD *)(a3 + 40) = v21;
          *(_QWORD *)&v41[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v40;
          v35 = *((_QWORD *)&v41[0] + 1);
          *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
          *(_QWORD *)(a3 + 32) = v35;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
          LOBYTE(v35) = BYTE7(v41[1]);
          memset(v41, 0, 24);
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v35;
          if (SHIBYTE(v39) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v33 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v33;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v33) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v33;
      if ((SHIBYTE(v39) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        return;
      }
      v32 = __p[0];
    }
    else
    {
      v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      std::operator+<char>();
      v25 = std::string::append(&v37, ") at the given time: ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v36, *a2);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v36;
      else
        v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        size = v36.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v42, (const std::string::value_type *)v27, size);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v39 = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v31 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v31;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v31) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v31;
      if (SHIBYTE(v39) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      v32 = (void *)v37.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_46;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v40;
  v14 = *((_QWORD *)&v41[0] + 1);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
  *(_QWORD *)(a3 + 32) = v14;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
  LOBYTE(v14) = BYTE7(v41[1]);
  memset(v41, 0, 24);
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v14;
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
}

void sub_230022170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(_QWORD *a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = (uint64_t)&v4[-*a1] >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v20 = &v3[8 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 3)
  {
    bzero(v4, 8 * v6);
    v20 = &v4[8 * v6];
LABEL_17:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v9 = v8 - (_QWORD)v3;
  v10 = v9 >> 2;
  if (v9 >> 2 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v11);
  v13 = &v12[8 * v5];
  v15 = &v12[8 * v14];
  bzero(v13, 8 * v6);
  v16 = &v13[8 * v6];
  v18 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      v19 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *((_QWORD *)v13 - 1) = v19;
      v13 -= 8;
    }
    while (v17 != v18);
    v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
    operator delete(v17);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3d>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3d>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_23002265C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v16;
  char v17;
  std::string::size_type v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  uint64_t v20;
  char v21;
  std::string::size_type v22;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v24;
  const pxrInternal__aapl__pxrReserved__::VtValue *v25;
  std::type_info *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  std::string::size_type v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  pxrInternal__aapl__pxrReserved__::TfToken *v46;
  uint64_t v47;
  char v48;
  std::string::size_type v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  void *__p[2];
  std::string::size_type v59;
  std::string v60;
  std::string v61;
  _QWORD v62[2];
  std::type_info v63;
  __int128 v64;
  _BYTE v65[24];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    v54 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v20 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v21 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v22 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v22;
      *(_BYTE *)(a1 + 47) = v21;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      goto LABEL_59;
    }
    v63.__type_name = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63))
      {
        v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
        v10 = *(_OWORD *)(v9 + 16);
        v64 = *(_OWORD *)v9;
        *(_OWORD *)v65 = v10;
        v11 = *(_QWORD *)(v9 + 32);
        if (v11)
        {
          v12 = *(unint64_t **)&v65[8];
          if (!*(_QWORD *)&v65[8])
            v12 = (unint64_t *)(v11 - 16);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        *(_BYTE *)a1 = 1;
        v14 = *(_OWORD *)v65;
        *(_OWORD *)(a1 + 8) = v64;
        *(_OWORD *)(a1 + 24) = v14;
        v64 = 0u;
        *(_OWORD *)v65 = 0u;
        *(_QWORD *)(a1 + 40) = v11;
        *(_QWORD *)&v65[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v64);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63) & 1) != 0)
        {
          v26 = &v63;
        }
        else
        {
          v26 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v63, &v64);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v64);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61, (const pxrInternal__aapl__pxrReserved__::VtValue *)v26);
        if (v61.__r_.__value_.__l.__size_)
        {
          v40 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
          v41 = *(_OWORD *)(v40 + 16);
          v64 = *(_OWORD *)v40;
          *(_OWORD *)v65 = v41;
          v42 = *(_QWORD *)(v40 + 32);
          if (v42)
          {
            v43 = *(unint64_t **)&v65[8];
            if (!*(_QWORD *)&v65[8])
              v43 = (unint64_t *)(v42 - 16);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          *(_BYTE *)a1 = 1;
          v45 = *(_OWORD *)v65;
          *(_OWORD *)(a1 + 8) = v64;
          *(_OWORD *)(a1 + 24) = v45;
          v64 = 0u;
          *(_OWORD *)v65 = 0u;
          *(_QWORD *)(a1 + 40) = v42;
          *(_QWORD *)&v65[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v64);
        }
        else
        {
          v46 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v46);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a1 + 8) = v64;
          v60.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
          v47 = *(_QWORD *)v65;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
          v48 = v65[23];
          memset(v65, 0, sizeof(v65));
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
          v49 = v60.__r_.__value_.__r.__words[0];
          *(_QWORD *)(a1 + 24) = v47;
          *(_QWORD *)(a1 + 32) = v49;
          *(_BYTE *)(a1 + 47) = v48;
          if (SHIBYTE(v59) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v37 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v38 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v39 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v37;
      *(_QWORD *)(a1 + 32) = v39;
      *(_BYTE *)(a1 + 47) = v38;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
LABEL_59:
        v50 = v56;
        if (v56)
        {
          v51 = (unsigned int *)(v56 + 8);
          do
          {
            v52 = __ldxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        }
        return;
      }
      v36 = __p[0];
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
      std::operator+<char>();
      v27 = std::string::append(&v60, ") at the given time: ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v57, v54);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v57;
      else
        v29 = (std::string *)v57.__r_.__value_.__r.__words[0];
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      else
        size = v57.__r_.__value_.__l.__size_;
      v31 = std::string::append(&v61, (const std::string::value_type *)v29, size);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v59 = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v62[0] = *(_QWORD *)&v65[8];
      v33 = *(_QWORD *)v65;
      *(_QWORD *)((char *)v62 + 7) = *(_QWORD *)&v65[15];
      v34 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v62 + 7);
      v35 = v62[0];
      *(_QWORD *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 32) = v35;
      *(_BYTE *)(a1 + 47) = v34;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_58;
      v36 = (void *)v60.__r_.__value_.__r.__words[0];
    }
    operator delete(v36);
    goto LABEL_58;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a1 + 8) = v64;
  v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
  v16 = *(_QWORD *)v65;
  *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
  v17 = v65[23];
  memset(v65, 0, sizeof(v65));
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
  v18 = v61.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v18;
  *(_BYTE *)(a1 + 47) = v17;
  if (SHIBYTE(v59) < 0)
    operator delete(__p[0]);
}

void sub_230022CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if (a11)
  {
    v33 = a11 + 2;
    do
    {
      v34 = __ldxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3d>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v12;
  std::type_info *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v27;
  std::string v28;
  std::string v29;
  void *__p[2];
  std::string::size_type v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  std::string v35;
  _BYTE v36[8];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v37 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v36))
      {
        v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        v7 = *(_QWORD *)(v6 + 16);
        *(_BYTE *)a3 = 1;
        *(_OWORD *)(a3 + 8) = *(_OWORD *)v6;
        *(_QWORD *)(a3 + 24) = v7;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
      {
        v13 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        v14 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v35, (const pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        if (v35.__r_.__value_.__l.__size_)
        {
          v15 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3d>(v14);
          v16 = *(_QWORD *)(v15 + 16);
          *(_BYTE *)a3 = 1;
          *(_OWORD *)(a3 + 8) = *(_OWORD *)v15;
          *(_QWORD *)(a3 + 24) = v16;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v32;
          v27 = v34;
          *(_QWORD *)(a3 + 24) = v33;
          *(_QWORD *)(a3 + 32) = v27;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v34 + 7);
          LOBYTE(v27) = HIBYTE(v34);
          v34 = 0uLL;
          v33 = 0;
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v27;
          if (SHIBYTE(v31) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v35);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v32;
      v25 = v34;
      *(_QWORD *)(a3 + 24) = v33;
      *(_QWORD *)(a3 + 32) = v25;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v34 + 7);
      LOBYTE(v25) = HIBYTE(v34);
      v34 = 0uLL;
      v33 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v25;
      if ((SHIBYTE(v31) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        return;
      }
      v24 = __p[0];
    }
    else
    {
      v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
      std::operator+<char>();
      v17 = std::string::append(&v29, ") at the given time: ");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v28, *a2);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v28;
      else
        v19 = (std::string *)v28.__r_.__value_.__r.__words[0];
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      else
        size = v28.__r_.__value_.__l.__size_;
      v21 = std::string::append(&v35, (const std::string::value_type *)v19, size);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v31 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v32;
      v23 = v34;
      *(_QWORD *)(a3 + 24) = v33;
      *(_QWORD *)(a3 + 32) = v23;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v34 + 7);
      LOBYTE(v23) = HIBYTE(v34);
      v34 = 0uLL;
      v33 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v23;
      if (SHIBYTE(v31) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      v24 = (void *)v29.__r_.__value_.__r.__words[0];
    }
    operator delete(v24);
    goto LABEL_38;
  }
  v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v32;
  v10 = v34;
  *(_QWORD *)(a3 + 24) = v33;
  *(_QWORD *)(a3 + 32) = v10;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v34 + 7);
  LOBYTE(v10) = HIBYTE(v34);
  v34 = 0uLL;
  v33 = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v10;
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
}

void sub_230023190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v16;
  char v17;
  std::string::size_type v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  uint64_t v20;
  char v21;
  std::string::size_type v22;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v24;
  const pxrInternal__aapl__pxrReserved__::VtValue *v25;
  std::type_info *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  std::string::size_type v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  pxrInternal__aapl__pxrReserved__::TfToken *v46;
  uint64_t v47;
  char v48;
  std::string::size_type v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  void *__p[2];
  std::string::size_type v59;
  std::string v60;
  std::string v61;
  _QWORD v62[2];
  std::type_info v63;
  __int128 v64;
  _BYTE v65[24];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    v54 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v20 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v21 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v22 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v22;
      *(_BYTE *)(a1 + 47) = v21;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      goto LABEL_59;
    }
    v63.__type_name = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63))
      {
        v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
        v10 = *(_OWORD *)(v9 + 16);
        v64 = *(_OWORD *)v9;
        *(_OWORD *)v65 = v10;
        v11 = *(_QWORD *)(v9 + 32);
        if (v11)
        {
          v12 = *(unint64_t **)&v65[8];
          if (!*(_QWORD *)&v65[8])
            v12 = (unint64_t *)(v11 - 16);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        *(_BYTE *)a1 = 1;
        v14 = *(_OWORD *)v65;
        *(_OWORD *)(a1 + 8) = v64;
        *(_OWORD *)(a1 + 24) = v14;
        v64 = 0u;
        *(_OWORD *)v65 = 0u;
        *(_QWORD *)(a1 + 40) = v11;
        *(_QWORD *)&v65[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v64);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63) & 1) != 0)
        {
          v26 = &v63;
        }
        else
        {
          v26 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v63, &v64);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v64);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61, (const pxrInternal__aapl__pxrReserved__::VtValue *)v26);
        if (v61.__r_.__value_.__l.__size_)
        {
          v40 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
          v41 = *(_OWORD *)(v40 + 16);
          v64 = *(_OWORD *)v40;
          *(_OWORD *)v65 = v41;
          v42 = *(_QWORD *)(v40 + 32);
          if (v42)
          {
            v43 = *(unint64_t **)&v65[8];
            if (!*(_QWORD *)&v65[8])
              v43 = (unint64_t *)(v42 - 16);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          *(_BYTE *)a1 = 1;
          v45 = *(_OWORD *)v65;
          *(_OWORD *)(a1 + 8) = v64;
          *(_OWORD *)(a1 + 24) = v45;
          v64 = 0u;
          *(_OWORD *)v65 = 0u;
          *(_QWORD *)(a1 + 40) = v42;
          *(_QWORD *)&v65[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v64);
        }
        else
        {
          v46 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v46);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a1 + 8) = v64;
          v60.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
          v47 = *(_QWORD *)v65;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
          v48 = v65[23];
          memset(v65, 0, sizeof(v65));
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
          v49 = v60.__r_.__value_.__r.__words[0];
          *(_QWORD *)(a1 + 24) = v47;
          *(_QWORD *)(a1 + 32) = v49;
          *(_BYTE *)(a1 + 47) = v48;
          if (SHIBYTE(v59) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v37 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v38 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v39 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v37;
      *(_QWORD *)(a1 + 32) = v39;
      *(_BYTE *)(a1 + 47) = v38;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
LABEL_59:
        v50 = v56;
        if (v56)
        {
          v51 = (unsigned int *)(v56 + 8);
          do
          {
            v52 = __ldxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        }
        return;
      }
      v36 = __p[0];
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
      std::operator+<char>();
      v27 = std::string::append(&v60, ") at the given time: ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v57, v54);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v57;
      else
        v29 = (std::string *)v57.__r_.__value_.__r.__words[0];
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      else
        size = v57.__r_.__value_.__l.__size_;
      v31 = std::string::append(&v61, (const std::string::value_type *)v29, size);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v59 = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v62[0] = *(_QWORD *)&v65[8];
      v33 = *(_QWORD *)v65;
      *(_QWORD *)((char *)v62 + 7) = *(_QWORD *)&v65[15];
      v34 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v62 + 7);
      v35 = v62[0];
      *(_QWORD *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 32) = v35;
      *(_BYTE *)(a1 + 47) = v34;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_58;
      v36 = (void *)v60.__r_.__value_.__r.__words[0];
    }
    operator delete(v36);
    goto LABEL_58;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a1 + 8) = v64;
  v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
  v16 = *(_QWORD *)v65;
  *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
  v17 = v65[23];
  memset(v65, 0, sizeof(v65));
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
  v18 = v61.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v18;
  *(_BYTE *)(a1 + 47) = v17;
  if (SHIBYTE(v59) < 0)
    operator delete(__p[0]);
}

void sub_230023AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if (a11)
  {
    v33 = a11 + 2;
    do
    {
      v34 = __ldxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_230023FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v16;
  std::type_info *v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v35;
  std::string v36;
  std::string v37;
  void *__p[2];
  std::string::size_type v39;
  __int128 v40;
  _OWORD v41[2];
  std::string v42;
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v44 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43))
      {
        v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v7 = *(_OWORD *)(v6 + 16);
        v40 = *(_OWORD *)v6;
        v41[0] = v7;
        v8 = *(_QWORD *)(v6 + 32);
        if (v8)
        {
          v9 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
          if (!*((_QWORD *)&v41[0] + 1))
            v9 = (unint64_t *)(v8 - 16);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        *(_BYTE *)a3 = 1;
        v11 = v41[0];
        *(_OWORD *)(a3 + 8) = v40;
        *(_OWORD *)(a3 + 24) = v11;
        v40 = 0u;
        v41[0] = 0u;
        *(_QWORD *)(a3 + 40) = v8;
        *(_QWORD *)&v41[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
      {
        v17 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v18 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, (const pxrInternal__aapl__pxrReserved__::VtValue *)v17);
        if (v42.__r_.__value_.__l.__size_)
        {
          v19 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(v18);
          v20 = *(_OWORD *)(v19 + 16);
          v40 = *(_OWORD *)v19;
          v41[0] = v20;
          v21 = *(_QWORD *)(v19 + 32);
          if (v21)
          {
            v22 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
            if (!*((_QWORD *)&v41[0] + 1))
              v22 = (unint64_t *)(v21 - 16);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          *(_BYTE *)a3 = 1;
          v24 = v41[0];
          *(_OWORD *)(a3 + 8) = v40;
          *(_OWORD *)(a3 + 24) = v24;
          v40 = 0u;
          v41[0] = 0u;
          *(_QWORD *)(a3 + 40) = v21;
          *(_QWORD *)&v41[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v40;
          v35 = *((_QWORD *)&v41[0] + 1);
          *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
          *(_QWORD *)(a3 + 32) = v35;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
          LOBYTE(v35) = BYTE7(v41[1]);
          memset(v41, 0, 24);
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v35;
          if (SHIBYTE(v39) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v33 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v33;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v33) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v33;
      if ((SHIBYTE(v39) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        return;
      }
      v32 = __p[0];
    }
    else
    {
      v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      std::operator+<char>();
      v25 = std::string::append(&v37, ") at the given time: ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v36, *a2);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v36;
      else
        v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        size = v36.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v42, (const std::string::value_type *)v27, size);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v39 = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v31 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v31;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v31) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v31;
      if (SHIBYTE(v39) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      v32 = (void *)v37.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_46;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v40;
  v14 = *((_QWORD *)&v41[0] + 1);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
  *(_QWORD *)(a3 + 32) = v14;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
  LOBYTE(v14) = BYTE7(v41[1]);
  memset(v41, 0, 24);
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v14;
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
}

void sub_23002448C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<int>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_230024B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v11;
  std::type_info *v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  int v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v25;
  std::string v26;
  std::string v27;
  void *__p[2];
  std::string::size_type v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  std::string v33;
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v35 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        v6 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(_BYTE *)a3 = 1;
        *(_DWORD *)(a3 + 8) = v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      if ((pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB798], v11) & 1) != 0)
      {
        v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          v14 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>(v13);
          *(_BYTE *)a3 = 1;
          *(_DWORD *)(a3 + 8) = v14;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v30;
          v25 = v32;
          *(_QWORD *)(a3 + 24) = v31;
          *(_QWORD *)(a3 + 32) = v25;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          v32 = 0uLL;
          v31 = 0;
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v23 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v23;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      v22 = __p[0];
    }
    else
    {
      v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      std::operator+<char>();
      v15 = std::string::append(&v27, ") at the given time: ");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v26;
      else
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      else
        size = v26.__r_.__value_.__l.__size_;
      v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v21 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v21;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v30;
  v9 = v32;
  *(_QWORD *)(a3 + 24) = v31;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  v32 = 0uLL;
  v31 = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
}

void sub_230024F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<int>::emplace_back<int>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *New;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(int **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew(a1, v11);
    v13 = New;
    if (v4)
    {
      v14 = 4 * v4;
      v15 = New;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)New + v4) = *a2;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void realityio::getAttributeValue<unsigned int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<unsigned int>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_230025288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_23002544C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<unsigned int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v11;
  std::type_info *v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  int v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v25;
  std::string v26;
  std::string v27;
  void *__p[2];
  std::string::size_type v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  std::string v33;
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v35 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        v6 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(_BYTE *)a3 = 1;
        *(_DWORD *)(a3 + 8) = v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      if ((pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB7A0], v11) & 1) != 0)
      {
        v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          v14 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned int>(v13);
          *(_BYTE *)a3 = 1;
          *(_DWORD *)(a3 + 8) = v14;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v30;
          v25 = v32;
          *(_QWORD *)(a3 + 24) = v31;
          *(_QWORD *)(a3 + 32) = v25;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          v32 = 0uLL;
          v31 = 0;
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v23 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v23;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      v22 = __p[0];
    }
    else
    {
      v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      std::operator+<char>();
      v15 = std::string::append(&v27, ") at the given time: ");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v26;
      else
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      else
        size = v26.__r_.__value_.__l.__size_;
      v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v21 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v21;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v30;
  v9 = v32;
  *(_QWORD *)(a3 + 24) = v31;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  v32 = 0uLL;
  v31 = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
}

void sub_230025858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v16;
  std::type_info *v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v35;
  std::string v36;
  std::string v37;
  void *__p[2];
  std::string::size_type v39;
  __int128 v40;
  _OWORD v41[2];
  std::string v42;
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v44 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43))
      {
        v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v7 = *(_OWORD *)(v6 + 16);
        v40 = *(_OWORD *)v6;
        v41[0] = v7;
        v8 = *(_QWORD *)(v6 + 32);
        if (v8)
        {
          v9 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
          if (!*((_QWORD *)&v41[0] + 1))
            v9 = (unint64_t *)(v8 - 16);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        *(_BYTE *)a3 = 1;
        v11 = v41[0];
        *(_OWORD *)(a3 + 8) = v40;
        *(_OWORD *)(a3 + 24) = v11;
        v40 = 0u;
        v41[0] = 0u;
        *(_QWORD *)(a3 + 40) = v8;
        *(_QWORD *)&v41[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
      {
        v17 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v18 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, (const pxrInternal__aapl__pxrReserved__::VtValue *)v17);
        if (v42.__r_.__value_.__l.__size_)
        {
          v19 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(v18);
          v20 = *(_OWORD *)(v19 + 16);
          v40 = *(_OWORD *)v19;
          v41[0] = v20;
          v21 = *(_QWORD *)(v19 + 32);
          if (v21)
          {
            v22 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
            if (!*((_QWORD *)&v41[0] + 1))
              v22 = (unint64_t *)(v21 - 16);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          *(_BYTE *)a3 = 1;
          v24 = v41[0];
          *(_OWORD *)(a3 + 8) = v40;
          *(_OWORD *)(a3 + 24) = v24;
          v40 = 0u;
          v41[0] = 0u;
          *(_QWORD *)(a3 + 40) = v21;
          *(_QWORD *)&v41[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v40;
          v35 = *((_QWORD *)&v41[0] + 1);
          *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
          *(_QWORD *)(a3 + 32) = v35;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
          LOBYTE(v35) = BYTE7(v41[1]);
          memset(v41, 0, 24);
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v35;
          if (SHIBYTE(v39) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v33 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v33;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v33) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v33;
      if ((SHIBYTE(v39) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        return;
      }
      v32 = __p[0];
    }
    else
    {
      v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      std::operator+<char>();
      v25 = std::string::append(&v37, ") at the given time: ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v36, *a2);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v36;
      else
        v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        size = v36.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v42, (const std::string::value_type *)v27, size);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v39 = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v31 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v31;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v31) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v31;
      if (SHIBYTE(v39) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      v32 = (void *)v37.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_46;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v40;
  v14 = *((_QWORD *)&v41[0] + 1);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
  *(_QWORD *)(a3 + 32) = v14;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
  LOBYTE(v14) = BYTE7(v41[1]);
  memset(v41, 0, 24);
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v14;
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
}

void sub_230025D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<unsigned char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<unsigned char>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_230026124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_2300262E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<unsigned char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  char v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v11;
  std::type_info *v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  char v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v25;
  std::string v26;
  std::string v27;
  void *__p[2];
  std::string::size_type v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  std::string v33;
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v35 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned char>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        v6 = *(_BYTE *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned char>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 8) = v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      if ((pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB790], v11) & 1) != 0)
      {
        v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned char>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          v14 = *(_BYTE *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned char>(v13);
          *(_BYTE *)a3 = 1;
          *(_BYTE *)(a3 + 8) = v14;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v30;
          v25 = v32;
          *(_QWORD *)(a3 + 24) = v31;
          *(_QWORD *)(a3 + 32) = v25;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          v32 = 0uLL;
          v31 = 0;
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v23 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v23;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      v22 = __p[0];
    }
    else
    {
      v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      std::operator+<char>();
      v15 = std::string::append(&v27, ") at the given time: ");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v26;
      else
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      else
        size = v26.__r_.__value_.__l.__size_;
      v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v21 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v21;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v30;
  v9 = v32;
  *(_QWORD *)(a3 + 24) = v31;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  v32 = 0uLL;
  v31 = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
}

void sub_2300266F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v16;
  std::type_info *v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v35;
  std::string v36;
  std::string v37;
  void *__p[2];
  std::string::size_type v39;
  __int128 v40;
  _OWORD v41[2];
  std::string v42;
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v44 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43))
      {
        v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v7 = *(_OWORD *)(v6 + 16);
        v40 = *(_OWORD *)v6;
        v41[0] = v7;
        v8 = *(_QWORD *)(v6 + 32);
        if (v8)
        {
          v9 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
          if (!*((_QWORD *)&v41[0] + 1))
            v9 = (unint64_t *)(v8 - 16);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        *(_BYTE *)a3 = 1;
        v11 = v41[0];
        *(_OWORD *)(a3 + 8) = v40;
        *(_OWORD *)(a3 + 24) = v11;
        v40 = 0u;
        v41[0] = 0u;
        *(_QWORD *)(a3 + 40) = v8;
        *(_QWORD *)&v41[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
      {
        v17 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v18 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, (const pxrInternal__aapl__pxrReserved__::VtValue *)v17);
        if (v42.__r_.__value_.__l.__size_)
        {
          v19 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(v18);
          v20 = *(_OWORD *)(v19 + 16);
          v40 = *(_OWORD *)v19;
          v41[0] = v20;
          v21 = *(_QWORD *)(v19 + 32);
          if (v21)
          {
            v22 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
            if (!*((_QWORD *)&v41[0] + 1))
              v22 = (unint64_t *)(v21 - 16);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          *(_BYTE *)a3 = 1;
          v24 = v41[0];
          *(_OWORD *)(a3 + 8) = v40;
          *(_OWORD *)(a3 + 24) = v24;
          v40 = 0u;
          v41[0] = 0u;
          *(_QWORD *)(a3 + 40) = v21;
          *(_QWORD *)&v41[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v40;
          v35 = *((_QWORD *)&v41[0] + 1);
          *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
          *(_QWORD *)(a3 + 32) = v35;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
          LOBYTE(v35) = BYTE7(v41[1]);
          memset(v41, 0, 24);
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v35;
          if (SHIBYTE(v39) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v33 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v33;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v33) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v33;
      if ((SHIBYTE(v39) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        return;
      }
      v32 = __p[0];
    }
    else
    {
      v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      std::operator+<char>();
      v25 = std::string::append(&v37, ") at the given time: ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v36, *a2);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v36;
      else
        v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        size = v36.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v42, (const std::string::value_type *)v27, size);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v39 = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v31 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v31;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v31) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v31;
      if (SHIBYTE(v39) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      v32 = (void *)v37.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_46;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v40;
  v14 = *((_QWORD *)&v41[0] + 1);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
  *(_QWORD *)(a3 + 32) = v14;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
  LOBYTE(v14) = BYTE7(v41[1]);
  memset(v41, 0, 24);
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v14;
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
}

void sub_230026BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtArray<float>::emplace_back<float>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *New;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(int **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew(a1, v11);
    v13 = New;
    if (v4)
    {
      v14 = 4 * v4;
      v15 = New;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)New + v4) = *a2;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_230027124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v16;
  std::type_info *v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v35;
  std::string v36;
  std::string v37;
  void *__p[2];
  std::string::size_type v39;
  __int128 v40;
  _OWORD v41[2];
  std::string v42;
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v44 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43))
      {
        v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v7 = *(_OWORD *)(v6 + 16);
        v40 = *(_OWORD *)v6;
        v41[0] = v7;
        v8 = *(_QWORD *)(v6 + 32);
        if (v8)
        {
          v9 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
          if (!*((_QWORD *)&v41[0] + 1))
            v9 = (unint64_t *)(v8 - 16);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        *(_BYTE *)a3 = 1;
        v11 = v41[0];
        *(_OWORD *)(a3 + 8) = v40;
        *(_OWORD *)(a3 + 24) = v11;
        v40 = 0u;
        v41[0] = 0u;
        *(_QWORD *)(a3 + 40) = v8;
        *(_QWORD *)&v41[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
      {
        v17 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<double>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v18 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, (const pxrInternal__aapl__pxrReserved__::VtValue *)v17);
        if (v42.__r_.__value_.__l.__size_)
        {
          v19 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>(v18);
          v20 = *(_OWORD *)(v19 + 16);
          v40 = *(_OWORD *)v19;
          v41[0] = v20;
          v21 = *(_QWORD *)(v19 + 32);
          if (v21)
          {
            v22 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
            if (!*((_QWORD *)&v41[0] + 1))
              v22 = (unint64_t *)(v21 - 16);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          *(_BYTE *)a3 = 1;
          v24 = v41[0];
          *(_OWORD *)(a3 + 8) = v40;
          *(_OWORD *)(a3 + 24) = v24;
          v40 = 0u;
          v41[0] = 0u;
          *(_QWORD *)(a3 + 40) = v21;
          *(_QWORD *)&v41[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v40;
          v35 = *((_QWORD *)&v41[0] + 1);
          *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
          *(_QWORD *)(a3 + 32) = v35;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
          LOBYTE(v35) = BYTE7(v41[1]);
          memset(v41, 0, 24);
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v35;
          if (SHIBYTE(v39) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v33 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v33;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v33) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v33;
      if ((SHIBYTE(v39) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        return;
      }
      v32 = __p[0];
    }
    else
    {
      v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      std::operator+<char>();
      v25 = std::string::append(&v37, ") at the given time: ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v36, *a2);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v36;
      else
        v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        size = v36.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v42, (const std::string::value_type *)v27, size);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v39 = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v31 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v31;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v31) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v31;
      if (SHIBYTE(v39) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      v32 = (void *)v37.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_46;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v40;
  v14 = *((_QWORD *)&v41[0] + 1);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
  *(_QWORD *)(a3 + 32) = v14;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
  LOBYTE(v14) = BYTE7(v41[1]);
  memset(v41, 0, 24);
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v14;
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
}

void sub_2300275C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<double>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<double>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<double>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void std::vector<int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v5;
  unsigned int *value;
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v7;
  unsigned int *value;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::vector<unsigned int>::size_type v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  std::vector<unsigned int>::size_type v20;
  unsigned int *v21;
  unsigned int *v22;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer i;
  unsigned int v25;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      v16 = 4 * __n;
      v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = (char *)v9 - (char *)this->__begin_;
    v11 = __n + (v10 >> 2);
    if (v11 >> 62)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v18 = (unsigned int *)&v15[4 * v12];
    v19 = &v18[__n];
    v20 = 4 * __n;
    v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    v22 = (unsigned int *)&v15[4 * v14];
    begin = this->__begin_;
    for (i = this->__end_; i != begin; --i)
    {
      v25 = *(i - 1);
      *--v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
      operator delete(begin);
  }
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_230027AB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, const std::vector<unsigned int>::value_type *__x)
{
  std::vector<unsigned int>::pointer end;
  unsigned int *v7;
  std::vector<unsigned int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_230027C38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_230027CAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_230027D20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  pxrInternal__aapl__pxrReserved__::TfToken *v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v13;
  std::type_info *v14;
  pxrInternal__aapl__pxrReserved__::VtValue *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v29;
  std::string v30;
  std::string v31;
  void *__p[2];
  std::string::size_type v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  std::string v37;
  _BYTE v38[8];
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v39 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)v38))
      {
        v6 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)v38);
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 2, v7));
          if ((v8 & 1) == 0)
            v6 &= 0xFFFFFFFFFFFFFFF8;
        }
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v6;
        goto LABEL_48;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v38);
      {
        v14 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)v38);
        v15 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v37, (const pxrInternal__aapl__pxrReserved__::VtValue *)v14);
        if (v37.__r_.__value_.__l.__size_)
        {
          v16 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>(v15);
          if ((v16 & 7) != 0)
          {
            v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 2, v17));
            if ((v18 & 1) == 0)
              v16 &= 0xFFFFFFFFFFFFFFF8;
          }
          *(_BYTE *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v16;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v34, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v34;
          v29 = v36;
          *(_QWORD *)(a3 + 24) = v35;
          *(_QWORD *)(a3 + 32) = v29;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v36 + 7);
          LOBYTE(v29) = HIBYTE(v36);
          v36 = 0uLL;
          v35 = 0;
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v29;
          if (SHIBYTE(v33) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v37);
        goto LABEL_48;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v34, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v34;
      v27 = v36;
      *(_QWORD *)(a3 + 24) = v35;
      *(_QWORD *)(a3 + 32) = v27;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v36 + 7);
      LOBYTE(v27) = HIBYTE(v36);
      v36 = 0uLL;
      v35 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v27;
      if ((SHIBYTE(v33) & 0x80000000) == 0)
      {
LABEL_48:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v38);
        return;
      }
      v26 = __p[0];
    }
    else
    {
      v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
      std::operator+<char>();
      v19 = std::string::append(&v31, ") at the given time: ");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v30, *a2);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v30;
      else
        v21 = (std::string *)v30.__r_.__value_.__r.__words[0];
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      else
        size = v30.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v37, (const std::string::value_type *)v21, size);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v33 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v34, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v34;
      v25 = v36;
      *(_QWORD *)(a3 + 24) = v35;
      *(_QWORD *)(a3 + 32) = v25;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v36 + 7);
      LOBYTE(v25) = HIBYTE(v36);
      v36 = 0uLL;
      v35 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v25;
      if (SHIBYTE(v33) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_48;
      v26 = (void *)v31.__r_.__value_.__r.__words[0];
    }
    operator delete(v26);
    goto LABEL_48;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v34, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v34;
  v11 = v36;
  *(_QWORD *)(a3 + 24) = v35;
  *(_QWORD *)(a3 + 32) = v11;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v36 + 7);
  LOBYTE(v11) = HIBYTE(v36);
  v36 = 0uLL;
  v35 = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v11;
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
}

void sub_230028144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v16;
  std::type_info *v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v35;
  std::string v36;
  std::string v37;
  void *__p[2];
  std::string::size_type v39;
  __int128 v40;
  _OWORD v41[2];
  std::string v42;
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v44 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43))
      {
        v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v7 = *(_OWORD *)(v6 + 16);
        v40 = *(_OWORD *)v6;
        v41[0] = v7;
        v8 = *(_QWORD *)(v6 + 32);
        if (v8)
        {
          v9 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
          if (!*((_QWORD *)&v41[0] + 1))
            v9 = (unint64_t *)(v8 - 16);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        *(_BYTE *)a3 = 1;
        v11 = v41[0];
        *(_OWORD *)(a3 + 8) = v40;
        *(_OWORD *)(a3 + 24) = v11;
        v40 = 0u;
        v41[0] = 0u;
        *(_QWORD *)(a3 + 40) = v8;
        *(_QWORD *)&v41[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
      {
        v17 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v18 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, (const pxrInternal__aapl__pxrReserved__::VtValue *)v17);
        if (v42.__r_.__value_.__l.__size_)
        {
          v19 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>(v18);
          v20 = *(_OWORD *)(v19 + 16);
          v40 = *(_OWORD *)v19;
          v41[0] = v20;
          v21 = *(_QWORD *)(v19 + 32);
          if (v21)
          {
            v22 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
            if (!*((_QWORD *)&v41[0] + 1))
              v22 = (unint64_t *)(v21 - 16);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          *(_BYTE *)a3 = 1;
          v24 = v41[0];
          *(_OWORD *)(a3 + 8) = v40;
          *(_OWORD *)(a3 + 24) = v24;
          v40 = 0u;
          v41[0] = 0u;
          *(_QWORD *)(a3 + 40) = v21;
          *(_QWORD *)&v41[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v40;
          v35 = *((_QWORD *)&v41[0] + 1);
          *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
          *(_QWORD *)(a3 + 32) = v35;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
          LOBYTE(v35) = BYTE7(v41[1]);
          memset(v41, 0, 24);
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v35;
          if (SHIBYTE(v39) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v33 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v33;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v33) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v33;
      if ((SHIBYTE(v39) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        return;
      }
      v32 = __p[0];
    }
    else
    {
      v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      std::operator+<char>();
      v25 = std::string::append(&v37, ") at the given time: ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v36, *a2);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v36;
      else
        v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        size = v36.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v42, (const std::string::value_type *)v27, size);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v39 = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v31 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v31;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v31) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v31;
      if (SHIBYTE(v39) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      v32 = (void *)v37.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_46;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v40;
  v14 = *((_QWORD *)&v41[0] + 1);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
  *(_QWORD *)(a3 + 32) = v14;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
  LOBYTE(v14) = BYTE7(v41[1]);
  memset(v41, 0, 24);
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v14;
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
}

void sub_230028708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<int>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<int>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v16;
  std::type_info *v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v35;
  std::string v36;
  std::string v37;
  void *__p[2];
  std::string::size_type v39;
  __int128 v40;
  _OWORD v41[2];
  std::string v42;
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v44 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43))
      {
        v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v7 = *(_OWORD *)(v6 + 16);
        v40 = *(_OWORD *)v6;
        v41[0] = v7;
        v8 = *(_QWORD *)(v6 + 32);
        if (v8)
        {
          v9 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
          if (!*((_QWORD *)&v41[0] + 1))
            v9 = (unint64_t *)(v8 - 16);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        *(_BYTE *)a3 = 1;
        v11 = v41[0];
        *(_OWORD *)(a3 + 8) = v40;
        *(_OWORD *)(a3 + 24) = v11;
        v40 = 0u;
        v41[0] = 0u;
        *(_QWORD *)(a3 + 40) = v8;
        *(_QWORD *)&v41[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
      {
        v17 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v18 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, (const pxrInternal__aapl__pxrReserved__::VtValue *)v17);
        if (v42.__r_.__value_.__l.__size_)
        {
          v19 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>(v18);
          v20 = *(_OWORD *)(v19 + 16);
          v40 = *(_OWORD *)v19;
          v41[0] = v20;
          v21 = *(_QWORD *)(v19 + 32);
          if (v21)
          {
            v22 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
            if (!*((_QWORD *)&v41[0] + 1))
              v22 = (unint64_t *)(v21 - 16);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          *(_BYTE *)a3 = 1;
          v24 = v41[0];
          *(_OWORD *)(a3 + 8) = v40;
          *(_OWORD *)(a3 + 24) = v24;
          v40 = 0u;
          v41[0] = 0u;
          *(_QWORD *)(a3 + 40) = v21;
          *(_QWORD *)&v41[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v40;
          v35 = *((_QWORD *)&v41[0] + 1);
          *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
          *(_QWORD *)(a3 + 32) = v35;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
          LOBYTE(v35) = BYTE7(v41[1]);
          memset(v41, 0, 24);
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v35;
          if (SHIBYTE(v39) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v33 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v33;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v33) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v33;
      if ((SHIBYTE(v39) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        return;
      }
      v32 = __p[0];
    }
    else
    {
      v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      std::operator+<char>();
      v25 = std::string::append(&v37, ") at the given time: ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v36, *a2);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v36;
      else
        v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        size = v36.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v42, (const std::string::value_type *)v27, size);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v39 = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v31 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v31;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v31) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v31;
      if (SHIBYTE(v39) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      v32 = (void *)v37.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_46;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v40;
  v14 = *((_QWORD *)&v41[0] + 1);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
  *(_QWORD *)(a3 + 32) = v14;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
  LOBYTE(v14) = BYTE7(v41[1]);
  memset(v41, 0, 24);
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v14;
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
}

void sub_230028DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<float>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<float>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<float>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_2300290A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v16;
  std::type_info *v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v35;
  std::string v36;
  std::string v37;
  void *__p[2];
  std::string::size_type v39;
  __int128 v40;
  _OWORD v41[2];
  std::string v42;
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v44 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43))
      {
        v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v7 = *(_OWORD *)(v6 + 16);
        v40 = *(_OWORD *)v6;
        v41[0] = v7;
        v8 = *(_QWORD *)(v6 + 32);
        if (v8)
        {
          v9 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
          if (!*((_QWORD *)&v41[0] + 1))
            v9 = (unint64_t *)(v8 - 16);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        *(_BYTE *)a3 = 1;
        v11 = v41[0];
        *(_OWORD *)(a3 + 8) = v40;
        *(_OWORD *)(a3 + 24) = v11;
        v40 = 0u;
        v41[0] = 0u;
        *(_QWORD *)(a3 + 40) = v8;
        *(_QWORD *)&v41[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
      {
        v17 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v18 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, (const pxrInternal__aapl__pxrReserved__::VtValue *)v17);
        if (v42.__r_.__value_.__l.__size_)
        {
          v19 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(v18);
          v20 = *(_OWORD *)(v19 + 16);
          v40 = *(_OWORD *)v19;
          v41[0] = v20;
          v21 = *(_QWORD *)(v19 + 32);
          if (v21)
          {
            v22 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
            if (!*((_QWORD *)&v41[0] + 1))
              v22 = (unint64_t *)(v21 - 16);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          *(_BYTE *)a3 = 1;
          v24 = v41[0];
          *(_OWORD *)(a3 + 8) = v40;
          *(_OWORD *)(a3 + 24) = v24;
          v40 = 0u;
          v41[0] = 0u;
          *(_QWORD *)(a3 + 40) = v21;
          *(_QWORD *)&v41[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v40);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v40;
          v35 = *((_QWORD *)&v41[0] + 1);
          *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
          *(_QWORD *)(a3 + 32) = v35;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
          LOBYTE(v35) = BYTE7(v41[1]);
          memset(v41, 0, 24);
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v35;
          if (SHIBYTE(v39) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v33 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v33;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v33) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v33;
      if ((SHIBYTE(v39) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        return;
      }
      v32 = __p[0];
    }
    else
    {
      v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      std::operator+<char>();
      v25 = std::string::append(&v37, ") at the given time: ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v36, *a2);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v36;
      else
        v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        size = v36.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v42, (const std::string::value_type *)v27, size);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v39 = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v31 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v31;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v31) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v31;
      if (SHIBYTE(v39) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      v32 = (void *)v37.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_46;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v40;
  v14 = *((_QWORD *)&v41[0] + 1);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
  *(_QWORD *)(a3 + 32) = v14;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
  LOBYTE(v14) = BYTE7(v41[1]);
  memset(v41, 0, 24);
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v14;
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
}

void sub_230029514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, uint64_t a3@<X8>)
{
  realityio *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  __int128 __p;
  _BYTE v20[8];
  uint64_t v21;
  _BYTE buf[24];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a3);
      if (!*(_BYTE *)a3)
      {
        v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0)
              v9 = *(const char **)v9;
          }
          else
          {
            v9 = "";
          }
          v16 = *(_QWORD *)(a3 + 24);
          v15 = a3 + 24;
          v14 = v16;
          if (*(char *)(v15 + 23) >= 0)
            v14 = v15;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v14;
          _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v17);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      v11 = v23;
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
      *(_QWORD *)(a3 + 32) = v11;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v23 + 7);
      LOBYTE(v11) = HIBYTE(v23);
      v23 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v11;
      if (v18 < 0)
        operator delete(v17[0]);
    }
    if ((v21 & 7) != 0)
    {
      v12 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    v10 = v23;
    *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
    *(_QWORD *)(a3 + 32) = v10;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v23 + 7);
    LOBYTE(v10) = HIBYTE(v23);
    v23 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v10;
    if ((v20[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
}

void sub_2300299D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::DetailedError>::~Result(v5);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdAttribute>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdAttribute>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 6;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t result;

  v3 = a2[4];
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  v6 = a2[3];
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a2 + 2));
  result = a2[1];
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t RIOPxrArAssetGetTypeID()
{
  if (qword_255E54720 != -1)
    dispatch_once(&qword_255E54720, &__block_literal_global_9);
  return _MergedGlobals_14;
}

uint64_t RIOPxrArAssetCreate(pxrInternal__aapl__pxrReserved__ *a1)
{
  uint64_t v1;
  uint64_t Instance;
  std::__shared_weak_count *v3;
  realityio *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v25[2];
  uint64_t v26;
  realityio *v27;
  std::__shared_weak_count *v28;
  void *__p[2];
  uint64_t v30;
  uint64_t v31;

  v1 = (uint64_t)a1;
  v31 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
    std::string::basic_string[abi:ne180100]<0>(v25, (char *)v1);
    *(_OWORD *)__p = *(_OWORD *)v25;
    v30 = v26;
    v25[1] = 0;
    v26 = 0;
    v25[0] = 0;
    pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26) < 0)
      operator delete(v25[0]);
    if (v27)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v27 + 24))(__p);
      if (qword_255E54720 != -1)
        dispatch_once(&qword_255E54720, &__block_literal_global_9);
      Instance = _CFRuntimeCreateInstance();
      v1 = Instance;
      if (Instance)
      {
        *(_OWORD *)(Instance + 16) = 0u;
        *(_OWORD *)(Instance + 32) = 0u;
      }
      v4 = v27;
      v3 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      v7 = *(std::__shared_weak_count **)(Instance + 24);
      *(_QWORD *)(Instance + 16) = v4;
      *(_QWORD *)(Instance + 24) = v3;
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v11 = __p[0];
      v10 = __p[1];
      if (__p[1])
      {
        v12 = (unint64_t *)((char *)__p[1] + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = *(std::__shared_weak_count **)(v1 + 40);
      *(_QWORD *)(v1 + 32) = v11;
      *(_QWORD *)(v1 + 40) = v10;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v18 = (unint64_t *)((char *)__p[1] + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    else
    {
      v20 = *(NSObject **)(realityio::logObjects(0) + 32);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = (void *)v1;
        _os_log_impl(&dword_22FF26000, v20, OS_LOG_TYPE_DEFAULT, "RIOPxrUtilsCFDataWithArAssetPath failed to resolve path %s", (uint8_t *)__p, 0xCu);
      }
      v1 = 0;
    }
    v21 = v28;
    if (v28)
    {
      v22 = (unint64_t *)&v28->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  return v1;
}

void sub_230029FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

CFDataRef RIOPxrArAssetCreateCFDataNoCopy(CFDataRef result)
{
  const __CFAllocator *v1;
  const UInt8 *v2;
  CFIndex v3;

  if (result)
  {
    v1 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v2 = (const UInt8 *)*((_QWORD *)result + 4);
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)result + 2) + 16))(*((_QWORD *)result + 2));
    return CFDataCreateWithBytesNoCopy(v1, v2, v3, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  }
  return result;
}

uint64_t RIOPxrUtilsCFDataWithArAssetPath()
{
  return 0;
}

CFDataRef RIOPxrUtilsCopyCFDataWithArAssetPath(pxrInternal__aapl__pxrReserved__ *a1, _DWORD *a2)
{
  CFDataRef v2;
  const UInt8 *v5;
  CFIndex v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v15[2];
  uint64_t v16;
  realityio *v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v2 = 0;
  v21 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
    std::string::basic_string[abi:ne180100]<0>(v15, (char *)a1);
    *(_OWORD *)__p = *(_OWORD *)v15;
    v20 = v16;
    v15[1] = 0;
    v16 = 0;
    v15[0] = 0;
    pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(v15[0]);
    if (v17)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v17 + 24))(__p);
      *a2 = (*(uint64_t (**)(realityio *))(*(_QWORD *)v17 + 16))(v17);
      v5 = (const UInt8 *)__p[0];
      v6 = (*(uint64_t (**)(realityio *))(*(_QWORD *)v17 + 16))(v17);
      v2 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v5, v6);
      v7 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v8 = (unint64_t *)((char *)__p[1] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      v10 = *(NSObject **)(realityio::logObjects(0) + 32);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = a1;
        _os_log_impl(&dword_22FF26000, v10, OS_LOG_TYPE_DEFAULT, "RIOPxrUtilsCopyCFDataWithArAssetPath failed to resolve path %s", (uint8_t *)__p, 0xCu);
      }
      v2 = 0;
    }
    v11 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  return v2;
}

void sub_23002A274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrArUtilsCopyExtension(pxrInternal__aapl__pxrReserved__ *a1)
{
  const char *p_p;
  CFStringRef v3;
  void *v5;
  char v6;
  void *__p;
  char v8;

  pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  std::string::basic_string[abi:ne180100]<0>(&v5, (char *)a1);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension();
  if (v8 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v3 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (v8 < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5);
  return v3;
}

void sub_23002A360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void RIOPxrUtilsResetDefaultArResolver()
{
  void *__p;
  char v1;

  std::string::basic_string[abi:ne180100]<0>(&__p, "ArDefaultResolver");
  pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver();
  if (v1 < 0)
    operator delete(__p);
}

void sub_23002A3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _RIOPxrArAssetCFFinalize(char *a1)
{
  char *v1;

  v1 = a1 + 16;
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 32));
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

BOOL _RIOPxrArAssetCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrArAssetCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrArAssetCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrArAsset %p>"), a1);
}

CFStringRef _RIOPxrArAssetCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrArAsset %p>"), a1);
}

uint64_t realityio::PhysicsColliderComponentBuilder::kOutputName(realityio::PhysicsColliderComponentBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "physics_collision_shape");
    realityio::PhysicsColliderComponentBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::PhysicsColliderComponentBuilder::kOutputName(void)::kOutputName;
}

void sub_23002A510(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::PhysicsColliderComponentBuilder *realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(realityio::PhysicsColliderComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  void *__src;
  _BYTE v21[16];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__src, "PhysicsColliderComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kPhysicsColliderComponentBuilderIdentifier);
  realityio::generatePhysicsColliderDirtyStageSubscription(&v12);
  v19 = v18;
  v16[0] = &off_24FDEE730;
  v17 = v16;
  v18[0] = &off_24FDEE6B0;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)&__src, (uint64_t)__p, &v12, (uint64_t)v18, (uint64_t)v16);
  v4 = v17;
  if (v17 == v16)
  {
    v5 = 4;
    v4 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v19;
  if (v19 == v18)
  {
    v7 = 4;
    v6 = v18;
    goto LABEL_10;
  }
  if (v19)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if ((v21[15] & 0x80000000) != 0)
    operator delete(__src);
  *(_QWORD *)this = &off_24FDEE638;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = 0;
  __src = (void *)REColliderComponentGetComponentType();
  std::vector<REComponentClass *>::__assign_with_size[abi:ne180100]<REComponentClass * const*,REComponentClass * const*>((char *)this + 280, (char *)&__src, (uint64_t)v21, 1uLL);
  return this;
}

void sub_23002A700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v28 = a21;
  if (a21 == v25)
  {
    v29 = 4;
    v28 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  v30 = a25;
  if (a25 == &a22)
  {
    v31 = 4;
    v30 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_11;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  _Unwind_Resume(a1);
}

uint64_t realityio::PhysicsColliderComponentBuilder::run(realityio::PhysicsColliderComponentBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  realityio *PrimAtPath;
  NSObject *v7;
  _BOOL8 v8;
  uint64_t v9;
  realityio *v10;
  uint64_t v11;
  uint8_t *v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t result;
  realityio *v19;
  uint8_t buf[8];
  realityio *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t v25[24];
  uint8_t *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  PrimAtPath = (realityio *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  v7 = *(NSObject **)(realityio::logObjects(PrimAtPath) + 24);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v8)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22FF26000, v7, OS_LOG_TYPE_INFO, "Updating entity's rigid body collider", buf, 2u);
  }
  v9 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v8);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v9, (uint64_t)buf);
  if (!buf[0])
  {
    v19 = 0;
LABEL_9:
    v15 = *(NSObject **)(realityio::logObjects(v10) + 24);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_22FF26000, v15, OS_LOG_TYPE_DEFAULT, "Stopping operation to set the rigid body's collider component because entity no longer exists", v25, 2u);
    }
    goto LABEL_13;
  }
  v10 = v21;
  v19 = v21;
  if (!v21)
    goto LABEL_9;
  RERetain();
  v11 = *((_QWORD *)a2 + 6);
  v12 = (uint8_t *)operator new(0x20uLL);
  *(_QWORD *)v12 = &off_24FDEE7B0;
  *((_QWORD *)v12 + 1) = a2;
  *((_QWORD *)v12 + 2) = this;
  *((_QWORD *)v12 + 3) = &v19;
  v26 = v12;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v11 + 16))(v11, v25);
  v13 = v26;
  if (v26 == v25)
  {
    v14 = 4;
    v13 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_13;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_13:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v19);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)buf);
  if ((v24 & 7) != 0)
  {
    v16 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  result = v22;
  if (v22)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
  return result;
}

void sub_23002A9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v5 = *(_QWORD **)(v3 - 56);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 80);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va2);
  _Unwind_Resume(a1);
}

void realityio::PhysicsColliderComponentBuilder::clear(realityio::PhysicsColliderComponentBuilder *this, realityio::Inputs *a2)
{
  char v2;
  uint64_t v4;
  realityio::PhysicsColliderComponentBuilder *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::mutex *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void **v11;
  realityio::PhysicsColliderComponentBuilder *v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  const void **v20;
  unint64_t *v21;
  unint64_t v22;
  realityio::Inputs *v23;
  __int128 v24;
  std::string v25;
  uint64_t (**v26)();
  __int128 v27;
  std::string __p;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v23 = a2;
  v4 = *((_QWORD *)a2 + 6);
  v26 = &off_24FDEE9B0;
  *(_QWORD *)&v27 = &v23;
  *((_QWORD *)&v27 + 1) = this;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v4 + 16))(v4, &v26);
  v5 = (realityio::PhysicsColliderComponentBuilder *)__p.__r_.__value_.__r.__words[0];
  if ((uint64_t (***)())__p.__r_.__value_.__l.__data_ == &v26)
  {
    v6 = 4;
    v5 = (realityio::PhysicsColliderComponentBuilder *)&v26;
  }
  else
  {
    if (!__p.__r_.__value_.__r.__words[0])
      goto LABEL_6;
    v6 = 5;
  }
  v5 = (realityio::PhysicsColliderComponentBuilder *)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
  v8 = (std::mutex *)*((_QWORD *)this + 2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (const void **)realityio::PhysicsColliderComponentBuilder::kOutputName(v5);
  realityio::Outputs::getRawValue<RECollisionShape *>(v8, v11, (uint64_t)&v26);
  v13 = v26;
  if (!(_BYTE)v26)
  {
    v24 = v27;
    v12 = (realityio::PhysicsColliderComponentBuilder *)&v25;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v25, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v8 = (std::mutex *)v25.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      if (!(_BYTE)v26 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v25 = __p;
      v8 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (!v7)
    goto LABEL_19;
  v14 = (unint64_t *)&v7->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v13)
      goto LABEL_20;
  }
  else
  {
LABEL_19:
    if (v13)
    {
LABEL_20:
      v17 = *((_QWORD *)this + 2);
      v16 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
      v26 = (uint64_t (**)())v17;
      *(_QWORD *)&v27 = v16;
      if (v16)
      {
        v18 = (unint64_t *)&v16->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = (const void **)realityio::PhysicsColliderComponentBuilder::kOutputName(v12);
      std::mutex::lock((std::mutex *)(v17 + 64));
      if (v17 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v17 + 40, v20))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v17 + 40), v20);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v17, (unsigned __int8 *)v20);
      std::mutex::unlock((std::mutex *)(v17 + 64));
      if (v16)
      {
        v21 = (unint64_t *)&v16->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      return;
    }
  }
  if (v2 < 0)
    operator delete(v8);
}

void sub_23002AC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (!a18 && a26 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void realityio::PhysicsColliderComponentBuilder::~PhysicsColliderComponentBuilder(realityio::PhysicsColliderComponentBuilder *this)
{
  realityio::PhysicsColliderComponentBuilder::~PhysicsColliderComponentBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  void *v2;
  realityio::PhysicsColliderComponentBuilder *v3;
  uint64_t v4;
  realityio::PhysicsColliderComponentBuilder *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_QWORD *)this = &off_24FDEE638;
  v2 = (void *)*((_QWORD *)this + 35);
  if (v2)
  {
    *((_QWORD *)this + 36) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_24FDE1CA0;
  v3 = (realityio::PhysicsColliderComponentBuilder *)*((_QWORD *)this + 34);
  if (v3 == (realityio::PhysicsColliderComponentBuilder *)((char *)this + 248))
  {
    v4 = 4;
    v3 = (realityio::PhysicsColliderComponentBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (realityio::PhysicsColliderComponentBuilder *)*((_QWORD *)this + 30);
  if (v5 == (realityio::PhysicsColliderComponentBuilder *)((char *)this + 216))
  {
    v6 = 4;
    v5 = (realityio::PhysicsColliderComponentBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v10 = *((_QWORD *)this + 23);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  realityio::Builder::~Builder(this);
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEE6B0;
  return result;
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEE6B0;
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  realityio::PhysicsColliderAssetBuilder *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v26) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)&v26, &v28);
  v6 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (realityio::PhysicsColliderAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v28);
  v10 = v29;
  if (v29)
  {
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::PhysicsColliderAssetBuilder::kOutputName(v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v25 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v13, (uint64_t *)v14 + 17, &v25, &v26);
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v26);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_23002B0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;

  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v19 = __ldaxr(v15);
  while (__stlxr(v19 - 1, v15));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEE730;
  return result;
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEE730;
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::PhysicsColliderComponentBuilder::kOutputName((realityio::PhysicsColliderComponentBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 18, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_23002B3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDEE7B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDEE7B0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(realityio::PhysicsColliderAssetBuilder *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  realityio::PhysicsColliderComponentBuilder *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 *v9;
  uint64_t CollisionShape;
  std::__shared_weak_count *v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  uint8_t *v22;
  uint64_t v23;
  __int128 **v24;
  uint64_t v25;
  uint64_t v26;
  char v27[8];
  uint64_t v28;
  void *__p;
  char v30;
  uint64_t v31;
  __int128 *v32[3];
  __int128 **v33;
  uint8_t buf[8];
  std::__shared_weak_count *v35;
  uint64_t *v36;
  uint8_t *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 2);
  v3 = realityio::PhysicsColliderAssetBuilder::kOutputName(a1);
  realityio::Inputs::_getValue<REAsset *>(v1, v3, (uint64_t)v27);
  if (v27[0])
  {
    v26 = v28;
    if (v28)
    {
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(std::__shared_weak_count **)(v2 + 24);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v9 = (__int128 *)realityio::PhysicsColliderComponentBuilder::kOutputName(v4);
      CollisionShape = RECollisionShapeAssetGetCollisionShape();
      std::mutex::lock((std::mutex *)(v6 + 64));
      v11 = (std::__shared_weak_count *)operator new(0x28uLL);
      v11->__shared_owners_ = 0;
      v11->__shared_weak_owners_ = 0;
      v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEE870;
      v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEE820;
      v11[1].__shared_owners_ = CollisionShape;
      *(_QWORD *)buf = v11 + 1;
      v35 = v11;
      v32[0] = v9;
      v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 40), (const void **)v9, (uint64_t)&std::piecewise_construct, v32);
      *(_QWORD *)buf = 0;
      v35 = 0;
      v13 = (std::__shared_weak_count *)v12[8];
      v12[7] = (uint64_t)&v11[1];
      v12[8] = (uint64_t)v11;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = v35;
      if (v35)
      {
        v17 = (unint64_t *)&v35->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v6, (unsigned __int8 *)v9, (uint64_t)v9);
      std::mutex::unlock((std::mutex *)(v6 + 64));
      if (v5)
      {
        v19 = (unint64_t *)&v5->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      goto LABEL_24;
    }
  }
  else
  {
    v26 = 0;
  }
  v21 = *(NSObject **)(realityio::logObjects(v4) + 24);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_22FF26000, v21, OS_LOG_TYPE_ERROR, "No physics collider asset exists for the rigid body", buf, 2u);
  }
LABEL_24:
  REColliderComponentGetComponentType();
  *(_QWORD *)buf = &off_24FDEE8A0;
  v35 = (std::__shared_weak_count *)v2;
  v36 = &v26;
  v37 = buf;
  v32[0] = (__int128 *)REEntityGetOrAddComponentByClass();
  if (!v37)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint8_t *, __int128 **))(*(_QWORD *)v37 + 48))(v37, v32);
  RENetworkMarkComponentDirty();
  v22 = v37;
  if (v37 == buf)
  {
    v23 = 4;
    v22 = buf;
  }
  else
  {
    if (!v37)
      goto LABEL_30;
    v23 = 5;
  }
  (*(void (**)(uint8_t *))(*(_QWORD *)v22 + 8 * v23))(v22);
LABEL_30:
  RERigidBodyComponentGetComponentType();
  v32[0] = (__int128 *)&off_24FDEE920;
  v32[1] = (__int128 *)v2;
  v33 = v32;
  v31 = REEntityGetOrAddComponentByClass();
  if (!v33)
    std::__throw_bad_function_call[abi:ne180100]();
  (*((void (**)(__int128 **, uint64_t *))*v33 + 6))(v33, &v31);
  RENetworkMarkComponentDirty();
  v24 = v33;
  if (v33 == v32)
  {
    v25 = 4;
    v24 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_36;
    v25 = 5;
  }
  (*((void (**)(__int128 **))*v24 + v25))(v24);
LABEL_36:
  if (!v27[0] && v30 < 0)
    operator delete(__p);
}

void sub_23002B8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v27;
  std::mutex *v28;
  unint64_t *p_shared_owners;
  unint64_t v31;

  std::mutex::unlock(v28);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (!a10 && a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<RECollisionShape *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEE820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<RECollisionShape *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEE820;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<RECollisionShape *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void _ZNSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDEE8A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDEE8A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  return REColliderComponentSetShape();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void _ZNSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDEE920;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDEE920;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  return RERigidBodyComponentSetMotionType();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_;
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDEE9B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDEE9B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  v3 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v2, v3, (uint64_t)v8);
  if (v8[0])
  {
    v7 = v9;
    if (v9)
    {
      RERetain();
      v4 = *(_QWORD *)(v1 + 280);
      v5 = *(_QWORD *)(v1 + 288);
      while (v4 != v5)
      {
        REEntityRemoveComponentByClass();
        v4 += 8;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v7);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v8);
}

void sub_23002BD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::Outputs::getRawValue<RECollisionShape *>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    v17 = 0uLL;
    v16 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_23002BE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void realityio::tokens::LightBuilderTokens_StaticTokenType::~LightBuilderTokens_StaticTokenType(realityio::tokens::LightBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  void **v58;

  v58 = (void **)((char *)this + 152);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v58);
  v2 = *((_QWORD *)this + 18);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 17);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 16);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 15);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 14);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 13);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 12);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 11);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 10);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 9);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 8);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 7);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 6);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 5);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 4);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 3);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 2);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 1);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v56 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stlxr(v57 - 2, v56));
  }
}

realityio::tokens::LightBuilderTokens_StaticTokenType *realityio::tokens::LightBuilderTokens_StaticTokenType::LightBuilderTokens_StaticTokenType(realityio::tokens::LightBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v70 = (uint64_t *)(MEMORY[0x2348B2758](this, "RectLight", 0) + 8);
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]((char *)this + 80, "treatAsAmbient", 0);
  MEMORY[0x2348B2758]((char *)this + 88, "treatAsPoint", 0);
  MEMORY[0x2348B2758]((char *)this + 96, "radius", 0);
  MEMORY[0x2348B2758]((char *)this + 104, "width", 0);
  MEMORY[0x2348B2758]((char *)this + 112, "height", 0);
  MEMORY[0x2348B2758]((char *)this + 120, "shaping:cone:angle", 0);
  MEMORY[0x2348B2758]((char *)this + 128, "shaping:cone:softness", 0);
  MEMORY[0x2348B2758]((char *)this + 136, "realitykit:innerDegrees", 0);
  MEMORY[0x2348B2758]((char *)this + 144, "inputs:texture:file", 0);
  v2 = *(_QWORD *)this;
  v71 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v70;
  v72 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v73 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v74 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v75 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v76 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v77 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v78 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v79 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v80 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v81 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v82 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v83 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v84 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v85 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v86 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v87 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v88 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v89 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  v59 = operator new(0x98uLL);
  v60 = 0;
  *((_QWORD *)this + 19) = v59;
  *((_QWORD *)this + 20) = v59;
  *((_QWORD *)this + 21) = v59 + 19;
  do
  {
    v61 = *(&v71 + v60);
    *v59 = v61;
    if ((v61 & 7) != 0)
    {
      v62 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 2, v62));
      if ((v63 & 1) == 0)
        *v59 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v60;
    ++v59;
  }
  while (v60 != 19);
  v64 = &v90;
  *((_QWORD *)this + 20) = v59;
  do
  {
    v66 = *--v64;
    v65 = v66;
    if ((v66 & 7) != 0)
    {
      v67 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
      do
        v68 = __ldxr(v67);
      while (__stlxr(v68 - 2, v67));
    }
  }
  while (v64 != &v71);
  return this;
}

void sub_23002C834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, void **a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a20);
  v51 = (char *)&a41;
  while (1)
  {
    v53 = *((_QWORD *)v51 - 1);
    v51 -= 8;
    v52 = v53;
    if ((v53 & 7) != 0)
    {
      v54 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    if (v51 == &a22)
    {
      if ((*v50 & 7) != 0)
      {
        v56 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      if ((*v49 & 7) != 0)
      {
        v58 = (unsigned int *)(*v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      if ((*v48 & 7) != 0)
      {
        v60 = (unsigned int *)(*v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v47 & 7) != 0)
      {
        v62 = (unsigned int *)(*v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v46 & 7) != 0)
      {
        v64 = (unsigned int *)(*v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v45 & 7) != 0)
      {
        v66 = (unsigned int *)(*v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*v44 & 7) != 0)
      {
        v68 = (unsigned int *)(*v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*v43 & 7) != 0)
      {
        v70 = (unsigned int *)(*v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v42 & 7) != 0)
      {
        v72 = (unsigned int *)(*v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*a11 & 7) != 0)
      {
        v74 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*a12 & 7) != 0)
      {
        v76 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*a13 & 7) != 0)
      {
        v78 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*a14 & 7) != 0)
      {
        v80 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*a15 & 7) != 0)
      {
        v82 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*a16 & 7) != 0)
      {
        v84 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*a17 & 7) != 0)
      {
        v86 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*a18 & 7) != 0)
      {
        v88 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*a19 & 7) != 0)
      {
        v90 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*v41 & 7) != 0)
      {
        v92 = (unsigned int *)(*v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23002CB3C()
{
  JUMPOUT(0x23002C9D0);
}

void sub_23002CB44()
{
  JUMPOUT(0x23002C9F4);
}

void sub_23002CB4C()
{
  JUMPOUT(0x23002CA18);
}

void sub_23002CB54()
{
  JUMPOUT(0x23002CA3CLL);
}

void sub_23002CB5C()
{
  JUMPOUT(0x23002CA60);
}

void sub_23002CB64()
{
  JUMPOUT(0x23002CA84);
}

void sub_23002CB6C()
{
  JUMPOUT(0x23002CAA8);
}

void sub_23002CB74()
{
  JUMPOUT(0x23002CACCLL);
}

void sub_23002CB7C()
{
  JUMPOUT(0x23002CAF0);
}

void sub_23002CB84()
{
  JUMPOUT(0x23002CB14);
}

void realityio::tokens::ShadowBuilderTokens_StaticTokenType::~ShadowBuilderTokens_StaticTokenType(realityio::tokens::ShadowBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  void **v10;

  v10 = (void **)((char *)this + 24);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v10);
  v2 = *((_QWORD *)this + 2);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v8 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

realityio::tokens::ShadowBuilderTokens_StaticTokenType *realityio::tokens::ShadowBuilderTokens_StaticTokenType::ShadowBuilderTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(MEMORY[0x2348B2758](this, "shadow:enable", 0) + 8);
  MEMORY[0x2348B2758](v2, "shadow:bias", 0);
  MEMORY[0x2348B2758](this + 2, "shadow:distance", 0);
  v3 = *this;
  v23 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v23 = v4;
  }
  v6 = *v2;
  v24 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v24 = v7;
  }
  v9 = this[2];
  v25 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v25 = v10;
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  v12 = (unsigned int *)operator new(0x18uLL);
  v13 = 0;
  this[3] = v12;
  this[4] = v12;
  this[5] = v12 + 6;
  do
  {
    v14 = (&v23)[v13];
    *(_QWORD *)v12 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *(_QWORD *)v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v13;
    v12 += 2;
  }
  while (v13 != 3);
  v17 = (unsigned int **)&v26;
  this[4] = v12;
  do
  {
    v19 = (uint64_t)*--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
  }
  while (v17 != &v23);
  return (realityio::tokens::ShadowBuilderTokens_StaticTokenType *)this;
}

void sub_23002CDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      _Unwind_Resume(a1);
    }
  }
}

float realityio::scaleLightIntensityByStageUnits(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, float a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  double v9;
  double v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this);
  v4 = v18;
  if (v18)
  {
    if (*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&v18)
                  + 14))
      v4 = v17;
    else
      v4 = 0;
  }
  v19 = v4;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v19);
  v5 = (uint64_t)v18;
  if (v18)
  {
    v6 = v18 + 2;
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>((uint64_t *)&v17, (uint64_t *)&v19);
  pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
  v10 = v9;
  v11 = (uint64_t)v18;
  if (v18)
  {
    v12 = v18 + 2;
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v15 = v10 * v10 * a3;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v19);
  return v15;
}

void sub_23002CF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, unsigned int *a4, ...)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    v5 = a4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)a4 + 8))(a4);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)va);
  _Unwind_Resume(a1);
}

realityio::mtlx::UsdMtlxTokens_StaticTokenType *realityio::mtlx::UsdMtlxTokens_StaticTokenType::UsdMtlxTokens_StaticTokenType(realityio::mtlx::UsdMtlxTokens_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)MEMORY[0x2348B2758](this, "out", 0);
  v3 = *v2;
  if ((*v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v6 = operator new(8uLL);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v6;
  *v6 = v3;
  v7 = v6 + 1;
  *((_QWORD *)this + 3) = v6 + 1;
  if ((v3 & 7) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *v6 &= 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    do
      v10 = __ldxr(v8);
    while (__stlxr(v10 - 2, v8));
  }
  else
  {
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

void sub_23002D0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v11 = v10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  if ((v11 & 7) != 0)
  {
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  if ((*v9 & 7) != 0)
  {
    v15 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  _Unwind_Resume(a1);
}

uint64_t *realityio::mtlx::UsdMtlxStandardLibraryPaths(realityio::mtlx *this)
{
  unsigned __int8 v1;
  realityio::mtlx *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      realityio::mtlx::_ComputeStdlibSearchPaths(v3);
    }
  }
  return &realityio::mtlx::UsdMtlxStandardLibraryPaths(void)::materialxLibraryPaths;
}

void sub_23002D198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void realityio::mtlx::_ComputeStdlibSearchPaths(realityio::mtlx *this)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  std::string *v5;
  std::string::value_type *v6;
  std::string::size_type size;
  int v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string v12;
  _DWORD v13[2];
  std::string *v14;
  char v15;
  std::string v16;
  __int128 v17;

  *(_QWORD *)&v17 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.CoreRealityIO"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  realityio::mtlx::UsdMtlxStandardLibraryPaths(void)::materialxLibraryPaths = 0;
  *(_QWORD *)algn_255E537B8 = 0;
  qword_255E537C0 = 0;
  if (v1)
  {
    objc_msgSend(v1, "resourceURL");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (!v3)
    {
LABEL_10:

      goto LABEL_11;
    }
    std::string::basic_string[abi:ne180100]<0>(&v12, (char *)objc_msgSend(objc_retainAutorelease(v3), "fileSystemRepresentation"));
    v5 = std::string::append(&v12, "/");
    v6 = (std::string::value_type *)v5->__r_.__value_.__r.__words[0];
    size = v5->__r_.__value_.__l.__size_;
    v13[0] = v5->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v13 + 3) = *(_DWORD *)((char *)&v5->__r_.__value_.__r.__words[2] + 3);
    v8 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v12.__r_.__value_.__l.__data_);
      if ((v8 & 0x80000000) == 0)
        goto LABEL_5;
    }
    else if ((v8 & 0x80000000) == 0)
    {
LABEL_5:
      v16.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
      v16.__r_.__value_.__l.__size_ = size;
      LODWORD(v16.__r_.__value_.__r.__words[2]) = v13[0];
      *(_DWORD *)((char *)&v16.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v13 + 3);
      *((_BYTE *)&v16.__r_.__value_.__s + 23) = v8;
      goto LABEL_8;
    }
    std::string::__init_copy_ctor_external(&v16, v6, size);
LABEL_8:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v14 = (std::string *)&v9;
    v15 = 0;
    v9 = (std::string *)operator new(0x18uLL);
    v10 = v9;
    v11 = v9 + 1;
    v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, (__int128 *)&v16, &v17, v9);
    realityio::mtlx::_MergeSearchPaths((__int128 **)&realityio::mtlx::UsdMtlxStandardLibraryPaths(void)::materialxLibraryPaths, (__int128 **)&v9, &v12);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&realityio::mtlx::UsdMtlxStandardLibraryPaths(void)::materialxLibraryPaths, (std::string *)v12.__r_.__value_.__l.__data_, (__int128 *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
    v14 = &v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    v14 = (std::string *)&v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if ((v8 & 0x80000000) == 0)
        goto LABEL_10;
    }
    else if ((v8 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v6);
    goto LABEL_10;
  }
LABEL_11:

}

void sub_23002D3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  operator delete(v29);

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t *realityio::mtlx::UsdMtlxCustomSearchPaths(realityio::mtlx *this)
{
  unsigned __int8 v1;
  realityio::mtlx *v3;
  const char *v4;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      realityio::mtlx::_GetSearchPathsFromEnvVar(v3, v4);
    }
  }
  return &realityio::mtlx::UsdMtlxCustomSearchPaths(void)::materialxCustomSearchPaths;
}

void sub_23002D4B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void realityio::mtlx::_GetSearchPathsFromEnvVar(realityio::mtlx *this, const char *a2)
{
  uint64_t v2;
  void *__p;
  char v4;
  void *v5[2];
  char v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;

  std::string::basic_string[abi:ne180100]<0>(v5, "PXR_MTLX_PLUGIN_SEARCH_PATHS");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv();
  if (v4 < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5[0]);
  v2 = v9;
  if ((v9 & 0x80u) != 0)
    v2 = v8;
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, ":");
    pxrInternal__aapl__pxrReserved__::TfStringSplit();
    if (v6 < 0)
      operator delete(v5[0]);
    if ((v9 & 0x80) != 0)
      goto LABEL_11;
  }
  else
  {
    realityio::mtlx::UsdMtlxCustomSearchPaths(void)::materialxCustomSearchPaths = 0;
    *(_QWORD *)algn_255E537D8 = 0;
    qword_255E537E0 = 0;
    if ((v9 & 0x80) != 0)
LABEL_11:
      operator delete(v7);
  }
}

void sub_23002D5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

std::string *realityio::mtlx::UsdMtlxSearchPaths(realityio::mtlx *this)
{
  unsigned __int8 v1;
  realityio::mtlx *v3;
  uint64_t *v4;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      v4 = realityio::mtlx::UsdMtlxCustomSearchPaths(v3);
      realityio::mtlx::UsdMtlxStandardLibraryPaths((realityio::mtlx *)v4);
      realityio::mtlx::_MergeSearchPaths((__int128 **)&realityio::mtlx::UsdMtlxCustomSearchPaths(void)::materialxCustomSearchPaths, (__int128 **)&realityio::mtlx::UsdMtlxStandardLibraryPaths(void)::materialxLibraryPaths, &realityio::mtlx::UsdMtlxSearchPaths(void)::materialxSearchPaths);
    }
  }
  return &realityio::mtlx::UsdMtlxSearchPaths(void)::materialxSearchPaths;
}

void sub_23002D684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::__split_buffer<std::string>::pointer realityio::mtlx::_MergeSearchPaths@<X0>(__int128 **a1@<X0>, __int128 **a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  return std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((__int128 *)a3, a3->__r_.__value_.__l.__size_, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
}

void sub_23002D710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *realityio::mtlx::UsdMtlxStandardFileExtensions@<X0>(std::string *a1@<X8>)
{
  unsigned __int8 v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((v3 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "mtlx");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&realityio::mtlx::UsdMtlxStandardFileExtensions(void)::extensions, (__int128 *)__p, 1uLL);
    if (v6 < 0)
      operator delete(__p[0]);
  }
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, (__int128 *)realityio::mtlx::UsdMtlxStandardFileExtensions(void)::extensions, unk_255E53818, 0xAAAAAAAAAAAAAAABLL* ((unk_255E53818 - realityio::mtlx::UsdMtlxStandardFileExtensions(void)::extensions) >> 3));
}

void sub_23002D80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (__int128 *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_23002D8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void realityio::mtlx::UsdMtlxReadDocument(RIO_MTLX *a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  pxrInternal__aapl__pxrReserved__ *v9;
  unint64_t *v10;
  unint64_t v11;
  size_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  __int128 *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *Instance;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string v44;
  __int128 v45;
  unint64_t v46;
  _QWORD v47[3];
  _QWORD v48[4];
  __int128 v49;
  __int128 v50;
  std::string __p;
  __int128 v52;
  void **v53;
  void (***v54)(__int128 *__return_ptr);
  const char *v55;
  uint64_t v56;
  const char *v57;
  const char **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 *v64;
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  RIO_MTLX::Document::createDocument<RIO_MTLX::Document>(a1, &v50);
  if (pxrInternal__aapl__pxrReserved__::TfIsFile())
  {
    v49 = v50;
    if (*((_QWORD *)&v50 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    RIO_MTLX::FilePath::FilePath(v48, (std::string *)a2);
    memset(v47, 0, sizeof(v47));
    RIO_MTLX::readFromXmlFile((std::string **)&v49, (uint64_t)v48, (RIO_MTLX::FileSearchPath *)v47, 0);
    v54 = (void (***)(__int128 *__return_ptr))v47;
    std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
    v54 = (void (***)(__int128 *__return_ptr))v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
    if (*((_QWORD *)&v49 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *(_OWORD *)a1 = v50;
    v50 = 0uLL;
    goto LABEL_66;
  }
  v9 = (pxrInternal__aapl__pxrReserved__ *)MEMORY[0x2348B1A44](&v46);
  v45 = v50;
  if (*((_QWORD *)&v50 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v44 = *(std::string *)a2;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v52 = 0uLL;
  pxrInternal__aapl__pxrReserved__::ArGetResolver(v9);
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
  if (v54)
  {
    (*v54)[3](&v62);
    v12 = ((uint64_t (*)(void **))(*v54)[2])((void **)v54);
    v13 = v62;
  }
  else
  {
    v12 = 0;
    v13 = 0uLL;
  }
  v14 = (std::__shared_weak_count *)v55;
  if (v55)
  {
    v15 = (unint64_t *)(v55 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      v40 = v13;
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = v40;
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  v52 = v13;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    v20 = (void *)v52;
    if ((_QWORD)v52)
    {
LABEL_31:
      std::string::basic_string[abi:ne180100](&__p, v20, v12);
      LOWORD(v54) = 256;
      v55 = (const char *)&off_24FDEE2B0;
      v56 = (uint64_t)RIO_MTLX::readFromXmlFile;
      v58 = &v55;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      *(_QWORD *)&v62 = &off_24FDEEA30;
      *((_QWORD *)&v62 + 1) = &v44;
      *(_QWORD *)&v65 = &off_24FDEEA30;
      *((_QWORD *)&v65 + 1) = &v44;
      v64 = 0;
      std::__function::__func<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*),std::allocator<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*)>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::__clone((uint64_t)&v55, &v62);
      (*((void (**)(const char **))*v58 + 4))(v58);
      v58 = 0;
      v64 = &v62;
      (*(void (**)(__int128 *, const char **))(v65 + 24))(&v65, &v55);
      (*(void (**)(__int128 *))(v65 + 32))(&v65);
      v58 = &v55;
      v21 = v64;
      if (v64 == &v62)
      {
        v22 = 4;
        v21 = &v62;
      }
      else
      {
        if (!v64)
        {
LABEL_38:
          v23 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
          v65 = v45;
          if (*((_QWORD *)&v45 + 1))
          {
            v24 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }
          v62 = 0uLL;
          v63 = 0;
          std::vector<RIO_MTLX::FilePath>::__init_with_size[abi:ne180100]<RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(&v62, v41, v42, (v42 - v41) >> 5);
          RIO_MTLX::readFromXmlString((uint64_t *)&v65, &__p, (uint64_t *)&v62, &v54);
          v53 = (void **)&v62;
          std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100](&v53);
          if (v23)
          {
            v26 = (unint64_t *)&v23->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          RIO_MTLX::XmlReadOptions::~XmlReadOptions((RIO_MTLX::XmlReadOptions *)&v54);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_48;
        }
        v22 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
      goto LABEL_38;
    }
  }
  else
  {
    v20 = (void *)v13;
    if ((_QWORD)v13)
      goto LABEL_31;
  }
  v54 = (void (***)(__int128 *__return_ptr))"CoreRealityIO/mtlxToUsdShadeUtils.mm";
  v55 = "_ReadFromAsset";
  v56 = 266;
  v57 = "void realityio::mtlx::_ReadFromAsset(mx::DocumentPtr, const ArResolvedPath &, const mx::FileSearchPath &, const "
        "mx::XmlReadOptions *)";
  LOBYTE(v58) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_48:
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v54 = (void (***)(__int128 *__return_ptr))&v41;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
  if (*((_QWORD *)&v45 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  Instance = (unint64_t *)atomic_load((unint64_t *)off_24FDDF020);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  v35 = v46;
  v36 = atomic_load(Instance + 18);
  if (v35 >= v36
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v46, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    *(_OWORD *)a1 = v50;
    v50 = 0uLL;
    MEMORY[0x2348B1A50](&v46);
  }
  else
  {
    MEMORY[0x2348B1A50](&v46);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
  }
LABEL_66:
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_23002DE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v44 - 208);
  a39 = &a14;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  MEMORY[0x2348B1A50](&a26);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_23002DF50()
{
  JUMPOUT(0x23002DF48);
}

void realityio::mtlx::UsdMtlxGetDocumentFromString(const std::string *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  std::string *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t **v11;
  std::string *v12;
  RIO_MTLX *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29[3];
  uint64_t v30[2];
  std::string v31;
  uint64_t *v32;
  uint64_t *v33;
  char v34;
  uint64_t *v35;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v32, (uint64_t)a1);
  v5 = std::to_string(&v31, v4);
  v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>>>::__find_equal<std::string>(&v35, (const void **)&v31.__r_.__value_.__l.__data_);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v11 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x48uLL);
    v32 = v7;
    v33 = &qword_255E547E0;
    v34 = 0;
    v12 = (std::string *)(v7 + 4);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v12, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
      v7[6] = v31.__r_.__value_.__r.__words[2];
    }
    v7[7] = 0;
    v7[8] = 0;
    v34 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>>>::__insert_node_at((uint64_t)v35, v11, v7);
    v32 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,void *>>>>::reset[abi:ne180100]((uint64_t *)&v32);
    RIO_MTLX::Document::createDocument<RIO_MTLX::Document>(v13, &v32);
    v14 = (std::__shared_weak_count *)v33;
    v30[0] = (uint64_t)v32;
    v30[1] = (uint64_t)v33;
    if (v33)
    {
      v15 = (unint64_t *)(v33 + 1);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    memset(v29, 0, sizeof(v29));
    RIO_MTLX::readFromXmlString(v30, a1, v29, 0);
    v35 = v29;
    std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v20 = (uint64_t)v32;
    v19 = v33;
    if (v33)
    {
      v21 = (unint64_t *)(v33 + 1);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = (std::__shared_weak_count *)v7[8];
    v7[7] = v20;
    v7[8] = (uint64_t)v19;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)v33;
    if (v33)
    {
      v27 = (unint64_t *)(v33 + 1);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  v8 = v7[8];
  *a2 = v7[7];
  a2[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_23002E178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,void *>>>>::reset[abi:ne180100](&a20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void realityio::mtlx::`anonymous namespace'::_GetCache(realityio::mtlx::_anonymous_namespace_ *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_255E54750);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_255E54750))
    {
      qword_255E547E8 = 0;
      qword_255E547E0 = 0;
      qword_255E547D8 = (uint64_t)&qword_255E547E0;
      __cxa_guard_release(&qword_255E54750);
    }
  }
}

uint64_t *realityio::mtlx::UsdMtlxGetDocument@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  std::string *v12;
  RIO_MTLX *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  realityio::mtlx *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  realityio::mtlx *v22;
  unint64_t *Instance;
  uint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t Begin;
  uint64_t v28;
  char *v29;
  uint64_t i;
  uint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  char v40;
  uint64_t *v41;

  result = std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>>>::__find_equal<std::string>(&v41, (const void **)a1);
  v5 = *result;
  if (*result)
  {
    v7 = *(_QWORD *)(v5 + 56);
    v6 = *(_QWORD *)(v5 + 64);
    *a2 = v7;
    a2[1] = v6;
    if (v6)
    {
      v8 = (unint64_t *)(v6 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  else
  {
    v10 = (uint64_t **)result;
    v11 = (uint64_t *)operator new(0x48uLL);
    *(_QWORD *)&v39 = v11;
    *((_QWORD *)&v39 + 1) = &qword_255E547E0;
    v40 = 0;
    v12 = (std::string *)(v11 + 4);
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      v11[6] = *(_QWORD *)(a1 + 16);
    }
    v11[7] = 0;
    v11[8] = 0;
    v40 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>>>::__insert_node_at((uint64_t)v41, v10, v11);
    *(_QWORD *)&v39 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,void *>>>>::reset[abi:ne180100]((uint64_t *)&v39);
    v13 = (RIO_MTLX *)MEMORY[0x2348B1A44](&v41);
    v14 = *(unsigned __int8 *)(a1 + 23);
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a1 + 8);
    if (v14)
    {
      realityio::mtlx::UsdMtlxReadDocument((RIO_MTLX *)&v39, a1);
      std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v11 + 7), &v39);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    else
    {
      RIO_MTLX::Document::createDocument<RIO_MTLX::Document>(v13, &v39);
      v18 = (realityio::mtlx *)std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v11 + 7), &v39);
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      realityio::mtlx::UsdMtlxStandardLibraryPaths(v18);
      realityio::mtlx::_ImportLibraries(v11 + 7);
      realityio::mtlx::UsdMtlxCustomSearchPaths(v22);
      realityio::mtlx::_ImportLibraries(v11 + 7);
    }
    Instance = (unint64_t *)atomic_load((unint64_t *)off_24FDDF020);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    v24 = v41;
    v25 = atomic_load(Instance + 18);
    if ((unint64_t)v24 < v25
      && (pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance) & 1) == 0)
    {
      Begin = pxrInternal__aapl__pxrReserved__::TfErrorMark::GetBegin((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41, v26);
      v28 = atomic_load((unint64_t *)off_24FDDF020);
      if (!v28)
        v28 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      LOBYTE(v39) = 0;
      for (i = tbb::interface6::internal::ets_base<(tbb::ets_key_usage_type)1>::table_lookup((unint64_t *)(v28 + 152), &v39); Begin != i; Begin = *(_QWORD *)(Begin + 8))
      {
        v31 = pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::NDR_DISCOVERY__DebugCodes>::nodes();
        v32 = atomic_load((unsigned int *)(v31 + 4));
        if (!v32)
        {
          pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::NDR_DISCOVERY__DebugCodes>::nodes();
          pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode();
          v32 = atomic_load((unsigned int *)(v31 + 4));
        }
        if (v32 == 2)
        {
          v33 = (_QWORD *)(Begin + 56);
          if (*(char *)(Begin + 79) < 0)
            v33 = (_QWORD *)*v33;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s\n", v29, v33);
        }
      }
      v34 = atomic_load((unint64_t *)off_24FDDF020);
      if (!v34)
        v34 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      v35 = pxrInternal__aapl__pxrReserved__::TfErrorMark::GetBegin((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41, (unint64_t *)v29);
      LOBYTE(v39) = 0;
      if (tbb::interface6::internal::ets_base<(tbb::ets_key_usage_type)1>::table_lookup((unint64_t *)(v34 + 152), &v39) != v35)pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange();
    }
    v36 = v11[8];
    *a2 = v11[7];
    a2[1] = v36;
    if (v36)
    {
      v37 = (unint64_t *)(v36 + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    return (uint64_t *)MEMORY[0x2348B1A50](&v41);
  }
  return result;
}

void sub_23002E568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  MEMORY[0x2348B1A50](va);
  _Unwind_Resume(a1);
}

void realityio::mtlx::_ImportLibraries(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *size;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  std::string v14;
  _QWORD v15[3];

  realityio::mtlx::UsdMtlxStandardFileExtensions(&v14);
  pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverFiles();
  *(_QWORD *)&v13 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  v2 = v15[0];
  v3 = v15[1];
  while (v2 != v3)
  {
    realityio::mtlx::UsdMtlxReadDocument((RIO_MTLX *)&v14, v2 + 24);
    size = (std::__shared_weak_count *)v14.__r_.__value_.__l.__size_;
    if (v14.__r_.__value_.__r.__words[0])
    {
      v5 = *a1;
      v13 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
      if (v14.__r_.__value_.__l.__size_)
      {
        v6 = (unint64_t *)(v14.__r_.__value_.__l.__size_ + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      RIO_MTLX::Document::importLibrary(v5, (RIO_MTLX::Element **)&v13);
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
      if (*((_QWORD *)&v13 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      size = (std::__shared_weak_count *)v14.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      p_shared_owners = (unint64_t *)&size->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v2 += 48;
  }
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
}

void sub_23002E6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::UsdMtlxGetVersion(RIO_MTLX::InterfaceElement **a1, _BYTE *a2)
{
  uint64_t VersionString;
  unint64_t *v5;
  __int128 v6;
  std::string::size_type size;
  uint64_t v8;
  RIO_MTLX::InterfaceElement *v9;
  unsigned __int8 *v10;
  uint64_t Instance;
  uint64_t Begin;
  uint64_t v14;
  std::string v15;
  _BYTE v16[8];

  MEMORY[0x2348B1A44](v16);
  VersionString = (uint64_t)RIO_MTLX::InterfaceElement::getVersionString(*a1);
  if (*(char *)(VersionString + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)VersionString, *(_QWORD *)(VersionString + 8));
  }
  else
  {
    v6 = *(_OWORD *)VersionString;
    v15.__r_.__value_.__r.__words[2] = *(_QWORD *)(VersionString + 16);
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  }
  size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v15.__r_.__value_.__l.__size_;
  if (!size)
  {
    v8 = 0;
    if (!a2)
      goto LABEL_14;
    goto LABEL_13;
  }
  VersionString = pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion();
  if (v14)
    v8 = v14;
  else
    v8 = 0;
  if (a2)
  {
LABEL_13:
    v9 = *a1;
    v10 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::DEFAULT_VERSION_ATTRIBUTE((RIO_MTLX::InterfaceElement *)VersionString);
    *a2 = RIO_MTLX::Element::getTypedAttribute<BOOL>((uint64_t)v9, v10) ^ 1;
  }
LABEL_14:
  Instance = atomic_load((unint64_t *)off_24FDDF020);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  Begin = pxrInternal__aapl__pxrReserved__::TfErrorMark::GetBegin((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v16, v5);
  LOBYTE(v14) = 0;
  if (tbb::interface6::internal::ets_base<(tbb::ets_key_usage_type)1>::table_lookup((unint64_t *)(Instance + 152), &v14) != Begin)pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange();
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  MEMORY[0x2348B1A50](v16);
  return v8;
}

void sub_23002E86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  MEMORY[0x2348B1A50](&a17);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::UsdMtlxGetSourceURI(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = *a1;
  v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  while (1)
  {
    if (!v3)
    {
      v10 = 1;
      if (!v2)
        goto LABEL_28;
      goto LABEL_24;
    }
    v6 = v2;
    if ((*(char *)(v3 + 95) & 0x80000000) == 0)
    {
      if (*(_BYTE *)(v3 + 95))
        break;
      goto LABEL_9;
    }
    if (*(_QWORD *)(v3 + 80))
      break;
LABEL_9:
    v7 = *(std::__shared_weak_count **)(v3 + 232);
    if (v7)
    {
      v2 = std::__shared_weak_count::lock(v7);
      if (v2)
      {
        v3 = *(_QWORD *)(v3 + 224);
        if (v6)
          goto LABEL_16;
      }
      else
      {
        v3 = 0;
        if (v6)
        {
LABEL_16:
          v8 = (unint64_t *)&v6->__shared_owners_;
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
    }
    else
    {
      v3 = 0;
      v2 = 0;
      if (v6)
        goto LABEL_16;
    }
  }
  v10 = 0;
  v3 += 72;
  if (!v2)
    goto LABEL_28;
LABEL_24:
  v11 = (unint64_t *)&v2->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_28:
  if (v10)
    return *a1 + 72;
  else
    return v3;
}

unint64_t realityio::mtlx::UsdMtlxGetUsdType@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *j;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  unint64_t *v20;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v23;
  uint64_t v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v80;
  uint64_t v81;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v82;
  uint64_t v83;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v84;
  uint64_t v85;
  unint64_t *v86;
  unsigned int *v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v93;
  uint64_t v94;
  unint64_t *v95;
  unsigned int *v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v102;
  uint64_t v103;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  unint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  unint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v140;
  uint64_t v141;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  unint64_t v148;
  unsigned int *v149;
  unsigned int v150;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v151;
  uint64_t v152;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  unint64_t v159;
  unsigned int *v160;
  unsigned int v161;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v162;
  uint64_t v163;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  unint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  uint64_t i;
  unsigned int *v174;
  unsigned int v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int *v180;
  unsigned int v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int *v186;
  unsigned int v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int *v196;
  unsigned int v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int *v202;
  unsigned int v203;
  uint64_t v204;
  unsigned __int8 *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  _QWORD v216[5];
  int v217;
  char v218;
  _QWORD v219[5];
  int v220;
  char v221;
  _QWORD v222[5];
  int v223;
  char v224;
  _QWORD v225[5];
  int v226;
  char v227;
  _QWORD v228[5];
  int v229;
  char v230;
  _QWORD v231[5];
  int v232;
  char v233;
  _QWORD v234[5];
  int v235;
  char v236;
  _QWORD v237[5];
  int v238;
  char v239;
  _QWORD v240[5];
  int v241;
  char v242;
  _QWORD v243[5];
  int v244;
  char v245;
  _QWORD v246[5];
  int v247;
  char v248;
  _QWORD v249[5];
  int v250;
  char v251;
  _QWORD v252[5];
  int v253;
  char v254;
  _QWORD v255[5];
  int v256;
  char v257;
  _QWORD v258[5];
  int v259;
  char v260;
  _QWORD v261[5];
  int v262;
  char v263;
  _QWORD v264[5];
  int v265;
  char v266;
  _QWORD v267[5];
  int v268;
  char v269;
  _QWORD v270[5];
  int v271;
  char v272;
  _QWORD v273[5];
  int v274;
  char v275;
  _QWORD v276[5];
  int v277;
  char v278;
  _QWORD v279[5];
  int v280;
  char v281;
  _QWORD v282[5];
  int v283;
  char v284;
  uint64_t v285;

  v285 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_15);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_15))
  {
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v215);
    qword_255E54778 = v215;
    unk_255E54780 = 0;
    dword_255E54788 = 0;
    byte_255E5478C = 0;
    __cxa_guard_release(&_MergedGlobals_15);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_255E54730);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_255E54730))
  {
    v204 = a2;
    v205 = a1;
    v20 = (unint64_t *)MEMORY[0x24BEE82A0];
    Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v22 = *(_QWORD *)Data;
    std::string::basic_string[abi:ne180100]<0>(v216, "BOOLean");
    v216[3] = v22;
    v216[4] = 0;
    v217 = 0;
    v218 = 1;
    v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v23)
      v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v24 = *((_QWORD *)v23 + 76);
    std::string::basic_string[abi:ne180100]<0>(v219, "color2array");
    v219[3] = v24;
    v219[4] = 0;
    v220 = 0;
    v221 = 0;
    v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v25)
      v25 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v26 = *((_QWORD *)v25 + 19);
    v27 = atomic_load(MEMORY[0x24BEE81E0]);
    if (!v27)
      v27 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v214 = *(_QWORD *)(v27 + 16);
    if ((v214 & 7) != 0)
    {
      v28 = (unsigned int *)(v214 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      v30 = (v29 & 1) == 0;
      v31 = v214;
      if (v30)
        v31 = v214 & 0xFFFFFFFFFFFFFFF8;
      v214 = v31;
    }
    v32 = v214;
    if ((v214 & 7) != 0)
    {
      v33 = (unsigned int *)(v214 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 2, v33));
      if ((v34 & 1) != 0)
        v32 = v214;
      else
        v32 = v214 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v222, "color2");
    v222[3] = v26;
    v222[4] = v32;
    v223 = 2;
    v224 = 0;
    v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v35)
      v35 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v36 = *((_QWORD *)v35 + 92);
    v37 = atomic_load(MEMORY[0x24BEE81E0]);
    if (!v37)
      v37 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v213 = *(_QWORD *)(v37 + 32);
    if ((v213 & 7) != 0)
    {
      v38 = (unsigned int *)(v213 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 2, v38));
      v30 = (v39 & 1) == 0;
      v40 = v213;
      if (v30)
        v40 = v213 & 0xFFFFFFFFFFFFFFF8;
      v213 = v40;
    }
    v41 = v213;
    if ((v213 & 7) != 0)
    {
      v42 = (unsigned int *)(v213 & 0xFFFFFFFFFFFFFFF8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 2, v42));
      if ((v43 & 1) != 0)
        v41 = v213;
      else
        v41 = v213 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v225, "color3array");
    v225[3] = v36;
    v225[4] = v41;
    v226 = 0;
    v227 = 1;
    v44 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v44)
      v44 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v45 = *((_QWORD *)v44 + 35);
    v46 = atomic_load(MEMORY[0x24BEE81E0]);
    if (!v46)
      v46 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v212 = *(_QWORD *)(v46 + 32);
    if ((v212 & 7) != 0)
    {
      v47 = (unsigned int *)(v212 & 0xFFFFFFFFFFFFFFF8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 2, v47));
      v30 = (v48 & 1) == 0;
      v49 = v212;
      if (v30)
        v49 = v212 & 0xFFFFFFFFFFFFFFF8;
      v212 = v49;
    }
    v50 = v212;
    if ((v212 & 7) != 0)
    {
      v51 = (unsigned int *)(v212 & 0xFFFFFFFFFFFFFFF8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 2, v51));
      if ((v52 & 1) != 0)
        v50 = v212;
      else
        v50 = v212 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v228, "color3");
    v228[3] = v45;
    v228[4] = v50;
    v229 = 0;
    v230 = 1;
    v53 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v53)
      v53 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v54 = *((_QWORD *)v53 + 12);
    v55 = atomic_load(MEMORY[0x24BEE81E0]);
    if (!v55)
      v55 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v211 = *(_QWORD *)(v55 + 8);
    if ((v211 & 7) != 0)
    {
      v56 = (unsigned int *)(v211 & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 2, v56));
      v30 = (v57 & 1) == 0;
      v58 = v211;
      if (v30)
        v58 = v211 & 0xFFFFFFFFFFFFFFF8;
      v211 = v58;
    }
    v59 = v211;
    if ((v211 & 7) != 0)
    {
      v60 = (unsigned int *)(v211 & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 2, v60));
      if ((v61 & 1) != 0)
        v59 = v211;
      else
        v59 = v211 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v231, "filename");
    v231[3] = v54;
    v231[4] = v59;
    v232 = 0;
    v233 = 1;
    v62 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v62)
      v62 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v63 = *((_QWORD *)v62 + 64);
    v64 = atomic_load(MEMORY[0x24BEE81E0]);
    if (!v64)
      v64 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v210 = *(_QWORD *)(v64 + 16);
    if ((v210 & 7) != 0)
    {
      v65 = (unsigned int *)(v210 & 0xFFFFFFFFFFFFFFF8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 2, v65));
      v30 = (v66 & 1) == 0;
      v67 = v210;
      if (v30)
        v67 = v210 & 0xFFFFFFFFFFFFFFF8;
      v210 = v67;
    }
    v68 = v210;
    if ((v210 & 7) != 0)
    {
      v69 = (unsigned int *)(v210 & 0xFFFFFFFFFFFFFFF8);
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 2, v69));
      if ((v70 & 1) != 0)
        v68 = v210;
      else
        v68 = v210 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v234, "floatarray");
    v234[3] = v63;
    v234[4] = v68;
    v235 = 0;
    v236 = 1;
    v71 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v71)
      v71 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v72 = *((_QWORD *)v71 + 7);
    v73 = atomic_load(MEMORY[0x24BEE81E0]);
    if (!v73)
      v73 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v209 = *(_QWORD *)(v73 + 16);
    if ((v209 & 7) != 0)
    {
      v74 = (unsigned int *)(v209 & 0xFFFFFFFFFFFFFFF8);
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 2, v74));
      v30 = (v75 & 1) == 0;
      v76 = v209;
      if (v30)
        v76 = v209 & 0xFFFFFFFFFFFFFFF8;
      v209 = v76;
    }
    v77 = v209;
    if ((v209 & 7) != 0)
    {
      v78 = (unsigned int *)(v209 & 0xFFFFFFFFFFFFFFF8);
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 2, v78));
      if ((v79 & 1) != 0)
        v77 = v209;
      else
        v77 = v209 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v237, "float");
    v237[3] = v72;
    v237[4] = v77;
    v238 = 0;
    v239 = 1;
    v80 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v80)
      v80 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v81 = *((_QWORD *)v80 + 67);
    std::string::basic_string[abi:ne180100]<0>(v240, "geomnamearray");
    v240[3] = v81;
    v240[4] = 0;
    v241 = 0;
    v242 = 0;
    v82 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v82)
      v82 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v83 = *((_QWORD *)v82 + 10);
    std::string::basic_string[abi:ne180100]<0>(v243, "geomname");
    v243[3] = v83;
    v243[4] = 0;
    v244 = 0;
    v245 = 0;
    v84 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v84)
      v84 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v85 = *((_QWORD *)v84 + 58);
    v86 = (unint64_t *)atomic_load(MEMORY[0x24BEE81E0]);
    if (!v86)
      v86 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v208 = *v86;
    if ((*v86 & 7) != 0)
    {
      v87 = (unsigned int *)(v208 & 0xFFFFFFFFFFFFFFF8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 2, v87));
      v30 = (v88 & 1) == 0;
      v89 = v208;
      if (v30)
        v89 = v208 & 0xFFFFFFFFFFFFFFF8;
      v208 = v89;
    }
    v90 = v208;
    if ((v208 & 7) != 0)
    {
      v91 = (unsigned int *)(v208 & 0xFFFFFFFFFFFFFFF8);
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 2, v91));
      if ((v92 & 1) != 0)
        v90 = v208;
      else
        v90 = v208 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v246, "integerarray");
    v246[3] = v85;
    v246[4] = v90;
    v247 = 0;
    v248 = 1;
    v93 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v93)
      v93 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v94 = *((_QWORD *)v93 + 2);
    v95 = (unint64_t *)atomic_load(MEMORY[0x24BEE81E0]);
    if (!v95)
      v95 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v207 = *v95;
    if ((*v95 & 7) != 0)
    {
      v96 = (unsigned int *)(v207 & 0xFFFFFFFFFFFFFFF8);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 2, v96));
      v30 = (v97 & 1) == 0;
      v98 = v207;
      if (v30)
        v98 = v207 & 0xFFFFFFFFFFFFFFF8;
      v207 = v98;
    }
    v99 = v207;
    if ((v207 & 7) != 0)
    {
      v100 = (unsigned int *)(v207 & 0xFFFFFFFFFFFFFFF8);
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 2, v100));
      if ((v101 & 1) != 0)
        v99 = v207;
      else
        v99 = v207 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v249, "integer");
    v249[3] = v94;
    v249[4] = v99;
    v250 = 0;
    v251 = 1;
    v102 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v102)
      v102 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v103 = *((_QWORD *)v102 + 44);
    std::string::basic_string[abi:ne180100]<0>(v252, "matrix33");
    v252[3] = v103;
    v252[4] = 0;
    v253 = 0;
    v254 = 1;
    v104 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v104)
      v104 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v105 = *((_QWORD *)v104 + 45);
    v106 = atomic_load(MEMORY[0x24BEE81E0]);
    if (!v106)
      v106 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v206 = *(_QWORD *)(v106 + 72);
    if ((v206 & 7) != 0)
    {
      v107 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 2, v107));
      v30 = (v108 & 1) == 0;
      v109 = v206;
      if (v30)
        v109 = v206 & 0xFFFFFFFFFFFFFFF8;
      v206 = v109;
    }
    v110 = v206;
    if ((v206 & 7) != 0)
    {
      v111 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
      do
        v112 = __ldxr(v111);
      while (__stxr(v112 + 2, v111));
      if ((v112 & 1) != 0)
        v110 = v206;
      else
        v110 = v206 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v255, "matrix44");
    v255[3] = v105;
    v255[4] = v110;
    v256 = 0;
    v257 = 1;
    v113 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v113)
      v113 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v114 = *((_QWORD *)v113 + 67);
    v115 = atomic_load(MEMORY[0x24BEE81E0]);
    if (!v115)
      v115 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v116 = *(_QWORD *)(v115 + 8);
    if ((v116 & 7) != 0)
    {
      v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
      do
        v118 = __ldxr(v117);
      while (__stxr(v118 + 2, v117));
      if ((v118 & 1) == 0)
        v116 &= 0xFFFFFFFFFFFFFFF8;
    }
    v119 = v116;
    if ((v116 & 7) != 0)
    {
      v120 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
      do
        v121 = __ldxr(v120);
      while (__stxr(v121 + 2, v120));
      if ((v121 & 1) != 0)
        v119 = v116;
      else
        v119 = v116 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v258, "stringarray");
    v258[3] = v114;
    v258[4] = v119;
    v259 = 0;
    v260 = 1;
    v122 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v122)
      v122 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v123 = *((_QWORD *)v122 + 10);
    v124 = atomic_load(MEMORY[0x24BEE81E0]);
    if (!v124)
      v124 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v125 = *(_QWORD *)(v124 + 8);
    if ((v125 & 7) != 0)
    {
      v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
      do
        v127 = __ldxr(v126);
      while (__stxr(v127 + 2, v126));
      if ((v127 & 1) == 0)
        v125 &= 0xFFFFFFFFFFFFFFF8;
    }
    v128 = v125;
    if ((v125 & 7) != 0)
    {
      v129 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
      do
        v130 = __ldxr(v129);
      while (__stxr(v130 + 2, v129));
      if ((v130 & 1) != 0)
        v128 = v125;
      else
        v128 = v125 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v261, "string");
    v261[3] = v123;
    v261[4] = v128;
    v262 = 0;
    v263 = 1;
    v131 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v131)
      v131 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v132 = *((_QWORD *)v131 + 11);
    v133 = atomic_load(MEMORY[0x24BEE81E0]);
    if (!v133)
      v133 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v134 = *(_QWORD *)(v133 + 88);
    if ((v134 & 7) != 0)
    {
      v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
      do
        v136 = __ldxr(v135);
      while (__stxr(v136 + 2, v135));
      if ((v136 & 1) == 0)
        v134 &= 0xFFFFFFFFFFFFFFF8;
    }
    v137 = v134;
    if ((v134 & 7) != 0)
    {
      v138 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
      do
        v139 = __ldxr(v138);
      while (__stxr(v139 + 2, v138));
      if ((v139 & 1) != 0)
        v137 = v134;
      else
        v137 = v134 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v264, "surfaceshader");
    v264[3] = v132;
    v264[4] = v137;
    v265 = 0;
    v266 = 1;
    v140 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v140)
      v140 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v141 = *((_QWORD *)v140 + 76);
    std::string::basic_string[abi:ne180100]<0>(v267, "vector2array");
    v267[3] = v141;
    v267[4] = 0;
    v268 = 0;
    v269 = 1;
    v142 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v142)
      v142 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v143 = *((_QWORD *)v142 + 19);
    v144 = atomic_load(MEMORY[0x24BEE81E0]);
    if (!v144)
      v144 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v145 = *(_QWORD *)(v144 + 16);
    if ((v145 & 7) != 0)
    {
      v146 = (unsigned int *)(v145 & 0xFFFFFFFFFFFFFFF8);
      do
        v147 = __ldxr(v146);
      while (__stxr(v147 + 2, v146));
      if ((v147 & 1) == 0)
        v145 &= 0xFFFFFFFFFFFFFFF8;
    }
    v148 = v145;
    if ((v145 & 7) != 0)
    {
      v149 = (unsigned int *)(v145 & 0xFFFFFFFFFFFFFFF8);
      do
        v150 = __ldxr(v149);
      while (__stxr(v150 + 2, v149));
      if ((v150 & 1) != 0)
        v148 = v145;
      else
        v148 = v145 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v270, "vector2");
    v270[3] = v143;
    v270[4] = v148;
    v271 = 2;
    v272 = 1;
    v151 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v151)
      v151 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v152 = *((_QWORD *)v151 + 77);
    std::string::basic_string[abi:ne180100]<0>(v273, "vector3array");
    v273[3] = v152;
    v273[4] = 0;
    v274 = 0;
    v275 = 1;
    v153 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v153)
      v153 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v154 = *((_QWORD *)v153 + 20);
    v155 = atomic_load(MEMORY[0x24BEE81E0]);
    if (!v155)
      v155 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v156 = *(_QWORD *)(v155 + 16);
    if ((v156 & 7) != 0)
    {
      v157 = (unsigned int *)(v156 & 0xFFFFFFFFFFFFFFF8);
      do
        v158 = __ldxr(v157);
      while (__stxr(v158 + 2, v157));
      if ((v158 & 1) == 0)
        v156 &= 0xFFFFFFFFFFFFFFF8;
    }
    v159 = v156;
    if ((v156 & 7) != 0)
    {
      v160 = (unsigned int *)(v156 & 0xFFFFFFFFFFFFFFF8);
      do
        v161 = __ldxr(v160);
      while (__stxr(v161 + 2, v160));
      if ((v161 & 1) != 0)
        v159 = v156;
      else
        v159 = v156 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v276, "vector3");
    v276[3] = v154;
    v276[4] = v159;
    v277 = 3;
    v278 = 1;
    v162 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v162)
      v162 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v163 = *((_QWORD *)v162 + 78);
    std::string::basic_string[abi:ne180100]<0>(v279, "vector4array");
    v279[3] = v163;
    v279[4] = 0;
    v280 = 0;
    v281 = 1;
    v164 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v20);
    if (!v164)
      v164 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v165 = *((_QWORD *)v164 + 21);
    v166 = atomic_load(MEMORY[0x24BEE81E0]);
    if (!v166)
      v166 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    v167 = *(_QWORD *)(v166 + 16);
    if ((v167 & 7) != 0)
    {
      v168 = (unsigned int *)(v167 & 0xFFFFFFFFFFFFFFF8);
      do
        v169 = __ldxr(v168);
      while (__stxr(v169 + 2, v168));
      if ((v169 & 1) == 0)
        v167 &= 0xFFFFFFFFFFFFFFF8;
    }
    v170 = v167;
    if ((v167 & 7) != 0)
    {
      v171 = (unsigned int *)(v167 & 0xFFFFFFFFFFFFFFF8);
      do
        v172 = __ldxr(v171);
      while (__stxr(v172 + 2, v171));
      if ((v172 & 1) != 0)
        v170 = v167;
      else
        v170 = v167 & 0xFFFFFFFFFFFFFFF8;
    }
    std::string::basic_string[abi:ne180100]<0>(v282, "vector4");
    v282[3] = v165;
    v282[4] = v170;
    v283 = 4;
    v284 = 1;
    std::unordered_map<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>::unordered_map((uint64_t)v216, 23);
    for (i = 132; i != -6; i -= 6)
      std::pair<std::string const,realityio::mtlx::UsdMtlxUsdTypeInfo>::~pair((uint64_t)&v216[i]);
    if ((v167 & 7) != 0)
    {
      v174 = (unsigned int *)(v167 & 0xFFFFFFFFFFFFFFF8);
      do
        v175 = __ldxr(v174);
      while (__stlxr(v175 - 2, v174));
    }
    if ((v156 & 7) != 0)
    {
      v176 = (unsigned int *)(v156 & 0xFFFFFFFFFFFFFFF8);
      do
        v177 = __ldxr(v176);
      while (__stlxr(v177 - 2, v176));
    }
    if ((v145 & 7) != 0)
    {
      v178 = (unsigned int *)(v145 & 0xFFFFFFFFFFFFFFF8);
      do
        v179 = __ldxr(v178);
      while (__stlxr(v179 - 2, v178));
    }
    if ((v134 & 7) != 0)
    {
      v180 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
      do
        v181 = __ldxr(v180);
      while (__stlxr(v181 - 2, v180));
    }
    if ((v125 & 7) != 0)
    {
      v182 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
      do
        v183 = __ldxr(v182);
      while (__stlxr(v183 - 2, v182));
    }
    if ((v116 & 7) != 0)
    {
      v184 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
      do
        v185 = __ldxr(v184);
      while (__stlxr(v185 - 2, v184));
    }
    if ((v206 & 7) != 0)
    {
      v186 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
      do
        v187 = __ldxr(v186);
      while (__stlxr(v187 - 2, v186));
    }
    if ((v207 & 7) != 0)
    {
      v188 = (unsigned int *)(v207 & 0xFFFFFFFFFFFFFFF8);
      do
        v189 = __ldxr(v188);
      while (__stlxr(v189 - 2, v188));
    }
    if ((v208 & 7) != 0)
    {
      v190 = (unsigned int *)(v208 & 0xFFFFFFFFFFFFFFF8);
      do
        v191 = __ldxr(v190);
      while (__stlxr(v191 - 2, v190));
    }
    if ((v209 & 7) != 0)
    {
      v192 = (unsigned int *)(v209 & 0xFFFFFFFFFFFFFFF8);
      do
        v193 = __ldxr(v192);
      while (__stlxr(v193 - 2, v192));
    }
    if ((v210 & 7) != 0)
    {
      v194 = (unsigned int *)(v210 & 0xFFFFFFFFFFFFFFF8);
      do
        v195 = __ldxr(v194);
      while (__stlxr(v195 - 2, v194));
    }
    if ((v211 & 7) != 0)
    {
      v196 = (unsigned int *)(v211 & 0xFFFFFFFFFFFFFFF8);
      do
        v197 = __ldxr(v196);
      while (__stlxr(v197 - 2, v196));
    }
    if ((v212 & 7) != 0)
    {
      v198 = (unsigned int *)(v212 & 0xFFFFFFFFFFFFFFF8);
      do
        v199 = __ldxr(v198);
      while (__stlxr(v199 - 2, v198));
    }
    if ((v213 & 7) != 0)
    {
      v200 = (unsigned int *)(v213 & 0xFFFFFFFFFFFFFFF8);
      do
        v201 = __ldxr(v200);
      while (__stlxr(v201 - 2, v200));
    }
    if ((v214 & 7) != 0)
    {
      v202 = (unsigned int *)(v214 & 0xFFFFFFFFFFFFFFF8);
      do
        v203 = __ldxr(v202);
      while (__stlxr(v203 - 2, v202));
    }
    __cxa_guard_release(&qword_255E54730);
    a2 = v204;
    a1 = v205;
  }
  result = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_255E54838, (uint64_t)a1);
  v7 = *((_QWORD *)&xmmword_255E54820 + 1);
  if (!*((_QWORD *)&xmmword_255E54820 + 1))
    goto LABEL_20;
  v8 = result;
  v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_255E54820 + 8));
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = result;
    if (result >= *((_QWORD *)&xmmword_255E54820 + 1))
      v11 = result % *((_QWORD *)&xmmword_255E54820 + 1);
  }
  else
  {
    v11 = (*((_QWORD *)&xmmword_255E54820 + 1) - 1) & result;
  }
  v12 = *(uint64_t ***)(xmmword_255E54820 + 8 * v11);
  if (v12)
  {
    for (j = *v12; j; j = (uint64_t *)*j)
    {
      v14 = j[1];
      if (v8 == v14)
      {
        result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_255E54840, (unsigned __int8 *)j + 16, a1);
        if ((result & 1) != 0)
          break;
      }
      else
      {
        if (v10 > 1)
        {
          if (v14 >= v7)
            v14 %= v7;
        }
        else
        {
          v14 &= v7 - 1;
        }
        if (v14 != v11)
          goto LABEL_20;
      }
    }
  }
  else
  {
LABEL_20:
    j = 0;
  }
  v15 = j + 5;
  if (!j)
    v15 = &qword_255E54778;
  *(_QWORD *)a2 = *v15;
  v16 = v15[1];
  *(_QWORD *)(a2 + 8) = v16;
  if ((v16 & 7) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 2, v17));
    if ((v18 & 1) == 0)
      *(_QWORD *)(a2 + 8) = v17;
  }
  v19 = *((_DWORD *)v15 + 4);
  *(_BYTE *)(a2 + 20) = *((_BYTE *)v15 + 20);
  *(_DWORD *)(a2 + 16) = v19;
  return result;
}

void sub_23002FB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _Unwind_Exception *exception_object, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;

  if (a9)
  {
    v41 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
  if (a10)
  {
    v43 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  if (a11)
  {
    v45 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  if (a12)
  {
    v47 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  if (a13)
  {
    v49 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  if (a14)
  {
    v51 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a17)
  {
    v53 = (unsigned int *)(a26 & 0xFFFFFFFFFFFFFFF8);
    do
      v54 = __ldxr(v53);
    while (__stlxr(v54 - 2, v53));
  }
  if (a18)
  {
    v55 = (unsigned int *)(a27 & 0xFFFFFFFFFFFFFFF8);
    do
      v56 = __ldxr(v55);
    while (__stlxr(v56 - 2, v55));
  }
  if (a19)
  {
    v57 = (unsigned int *)(a28 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  if (a20)
  {
    v59 = (unsigned int *)(a29 & 0xFFFFFFFFFFFFFFF8);
    do
      v60 = __ldxr(v59);
    while (__stlxr(v60 - 2, v59));
  }
  if (a21)
  {
    v61 = (unsigned int *)(a30 & 0xFFFFFFFFFFFFFFF8);
    do
      v62 = __ldxr(v61);
    while (__stlxr(v62 - 2, v61));
  }
  if (a22)
  {
    v63 = (unsigned int *)(a31 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  if (a23)
  {
    v65 = (unsigned int *)(a32 & 0xFFFFFFFFFFFFFFF8);
    do
      v66 = __ldxr(v65);
    while (__stlxr(v66 - 2, v65));
  }
  if (a24)
  {
    v67 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v68 = __ldxr(v67);
    while (__stlxr(v68 - 2, v67));
  }
  while (v35 != &a35)
  {
    v35 -= 48;
    std::pair<std::string const,realityio::mtlx::UsdMtlxUsdTypeInfo>::~pair((uint64_t)v35);
  }
  __cxa_guard_abort(&qword_255E54730);
  _Unwind_Resume(a1);
}

void sub_2300300D4()
{
  JUMPOUT(0x2300300E8);
}

void sub_230030140()
{
  JUMPOUT(0x230030080);
}

uint64_t std::pair<std::string const,realityio::mtlx::UsdMtlxUsdTypeInfo>::~pair(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void realityio::mtlx::UsdMtlxGetUsdValue(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  RIO_MTLX::TypedElement *v14;
  const std::string::value_type **v15;
  __int128 v16;
  RIO_MTLX::ValueElement *v17;
  const std::string::value_type **v18;
  __int128 v19;

  v6 = atomic_load((unsigned __int8 *)&qword_255E54738);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_255E54738))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_255E54790, "default");
    __cxa_guard_release(&qword_255E54738);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_255E54740);
  if ((v7 & 1) == 0)
  {
    v14 = (RIO_MTLX::TypedElement *)__cxa_guard_acquire(&qword_255E54740);
    if ((_DWORD)v14)
    {
      v15 = (const std::string::value_type **)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v14);
      if (*((char *)v15 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&xmmword_255E547A8, *v15, (std::string::size_type)v15[1]);
      }
      else
      {
        v16 = *(_OWORD *)v15;
        qword_255E547B8 = (uint64_t)v15[2];
        xmmword_255E547A8 = v16;
      }
      __cxa_guard_release(&qword_255E54740);
    }
  }
  v8 = atomic_load((unsigned __int8 *)&qword_255E54748);
  if ((v8 & 1) == 0)
  {
    v17 = (RIO_MTLX::ValueElement *)__cxa_guard_acquire(&qword_255E54748);
    if ((_DWORD)v17)
    {
      v18 = (const std::string::value_type **)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v17);
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&xmmword_255E547C0, *v18, (std::string::size_type)v18[1]);
      }
      else
      {
        v19 = *(_OWORD *)v18;
        qword_255E547D0 = (uint64_t)v18[2];
        xmmword_255E547C0 = v19;
      }
      __cxa_guard_release(&qword_255E54748);
    }
  }
  if (*(_QWORD *)a1)
  {
    if (a2)
      v9 = (unsigned __int8 *)qword_255E54790;
    else
      v9 = (unsigned __int8 *)&xmmword_255E547C0;
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(*(_QWORD *)a1 + 160), v9);
    if (v10)
      v11 = (uint64_t *)(v10 + 40);
    else
      v11 = RIO_MTLX::EMPTY_STRING(0);
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(*(_QWORD *)a1 + 160), (unsigned __int8 *)&xmmword_255E547A8);
    if (v12)
      v13 = (uint64_t *)(v12 + 40);
    else
      v13 = RIO_MTLX::EMPTY_STRING(0);
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_230030360(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255E54738);
  _Unwind_Resume(a1);
}

void realityio::mtlx::`anonymous namespace'::_GetUsdValue(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  const void *v9;
  _BYTE *v10;
  char v11;
  char v12;
  _DWORD *v13;
  int v14;
  float *v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned __int8 *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  void *v31;
  char *v32;
  int v33;
  int v34;
  _QWORD *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *New;
  uint64_t v47;
  _BYTE *v48;
  char v49;
  char *v50;
  const char *v51;
  const char *v52;
  const char *v53;
  _QWORD *v54;
  _QWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  __int128 *v60;
  __int128 *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  __int128 v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  char *v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  char *v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  char *v92;
  uint64_t v93;
  char *v94;
  __int128 *v95;
  uint64_t i;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  unsigned int *v100;
  unsigned int v101;
  char *v102;
  uint64_t j;
  float32x4_t v104;
  float64x2_t *v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  unsigned int *v111;
  unsigned int v112;
  _QWORD *v113;
  uint64_t v114;
  double *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::string v119;
  __int128 v120;
  __int128 v121;
  char *v122;
  __int128 lpsrc;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_255E54758);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_255E54758))
  {
    std::string::basic_string[abi:ne180100]<0>(&qword_255E547F0, "filename");
    __cxa_guard_release(&qword_255E54758);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_255E54760);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255E54760))
  {
    std::string::basic_string[abi:ne180100]<0>(byte_255E54808, "geomname");
    __cxa_guard_release(&qword_255E54760);
  }
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_142;
  RIO_MTLX::Value::createValueFromStrings((RIO_MTLX::Value *)a2, a3, &lpsrc);
  v9 = (const void *)lpsrc;
  if (!(_QWORD)lpsrc)
    goto LABEL_136;
  if (!v10)
  {
    if (v13)
    {
      v11 = 0;
      v14 = v13[2];
      *(_QWORD *)(a1 + 8) = &unk_24FDE9B5B;
      *(_DWORD *)a1 = v14;
      goto LABEL_137;
    }
    if (v15)
    {
      v11 = 0;
      v16 = v15[2];
LABEL_13:
      *(_QWORD *)(a1 + 8) = &unk_24FDE5F5B;
      *(float *)a1 = v16;
      goto LABEL_137;
    }
    {
      v17 = a3[23];
      if ((v17 & 0x80u) == 0)
        v18 = a3[23];
      else
        v18 = *((_QWORD *)a3 + 1);
      v19 = qword_255E547F8;
      if (byte_255E54807 >= 0)
        v19 = byte_255E54807;
      if (v18 == v19)
      {
        if (byte_255E54807 >= 0)
          v20 = &qword_255E547F0;
        else
          v20 = (uint64_t *)qword_255E547F0;
        if ((v17 & 0x80) == 0)
        {
          if (a3[23])
          {
            v21 = a3;
            while (*v21 == *(unsigned __int8 *)v20)
            {
              ++v21;
              v20 = (uint64_t *)((char *)v20 + 1);
              if (!--v17)
                goto LABEL_42;
            }
            goto LABEL_39;
          }
          goto LABEL_42;
        }
        if (!memcmp(*(const void **)a3, v20, *((_QWORD *)a3 + 1)))
        {
LABEL_42:
          MEMORY[0x2348B1B64](&v124, v32 + 8);
          *(_QWORD *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(void)::ti;
          pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_PlaceCopy((std::string **)a1, &v124);
          pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)&v124);
          goto LABEL_102;
        }
      }
LABEL_39:
      std::operator==[abi:ne180100]<std::allocator<char>>(a3, byte_255E54808);
      v31 = (void *)lpsrc;
      if ((_QWORD)lpsrc)
      *(_QWORD *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy((std::string **)a1, (uint64_t)v31 + 8);
      goto LABEL_102;
    }
    if (v22)
    {
      v23 = v22;
      v122 = 0;
      v120 = 0u;
      v121 = 0u;
      pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::reserve((unint64_t *)&v120, v22[2]);
      v25 = (_QWORD *)v23[1];
      v24 = v23[2];
      v26 = v24 & 0x3F;
      if (v24 <= 0x3F && (v24 & 0x3F) == 0)
      {
LABEL_33:
        *(_QWORD *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy((uint64_t *)a1, (uint64_t)&v120);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v120);
LABEL_102:
        v11 = 0;
        goto LABEL_137;
      }
      v33 = 0;
      v34 = 0;
      v35 = &v25[v24 >> 6];
      v36 = "emplace_back";
      v37 = "void pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::emplace_back(Args &&...) [T = BOOL, Args = <BOOL>]";
      v38 = "Array rank %u != 1";
      while (1)
      {
        if (DWORD2(v120))
        {
          *(_QWORD *)&v124 = "vt/array.h";
          *((_QWORD *)&v124 + 1) = v36;
          v51 = v36;
          *(_QWORD *)&v125 = 433;
          *((_QWORD *)&v125 + 1) = v37;
          v52 = v37;
          LOBYTE(v126) = 0;
          v53 = v38;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
          v36 = v51;
          v37 = v52;
          v38 = v53;
          goto LABEL_53;
        }
        v39 = (*v25 >> v34) & 1;
        v40 = v120;
        v41 = v122;
        if (*((_QWORD *)&v121 + 1))
          break;
        if (v122)
        {
          v42 = atomic_load((unint64_t *)v122 - 2);
          v41 = v122;
          if (v42 != 1)
            break;
          v43 = *((_QWORD *)v122 - 1);
        }
        else
        {
          v43 = 0;
        }
        if ((_QWORD)v120 == v43)
          break;
        v41[v120] = v39;
LABEL_52:
        *(_QWORD *)&v120 = v120 + 1;
LABEL_53:
        v25 += v33 == 63;
        if (v33 == 63)
          v34 = 0;
        else
          ++v34;
        v33 = v34;
        if (v25 == v35 && v26 == v34)
          goto LABEL_33;
      }
      v44 = 1;
      do
      {
        v45 = v44;
        v44 *= 2;
      }
      while (v45 < (uint64_t)v120 + 1);
      New = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)&v120, v45);
      if (v40)
      {
        v47 = v40;
        v48 = New;
        do
        {
          v49 = *v41++;
          *v48++ = v49;
          --v47;
        }
        while (v47);
      }
      *((_BYTE *)New + v40) = v39;
      v50 = (char *)New;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v120);
      v122 = v50;
      v36 = "emplace_back";
      v37 = "void pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::emplace_back(Args &&...) [T = BOOL, Args = <BOOL>]";
      v38 = "Array rank %u != 1";
      goto LABEL_52;
    }
    if (v27)
    {
      v28 = v27;
      *(_QWORD *)&v126 = 0;
      v124 = 0u;
      v125 = 0u;
      pxrInternal__aapl__pxrReserved__::VtArray<int>::reserve((unint64_t *)&v124, (uint64_t)(v27[2] - v27[1]) >> 2);
      v29 = (_DWORD *)v28[1];
      v30 = (_DWORD *)v28[2];
      while (v29 != v30)
      {
        LODWORD(v120) = *v29;
        pxrInternal__aapl__pxrReserved__::VtArray<int>::emplace_back<int>((uint64_t)&v124, &v120);
        ++v29;
      }
      *(_QWORD *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy((uint64_t *)a1, (uint64_t)&v124);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v124);
      goto LABEL_102;
    }
    if (v54)
    {
      v55 = v54;
      *(_QWORD *)&v126 = 0;
      v124 = 0u;
      v125 = 0u;
      pxrInternal__aapl__pxrReserved__::VtArray<float>::reserve((unint64_t *)&v124, (uint64_t)(v54[2] - v54[1]) >> 2);
      v56 = (_DWORD *)v55[1];
      v57 = (_DWORD *)v55[2];
      while (v56 != v57)
      {
        LODWORD(v120) = *v56;
        pxrInternal__aapl__pxrReserved__::VtArray<float>::emplace_back<float>((uint64_t)&v124, &v120);
        ++v56;
      }
      *(_QWORD *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy((uint64_t *)a1, (uint64_t)&v124);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v124);
      goto LABEL_102;
    }
    if (v58)
    {
      v59 = v58;
      v122 = 0;
      v120 = 0u;
      v121 = 0u;
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::reserve((unint64_t *)&v120, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58[2] - v58[1]) >> 3));
      v61 = (__int128 *)v59[1];
      v60 = (__int128 *)v59[2];
      if (v61 == v60)
      {
LABEL_94:
        *(_QWORD *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)a1, (uint64_t)&v120);
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v120);
        goto LABEL_102;
      }
      while (1)
      {
        if (*((char *)v61 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)v61, *((_QWORD *)v61 + 1));
        }
        else
        {
          v62 = *v61;
          v119.__r_.__value_.__r.__words[2] = *((_QWORD *)v61 + 2);
          *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v62;
        }
        if (DWORD2(v120))
        {
          *(_QWORD *)&v124 = "vt/array.h";
          *((_QWORD *)&v124 + 1) = "emplace_back";
          *(_QWORD *)&v125 = 433;
          *((_QWORD *)&v125 + 1) = "void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::emplace_back(Args &&...)"
                                   " [T = std::string, Args = <std::string>]";
          LOBYTE(v126) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
          goto LABEL_86;
        }
        v63 = v120;
        v64 = (uint64_t)v122;
        if (*((_QWORD *)&v121 + 1))
          break;
        if (v122)
        {
          v65 = atomic_load((unint64_t *)v122 - 2);
          v64 = (uint64_t)v122;
          if (v65 != 1)
            break;
          v66 = *((_QWORD *)v122 - 1);
        }
        else
        {
          v66 = 0;
        }
        if ((_QWORD)v120 == v66)
          break;
        v67 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
        v68 = v64 + 24 * v120;
        *(_QWORD *)(v68 + 16) = *((_QWORD *)&v119.__r_.__value_.__l + 2);
        *(_OWORD *)v68 = v67;
        memset(&v119, 0, sizeof(v119));
LABEL_85:
        *(_QWORD *)&v120 = v120 + 1;
LABEL_86:
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v119.__r_.__value_.__l.__data_);
        v61 = (__int128 *)((char *)v61 + 24);
        if (v61 == v60)
          goto LABEL_94;
      }
      v69 = v60;
      v70 = 1;
      do
      {
        v71 = v70;
        v70 *= 2;
      }
      while (v71 < (uint64_t)v120 + 1);
      v72 = (char *)pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)&v120, v71);
      std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(v64, v64 + 24 * v63, (uint64_t)v72);
      v73 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      v74 = &v72[24 * v63];
      *((_QWORD *)v74 + 2) = *((_QWORD *)&v119.__r_.__value_.__l + 2);
      *(_OWORD *)v74 = v73;
      memset(&v119, 0, sizeof(v119));
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v120);
      v122 = v72;
      v60 = v69;
      goto LABEL_85;
    }
    if (v75)
    {
      *(_QWORD *)&v124 = v75[1];
      DWORD2(v124) = *((_DWORD *)v75 + 4);
      *(_QWORD *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
                          + 2;
      v76 = operator new();
      *(_QWORD *)v76 = v124;
      *(_DWORD *)(v76 + 8) = DWORD2(v124);
      v77 = (unsigned int *)(v76 + 12);
      atomic_store(0, (unsigned int *)(v76 + 12));
      *(_QWORD *)a1 = v76;
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
      goto LABEL_102;
    }
    if (v79)
    {
      v124 = *(_OWORD *)(v79 + 8);
      *(_QWORD *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>(void)::ti
                          + 2;
      v80 = operator new();
      *(_OWORD *)v80 = v124;
      v81 = (unsigned int *)(v80 + 16);
      atomic_store(0, (unsigned int *)(v80 + 16));
      *(_QWORD *)a1 = v80;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
      goto LABEL_102;
    }
    if (v83)
    {
      v11 = 0;
      *(_QWORD *)a1 = v83[1];
      *(_QWORD *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(void)::ti
                          + 3;
      goto LABEL_137;
    }
    if (v84)
    {
      *(_QWORD *)&v124 = v84[1];
      DWORD2(v124) = *((_DWORD *)v84 + 4);
      *(_QWORD *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
                          + 2;
      v85 = operator new();
      *(_QWORD *)v85 = v124;
      *(_DWORD *)(v85 + 8) = DWORD2(v124);
      v86 = (unsigned int *)(v85 + 12);
      atomic_store(0, (unsigned int *)(v85 + 12));
      *(_QWORD *)a1 = v85;
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
      goto LABEL_102;
    }
    if (v88)
    {
      v124 = *(_OWORD *)(v88 + 8);
      *(_QWORD *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>(void)::ti
                          + 2;
      v89 = operator new();
      *(_OWORD *)v89 = v124;
      v90 = (unsigned int *)(v89 + 16);
      atomic_store(0, (unsigned int *)(v89 + 16));
      *(_QWORD *)a1 = v89;
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 1, v90));
      goto LABEL_102;
    }
    if (v92)
    {
      v93 = 0;
      v94 = v92 + 8;
      v95 = &v124;
      do
      {
        for (i = 0; i != 3; ++i)
          *((double *)v95 + i) = *(float *)&v94[4 * i];
        ++v93;
        v95 = (__int128 *)((char *)v95 + 24);
        v94 += 12;
      }
      while (v93 != 3);
      *(_QWORD *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(void)::ti
                          + 2;
      v97 = operator new();
      v98 = v127;
      *(_OWORD *)(v97 + 32) = v126;
      *(_OWORD *)(v97 + 48) = v98;
      *(_QWORD *)(v97 + 64) = v128;
      v99 = v125;
      *(_OWORD *)v97 = v124;
      *(_OWORD *)(v97 + 16) = v99;
      v100 = (unsigned int *)(v97 + 72);
      atomic_store(0, (unsigned int *)(v97 + 72));
      *(_QWORD *)a1 = v97;
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
      goto LABEL_102;
    }
    if (v102)
    {
      for (j = 0; j != 4; ++j)
      {
        v104 = *(float32x4_t *)&v102[16 * j + 8];
        v105 = (float64x2_t *)(&v124 + 2 * j);
        *v105 = vcvtq_f64_f32(*(float32x2_t *)v104.f32);
        v105[1] = vcvt_hight_f64_f32(v104);
      }
      *(_QWORD *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(void)::ti
                          + 2;
      v106 = operator new();
      v107 = v129;
      *(_OWORD *)(v106 + 64) = v128;
      *(_OWORD *)(v106 + 80) = v107;
      v108 = v131;
      *(_OWORD *)(v106 + 96) = v130;
      *(_OWORD *)(v106 + 112) = v108;
      v109 = v125;
      *(_OWORD *)v106 = v124;
      *(_OWORD *)(v106 + 16) = v109;
      v110 = v127;
      *(_OWORD *)(v106 + 32) = v126;
      *(_OWORD *)(v106 + 48) = v110;
      v111 = (unsigned int *)(v106 + 128);
      atomic_store(0, (unsigned int *)(v106 + 128));
      *(_QWORD *)a1 = v106;
      do
        v112 = __ldxr(v111);
      while (__stxr(v112 + 1, v111));
      goto LABEL_102;
    }
    if (v113)
    {
      v11 = 0;
      v114 = v113[1];
      *(_QWORD *)(a1 + 8) = &unk_24FDE9B5B;
      *(_DWORD *)a1 = v114;
      goto LABEL_137;
    }
    if (v115)
    {
      v11 = 0;
      v16 = v115[1];
      goto LABEL_13;
    }
    *(_QWORD *)&v124 = "CoreRealityIO/mtlxToUsdShadeUtils.mm";
    *((_QWORD *)&v124 + 1) = "_GetUsdValue";
    *(_QWORD *)&v125 = 160;
    *((_QWORD *)&v125 + 1) = "VtValue realityio::mtlx::(anonymous namespace)::_GetUsdValue(const std::string &, const std::string &)";
    LOBYTE(v126) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
LABEL_136:
    v11 = 1;
    goto LABEL_137;
  }
  v11 = 0;
  v12 = v10[8];
  *(_QWORD *)(a1 + 8) = &unk_24FDE59C3;
  *(_BYTE *)a1 = v12;
LABEL_137:
  v116 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
  if (!*((_QWORD *)&lpsrc + 1))
    goto LABEL_141;
  v117 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
  do
    v118 = __ldaxr(v117);
  while (__stlxr(v118 - 1, v117));
  if (!v118)
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
    if ((v11 & 1) == 0)
      return;
  }
  else
  {
LABEL_141:
    if ((v11 & 1) == 0)
      return;
  }
LABEL_142:
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_230031114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void realityio::mtlx::UsdMtlxGetPackedUsdValues(unsigned __int8 *a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  int v5;
  const char *v6;
  __int128 *v7;
  __int128 *i;
  __int128 v9;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  void *v13;
  char v14;
  std::string __p;
  __int128 *v16;
  __int128 *v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = a1[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a1 + 1);
  if (v4 < 5 || (v5 >= 0 ? (v6 = (const char *)a1) : (v6 = *(const char **)a1), strcmp(&v6[v4 - 5], "array")))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, ",");
    pxrInternal__aapl__pxrReserved__::TfStringSplit();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = v16;
    for (i = v17; v7 != i; v7 = (__int128 *)((char *)v7 + 24))
    {
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v9 = *v7;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      pxrInternal__aapl__pxrReserved__::TfStringTrim();
      if (v14 < 0)
        operator delete(v13);
      v10 = v19;
      if (v19)
      {
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
      }
      else
      {
        v12 = *a2;
        for (j = a2[1];
              j != v12;
        a2[1] = v12;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v18);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v10)
        break;
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
}

void sub_2300313D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a21 < 0)
    operator delete(__p);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

std::__split_buffer<std::string>::pointer std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(__int128 *a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  uint64_t v5;
  __int128 *v7;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::string *v18;
  uint64_t v19;
  __int128 *v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  std::string *v30;
  std::__split_buffer<std::string>::pointer begin;
  std::string *v32;
  uint64_t v33;
  std::string *v34;
  uint64_t v35;
  __int128 v36;
  std::string *v37;
  uint64_t v38;
  std::string *v39;
  __int128 v40;
  __int128 v41;
  std::string *value;
  std::string *v43;
  std::__split_buffer<std::string> v45;
  _QWORD v46[3];
  char v47;
  std::string *v48;
  std::string *v49;

  v5 = a2;
  if (a5 <= 0)
    return (std::__split_buffer<std::string>::pointer)v5;
  v7 = a3;
  v10 = (uint64_t)(a1 + 1);
  v9 = *((_QWORD *)a1 + 2);
  v11 = (std::string *)*((_QWORD *)a1 + 1);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v11) >> 3)) >= a5)
  {
    v19 = (uint64_t)v11 - a2;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - a2) >> 3)) >= a5)
    {
      v20 = (__int128 *)((char *)a3 + 24 * a5);
      v21 = (std::string *)*((_QWORD *)a1 + 1);
    }
    else
    {
      v20 = (__int128 *)((char *)a3 + 8 * (((uint64_t)v11 - a2) >> 3));
      v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 1), v20, a4, v11);
      *((_QWORD *)a1 + 1) = v21;
      if (v19 < 1)
        return (std::__split_buffer<std::string>::pointer)v5;
    }
    v22 = (std::string *)(v5 + 24 * a5);
    v23 = &v21[-a5];
    v24 = v21;
    if (v23 < v11)
    {
      v24 = v21;
      do
      {
        v25 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v24->__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
        ++v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        ++v23;
      }
      while (v23 < v11);
    }
    *((_QWORD *)a1 + 1) = v24;
    if (v21 != v22)
    {
      v26 = v21 - 1;
      v27 = 8 * (((char *)v21 - (char *)v22) >> 3);
      do
      {
        if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26->__r_.__value_.__l.__data_);
        v28 = (__int128 *)(v5 + v27 - 24);
        v29 = *v28;
        v26->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + v27 - 8);
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v29;
        --v26;
        *(_BYTE *)(v5 + v27 - 1) = 0;
        *(_BYTE *)v28 = 0;
        v27 -= 24;
      }
      while (v27);
    }
    if (v20 != v7)
    {
      v30 = (std::string *)v5;
      do
      {
        std::string::operator=(v30, (const std::string *)v7);
        v7 = (__int128 *)((char *)v7 + 24);
        ++v30;
      }
      while (v7 != v20);
    }
    return (std::__split_buffer<std::string>::pointer)v5;
  }
  v12 = *(_QWORD *)a1;
  v13 = a5 - 0x5555555555555555 * (((uint64_t)v11 - *(_QWORD *)a1) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL)
    std::vector<char const*>::__throw_length_error[abi:ne180100]();
  v14 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v12) >> 3);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v12) >> 3);
  v16 = 2 * v15;
  if (2 * v15 <= v13)
    v16 = a5 - 0x5555555555555555 * (((uint64_t)v11 - *(_QWORD *)a1) >> 3);
  if (v15 >= 0x555555555555555)
    v17 = 0xAAAAAAAAAAAAAAALL;
  else
    v17 = v16;
  v45.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 1);
  if (v17)
    v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)(a1 + 1), v17);
  else
    v18 = 0;
  v32 = v18 + v14;
  v45.__first_ = v18;
  v45.__begin_ = v32;
  v45.__end_ = v32;
  v45.__end_cap_.__value_ = &v18[v17];
  v33 = 3 * a5;
  v34 = &v32[a5];
  v35 = 8 * v33;
  do
  {
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v36 = *v7;
      v32->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v36;
    }
    ++v32;
    v7 = (__int128 *)((char *)v7 + 24);
    v35 -= 24;
  }
  while (v35);
  v45.__end_ = v34;
  begin = v45.__begin_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(v10, v5, v5, *(_QWORD *)a1, *(_QWORD *)a1, (uint64_t)v45.__begin_, (uint64_t)v45.__begin_);
  v45.__begin_ = v37;
  v38 = *((_QWORD *)a1 + 1);
  v39 = v34;
  v48 = v34;
  v49 = v34;
  v46[0] = v10;
  v46[1] = &v48;
  v46[2] = &v49;
  if (v38 != v5)
  {
    do
    {
      v40 = *(_OWORD *)v5;
      v39->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
      ++v39;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)v5 = 0;
      v5 += 24;
    }
    while (v5 != v38);
    v49 = v39;
  }
  v47 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v46);
  v41 = *a1;
  value = v45.__end_cap_.__value_;
  *(_QWORD *)a1 = v45.__begin_;
  *((_QWORD *)a1 + 1) = v39;
  *(_OWORD *)&v45.__begin_ = v41;
  v43 = (std::string *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = value;
  v45.__end_cap_.__value_ = v43;
  v45.__first_ = (std::__split_buffer<std::string>::pointer)v41;
  std::__split_buffer<std::string>::~__split_buffer(&v45);
  return begin;
}

void sub_230031784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::__function::__func<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0,std::allocator<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0,std::allocator<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDEEA30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0,std::allocator<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDEEA30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0,std::allocator<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::operator()(uint64_t a1, _QWORD *a2, char **a3)
{
  std::__shared_weak_count *v4;
  void *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string v8;
  std::string v9;
  __int128 v10;
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v20 = 0uLL;
  v21 = 0;
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath())
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner();
    v18 = *(_OWORD *)v12;
    v19 = v13;
    HIBYTE(v13) = 0;
    LOBYTE(v12[0]) = 0;
    *(_OWORD *)__p = v14;
    v17 = v15;
    pxrInternal__aapl__pxrReserved__::TfGetPathName();
    if (v13 >= 0)
      v5 = (void *)HIBYTE(v13);
    else
      v5 = v12[1];
    if (v5)
    {
      RIO_MTLX::FilePath::asString(a3, 1, &v8);
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths();
    }
    else
    {
      RIO_MTLX::FilePath::asString(a3, 1, &v9);
    }
    pxrInternal__aapl__pxrReserved__::ArchNormPath();
    if (SHIBYTE(v13) < 0)
      operator delete(v12[0]);
    *(_OWORD *)v12 = v10;
    v13 = v11;
    HIBYTE(v11) = 0;
    LOBYTE(v10) = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    if (v5 && SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath();
    v20 = v10;
    v21 = v11;
    if (SHIBYTE(v13) < 0)
      operator delete(v12[0]);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v19) < 0)
      operator delete((void *)v18);
  }
  v12[0] = "CoreRealityIO/mtlxToUsdShadeUtils.mm";
  v12[1] = "operator()";
  v13 = 316;
  *(_QWORD *)&v14 = "auto realityio::mtlx::_ReadFromAsset(mx::DocumentPtr, const ArResolvedPath &, const mx::FileSearchPa"
                    "th &, const mx::XmlReadOptions *)::(anonymous class)::operator()(mx::DocumentPtr, const mx::FilePath"
                    " &, const mx::FileSearchPath &, const mx::XmlReadOptions *) const";
  BYTE8(v14) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
  if (SHIBYTE(v21) < 0)
    operator delete((void *)v20);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_230031B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v43;

  if (a30 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0,std::allocator<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0,std::allocator<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::target_type()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfErrorMark::GetBegin(pxrInternal__aapl__pxrReserved__::TfErrorMark *this, unint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *Instance;

  Instance = (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)atomic_load((unint64_t *)off_24FDDF020);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  return pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_GetErrorMarkBegin(Instance, *(_QWORD *)this, 0);
}

uint64_t tbb::interface6::internal::ets_base<(tbb::ets_key_usage_type)1>::table_lookup(unint64_t *a1, _BYTE *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v33;

  v4 = MEMORY[0x2348B3154]();
  v5 = v4;
  v6 = v4 ^ (v4 >> 3);
  v8 = a1 + 1;
  v7 = (_QWORD *)a1[1];
  __dmb(0xBu);
  if (!v7)
  {
LABEL_7:
    *a2 = 0;
    v14 = a1 + 2;
    v15 = (*(uint64_t (**)(unint64_t *))*a1)(a1);
    do
    {
      v16 = __ldaxr(v14);
      v17 = v16 + 1;
    }
    while (__stlxr(v17, v14));
    v18 = *v8;
    __dmb(0xBu);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v17 <= (unint64_t)(1 << v19) >> 1)
      {
LABEL_28:
        v26 = *v8;
        __dmb(0xBu);
        v27 = *(_QWORD *)(v26 + 8);
        v28 = ~(-1 << v27);
        v29 = v6 >> -(char)v27;
        v30 = v26 + 16;
        while (1)
        {
          v31 = (unint64_t *)(v30 + 16 * v29);
          if (!*v31)
            break;
LABEL_36:
          v29 = (v29 + 1) & v28;
        }
        do
        {
          while (__ldaxr(v31))
          {
            __clrex();
            do
              v33 = __ldxr(v31);
            while (__stxr(v33, v31));
            if (v33)
              goto LABEL_36;
          }
        }
        while (__stlxr(v5, v31));
        *(_QWORD *)(v30 + 16 * v29 + 8) = v15;
        return v15;
      }
    }
    else
    {
      v19 = 2;
    }
    v21 = v19 - 1;
    do
      v22 = 1 << v21++;
    while (v17 > v22);
    v23 = (unint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 8))(a1, (16 << v21) + 16);
    v23[1] = v21;
    bzero(v23 + 2, 16 << v21);
    while (1)
    {
      *v23 = v18;
      do
      {
        while (1)
        {
          v24 = __ldaxr(v8);
          if (v24 == v18)
            break;
          __clrex();
          do
            v25 = __ldxr(v8);
          while (__stxr(v25, v8));
          if (v25 != v18)
            goto LABEL_25;
        }
      }
      while (__stlxr((unint64_t)v23, v8));
      v25 = v18;
LABEL_25:
      if (v18 == v25)
        goto LABEL_28;
      v18 = v25;
      if (*(_QWORD *)(v25 + 8) >= v21)
      {
        (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*a1 + 16))(a1, v23, (16 << v23[1]) + 16);
        goto LABEL_28;
      }
    }
  }
  while (1)
  {
    v9 = v7[1];
    v10 = v6 >> -(char)v9;
    v11 = v7 + 2;
    v12 = v7[2 * v10 + 2];
    if (v12)
      break;
LABEL_6:
    v7 = (_QWORD *)*v7;
    if (!v7)
      goto LABEL_7;
  }
  v13 = ~(-1 << v9);
  while (v12 != v4)
  {
    v10 = (v10 + 1) & v13;
    v12 = v11[2 * v10];
    if (!v12)
      goto LABEL_6;
  }
  v20 = *v8;
  __dmb(0xBu);
  *a2 = 1;
  v15 = v11[2 * v10 + 1];
  if (v7 != (_QWORD *)v20)
    goto LABEL_28;
  return v15;
}

void pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::reserve(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *New;
  uint64_t i;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    New = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)a1, a2);
    New = v6;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *((_BYTE *)v6 + i) = *(_BYTE *)(v3 + i);
    }
LABEL_12:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    a1[4] = (unint64_t)New;
  }
}

void pxrInternal__aapl__pxrReserved__::VtArray<int>::reserve(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *New;
  uint64_t v8;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    New = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew((uint64_t)a1, a2);
    New = v6;
    if (v5)
    {
      v8 = 0;
      do
      {
        *(_DWORD *)((char *)v6 + v8) = *(_DWORD *)(v3 + v8);
        v8 += 4;
      }
      while (4 * v5 != v8);
    }
LABEL_12:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    a1[4] = (unint64_t)New;
  }
}

void pxrInternal__aapl__pxrReserved__::VtArray<float>::reserve(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *New;
  uint64_t v8;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    New = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)a1, a2);
    New = v6;
    if (v5)
    {
      v8 = 0;
      do
      {
        *(_DWORD *)((char *)v6 + v8) = *(_DWORD *)(v3 + v8);
        v8 += 4;
      }
      while (4 * v5 != v8);
    }
LABEL_12:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    a1[4] = (unint64_t)New;
  }
}

void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::reserve(unint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *New;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)a1, a2);
    goto LABEL_9;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)a1, a2);
    std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(v3, v3 + 24 * v5, (uint64_t)New);
LABEL_9:
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(a1);
    a1[4] = (unint64_t)New;
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>>>::__find_equal<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  const void **v7;

  v3 = &qword_255E547E0;
  v4 = qword_255E547E0;
  if (qword_255E547E0)
  {
    v6 = &qword_255E547E0;
    do
    {
      while (1)
      {
        v3 = (uint64_t *)v4;
        v7 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_255E547E8, a2, (const void **)(v4 + 32)))
          break;
        v4 = *v3;
        v6 = v3;
        if (!*v3)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_255E547E8, v7, a2))
        break;
      v6 = v3 + 1;
      v4 = v3[1];
    }
    while (v4);
  }
  else
  {
    v6 = &qword_255E547E0;
  }
LABEL_10:
  *a1 = v3;
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(_QWORD *)qword_255E547D8)
  {
    qword_255E547D8 = *(_QWORD *)qword_255E547D8;
    a3 = *a2;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_255E547E0, a3);
  ++qword_255E547E8;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1 + 56);
      if (*(char *)(v1 + 55) < 0)
        operator delete(*(void **)(v1 + 32));
    }
    operator delete((void *)v1);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::NDR_DISCOVERY__DebugCodes>::nodes()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_255E54770);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255E54770))
  {
    v2 = operator new();
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    qword_255E54768 = v2;
    __cxa_guard_release(&qword_255E54770);
  }
  return qword_255E54768;
}

void sub_23003230C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255E54770);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData()
{
  unint64_t v0;
  unint64_t *v1;
  uint64_t v3;

  v0 = operator new();
  MEMORY[0x2348B2590]();
  v1 = (unint64_t *)MEMORY[0x24BEE81E0];
  while (!__ldaxr(v1))
  {
    if (!__stlxr(v0, v1))
      return v0;
  }
  __clrex();
  v3 = MEMORY[0x2348B259C](v0);
  MEMORY[0x2348B4E1C](v3, 0x60C405FAED287);
  return atomic_load(v1);
}

void sub_2300323A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C405FAED287);
  _Unwind_Resume(a1);
}

void std::unordered_map<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>::unordered_map(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 *i;
  unint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD **v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *j;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[2];
  char v41;

  xmmword_255E54820 = 0u;
  *(_OWORD *)&qword_255E54830 = 0u;
  dword_255E54840 = 1065353216;
  if (a2)
  {
    v2 = a1;
    v39 = a1 + 48 * a2;
    while (1)
    {
      v3 = (unint64_t)&xmmword_255E54820 + 8;
      v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_255E54838, v2);
      v5 = v4;
      v6 = *((_QWORD *)&xmmword_255E54820 + 1);
      if (*((_QWORD *)&xmmword_255E54820 + 1))
      {
        v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_255E54820 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          v3 = v4;
          if (v4 >= *((_QWORD *)&xmmword_255E54820 + 1))
            v3 = v4 % *((_QWORD *)&xmmword_255E54820 + 1);
        }
        else
        {
          v3 = (*((_QWORD *)&xmmword_255E54820 + 1) - 1) & v4;
        }
        v9 = *(unsigned __int8 ***)(xmmword_255E54820 + 8 * v3);
        if (v9)
        {
          for (i = *v9; i; i = *(unsigned __int8 **)i)
          {
            v11 = *((_QWORD *)i + 1);
            if (v11 == v5)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_255E54840, i + 16, (unsigned __int8 *)v2) & 1) != 0)goto LABEL_83;
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6)
                  v11 %= v6;
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v3)
                break;
            }
          }
        }
      }
      v12 = (char *)operator new(0x40uLL);
      v40[0] = v12;
      v40[1] = &qword_255E54830;
      v41 = 0;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = v5;
      v13 = (std::string *)(v12 + 16);
      if (*(char *)(v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v2;
        *((_QWORD *)v12 + 4) = *(_QWORD *)(v2 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      *((_QWORD *)v12 + 5) = *(_QWORD *)(v2 + 24);
      v15 = *(_QWORD *)(v2 + 32);
      *((_QWORD *)v12 + 6) = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 2, v16));
        if ((v17 & 1) == 0)
          *((_QWORD *)v12 + 6) &= 0xFFFFFFFFFFFFFFF8;
      }
      v18 = *(_DWORD *)(v2 + 40);
      v12[60] = *(_BYTE *)(v2 + 44);
      *((_DWORD *)v12 + 14) = v18;
      v41 = 1;
      v19 = (float)(unint64_t)(qword_255E54838 + 1);
      if (!v6 || (float)(*(float *)&dword_255E54840 * (float)v6) < v19)
        break;
LABEL_73:
      v35 = *(uint64_t **)(xmmword_255E54820 + 8 * v3);
      v36 = v40[0];
      if (v35)
      {
        *(_QWORD *)v40[0] = *v35;
      }
      else
      {
        *(_QWORD *)v40[0] = qword_255E54830;
        qword_255E54830 = v36;
        *(_QWORD *)(xmmword_255E54820 + 8 * v3) = &qword_255E54830;
        if (!*(_QWORD *)v36)
          goto LABEL_82;
        v37 = *(_QWORD *)(*(_QWORD *)v36 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v37 >= v6)
            v37 %= v6;
        }
        else
        {
          v37 &= v6 - 1;
        }
        v35 = (uint64_t *)(xmmword_255E54820 + 8 * v37);
      }
      *v35 = v36;
LABEL_82:
      v40[0] = 0;
      ++qword_255E54838;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v40);
LABEL_83:
      v2 += 48;
      if (v2 == v39)
        return;
    }
    v20 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v20 = 1;
    v21 = v20 | (2 * v6);
    v22 = vcvtps_u32_f32(v19 / *(float *)&dword_255E54840);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v6 = *((_QWORD *)&xmmword_255E54820 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_255E54820 + 1))
      goto LABEL_39;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_255E54820 + 1))
    {
      v30 = vcvtps_u32_f32((float)(unint64_t)qword_255E54838 / *(float *)&dword_255E54840);
      if (*((_QWORD *)&xmmword_255E54820 + 1) < 3uLL
        || (v31 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_255E54820 + 8)),
            v31.i16[0] = vaddlv_u8(v31),
            v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)&xmmword_255E54820 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_39:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = (void *)xmmword_255E54820;
          *(_QWORD *)&xmmword_255E54820 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *((int8x8_t *)&xmmword_255E54820 + 1) = prime;
          do
            *(_QWORD *)(xmmword_255E54820 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD **)qword_255E54830;
          if (qword_255E54830)
          {
            v28 = *(_QWORD *)(qword_255E54830 + 8);
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_255E54820 + 8 * v28) = &qword_255E54830;
            for (j = *v27; j; v28 = v34)
            {
              v34 = j[1];
              if (v29.u32[0] > 1uLL)
              {
                if (v34 >= *(_QWORD *)&prime)
                  v34 %= *(_QWORD *)&prime;
              }
              else
              {
                v34 &= *(_QWORD *)&prime - 1;
              }
              if (v34 != v28)
              {
                if (!*(_QWORD *)(xmmword_255E54820 + 8 * v34))
                {
                  *(_QWORD *)(xmmword_255E54820 + 8 * v34) = v27;
                  goto LABEL_64;
                }
                *v27 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_255E54820 + 8 * v34);
                **(_QWORD **)(xmmword_255E54820 + 8 * v34) = j;
                j = v27;
              }
              v34 = v28;
LABEL_64:
              v27 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_68;
        }
        v38 = (void *)xmmword_255E54820;
        *(_QWORD *)&xmmword_255E54820 = 0;
        if (v38)
          operator delete(v38);
        v6 = 0;
        *((_QWORD *)&xmmword_255E54820 + 1) = 0;
      }
    }
LABEL_68:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    goto LABEL_73;
  }
}

void sub_2300328C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::mtlx::UsdMtlxUsdTypeInfo>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::mtlx::UsdMtlxUsdTypeInfo>,0>(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 32);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__hash_table<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>>>::~__hash_table()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;

  v0 = (_QWORD *)qword_255E54830;
  if (qword_255E54830)
  {
    do
    {
      v1 = (_QWORD *)*v0;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::mtlx::UsdMtlxUsdTypeInfo>,0>((uint64_t)(v0 + 2));
      operator delete(v0);
      v0 = v1;
    }
    while (v1);
  }
  v2 = (void *)xmmword_255E54820;
  *(_QWORD *)&xmmword_255E54820 = 0;
  if (v2)
    operator delete(v2);
}

uint64_t realityio::PrimitiveDirtyPropertyDescriptor::PrimitiveDirtyPropertyDescriptor(uint64_t a1, _QWORD **a2)
{
  *(_QWORD *)a1 = off_24FDEEAB0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>((char *)(a1 + 8), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_BYTE *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  return a1;
}

void sub_230032A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::PrimitiveDirtyPropertyDescriptor::validate()
{
  return 0;
}

uint64_t realityio::PrimitiveDirtyPropertyDescriptor::_isEmpty(realityio::PrimitiveDirtyPropertyDescriptor *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  unint64_t v8;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  v2 = (uint64_t *)*((_QWORD *)this + 2);
  while (1)
  {
    if (v1 == v2)
      return 1;
    v3 = *v1;
    v4 = (std::__shared_weak_count *)v1[1];
    if (v4)
      break;
    if (!*(_BYTE *)(v3 + 8))
      return 0;
LABEL_13:
    v1 += 2;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = *(unsigned __int8 *)(v3 + 8);
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v7)
    goto LABEL_13;
  return 0;
}

const void **realityio::PrimitiveDirtyPropertyDescriptor::description@<X0>(realityio::PrimitiveDirtyPropertyDescriptor *this@<X0>, CFStringRef *a2@<X8>)
{
  const char *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  realityio::DirtyMetadataDescriptor *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  CFStringRef v14;
  CFTypeRef cf;
  void *value[3];

  cf = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *(realityio::DirtyMetadataDescriptor **)v6;
    v9 = *(std::__shared_weak_count **)(v6 + 8);
    value[1] = *(void **)v6;
    value[2] = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    realityio::DirtyMetadataDescriptor::description(v8, (CFStringRef *)value);
    CFArrayAppendValue(Mutable, value[0]);
    realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)value);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v6 += 16;
  }
  v14 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v4);
  CFRelease(Mutable);
  cf = v14;
  *a2 = 0;
  *a2 = CFStringCreateWithFormat(0, 0, CFSTR("<PrimitiveDirtyPropertyDescriptor: %p { dirtyPropertyMetadataContainAnyOf: (%lu) [ %@ ] } >"), this, (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4, v14);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_230032C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void **v5;
  va_list va;

  va_start(va, a5);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v5);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(uint64_t a1, uint64_t *a2, _QWORD **a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v5 = (_QWORD *)realityio::PrimitiveDirtyPropertyDescriptor::PrimitiveDirtyPropertyDescriptor(a1, a3);
  *v5 = &off_24FDEEAF0;
  v6 = *a2;
  v5[5] = *a2;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      *(_QWORD *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_BYTE *)(a1 + 48) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  return a1;
}

void sub_230032CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  v12 = *(_QWORD *)(v10 + 40);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  *(_QWORD *)v10 = off_24FDEEAB0;
  a10 = (void **)(v10 + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void realityio::AnyValueDirtyPropertyDescriptor::~AnyValueDirtyPropertyDescriptor(realityio::AnyValueDirtyPropertyDescriptor *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  *(_QWORD *)this = &off_24FDEEAF0;
  v1 = *((_QWORD *)this + 5);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  *(_QWORD *)this = off_24FDEEAB0;
  v4 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

{
  realityio::AnyValueDirtyPropertyDescriptor::~AnyValueDirtyPropertyDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

realityio::AnyValueDirtyPropertyDescriptor *realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(realityio::AnyValueDirtyPropertyDescriptor *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *v4[3];
  void **v5;

  memset(v4, 0, sizeof(v4));
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor((uint64_t)this, (uint64_t *)a2, v4);
  v5 = (void **)v4;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v5);
  *((_BYTE *)this + 48) = (*(uint64_t (**)(realityio::AnyValueDirtyPropertyDescriptor *))(*(_QWORD *)this
                                                                                                  + 40))(this);
  return this;
}

void sub_230032E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  realityio::AnyValueDirtyPropertyDescriptor *v12;

  realityio::AnyValueDirtyPropertyDescriptor::~AnyValueDirtyPropertyDescriptor(v12);
  _Unwind_Resume(a1);
}

uint64_t realityio::AnyValueDirtyPropertyDescriptor::validate(_QWORD *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3, pxrInternal__aapl__pxrReserved__::UsdStage *this, uint64_t a5, uint64_t a6)
{
  char IsValid;
  char v12;
  char v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t IsPseudoRoot;
  unint64_t v20;
  uint64_t EmptyString;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t *v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73[4];
  uint64_t v74;
  std::__shared_weak_count *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89[8];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2);
  if (!*(_QWORD *)(a5 + 24) || !*(_QWORD *)(a6 + 24))
    goto LABEL_76;
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v89);
  v12 = a3 ? IsValid : 1;
  if ((v12 & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a3, a2);
    v13 = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v74);
    if ((v78 & 7) != 0)
    {
      v14 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v76);
    if (v75)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v75);
    if ((v13 & 1) == 0)
      goto LABEL_76;
  }
  v16 = a1 + 5;
  if (a1[5])
  {
    v17 = *(_QWORD *)(a5 + 24);
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    v18 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, a2, a1 + 5);
  }
  else
  {
    v18 = 1;
  }
  IsPseudoRoot = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)v89);
  if ((IsPseudoRoot & 1) == 0 && *v16)
  {
    v20 = *v16 & 0xFFFFFFFFFFFFFFF8;
    if (v20)
      EmptyString = v20 + 16;
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)IsPseudoRoot);
    if (*(char *)(EmptyString + 23) < 0)
    {
      v23 = EmptyString;
      EmptyString = *(_QWORD *)EmptyString;
      v22 = *(_QWORD *)(v23 + 8);
    }
    else
    {
      v22 = *(unsigned __int8 *)(EmptyString + 23);
    }
    if (v22 >= 9)
      v22 = 9;
    if (v22)
    {
      v24 = (_BYTE *)(EmptyString + v22);
      v25 = (_BYTE *)EmptyString;
      v26 = v24;
      do
      {
        if (*v25 == 112)
        {
          v27 = 1u;
          while (v27 != 9)
          {
            if (&v25[v27] == v24)
              goto LABEL_38;
            v28 = v25[v27];
            v29 = aPrimvars[v27++];
            if (v28 != v29)
              goto LABEL_30;
          }
          v26 = v25;
        }
LABEL_30:
        ++v25;
      }
      while (v25 != v24);
LABEL_38:
      if (v26 != v24 && v26 == (_BYTE *)EmptyString)
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v88 = 0;
        v85 = MEMORY[0x24BEE9DB0] + 16;
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v85, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 5));
        LODWORD(v80) = v74;
        v81 = v75;
        if (v75)
        {
          v30 = (unint64_t *)&v75[2];
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v82, &v76);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v83, &v77);
        v84 = v78;
        if ((v78 & 7) != 0)
        {
          v32 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 2, v32));
          if ((v33 & 1) == 0)
            v84 &= 0xFFFFFFFFFFFFFFF8;
        }
        if ((v79 & 7) != 0)
        {
          v34 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
          do
            v35 = __ldxr(v34);
          while (__stlxr(v35 - 2, v34));
        }
        if ((v78 & 7) != 0)
        {
          v36 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
          do
            v37 = __ldxr(v36);
          while (__stlxr(v37 - 2, v36));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v76);
        if (v75)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v75);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v80))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v74, (uint64_t *)&v81, &v82);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v74, &v71);
          v38 = *(_QWORD *)(a5 + 24);
          if (!v38)
            std::__throw_bad_function_call[abi:ne180100]();
          v18 = (*(uint64_t (**)(uint64_t, int *, _QWORD *))(*(_QWORD *)v38 + 48))(v38, &v71, a1 + 5);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
          if ((v78 & 7) != 0)
          {
            v39 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
            do
              v40 = __ldxr(v39);
            while (__stlxr(v40 - 2, v39));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v76);
          if (v75)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v75);
        }
        if ((v84 & 7) != 0)
        {
          v41 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFF8);
          do
            v42 = __ldxr(v41);
          while (__stlxr(v42 - 2, v41));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v82);
        if (v81)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v81);
        MEMORY[0x2348B21DC](&v85);
      }
    }
  }
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a3, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v85))
    {
      v43 = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v85);
      if ((v43 & 1) == 0)
      {
        if (*v16)
        {
          v44 = *v16 & 0xFFFFFFFFFFFFFFF8;
          if (v44)
            v45 = v44 + 16;
          else
            v45 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v43);
          if (*(char *)(v45 + 23) < 0)
          {
            v51 = v45;
            v45 = *(_QWORD *)v45;
            v50 = *(_QWORD *)(v51 + 8);
          }
          else
          {
            v50 = *(unsigned __int8 *)(v45 + 23);
          }
          if (v50 >= 9)
            v50 = 9;
          if (v50)
          {
            v52 = (_BYTE *)(v45 + v50);
            v53 = (_BYTE *)v45;
            v54 = v52;
            do
            {
              if (*v53 == 112)
              {
                v55 = 1u;
                while (v55 != 9)
                {
                  if (&v53[v55] == v52)
                    goto LABEL_100;
                  v56 = v53[v55];
                  v57 = aPrimvars[v55++];
                  if (v56 != v57)
                    goto LABEL_92;
                }
                v54 = v53;
              }
LABEL_92:
              ++v53;
            }
            while (v53 != v52);
LABEL_100:
            if (v54 != v52 && v54 == (_BYTE *)v45)
            {
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              v84 = 0;
              v80 = MEMORY[0x24BEE9DB0] + 16;
              pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v80, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 5));
              pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy::_PtrProxy((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v71, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v74);
              pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v74);
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v71))
              {
                pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v74, &v72, v73);
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v74, &v70);
                v58 = *(_QWORD *)(a5 + 24);
                if (!v58)
                  std::__throw_bad_function_call[abi:ne180100]();
                LOBYTE(v18) = (*(uint64_t (**)(uint64_t, int *, _QWORD *))(*(_QWORD *)v58 + 48))(v58, &v70, a1 + 5);
                pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v70);
                pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v74);
              }
              pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v71);
              MEMORY[0x2348B21DC](&v80);
            }
          }
        }
      }
    }
    if ((v88 & 7) != 0)
    {
      v59 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
      do
        v60 = __ldxr(v59);
      while (__stlxr(v60 - 2, v59));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v87);
    if (v86)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v86);
    if ((v18 & 1) != 0)
      goto LABEL_112;
LABEL_76:
    v46 = 0;
    goto LABEL_77;
  }
  if (!v18)
    goto LABEL_76;
LABEL_112:
  v61 = (uint64_t *)a1[1];
  v62 = (uint64_t *)a1[2];
  if (v61 == v62)
  {
    v46 = 1;
  }
  else
  {
    do
    {
      v63 = (std::__shared_weak_count *)v61[1];
      v74 = *v61;
      v75 = v63;
      if (v63)
      {
        p_shared_owners = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldxr(p_shared_owners);
        while (__stxr(v65 + 1, p_shared_owners));
      }
      v66 = *(_QWORD *)(a6 + 24);
      if (!v66)
        std::__throw_bad_function_call[abi:ne180100]();
      v46 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, _QWORD *))(*(_QWORD *)v66 + 48))(v66, a2, v16);
      if (v63)
      {
        v67 = (unint64_t *)&v63->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v61 += 2;
      if (v61 == v62)
        v69 = 1;
      else
        v69 = v46;
    }
    while (v69 != 1);
  }
LABEL_77:
  if ((v92 & 7) != 0)
  {
    v47 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v91);
  if (v90)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v90);
  return v46;
}

void sub_230033514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a16);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a12);
  MEMORY[0x2348B21DC](&a22);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a26);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v26 - 120));
  _Unwind_Resume(a1);
}

BOOL realityio::AnyValueDirtyPropertyDescriptor::_isEmpty(realityio::AnyValueDirtyPropertyDescriptor *this)
{
  return !*((_QWORD *)this + 5) && *((_BYTE *)this + 32) != 0;
}

uint64_t realityio::PrimitiveDirtyPropertyDescriptor::isEmpty(realityio::PrimitiveDirtyPropertyDescriptor *this)
{
  return *((unsigned __int8 *)this + 32);
}

const void **realityio::AnyValueDirtyPropertyDescriptor::description@<X0>(realityio::AnyValueDirtyPropertyDescriptor *this@<X0>, CFStringRef *a2@<X8>)
{
  const char *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  realityio::DirtyMetadataDescriptor *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  CFStringRef v14;
  unint64_t v15;
  const char *v16;
  CFTypeRef cf;
  void *value[3];

  cf = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *(realityio::DirtyMetadataDescriptor **)v6;
    v9 = *(std::__shared_weak_count **)(v6 + 8);
    value[1] = *(void **)v6;
    value[2] = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    realityio::DirtyMetadataDescriptor::description(v8, (CFStringRef *)value);
    CFArrayAppendValue(Mutable, value[0]);
    realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)value);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v6 += 16;
  }
  v14 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v4);
  CFRelease(Mutable);
  cf = v14;
  *a2 = 0;
  v15 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  if (v15)
  {
    v16 = (const char *)(v15 + 16);
    if (*(char *)(v15 + 39) < 0)
      v16 = *(const char **)v16;
  }
  else
  {
    v16 = "";
  }
  *a2 = CFStringCreateWithFormat(0, 0, CFSTR("<AnyValueDirtyPropertyDescriptor: %p { propertyName: %s, dirtyPropertyMetadataContainAnyOf: (%lu) [ %@ ] } >"), this, v16, (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4, v14, cf);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_23003379C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void **v5;
  va_list va;

  va_start(va, a5);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v5);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::AnyValueNamedspacedDirtyPropertyDescriptor::AnyValueNamedspacedDirtyPropertyDescriptor(uint64_t a1, __int128 *a2, _QWORD **a3)
{
  uint64_t v5;
  __int128 v6;
  void (**v7)(realityio::AnyValueNamedspacedDirtyPropertyDescriptor *__hidden);

  v5 = realityio::PrimitiveDirtyPropertyDescriptor::PrimitiveDirtyPropertyDescriptor(a1, a3);
  *(_QWORD *)v5 = &off_24FDEEB30;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 40), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v7 = *(void (***)(realityio::AnyValueNamedspacedDirtyPropertyDescriptor *__hidden))a1;
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v5 + 56) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(v5 + 40) = v6;
    v7 = &off_24FDEEB30;
  }
  *(_BYTE *)(a1 + 64) = ((uint64_t (*)(uint64_t))v7[5])(a1);
  return a1;
}

void sub_230033870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  *(_QWORD *)v10 = off_24FDEEAB0;
  a10 = (void **)(v10 + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void realityio::AnyValueNamedspacedDirtyPropertyDescriptor::~AnyValueNamedspacedDirtyPropertyDescriptor(void **this)
{
  void **v2;

  *this = &off_24FDEEB30;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = off_24FDEEAB0;
  v2 = this + 1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  realityio::AnyValueNamedspacedDirtyPropertyDescriptor::~AnyValueNamedspacedDirtyPropertyDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

_BYTE *realityio::AnyValueNamedspacedDirtyPropertyDescriptor::AnyValueNamedspacedDirtyPropertyDescriptor(_BYTE *a1, __int128 *a2)
{
  _QWORD *v4[3];
  void **v5;

  memset(v4, 0, sizeof(v4));
  realityio::AnyValueNamedspacedDirtyPropertyDescriptor::AnyValueNamedspacedDirtyPropertyDescriptor((uint64_t)a1, a2, v4);
  v5 = (void **)v4;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v5);
  a1[64] = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  return a1;
}

void sub_230033968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void **v12;

  realityio::AnyValueNamedspacedDirtyPropertyDescriptor::~AnyValueNamedspacedDirtyPropertyDescriptor(v12);
  _Unwind_Resume(a1);
}

uint64_t realityio::AnyValueNamedspacedDirtyPropertyDescriptor::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3, pxrInternal__aapl__pxrReserved__::UsdStage *this, uint64_t a5, uint64_t a6)
{
  char IsValid;
  char v12;
  char v13;
  unsigned int *v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::UsdObject *i;
  uint64_t *Name;
  uint64_t v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::UsdObject *j;
  uint64_t *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  _QWORD v39[3];
  void **v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  __int128 v45;
  __int128 v46;
  int v47;
  _BYTE v48[8];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;

  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2);
  if (!*(_QWORD *)(a5 + 24) || !*(_QWORD *)(a6 + 24))
    goto LABEL_19;
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v48);
  v12 = a3 ? IsValid : 1;
  if ((v12 & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a3, a2);
    v13 = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v45);
    if ((BYTE8(v46) & 7) != 0)
    {
      v14 = (unsigned int *)(*((_QWORD *)&v46 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
    if (*((_QWORD *)&v45 + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v45 + 1));
    if ((v13 & 1) == 0)
    {
LABEL_19:
      v19 = 0;
      goto LABEL_54;
    }
  }
  v45 = 0u;
  v46 = 0u;
  v47 = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace();
  for (i = (pxrInternal__aapl__pxrReserved__::UsdObject *)v44[0];
        i != (pxrInternal__aapl__pxrReserved__::UsdObject *)v44[1];
        i = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)i + 32))
  {
    Name = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(i);
    v18 = *(_QWORD *)(a5 + 24);
    if (!v18)
      std::__throw_bad_function_call[abi:ne180100]();
    if ((*(unsigned int (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, a2, Name))
    {
      std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v45, Name, Name);
    }
  }
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a3, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v40))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace();
      for (j = (pxrInternal__aapl__pxrReserved__::UsdObject *)v39[0];
            j != (pxrInternal__aapl__pxrReserved__::UsdObject *)v39[1];
            j = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)j + 32))
      {
        v21 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(j);
        v22 = *(_QWORD *)(a5 + 24);
        if (!v22)
          std::__throw_bad_function_call[abi:ne180100]();
        if ((*(unsigned int (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, a2, v21))
        {
          std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v45, v21, v21);
        }
      }
      v52 = (void **)v39;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdProperty>::__destroy_vector::operator()[abi:ne180100](&v52);
    }
    if ((v43 & 7) != 0)
    {
      v23 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
    if (v41)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v41);
  }
  if (*((_QWORD *)&v46 + 1))
  {
    if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
    {
LABEL_52:
      v19 = 1;
      goto LABEL_53;
    }
    v25 = (_QWORD *)v46;
    if ((_QWORD)v46)
    {
      while (1)
      {
        v26 = *(_QWORD *)(a1 + 8);
        v27 = *(_QWORD *)(a1 + 16);
        if (v26 != v27)
          break;
LABEL_49:
        v19 = 0;
        v25 = (_QWORD *)*v25;
        if (!v25)
          goto LABEL_53;
      }
      while (1)
      {
        v28 = *(_QWORD *)(v26 + 8);
        v40 = *(void ***)v26;
        v41 = (std::__shared_weak_count *)v28;
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v31 = *(_QWORD *)(a6 + 24);
        if (!v31)
          std::__throw_bad_function_call[abi:ne180100]();
        v32 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, _QWORD *))(*(_QWORD *)v31 + 48))(v31, a2, v25 + 2);
        v33 = v41;
        if (v41)
        {
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        if ((v32 & 1) != 0)
          goto LABEL_52;
        v26 += 16;
        if (v26 == v27)
          goto LABEL_49;
      }
    }
  }
  v19 = 0;
LABEL_53:
  v40 = (void **)v44;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdProperty>::__destroy_vector::operator()[abi:ne180100](&v40);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&v45);
LABEL_54:
  if ((v51 & 7) != 0)
  {
    v36 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
  if (v49)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v49);
  return v19;
}

void sub_230033D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  *(_QWORD *)(v4 - 88) = va1;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdProperty>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 88));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)va2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va3);
  _Unwind_Resume(a1);
}

BOOL realityio::AnyValueNamedspacedDirtyPropertyDescriptor::_isEmpty(realityio::AnyValueNamedspacedDirtyPropertyDescriptor *this)
{
  if (*((char *)this + 63) < 0)
  {
    if (*((_QWORD *)this + 6))
      return 0;
  }
  else if (*((_BYTE *)this + 63))
  {
    return 0;
  }
  return *((_BYTE *)this + 32) != 0;
}

const void **realityio::AnyValueNamedspacedDirtyPropertyDescriptor::description@<X0>(realityio::AnyValueNamedspacedDirtyPropertyDescriptor *this@<X0>, CFStringRef *a2@<X8>)
{
  const char *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  realityio::DirtyMetadataDescriptor *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  CFStringRef v14;
  _QWORD *v15;
  CFTypeRef cf;
  void *value[3];

  cf = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *(realityio::DirtyMetadataDescriptor **)v6;
    v9 = *(std::__shared_weak_count **)(v6 + 8);
    value[1] = *(void **)v6;
    value[2] = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    realityio::DirtyMetadataDescriptor::description(v8, (CFStringRef *)value);
    CFArrayAppendValue(Mutable, value[0]);
    realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)value);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v6 += 16;
  }
  v14 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v4);
  CFRelease(Mutable);
  cf = v14;
  *a2 = 0;
  v15 = (_QWORD *)((char *)this + 40);
  if (*((char *)this + 63) < 0)
    v15 = (_QWORD *)*v15;
  *a2 = CFStringCreateWithFormat(0, 0, CFSTR("<AnyValueNamedspacedDirtyPropertyDescriptor: %p { namespacePrefix: %s, dirtyPropertyMetadataContainAnyOf: (%lu) [ %@ ] } >"), this, v15, (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4, v14, cf);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_230033F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void **v5;
  va_list va;

  va_start(va, a5);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v5);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

void realityio::PrimitiveDirtyPropertyDescriptor::~PrimitiveDirtyPropertyDescriptor(realityio::PrimitiveDirtyPropertyDescriptor *this)
{
  void **v1;

  *(_QWORD *)this = off_24FDEEAB0;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_24FDEEAB0;
  v2 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x2348B4E1C](this, 0x10A1C407F0BD61ELL);
}

uint64_t realityio::AnyValueDirtyPropertyDescriptor::isEmpty(realityio::AnyValueDirtyPropertyDescriptor *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t realityio::AnyValueNamedspacedDirtyPropertyDescriptor::isEmpty(realityio::AnyValueNamedspacedDirtyPropertyDescriptor *this)
{
  return *((unsigned __int8 *)this + 64);
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdProperty>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdProperty>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdProperty>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

uint64_t realityio::EntityAction::operator()@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtValue *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  pxrInternal__aapl__pxrReserved__::VtValue *v12;
  uint64_t v13;
  _QWORD *NameToken;
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  _QWORD *v16;
  realityio::tokens::EcsTokens_StaticTokenType *v17;
  const std::string *v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char **Object;
  const char *Text;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t ChildCount;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  pxrInternal__aapl__pxrReserved__::VtValue *v40;
  uint64_t v41;
  int v42;
  unsigned int *v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46;
  pxrInternal__aapl__pxrReserved__::VtValue *v47;
  pxrInternal__aapl__pxrReserved__::VtValue *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  uint64_t *v56;
  __int128 *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  void *v90;
  unint64_t v93;
  char *v95;
  uint64_t *v96;
  void *v97[2];
  uint64_t v98;
  void *__p[2];
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  std::string v107;
  _BYTE v108[4];
  int v109;
  _QWORD v110[3];
  _QWORD *v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  memset(&v107, 0, sizeof(v107));
  v96 = a4;
  if (a4[1] != *a4)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v112, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + v9));
      v13 = *v96;
      if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>(v12))
        goto LABEL_187;
      NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 + v10));
      Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 22) & 0xFFFFFFFFFFFFFFF8))
      {
        if ((BYTE8(v112) & 4) != 0)
          v19 = (__int128 *)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&v112 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v112);
        else
          v19 = &v112;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v108, v19);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v109, (_DWORD *)v19 + 1);
      }
      else
      {
LABEL_187:
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v112))
        {
          v16 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 + v10));
          v17 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
          if (!v17)
            v17 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
          if ((*v16 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 21) & 0xFFFFFFFFFFFFFFF8))
          {
            if ((BYTE8(v112) & 4) != 0)
              v18 = (const std::string *)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&v112 + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                               + 168))(&v112);
            else
              v18 = (const std::string *)v112;
            std::string::operator=(&v107, v18);
          }
        }
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v112);
      ++v11;
      v10 += 8;
      v9 += 16;
    }
    while (v11 < (v96[1] - *v96) >> 3);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a6, a3);
  v106 = 0;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>(a6))
  {
    v20 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REEntity *>>(a6);
    realityio::WrappedRERef<REAsset *>::operator=(&v106, v20);
    v21 = v106;
    goto LABEL_51;
  }
  v21 = REEntityCreate();
  RENetworkComponentGetComponentType();
  *(_QWORD *)&v112 = &off_24FDEEC60;
  *((_QWORD *)&v113 + 1) = &v112;
  v115 = REEntityGetOrAddComponentByClass();
  if (!*((_QWORD *)&v113 + 1))
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)&v113 + 1) + 48))(*((_QWORD *)&v113 + 1), &v115);
  RENetworkMarkComponentDirty();
  v22 = (__int128 *)*((_QWORD *)&v113 + 1);
  if (*((__int128 **)&v113 + 1) == &v112)
  {
    v23 = 4;
    v22 = &v112;
  }
  else
  {
    if (!*((_QWORD *)&v113 + 1))
      goto LABEL_29;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_29:
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  std::string::basic_string[abi:ne180100]<0>(&v112, "/__root");
  MEMORY[0x2348B26F8](v110, &v112);
  v24 = v115;
  v25 = v110[0];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v110);
  if (SBYTE7(v113) < 0)
    operator delete((void *)v112);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
  if (v24 == v25)
    goto LABEL_45;
  if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v107.__r_.__value_.__s + 23))
      goto LABEL_36;
LABEL_37:
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v112);
    REEntitySetName();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v112);
    goto LABEL_38;
  }
  if (!v107.__r_.__value_.__l.__size_)
    goto LABEL_37;
LABEL_36:
  REEntitySetName();
LABEL_38:
  if (REComponentClassFromName())
  {
    if (REEntityGetOrAddComponentByClass())
    {
      Object = (char **)RECustomComponentGetObject();
      if (Object)
      {
        if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) != 0)
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v108);
        else
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
        Text = (const char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v112);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v112);
      }
    }
  }
LABEL_45:
  *(_QWORD *)&v112 = v21;
  if (v21)
  {
    RERetain();
    v28 = v112;
  }
  else
  {
    v28 = 0;
  }
  v29 = v106;
  if (v106 != v28)
  {
    v106 = v28;
    *(_QWORD *)&v112 = v29;
  }
  v30 = realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v112);
  *((_QWORD *)&v112 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REEntity *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>::_PlaceCopy(v30, &v106);
  pxrInternal__aapl__pxrReserved__::VtValue::operator=(a6, &v112);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v112);
  RERelease();
LABEL_51:
  v112 = 0u;
  v113 = 0u;
  v114 = 1065353216;
  ChildCount = REEntityGetChildCount();
  if (ChildCount)
  {
    std::vector<REEntity *>::vector(&v115, ChildCount);
    REEntityGetChildren();
    v32 = (_QWORD *)v115;
    v33 = (_QWORD *)v116;
    if (v115 != v116)
    {
      do
      {
        std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::__emplace_unique_key_args<REEntity *,REEntity * const&>((uint64_t)&v112, v32, v32);
        ++v32;
      }
      while (v32 != v33);
      v32 = (_QWORD *)v115;
    }
    if (v32)
    {
      v116 = (unint64_t)v32;
      operator delete(v32);
    }
  }
  v90 = (void *)v21;
  if (v96[1] != *v96)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v93 = 0;
    while (1)
    {
      v40 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v115, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + 16 * v39));
      v95 = v34;
      if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v40))
      {
        if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v115))
          goto LABEL_132;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v96 + 8 * v39));
        MEMORY[0x2348B274C](v110, "__childEntities");
        v42 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
        if ((v110[0] & 7) != 0)
        {
          v43 = (unsigned int *)(v110[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v44 = __ldxr(v43);
          while (__stlxr(v44 - 2, v43));
        }
        if (!v42)
          goto LABEL_132;
        v45 = (_QWORD *)((v116 & 4) != 0
                       ? (*(uint64_t (**)(uint64_t *))((v116 & 0xFFFFFFFFFFFFFFF8) + 168))(&v115)
                       : v115);
        if (!*v45)
          goto LABEL_132;
        v46 = 0;
        v47 = (pxrInternal__aapl__pxrReserved__::VtValue *)v45[4];
        v48 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v47 + 16 * *v45);
        while (2)
        {
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>(v47))
          {
            v110[0] = 0;
            v49 = *((_QWORD *)v47 + 1);
            if ((v49 & 4) != 0)
              v50 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v49 & 0xFFFFFFFFFFFFFFF8) + 168))(v47);
            else
              v50 = *(_QWORD **)v47;
            v110[0] = *v50;
            v51 = std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::find<REEntity *>(&v112, v110);
            if (v51)
            {
              v52 = *((_QWORD *)&v112 + 1);
              v53 = v51[1];
              v54 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v112 + 8));
              v54.i16[0] = vaddlv_u8(v54);
              if (v54.u32[0] > 1uLL)
              {
                if (v53 >= *((_QWORD *)&v112 + 1))
                  v53 %= *((_QWORD *)&v112 + 1);
              }
              else
              {
                v53 &= *((_QWORD *)&v112 + 1) - 1;
              }
              v55 = *v51;
              v56 = *(uint64_t **)(v112 + 8 * v53);
              do
              {
                v57 = (__int128 *)v56;
                v56 = (uint64_t *)*v56;
              }
              while (v56 != v51);
              if (v57 == &v113)
                goto LABEL_92;
              v58 = *((_QWORD *)v57 + 1);
              if (v54.u32[0] > 1uLL)
              {
                if (v58 >= *((_QWORD *)&v112 + 1))
                  v58 %= *((_QWORD *)&v112 + 1);
              }
              else
              {
                v58 &= *((_QWORD *)&v112 + 1) - 1;
              }
              if (v58 == v53)
              {
LABEL_94:
                if (v55)
                {
                  v59 = *(_QWORD *)(v55 + 8);
                  goto LABEL_96;
                }
              }
              else
              {
LABEL_92:
                if (!v55)
                  goto LABEL_93;
                v59 = *(_QWORD *)(v55 + 8);
                if (v54.u32[0] > 1uLL)
                {
                  v60 = *(_QWORD *)(v55 + 8);
                  if (v59 >= *((_QWORD *)&v112 + 1))
                    v60 = v59 % *((_QWORD *)&v112 + 1);
                }
                else
                {
                  v60 = v59 & (*((_QWORD *)&v112 + 1) - 1);
                }
                if (v60 != v53)
                {
LABEL_93:
                  *(_QWORD *)(v112 + 8 * v53) = 0;
                  v55 = *v51;
                  goto LABEL_94;
                }
LABEL_96:
                if (v54.u32[0] > 1uLL)
                {
                  if (v59 >= v52)
                    v59 %= v52;
                }
                else
                {
                  v59 &= v52 - 1;
                }
                if (v59 != v53)
                {
                  *(_QWORD *)(v112 + 8 * v59) = v57;
                  v55 = *v51;
                }
              }
              *(_QWORD *)v57 = v55;
              *v51 = 0;
              --*((_QWORD *)&v113 + 1);
              operator delete(v51);
            }
            v61 = v110[0];
            if ((unint64_t)v37 >= v38)
            {
              v62 = (v37 - v36) >> 4;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 60)
                std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v38 - (_QWORD)v36) >> 3 > v63)
                v63 = (uint64_t)(v38 - (_QWORD)v36) >> 3;
              if (v38 - (unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
                v64 = 0xFFFFFFFFFFFFFFFLL;
              else
                v64 = v63;
              if (v64)
                v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v64);
              else
                v65 = 0;
              v66 = (_QWORD *)(v64 + 16 * v62);
              *v66 = v61;
              v66[1] = v46;
              if (v37 == v36)
              {
                v68 = (char *)(v64 + 16 * v62);
                v34 = v95;
              }
              else
              {
                v67 = v64 + 16 * v62;
                v34 = v95;
                do
                {
                  v68 = (char *)(v67 - 16);
                  *(_OWORD *)(v67 - 16) = *((_OWORD *)v37 - 1);
                  v37 -= 16;
                  v67 -= 16;
                }
                while (v37 != v36);
              }
              v38 = v64 + 16 * v65;
              v37 = (char *)(v66 + 2);
              if (v36)
                operator delete(v36);
              v36 = v68;
            }
            else
            {
              *(_QWORD *)v37 = v110[0];
              *((_QWORD *)v37 + 1) = v46;
              v37 += 16;
              v34 = v95;
            }
            ++v46;
          }
          v47 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v47 + 16);
          if (v47 == v48)
            goto LABEL_132;
          continue;
        }
      }
      v110[0] = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v115);
      if (v110[0])
      {
        RERetain();
        v41 = v110[0];
      }
      else
      {
        v41 = 0;
      }
      if (!REComponentGetEntity())
      {
        if ((unint64_t)v35 >= v93)
        {
          v70 = (v35 - v34) >> 3;
          v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 61)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v93 - (_QWORD)v34) >> 2 > v71)
            v71 = (uint64_t)(v93 - (_QWORD)v34) >> 2;
          if (v93 - (unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
            v72 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v72 = v71;
          if (v72)
            v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v72);
          else
            v73 = 0;
          v74 = (char *)(v72 + 8 * v70);
          *(_QWORD *)v74 = v41;
          v69 = v74 + 8;
          while (v35 != v34)
          {
            v75 = *((_QWORD *)v35 - 1);
            v35 -= 8;
            *((_QWORD *)v74 - 1) = v75;
            v74 -= 8;
          }
          v93 = v72 + 8 * v73;
          if (v34)
            operator delete(v34);
          v34 = v74;
          goto LABEL_131;
        }
        *(_QWORD *)v35 = v41;
        v35 += 8;
      }
      v69 = v35;
LABEL_131:
      realityio::WrappedRERef<REComponent *>::~WrappedRERef(v110);
      v35 = v69;
LABEL_132:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v115);
      if (++v39 >= (unint64_t)((v96[1] - *v96) >> 3))
        goto LABEL_151;
    }
  }
  v34 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
LABEL_151:
  v97[1] = 0;
  v98 = 0;
  v97[0] = 0;
  std::vector<REComponent *>::__init_with_size[abi:ne180100]<REComponent **,REComponent **>(v97, v34, (uint64_t)v35, (v35 - v34) >> 3);
  __p[0] = v90;
  __p[1] = 0;
  v100 = 0uLL;
  std::vector<std::pair<REEntity *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<REEntity *,unsigned long>*,std::pair<REEntity *,unsigned long>*>(&__p[1], (__int128 *)v36, (__int128 *)v37, (v37 - v36) >> 4);
  std::unordered_set<REEntity *>::unordered_set((uint64_t)&v101, (uint64_t)&v112);
  v111 = 0;
  v76 = (char *)operator new(0x68uLL);
  *(_QWORD *)v76 = &off_24FDEEDA8;
  *(_OWORD *)(v76 + 8) = *(_OWORD *)v97;
  *((_QWORD *)v76 + 3) = v98;
  v97[0] = 0;
  v97[1] = 0;
  v77 = v100;
  *((_OWORD *)v76 + 2) = *(_OWORD *)__p;
  *((_OWORD *)v76 + 3) = v77;
  v100 = 0uLL;
  __p[1] = 0;
  v78 = v101;
  v79 = v102;
  v98 = 0;
  v101 = 0;
  v102 = 0;
  *((_QWORD *)v76 + 8) = v78;
  *((_QWORD *)v76 + 9) = v79;
  v81 = v103;
  v80 = v104;
  *((_QWORD *)v76 + 10) = v103;
  *((_QWORD *)v76 + 11) = v80;
  *((_DWORD *)v76 + 24) = v105;
  if (v80)
  {
    v82 = *(_QWORD *)(v81 + 8);
    if ((v79 & (v79 - 1)) != 0)
    {
      if (v82 >= v79)
        v82 %= v79;
    }
    else
    {
      v82 &= v79 - 1;
    }
    *(_QWORD *)(v78 + 8 * v82) = v76 + 80;
    v103 = 0;
    v104 = 0;
  }
  v111 = v76;
  v83 = *(_QWORD *)(a1 + 16);
  if (v83)
  {
    v117 = std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::__clone((uint64_t)v76);
    v84 = *(_QWORD *)(v83 + 56);
    if (!v84)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v115);
    v85 = v117;
    if (v117 == &v115)
    {
      v86 = 4;
      v85 = &v115;
    }
    else
    {
      if (!v117)
        goto LABEL_165;
      v86 = 5;
    }
    (*(void (**)(void))(*v85 + 8 * v86))();
  }
  else
  {
    std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::operator()((uint64_t)v76);
  }
LABEL_165:
  v87 = v111;
  if (v111 == v110)
  {
    v88 = 4;
    v87 = v110;
  }
  else
  {
    if (!v111)
      goto LABEL_170;
    v88 = 5;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_170:
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&v101);
  if (__p[1])
  {
    *(void **)&v100 = __p[1];
    operator delete(__p[1]);
  }
  if (v97[0])
  {
    v97[1] = v97[0];
    operator delete(v97[0]);
  }
  if (v36)
    operator delete(v36);
  if (v34)
    operator delete(v34);
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&v112);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v106);
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v108);
}

void sub_230034CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::VtValue *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  void *v39;
  void *v40;
  uint64_t v41;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v41 - 128));
  if (v40)
    operator delete(v40);
  if (v39)
    operator delete(v39);
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table(v41 - 176);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a32);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(a12);
  if (a38 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a39);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio12WrappedRERefIP8REEntityEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REEntity *>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

char *`anonymous namespace'::RIOPrimPathComponent::setPath(char **this, const char *__s)
{
  char *result;
  char *v5;

  result = *this;
  if (result)
  {
    result = (char *)RECIntrospectionFree();
    *this = 0;
  }
  if (__s)
  {
    strlen(__s);
    v5 = (char *)RECIntrospectionAlloc();
    *this = v5;
    return strcpy(v5, __s);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7VtValueEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::$_0::~$_0(uint64_t a1)
{
  void *v2;
  void *v3;

  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table(a1 + 56);
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void realityio::EntitySyncAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9, a1);
  if (a2[1] == *a2)
  {
LABEL_5:
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, v9);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v7));
      if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>(a4) & 1) != 0)
        break;
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(a4);
      ++v8;
      v7 += 16;
      if (v8 >= (uint64_t)(a2[1] - *a2) >> 3)
        goto LABEL_5;
    }
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
}

void sub_2300351FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

_QWORD *realityio::RenderOptionsComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *NameToken;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  v26 = 0;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v7))
  {
    v8 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a4);
    realityio::WrappedRERef<REAsset *>::operator=(&v26, v8);
  }
  else
  {
    RERenderOptionsComponentGetComponentType();
    v27 = REComponentCreateByClass();
    if (v27)
    {
      RERetain();
      v9 = v27;
    }
    else
    {
      v9 = 0;
    }
    v10 = v26;
    if (v26 != v9)
    {
      v26 = v9;
      v27 = v10;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v27);
    v28 = (unint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy(&v27, &v26);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a4, &v27);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v27);
    RERelease();
  }
  v25 = 0;
  if (a2[1] != *a2)
  {
    v11 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v27, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + 16 * v11));
      NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(*a2 + 8 * v11));
      MEMORY[0x2348B274C](&v24, "visibility");
      v13 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (v24 & 0xFFFFFFFFFFFFFFF8))
      {
        v15 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)&v27);
        if ((v24 & 7) != 0)
        {
          v16 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stlxr(v17 - 2, v16));
        }
        if (v15)
        {
          if ((v28 & 4) != 0)
            v18 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(&v27);
          else
            v18 = &v27;
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v25, v18);
        }
      }
      else if ((v24 & 7) != 0)
      {
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v27);
      ++v11;
    }
    while (v11 < (uint64_t)(a2[1] - *a2) >> 3);
  }
  MEMORY[0x2348B274C](&v27, "invisible");
  v19 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
  if ((v27 & 7) != 0)
  {
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  RERenderOptionsComponentSetVisibilityMode();
  if ((v25 & 7) != 0)
  {
    v21 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v26);
}

void sub_2300354A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v3;
  va_list va;

  va_start(va, a3);
  realityio::WrappedRERef<REComponent *>::~WrappedRERef((uint64_t *)va);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v3);
  _Unwind_Resume(a1);
}

uint64_t realityio::EntityAction::supportsPartialInputs(realityio::EntityAction *this)
{
  return 1;
}

uint64_t realityio::RenderOptionsComponentAction::supportsPartialInputs(realityio::RenderOptionsComponentAction *this)
{
  return 1;
}

uint64_t realityio::EntitySyncAction::supportsPartialInputs(realityio::EntitySyncAction *this)
{
  return 1;
}

void _ZNSt3__110__function6__funcIZN9realityio12createEntityEvEUlT_E_NS_9allocatorIS4_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN9realityio12createEntityEvEUlT_E_NS_9allocatorIS4_EEFvP11REComponentEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEEC60;
  return result;
}

void _ZNKSt3__110__function6__funcIZN9realityio12createEntityEvEUlT_E_NS_9allocatorIS4_EEFvP11REComponentEE7__cloneEPNS0_6__baseIS9_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEEC60;
}

uint64_t _ZNKSt3__110__function6__funcIZN9realityio12createEntityEvEUlT_E_NS_9allocatorIS4_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN9realityio12createEntityEvEUlT_E_))
    return a1 + 8;
  else
    return 0;
}

void *_ZNKSt3__110__function6__funcIZN9realityio12createEntityEvEUlT_E_NS_9allocatorIS4_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZN9realityio12createEntityEvEUlT_E_;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<realityio::WrappedRERef<REEntity *>>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<realityio::WrappedRERef<REEntity *>>;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<realityio::WrappedRERef<REEntity *>>(_QWORD *result)
{
  if (result)
  {
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_Equal(_QWORD **a1, _QWORD **a2)
{
  return **a1 == **a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_EqualPtr(_QWORD **a1, _QWORD *a2)
{
  return **a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_StreamOut()
{
  return std::ostream::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio12WrappedRERefIP8REEntityEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetProxiedAsVtValue@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REEntity *>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;

  v2 = *a1;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 1);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v6 = realityio::WrappedRERef<REEntity *>::~WrappedRERef(v2);
      MEMORY[0x2348B4E1C](v6, 0x1020C403A5D3213);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v9;

  v2 = atomic_load((unsigned int *)(*a1 + 8));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_QWORD *)*a1;
    v5 = *(_QWORD *)*a1;
    *(_QWORD *)v3 = v5;
    if (v5)
    {
      RERetain();
      v4 = (_QWORD *)*a1;
    }
    v6 = (unsigned int *)(v3 + 8);
    atomic_store(0, (unsigned int *)(v3 + 8));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v9 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>::~intrusive_ptr(&v9);
  }
  return *a1;
}

void sub_2300358C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>::_PlaceCopy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = *a2;
  *(_QWORD *)v4 = *a2;
  if (result)
    result = RERetain();
  v6 = (unsigned int *)(v4 + 8);
  atomic_store(0, (unsigned int *)(v4 + 8));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23003595C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<REEntity *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2300359D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<REComponent *>::__init_with_size[abi:ne180100]<REComponent **,REComponent **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_230035A6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::pair<REEntity *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<REEntity *,unsigned long>*,std::pair<REEntity *,unsigned long>*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(a4);
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v7];
    if (a2 != a3)
    {
      v8 = result;
      do
      {
        v9 = *a2++;
        *v8++ = v9;
        result += 2;
      }
      while (a2 != a3);
    }
    v4[1] = result;
  }
  return result;
}

void sub_230035B00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<REEntity *>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::__emplace_unique_key_args<REEntity *,REEntity * const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_230035B78(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24FDEEDA8;
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)(a1 + 8));
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24FDEEDA8;
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)(a1 + 8));
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x68uLL);
  *v2 = &off_24FDEEDA8;
  std::__compressed_pair_elem<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_230035C80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEEDA8;
  return std::__compressed_pair_elem<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(result + 16);
  while (v2 != v3)
  {
    v2 += 8;
    result = REEntityAddExistingComponent();
  }
  v4 = v1[5];
  v5 = v1[6];
  while (v4 != v5)
  {
    v4 += 16;
    result = REEntityInsertChild();
  }
  for (i = (_QWORD *)v1[10]; i; i = (_QWORD *)*i)
    result = REEntitySetParent();
  return result;
}

uint64_t std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::target_type()
{
}

_QWORD *std::__compressed_pair_elem<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<REComponent *>::__init_with_size[abi:ne180100]<REComponent **,REComponent **>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v4 = *(_QWORD *)(a2 + 24);
  a1[4] = 0;
  a1[3] = v4;
  a1[5] = 0;
  a1[6] = 0;
  std::vector<std::pair<REEntity *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<REEntity *,unsigned long>*,std::pair<REEntity *,unsigned long>*>(a1 + 4, *(__int128 **)(a2 + 32), *(__int128 **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
  std::unordered_set<REEntity *>::unordered_set((uint64_t)(a1 + 7), a2 + 56);
  return a1;
}

void sub_230035E1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table(a1 + 56);
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

_QWORD *RIO_MTLX::DEFAULT_TYPE_STRING(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::DEFAULT_TYPE_STRING(void)::v, "color3");
  }
  return RIO_MTLX::DEFAULT_TYPE_STRING(void)::v;
}

void sub_230035F00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::FILENAME_TYPE_STRING(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::FILENAME_TYPE_STRING(void)::v, "filename");
  }
  return RIO_MTLX::FILENAME_TYPE_STRING(void)::v;
}

void sub_230035F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::GEOMNAME_TYPE_STRING(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::GEOMNAME_TYPE_STRING(void)::v, "geomname");
  }
  return RIO_MTLX::GEOMNAME_TYPE_STRING(void)::v;
}

void sub_230035FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::STRING_TYPE_STRING(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::STRING_TYPE_STRING(void)::v, "string");
  }
  return RIO_MTLX::STRING_TYPE_STRING(void)::v;
}

void sub_230036074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::SURFACE_SHADER_TYPE_STRING(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::SURFACE_SHADER_TYPE_STRING(void)::v, "surfaceshader");
  }
  return RIO_MTLX::SURFACE_SHADER_TYPE_STRING(void)::v;
}

void sub_2300360F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::DISPLACEMENT_SHADER_TYPE_STRING(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::DISPLACEMENT_SHADER_TYPE_STRING(void)::v, "displacementshader");
  }
  return RIO_MTLX::DISPLACEMENT_SHADER_TYPE_STRING(void)::v;
}

void sub_23003616C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::VOLUME_SHADER_TYPE_STRING(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::VOLUME_SHADER_TYPE_STRING(void)::v, "volumeshader");
  }
  return RIO_MTLX::VOLUME_SHADER_TYPE_STRING(void)::v;
}

void sub_2300361E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::LIGHT_SHADER_TYPE_STRING(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::LIGHT_SHADER_TYPE_STRING(void)::v, "lightshader");
  }
  return RIO_MTLX::LIGHT_SHADER_TYPE_STRING(void)::v;
}

void sub_230036264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::MATERIAL_TYPE_STRING(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::MATERIAL_TYPE_STRING(void)::v, "material");
  }
  return RIO_MTLX::MATERIAL_TYPE_STRING(void)::v;
}

void sub_2300362E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::SURFACE_MATERIAL_NODE_STRING(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::SURFACE_MATERIAL_NODE_STRING(void)::v, "surfacematerial");
  }
  return RIO_MTLX::SURFACE_MATERIAL_NODE_STRING(void)::v;
}

void sub_23003635C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::VOLUME_MATERIAL_NODE_STRING(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::VOLUME_MATERIAL_NODE_STRING(void)::v, "volumematerial");
  }
  return RIO_MTLX::VOLUME_MATERIAL_NODE_STRING(void)::v;
}

void sub_2300363D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::MULTI_OUTPUT_TYPE_STRING(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::MULTI_OUTPUT_TYPE_STRING(void)::v, "multioutput");
  }
  return RIO_MTLX::MULTI_OUTPUT_TYPE_STRING(void)::v;
}

void sub_230036454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::VALUE_STRING_TRUE(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::VALUE_STRING_TRUE(void)::v, "true");
  }
  return RIO_MTLX::VALUE_STRING_TRUE(void)::v;
}

void sub_2300364D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::VALUE_STRING_FALSE(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::VALUE_STRING_FALSE(void)::v, "false");
  }
  return RIO_MTLX::VALUE_STRING_FALSE(void)::v;
}

void sub_23003654C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::NAME_PREFIX_SEPARATOR(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::NAME_PREFIX_SEPARATOR(void)::v, ":");
  }
  return RIO_MTLX::NAME_PREFIX_SEPARATOR(void)::v;
}

void sub_2300365C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::NAME_PATH_SEPARATOR(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::NAME_PATH_SEPARATOR(void)::v, "/");
  }
  return RIO_MTLX::NAME_PATH_SEPARATOR(void)::v;
}

void sub_230036644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::ARRAY_VALID_SEPARATORS(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::ARRAY_VALID_SEPARATORS(void)::v, ", ");
  }
  return RIO_MTLX::ARRAY_VALID_SEPARATORS(void)::v;
}

void sub_2300366C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::ARRAY_PREFERRED_SEPARATOR(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::ARRAY_PREFERRED_SEPARATOR(void)::v, ", ");
  }
  return RIO_MTLX::ARRAY_PREFERRED_SEPARATOR(void)::v;
}

void sub_23003673C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderStageDeltaGetTypeID()
{
  if (RIOBuilderStageDeltaGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderStageDeltaGetTypeID::onceToken, &__block_literal_global_10);
  return RIOBuilderStageDeltaGetTypeID::typeID;
}

uint64_t *RIOBuilderStageDeltaCopyPrimDelta(uint64_t a1)
{
  uint64_t Instance;
  uint64_t *v3;

  if (RIOBuilderPrimDeltaGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderPrimDeltaGetTypeID::onceToken, &__block_literal_global);
  Instance = _CFRuntimeCreateInstance();
  v3 = (uint64_t *)Instance;
  if (Instance)
  {
    std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set(Instance + 16, a1 + 56);
    v3[7] = 0;
    v3[8] = 0;
    v3[9] = 0;
    std::vector<realityio::PropertyDelta>::__init_with_size[abi:ne180100]<realityio::PropertyDelta*,realityio::PropertyDelta*>(v3 + 7, *(uint64_t **)(a1 + 96), *(uint64_t **)(a1 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 4));
  }
  return v3;
}

void sub_23003687C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

__CFArray *RIOBuilderStageDeltaCopyDirtyMetadata(uint64_t a1)
{
  __CFArray *Mutable;
  _QWORD *i;
  const void *v4;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  for (i = *(_QWORD **)(a1 + 32); i; i = (_QWORD *)*i)
  {
    v4 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i + 2);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  return Mutable;
}

void _RIOBuilderStageDeltaCFFinalize(char *a1)
{
  realityio::StageDelta::~StageDelta((realityio::StageDelta *)(a1 + 16));
}

BOOL _RIOBuilderStageDeltaCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOBuilderStageDeltaCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOBuilderStageDeltaCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderStageDelta %p>"), a1);
}

CFStringRef _RIOBuilderStageDeltaCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderStageDelta %p>"), a1);
}

void realityio::StageDelta::~StageDelta(realityio::StageDelta *this)
{
  char *v2;
  void **v3;

  v2 = (char *)this + 40;
  v3 = (void **)((char *)this + 80);
  std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v2);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this);
}

uint64_t *std::vector<realityio::PropertyDelta>::__init_with_size[abi:ne180100]<realityio::PropertyDelta*,realityio::PropertyDelta*>(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::PropertyDelta>,realityio::PropertyDelta*,realityio::PropertyDelta*,realityio::PropertyDelta*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_230036A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::PropertyDelta>,realityio::PropertyDelta*,realityio::PropertyDelta*,realityio::PropertyDelta*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  _QWORD v9[3];
  char v10;
  uint64_t *v11;
  uint64_t *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<realityio::PropertyDelta>::construct[abi:ne180100]<realityio::PropertyDelta,realityio::PropertyDelta&>(a1, v4, v6);
      v6 += 6;
      v4 = v12 + 6;
      v12 += 6;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::PropertyDelta>,realityio::PropertyDelta*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_230036ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::PropertyDelta>,realityio::PropertyDelta*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<realityio::PropertyDelta>::construct[abi:ne180100]<realityio::PropertyDelta,realityio::PropertyDelta&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a3;
  *a2 = *a3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  return std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::PropertyDelta>,realityio::PropertyDelta*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<realityio::PropertyDelta>,realityio::PropertyDelta*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<realityio::PropertyDelta>,realityio::PropertyDelta*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v1 = **(_QWORD **)(result + 16);
  v2 = **(_QWORD **)(result + 8);
  while (v1 != v2)
  {
    result = std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v1 - 40);
    v4 = *(_QWORD *)(v1 - 48);
    v1 -= 48;
    v3 = v4;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
  }
  return result;
}

realityio::SceneAssetBuilder *realityio::SceneAssetBuilder::SceneAssetBuilder(realityio::SceneAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "SceneAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kSceneAssetBuilderIdentifier);
  realityio::generateSceneLibraryDirtyStageSubscription(&v12);
  v20[0] = &off_24FDEEF20;
  v21 = v20;
  v18[0] = &off_24FDEEFA0;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDEEEA8;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 850045863;
  *((_QWORD *)this + 45) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  return this;
}

void sub_230036DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = *(_QWORD **)(v28 - 48);
  if (v32 == (_QWORD *)(v28 - 72))
  {
    v33 = 4;
    v32 = (_QWORD *)(v28 - 72);
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t realityio::SceneAssetBuilder::run(realityio::SceneAssetBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v6;
  realityio *isSceneLibrary;
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  realityio *v11;
  uint64_t ServiceLocator;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint8_t *v22;
  uint64_t v23;
  NSObject *v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t result;
  std::__shared_weak_count *v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  realityio *v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  realityio *v67;
  uint8_t buf[8];
  realityio *v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  uint8_t *v77;
  _BYTE v78[24];
  _BYTE *v79;
  uint8_t v80[8];
  char v81;
  uint8_t *v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  isSceneLibrary = (realityio *)realityio::isSceneLibrary((realityio *)&v70, v6);
  if ((isSceneLibrary & 1) != 0)
  {
    v8 = *(NSObject **)(realityio::logObjects(isSceneLibrary) + 24);
    v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
    if (v9)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22FF26000, v8, OS_LOG_TYPE_INFO, "Scene Library builder", buf, 2u);
    }
    v10 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v9);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v10, (uint64_t)buf);
    if (buf[0])
    {
      v11 = v69;
      v67 = v69;
      if (v69)
      {
        RERetain();
        ServiceLocator = REEngineGetServiceLocator();
        v13 = MEMORY[0x2348B1264](ServiceLocator);
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v14 = *((_QWORD *)a2 + 6);
        *(_QWORD *)&v56 = this;
        *((_QWORD *)&v56 + 1) = a2;
        v57 = v67;
        RERetain();
        v58 = v70;
        v59 = v71;
        if (v71)
        {
          v15 = (unint64_t *)(v71 + 48);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v60, &v72);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v61, &v73);
        v62 = v74;
        if ((v74 & 7) != 0)
        {
          v17 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 2, v17));
          if ((v18 & 1) == 0)
            v62 &= 0xFFFFFFFFFFFFFFF8;
        }
        v63 = &v64;
        v82 = 0;
        v19 = (char *)operator new(0x48uLL);
        *(_QWORD *)v19 = &off_24FDEF020;
        *(_OWORD *)(v19 + 8) = v56;
        *((_QWORD *)v19 + 3) = v57;
        *((_DWORD *)v19 + 8) = v58;
        *((_QWORD *)v19 + 5) = v59;
        v57 = 0;
        v59 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v19 + 12, &v60);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v19 + 13, &v61);
        v20 = v62;
        v21 = v63;
        v62 = 0;
        *((_QWORD *)v19 + 7) = v20;
        *((_QWORD *)v19 + 8) = v21;
        v82 = (uint8_t *)v19;
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v14 + 16))(v14, v80);
        v22 = v82;
        if (v82 == v80)
        {
          v23 = 4;
          v22 = v80;
        }
        else
        {
          if (!v82)
            goto LABEL_22;
          v23 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_22:
        if ((v62 & 7) != 0)
        {
          v25 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stlxr(v26 - 2, v25));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
        if (v59)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v59);
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v57);
        if (v65 == v64)
          goto LABEL_36;
        v27 = *((_QWORD *)a2 + 5);
        std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::vector(&v52, &v64);
        *(_QWORD *)&v54 = this;
        *((_QWORD *)&v54 + 1) = v67;
        if (v67)
          RERetain();
        *(_QWORD *)&v55 = v27;
        *((_QWORD *)&v55 + 1) = v13;
        v79 = 0;
        v28 = (char *)operator new(0x40uLL);
        *(_QWORD *)v28 = &off_24FDEF0A0;
        *(_OWORD *)(v28 + 8) = v52;
        *((_QWORD *)v28 + 3) = v53;
        v52 = 0uLL;
        v29 = v54;
        v53 = 0;
        *((_QWORD *)&v54 + 1) = 0;
        v30 = v55;
        *((_OWORD *)v28 + 2) = v29;
        *((_OWORD *)v28 + 3) = v30;
        v79 = v28;
        realityio::ImportSession::performBlockPostAssetLoadOnEngineQueue(v27, (uint64_t)v78);
        v31 = v79;
        if (v79 == v78)
        {
          v32 = 4;
          v31 = v78;
        }
        else
        {
          if (!v79)
          {
LABEL_35:
            realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)&v54 + 1);
            *(_QWORD *)v80 = &v52;
            std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100]((void ***)v80);
LABEL_36:
            v51 = 1;
            v34 = *((_QWORD *)this + 2);
            v33 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
            v50 = v33;
            if (v33)
            {
              p_shared_owners = (unint64_t *)&v33->__shared_owners_;
              do
                v36 = __ldxr(p_shared_owners);
              while (__stxr(v36 + 1, p_shared_owners));
            }
            std::string::basic_string[abi:ne180100]<0>(v80, "scenes_assets");
            std::mutex::lock((std::mutex *)(v34 + 64));
            v37 = (std::__shared_weak_count *)operator new(0x28uLL);
            v37->__shared_owners_ = 0;
            v37->__shared_weak_owners_ = 0;
            v37->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEF120;
            v37[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEF170;
            v37[1].__shared_owners_ = (uint64_t)&v51;
            v75 = &v37[1].__vftable;
            v76 = v37;
            v77 = v80;
            v38 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v34 + 40), (const void **)v80, (uint64_t)&std::piecewise_construct, (__int128 **)&v77);
            v75 = 0;
            v76 = 0;
            v39 = (std::__shared_weak_count *)v38[8];
            v38[7] = (uint64_t)&v37[1];
            v38[8] = (uint64_t)v37;
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            v42 = v76;
            if (v76)
            {
              v43 = (unint64_t *)&v76->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v34, v80, (uint64_t)v80);
            std::mutex::unlock((std::mutex *)(v34 + 64));
            if (v81 < 0)
              operator delete(*(void **)v80);
            if (v50)
            {
              v45 = (unint64_t *)&v50->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            *(_QWORD *)v80 = &v64;
            std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100]((void ***)v80);
LABEL_57:
            realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v67);
            realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)buf);
            goto LABEL_58;
          }
          v32 = 5;
        }
        (*(void (**)(void))(*v31 + 8 * v32))();
        goto LABEL_35;
      }
    }
    else
    {
      v67 = 0;
    }
    v24 = *(NSObject **)(realityio::logObjects(v11) + 24);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v80 = 0;
      _os_log_impl(&dword_22FF26000, v24, OS_LOG_TYPE_DEFAULT, "Stopping operation to create the scene because entity no longer exists", v80, 2u);
    }
    goto LABEL_57;
  }
LABEL_58:
  if ((v74 & 7) != 0)
  {
    v47 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
  result = v71;
  if (v71)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v71);
  return result;
}

void sub_230037418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  *(_QWORD *)(v33 - 112) = &a13;
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 112));
  *(_QWORD *)(v33 - 112) = &a29;
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 112));
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a32);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a33);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v33 - 208));
  _Unwind_Resume(a1);
}

void sub_230037578()
{
  JUMPOUT(0x230037570);
}

_QWORD *realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0::~$_0(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = a1[6];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  v5 = a1[4];
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(a1 + 2);
  return a1;
}

_QWORD *std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v3) >> 4);
    if (v5 >= 0x333333333333334)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>(v5);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[80 * v8];
    do
    {
      realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData::DeferredChildData((uint64_t)&v6[v7], v3 + v7);
      v7 += 80;
    }
    while (v3 + v7 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_2300376A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1::~$_1(uint64_t a1)
{
  void **v3;

  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(a1 + 32));
  v3 = (void **)a1;
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void realityio::SceneAssetBuilder::clear(realityio::SceneAssetBuilder *this, realityio::Inputs *a2)
{
  std::mutex *v3;
  uint64_t i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = (std::mutex *)((char *)this + 304);
  std::mutex::lock((std::mutex *)((char *)this + 304));
  v5 = *((_QWORD *)this + 35);
  for (i = *((_QWORD *)this + 36);
        i != v5;
        std::allocator<realityio::ImportedScene>::destroy[abi:ne180100]((uint64_t)this + 296, i))
  {
    i -= 80;
  }
  *((_QWORD *)this + 36) = v5;
  v7 = *((_QWORD *)this + 2);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v14 = v7;
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "scenes_assets");
  std::mutex::lock((std::mutex *)(v7 + 64));
  if (v7 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v7 + 40, (const void **)__p))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v7 + 40), (const void **)__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v7, (unsigned __int8 *)__p);
  std::mutex::unlock((std::mutex *)(v7 + 64));
  if (v13 < 0)
    operator delete(__p[0]);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::mutex::unlock(v3);
}

void sub_23003784C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::mutex *v16;
  std::mutex *v17;

  std::mutex::unlock(v17);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::mutex::unlock(v16);
  _Unwind_Resume(a1);
}

void realityio::SceneAssetBuilder::~SceneAssetBuilder(realityio::SceneAssetBuilder *this)
{
  realityio::SceneAssetBuilder::~SceneAssetBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::SceneAssetBuilder *v2;
  uint64_t v3;
  realityio::SceneAssetBuilder *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void **v12;

  *(_QWORD *)this = &off_24FDEEEA8;
  std::mutex::~mutex((std::mutex *)((char *)this + 304));
  v12 = (void **)((char *)this + 280);
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100](&v12);
  *(_QWORD *)this = off_24FDE1CA0;
  v2 = (realityio::SceneAssetBuilder *)*((_QWORD *)this + 34);
  if (v2 == (realityio::SceneAssetBuilder *)((char *)this + 248))
  {
    v3 = 4;
    v2 = (realityio::SceneAssetBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (realityio::SceneAssetBuilder *)*((_QWORD *)this + 30);
  if (v4 == (realityio::SceneAssetBuilder *)((char *)this + 216))
  {
    v5 = 4;
    v4 = (realityio::SceneAssetBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v6 = *((_QWORD *)this + 24);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = *((_QWORD *)this + 23);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder(this);
}

void std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEEF20;
  return result;
}

void std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEEF20;
}

void std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  unint64_t v13;
  _DWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  void *v25[2];
  uint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  int v29;
  int v30;
  void *__p[2];
  uint64_t v32;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v25[0]) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)v25, __p);
  v6 = (std::__shared_weak_count *)__p[1];
  v27 = __p[0];
  v28 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v7 = (unint64_t *)((char *)__p[1] + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v27);
  v9 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v24 = a1;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)std::string::basic_string[abi:ne180100]<0>(v25, "end_of_update");
  v13 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v13)
  {
    v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
    v13 = (unint64_t)v12;
  }
  v14 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
  v15 = (std::__shared_weak_count *)operator new(0x50uLL);
  v15->__shared_owners_ = 0;
  v16 = (unint64_t *)&v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4FB8;
  *(_OWORD *)__p = *(_OWORD *)v25;
  v32 = v26;
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v29, v14);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v30, v14 + 1);
  realityio::StaticPrimInputDescriptor::StaticPrimInputDescriptor((uint64_t)&v15[1], (uint64_t)__p, (uint64_t *)(v13 + 56), &v29, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
  __p[0] = &v15[1];
  __p[1] = v15;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  realityio::InputsDescriptor::addInputDescriptor(v3, __p);
  v18 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v19 = (unint64_t *)((char *)__p[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *v24 = v3;
  v24[1] = (uint64_t)v2;
  do
    v21 = __ldaxr(v16);
  while (__stlxr(v21 - 1, v16));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v6)
  {
    v22 = (unint64_t *)&v6->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_230037CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, void *a20,std::__shared_weak_count *a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;

  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  do
    v33 = __ldaxr(v28);
  while (__stlxr(v33 - 1, v28));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  if (v26)
  {
    v34 = (unint64_t *)&v26->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  do
    v36 = __ldaxr(v29);
  while (__stlxr(v36 - 1, v29));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEEFA0;
  return result;
}

void std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEEFA0;
}

void std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v5;
  void *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  void *__p;
  std::__shared_weak_count *v16;
  char v17;
  void *v18;
  std::__shared_weak_count *v19;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "scenes_assets");
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>((uint64_t)&__p, (std::string::size_type *)Data + 21, &v14, &v18);
  v6 = v18;
  v5 = v19;
  v18 = 0;
  v19 = 0;
  if (v17 < 0)
    operator delete(__p);
  __p = v6;
  v16 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, (std::string::size_type *)&__p);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_230038064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v19;

  if (a16 < 0)
    operator delete(__p);
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

std::string *std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, std::string::size_type *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0x40uLL);
  result = std::__shared_ptr_emplace<realityio::OutputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,std::allocator<realityio::OutputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_2300381D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<realityio::OutputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,std::allocator<realityio::OutputDescriptor>,0>(std::string *a1, uint64_t a2, std::string::size_type *a3, int *a4)
{
  char v6;

  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDE1F60;
  std::allocator<realityio::OutputDescriptor>::construct[abi:ne180100]<realityio::OutputDescriptor,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality>((int)&v6, a1 + 1, a2, a3, a4);
  return a1;
}

void sub_230038234(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<realityio::OutputDescriptor>::construct[abi:ne180100]<realityio::OutputDescriptor,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality>(int a1, std::string *this, uint64_t a3, std::string::size_type *a4, int *a5)
{
  void *__p[2];
  uint64_t v6;

  *(_OWORD *)__p = *(_OWORD *)a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  realityio::OutputDescriptor::OutputDescriptor(this, (__int128 *)__p, a4, *a5);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2300382A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::deque<REEntity *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<REEntity *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<REEntity *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_230038610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator_traits<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::destroy[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,void>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator_traits<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::destroy[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,void>(uint64_t a1)
{
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(a1 + 72));
  realityio::WrappedRERef<REScene *>::~WrappedRERef((_QWORD *)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

_QWORD *realityio::WrappedRERef<REScene *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

_QWORD *std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  *a1 = &off_24FDEF020;
  v2 = a1[7];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 6));
  v5 = a1[5];
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(a1 + 3);
  return a1;
}

void std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  *a1 = &off_24FDEF020;
  v2 = a1[7];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 6));
  v5 = a1[5];
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(a1 + 3);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x48uLL);
  *v2 = &off_24FDEF020;
  std::__compressed_pair_elem<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2300388A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEF020;
  return std::__compressed_pair_elem<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy[abi:ne180100]((_QWORD *)(a1 + 8));
}

void std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *a1)
{
  std::__function::__alloc_func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v2;
  unint64_t ChildCount;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::UsdPrim *v9;
  void *v10;
  uint64_t Name;
  unsigned int *v12;
  unsigned int v13;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v14;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  std::string::size_type size;
  uint64_t v17;
  _QWORD *v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  const void **EmptyString;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  void *Text;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t j;
  uint64_t v49;
  std::string::size_type v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  int v58;
  int v59;
  std::string v60;
  uint64_t v61;
  void *v62[3];
  std::string v63;
  _BYTE v64[48];
  uint64_t v65;
  std::string v66;
  void *v67[2];
  unsigned __int8 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[15];
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if (REEntityGetChildCount())
  {
    ChildCount = REEntityGetChildCount();
    std::vector<REEntity *>::vector(v62, ChildCount);
    v4 = (uint64_t *)a1[8];
    v5 = *v4;
    if (0xCCCCCCCCCCCCCCCDLL * ((v4[2] - *v4) >> 4) < ChildCount)
    {
      if (ChildCount > 0x333333333333333)
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      v6 = v4[1];
      *(_QWORD *)&v64[8] = v4 + 2;
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>(ChildCount);
      v63.__r_.__value_.__l.__size_ = v63.__r_.__value_.__r.__words[0] + v6 - v5;
      v63.__r_.__value_.__r.__words[2] = v63.__r_.__value_.__l.__size_;
      *(_QWORD *)v64 = v63.__r_.__value_.__r.__words[0] + 80 * v7;
      std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__swap_out_circular_buffer(v4, &v63);
      std::__split_buffer<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData> &>::~__split_buffer((uint64_t)&v63);
    }
    REEntityGetChildren();
    v57 = a1;
    if (ChildCount)
    {
      v8 = 0;
      v9 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 4);
      do
      {
        v10 = (void *)*((_QWORD *)v62[0] + v8);
        Name = REEntityGetName();
        MEMORY[0x2348B274C](&v63, Name);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild(v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v63);
        if ((v63.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v12 = (unsigned int *)(v63.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v13 = __ldxr(v12);
          while (__stlxr(v13 - 2, v12));
        }
        if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v60)
          || !realityio::isScene((realityio *)&v60, v14))
        {
          goto LABEL_75;
        }
        LOWORD(v63.__r_.__value_.__l.__data_) = 0;
        *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = 0u;
        memset(v64, 0, 32);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *(_QWORD *)&v64[40] = 0;
        v65 = 0;
        v63.__r_.__value_.__s.__data_[0] = 1;
        realityio::getSceneName((realityio *)&v60, (std::string *)&v69);
        if ((v64[7] & 0x80000000) != 0)
          operator delete((void *)v63.__r_.__value_.__l.__size_);
        *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = v69;
        *(_QWORD *)v64 = v70;
        size = v60.__r_.__value_.__l.__size_;
        if (!v60.__r_.__value_.__l.__size_
          || (v17 = *(_QWORD *)(v60.__r_.__value_.__l.__size_ + 56), (v17 & 0x800) != 0))
        {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v60.__r_.__value_.__l.__size_, v15);
          v17 = *(_QWORD *)(size + 56);
        }
        v63.__r_.__value_.__s.__data_[1] = (v17 & 0x40) != 0;
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v60, &v69);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v64[32], (int *)&v69);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v64[36]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v18 = (_QWORD *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
        std::string::basic_string[abi:ne180100]<0>(v18, "memory:");
        std::string::basic_string[abi:ne180100]<0>(v67, ".rescene");
        v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v60);
        if ((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (const void **)((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v69, EmptyString, (uint64_t)&v66);
        if ((v68 & 0x80u) == 0)
          v21 = (const std::string::value_type *)v67;
        else
          v21 = (const std::string::value_type *)v67[0];
        if ((v68 & 0x80u) == 0)
          v22 = v68;
        else
          v22 = (std::string::size_type)v67[1];
        v23 = std::string::append(&v66, v21, v22);
        v24 = v23->__r_.__value_.__r.__words[0];
        *(_QWORD *)v72 = v23->__r_.__value_.__l.__size_;
        *(_QWORD *)&v72[7] = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
        v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
        if ((char)v68 < 0)
          operator delete(v67[0]);
        if (SBYTE7(v70) < 0)
          operator delete((void *)v69);
        if ((v64[31] & 0x80000000) != 0)
          operator delete(*(void **)&v64[8]);
        *(_QWORD *)&v64[8] = v24;
        *(_QWORD *)&v64[16] = *(_QWORD *)v72;
        *(_QWORD *)&v64[23] = *(_QWORD *)&v72[7];
        v64[31] = v25;
        *(_QWORD *)&v69 = v10;
        if (v10)
        {
          RERetain();
          v26 = v69;
        }
        else
        {
          v26 = 0;
        }
        v27 = v65;
        if (v65 != v26)
        {
          v65 = v26;
          *(_QWORD *)&v69 = v27;
        }
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v69);
        if ((v64[7] & 0x80000000) != 0)
        {
          if (v63.__r_.__value_.__r.__words[2])
          {
LABEL_43:
            v28 = RESceneCreate();
            if (*(_QWORD *)&v64[40])
              RERelease();
            *(_QWORD *)&v64[40] = v28;
            if (v28)
            {
              v67[0] = v10;
              v70 = 0u;
              v71 = 0u;
              v69 = 0u;
              std::deque<REEntity *>::push_back(&v69, v67);
              while (*((_QWORD *)&v71 + 1))
              {
                v29 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v69 + 1)
                                            + (((unint64_t)v71 >> 6) & 0x3FFFFFFFFFFFFF8))
                                + 8 * (v71 & 0x1FF));
                *(_QWORD *)&v71 = v71 + 1;
                --*((_QWORD *)&v71 + 1);
                if ((unint64_t)v71 >= 0x400)
                {
                  operator delete(**((void ***)&v69 + 1));
                  *((_QWORD *)&v69 + 1) += 8;
                  *(_QWORD *)&v71 = v71 - 512;
                }
                MEMORY[0x2348B0A30](v29, 1);
                v30 = REEntityGetChildCount();
                if (v30)
                {
                  for (i = 0; i != v30; ++i)
                  {
                    v66.__r_.__value_.__r.__words[0] = REEntityGetChild();
                    std::deque<REEntity *>::push_back(&v69, &v66);
                  }
                }
              }
              std::deque<unsigned long>::~deque[abi:ne180100](&v69);
              RESceneAddEntity();
              v28 = *(_QWORD *)&v64[40];
            }
            v32 = *(_QWORD *)(v57[2] + 40);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v58, &v64[32]);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v59, &v64[36]);
            v33 = *(_QWORD *)(v32 + 16);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v72, &v58);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v72[4], &v59);
            if (*(_QWORD *)(v33 + 96))
            {
              Text = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v72);
              v35 = *(_QWORD *)(v33 + 96);
              *(_QWORD *)&v69 = v28;
              v67[0] = Text;
              v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
              if (!v35)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(uint64_t, __int128 *, void **, std::string *))(*(_QWORD *)v35 + 48))(v35, &v69, v67, &v66);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v72);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
          }
        }
        else if (v64[7])
        {
          goto LABEL_43;
        }
        v36 = (uint64_t *)v57[8];
        v37 = v36[1];
        v38 = v36[2];
        if (v37 >= v38)
        {
          v40 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v37 - *v36) >> 4);
          v41 = v40 + 1;
          if (v40 + 1 > 0x333333333333333)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v42 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - *v36) >> 4);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 >= 0x199999999999999)
            v43 = 0x333333333333333;
          else
            v43 = v41;
          *(_QWORD *)&v71 = v36 + 2;
          if (v43)
            v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>(v43);
          else
            v44 = 0;
          v45 = v43 + 80 * v40;
          *(_QWORD *)&v69 = v43;
          *((_QWORD *)&v69 + 1) = v45;
          *((_QWORD *)&v70 + 1) = v43 + 80 * v44;
          std::allocator_traits<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::construct[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,void>(v45, (uint64_t)&v63);
          *(_QWORD *)&v70 = v45 + 80;
          std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__swap_out_circular_buffer(v36, &v69);
          v39 = v36[1];
          std::__split_buffer<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData> &>::~__split_buffer((uint64_t)&v69);
        }
        else
        {
          std::allocator_traits<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::construct[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,void>(v36[1], (uint64_t)&v63);
          v39 = v37 + 80;
          v36[1] = v39;
        }
        v36[1] = v39;
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v65);
        realityio::WrappedRERef<REScene *>::~WrappedRERef(&v64[40]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v64[32]);
        if ((v64[31] & 0x80000000) != 0)
          operator delete(*(void **)&v64[8]);
        if ((v64[7] & 0x80000000) != 0)
          operator delete((void *)v63.__r_.__value_.__l.__size_);
LABEL_75:
        if ((v61 & 7) != 0)
        {
          v46 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
          do
            v47 = __ldxr(v46);
          while (__stlxr(v47 - 2, v46));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60.__r_.__value_.__r.__words[2]);
        if (v60.__r_.__value_.__l.__size_)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v60.__r_.__value_.__l.__size_);
        ++v8;
      }
      while (v8 != ChildCount);
    }
    if (v62[0])
    {
      v62[1] = v62[0];
      operator delete(v62[0]);
    }
  }
  else
  {
    std::mutex::lock((std::mutex *)(v2 + 304));
    v49 = *(_QWORD *)(v2 + 280);
    for (j = *(_QWORD *)(v2 + 288); j != v49; std::allocator<realityio::ImportedScene>::destroy[abi:ne180100](v2 + 296, j))j -= 80;
    *(_QWORD *)(v2 + 288) = v49;
    v50 = a1[3];
    v51 = (char *)REEntityGetName();
    std::string::basic_string[abi:ne180100]<0>(&v69, v51);
    realityio::getSceneName((realityio *)(a1 + 4), &v60);
    realityio::ImportedScene::ImportedScene(&v63, 0, v50, 0, &v69, (__int128 *)&v60, 1);
    v52 = *(_QWORD *)(v2 + 288);
    if (v52 >= *(_QWORD *)(v2 + 296))
    {
      v55 = std::vector<realityio::ImportedScene>::__push_back_slow_path<realityio::ImportedScene>((uint64_t *)(v2 + 280), (uint64_t)&v63);
      v56 = v64[47];
      *(_QWORD *)(v2 + 288) = v55;
      if (v56 < 0)
        operator delete(*(void **)&v64[24]);
    }
    else
    {
      *(_BYTE *)v52 = v63.__r_.__value_.__s.__data_[0];
      *(_OWORD *)(v52 + 8) = *(_OWORD *)&v63.__r_.__value_.__r.__words[1];
      *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = 0u;
      v53 = *(_QWORD *)&v64[16];
      *(_OWORD *)(v52 + 24) = *(_OWORD *)v64;
      *(_QWORD *)(v52 + 40) = v53;
      memset(v64, 0, 24);
      v54 = *(_QWORD *)&v64[40];
      *(_OWORD *)(v52 + 48) = *(_OWORD *)&v64[24];
      *(_QWORD *)(v52 + 64) = v54;
      memset(&v64[24], 0, 24);
      *(_BYTE *)(v52 + 72) = v65;
      *(_QWORD *)(v2 + 288) = v52 + 80;
    }
    if ((v64[23] & 0x80000000) != 0)
      operator delete(*(void **)v64);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v63.__r_.__value_.__r.__words[2]);
    realityio::WrappedRERef<void *>::~WrappedRERef(&v63.__r_.__value_.__l.__size_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SBYTE7(v70) < 0)
      operator delete((void *)v69);
    std::mutex::unlock((std::mutex *)(v2 + 304));
  }
}

void sub_230039170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,void *a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  std::mutex *v51;
  uint64_t v52;

  if (a44 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a32);
  realityio::WrappedRERef<void *>::~WrappedRERef(&a31);
  if (a25 < 0)
    operator delete(a20);
  if (*(char *)(v52 - 153) < 0)
    operator delete(*(void **)(v52 - 176));
  std::mutex::unlock(v51);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
    RERetain();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 40), (_DWORD *)(a2 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 44), (_DWORD *)(a2 + 44));
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *(_QWORD *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

_QWORD *std::__function::__alloc_func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy[abi:ne180100](_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = a1[6];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  v5 = a1[4];
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef(a1 + 2);
}

void realityio::getSceneName(realityio *this@<X0>, std::string *a2@<X8>)
{
  unint64_t *v5;
  unint64_t Data;
  unint64_t v7;
  void *__p[2];
  char v9;
  uint64_t v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v10[1] = 0;
  v5 = (unint64_t *)MEMORY[0x24BEE7E98];
  Data = atomic_load(MEMORY[0x24BEE7E98]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 352), (pxrInternal__aapl__pxrReserved__::VtValue *)v10) & 1) == 0)
  {
    v7 = atomic_load(v5);
    if (!v7)
      v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomDataByKey(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 352));
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(v10, __p);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pxrInternal__aapl__pxrReserved__::VtValue::GetWithDefault<std::string>(v10, (uint64_t)__p, a2);
  if (v9 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
}

void sub_230039624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a15);
  _Unwind_Resume(a1);
}

uint64_t realityio::isScene(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable *IsValid;
  std::string::size_type size;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v5;
  uint64_t isSceneLibrary;
  unsigned int *v7;
  unsigned int v8;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string __p;

  IsValid = (pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
  if (!(_DWORD)IsValid)
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType(IsValid);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
    return 0;
  realityio::getSceneName(this, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent(this, (uint64_t)v10);
    isSceneLibrary = realityio::isSceneLibrary((realityio *)v10, v5);
    if ((v13 & 7) != 0)
    {
      v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
    if (v11)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_16;
  }
  else
  {
    isSceneLibrary = 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_16:
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return isSceneLibrary;
}

void sub_230039744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a10);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *realityio::ImportedScene::ImportedScene(std::string *a1, uint64_t a2, std::string::size_type a3, std::string::size_type a4, __int128 *a5, __int128 *a6, std::string::value_type a7)
{
  __int128 v12;
  std::string *v13;
  __int128 v14;

  a1->__r_.__value_.__s.__data_[0] = 0;
  a1->__r_.__value_.__l.__size_ = a3;
  if (a3)
    RERetain();
  a1->__r_.__value_.__r.__words[2] = a4;
  if (a4)
    RERetain();
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 1, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v12 = *a5;
    a1[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)&a1[1].__r_.__value_.__l.__data_ = v12;
  }
  v13 = a1 + 2;
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v14 = *a6;
    a1[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a6 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  a1[3].__r_.__value_.__s.__data_[0] = a7;
  return a1;
}

void sub_23003983C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void **v4;

  if (*(char *)(v2 + 47) < 0)
    operator delete(*v4);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v3);
  realityio::WrappedRERef<void *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::GetWithDefault<std::string>(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  __int128 v7;

  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)a1))
  {
    v6 = a1[1];
    if ((v6 & 4) != 0)
      a2 = (*(uint64_t (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
    else
      a2 = *a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v7 = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  }
}

uint64_t *std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      result = (uint64_t *)realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData::DeferredChildData(v6 + v7 - 80, v4 + v7 - 80);
      v7 -= 80;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void sub_2300399A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 80)
    std::allocator_traits<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::destroy[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,void>(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    std::allocator_traits<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::destroy[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,void>(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a1);
}

uint64_t realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData::DeferredChildData(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 56), (_DWORD *)(a2 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 60), (_DWORD *)(a2 + 60));
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
    RERetain();
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  if (v7)
    RERetain();
  return a1;
}

void sub_230039B3C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

__n128 std::allocator_traits<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::construct[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 56), (_DWORD *)(a2 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 60), (_DWORD *)(a2 + 60));
  result = *(__n128 *)(a2 + 64);
  *(__n128 *)(a1 + 64) = result;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  return result;
}

uint64_t std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_24FDEF0A0;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(a1 + 40));
  v3 = (void **)(a1 + 8);
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &off_24FDEF0A0;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(a1 + 40));
  v2 = (void **)(a1 + 8);
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &off_24FDEF0A0;
  std::__compressed_pair_elem<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_230039CF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEF0A0;
  return std::__compressed_pair_elem<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = (void **)(a1 + 8);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(a1 + 40));
  v2 = v1;
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::destroy_deallocate(void **a1)
{
  void **v2;
  void **v3;

  v2 = a1 + 1;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(a1 + 5);
  v3 = v2;
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100](&v3);
  operator delete(a1);
}

void std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  realityio *Name;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  std::string::size_type v39;
  uint64_t v40;
  std::string::size_type v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  void *v48[2];
  char v49;
  std::string buf[2];
  void *__p[3];
  char v52;
  uint64_t *v53;
  uint64_t *v54;
  char *v55;
  __int128 v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;

  v45 = a1[4];
  v2 = a1[1];
  v1 = a1[2];
  v56 = 0uLL;
  v57 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  if (v1 == v2)
    goto LABEL_66;
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((v1 - v2) >> 4);
  if (v3 >> 61)
    std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
  v53 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v55, v3);
  v54 = v53;
  v55 = (char *)&v53[v5];
  if (v1 == v2)
  {
LABEL_66:
    v11 = 0;
    goto LABEL_67;
  }
  v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v3);
  v8 = v6;
  v9 = 0;
  if (v3 <= 1)
    v10 = 1;
  else
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v1 - v2) >> 4);
  v46 = &v6[8 * v7];
  v47 = -1;
  v11 = v6;
  v12 = (uint64_t *)v45;
  do
  {
    Name = (realityio *)REEntityGetName();
    v14 = a1[1];
    if (!*(_BYTE *)(v14 + 80 * v9))
      goto LABEL_59;
    v15 = (char *)Name;
    v16 = v14 + 80 * v9;
    if (*(char *)(v16 + 31) < 0)
    {
      if (*(_QWORD *)(v16 + 16))
      {
LABEL_11:
        v17 = REAssetManagerSceneAssetCreate();
        if (v17)
        {
          realityio::Builder::addAsset(v12, v17, 0);
          v18 = a1[1] + 80 * v9;
          v19 = (v8 - v11) >> 3;
          v20 = v47;
          if (*(_BYTE *)(v18 + 1))
            v20 = (v8 - v11) >> 3;
          v47 = v20;
          v21 = *(_QWORD *)(v18 + 64);
          if (v8 >= v46)
          {
            v23 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 61)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            if ((v46 - v11) >> 2 > v23)
              v23 = (v46 - v11) >> 2;
            if ((unint64_t)(v46 - v11) >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v24 = v23;
            if (v24)
              v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v24);
            else
              v25 = 0;
            v26 = (char *)(v24 + 8 * v19);
            *(_QWORD *)v26 = v21;
            v27 = v26 + 8;
            while (v8 != v11)
            {
              v28 = *((_QWORD *)v8 - 1);
              v8 -= 8;
              *((_QWORD *)v26 - 1) = v28;
              v26 -= 8;
            }
            v46 = (char *)(v24 + 8 * v25);
            if (v11)
              operator delete(v11);
            v11 = v26;
            v8 = v27;
            v12 = (uint64_t *)v45;
          }
          else
          {
            *(_QWORD *)v8 = v21;
            v8 += 8;
          }
          v29 = v54;
          if (v54 >= (uint64_t *)v55)
          {
            v31 = v54 - v53;
            if ((unint64_t)(v31 + 1) >> 61)
              std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
            v32 = (v55 - (char *)v53) >> 2;
            if (v32 <= v31 + 1)
              v32 = v31 + 1;
            if ((unint64_t)(v55 - (char *)v53) >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v32;
            if (v33)
              v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v55, v33);
            else
              v34 = 0;
            v35 = (uint64_t *)&v34[8 * v31];
            *v35 = v17;
            v30 = v35 + 1;
            v37 = v53;
            v36 = v54;
            if (v54 != v53)
            {
              do
              {
                v38 = *--v36;
                *--v35 = v38;
              }
              while (v36 != v37);
              v36 = v53;
            }
            v53 = v35;
            v54 = v30;
            v55 = &v34[8 * v33];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *v54 = v17;
            v30 = v29 + 1;
          }
          v54 = v30;
          v39 = *(_QWORD *)(a1[1] + 80 * v9 + 64);
          std::string::basic_string[abi:ne180100]<0>(v48, v15);
          realityio::ImportedScene::ImportedScene(buf, 1, v39, v17, (__int128 *)v48, (__int128 *)(a1[1] + 80 * v9 + 32), *(_BYTE *)(a1[1] + 80 * v9 + 1));
          v40 = *((_QWORD *)&v56 + 1);
          if (*((_QWORD *)&v56 + 1) >= v57)
          {
            *((_QWORD *)&v56 + 1) = std::vector<realityio::ImportedScene>::__push_back_slow_path<realityio::ImportedScene>((uint64_t *)&v56, (uint64_t)buf);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
          }
          else
          {
            **((_BYTE **)&v56 + 1) = buf[0].__r_.__value_.__s.__data_[0];
            *(_OWORD *)(v40 + 8) = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[1];
            *(_OWORD *)&buf[0].__r_.__value_.__r.__words[1] = 0u;
            v41 = buf[1].__r_.__value_.__r.__words[2];
            *(_OWORD *)(v40 + 24) = *(_OWORD *)&buf[1].__r_.__value_.__l.__data_;
            *(_QWORD *)(v40 + 40) = v41;
            memset(&buf[1], 0, sizeof(std::string));
            v42 = __p[2];
            *(_OWORD *)(v40 + 48) = *(_OWORD *)__p;
            *(_QWORD *)(v40 + 64) = v42;
            memset(__p, 0, sizeof(__p));
            *(_BYTE *)(v40 + 72) = v52;
            *((_QWORD *)&v56 + 1) = v40 + 80;
          }
          if (SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[1].__r_.__value_.__l.__data_);
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&buf[0].__r_.__value_.__r.__words[2]);
          realityio::WrappedRERef<void *>::~WrappedRERef(&buf[0].__r_.__value_.__l.__size_);
          if (v49 < 0)
            operator delete(v48[0]);
          RERelease();
        }
        goto LABEL_59;
      }
    }
    else if (*(_BYTE *)(v16 + 31))
    {
      goto LABEL_11;
    }
    v22 = *(NSObject **)(realityio::logObjects(Name) + 24);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_22FF26000, v22, OS_LOG_TYPE_DEFAULT, "Invalid empty scene name, skipping.", (uint8_t *)buf, 2u);
    }
LABEL_59:
    ++v9;
  }
  while (v9 != v10);
  if (v47 < (v8 - v11) >> 3)
  {
    v43 = *(_QWORD *)(*(_QWORD *)(a1[6] + 16) + 128);
    if (v43)
    {
      buf[0].__r_.__value_.__r.__words[0] = a1[5];
      v48[0] = v11;
      v59 = (v8 - v11) >> 3;
      v60 = v53;
      v58 = v47;
      (*(void (**)(uint64_t, std::string *, void **, uint64_t **, uint64_t *, unint64_t *))(*(_QWORD *)v43 + 48))(v43, buf, v48, &v60, &v59, &v58);
    }
  }
  v44 = 72;
  do
  {
    REEntitySetParent();
    v44 += 80;
    --v10;
  }
  while (v10);
LABEL_67:
  std::mutex::lock((std::mutex *)(v45 + 304));
  std::vector<realityio::ImportedScene>::__vdeallocate((void **)(v45 + 280));
  *(_OWORD *)(v45 + 280) = v56;
  *(_QWORD *)(v45 + 296) = v57;
  v57 = 0;
  v56 = 0uLL;
  std::mutex::unlock((std::mutex *)(v45 + 304));
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v11)
    operator delete(v11);
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_23003A324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  uint64_t v39;
  void *v41;

  v41 = *(void **)(v39 - 168);
  if (v41)
  {
    *(_QWORD *)(v39 - 160) = v41;
    operator delete(v41);
  }
  if (v38)
    operator delete(v38);
  *(_QWORD *)(v39 - 168) = v39 - 144;
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 168));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::vector((_QWORD *)a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    RERetain();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

void sub_23003A460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SceneAssetBuilder::run(realityio::Inputs *)::Dummy *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEF120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SceneAssetBuilder::run(realityio::Inputs *)::Dummy *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEF120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<realityio::SceneAssetBuilder::run(realityio::Inputs *)::Dummy *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void realityio::DetailedError::makeFromCFError(uint64_t err@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  __CFString *v7;
  const std::string::value_type *v8;
  void *v9;
  unsigned int Code;
  void *__p[2];
  unsigned __int8 v12;
  char v13[8];
  void *v14;
  char v15;
  std::string v16;

  v5 = err;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v16 = *(std::string *)a2;
    if (!err)
      goto LABEL_17;
  }
  v7 = (__CFString *)CFErrorCopyDescription((CFErrorRef)v5);
  realityio::CFStringCopyUTF8String(v7, (uint64_t)v13);
  if (v13[0])
  {
    std::operator+<char>();
    v8 = (v12 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
    v9 = (v12 & 0x80u) == 0 ? (void *)v12 : __p[1];
    std::string::append(&v16, v8, (std::string::size_type)v9);
    if ((char)v12 < 0)
      operator delete(__p[0]);
  }
  Code = CFErrorGetCode((CFErrorRef)v5);
  CFRelease((CFTypeRef)v5);
  v5 = Code;
  if (v13[0] && v15 < 0)
    operator delete(v14);
LABEL_17:
  realityio::DetailedError::DetailedError(a4, v5, a3, (__int128 *)&v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_23003A5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
    operator delete(__p);
  if (a16 && a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

realityio::MeshComponentBuilder *realityio::MeshComponentBuilder::MeshComponentBuilder(realityio::MeshComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "MeshComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kMeshComponentBuilderIdentifier);
  realityio::generateMeshAssetBuilderDirtyStageSubscription(&v12);
  v20[0] = &off_24FDEF218;
  v21 = v20;
  v18[0] = &off_24FDEF328;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDEF1A0;
  return this;
}

void sub_23003A7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = *(_QWORD **)(v28 - 48);
  if (v32 == (_QWORD *)(v28 - 72))
  {
    v33 = 4;
    v32 = (_QWORD *)(v28 - 72);
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t realityio::MeshComponentBuilder::run(uint64_t **this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t EntityGeneratingDataForPrim;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v10;
  uint64_t v11;
  _BOOL8 isGuide;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BOOL8 hasValueForKey;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  char *PrimPath;
  NSObject *v26;
  realityio *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  realityio::MeshComponentBuilder *v31;
  uint64_t v32;
  uint64_t *v33;
  void **v34;
  unint64_t *v35;
  unint64_t v36;
  const void **v37;
  uint64_t v38;
  _QWORD *v39;
  uint8_t **v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t result;
  uint64_t Text;
  _QWORD v56[2];
  uint8_t buf[16];
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[16];
  void **v61;
  uint64_t v62;
  realityio::MeshAssetBuilder *v63;
  _QWORD v64[6];
  char v65;
  uint64_t v66;
  BOOL v67;
  char v68;
  char v69[8];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t *v74;
  void ***v75;
  _OWORD v76[3];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  v66 = 0;
  memset(v64, 0, sizeof(v64));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v69))
  {
    v6 = *(_QWORD *)a2;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v69, &v61);
    v7 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v6 + 64, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v61);
    v8 = (_QWORD *)(v6 + 72) != v7 && *(_QWORD *)(*(_QWORD *)(v6 + 40) + 104 * v7[5] + 24) == (_QWORD)v61;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
    if (v8)
    {
      EntityGeneratingDataForPrim = realityio::internal::PrimToEntityMap::getEntityGeneratingDataForPrim((realityio::internal::PrimToEntityMap *)(*(_QWORD *)a2 + 16), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v69);
      v11 = EntityGeneratingDataForPrim;
      if (EntityGeneratingDataForPrim)
      {
        if (*(_QWORD *)(EntityGeneratingDataForPrim + 72) + *(_QWORD *)(EntityGeneratingDataForPrim + 96))
        {
          isGuide = realityio::isGuide((realityio *)v69, v10);
          if (!isGuide)
          {
            v13 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)isGuide);
            realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v13, (uint64_t)&v61);
            if ((_BYTE)v61)
            {
              *(_QWORD *)&v76[0] = v62;
              if (v62)
              {
                RERetain();
                v14 = *(_QWORD *)&v76[0];
              }
              else
              {
                v14 = 0;
              }
            }
            else
            {
              v14 = 0;
              *(_QWORD *)&v76[0] = 0;
            }
            v15 = v64[0];
            if (v64[0] != v14)
            {
              v64[0] = v14;
              *(_QWORD *)&v76[0] = v15;
            }
            realityio::WrappedRERef<REEntity *>::~WrappedRERef(v76);
            if (!v64[0])
            {
              PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v69);
              v26 = *(id *)(realityio::logObjects((realityio *)PrimPath) + 24);
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              {
                Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
                LODWORD(v76[0]) = 136315138;
                *(_QWORD *)((char *)v76 + 4) = Text;
                _os_log_error_impl(&dword_22FF26000, v26, OS_LOG_TYPE_ERROR, "Unable to create mesh entity at path (%s) because the entity does not exist.\n", (uint8_t *)v76, 0xCu);
              }

              goto LABEL_65;
            }
            realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v60, 2034, (uint64_t)this);
            if (*(_QWORD *)(v11 + 96) != 1
              || *(_QWORD *)(v11 + 72)
              || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 16) + 272))
            {
              v16 = 0;
            }
            else if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCone>((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)v69) & 1) != 0
                   || (pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCapsule>((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)v69) & 1) != 0)
            {
              v16 = 1;
            }
            else
            {
              v16 = pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCylinder>((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)v69);
            }
            v63 = (realityio::MeshAssetBuilder *)realityio::Inputs::assetManager(a2);
            v17 = realityio::MeshAssetBuilder::kOutputName(v63);
            MEMORY[0x2348B2764](v76, v17);
            hasValueForKey = realityio::Inputs::hasValueForKey((uint64_t)a2, (unsigned int **)v76);
            if ((v76[0] & 7) != 0)
            {
              v19 = (unsigned int *)(*(_QWORD *)&v76[0] & 0xFFFFFFFFFFFFFFF8);
              do
                v20 = __ldxr(v19);
              while (__stlxr(v20 - 2, v19));
            }
            if (!hasValueForKey)
            {
LABEL_64:
              realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v60);
LABEL_65:
              realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v61);
              goto LABEL_66;
            }
            v21 = realityio::MeshAssetBuilder::kOutputName((realityio::MeshAssetBuilder *)hasValueForKey);
            realityio::Inputs::_getValue<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>((uint64_t)a2, v21, (uint64_t)v76);
            if (LOBYTE(v76[0]))
            {
              v22 = *(_QWORD *)(*((_QWORD *)&v76[0] + 1) + 8);
              *(_QWORD *)buf = **((_QWORD **)&v76[0] + 1);
              *(_QWORD *)&buf[8] = v22;
              if (v22)
              {
                v23 = (unint64_t *)(v22 + 8);
                do
                  v24 = __ldxr(v23);
                while (__stxr(v24 + 1, v23));
              }
            }
            else
            {
              memset(buf, 0, sizeof(buf));
            }
            std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)&v64[1], (__int128 *)buf);
            v27 = (realityio *)std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (!v64[1])
            {
              v29 = *(NSObject **)(realityio::logObjects(v27) + 24);
              if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_22FF26000, v29, OS_LOG_TYPE_ERROR, "Stopping operation to set mesh component because mesh asset does not exist", buf, 2u);
              }
              goto LABEL_63;
            }
            v65 = *(_BYTE *)(*((_QWORD *)&v76[0] + 1) + 168);
            *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)&v76[0] + 1) + 176);
            if (*(_QWORD *)buf)
            {
              RERetain();
              v28 = *(_QWORD *)buf;
            }
            else
            {
              v28 = 0;
            }
            v30 = v66;
            if (v66 != v28)
            {
              v66 = v28;
              *(_QWORD *)buf = v30;
            }
            realityio::WrappedRERef<REAsset *>::~WrappedRERef(buf);
            v67 = *(_QWORD *)(*((_QWORD *)&v76[0] + 1) + 80) != 0;
            memset(buf, 0, sizeof(buf));
            v58 = 0;
            std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(buf, *(_QWORD *)(*((_QWORD *)&v76[0] + 1) + 40), *(_QWORD *)(*((_QWORD *)&v76[0] + 1) + 48), (uint64_t)(*(_QWORD *)(*((_QWORD *)&v76[0] + 1) + 48) - *(_QWORD *)(*((_QWORD *)&v76[0] + 1) + 40)) >> 3);
            std::vector<realityio::WrappedRERef<REAsset *>>::__vdeallocate((void **)&v64[3]);
            *(_OWORD *)&v64[3] = *(_OWORD *)buf;
            v64[5] = v58;
            v58 = 0;
            memset(buf, 0, sizeof(buf));
            v73 = buf;
            std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
            v68 = *(_BYTE *)(*((_QWORD *)&v76[0] + 1) + 184);
            *(_QWORD *)buf = REMeshComponentGetComponentType();
            std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(this + 5, (unint64_t *)buf, (uint64_t *)buf);
            if (v65 || v67 || v68)
            {
              *(_QWORD *)buf = REMeshDeformationComponentGetComponentType();
              std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(this + 5, (unint64_t *)buf, (uint64_t *)buf);
              if (v65)
              {
                *(_QWORD *)buf = REBlendShapeWeightsComponentGetComponentType();
                std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(this + 5, (unint64_t *)buf, (uint64_t *)buf);
              }
              if (v67)
              {
                *(_QWORD *)buf = RESkeletalPoseComponentGetComponentType();
                std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(this + 5, (unint64_t *)buf, (uint64_t *)buf);
                *(_QWORD *)buf = RERigComponentGetComponentType();
                std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(this + 5, (unint64_t *)buf, (uint64_t *)buf);
              }
            }
            v31 = (realityio::MeshComponentBuilder *)v64[0];
            v59 = v64[0];
            if (v64[0])
              v31 = (realityio::MeshComponentBuilder *)RERetain();
            v32 = *((_QWORD *)a2 + 5);
            v34 = (void **)this[2];
            v33 = this[3];
            v73 = (uint8_t *)v34;
            v74 = v33;
            if (v33)
            {
              v35 = (unint64_t *)(v33 + 1);
              do
                v36 = __ldxr(v35);
              while (__stxr(v36 + 1, v35));
            }
            v37 = (const void **)realityio::MeshComponentBuilder::kOutputName(v31);
            realityio::Outputs::getValue<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>((uint64_t)buf, (std::mutex *)v34, v37);
            std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v73);
            v38 = *((_QWORD *)a2 + 6);
            v39 = operator new(0x50uLL);
            *v39 = &off_24FDEF3A8;
            v39[1] = &v63;
            v39[2] = this;
            v39[3] = v32;
            *((_BYTE *)v39 + 32) = v16;
            v39[5] = a2;
            v39[6] = v11;
            v39[7] = &v59;
            v39[8] = buf;
            v39[9] = v69;
            v75 = (void ***)v39;
            (*(void (**)(uint64_t, uint8_t **))(*(_QWORD *)v38 + 16))(v38, &v73);
            v40 = (uint8_t **)v75;
            if (v75 == (void ***)&v73)
            {
              v41 = 4;
              v40 = &v73;
            }
            else
            {
              if (!v75)
              {
LABEL_59:
                v42 = (char *)operator new(0x28uLL);
                *((_QWORD *)v42 + 1) = 0;
                *((_QWORD *)v42 + 2) = 0;
                *(_QWORD *)v42 = &off_24FDEF5A8;
                *((_QWORD *)v42 + 4) = 0;
                *((_QWORD *)v42 + 3) = 0;
                v73 = (uint8_t *)(v42 + 24);
                v74 = (uint64_t *)v42;
                v42[24] = 1;
                v43 = realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)v42 + 4, &v59);
                v73[1] = v59 != v64[0];
                v45 = (uint64_t)this[2];
                v44 = this[3];
                v56[0] = v45;
                v56[1] = v44;
                if (v44)
                {
                  v46 = (unint64_t *)(v44 + 1);
                  do
                    v47 = __ldxr(v46);
                  while (__stxr(v47 + 1, v46));
                }
                v48 = (__int128 *)realityio::MeshComponentBuilder::kOutputName((realityio::MeshComponentBuilder *)v43);
                realityio::Outputs::storeValue<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult> &>(v45, v48, (uint64_t *)&v73);
                std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v56);
                std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v73);
                realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)buf);
                realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v59);
LABEL_63:
                realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v76);
                goto LABEL_64;
              }
              v41 = 5;
            }
            (*(void (**)(void))&(*v40)[8 * v41])();
            goto LABEL_59;
          }
        }
      }
    }
  }
LABEL_66:
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v66);
  v61 = (void **)&v64[3];
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v61);
  v49 = (std::__shared_weak_count *)v64[2];
  if (v64[2])
  {
    v50 = (unint64_t *)(v64[2] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v64);
  if ((v72 & 7) != 0)
  {
    v52 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
  result = v70;
  if (v70)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
  return result;
}

void sub_23003AF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result(v27 - 128);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a19);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v27 - 192));
  _Unwind_Resume(a1);
}

uint64_t realityio::internal::PrimToEntityMap::getEntityGeneratingDataForPrim(realityio::internal::PrimToEntityMap *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v7;

  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2))
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v7);
  v4 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 48, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  if ((_QWORD *)((char *)this + 56) == v4)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 3) + 104 * v4[5];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  return v5;
}

void sub_23003B184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

BOOL realityio::isGuide(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unint64_t v5;
  _BOOL8 v6;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *Data;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[8];
  unint64_t v22;
  void *__p;
  char v24;

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v19 = MEMORY[0x24BEE9D70] + 16;
  if (!v20
    || (*(_BYTE *)(v20 + 57) & 8) != 0
    || !(*(unsigned int (**)(uint64_t *))(MEMORY[0x24BEE9D70] + 48))(&v19))
  {
    v6 = 0;
    goto LABEL_14;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::GetPurposeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)&v19);
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)v15, (uint64_t)v21);
  if (!v21[0])
  {
    v5 = 0;
    goto LABEL_16;
  }
  v2 = v22;
  if ((v22 & 7) != 0)
  {
    v3 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) != 0)
      v5 = v2;
    else
      v5 = v2 & 0xFFFFFFFFFFFFFFF8;
    if (v21[0])
    {
      v2 = v22;
      goto LABEL_19;
    }
LABEL_16:
    if (v24 < 0)
      operator delete(__p);
    goto LABEL_22;
  }
  v5 = v22;
LABEL_19:
  if ((v2 & 7) != 0)
  {
    v8 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
LABEL_22:
  Data = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
  v11 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v6 = (v5 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 49) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 7) != 0)
  {
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  if ((v18 & 7) != 0)
  {
    v13 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  if (v16)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
LABEL_14:
  MEMORY[0x2348B205C](&v19);
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCone>(pxrInternal__aapl__pxrReserved__::UsdGeomCone *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCapsule>(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t realityio::Outputs::getValue<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>(uint64_t a1, std::mutex *a2, const void **a3)
{
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  std::string v11;
  _BYTE v12[8];
  __int128 v13;
  std::string v14;

  realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>((uint64_t)v12, a2, a3);
  if (v12[0])
  {
    v4 = v13;
    if (*((_QWORD *)&v13 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      do
        v7 = __ldxr(v5);
      while (__stxr(v7 + 1, v5));
      *(_BYTE *)a1 = 1;
      *(_OWORD *)(a1 + 8) = v4;
      do
        v8 = __ldaxr(v5);
      while (__stlxr(v8 - 1, v5));
      if (!v8)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v4 + 1) + 16))(*((_QWORD *)&v4 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v4 + 1));
      }
    }
    else
    {
      *(_BYTE *)a1 = 1;
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
  else
  {
    v10 = v13;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v11, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      v11 = v14;
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v10;
    *(std::string *)(a1 + 24) = v11;
  }
  return realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v12);
}

void sub_23003B4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::MeshComponentBuilder::kOutputName(realityio::MeshComponentBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_255E54850);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_255E54850))
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "meshComponentBuilderData");
    _MergedGlobals_16 = (uint64_t)v3;
    __cxa_guard_release(&qword_255E54850);
  }
  return _MergedGlobals_16;
}

void sub_23003B574(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_255E54850);
  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult> &>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  std::mutex *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 *v20;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v8 = *a3;
  v7 = (std::__shared_weak_count *)a3[1];
  v9 = operator new(0x30uLL);
  v10 = v9;
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_24FDEF5F8;
  v11 = v9 + 3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v9[3] = &off_24FDEF648;
    v9[4] = v8;
    v9[5] = v7;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    v9[3] = &off_24FDEF648;
    v9[4] = v8;
    v9[5] = 0;
  }
  v20 = a2;
  v16 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v20);
  v17 = (std::__shared_weak_count *)v16[8];
  v16[7] = (uint64_t)v11;
  v16[8] = (uint64_t)v10;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23003B74C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::MaterialsDataForMesh::~MaterialsDataForMesh(_anonymous_namespace_::MaterialsDataForMesh *this)
{
  void **v2;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)this + 8);
  v2 = (void **)((char *)this + 32);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)this + 1);
}

void realityio::MeshComponentBuilder::clear(std::__shared_weak_count **this, realityio::Inputs *a2)
{
  uint64_t v3;
  realityio::MeshComponentBuilder *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void **v10;
  unint64_t *v11;
  unint64_t v12;
  realityio::Inputs *v13;
  uint64_t (**v14)();
  realityio::Inputs **v15;
  realityio::MeshComponentBuilder *v16;
  uint64_t (***v17)();
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a2 + 6);
  v13 = a2;
  v14 = &off_24FDEF678;
  v15 = &v13;
  v16 = (realityio::MeshComponentBuilder *)this;
  v17 = &v14;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v3 + 16))(v3, &v14);
  v4 = (realityio::MeshComponentBuilder *)v17;
  if (v17 == &v14)
  {
    v5 = 4;
    v4 = (realityio::MeshComponentBuilder *)&v14;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v5 = 5;
  }
  v4 = (realityio::MeshComponentBuilder *)(*(uint64_t (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v7 = this[2];
  v6 = this[3];
  v14 = (uint64_t (**)())v7;
  v15 = (realityio::Inputs **)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (const void **)realityio::MeshComponentBuilder::kOutputName(v4);
  std::mutex::lock((std::mutex *)&v7[2].__shared_weak_owners_);
  if (&v7[2] != (std::__shared_weak_count *)std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v7[1].__shared_weak_owners_, v10))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)&v7[1].__shared_weak_owners_, v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(v7, (unsigned __int8 *)v10);
  std::mutex::unlock((std::mutex *)&v7[2].__shared_weak_owners_);
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_23003B924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::mutex *v13;

  std::mutex::unlock(v13);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void realityio::MeshComponentBuilder::~MeshComponentBuilder(realityio::MeshComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<realityio::WrappedRERef<REAsset *>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::WrappedRERef<REAsset *>>,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23003BA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<realityio::WrappedRERef<REAsset *>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::WrappedRERef<REAsset *>>,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(a2 + v7);
      *(_QWORD *)(a4 + v7) = v8;
      if (v8)
        RERetain();
      v7 += 8;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_23003BACC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 8;
    do
    {
      realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEF218;
  return result;
}

void std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEF218;
}

void std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  realityio::MeshAssetBuilder *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  void *v54;
  std::__shared_weak_count *v55;
  void *v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  void *__p;
  std::__shared_weak_count *v60;
  char v61;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v56) = 0;
  std::allocate_shared[abi:ne180100]<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor,std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)&v56, &__p);
  v6 = v60;
  v56 = __p;
  v57 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (realityio::MeshAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v56);
  v10 = v57;
  if (v57)
  {
    v11 = (unint64_t *)&v57->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::MeshAssetBuilder::kOutputName(v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v54) = 1;
  std::allocate_shared[abi:ne180100]<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor,std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v13, (uint64_t *)v14 + 12, (int *)&v54, &__p);
  v15 = v60;
  v54 = __p;
  v55 = v60;
  if (v60)
  {
    v16 = (unint64_t *)&v60->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v54);
  v18 = v55;
  if (v55)
  {
    v19 = (unint64_t *)&v55->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentClass");
  v21 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v21)
    v21 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  MEMORY[0x2348B274C](&v58, "RealityKitComponent");
  LODWORD(v51) = 1;
  std::allocate_shared[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::allocator<realityio::ChildPrimInputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality,void>((uint64_t)&__p, (uint64_t *)v21 + 2, &v58, (int *)&v51, &v52);
  v23 = v52;
  v22 = v53;
  v52 = 0;
  v53 = 0;
  if ((v58 & 7) != 0)
  {
    v24 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if (v61 < 0)
    operator delete(__p);
  v52 = v23;
  v53 = v22;
  if (v22)
  {
    v26 = (unint64_t *)&v22->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v52);
  v28 = v53;
  if (v53)
  {
    v29 = (unint64_t *)&v53->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  MEMORY[0x2348B274C](&v51, "ModelSortGroupComponentBuilderOutput");
  MEMORY[0x2348B274C](&v50, "RealityKitComponent");
  v31 = (std::__shared_weak_count *)operator new(0x50uLL);
  v31->__shared_owners_ = 0;
  v32 = (unint64_t *)&v31->__shared_owners_;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE6B18;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ModelSortGroupComponentBuilderOutput");
  v58 = v50;
  v50 = 0;
  realityio::ChildPrimInputDescriptor::ChildPrimInputDescriptor(&v31[1].__vftable, (uint64_t)&__p, &v51, &v58, 1);
  if ((v58 & 7) != 0)
  {
    v33 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  if (v61 < 0)
    operator delete(__p);
  if ((v50 & 7) != 0)
  {
    v35 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  if ((v51 & 7) != 0)
  {
    v37 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  __p = &v31[1];
  v60 = v31;
  do
    v39 = __ldxr(v32);
  while (__stxr(v39 + 1, v32));
  realityio::InputsDescriptor::addInputDescriptor(v3, &__p);
  v40 = v60;
  if (v60)
  {
    v41 = (unint64_t *)&v60->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  do
    v43 = __ldaxr(v32);
  while (__stlxr(v43 - 1, v32));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (v22)
  {
    v44 = (unint64_t *)&v22->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v15)
  {
    v46 = (unint64_t *)&v15->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v48 = (unint64_t *)&v6->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_23003C018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;

  if (a23 < 0)
    operator delete(__p);
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v24)
  {
    v30 = (unint64_t *)&v24->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  do
    v32 = __ldaxr(v26);
  while (__stlxr(v32 - 1, v26));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor,std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_23003C384(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  char v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDEF288;
  std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>::construct[abi:ne180100]<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>((uint64_t)&v6, a1 + 3, a2, a3, a4);
  return a1;
}

void sub_23003C3E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEF288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEF288;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>::construct[abi:ne180100]<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, int *a5)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor(a2, (uint64_t)&__p, a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_23003C4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor(_QWORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (__int128 *)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = &off_24FDEF2D8;
  return a1;
}

void sub_23003C57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor::~ConnectionOnEntityGeneratingPrimOnlyInputDescriptor(realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor::resolvedPrimPaths@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X2>, const realityio::internal::PrimToEntityMap *a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2 + 48, a1);
  if ((_QWORD *)((char *)a2 + 56) != result
    && *(_QWORD *)(*((_QWORD *)a2 + 3) + 104 * result[5] + 24) == *(_QWORD *)a1)
  {
    return std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, (unsigned int *)a1, a1);
  }
  return result;
}

void sub_23003C644(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::allocator<realityio::ChildPrimInputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, int *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<realityio::ChildPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality,std::allocator<realityio::ChildPrimInputDescriptor>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_23003C6BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<realityio::ChildPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality,std::allocator<realityio::ChildPrimInputDescriptor>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  char v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDE6B18;
  std::allocator<realityio::ChildPrimInputDescriptor>::construct[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality>((uint64_t)&v7, a1 + 3, a2, a3, a4, a5);
  return a1;
}

void sub_23003C724(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<realityio::ChildPrimInputDescriptor>::construct[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, int *a6)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  void *__p[2];
  uint64_t v10;

  *(_OWORD *)__p = *(_OWORD *)a3;
  v10 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v8 = *a5;
  *a5 = 0;
  realityio::ChildPrimInputDescriptor::ChildPrimInputDescriptor(a2, (uint64_t)__p, a4, &v8, *a6);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_23003C7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  unsigned int *v17;
  unsigned int v18;

  if ((a10 & 7) != 0)
  {
    v17 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEF328;
  return result;
}

void std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEF328;
}

void std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::MeshComponentBuilder::kOutputName((realityio::MeshComponentBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 14, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_23003C9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void realityio::Inputs::_getValue<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  uint64_t String;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type v31;
  std::mutex *v32;
  unint64_t *v33;
  unint64_t v34;
  const void **EmptyString;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  unsigned int *v45;
  unsigned int v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  _BYTE __p[24];
  __int128 v51;
  std::string::size_type size;
  std::string v53;
  std::string v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::string v58[2];
  _BYTE v59[40];
  std::string::size_type v60;

  v55 = 0;
  v56 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    v56 = std::__shared_weak_count::lock(v6);
    if (v56)
      v55 = *(_QWORD *)(a1 + 16);
  }
  MEMORY[0x2348B2764](&v57, a2);
  v7 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(a1 + 8), &v55);
  if (v7 == v8)
  {
    std::operator+<char>();
    v20 = std::string::append(&v53, ") at prim path (");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    v23 = *(char *)(String + 23);
    if (v23 >= 0)
      v24 = (const std::string::value_type *)String;
    else
      v24 = *(const std::string::value_type **)String;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(String + 23);
    else
      v25 = *(_QWORD *)(String + 8);
    v26 = std::string::append(&v54, v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v58[0].__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58[0].__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(v58, ")");
    goto LABEL_22;
  }
  v9 = 1;
  v10 = v7;
  do
  {
    v10 = (_QWORD *)*v10;
    --v9;
  }
  while (v10 != v8);
  if (v9)
  {
    std::operator+<char>();
    v11 = std::string::append(&v53, ") at prim path (");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    v14 = *(char *)(v13 + 23);
    if (v14 >= 0)
      v15 = (const std::string::value_type *)v13;
    else
      v15 = *(const std::string::value_type **)v13;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(v13 + 23);
    else
      v16 = *(_QWORD *)(v13 + 8);
    v17 = std::string::append(&v54, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v58[0].__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58[0].__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(v58, ") because more than one connected builder produced the same output type");
LABEL_22:
    v28 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v28;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v59, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v59;
    v29 = *(_QWORD *)&v59[24];
    *(_QWORD *)(a3 + 24) = *(_QWORD *)&v59[16];
    *(_QWORD *)(a3 + 32) = v29;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)&v59[31];
    LOBYTE(v29) = v59[39];
    memset(&v59[16], 0, 24);
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v29;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v58[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    goto LABEL_62;
  }
  v30 = v7[5];
  v32 = *(std::mutex **)(v30 + 16);
  v31 = *(_QWORD *)(v30 + 24);
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
  v54.__r_.__value_.__l.__size_ = v31;
  if (v31)
  {
    v33 = (unint64_t *)(v31 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  if ((v7[7] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const void **)((v7[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v7);
  realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>(v32, EmptyString, (uint64_t)v59);
  if (v59[0])
  {
    v36 = *(_QWORD *)&v59[8];
    v37 = *(std::__shared_weak_count **)&v59[16];
    if (*(_QWORD *)&v59[16])
    {
      v38 = (unint64_t *)(*(_QWORD *)&v59[16] + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      do
        v40 = __ldxr(v38);
      while (__stxr(v40 + 1, v38));
      __p[0] = 1;
      *(_QWORD *)&__p[8] = v36;
      *(_QWORD *)&__p[16] = v37;
      do
        v41 = __ldaxr(v38);
      while (__stlxr(v41 - 1, v38));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      __p[0] = 1;
      *(_QWORD *)&__p[8] = *(_QWORD *)&v59[8];
      *(_QWORD *)&__p[16] = 0;
    }
  }
  else
  {
    *(_OWORD *)&v58[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v59[8];
    if (SHIBYTE(v60) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v58[0].__r_.__value_.__r.__words[2], *(const std::string::value_type **)&v59[24], *(std::string::size_type *)&v59[32]);
    }
    else
    {
      *(_OWORD *)&v58[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&v59[24];
      v58[1].__r_.__value_.__l.__size_ = v60;
    }
    __p[0] = 0;
    *(_OWORD *)&__p[8] = *(_OWORD *)&v58[0].__r_.__value_.__l.__data_;
    v51 = *(_OWORD *)&v58[0].__r_.__value_.__r.__words[2];
    size = v58[1].__r_.__value_.__l.__size_;
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v59);
  if (v54.__r_.__value_.__l.__size_)
  {
    v42 = (unint64_t *)(v54.__r_.__value_.__l.__size_ + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v54.__r_.__value_.__l.__size_ + 16))(v54.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v54.__r_.__value_.__l.__size_);
    }
  }
  if (__p[0])
  {
    v44 = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 8) = v44;
  }
  else
  {
    *(_OWORD *)v59 = *(_OWORD *)&__p[8];
    if (SHIBYTE(size) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v59[16], (const std::string::value_type *)v51, *((std::string::size_type *)&v51 + 1));
    }
    else
    {
      *(_OWORD *)&v59[16] = v51;
      *(_QWORD *)&v59[32] = size;
    }
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v59;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v59[16];
    *(_QWORD *)(a3 + 40) = *(_QWORD *)&v59[32];
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)__p);
LABEL_62:
  if ((v57 & 7) != 0)
  {
    v45 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = v56;
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
}

void sub_23003CF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  unsigned int *v37;
  unsigned int v38;

  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&a9);
  if ((a30 & 7) != 0)
  {
    v37 = (unsigned int *)(a30 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  std::string v16;
  void *__p[2];
  std::string::size_type v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v13 = std::string::append(&v16, "\" does not exist in the builder outputs");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v18 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v19, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v19;
    v15 = v21;
    *(_QWORD *)(a3 + 24) = v20;
    *(_QWORD *)(a3 + 32) = v15;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v21 + 7);
    LOBYTE(v15) = HIBYTE(v21);
    v21 = 0uLL;
    v20 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v15;
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 56);
    v10 = *(_QWORD *)(v8 + 8);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v11 = (unint64_t *)(v9 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = v9;
  }
  std::mutex::unlock(v6);
}

void sub_23003D140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void std::vector<realityio::WrappedRERef<REAsset *>>::__vdeallocate(void **a1)
{
  _QWORD *v1;
  _QWORD *v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        v3 = realityio::WrappedRERef<REAsset *>::~WrappedRERef(v3 - 1);
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>(uint64_t a1, std::mutex *a2, const void **a3)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  std::string v18;
  void *__p[2];
  std::string::size_type v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  v6 = a2 + 1;
  std::mutex::lock(a2 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a2->__m_.__opaque[32], a3);
  if (&a2->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v13 = std::string::append(&v18, "\" does not exist in the builder outputs");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v20 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v21, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a1 + 8) = v21;
    v15 = v22;
    v24[0] = v23;
    *(_QWORD *)((char *)v24 + 7) = *(_QWORD *)((char *)&v23 + 7);
    v16 = HIBYTE(v23);
    v23 = 0uLL;
    v22 = 0;
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v24 + 7);
    v17 = v24[0];
    *(_QWORD *)(a1 + 24) = v15;
    *(_QWORD *)(a1 + 32) = v17;
    *(_BYTE *)(a1 + 47) = v16;
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 56);
    v10 = *(_QWORD *)(v8 + 8);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v11 = (unint64_t *)(v9 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v9;
  }
  std::mutex::unlock(v6);
}

void sub_23003D338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24FDEF3A8;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDEF3A8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t ChildCount;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char *Name;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void **v16;
  uint64_t v17;
  uint64_t ComponentType;
  char v19;
  char v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::UsdStage *v22;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v23;
  unsigned int *v24;
  unsigned int v25;
  char ***v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *Object;
  const char *Text;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void **v41;
  void **v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  int v56;
  int v57;
  void *v58[2];
  std::__shared_weak_count *v59;
  void **v60;
  char **v61;
  char *v62;
  uint64_t v63;
  char ***v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  void *__p[2];
  uint64_t v68;
  void **v69;
  void *v70;
  char v71;
  _QWORD v72[21];

  v72[19] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 32))
    goto LABEL_54;
  v54 = *(uint64_t **)(a1 + 16);
  ChildCount = REEntityGetChildCount();
  v3 = ChildCount;
  v4 = *(_QWORD *)(a1 + 64);
  if (*(_BYTE *)v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 1))
      {
        realityio::WrappedRERef<REAsset *>::operator=(*(uint64_t **)(a1 + 56), (uint64_t *)(v5 + 8));
        v6 = **(void ***)(a1 + 56);
        goto LABEL_35;
      }
    }
  }
  v62 = 0;
  v63 = 0;
  v61 = &v62;
  if (ChildCount)
  {
    v7 = 0;
    do
    {
      REEntityGetChild();
      Name = (char *)REEntityGetName();
      std::string::basic_string[abi:ne180100]<0>(__p, Name);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v61, (const void **)__p, (uint64_t)__p);
      if (SHIBYTE(v68) < 0)
        operator delete(__p[0]);
      ++v7;
    }
    while (v3 != v7);
  }
  std::string::basic_string[abi:ne180100]<0>(v58, "usdPrimitiveAxis");
  v9 = 0;
  v10 = (void *)*MEMORY[0x24BEDB7F0];
  v11 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v13 = MEMORY[0x24BEDB848] + 16;
  while (&v62 != (char **)std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v61, (const void **)v58))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"usdPrimitiveAxis_", 17);
    std::ostream::operator<<();
    std::stringbuf::str();
    if (SHIBYTE(v59) < 0)
      operator delete(v58[0]);
    *(_OWORD *)v58 = v65;
    v59 = v66;
    __p[0] = v10;
    *(void **)((char *)__p + *((_QWORD *)v10 - 3)) = v11;
    v68 = v12;
    v69 = (void **)v13;
    if (v71 < 0)
      operator delete(v70);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2348B4DA4](v72);
    ++v9;
  }
  v6 = (void *)REEntityCreate();
  if (v6)
  {
    REEntitySetName();
    REEntitySetParent();
    __p[0] = v6;
    RERetain();
    v14 = *(void ***)(a1 + 56);
    v15 = *v14;
    if (*v14 != __p[0])
    {
      *v14 = __p[0];
      __p[0] = v15;
    }
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(__p);
    RENetworkComponentGetComponentType();
    __p[0] = &off_24FDEF418;
    v69 = __p;
    *(_QWORD *)&v65 = REEntityGetOrAddComponentByClass();
    if (!v69)
      std::__throw_bad_function_call[abi:ne180100]();
    (*((void (**)(void **, __int128 *))*v69 + 6))(v69, &v65);
    RENetworkMarkComponentDirty();
    v16 = v69;
    if (v69 == __p)
    {
      v17 = 4;
      v16 = __p;
    }
    else
    {
      if (!v69)
        goto LABEL_27;
      v17 = 5;
    }
    (*((void (**)(void))*v16 + v17))();
LABEL_27:
    *(_QWORD *)&v65 = REGroundingShadowComponentGetComponentType();
    ComponentType = REMeshSortingComponentGetComponentType();
    v19 = 0;
    *((_QWORD *)&v65 + 1) = ComponentType;
    do
    {
      v20 = v19;
      if (REEntityGetComponentByClass())
      {
        RERetain();
        REEntityRemoveComponentByClass();
        REEntityAddExistingComponent();
        RERelease();
      }
      v19 = 1;
    }
    while ((v20 & 1) == 0);
    RERelease();
  }
  if (SHIBYTE(v59) < 0)
    operator delete(v58[0]);
  std::__tree<std::string>::destroy((uint64_t)&v61, v62);
LABEL_35:
  if (!v6)
    goto LABEL_54;
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 80);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v56, (_DWORD *)(v21 + 28));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v57, (_DWORD *)(v21 + 32));
  v58[0] = 0;
  v58[1] = 0;
  v22 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(**(_QWORD **)(a1 + 40) + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
  *(__n128 *)v58 = realityio::getGeomPrimitiveOrientation((realityio *)&v61, v23);
  if ((v64 & 7) != 0)
  {
    v24 = (unsigned int *)((unint64_t)v64 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
  if (v62)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v62);
  RETransformComponentGetComponentType();
  v61 = (char **)&off_24FDEF498;
  v62 = (char *)v58;
  v64 = &v61;
  *(_QWORD *)&v65 = REEntityGetOrAddComponentByClass();
  if (!v64)
    std::__throw_bad_function_call[abi:ne180100]();
  ((void (*)(char ***, __int128 *))(*v64)[6])(v64, &v65);
  RENetworkMarkComponentDirty();
  v26 = v64;
  if (v64 == &v61)
  {
    v27 = 4;
    v26 = &v61;
    goto LABEL_46;
  }
  if (v64)
  {
    v27 = 5;
LABEL_46:
    ((void (*)(void))(*v26)[v27])();
  }
  if (REComponentClassFromName())
  {
    v28 = REEntityGetOrAddComponentByClass();
    realityio::Builder::addComponent(v54, v28);
    Object = (_QWORD *)RECustomComponentGetObject();
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 72), &v65);
    Text = (const char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v65);
    if (*Object)
    {
      RECIntrospectionFree();
      *Object = 0;
    }
    if (Text)
    {
      strlen(Text);
      v31 = (char *)RECIntrospectionAlloc();
      *Object = v31;
      strcpy(v31, Text);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v65);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
LABEL_54:
  REMeshComponentGetComponentType();
  v32 = REEntityGetOrAddComponentByClass();
  v33 = v32;
  v34 = *(_QWORD *)(a1 + 8);
  v35 = *(void **)(v34 + 16);
  v36 = *(std::__shared_weak_count **)(v34 + 24);
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(p_shared_owners);
    while (__stxr(v38 + 1, p_shared_owners));
    v39 = *(_QWORD *)(a1 + 24);
    *((_QWORD *)&v65 + 1) = v35;
    v66 = v36;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
  }
  else
  {
    v39 = *(_QWORD *)(a1 + 24);
    *((_QWORD *)&v65 + 1) = *(_QWORD *)(v34 + 16);
    v66 = 0;
  }
  *(_QWORD *)&v65 = v32;
  v60 = 0;
  v41 = (void **)operator new(0x20uLL);
  *v41 = &off_24FDEF518;
  v41[1] = (void *)v33;
  v41[2] = v35;
  v41[3] = v36;
  *((_QWORD *)&v65 + 1) = 0;
  v66 = 0;
  v60 = v41;
  realityio::ImportSession::performBlockPostAssetLoadOnEngineQueue(v39, (uint64_t)v58);
  v42 = v60;
  if (v60 == v58)
  {
    v43 = 4;
    v42 = v58;
    goto LABEL_65;
  }
  if (v60)
  {
    v43 = 5;
LABEL_65:
    (*((void (**)(void))*v42 + v43))();
  }
  v44 = v66;
  if (v66)
  {
    v45 = (unint64_t *)&v66->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  REMeshComponentRemoveAllMaterials();
  v47 = *(_QWORD *)(a1 + 8);
  v48 = *(_QWORD *)(v47 + 40) - *(_QWORD *)(v47 + 32);
  if (v48)
  {
    v49 = 0;
    if ((unint64_t)(v48 >> 3) <= 1)
      v50 = 1;
    else
      v50 = v48 >> 3;
    do
    {
      REMeshComponentAddMaterial();
      ++v49;
    }
    while (v50 != v49);
    v47 = *(_QWORD *)(a1 + 8);
  }
  if (*(_BYTE *)(v47 + 56) || *(_BYTE *)(v47 + 72) || *(_BYTE *)(v47 + 73))
  {
    REMeshDeformationComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    v51 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v51 + 56))
    {
      REBlendShapeWeightsComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      REBlendShapeWeightsComponentSetBlendShapeWeightsDefinition();
      v51 = *(_QWORD *)(a1 + 8);
    }
    if (*(_BYTE *)(v51 + 72))
    {
      RESkeletalPoseComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      RERigComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
    }
  }
  RENetworkMarkComponentDirty();
  if (v36)
  {
    v52 = (unint64_t *)&v36->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_23003DC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDEF418;
  return result;
}

void _ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDEF418;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio20MeshComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio20MeshComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void _ZNSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDEF498;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDEF498;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_()
{
  RETransformComponentSetLocalOrientation();
  JUMPOUT(0x2348B0808);
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio20MeshComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio20MeshComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_;
}

_QWORD *std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24FDEF518;
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24FDEF518;
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x2348B4E1CLL);
}

char *std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_24FDEF518;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_24FDEF518;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()()
{
  return REMeshComponentSetMesh();
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::MeshComponentBuilder::BuildResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEF5A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshComponentBuilder::BuildResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEF5A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__shared_ptr_emplace<realityio::MeshComponentBuilder::BuildResult>::__on_zero_shared(uint64_t a1)
{
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(a1 + 32));
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEF5F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEF5F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_24FDEF648;
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>::getRawValue(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void std::__function::__func<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDEF678;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDEF678;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  realityio::MeshComponentBuilder *ComponentByClass;
  std::__shared_weak_count *v5;
  std::mutex *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void **v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char v18[8];
  __int128 v19;
  std::string v20;
  uint64_t v21;
  _BYTE v22[8];
  uint64_t v23;
  __int128 v24;
  std::string v25;
  _BYTE v26[8];
  __int128 v27;
  std::string v28;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  v3 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v2, v3, (uint64_t)v22);
  if (v22[0])
  {
    v21 = v23;
    if (v23)
    {
      RERetain();
      REMeshComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REMeshComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      REMeshDeformationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REMeshDeformationComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      REBlendShapeWeightsComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REBlendShapeWeightsComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      RESkeletalPoseComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        RESkeletalPoseComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      RERigComponentGetComponentType();
      ComponentByClass = (realityio::MeshComponentBuilder *)REEntityGetComponentByClass();
      if (ComponentByClass)
      {
        RERigComponentGetComponentType();
        ComponentByClass = (realityio::MeshComponentBuilder *)REEntityRemoveComponentByClass();
      }
      v6 = *(std::mutex **)(v1 + 16);
      v5 = *(std::__shared_weak_count **)(v1 + 24);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v9 = (const void **)realityio::MeshComponentBuilder::kOutputName(ComponentByClass);
      realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>((uint64_t)v26, v6, v9);
      if (v26[0])
      {
        v10 = v27;
        if (*((_QWORD *)&v27 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
          do
            v13 = __ldxr(v11);
          while (__stxr(v13 + 1, v11));
          v18[0] = 1;
          v19 = v10;
          do
            v14 = __ldaxr(v11);
          while (__stlxr(v14 - 1, v11));
          if (!v14)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
          }
        }
        else
        {
          v18[0] = 1;
          v19 = (unint64_t)v27;
        }
      }
      else
      {
        v24 = v27;
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v25, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
        else
          v25 = v28;
        v18[0] = 0;
        v19 = v24;
        v20 = v25;
      }
      realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v26);
      if (v5)
      {
        v15 = (unint64_t *)&v5->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if (v18[0] && (_QWORD)v19 && *(_BYTE *)(v19 + 1))
        MEMORY[0x2348B0A0C](*(_QWORD *)(v19 + 8));
      realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v18);
    }
  }
  else
  {
    v21 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v21);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v22);
}

void sub_23003E600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  va_list va;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result(v9 - 80);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

BOOL realityio::internal::enableSignposts(realityio::internal *this, uint64_t a2)
{
  char v3;
  unsigned __int8 v4;
  const char *v6;
  BOOL v7;
  char v8;
  _BYTE v9[4];
  int v10;

  v3 = (char)this;
  {
    realityio::Defaults::intValue((realityio::Defaults *)"enableSignposts", v6, (uint64_t)v9);
    if (v9[0])
      v7 = v10 == 0;
    else
      v7 = 0;
    v8 = !v7;
    realityio::internal::enableSignposts(BOOL,BOOL)::value = v8;
  }
  if ((v3 & 1) == 0)
    return realityio::internal::enableSignposts(BOOL,BOOL)::value != 0;
  realityio::internal::enableSignposts(BOOL,BOOL)::value = a2;
  return a2;
}

void sub_23003E76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void realityio::MeshDescriptorAction::getMaterialGroupInfo(void **a1, _DWORD *a2, _QWORD *a3)
{
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  _QWORD *v9;
  pxrInternal__aapl__pxrReserved__::TfToken *v10;
  uint64_t EmptyString;
  __int128 **v12;
  size_t v13;
  void **v14;
  const void *v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  int *v19;
  __int128 *v20;
  unint64_t v21;
  _DWORD *v22;
  __int128 v23;
  char *v24;
  _DWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  _DWORD *v41;
  char *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  _QWORD *v46;
  _QWORD *v47;
  BOOL v48;
  void *__p[2];
  char v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char v57[8];
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  char v62[8];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
  v6 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a3, (uint64_t *)Data + 35);
  v7 = a3 + 1;
  if (a3 + 1 == v6)
    v63 = 0;
  else
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v62, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 5));
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v62))
  {
    if ((v63 & 4) != 0)
      v8 = (char *)(*(uint64_t (**)(char *))((v63 & 0xFFFFFFFFFFFFFFF8) + 168))(v62);
    else
      v8 = v62;
    *a2 = *(_DWORD *)v8;
  }
  v9 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != v7)
  {
    do
    {
      std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&v59, v9 + 4);
      v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v60);
      if ((_DWORD)v10)
      {
        v56 = 0;
        v54 = 0u;
        v55 = 0u;
        if ((v59 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (v59 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
        if (*(char *)(EmptyString + 23) >= 0)
          v13 = *(unsigned __int8 *)(EmptyString + 23);
        else
          v13 = *(_QWORD *)(EmptyString + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v13 + 15);
        if (v51 >= 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        if (v13)
        {
          if (*(char *)(EmptyString + 23) >= 0)
            v15 = (const void *)EmptyString;
          else
            v15 = *(const void **)EmptyString;
          memmove(v14, v15, v13);
        }
        strcpy((char *)v14 + v13, "_materialOffset");
        MEMORY[0x2348B2764](&v52, __p);
        v16 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a3, &v52);
        if (v7 == v16)
          v58 = 0;
        else
          pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v57, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v16 + 5));
        if ((v52 & 7) != 0)
        {
          v17 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        if (v51 < 0)
          operator delete(__p[0]);
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v57))
        {
          if ((v58 & 4) != 0)
            v19 = (int *)(*(uint64_t (**)(char *))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(v57);
          else
            v19 = (int *)v57;
          v53 = *v19;
        }
        if ((v61 & 4) != 0)
          v20 = (__int128 *)(*(uint64_t (**)(__int128 **))((v61 & 0xFFFFFFFFFFFFFFF8) + 168))(&v60);
        else
          v20 = v60;
        pxrInternal__aapl__pxrReserved__::VtArray<int>::operator=((uint64_t)&v54, v20);
        v22 = a1[1];
        v21 = (unint64_t)a1[2];
        if ((unint64_t)v22 >= v21)
        {
          v25 = *a1;
          v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (_BYTE *)*a1) >> 4);
          v27 = v26 + 1;
          if (v26 + 1 > 0x555555555555555)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v25) >> 4);
          if (2 * v28 > v27)
            v27 = 2 * v28;
          if (v28 >= 0x2AAAAAAAAAAAAAALL)
            v29 = 0x555555555555555;
          else
            v29 = v27;
          if (v29 > 0x555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v30 = (char *)operator new(48 * v29);
          v31 = &v30[48 * v26];
          *(_DWORD *)v31 = v53;
          v32 = v55;
          *(_OWORD *)(v31 + 8) = v54;
          *(_OWORD *)(v31 + 24) = v32;
          v54 = 0u;
          v55 = 0u;
          *((_QWORD *)v31 + 5) = v56;
          v56 = 0;
          if (v22 == v25)
          {
            v41 = v22;
            v34 = &v30[48 * v26];
          }
          else
          {
            v33 = &v30[48 * v26];
            v34 = v33;
            do
            {
              v35 = *(v22 - 12);
              v22 -= 12;
              *((_DWORD *)v34 - 12) = v35;
              v34 -= 48;
              v36 = *(_OWORD *)(v22 + 2);
              *(_OWORD *)(v34 + 24) = *(_OWORD *)(v22 + 6);
              *(_OWORD *)(v34 + 8) = v36;
              v37 = *((_QWORD *)v22 + 5);
              *((_QWORD *)v34 + 5) = v37;
              if (v37)
              {
                v38 = (unint64_t *)*((_QWORD *)v33 - 2);
                v39 = (unint64_t *)(v37 - 16);
                if (!v38)
                  v38 = v39;
                do
                  v40 = __ldxr(v38);
                while (__stxr(v40 + 1, v38));
              }
              v33 = v34;
            }
            while (v22 != v25);
            v41 = *a1;
            v22 = a1[1];
          }
          v42 = &v30[48 * v29];
          v24 = v31 + 48;
          *a1 = v34;
          a1[1] = v31 + 48;
          a1[2] = v42;
          while (v22 != v41)
          {
            v43 = (uint64_t)(v22 - 10);
            v22 -= 12;
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v43);
          }
          if (v41)
            operator delete(v41);
        }
        else
        {
          *v22 = v53;
          v23 = v54;
          *(_OWORD *)(v22 + 6) = v55;
          *(_OWORD *)(v22 + 2) = v23;
          v54 = 0u;
          v55 = 0u;
          *((_QWORD *)v22 + 5) = v56;
          v56 = 0;
          v24 = (char *)(v22 + 12);
        }
        a1[1] = v24;
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v57);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v54);
      }
      else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)&v60))
      {
        v12 = &v60;
        if ((v61 & 4) != 0)
          v12 = (__int128 **)(*(uint64_t (**)(__int128 **))((v61 & 0xFFFFFFFFFFFFFFF8) + 168))(&v60);
        *a2 = *(_DWORD *)v12;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v60);
      if ((v59 & 7) != 0)
      {
        v44 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
      v46 = (_QWORD *)v9[1];
      if (v46)
      {
        do
        {
          v47 = v46;
          v46 = (_QWORD *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v47 = (_QWORD *)v9[2];
          v48 = *v47 == (_QWORD)v9;
          v9 = v47;
        }
        while (!v48);
      }
      v9 = v47;
    }
    while (v47 != v7);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v62);
}

void sub_23003EC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

void realityio::MeshDescriptorAction::setupModelDescriptor(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *NameToken;
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  std::vector<unsigned int>::size_type FaceCount;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int *v21;
  std::vector<unsigned int>::pointer begin;
  uint64_t v23;
  std::vector<unsigned int>::size_type v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  std::vector<unsigned int> v29;
  std::vector<unsigned int>::value_type __x[2];
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  REGeomModelDescriptorSetName();
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = -1;
  v6 = *a3;
  if (a3[1] != *a3)
  {
    v7 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__x, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a4 + 16 * v7));
      v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8 * v7);
      v9 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v8);
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v8);
      Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 28) & 0xFFFFFFFFFFFFFFF8)
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)__x))
      {
        if ((v31 & 4) != 0)
          v14 = (*(uint64_t (**)(std::vector<unsigned int>::value_type *))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(__x);
        else
          v14 = *(_QWORD *)__x;
        std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::map[abi:ne180100]((uint64_t *)&v29, v14);
        realityio::MeshDescriptorAction::getMaterialGroupInfo((void **)&v25, &v28, &v29);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v29, (_QWORD *)v29.__end_);
      }
      if ((v9 & 7) != 0)
      {
        v15 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__x);
      ++v7;
      v6 = *a3;
    }
    while (v7 < (a3[1] - *a3) >> 3);
  }
  REGeomModelDescriptorClearMaterialAssignments();
  if (v25 == v26)
  {
    REGeomModelDescriptorSetMaterialAssignmentForModel();
  }
  else
  {
    FaceCount = REGeomModelDescriptorGetFaceCount();
    __x[0] = 0;
    std::vector<unsigned int>::vector(&v29, FaceCount, __x);
    v18 = v25;
    v19 = v26;
    while (v18 != v19)
    {
      v20 = v18[1];
      if (v20)
      {
        v21 = (int *)v18[5];
        begin = v29.__begin_;
        v23 = 4 * v20;
        do
        {
          v24 = *v21;
          if (v24 < FaceCount)
            begin[v24] = *(_DWORD *)v18;
          ++v21;
          v23 -= 4;
        }
        while (v23);
      }
      v18 += 6;
    }
    REGeomModelDescriptorSetMaterialAssignmentsPerFace();
    if (v29.__begin_)
    {
      v29.__end_ = v29.__begin_;
      operator delete(v29.__begin_);
    }
  }
  v29.__begin_ = (std::vector<unsigned int>::pointer)&v25;
  std::vector<realityio::MeshDescriptorAction::MaterialGroupInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
}

void sub_23003EFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  a12 = &a9;
  std::vector<realityio::MeshDescriptorAction::MaterialGroupInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void realityio::MeshDescriptorAction::operator()(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  uint64_t Name;
  __int128 v13;
  std::vector<std::string>::pointer end;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  std::string *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  pxrInternal__aapl__pxrReserved__::SdfPath *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *Data;
  unsigned int *v32;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v33;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v34;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v35;
  _QWORD *NameToken;
  unsigned int *v37;
  unsigned int v38;
  uint64_t *v39;
  unsigned int v40;
  int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t **v44;
  _QWORD *v45;
  unsigned int *v46;
  unsigned int v47;
  int v48;
  unsigned int *v49;
  unsigned int v50;
  void **v51;
  _QWORD *v52;
  unsigned int *v53;
  unsigned int v54;
  int v55;
  unsigned int *v56;
  unsigned int v57;
  void **v58;
  unint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  int IsMapperPath;
  int v70;
  _QWORD *v71;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  char *v82;
  pxrInternal__aapl__pxrReserved__::SdfPath *v83;
  uint64_t *v84;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  pxrInternal__aapl__pxrReserved__::SdfPath *v89;
  uint64_t *v90;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  size_t v97;
  _BYTE *v98;
  char *v99;
  pxrInternal__aapl__pxrReserved__::SdfPath *TargetPath;
  pxrInternal__aapl__pxrReserved__::TfToken *v101;
  uint64_t v102;
  int v103;
  const std::string::value_type *v104;
  std::string::size_type v105;
  std::string *v106;
  __int128 v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v111;
  uint64_t *v112;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v113;
  uint64_t EmptyString;
  size_t v115;
  _BYTE *v116;
  const void *v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  _QWORD *v121;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v122;
  uint64_t *v123;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v124;
  uint64_t v125;
  size_t v126;
  _BYTE *v127;
  const void *v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  __int128 *v139;
  __int128 *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  _OWORD *v144;
  uint64_t HighVertexPerPolygon;
  __int128 v146;
  uint64_t v147;
  _OWORD *v148;
  uint64_t v149;
  uint64_t VertexCount;
  uint64_t v151;
  unint64_t v152;
  int v153;
  int v154;
  pxrInternal__aapl__pxrReserved__::SdfPath *v155;
  _QWORD *v156;
  unsigned int *v157;
  unsigned int v158;
  int v159;
  unsigned int *v160;
  unsigned int v161;
  __int128 *v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _QWORD *v169;
  unsigned int *v170;
  unsigned int v171;
  int v172;
  unsigned int *v173;
  unsigned int v174;
  _OWORD *v175;
  __int128 v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  _QWORD *v180;
  unsigned int *v181;
  unsigned int v182;
  int v183;
  unsigned int *v184;
  unsigned int v185;
  __int128 *v186;
  _QWORD *v187;
  unsigned int *v188;
  unsigned int v189;
  int v190;
  unsigned int *v191;
  unsigned int v192;
  void **v193;
  const pxrInternal__aapl__pxrReserved__::TfToken *v194;
  _BOOL4 isMetaData;
  unsigned int *v196;
  unsigned int v197;
  unsigned int *v198;
  unsigned int v199;
  uint64_t *v200;
  const pxrInternal__aapl__pxrReserved__::TfToken *v201;
  _BOOL4 v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int *v205;
  unsigned int v206;
  uint64_t *v207;
  const pxrInternal__aapl__pxrReserved__::TfToken *v208;
  _BOOL4 v209;
  unsigned int *v210;
  unsigned int v211;
  unsigned int *v212;
  unsigned int v213;
  _QWORD *v214;
  uint64_t *v215;
  const pxrInternal__aapl__pxrReserved__::TfToken *v216;
  _BOOL4 v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int *v220;
  unsigned int v221;
  uint64_t *v222;
  int v223;
  __int128 v224;
  __int128 v225;
  unsigned int v226;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer v228;
  int v229;
  unint64_t v230;
  unsigned int *v231;
  unsigned int v232;
  unsigned int *v233;
  std::vector<unsigned int>::pointer v234;
  std::vector<unsigned int>::size_type v235;
  unsigned int v236;
  std::vector<unsigned int>::size_type v237;
  uint64_t v238;
  std::vector<unsigned int>::size_type v239;
  uint64_t v240;
  size_t v241;
  std::vector<unsigned int>::pointer v242;
  unint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  size_t v250;
  char *v251;
  uint64_t String;
  const char *v253;
  const char *v254;
  size_t v255;
  uint64_t v256;
  size_t v257;
  void *v258;
  unsigned int *v259;
  unsigned int v260;
  unsigned int *v261;
  unsigned int v262;
  pxrInternal__aapl__pxrReserved__::TfToken *AttributeIndex;
  unint64_t v264;
  char *v265;
  char *v266;
  pxrInternal__aapl__pxrReserved__::TfToken *v267;
  uint64_t v268;
  __int128 v269;
  unint64_t v270;
  __int128 v271;
  uint64_t *ValueAtPath;
  pxrInternal__aapl__pxrReserved__::VtValue *v273;
  uint64_t *v274;
  pxrInternal__aapl__pxrReserved__::VtValue *v275;
  uint64_t v276;
  unint64_t v277;
  unsigned int *v278;
  unsigned int v279;
  uint64_t v280;
  unint64_t v281;
  unsigned int *v282;
  unsigned int v283;
  uint64_t v284;
  __int128 v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  __int128 v291;
  uint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  __int128 v296;
  uint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  __int128 v302;
  char *v303;
  unint64_t *v304;
  unint64_t v305;
  unsigned int AttributeRate;
  unsigned int v307;
  int v308;
  BOOL v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unint64_t CountForAttributeRate;
  std::vector<unsigned int>::pointer v314;
  _QWORD *v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  __int128 v319;
  _QWORD *v320;
  unint64_t v321;
  uint64_t v322;
  unsigned int *v323;
  unsigned int v324;
  unsigned int *v325;
  unsigned int v326;
  char *v327;
  char *v328;
  _QWORD *v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  __int128 v333;
  unint64_t v334;
  char *v335;
  char *v336;
  uint64_t v337;
  unsigned int *v338;
  unsigned int v339;
  unsigned int *v340;
  uint64_t v341;
  __int128 v342;
  unsigned int *v343;
  unsigned int v344;
  unsigned int v345;
  _BYTE *v346;
  unint64_t v347;
  std::string *v348;
  __int128 v349;
  pxrInternal__aapl__pxrReserved__::TfToken *v350;
  uint64_t v351;
  unsigned int *v352;
  unsigned int v353;
  unsigned int *v354;
  unsigned int v355;
  uint64_t v356;
  unsigned int *v357;
  unsigned int v358;
  unsigned int *v359;
  uint64_t v360;
  unint64_t v361;
  int v362;
  _BOOL4 v363;
  unsigned int v364;
  uint64_t v365;
  unsigned int *v366;
  unsigned int v367;
  unsigned int *v368;
  unsigned int v369;
  uint64_t v370;
  unsigned int *v371;
  unsigned int v372;
  unsigned int *v373;
  unsigned int v374;
  unsigned int *v375;
  unsigned int v376;
  _QWORD *v377;
  _BYTE *v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int *v381;
  unsigned int v382;
  unsigned int *v383;
  unsigned int v384;
  unsigned int *v385;
  unsigned int v386;
  unsigned int v387;
  std::string v391;
  _QWORD **v392;
  _QWORD *v393[2];
  void *v394[3];
  uint64_t v395;
  std::vector<unsigned int> v396;
  std::vector<unsigned int> v397;
  void *v398[3];
  std::vector<unsigned int>::size_type __n[2];
  __int128 v400;
  void *__src;
  std::vector<unsigned int>::size_type v402[2];
  __int128 v403;
  void *v404;
  __int128 v405;
  __int128 v406;
  uint64_t v407;
  int v408;
  void *v409[3];
  uint64_t v410;
  char *v411;
  char *v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t *v415;
  _QWORD *v416[2];
  uint64_t v417;
  uint64_t v418;
  std::vector<std::string> v419;
  void *__dst;
  _BYTE *v421;
  uint64_t v422;
  std::vector<unsigned int> v423;
  _BYTE v424[32];
  __int128 v425;
  __int128 v426;
  uint64_t v427;
  uint64_t v428;
  _BYTE v429[4];
  int v430;
  std::vector<unsigned int>::size_type __sz[2];
  __int128 v432;
  void *v433;
  std::vector<unsigned int> v434;
  _BYTE v435[32];
  void *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  char v441[8];
  uint64_t v442;
  char v443[8];
  uint64_t v444;
  char v445[8];
  uint64_t v446;
  char v447[8];
  uint64_t v448;
  char v449[8];
  uint64_t v450;
  char v451[8];
  uint64_t v452;
  char v453[8];
  uint64_t v454;
  uint64_t v455[2];
  char v456[8];
  uint64_t v457;
  char v458[8];
  uint64_t v459;
  char v460[8];
  uint64_t v461;
  char v462[8];
  uint64_t v463;
  void *v464[2];
  void *__p[2];
  __int128 v466;
  __int128 v467;
  __int128 v468;
  _BYTE __v[48];
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  uint64_t v475;

  v475 = *MEMORY[0x24BDAC8D0];
  v464[1] = 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 && *(_QWORD *)(v6 + 200))
  {
    *(_QWORD *)v424 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 192) + 16) + 8) + 16);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v424);
    v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)v424);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)v424);
    *(_QWORD *)v424 = 0;
    a5[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy(a5, (uint64_t *)v424);
    realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(v424);
    if ((__v[24] & 7) != 0)
    {
      v8 = (unsigned int *)(*(_QWORD *)&__v[24] & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__v[16]);
    if (*(_QWORD *)&__v[8])
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&__v[8]);
    goto LABEL_671;
  }
  memset(&v419, 0, sizeof(v419));
  std::vector<std::string>::reserve(&v419, (a3[1] - *a3) >> 3);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*a3;
  v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)a3[1];
  if ((pxrInternal__aapl__pxrReserved__::SdfPath *)*a3 != v11)
  {
    do
    {
      Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(v10);
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v424, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
      }
      else
      {
        v13 = *(_OWORD *)Name;
        *(_QWORD *)&v424[16] = *(_QWORD *)(Name + 16);
        *(_OWORD *)v424 = v13;
      }
      end = v419.__end_;
      if (v419.__end_ >= v419.__end_cap_.__value_)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v419.__end_ - (char *)v419.__begin_) >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v419.__end_cap_.__value_ - (char *)v419.__begin_) >> 3) > v17)
          v17 = 0x5555555555555556 * (((char *)v419.__end_cap_.__value_ - (char *)v419.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v419.__end_cap_.__value_ - (char *)v419.__begin_) >> 3) >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v17;
        *(_QWORD *)&__v[32] = &v419.__end_cap_;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)&v419.__end_cap_, v18);
        else
          v19 = 0;
        v20 = &v19[24 * v16];
        *(_QWORD *)__v = v19;
        *(_QWORD *)&__v[8] = v20;
        *(_QWORD *)&__v[24] = &v19[24 * v18];
        v21 = *(_OWORD *)v424;
        *((_QWORD *)v20 + 2) = *(_QWORD *)&v424[16];
        *(_OWORD *)v20 = v21;
        memset(v424, 0, 24);
        *(_QWORD *)&__v[16] = v20 + 24;
        std::vector<std::string>::__swap_out_circular_buffer(&v419, (std::__split_buffer<std::string> *)__v);
        v22 = v419.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__v);
        v419.__end_ = v22;
        if ((v424[23] & 0x80000000) != 0)
          operator delete(*(void **)v424);
      }
      else
      {
        v15 = *(_OWORD *)v424;
        v419.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)&v424[16];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
        v419.__end_ = end + 1;
      }
      v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
    }
    while (v10 != v11);
  }
  v463 = 0;
  v461 = 0;
  v459 = 0;
  MEMORY[0x2348B274C](&v418, "primvars:normals");
  MEMORY[0x2348B274C](&v417, "primvars:normals:indices");
  v457 = 0;
  v455[1] = 0;
  v454 = 0;
  v452 = 0;
  v450 = 0;
  v416[0] = 0;
  v416[1] = 0;
  v414 = 0;
  v415 = (uint64_t *)v416;
  v411 = 0;
  v412 = 0;
  v413 = 0;
  v410 = 0;
  v448 = 0;
  v446 = 0;
  v444 = 0;
  v442 = 0;
  memset(v409, 0, sizeof(v409));
  v408 = -1;
  v23 = *a3;
  if (a3[1] != *a3)
  {
    v24 = 0;
    v25 = 0;
    v26 = (unint64_t *)MEMORY[0x24BEE7FE8];
    do
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a4 + 16 * v24));
      v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 8 * v24);
      v28 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v27);
      if ((v28 & 7) != 0)
      {
        v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 2, v29));
        if ((v30 & 1) == 0)
          v28 &= 0xFFFFFFFFFFFFFFF8;
      }
      Data = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v26);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v26);
      v32 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      if ((v28 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 102) & 0xFFFFFFFFFFFFFFF8))
      {
        v39 = (uint64_t *)v462;
      }
      else
      {
        v33 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v26);
        if (!v33)
          v33 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v26);
        if (v32 == (unsigned int *)(*((_QWORD *)v33 + 88) & 0xFFFFFFFFFFFFFFF8))
        {
          v39 = (uint64_t *)v460;
        }
        else
        {
          v34 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v26);
          if (!v34)
            v34 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v26);
          if (v32 == (unsigned int *)(*((_QWORD *)v34 + 43) & 0xFFFFFFFFFFFFFFF8))
          {
            v39 = (uint64_t *)v451;
          }
          else
          {
            v35 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v26);
            if (!v35)
              v35 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v26);
            if (v32 == (unsigned int *)(*((_QWORD *)v35 + 42) & 0xFFFFFFFFFFFFFFF8))
            {
              v39 = (uint64_t *)v449;
            }
            else
            {
              NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 8 * v24));
              MEMORY[0x2348B274C](__v, "__materialIndexInfo");
              v37 = (unsigned int *)(*(_QWORD *)__v & 0xFFFFFFFFFFFFFFF8);
              if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)__v & 0xFFFFFFFFFFFFFFF8))
              {
                v41 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
                if ((__v[0] & 7) != 0)
                {
                  v42 = (unsigned int *)(*(_QWORD *)__v & 0xFFFFFFFFFFFFFFF8);
                  do
                    v43 = __ldxr(v42);
                  while (__stlxr(v43 - 2, v42));
                }
                if (v41)
                {
                  if (((uint64_t)__p[1] & 4) != 0)
                    v44 = (uint64_t **)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
                                                                         + 168))(__p);
                  else
                    v44 = (uint64_t **)__p[0];
                  if (&v415 != v44)
                    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>(&v415, *v44, v44 + 1);
                  realityio::MeshDescriptorAction::getMaterialGroupInfo(v409, &v408, &v415);
                  goto LABEL_54;
                }
              }
              else if ((__v[0] & 7) != 0)
              {
                do
                  v38 = __ldxr(v37);
                while (__stlxr(v38 - 2, v37));
              }
              v45 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v27);
              MEMORY[0x2348B274C](__v, "__defaultUV");
              v46 = (unsigned int *)(*(_QWORD *)__v & 0xFFFFFFFFFFFFFFF8);
              if ((*v45 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)__v & 0xFFFFFFFFFFFFFFF8))
              {
                v48 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
                if ((__v[0] & 7) != 0)
                {
                  v49 = (unsigned int *)(*(_QWORD *)__v & 0xFFFFFFFFFFFFFFF8);
                  do
                    v50 = __ldxr(v49);
                  while (__stlxr(v50 - 2, v49));
                }
                if (v48)
                {
                  if (((uint64_t)__p[1] & 4) != 0)
                    v51 = (void **)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
                                                                      + 168))(__p);
                  else
                    v51 = __p;
                  pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v410, v51);
                  goto LABEL_54;
                }
              }
              else if ((__v[0] & 7) != 0)
              {
                do
                  v47 = __ldxr(v46);
                while (__stlxr(v47 - 2, v46));
              }
              v52 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v27);
              MEMORY[0x2348B274C](__v, "orientation");
              v53 = (unsigned int *)(*(_QWORD *)__v & 0xFFFFFFFFFFFFFFF8);
              if ((*v52 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)__v & 0xFFFFFFFFFFFFFFF8))
              {
                v55 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
                if ((__v[0] & 7) != 0)
                {
                  v56 = (unsigned int *)(*(_QWORD *)__v & 0xFFFFFFFFFFFFFFF8);
                  do
                    v57 = __ldxr(v56);
                  while (__stlxr(v57 - 2, v56));
                }
                if (v55)
                {
                  if (((uint64_t)__p[1] & 4) != 0)
                    v58 = (void **)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
                                                                      + 168))(__p);
                  else
                    v58 = __p;
                  v59 = (unint64_t)*v58;
                  if (((unint64_t)*v58 & 7) != 0)
                  {
                    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v61 = __ldxr(v60);
                    while (__stxr(v61 + 2, v60));
                    if ((v61 & 1) == 0)
                      v59 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  MEMORY[0x2348B274C](__v, "leftHanded");
                  v62 = (unsigned int *)(*(_QWORD *)__v & 0xFFFFFFFFFFFFFFF8);
                  if ((__v[0] & 7) != 0)
                  {
                    do
                      v63 = __ldxr(v62);
                    while (__stlxr(v63 - 2, v62));
                  }
                  v64 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
                  if ((unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8) == v62)
                    v25 = 1;
                  else
                    v25 = v25;
                  if ((v59 & 7) != 0)
                  {
                    do
                      v65 = __ldxr(v64);
                    while (__stlxr(v65 - 2, v64));
                  }
                  goto LABEL_54;
                }
              }
              else if ((__v[0] & 7) != 0)
              {
                do
                  v54 = __ldxr(v53);
                while (__stlxr(v54 - 2, v53));
              }
              v66 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(v27);
              v67 = *(unsigned __int8 *)(v66 + 23);
              v68 = (char)v67;
              if ((v67 & 0x80u) != 0)
                v67 = *(_QWORD *)(v66 + 8);
              if (v67 < 8)
                goto LABEL_107;
              if (v68 < 0)
                v66 = *(_QWORD *)v66;
              if (!strncmp((const char *)v66, "primvars", 8uLL))
              {
                v73 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(v27);
                v74 = *(unsigned __int8 *)(v73 + 23);
                v75 = (char)v74;
                if ((v74 & 0x80u) != 0)
                  v74 = *(_QWORD *)(v73 + 8);
                if (v74 < 8
                  || (v75 >= 0 ? (v76 = v73) : (v76 = *(_QWORD *)v73), strcmp((const char *)(v74 + v76 - 8), ":indices")))
                {
                  v77 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v27);
                  v78 = v412;
                  if ((unint64_t)v412 >= v413)
                  {
                    v82 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v411, v77);
                  }
                  else
                  {
                    v79 = *v77;
                    *(_QWORD *)v412 = *v77;
                    if ((v79 & 7) != 0)
                    {
                      v80 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v81 = __ldxr(v80);
                      while (__stxr(v81 + 2, v80));
                      if ((v81 & 1) == 0)
                        *(_QWORD *)v78 &= 0xFFFFFFFFFFFFFFF8;
                    }
                    v82 = v78 + 8;
                  }
                  v412 = v82;
                }
                pxrInternal__aapl__pxrReserved__::SdfPath::GetName(v27);
                v109 = (_QWORD *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]();
                pxrInternal__aapl__pxrReserved__::VtValue::operator=(v109, __p);
                v110 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v27);
                v111 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v26);
                if (!v111)
                  v111 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v26);
                if ((*v110 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v111 + 106) & 0xFFFFFFFFFFFFFFF8))
                {
                  v39 = (uint64_t *)v447;
                }
                else
                {
                  v112 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v27);
                  v113 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v26);
                  if (!v113)
                    v113 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v26);
                  if ((*((_QWORD *)v113 + 106) & 0xFFFFFFFFFFFFFFF8) != 0)
                    EmptyString = (*((_QWORD *)v113 + 106) & 0xFFFFFFFFFFFFFFF8) + 16;
                  else
                    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v113);
                  if (*(char *)(EmptyString + 23) >= 0)
                    v115 = *(unsigned __int8 *)(EmptyString + 23);
                  else
                    v115 = *(_QWORD *)(EmptyString + 8);
                  std::string::basic_string[abi:ne180100]((uint64_t)__v, v115 + 8);
                  v387 = v25;
                  if (__v[23] >= 0)
                    v116 = __v;
                  else
                    v116 = *(_BYTE **)__v;
                  if (v115)
                  {
                    if (*(char *)(EmptyString + 23) >= 0)
                      v117 = (const void *)EmptyString;
                    else
                      v117 = *(const void **)EmptyString;
                    memmove(v116, v117, v115);
                  }
                  strcpy(&v116[v115], ":indices");
                  MEMORY[0x2348B2764](v424, __v);
                  v118 = *v112;
                  v119 = (unsigned int *)(*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8);
                  v25 = v387;
                  if ((v424[0] & 7) != 0)
                  {
                    do
                      v120 = __ldxr(v119);
                    while (__stlxr(v120 - 2, v119));
                  }
                  if ((__v[23] & 0x80000000) != 0)
                    operator delete(*(void **)__v);
                  if ((unsigned int *)(v118 & 0xFFFFFFFFFFFFFFF8) == v119)
                  {
                    v39 = (uint64_t *)v445;
                  }
                  else
                  {
                    v121 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v27);
                    v122 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v26);
                    if (!v122)
                      v122 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v26);
                    if ((*v121 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v122 + 107) & 0xFFFFFFFFFFFFFFF8))
                    {
                      v39 = (uint64_t *)v443;
                    }
                    else
                    {
                      v123 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v27);
                      v124 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v26);
                      if (!v124)
                        v124 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v26);
                      if ((*((_QWORD *)v124 + 107) & 0xFFFFFFFFFFFFFFF8) != 0)
                        v125 = (*((_QWORD *)v124 + 107) & 0xFFFFFFFFFFFFFFF8) + 16;
                      else
                        v125 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v124);
                      if (*(char *)(v125 + 23) >= 0)
                        v126 = *(unsigned __int8 *)(v125 + 23);
                      else
                        v126 = *(_QWORD *)(v125 + 8);
                      std::string::basic_string[abi:ne180100]((uint64_t)__v, v126 + 8);
                      if (__v[23] >= 0)
                        v127 = __v;
                      else
                        v127 = *(_BYTE **)__v;
                      if (v126)
                      {
                        if (*(char *)(v125 + 23) >= 0)
                          v128 = (const void *)v125;
                        else
                          v128 = *(const void **)v125;
                        memmove(v127, v128, v126);
                      }
                      strcpy(&v127[v126], ":indices");
                      MEMORY[0x2348B2764](v424, __v);
                      v129 = *v123;
                      v130 = (unsigned int *)(*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8);
                      v25 = v387;
                      if ((v424[0] & 7) != 0)
                      {
                        do
                          v131 = __ldxr(v130);
                        while (__stlxr(v131 - 2, v130));
                      }
                      if ((__v[23] & 0x80000000) != 0)
                        operator delete(*(void **)__v);
                      if ((unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8) == v130)
                      {
                        v39 = (uint64_t *)v441;
                      }
                      else
                      {
                        v132 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v27);
                        if ((*v132 & 0xFFFFFFFFFFFFFFF8) == (v418 & 0xFFFFFFFFFFFFFFF8))
                        {
                          v39 = (uint64_t *)v456;
                        }
                        else
                        {
                          v133 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v27);
                          if ((*v133 & 0xFFFFFFFFFFFFFFF8) != (v417 & 0xFFFFFFFFFFFFFFF8))
                            goto LABEL_54;
                          v39 = v455;
                        }
                      }
                    }
                  }
                }
              }
              else
              {
LABEL_107:
                IsMapperPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(v27);
                if (__p[1])
                  v70 = IsMapperPath;
                else
                  v70 = 0;
                if (v70 != 1)
                  goto LABEL_54;
                pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v27);
                v71 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)__v);
                v72 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v26);
                if (!v72)
                  v72 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v26);
                if ((*v71 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v72 + 88) & 0xFFFFFFFFFFFFFFF8))
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__v);
LABEL_132:
                  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v27);
                  v88 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)__v);
                  if ((*v88 & 0xFFFFFFFFFFFFFFF8) != (v418 & 0xFFFFFFFFFFFFFFF8))
                  {
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__v);
LABEL_137:
                    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v27);
                    v94 = v25;
                    v95 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)v435);
                    v96 = (char *)v95;
                    if (*(char *)(v95 + 23) >= 0)
                      v97 = *(unsigned __int8 *)(v95 + 23);
                    else
                      v97 = *(_QWORD *)(v95 + 8);
                    std::string::basic_string[abi:ne180100]((uint64_t)v424, v97 + 3);
                    if (v424[23] >= 0)
                      v98 = v424;
                    else
                      v98 = *(_BYTE **)v424;
                    if (v97)
                    {
                      if (v96[23] >= 0)
                        v99 = v96;
                      else
                        v99 = *(char **)v96;
                      memmove(v98, v99, v97);
                    }
                    *(_DWORD *)&v98[v97] = 6250298;
                    TargetPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(v27);
                    v25 = v94;
                    v101 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(TargetPath);
                    if ((*(_QWORD *)v101 & 0xFFFFFFFFFFFFFFF8) != 0)
                      v102 = (*(_QWORD *)v101 & 0xFFFFFFFFFFFFFFF8) + 16;
                    else
                      v102 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v101);
                    v103 = *(char *)(v102 + 23);
                    if (v103 >= 0)
                      v104 = (const std::string::value_type *)v102;
                    else
                      v104 = *(const std::string::value_type **)v102;
                    if (v103 >= 0)
                      v105 = *(unsigned __int8 *)(v102 + 23);
                    else
                      v105 = *(_QWORD *)(v102 + 8);
                    v106 = std::string::append((std::string *)v424, v104, v105);
                    v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
                    *(_QWORD *)&__v[16] = *((_QWORD *)&v106->__r_.__value_.__l + 2);
                    *(_OWORD *)__v = v107;
                    v106->__r_.__value_.__l.__size_ = 0;
                    v106->__r_.__value_.__r.__words[2] = 0;
                    v106->__r_.__value_.__r.__words[0] = 0;
                    v108 = (_QWORD *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]();
                    pxrInternal__aapl__pxrReserved__::VtValue::operator=(v108, __p);
                    if ((__v[23] & 0x80000000) != 0)
                      operator delete(*(void **)__v);
                    if ((v424[23] & 0x80000000) != 0)
                      operator delete(*(void **)v424);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v435);
                    goto LABEL_54;
                  }
                  v89 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(v27);
                  v90 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v89);
                  v91 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v26);
                  if (!v91)
                    v91 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v26);
                  v92 = *v90;
                  v93 = *((_QWORD *)v91 + 61);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__v);
                  if ((v92 & 0xFFFFFFFFFFFFFFF8) != (v93 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_137;
                  v39 = (uint64_t *)v453;
                  goto LABEL_53;
                }
                v83 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(v27);
                v84 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v83);
                v85 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v26);
                if (!v85)
                  v85 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v26);
                v86 = *v84;
                v87 = *((_QWORD *)v85 + 61);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__v);
                if ((v86 & 0xFFFFFFFFFFFFFFF8) != (v87 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_132;
                v39 = (uint64_t *)v458;
              }
            }
          }
        }
      }
LABEL_53:
      pxrInternal__aapl__pxrReserved__::VtValue::operator=(v39, __p);
LABEL_54:
      if ((v28 & 7) != 0)
      {
        do
          v40 = __ldxr(v32);
        while (__stlxr(v40 - 2, v32));
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
      ++v24;
      v23 = *a3;
    }
    while (v24 < (a3[1] - *a3) >> 3);
  }
  if (!v463)
  {
    std::string::basic_string[abi:ne180100]<0>(__v, "No points found");
    ExecFault::stringValue(1, (const std::string *)__v, a5);
    if ((__v[23] & 0x80000000) != 0)
      operator delete(*(void **)__v);
    goto LABEL_661;
  }
  v407 = 0;
  v405 = 0u;
  v406 = 0u;
  v404 = 0;
  *(_OWORD *)v402 = 0u;
  v403 = 0u;
  __src = 0;
  *(_OWORD *)__n = 0u;
  v400 = 0u;
  v134 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v462);
  if (&v405 != (__int128 *)v134)
  {
    v135 = *(_OWORD *)(v134 + 16);
    *(_OWORD *)__v = *(_OWORD *)v134;
    *(_OWORD *)&__v[16] = v135;
    v136 = *(_QWORD *)(v134 + 32);
    *(_QWORD *)&__v[32] = v136;
    if (v136)
    {
      v137 = (unint64_t *)(v136 - 16);
      if (*(_QWORD *)&__v[24])
        v137 = *(unint64_t **)&__v[24];
      do
        v138 = __ldxr(v137);
      while (__stxr(v138 + 1, v137));
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v405);
    v405 = *(_OWORD *)__v;
    v406 = *(_OWORD *)&__v[16];
    memset(__v, 0, 40);
    v407 = *(_QWORD *)&__v[32];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__v);
  }
  v139 = (__int128 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v451);
  pxrInternal__aapl__pxrReserved__::VtArray<int>::operator=((uint64_t)v402, v139);
  v140 = (__int128 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v449);
  pxrInternal__aapl__pxrReserved__::VtArray<int>::operator=((uint64_t)__n, v140);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(v398, v405);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v405);
  v141 = v407;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v405);
  v143 = v407 + 12 * v405;
  if (v141 != v143)
  {
    v144 = v398[0];
    do
    {
      *(_QWORD *)&v142 = *(_QWORD *)v141;
      DWORD2(v142) = *(_DWORD *)(v141 + 8);
      *v144++ = v142;
      v141 += 12;
    }
    while (v141 != v143);
  }
  std::vector<unsigned int>::vector(&v397, __n[0]);
  if (__n[0])
    memmove(v397.__begin_, __src, 4 * __n[0]);
  std::vector<unsigned int>::vector(&v396, v402[0]);
  if (v402[0])
    memmove(v396.__begin_, v404, 4 * v402[0]);
  v395 = 0;
  HighVertexPerPolygon = REGeomModelDescriptorCreateHighVertexPerPolygon();
  if (HighVertexPerPolygon)
  {
    REGeomModelDescriptorSetWindingOrder();
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)__v);
    REGeomModelDescriptorSetName();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__v);
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(v394, v405);
    if ((_QWORD)v405)
    {
      v147 = v407;
      v148 = v394[0];
      v149 = 12 * v405;
      do
      {
        *(_QWORD *)&v146 = *(_QWORD *)v147;
        DWORD2(v146) = *(_DWORD *)(v147 + 8);
        *v148++ = v146;
        v147 += 12;
        v149 -= 12;
      }
      while (v149);
    }
    VertexCount = REGeomModelDescriptorGetVertexCount();
    MEMORY[0x2348B0B08](HighVertexPerPolygon, "vertexPosition", 1, VertexCount, v394[0]);
    REGeomModelDescriptorAddAttributeAlias();
    if (v461)
    {
      handleNormals(HighVertexPerPolygon, (pxrInternal__aapl__pxrReserved__::VtValue *)v460, (pxrInternal__aapl__pxrReserved__::VtValue *)v458, 0);
      REGeomModelDescriptorAddAttributeAlias();
    }
    v393[0] = 0;
    v393[1] = 0;
    v392 = v393;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__v, 1.0);
    v436 = 0;
    memset(v435, 0, sizeof(v435));
    v433 = 0;
    *(_OWORD *)__sz = 0u;
    v432 = 0u;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v428 = 0;
    v427 = 0;
    v151 = *a3;
    if (a3[1] != *a3)
    {
      v152 = 0;
      v153 = 1;
      v154 = 1;
      while (1)
      {
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a4 + 16 * v152));
        v155 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v151 + 8 * v152);
        v156 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v155);
        MEMORY[0x2348B274C](v424, "primvars:skel:geomBindTransform");
        v157 = (unsigned int *)(*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8);
        if ((*v156 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8))
        {
          v159 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          if ((v424[0] & 7) != 0)
          {
            v160 = (unsigned int *)(*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8);
            do
              v161 = __ldxr(v160);
            while (__stlxr(v161 - 2, v160));
          }
          if (v159)
          {
            if (((uint64_t)__p[1] & 4) != 0)
              v162 = (__int128 *)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
                                                                    + 168))(__p);
            else
              v162 = (__int128 *)__p[0];
            v163 = *v162;
            v164 = v162[1];
            v165 = v162[3];
            *(_OWORD *)&__v[32] = v162[2];
            v470 = v165;
            *(_OWORD *)__v = v163;
            *(_OWORD *)&__v[16] = v164;
            v166 = v162[4];
            v167 = v162[5];
            v168 = v162[7];
            v473 = v162[6];
            v474 = v168;
            v471 = v166;
            v472 = v167;
            goto LABEL_329;
          }
        }
        else if ((v424[0] & 7) != 0)
        {
          do
            v158 = __ldxr(v157);
          while (__stlxr(v158 - 2, v157));
        }
        v169 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v155);
        MEMORY[0x2348B274C](v424, "primvars:skel:jointWeights");
        v170 = (unsigned int *)(*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8);
        if ((*v169 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8))
        {
          v172 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          if ((v424[0] & 7) != 0)
          {
            v173 = (unsigned int *)(*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8);
            do
              v174 = __ldxr(v173);
            while (__stlxr(v174 - 2, v173));
          }
          if (v172)
          {
            if (((uint64_t)__p[1] & 4) != 0)
              v175 = (_OWORD *)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
                                                                  + 168))(__p);
            else
              v175 = __p[0];
            if (v435 != (_BYTE *)v175)
            {
              v176 = v175[1];
              *(_OWORD *)v424 = *v175;
              *(_OWORD *)&v424[16] = v176;
              v177 = *((_QWORD *)v175 + 4);
              *(_QWORD *)&v425 = v177;
              if (v177)
              {
                v178 = (unint64_t *)(v177 - 16);
                if (*(_QWORD *)&v424[24])
                  v178 = *(unint64_t **)&v424[24];
                do
                  v179 = __ldxr(v178);
                while (__stxr(v179 + 1, v178));
              }
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v435);
              *(_OWORD *)v435 = *(_OWORD *)v424;
              *(_OWORD *)&v435[16] = *(_OWORD *)&v424[16];
              memset(v424, 0, sizeof(v424));
              v436 = (void *)v425;
              *(_QWORD *)&v425 = 0;
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v424);
            }
            goto LABEL_329;
          }
        }
        else if ((v424[0] & 7) != 0)
        {
          do
            v171 = __ldxr(v170);
          while (__stlxr(v171 - 2, v170));
        }
        v180 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v155);
        MEMORY[0x2348B274C](v424, "primvars:skel:jointIndices");
        v181 = (unsigned int *)(*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8);
        if ((*v180 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8))
        {
          v183 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          if ((v424[0] & 7) != 0)
          {
            v184 = (unsigned int *)(*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8);
            do
              v185 = __ldxr(v184);
            while (__stlxr(v185 - 2, v184));
          }
          if (v183)
          {
            if (((uint64_t)__p[1] & 4) != 0)
              v186 = (__int128 *)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
                                                                    + 168))(__p);
            else
              v186 = (__int128 *)__p[0];
            pxrInternal__aapl__pxrReserved__::VtArray<int>::operator=((uint64_t)__sz, v186);
            goto LABEL_329;
          }
        }
        else if ((v424[0] & 7) != 0)
        {
          do
            v182 = __ldxr(v181);
          while (__stlxr(v182 - 2, v181));
        }
        v187 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v155);
        MEMORY[0x2348B274C](v424, "skel:skeleton");
        v188 = (unsigned int *)(*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8);
        if ((*v187 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8))
        {
          v190 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          if ((v424[0] & 7) != 0)
          {
            v191 = (unsigned int *)(*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8);
            do
              v192 = __ldxr(v191);
            while (__stlxr(v192 - 2, v191));
          }
          if (v190)
          {
            if (((uint64_t)__p[1] & 4) != 0)
              v193 = (void **)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
                                                                 + 168))(__p);
            else
              v193 = __p;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v429, v193);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v430, (_DWORD *)v193 + 1);
LABEL_329:
            v222 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v155);
            std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v392, v222, v222);
            goto LABEL_330;
          }
        }
        else if ((v424[0] & 7) != 0)
        {
          do
            v189 = __ldxr(v188);
          while (__stlxr(v189 - 2, v188));
        }
        MEMORY[0x2348B274C](v424, "primvars:skel:jointWeights");
        MEMORY[0x2348B274C](&v434, "elementSize");
        isMetaData = realityio::isMetaData(v155, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v424, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v434, v194);
        if (((uint64_t)v434.__begin_ & 7) != 0)
        {
          v196 = (unsigned int *)((unint64_t)v434.__begin_ & 0xFFFFFFFFFFFFFFF8);
          do
            v197 = __ldxr(v196);
          while (__stlxr(v197 - 2, v196));
        }
        if ((v424[0] & 7) != 0)
        {
          v198 = (unsigned int *)(*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8);
          do
            v199 = __ldxr(v198);
          while (__stlxr(v199 - 2, v198));
        }
        if (isMetaData)
        {
          v153 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          v200 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v155);
          std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v392, v200, v200);
        }
        else
        {
          MEMORY[0x2348B274C](v424, "primvars:skel:jointIndices");
          MEMORY[0x2348B274C](&v434, "elementSize");
          v202 = realityio::isMetaData(v155, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v424, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v434, v201);
          if (((uint64_t)v434.__begin_ & 7) != 0)
          {
            v203 = (unsigned int *)((unint64_t)v434.__begin_ & 0xFFFFFFFFFFFFFFF8);
            do
              v204 = __ldxr(v203);
            while (__stlxr(v204 - 2, v203));
          }
          if ((v424[0] & 7) != 0)
          {
            v205 = (unsigned int *)(*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8);
            do
              v206 = __ldxr(v205);
            while (__stlxr(v206 - 2, v205));
          }
          if (!v202)
          {
            MEMORY[0x2348B274C](v424, "primvars:skel:jointIndices");
            MEMORY[0x2348B274C](&v434, "interpolation");
            v209 = realityio::isMetaData(v155, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v424, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v434, v208);
            if (((uint64_t)v434.__begin_ & 7) != 0)
            {
              v210 = (unsigned int *)((unint64_t)v434.__begin_ & 0xFFFFFFFFFFFFFFF8);
              do
                v211 = __ldxr(v210);
              while (__stlxr(v211 - 2, v210));
            }
            if ((v424[0] & 7) != 0)
            {
              v212 = (unsigned int *)(*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8);
              do
                v213 = __ldxr(v212);
              while (__stlxr(v213 - 2, v212));
            }
            if (v209)
            {
              v214 = (_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
              v215 = &v428;
            }
            else
            {
              MEMORY[0x2348B274C](v424, "primvars:skel:jointWeights");
              MEMORY[0x2348B274C](&v434, "interpolation");
              v217 = realityio::isMetaData(v155, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v424, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v434, v216);
              if (((uint64_t)v434.__begin_ & 7) != 0)
              {
                v218 = (unsigned int *)((unint64_t)v434.__begin_ & 0xFFFFFFFFFFFFFFF8);
                do
                  v219 = __ldxr(v218);
                while (__stlxr(v219 - 2, v218));
              }
              if ((v424[0] & 7) != 0)
              {
                v220 = (unsigned int *)(*(_QWORD *)v424 & 0xFFFFFFFFFFFFFFF8);
                do
                  v221 = __ldxr(v220);
                while (__stlxr(v221 - 2, v220));
              }
              if (!v217)
                goto LABEL_330;
              v214 = (_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
              v215 = &v427;
            }
            pxrInternal__aapl__pxrReserved__::TfToken::operator=(v215, v214);
            goto LABEL_329;
          }
          v154 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          v207 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v155);
          std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v392, v207, v207);
        }
LABEL_330:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
        ++v152;
        v151 = *a3;
        if (v152 >= (a3[1] - *a3) >> 3)
          goto LABEL_340;
      }
    }
    v154 = 1;
    v153 = 1;
LABEL_340:
    if (v154 == v153)
      v223 = v154;
    else
      v223 = 1;
    v224 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    *(_OWORD *)v424 = *MEMORY[0x24BDAEE00];
    *(_OWORD *)&v424[16] = v224;
    v225 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    v425 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
    v426 = v225;
    memset(&v434, 0, sizeof(v434));
    memset(&v423, 0, sizeof(v423));
    __dst = 0;
    v421 = 0;
    v422 = 0;
    MEMORY[0x2348B199C](__p, __v);
    *(_OWORD *)v424 = *(_OWORD *)__p;
    *(_OWORD *)&v424[16] = v466;
    v425 = v467;
    v426 = v468;
    v226 = REGeomModelDescriptorGetVertexCount();
    std::vector<int>::resize(&v434, v226);
    begin = v434.__begin_;
    v228 = v434.__end_;
    if (v434.__begin_ != v434.__end_)
    {
      v229 = v223;
      do
      {
        *begin++ = v229;
        v229 += v223;
      }
      while (begin != v228);
    }
    MEMORY[0x2348B274C](__p, "constant");
    v230 = v428 & 0xFFFFFFFFFFFFFFF8;
    v231 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    if (((uint64_t)__p[0] & 7) != 0)
    {
      do
        v232 = __ldxr(v231);
      while (__stlxr(v232 - 2, v231));
    }
    if ((unsigned int *)v230 == v231)
    {
      v237 = v226 * v154;
      std::vector<int>::resize(&v423, v237);
      if ((_DWORD)v237)
      {
        v238 = 0;
        v239 = 0;
        v240 = v154;
        v241 = 4 * v154;
        do
        {
          v242 = v423.__begin_;
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
          memcpy((char *)v242 + v238, v433, v241);
          v239 += v240;
          v238 += v241;
        }
        while (v239 < v237);
      }
    }
    else
    {
      std::vector<int>::resize(&v423, __sz[0]);
      if (__sz[0])
      {
        v233 = (unsigned int *)v433;
        v234 = v423.__begin_;
        v235 = 4 * __sz[0];
        do
        {
          v236 = *v233++;
          *v234++ = v236;
          v235 -= 4;
        }
        while (v235);
      }
    }
    MEMORY[0x2348B274C](__p, "constant");
    v243 = v427 & 0xFFFFFFFFFFFFFFF8;
    v244 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    if (((uint64_t)__p[0] & 7) != 0)
    {
      do
        v245 = __ldxr(v244);
      while (__stlxr(v245 - 2, v244));
    }
    if ((unsigned int *)v243 == v244)
    {
      v246 = v226 * v153;
      std::vector<float>::resize((uint64_t)&__dst, v246);
      if ((_DWORD)v246)
      {
        v247 = 0;
        v248 = 0;
        v249 = v153;
        v250 = 4 * v153;
        do
        {
          v251 = (char *)__dst;
          pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v435);
          memcpy(&v251[v247], v436, v250);
          v248 += v249;
          v247 += v250;
        }
        while (v248 < v246);
      }
    }
    else
    {
      std::vector<float>::resize((uint64_t)&__dst, *(unint64_t *)v435);
      if (*(_QWORD *)v435)
        memmove(__dst, v436, 4 * *(_QWORD *)v435);
    }
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v429);
    if (*(char *)(String + 23) >= 0)
      v253 = (const char *)String;
    else
      v253 = *(const char **)String;
    if (v253)
      v254 = v253;
    else
      v254 = "";
    v255 = strlen(v254);
    v256 = (v255 >> 1) + 1;
    if (v256 < 0)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v257 = v255;
    v258 = operator new(2 * v256);
    bzero(v258, (v257 & 0xFFFFFFFFFFFFFFFELL) + 2);
    memcpy(v258, v254, v257);
    if ((MEMORY[0x2348B0AD8](HighVertexPerPolygon, "skeletonPath", 4, v256, v258) & 1) != 0
      && MEMORY[0x2348B0B14](HighVertexPerPolygon, "skinnedAnimationGeometryBindTransform", 4, 4, v424)&& MEMORY[0x2348B0AB4](HighVertexPerPolygon, "skinnedAnimationWeights", 4, (unint64_t)(v421 - (_BYTE *)__dst) >> 2)&& MEMORY[0x2348B0AC0](HighVertexPerPolygon, "skinnedAnimationJointIndices", 4, (unint64_t)((char *)v423.__end_ - (char *)v423.__begin_) >> 2))
    {
      MEMORY[0x2348B0AC0](HighVertexPerPolygon, "skinnedAnimationInfluenceEndIndices", 4, (unint64_t)((char *)v434.__end_ - (char *)v434.__begin_) >> 2);
    }
    operator delete(v258);
    if (__dst)
    {
      v421 = __dst;
      operator delete(__dst);
    }
    if (v423.__begin_)
    {
      v423.__end_ = v423.__begin_;
      operator delete(v423.__begin_);
    }
    if (v434.__begin_)
    {
      v434.__end_ = v434.__begin_;
      operator delete(v434.__begin_);
    }
    if ((v427 & 7) != 0)
    {
      v259 = (unsigned int *)(v427 & 0xFFFFFFFFFFFFFFF8);
      do
        v260 = __ldxr(v259);
      while (__stlxr(v260 - 2, v259));
    }
    if ((v428 & 7) != 0)
    {
      v261 = (unsigned int *)(v428 & 0xFFFFFFFFFFFFFFF8);
      do
        v262 = __ldxr(v261);
      while (__stlxr(v262 - 2, v261));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v429);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v435);
    if (v410)
    {
      if ((v410 & 0xFFFFFFFFFFFFFFF8) != 0)
        v264 = (v410 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v264 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AttributeIndex);
      std::string::basic_string[abi:ne180100]<0>(__v, "vertexUV");
      addPrimvar((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v414, v264, (uint64_t)__v, HighVertexPerPolygon);
      if ((__v[23] & 0x80000000) != 0)
        operator delete(*(void **)__v);
      std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v392, &v410, &v410);
      AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)REGeomModelDescriptorAddAttributeAlias();
    }
    v265 = v411;
    v266 = v412;
    if (v411 != v412)
    {
      while (1)
      {
        v267 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::operator==();
        if ((_DWORD)v267)
          break;
        AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::operator==();
        if ((_DWORD)AttributeIndex)
        {
          if ((*(_QWORD *)v265 & 0xFFFFFFFFFFFFFFF8) != 0)
            v268 = (*(_QWORD *)v265 & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v268 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AttributeIndex);
          if (*(char *)(v268 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__v, *(const std::string::value_type **)v268, *(_QWORD *)(v268 + 8));
          }
          else
          {
            v271 = *(_OWORD *)v268;
            *(_QWORD *)&__v[16] = *(_QWORD *)(v268 + 16);
            *(_OWORD *)__v = v271;
          }
          if ((*(_QWORD *)v265 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v270 = (*(_QWORD *)v265 & 0xFFFFFFFFFFFFFFF8) + 16;
            goto LABEL_416;
          }
LABEL_415:
          v270 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v268);
LABEL_416:
          addPrimvar((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v414, v270, (uint64_t)__v, HighVertexPerPolygon);
          AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v392, v265, (uint64_t *)v265);
          if ((__v[23] & 0x80000000) != 0)
            operator delete(*(void **)__v);
        }
        v265 += 8;
        if (v265 == v266)
          goto LABEL_419;
      }
      if ((*(_QWORD *)v265 & 0xFFFFFFFFFFFFFFF8) != 0)
        v268 = (*(_QWORD *)v265 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v268 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v267);
      if (*(char *)(v268 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__v, *(const std::string::value_type **)v268, *(_QWORD *)(v268 + 8));
      }
      else
      {
        v269 = *(_OWORD *)v268;
        *(_QWORD *)&__v[16] = *(_QWORD *)(v268 + 16);
        *(_OWORD *)__v = v269;
      }
      if ((*(_QWORD *)v265 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v270 = (*(_QWORD *)v265 & 0xFFFFFFFFFFFFFFF8) + 16;
        goto LABEL_416;
      }
      goto LABEL_415;
    }
LABEL_419:
    if (!(v448 | v444))
      goto LABEL_539;
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v439, (const pxrInternal__aapl__pxrReserved__::VtValue *)v447);
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v437, (const pxrInternal__aapl__pxrReserved__::VtValue *)v443);
    if (v440)
    {
      if (!v438)
      {
LABEL_426:
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v439))
          goto LABEL_427;
LABEL_538:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v437);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v439);
LABEL_539:
        if (v457)
        {
          handleNormals(HighVertexPerPolygon, (pxrInternal__aapl__pxrReserved__::VtValue *)v456, (pxrInternal__aapl__pxrReserved__::VtValue *)v453, v455);
          REGeomModelDescriptorAddAttributeAlias();
          AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v392, &v418, &v418);
        }
        v327 = v411;
        v328 = v412;
        if (v411 == v412)
        {
          *(_OWORD *)&v424[8] = 0uLL;
          *(_QWORD *)v424 = &v424[8];
        }
        else
        {
          do
          {
            v329 = v393[0];
            if (v393[0])
            {
              v330 = *(_QWORD *)v327 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v331 = v329[4] & 0xFFFFFFFFFFFFFFF8;
                if (v330 >= v331)
                {
                  if (v331 >= v330)
                    goto LABEL_559;
                  ++v329;
                }
                v329 = (_QWORD *)*v329;
              }
              while (v329);
            }
            if ((*(_QWORD *)v327 & 0xFFFFFFFFFFFFFFF8) != 0)
              v332 = (*(_QWORD *)v327 & 0xFFFFFFFFFFFFFFF8) + 16;
            else
              v332 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AttributeIndex);
            if (*(char *)(v332 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__v, *(const std::string::value_type **)v332, *(_QWORD *)(v332 + 8));
            }
            else
            {
              v333 = *(_OWORD *)v332;
              *(_QWORD *)&__v[16] = *(_QWORD *)(v332 + 16);
              *(_OWORD *)__v = v333;
            }
            if ((*(_QWORD *)v327 & 0xFFFFFFFFFFFFFFF8) != 0)
              v334 = (*(_QWORD *)v327 & 0xFFFFFFFFFFFFFFF8) + 16;
            else
              v334 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v332);
            addPrimvar((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v414, v334, (uint64_t)__v, HighVertexPerPolygon);
            AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v392, v327, (uint64_t *)v327);
            if ((__v[23] & 0x80000000) != 0)
              operator delete(*(void **)__v);
LABEL_559:
            v327 += 8;
          }
          while (v327 != v328);
          v335 = v411;
          v336 = v412;
          *(_OWORD *)&v424[8] = 0uLL;
          *(_QWORD *)v424 = &v424[8];
          if (v411 != v412)
          {
            do
            {
              v337 = *(_QWORD *)v335;
              if ((*(_QWORD *)v335 & 7) != 0)
              {
                v338 = (unsigned int *)(v337 & 0xFFFFFFFFFFFFFFF8);
                do
                  v339 = __ldxr(v338);
                while (__stxr(v339 + 2, v338));
                if ((v339 & 1) == 0)
                  v337 &= 0xFFFFFFFFFFFFFFF8;
              }
              v340 = (unsigned int *)(v337 & 0xFFFFFFFFFFFFFFF8);
              if ((v337 & 0xFFFFFFFFFFFFFFF8) == 0)
                pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AttributeIndex);
              AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)REGeomModelDescriptorGetAttributeIndex();
              if ((_DWORD)AttributeIndex != -1)
              {
                AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)REGeomModelDescriptorGetAttributeType();
                if ((_DWORD)AttributeIndex == 6)
                {
                  if (v340)
                    v341 = (uint64_t)(v340 + 4);
                  else
                    v341 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AttributeIndex);
                  if (*(char *)(v341 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v391, *(const std::string::value_type **)v341, *(_QWORD *)(v341 + 8));
                  }
                  else
                  {
                    v342 = *(_OWORD *)v341;
                    v391.__r_.__value_.__r.__words[2] = *(_QWORD *)(v341 + 16);
                    *(_OWORD *)&v391.__r_.__value_.__l.__data_ = v342;
                  }
                  realityio::TexcoordID::TexcoordID((uint64_t)__v, (uint64_t)&v391, -1, 0);
                  AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__tree<realityio::TexcoordID>::__emplace_unique_key_args<realityio::TexcoordID,realityio::TexcoordID>((uint64_t **)v424, (realityio::TexcoordID *)__v, (uint64_t)__v);
                  if ((__v[39] & 0x80000000) != 0)
                    operator delete(*(void **)&__v[16]);
                  if ((__v[8] & 7) != 0)
                  {
                    v343 = (unsigned int *)(*(_QWORD *)&__v[8] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v344 = __ldxr(v343);
                    while (__stlxr(v344 - 2, v343));
                  }
                  if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v391.__r_.__value_.__l.__data_);
                }
              }
              if ((v337 & 7) != 0)
              {
                do
                  v345 = __ldxr(v340);
                while (__stlxr(v345 - 2, v340));
              }
              v335 += 8;
            }
            while (v335 != v336);
            v346 = *(_BYTE **)v424;
            if (*(_BYTE **)v424 != &v424[8])
            {
              v347 = 0;
              do
              {
                realityio::TexcoordID::TexcoordID((uint64_t)__v, (uint64_t)(v346 + 32));
                std::to_string((std::string *)v435, v347);
                v348 = std::string::insert((std::string *)v435, 0, "UV");
                v349 = *(_OWORD *)&v348->__r_.__value_.__l.__data_;
                *(_QWORD *)&v466 = *((_QWORD *)&v348->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v349;
                v348->__r_.__value_.__l.__size_ = 0;
                v348->__r_.__value_.__r.__words[2] = 0;
                v348->__r_.__value_.__r.__words[0] = 0;
                if ((v435[23] & 0x80000000) != 0)
                  operator delete(*(void **)v435);
                v350 = (pxrInternal__aapl__pxrReserved__::TfToken *)REGeomModelDescriptorGetAttributeIndex();
                if ((_DWORD)v350 == -1)
                {
                  v351 = *(_QWORD *)&__v[8];
                  if ((__v[8] & 7) != 0)
                  {
                    v352 = (unsigned int *)(*(_QWORD *)&__v[8] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v353 = __ldxr(v352);
                    while (__stxr(v353 + 2, v352));
                    if ((v353 & 1) == 0)
                      v351 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  v354 = (unsigned int *)(v351 & 0xFFFFFFFFFFFFFFF8);
                  v350 = (pxrInternal__aapl__pxrReserved__::TfToken *)REGeomModelDescriptorAddAttributeAlias();
                  ++v347;
                  if ((v351 & 7) != 0)
                  {
                    do
                      v355 = __ldxr(v354);
                    while (__stlxr(v355 - 2, v354));
                  }
                }
                v356 = *(_QWORD *)&__v[8];
                if ((__v[8] & 7) != 0)
                {
                  v357 = (unsigned int *)(*(_QWORD *)&__v[8] & 0xFFFFFFFFFFFFFFF8);
                  do
                    v358 = __ldxr(v357);
                  while (__stxr(v358 + 2, v357));
                  if ((v358 & 1) == 0)
                    v356 &= 0xFFFFFFFFFFFFFFF8;
                }
                v359 = (unsigned int *)(v356 & 0xFFFFFFFFFFFFFFF8);
                if ((v356 & 0xFFFFFFFFFFFFFFF8) != 0)
                  v360 = (uint64_t)(v359 + 4);
                else
                  v360 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v350);
                v361 = *(unsigned __int8 *)(v360 + 23);
                v362 = (char)v361;
                if ((v361 & 0x80u) != 0)
                  v361 = *(_QWORD *)(v360 + 8);
                if (v361 >= 9)
                {
                  if (v362 < 0)
                    v360 = *(_QWORD *)v360;
                  v360 = strncmp((const char *)v360, "primvars:", 9uLL);
                  v363 = v360 == 0;
                }
                else
                {
                  v363 = 0;
                }
                if ((v356 & 7) != 0)
                {
                  do
                    v364 = __ldxr(v359);
                  while (__stlxr(v364 - 2, v359));
                }
                if (v363)
                {
                  v365 = *(_QWORD *)&__v[8];
                  if ((__v[8] & 7) != 0)
                  {
                    v366 = (unsigned int *)(*(_QWORD *)&__v[8] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v367 = __ldxr(v366);
                    while (__stxr(v367 + 2, v366));
                    if ((v367 & 1) == 0)
                      v365 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  v368 = (unsigned int *)(v365 & 0xFFFFFFFFFFFFFFF8);
                  if ((v365 & 0xFFFFFFFFFFFFFFF8) == 0)
                    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v360);
                  pxrInternal__aapl__pxrReserved__::TfStringGetSuffix();
                  if ((v365 & 7) != 0)
                  {
                    do
                      v369 = __ldxr(v368);
                    while (__stlxr(v369 - 2, v368));
                  }
                  if (REGeomModelDescriptorGetAttributeIndex() == -1)
                  {
                    v370 = *(_QWORD *)&__v[8];
                    if ((__v[8] & 7) != 0)
                    {
                      v371 = (unsigned int *)(*(_QWORD *)&__v[8] & 0xFFFFFFFFFFFFFFF8);
                      do
                        v372 = __ldxr(v371);
                      while (__stxr(v372 + 2, v371));
                      if ((v372 & 1) == 0)
                        v370 &= 0xFFFFFFFFFFFFFFF8;
                    }
                    v373 = (unsigned int *)(v370 & 0xFFFFFFFFFFFFFFF8);
                    REGeomModelDescriptorAddAttributeAlias();
                    if ((v370 & 7) != 0)
                    {
                      do
                        v374 = __ldxr(v373);
                      while (__stlxr(v374 - 2, v373));
                    }
                  }
                  if ((v435[23] & 0x80000000) != 0)
                    operator delete(*(void **)v435);
                }
                if (SBYTE7(v466) < 0)
                  operator delete(__p[0]);
                if ((__v[39] & 0x80000000) != 0)
                  operator delete(*(void **)&__v[16]);
                if ((__v[8] & 7) != 0)
                {
                  v375 = (unsigned int *)(*(_QWORD *)&__v[8] & 0xFFFFFFFFFFFFFFF8);
                  do
                    v376 = __ldxr(v375);
                  while (__stlxr(v376 - 2, v375));
                }
                v377 = (_QWORD *)*((_QWORD *)v346 + 1);
                if (v377)
                {
                  do
                  {
                    v378 = v377;
                    v377 = (_QWORD *)*v377;
                  }
                  while (v377);
                }
                else
                {
                  do
                  {
                    v378 = (_BYTE *)*((_QWORD *)v346 + 2);
                    v309 = *(_QWORD *)v378 == (_QWORD)v346;
                    v346 = v378;
                  }
                  while (!v309);
                }
                v346 = v378;
              }
              while (v378 != &v424[8]);
            }
          }
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
        v379 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)__v);
        realityio::MeshDescriptorAction::setupModelDescriptor(HighVertexPerPolygon, v379, a3, a4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__v);
        *(_QWORD *)__v = HighVertexPerPolygon;
        RERetain();
        v380 = v395;
        if (v395 != *(_QWORD *)__v)
        {
          v395 = *(_QWORD *)__v;
          *(_QWORD *)__v = v380;
        }
        realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(__v);
        RERelease();
        *(_QWORD *)&__v[8] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy((uint64_t *)__v, &v395);
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(v464, __v);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__v);
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a5, v464);
        std::__tree<realityio::TexcoordID>::destroy((uint64_t)v424, *(_QWORD **)&v424[8]);
        std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&v392, v393[0]);
        if (v394[0])
        {
          v394[1] = v394[0];
          operator delete(v394[0]);
        }
        goto LABEL_654;
      }
    }
    else if (!v438)
    {
      goto LABEL_538;
    }
    if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v437))
      goto LABEL_538;
    if (!v440)
    {
LABEL_427:
      std::string::basic_string[abi:ne180100]<0>(__v, "primvars:displayColor:indices");
      ValueAtPath = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      if ((__v[23] & 0x80000000) != 0)
        operator delete(*(void **)__v);
      std::string::basic_string[abi:ne180100]<0>(__v, "primvars:displayColor:__interpolation");
      v273 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      if ((__v[23] & 0x80000000) != 0)
        operator delete(*(void **)__v);
      std::string::basic_string[abi:ne180100]<0>(__v, "primvars:displayOpacity:indices");
      v274 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      if ((__v[23] & 0x80000000) != 0)
        operator delete(*(void **)__v);
      std::string::basic_string[abi:ne180100]<0>(__v, "primvars:displayOpacity:__interpolation");
      v275 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      if ((__v[23] & 0x80000000) != 0)
        operator delete(*(void **)__v);
      if (v273
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(v273))
      {
        v276 = *((_QWORD *)v273 + 1);
        if ((v276 & 4) != 0)
          v273 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v276 & 0xFFFFFFFFFFFFFFF8) + 168))(v273);
        v277 = *(_QWORD *)v273;
        v423.__begin_ = (std::vector<unsigned int>::pointer)v277;
        if ((v277 & 7) != 0)
        {
          v278 = (unsigned int *)(v277 & 0xFFFFFFFFFFFFFFF8);
          do
            v279 = __ldxr(v278);
          while (__stxr(v279 + 2, v278));
          if ((v279 & 1) == 0)
          {
            v423.__begin_ = (std::vector<unsigned int>::pointer)(v277 & 0xFFFFFFFFFFFFFFF8);
            v277 &= 0xFFFFFFFFFFFFFFF8;
          }
        }
      }
      else
      {
        v277 = 0;
        v423.__begin_ = 0;
      }
      if (v275
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(v275))
      {
        v280 = *((_QWORD *)v275 + 1);
        if ((v280 & 4) != 0)
          v275 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v280 & 0xFFFFFFFFFFFFFFF8) + 168))(v275);
      }
      else
      {
        v275 = (pxrInternal__aapl__pxrReserved__::VtValue *)&v423;
      }
      v281 = *(_QWORD *)v275;
      __dst = (void *)v281;
      if ((v281 & 7) != 0)
      {
        v282 = (unsigned int *)(v281 & 0xFFFFFFFFFFFFFFF8);
        do
          v283 = __ldxr(v282);
        while (__stxr(v283 + 2, v282));
        if ((v283 & 1) == 0)
        {
          __dst = (void *)(v281 & 0xFFFFFFFFFFFFFFF8);
          v281 &= 0xFFFFFFFFFFFFFFF8;
        }
      }
      if (v440)
      {
        if ((v440 & 4) != 0)
          v284 = (*(uint64_t (**)(uint64_t *))((v440 & 0xFFFFFFFFFFFFFFF8) + 168))(&v439);
        else
          v284 = v439;
        v285 = *(_OWORD *)(v284 + 16);
        *(_OWORD *)__v = *(_OWORD *)v284;
        *(_OWORD *)&__v[16] = v285;
        v286 = *(_QWORD *)(v284 + 32);
        *(_QWORD *)&__v[32] = v286;
        if (v286)
        {
          v287 = (unint64_t *)(v286 - 16);
          if (*(_QWORD *)&__v[24])
            v287 = *(unint64_t **)&__v[24];
          do
            v288 = __ldxr(v287);
          while (__stxr(v288 + 1, v287));
        }
      }
      else
      {
        memset(__v, 0, 40);
      }
      if (ValueAtPath
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath))
      {
        v289 = ValueAtPath[1];
        if ((v289 & 4) != 0)
          v290 = (*(uint64_t (**)(uint64_t *))((v289 & 0xFFFFFFFFFFFFFFF8) + 168))(ValueAtPath);
        else
          v290 = *ValueAtPath;
        v291 = *(_OWORD *)(v290 + 16);
        *(_OWORD *)v424 = *(_OWORD *)v290;
        *(_OWORD *)&v424[16] = v291;
        v292 = *(_QWORD *)(v290 + 32);
        *(_QWORD *)&v425 = v292;
        if (v292)
        {
          v293 = (unint64_t *)(v292 - 16);
          if (*(_QWORD *)&v424[24])
            v293 = *(unint64_t **)&v424[24];
          do
            v294 = __ldxr(v293);
          while (__stxr(v294 + 1, v293));
        }
      }
      else
      {
        *(_QWORD *)&v425 = 0;
        memset(v424, 0, sizeof(v424));
      }
      if (v438)
      {
        if ((v438 & 4) != 0)
          v295 = (*(uint64_t (**)(uint64_t *))((v438 & 0xFFFFFFFFFFFFFFF8) + 168))(&v437);
        else
          v295 = v437;
        v296 = *(_OWORD *)(v295 + 16);
        *(_OWORD *)__p = *(_OWORD *)v295;
        v466 = v296;
        v297 = *(_QWORD *)(v295 + 32);
        *(_QWORD *)&v467 = v297;
        if (v297)
        {
          v298 = (unint64_t *)(v297 - 16);
          if (*((_QWORD *)&v466 + 1))
            v298 = (unint64_t *)*((_QWORD *)&v466 + 1);
          do
            v299 = __ldxr(v298);
          while (__stxr(v299 + 1, v298));
        }
      }
      else
      {
        *(_QWORD *)&v467 = 0;
        *(_OWORD *)__p = 0u;
        v466 = 0u;
      }
      if (v274
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v274))
      {
        v300 = v274[1];
        if ((v300 & 4) != 0)
          v301 = (*(uint64_t (**)(uint64_t *))((v300 & 0xFFFFFFFFFFFFFFF8) + 168))(v274);
        else
          v301 = *v274;
        v302 = *(_OWORD *)(v301 + 16);
        *(_OWORD *)v435 = *(_OWORD *)v301;
        *(_OWORD *)&v435[16] = v302;
        v303 = *(char **)(v301 + 32);
        v436 = v303;
        if (v303)
        {
          v304 = (unint64_t *)(v303 - 16);
          if (*(_QWORD *)&v435[24])
            v304 = *(unint64_t **)&v435[24];
          do
            v305 = __ldxr(v304);
          while (__stxr(v305 + 1, v304));
        }
      }
      else
      {
        v436 = 0;
        memset(v435, 0, sizeof(v435));
      }
      AttributeRate = getAttributeRate(&v423, HighVertexPerPolygon, *(uint64_t *)v424, *(uint64_t *)__v);
      v307 = getAttributeRate(&__dst, HighVertexPerPolygon, *(uint64_t *)v435, (uint64_t)__p[0]);
      v308 = v307;
      if (v307 | AttributeRate)
      {
        v309 = AttributeRate == 2 || v307 == 2;
        if (v309)
        {
          LOBYTE(v310) = 3;
        }
        else if (AttributeRate == 1 && v307 == 1)
        {
          LOBYTE(v310) = 1;
        }
        else
        {
          if (AttributeRate > 3)
            v311 = 3;
          else
            v311 = dword_23020E9A0[(char)AttributeRate];
          if (v307 > 3)
            v312 = 3;
          else
            v312 = dword_23020E9A0[(char)v307];
          if (v311 <= v312)
            LOBYTE(v311) = v312;
          v310 = 0x3010200u >> (8 * v311);
        }
      }
      else
      {
        LOBYTE(v310) = 0;
      }
      CountForAttributeRate = getCountForAttributeRate(HighVertexPerPolygon, v310);
      memset(&v434, 0, sizeof(v434));
      if (CountForAttributeRate)
      {
        std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__vallocate[abi:ne180100](&v434, CountForAttributeRate);
        v314 = v434.__end_;
        bzero(v434.__end_, 16 * CountForAttributeRate);
        v434.__end_ = &v314[4 * CountForAttributeRate];
      }
      if (*(_QWORD *)__v)
      {
        getResampleIndices(__sz, HighVertexPerPolygon, (uint64_t *)v424, AttributeRate, v310);
        v315 = (_QWORD *)__sz[1];
        if (__sz[1] != __sz[0])
        {
          v316 = 0;
          v315 = (_QWORD *)__sz[0];
          do
          {
            v317 = *(_QWORD *)__v - 1;
            if ((unint64_t)(*(_QWORD *)__v - 1) >= v315[v316])
              v317 = v315[v316];
            v318 = *(_QWORD *)&__v[32] + 12 * v317;
            *(_QWORD *)&v319 = *(_QWORD *)v318;
            DWORD2(v319) = *(_DWORD *)(v318 + 8);
            HIDWORD(v319) = 1.0;
            *(_OWORD *)&v434.__begin_[4 * v316++] = v319;
            v315 = (_QWORD *)__sz[0];
          }
          while (v316 < (uint64_t)(__sz[1] - __sz[0]) >> 3);
        }
        if (v315)
        {
          __sz[1] = (std::vector<unsigned int>::size_type)v315;
          operator delete(v315);
        }
      }
      if (__p[0])
      {
        getResampleIndices(__sz, HighVertexPerPolygon, (uint64_t *)v435, v308, v310);
        v320 = (_QWORD *)__sz[1];
        if (__sz[1] != __sz[0])
        {
          v321 = 0;
          v322 = 3;
          v320 = (_QWORD *)__sz[0];
          do
          {
            v434.__begin_[v322] = *(_DWORD *)(v467 + 4 * v320[v321++]);
            v320 = (_QWORD *)__sz[0];
            v322 += 4;
          }
          while (v321 < (uint64_t)(__sz[1] - __sz[0]) >> 3);
        }
        if (v320)
        {
          __sz[1] = (std::vector<unsigned int>::size_type)v320;
          operator delete(v320);
        }
      }
      MEMORY[0x2348B0B14](HighVertexPerPolygon, "vertexColor", v310, (unint64_t)((char *)v434.__end_ - (char *)v434.__begin_) >> 4);
      if (v434.__begin_)
      {
        v434.__end_ = v434.__begin_;
        operator delete(v434.__begin_);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v435);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__p);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v424);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__v);
      if ((v281 & 7) != 0)
      {
        v323 = (unsigned int *)(v281 & 0xFFFFFFFFFFFFFFF8);
        do
          v324 = __ldxr(v323);
        while (__stlxr(v324 - 2, v323));
        v277 = (unint64_t)v423.__begin_;
      }
      if ((v277 & 7) != 0)
      {
        v325 = (unsigned int *)(v277 & 0xFFFFFFFFFFFFFFF8);
        do
          v326 = __ldxr(v325);
        while (__stlxr(v326 - 2, v325));
      }
      goto LABEL_538;
    }
    goto LABEL_426;
  }
  a5[1] = 0;
LABEL_654:
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v395);
  if (v396.__begin_)
  {
    v396.__end_ = v396.__begin_;
    operator delete(v396.__begin_);
  }
  if (v397.__begin_)
  {
    v397.__end_ = v397.__begin_;
    operator delete(v397.__begin_);
  }
  if (v398[0])
  {
    v398[1] = v398[0];
    operator delete(v398[0]);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__n);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v402);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v405);
LABEL_661:
  *(_QWORD *)__v = v409;
  std::vector<realityio::MeshDescriptorAction::MaterialGroupInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v441);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v443);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v445);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v447);
  if ((v410 & 7) != 0)
  {
    v381 = (unsigned int *)(v410 & 0xFFFFFFFFFFFFFFF8);
    do
      v382 = __ldxr(v381);
    while (__stlxr(v382 - 2, v381));
  }
  *(_QWORD *)__v = &v411;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v414, 0);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v415, v416[0]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v449);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v451);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v453);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v455);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v456);
  if ((v417 & 7) != 0)
  {
    v383 = (unsigned int *)(v417 & 0xFFFFFFFFFFFFFFF8);
    do
      v384 = __ldxr(v383);
    while (__stlxr(v384 - 2, v383));
  }
  if ((v418 & 7) != 0)
  {
    v385 = (unsigned int *)(v418 & 0xFFFFFFFFFFFFFFF8);
    do
      v386 = __ldxr(v385);
    while (__stlxr(v386 - 2, v385));
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v458);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v460);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v462);
  *(_QWORD *)__v = &v419;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
LABEL_671:
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v464);
}

void sub_230041B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,__int16 a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  char a66;
  void *a72;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&STACK[0x210]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v74 - 224);
  if ((v73 & 7) != 0)
  {
    v76 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
    do
      v77 = __ldxr(v76);
    while (__stlxr(v77 - 2, v76));
    v72 = (unint64_t)a72;
  }
  if ((v72 & 7) != 0)
  {
    v78 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x2E0]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x2F0]);
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&a19, (_QWORD *)a20);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&a25);
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a35);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a41);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a47);
  a47 = (uint64_t)&a53;
  std::vector<realityio::MeshDescriptorAction::MaterialGroupInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x300]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x310]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x320]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x330]);
  if ((a56 & 7) != 0)
  {
    v80 = (unsigned int *)(a56 & 0xFFFFFFFFFFFFFFF8);
    do
      v81 = __ldxr(v80);
    while (__stlxr(v81 - 2, v80));
  }
  a47 = (uint64_t)&a57;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a60, 0);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&a61, (_QWORD *)a62);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x340]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x350]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x360]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x370]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x380]);
  if ((a64 & 7) != 0)
  {
    v82 = (unsigned int *)(a64 & 0xFFFFFFFFFFFFFFF8);
    do
      v83 = __ldxr(v82);
    while (__stlxr(v83 - 2, v82));
  }
  if ((a65 & 7) != 0)
  {
    v84 = (unsigned int *)(a65 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x390]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x3A0]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x3B0]);
  a47 = (uint64_t)&a66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

void handleNormals(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int AttributeRateHelper;
  unsigned int FaceCount;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  std::vector<unsigned int> __p;
  uint64_t v18;

  if (a3
    && (v7 = a3,
        pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(a3)))
  {
    v8 = *((_QWORD *)v7 + 1);
    if ((v8 & 4) != 0)
      v7 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    v9 = *(_QWORD *)v7;
    v18 = v9;
    if ((v9 & 7) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) == 0)
        v18 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  else
  {
    MEMORY[0x2348B274C](&v18, "");
  }
  AttributeRateHelper = getAttributeRateHelper(&v18, 1u);
  memset(&__p, 0, sizeof(__p));
  convertIndices(a4, &__p);
  if (!AttributeRateHelper)
  {
    FaceCount = REGeomModelDescriptorGetFaceCount();
    std::vector<int>::resize(&__p, FaceCount);
    if (__p.__end_ != __p.__begin_)
    {
      v14 = __p.__end_ - __p.__begin_;
      if (v14 <= 1)
        v14 = 1;
      bzero(__p.__begin_, 4 * v14);
    }
    AttributeRateHelper = 2;
  }
  addPrimvarToDescriptor(a1, a2, AttributeRateHelper, (uint64_t *)&__p, (uint64_t)"vertexNormal");
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if ((v18 & 7) != 0)
  {
    v15 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
}

void sub_230042698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v12;
  unsigned int v13;

  if ((a12 & 7) != 0)
  {
    v12 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  _Unwind_Resume(exception_object);
}

void addPrimvar(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::VtValue *v12;
  char v13;
  size_t v14;
  std::vector<unsigned int>::pointer p_p;
  const void *v16;
  uint64_t *ValueAtPath;
  size_t v18;
  std::vector<unsigned int>::pointer begin;
  const void *v20;
  pxrInternal__aapl__pxrReserved__::VtValue *v21;
  size_t v22;
  std::vector<unsigned int>::pointer v23;
  const void *v24;
  pxrInternal__aapl__pxrReserved__::VtValue *v25;
  size_t v26;
  std::vector<unsigned int>::pointer v27;
  const void *v28;
  pxrInternal__aapl__pxrReserved__::VtValue *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int AttributeRateHelper;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::vector<unsigned int> __p;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v7 = pxrInternal__aapl__pxrReserved__::VtDictionary::find();
  v9 = v8;
  v10 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(a1);
  if (v9 == v11 && (!v9 || v7 == v10))
    return;
  v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 56);
  __p.__end_ = 0;
  v13 = pxrInternal__aapl__pxrReserved__::VtValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 56), (const pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
  if ((v13 & 1) != 0)
    return;
  v39 = a4;
  if (*(char *)(v7 + 55) >= 0)
    v14 = *(unsigned __int8 *)(v7 + 55);
  else
    v14 = *(_QWORD *)(v7 + 40);
  p_p = (std::vector<unsigned int>::pointer)&__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v14 + 8);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    p_p = __p.__begin_;
  if (v14)
  {
    if (*(char *)(v7 + 55) >= 0)
      v16 = (const void *)(v7 + 32);
    else
      v16 = *(const void **)(v7 + 32);
    memmove(p_p, v16, v14);
  }
  strcpy((char *)p_p + v14, ":indices");
  ValueAtPath = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  if (*(char *)(v7 + 55) >= 0)
    v18 = *(unsigned __int8 *)(v7 + 55);
  else
    v18 = *(_QWORD *)(v7 + 40);
  begin = (std::vector<unsigned int>::pointer)&__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v18 + 16);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    begin = __p.__begin_;
  if (v18)
  {
    if (*(char *)(v7 + 55) >= 0)
      v20 = (const void *)(v7 + 32);
    else
      v20 = *(const void **)(v7 + 32);
    memmove(begin, v20, v18);
  }
  strcpy((char *)begin + v18, ":__interpolation");
  v21 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  if (*(char *)(v7 + 55) >= 0)
    v22 = *(unsigned __int8 *)(v7 + 55);
  else
    v22 = *(_QWORD *)(v7 + 40);
  v23 = (std::vector<unsigned int>::pointer)&__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v22 + 14);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    v23 = __p.__begin_;
  if (v22)
  {
    if (*(char *)(v7 + 55) >= 0)
      v24 = (const void *)(v7 + 32);
    else
      v24 = *(const void **)(v7 + 32);
    memmove(v23, v24, v22);
  }
  strcpy((char *)v23 + v22, ":__elementSize");
  v25 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  if (*(char *)(v7 + 55) >= 0)
    v26 = *(unsigned __int8 *)(v7 + 55);
  else
    v26 = *(_QWORD *)(v7 + 40);
  v27 = (std::vector<unsigned int>::pointer)&__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v26 + 11);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    v27 = __p.__begin_;
  if (v26)
  {
    if (*(char *)(v7 + 55) >= 0)
      v28 = (const void *)(v7 + 32);
    else
      v28 = *(const void **)(v7 + 32);
    memmove(v27, v28, v26);
  }
  strcpy((char *)v27 + v26, ":__typeName");
  v29 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  if (*(char *)(a3 + 23) < 0)
    a3 = *(_QWORD *)a3;
  if (v21
    && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(v21))
  {
    v30 = *((_QWORD *)v21 + 1);
    if ((v30 & 4) != 0)
      v21 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(v21);
    v31 = *(_QWORD *)v21;
    v41 = v31;
    if ((v31 & 7) != 0)
    {
      v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 2, v32));
      if ((v33 & 1) == 0)
        v41 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  else
  {
    MEMORY[0x2348B274C](&v41, "");
  }
  AttributeRateHelper = getAttributeRateHelper(&v41, 0xFFu);
  if (v25)
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>(v25))
    {
      v35 = *((_QWORD *)v25 + 1);
      if ((v35 & 4) != 0)
        (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(v25);
    }
  }
  if (v29)
  {
    v36 = *((_QWORD *)v29 + 1);
    if (v36)
    {
      if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__16SdfValueTypeNameE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
LABEL_75:
        if ((v36 & 4) != 0)
          v29 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(v29);
        v40 = *(_QWORD *)v29;
        goto LABEL_79;
      }
      if ((v36 & 4) != 0
      {
        v36 = *((_QWORD *)v29 + 1);
        goto LABEL_75;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v40);
LABEL_79:
  memset(&__p, 0, sizeof(__p));
  convertIndices(ValueAtPath, &__p);
  addPrimvarToDescriptor(v39, v12, AttributeRateHelper, (uint64_t *)&__p, a3);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if ((v41 & 7) != 0)
  {
    v37 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
}

void sub_230042BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  unsigned int *v18;
  unsigned int v19;

  if ((a12 & 7) != 0)
  {
    v18 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  _Unwind_Resume(exception_object);
}

_QWORD *realityio::SphereMeshDescriptorAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, uint64_t *a2@<X3>, _QWORD *a3@<X4>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t Name;
  uint64_t v11;

  buildSphereOptions(a2, a3);
  result = (_QWORD *)REGeomModelDescriptorCreateFromSphereOptions();
  if (result)
  {
    v9 = (uint64_t)result;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1);
    Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    realityio::MeshDescriptorAction::setupModelDescriptor(v9, Name, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    v11 = v9;
    a4[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy(a4, &v11);
    return realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v11);
  }
  else
  {
    a4[1] = 0;
  }
  return result;
}

void sub_230042D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t buildSphereOptions(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v5;
  float v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *NameToken;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;
  unsigned int *v17;
  unsigned int v18;
  double *v19;
  float *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 1.0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v25, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a2 + 16 * v5));
      v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 8 * v5);
      v8 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v7);
      if ((v8 & 7) != 0)
      {
        v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 2, v9));
        if ((v10 & 1) == 0)
          v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v7);
      MEMORY[0x2348B274C](&v24, "radius");
      v12 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (v24 & 0xFFFFFFFFFFFFFFF8))
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v25) & 1) != 0)
        {
          if ((v24 & 7) != 0)
          {
            v14 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
            do
              v15 = __ldxr(v14);
            while (__stlxr(v15 - 2, v14));
          }
        }
        else
        {
          v16 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
          if ((v24 & 7) != 0)
          {
            v17 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
            do
              v18 = __ldxr(v17);
            while (__stlxr(v18 - 2, v17));
          }
          if ((v16 & 1) == 0)
            goto LABEL_28;
        }
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v25))
        {
          if ((v26 & 4) != 0)
            v19 = (double *)(*(uint64_t (**)(_BYTE *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v25);
          else
            v19 = (double *)v25;
          v6 = *v19;
        }
        else
        {
          if ((v26 & 4) != 0)
            v20 = (float *)(*(uint64_t (**)(_BYTE *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v25);
          else
            v20 = (float *)v25;
          v6 = *v20;
        }
      }
      else if ((v24 & 7) != 0)
      {
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
LABEL_28:
      if ((v8 & 7) != 0)
      {
        v21 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
      ++v5;
      v2 = *a1;
      if (v5 >= (a1[1] - *a1) >> 3)
        return REGeomBuildSphereDefaultOptions() | ((unint64_t)LODWORD(v6) << 32);
    }
  }
  v6 = 1.0;
  return REGeomBuildSphereDefaultOptions() | ((unint64_t)LODWORD(v6) << 32);
}

void sub_230042F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  va_list va;

  va_start(va, a2);
  if ((a2 & 7) != 0)
  {
    v4 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((v2 & 7) != 0)
  {
    v6 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::SphereAssetDescriptorAction::operator()@<X0>(uint64_t *a1@<X3>, _QWORD *a2@<X4>, uint64_t *a3@<X8>)
{
  uint64_t ServiceLocator;
  uint64_t SphereDescriptor;

  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  buildSphereOptions(a1, a2);
  SphereDescriptor = REMeshAssetCreateSphereDescriptor();
  a3[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>::_PlaceCopy(a3, &SphereDescriptor);
  return realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef(&SphereDescriptor);
}

void sub_23004305C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::CapsuleMeshDescriptorAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, uint64_t *a2@<X3>, _QWORD *a3@<X4>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t Name;
  uint64_t v11;
  __int128 v12;
  int v13;
  __int128 v14;
  int v15;

  v14 = 0uLL;
  v15 = 0;
  buildCapsuleOptions((uint64_t)&v14, a2, a3);
  v12 = v14;
  v13 = v15;
  result = (_QWORD *)REGeomModelDescriptorCreateFromCapsuleOptions();
  if (result)
  {
    v9 = (uint64_t)result;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1);
    Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    realityio::MeshDescriptorAction::setupModelDescriptor(v9, Name, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    v11 = v9;
    a4[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy(a4, &v11);
    return realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v11);
  }
  else
  {
    a4[1] = 0;
  }
  return result;
}

void sub_230043154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t buildCapsuleOptions(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v7;
  float v8;
  float v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *NameToken;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  char v24;
  unsigned int *v25;
  unsigned int v26;
  double *v27;
  float *v28;
  char v29;
  unsigned int *v30;
  unsigned int v31;
  double *v32;
  float *v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t result;
  float v37;
  uint64_t v38;
  _BYTE v39[8];
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    v8 = 1.0;
    v9 = 0.5;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v39, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + 16 * v7));
      v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 8 * v7);
      v11 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v10);
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          v11 &= 0xFFFFFFFFFFFFFFF8;
      }
      NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v10);
      MEMORY[0x2348B274C](&v38, "radius");
      v15 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (v38 & 0xFFFFFFFFFFFFFFF8))
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v39) & 1) != 0)
        {
          if ((v38 & 7) != 0)
          {
            v20 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
            do
              v21 = __ldxr(v20);
            while (__stlxr(v21 - 2, v20));
          }
LABEL_29:
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v39))
          {
            if ((v40 & 4) != 0)
              v27 = (double *)(*(uint64_t (**)(_BYTE *))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(v39);
            else
              v27 = (double *)v39;
            v9 = *v27;
          }
          else
          {
            if ((v40 & 4) != 0)
              v28 = (float *)(*(uint64_t (**)(_BYTE *))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(v39);
            else
              v28 = (float *)v39;
            v9 = *v28;
          }
          goto LABEL_47;
        }
        v24 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v39);
        if ((v38 & 7) != 0)
        {
          v25 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stlxr(v26 - 2, v25));
        }
        if ((v24 & 1) != 0)
          goto LABEL_29;
      }
      else if ((v38 & 7) != 0)
      {
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      v17 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v10);
      MEMORY[0x2348B274C](&v38, "height");
      v18 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      if ((*v17 & 0xFFFFFFFFFFFFFFF8) == (v38 & 0xFFFFFFFFFFFFFFF8))
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v39) & 1) != 0)
        {
          if ((v38 & 7) != 0)
          {
            v22 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
            do
              v23 = __ldxr(v22);
            while (__stlxr(v23 - 2, v22));
          }
        }
        else
        {
          v29 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v39);
          if ((v38 & 7) != 0)
          {
            v30 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
            do
              v31 = __ldxr(v30);
            while (__stlxr(v31 - 2, v30));
          }
          if ((v29 & 1) == 0)
            goto LABEL_47;
        }
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v39))
        {
          if ((v40 & 4) != 0)
            v32 = (double *)(*(uint64_t (**)(_BYTE *))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(v39);
          else
            v32 = (double *)v39;
          v8 = *v32;
        }
        else
        {
          if ((v40 & 4) != 0)
            v33 = (float *)(*(uint64_t (**)(_BYTE *))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(v39);
          else
            v33 = (float *)v39;
          v8 = *v33;
        }
      }
      else if ((v38 & 7) != 0)
      {
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
LABEL_47:
      if ((v11 & 7) != 0)
      {
        v34 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v39);
      ++v7;
      v4 = *a2;
      if (v7 >= (a2[1] - *a2) >> 3)
        goto LABEL_57;
    }
  }
  v9 = 0.5;
  v8 = 1.0;
LABEL_57:
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  result = REGeomBuildCapsuleDefaultOptions();
  v37 = v8 + v9 * 2.0;
  *(float *)(a1 + 8) = v9;
  *(float *)(a1 + 12) = v37;
  *(_WORD *)a1 = 64;
  *(_WORD *)(a1 + 4) = 32;
  return result;
}

void sub_2300434E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  va_list va;

  va_start(va, a2);
  if ((a2 & 7) != 0)
  {
    v4 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((v2 & 7) != 0)
  {
    v6 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::CapsuleAssetDescriptorAction::operator()@<X0>(uint64_t *a1@<X3>, _QWORD *a2@<X4>, uint64_t *a3@<X8>)
{
  uint64_t ServiceLocator;
  uint64_t CapsuleDescriptor;
  __int128 v9;
  int v10;
  __int128 v11;
  int v12;

  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  v11 = 0uLL;
  v12 = 0;
  buildCapsuleOptions((uint64_t)&v11, a1, a2);
  v9 = v11;
  v10 = v12;
  CapsuleDescriptor = REMeshAssetCreateCapsuleDescriptor();
  a3[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>::_PlaceCopy(a3, &CapsuleDescriptor);
  return realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef(&CapsuleDescriptor);
}

void sub_23004361C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::ConeMeshDescriptorAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, uint64_t *a2@<X3>, _QWORD *a3@<X4>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t Name;
  uint64_t v11;

  buildConeOptions(a2, a3);
  result = (_QWORD *)REGeomModelDescriptorCreateFromConeOptions();
  if (result)
  {
    v9 = (uint64_t)result;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1);
    Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    realityio::MeshDescriptorAction::setupModelDescriptor(v9, Name, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    v11 = v9;
    a4[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy(a4, &v11);
    return realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v11);
  }
  else
  {
    a4[1] = 0;
  }
  return result;
}

void sub_2300436F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t buildConeOptions(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v5;
  float v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *NameToken;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  char v21;
  unsigned int *v22;
  unsigned int v23;
  char v24;
  unsigned int *v25;
  unsigned int v26;
  double *v27;
  float *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v32;
  _BYTE v33[8];
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 1.0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a2 + 16 * v5));
      v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 8 * v5);
      v8 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v7);
      if ((v8 & 7) != 0)
      {
        v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 2, v9));
        if ((v10 & 1) == 0)
          v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v7);
      MEMORY[0x2348B274C](&v32, "radius");
      v12 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) != (v32 & 0xFFFFFFFFFFFFFFF8))
        break;
      if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v33) & 1) != 0)
      {
        if ((v32 & 7) != 0)
        {
          v17 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
      }
      else
      {
        v21 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v33);
        if ((v32 & 7) != 0)
        {
          v22 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
          do
            v23 = __ldxr(v22);
          while (__stlxr(v23 - 2, v22));
        }
        if ((v21 & 1) == 0)
          goto LABEL_11;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v33))
      {
        if ((v34 & 4) == 0)
          goto LABEL_45;
      }
      else if ((v34 & 4) == 0)
      {
        goto LABEL_45;
      }
      (*(void (**)(_BYTE *))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(v33);
LABEL_45:
      if ((v8 & 7) != 0)
      {
        v29 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v33);
      ++v5;
      v2 = *a1;
      if (v5 >= (a1[1] - *a1) >> 3)
        return REGeomBuildConeDefaultOptions() & 0xFFFF0000 | ((unint64_t)LODWORD(v6) << 32) | 0x40;
    }
    if ((v32 & 7) != 0)
    {
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
LABEL_11:
    v14 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v7);
    MEMORY[0x2348B274C](&v32, "height");
    v15 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    if ((*v14 & 0xFFFFFFFFFFFFFFF8) == (v32 & 0xFFFFFFFFFFFFFFF8))
    {
      if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v33) & 1) != 0)
      {
        if ((v32 & 7) != 0)
        {
          v19 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
          do
            v20 = __ldxr(v19);
          while (__stlxr(v20 - 2, v19));
        }
      }
      else
      {
        v24 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v33);
        if ((v32 & 7) != 0)
        {
          v25 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stlxr(v26 - 2, v25));
        }
        if ((v24 & 1) == 0)
          goto LABEL_45;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v33))
      {
        if ((v34 & 4) != 0)
          v27 = (double *)(*(uint64_t (**)(_BYTE *))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(v33);
        else
          v27 = (double *)v33;
        v6 = *v27;
      }
      else
      {
        if ((v34 & 4) != 0)
          v28 = (float *)(*(uint64_t (**)(_BYTE *))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(v33);
        else
          v28 = (float *)v33;
        v6 = *v28;
      }
    }
    else if ((v32 & 7) != 0)
    {
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    goto LABEL_45;
  }
  v6 = 1.0;
  return REGeomBuildConeDefaultOptions() & 0xFFFF0000 | ((unint64_t)LODWORD(v6) << 32) | 0x40;
}

void sub_230043A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  va_list va;

  va_start(va, a2);
  if ((a2 & 7) != 0)
  {
    v4 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((v2 & 7) != 0)
  {
    v6 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::ConeAssetDescriptorAction::operator()@<X0>(uint64_t *a1@<X3>, _QWORD *a2@<X4>, uint64_t *a3@<X8>)
{
  uint64_t ServiceLocator;
  uint64_t ConeDescriptor;

  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  buildConeOptions(a1, a2);
  ConeDescriptor = REMeshAssetCreateConeDescriptor();
  a3[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>::_PlaceCopy(a3, &ConeDescriptor);
  return realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef(&ConeDescriptor);
}

void sub_230043B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::CubeMeshDescriptorAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, uint64_t *a2@<X3>, _QWORD *a3@<X4>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t Name;
  uint64_t v11;
  _OWORD v12[2];
  _OWORD v13[2];

  memset(v13, 0, 28);
  buildBoxOptions((uint64_t)v13, a2, a3);
  v12[0] = v13[0];
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)v13 + 12);
  result = (_QWORD *)REGeomModelDescriptorCreateFromBoxOptions();
  if (result)
  {
    v9 = (uint64_t)result;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1);
    Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    realityio::MeshDescriptorAction::setupModelDescriptor(v9, Name, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    v11 = v9;
    a4[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy(a4, &v11);
    return realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v11);
  }
  else
  {
    a4[1] = 0;
  }
  return result;
}

void sub_230043C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t buildBoxOptions(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v7;
  float v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *NameToken;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  char v18;
  unsigned int *v19;
  unsigned int v20;
  double *v21;
  float *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t result;
  uint64_t v26;
  _BYTE v27[8];
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    v8 = 1.0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v27, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + 16 * v7));
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 8 * v7);
      v10 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v9);
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 2, v11));
        if ((v12 & 1) == 0)
          v10 &= 0xFFFFFFFFFFFFFFF8;
      }
      NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v9);
      MEMORY[0x2348B274C](&v26, "size");
      v14 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (v26 & 0xFFFFFFFFFFFFFFF8))
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v27) & 1) != 0)
        {
          if ((v26 & 7) != 0)
          {
            v16 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v16);
            while (__stlxr(v17 - 2, v16));
          }
        }
        else
        {
          v18 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v27);
          if ((v26 & 7) != 0)
          {
            v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
            do
              v20 = __ldxr(v19);
            while (__stlxr(v20 - 2, v19));
          }
          if ((v18 & 1) == 0)
            goto LABEL_28;
        }
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v27))
        {
          if ((v28 & 4) != 0)
            v21 = (double *)(*(uint64_t (**)(_BYTE *))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(v27);
          else
            v21 = (double *)v27;
          v8 = *v21;
        }
        else
        {
          if ((v28 & 4) != 0)
            v22 = (float *)(*(uint64_t (**)(_BYTE *))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(v27);
          else
            v22 = (float *)v27;
          v8 = *v22;
        }
      }
      else if ((v26 & 7) != 0)
      {
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
LABEL_28:
      if ((v10 & 7) != 0)
      {
        v23 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v27);
      ++v7;
      v4 = *a2;
      if (v7 >= (a2[1] - *a2) >> 3)
        goto LABEL_36;
    }
  }
  v8 = 1.0;
LABEL_36:
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = REGeomBuildBoxDefaultOptions();
  *(float *)(a1 + 12) = v8;
  *(float *)(a1 + 16) = v8;
  *(float *)(a1 + 20) = v8;
  return result;
}

void sub_230043EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  va_list va;

  va_start(va, a2);
  if ((a2 & 7) != 0)
  {
    v4 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((v2 & 7) != 0)
  {
    v6 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::CubeAssetDescriptorAction::operator()@<X0>(uint64_t *a1@<X3>, _QWORD *a2@<X4>, uint64_t *a3@<X8>)
{
  uint64_t ServiceLocator;
  uint64_t BoxDescriptor;
  _OWORD v9[2];
  _OWORD v10[2];

  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  memset(v10, 0, 28);
  buildBoxOptions((uint64_t)v10, a1, a2);
  v9[0] = v10[0];
  *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)((char *)v10 + 12);
  BoxDescriptor = REMeshAssetCreateBoxDescriptor();
  a3[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>::_PlaceCopy(a3, &BoxDescriptor);
  return realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef(&BoxDescriptor);
}

void sub_230043FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::CylinderMeshDescriptorAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, uint64_t *a2@<X3>, _QWORD *a3@<X4>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t Name;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = 0uLL;
  v15 = 0;
  buildCylinderOptions((uint64_t)&v14, a2, a3);
  v12 = v14;
  v13 = v15;
  result = (_QWORD *)REGeomModelDescriptorCreateFromCylinderOptions();
  if (result)
  {
    v9 = (uint64_t)result;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1);
    Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    realityio::MeshDescriptorAction::setupModelDescriptor(v9, Name, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    v11 = v9;
    a4[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy(a4, &v11);
    return realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v11);
  }
  else
  {
    a4[1] = 0;
  }
  return result;
}

void sub_2300440E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t buildCylinderOptions(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v7;
  float v8;
  float v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *NameToken;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  char v24;
  unsigned int *v25;
  unsigned int v26;
  double *v27;
  float *v28;
  char v29;
  unsigned int *v30;
  unsigned int v31;
  double *v32;
  float *v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t result;
  uint64_t v37;
  _BYTE v38[8];
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    v8 = 1.0;
    v9 = 0.5;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v38, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + 16 * v7));
      v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 8 * v7);
      v11 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v10);
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          v11 &= 0xFFFFFFFFFFFFFFF8;
      }
      NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v10);
      MEMORY[0x2348B274C](&v37, "radius");
      v15 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (v37 & 0xFFFFFFFFFFFFFFF8))
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v38) & 1) != 0)
        {
          if ((v37 & 7) != 0)
          {
            v20 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
            do
              v21 = __ldxr(v20);
            while (__stlxr(v21 - 2, v20));
          }
LABEL_29:
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v38))
          {
            if ((v39 & 4) != 0)
              v27 = (double *)(*(uint64_t (**)(_BYTE *))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(v38);
            else
              v27 = (double *)v38;
            v9 = *v27;
          }
          else
          {
            if ((v39 & 4) != 0)
              v28 = (float *)(*(uint64_t (**)(_BYTE *))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(v38);
            else
              v28 = (float *)v38;
            v9 = *v28;
          }
          goto LABEL_47;
        }
        v24 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v38);
        if ((v37 & 7) != 0)
        {
          v25 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stlxr(v26 - 2, v25));
        }
        if ((v24 & 1) != 0)
          goto LABEL_29;
      }
      else if ((v37 & 7) != 0)
      {
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      v17 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v10);
      MEMORY[0x2348B274C](&v37, "height");
      v18 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      if ((*v17 & 0xFFFFFFFFFFFFFFF8) == (v37 & 0xFFFFFFFFFFFFFFF8))
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v38) & 1) != 0)
        {
          if ((v37 & 7) != 0)
          {
            v22 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
            do
              v23 = __ldxr(v22);
            while (__stlxr(v23 - 2, v22));
          }
        }
        else
        {
          v29 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v38);
          if ((v37 & 7) != 0)
          {
            v30 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
            do
              v31 = __ldxr(v30);
            while (__stlxr(v31 - 2, v30));
          }
          if ((v29 & 1) == 0)
            goto LABEL_47;
        }
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v38))
        {
          if ((v39 & 4) != 0)
            v32 = (double *)(*(uint64_t (**)(_BYTE *))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(v38);
          else
            v32 = (double *)v38;
          v8 = *v32;
        }
        else
        {
          if ((v39 & 4) != 0)
            v33 = (float *)(*(uint64_t (**)(_BYTE *))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(v38);
          else
            v33 = (float *)v38;
          v8 = *v33;
        }
      }
      else if ((v37 & 7) != 0)
      {
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
LABEL_47:
      if ((v11 & 7) != 0)
      {
        v34 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v38);
      ++v7;
      v4 = *a2;
      if (v7 >= (a2[1] - *a2) >> 3)
        goto LABEL_57;
    }
  }
  v9 = 0.5;
  v8 = 1.0;
LABEL_57:
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = REGeomBuildCylinderDefaultOptions();
  *(float *)(a1 + 8) = v9;
  *(float *)(a1 + 12) = v9;
  *(float *)(a1 + 4) = v8;
  *(_WORD *)a1 = 64;
  return result;
}

void sub_230044460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  va_list va;

  va_start(va, a2);
  if ((a2 & 7) != 0)
  {
    v4 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((v2 & 7) != 0)
  {
    v6 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::CylinderAssetDescriptorAction::operator()@<X0>(uint64_t *a1@<X3>, _QWORD *a2@<X4>, uint64_t *a3@<X8>)
{
  uint64_t ServiceLocator;
  uint64_t CylinderDescriptor;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  v11 = 0uLL;
  v12 = 0;
  buildCylinderOptions((uint64_t)&v11, a1, a2);
  v9 = v11;
  v10 = v12;
  CylinderDescriptor = REMeshAssetCreateCylinderDescriptor();
  a3[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>::_PlaceCopy(a3, &CylinderDescriptor);
  return realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef(&CylinderDescriptor);
}

void sub_230044598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::BlendShapeWeightsComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, _QWORD *a2@<X3>, uint64_t *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  v18 = 0;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v7))
  {
    v8 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a4);
    realityio::WrappedRERef<REAsset *>::operator=(&v18, v8);
  }
  else
  {
    REBlendShapeWeightsComponentGetComponentType();
    v9 = REComponentCreateByClass();
    v19[0] = v9;
    if (v9)
      RERetain();
    v10 = v18;
    if (v18 != v9)
    {
      v18 = v9;
      v19[0] = v10;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(v19);
    RERelease();
    v19[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy(v19, &v18);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a4, v19);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
  }
  v19[0] = 0;
  if (a2[1] != *a2)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = *a3;
      v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v11);
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>(v14))
      {
        v15 = *(_QWORD *)(v13 + v11 + 8);
        if ((v15 & 4) != 0)
          v16 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v15 & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 168))(v14);
        else
          v16 = *(uint64_t **)v14;
        realityio::WrappedRERef<REAsset *>::operator=(v19, v16);
      }
      ++v12;
      v11 += 16;
    }
    while (v12 < (uint64_t)(a2[1] - *a2) >> 3);
  }
  REBlendShapeWeightsComponentSetBlendShapeWeightsDefinition();
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v19);
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v18);
}

void sub_230044750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v9;

  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v9);
  _Unwind_Resume(a1);
}

uint64_t getAttributeRateHelper(_QWORD *a1, unsigned int a2)
{
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v20;

  MEMORY[0x2348B274C](&v20, "constant");
  v4 = *a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
  if ((v20 & 7) != 0)
  {
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((unsigned int *)v4 == v5)
    return 0;
  MEMORY[0x2348B274C](&v20, "uniform");
  v7 = *a1 & 0xFFFFFFFFFFFFFFF8;
  v8 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
  if ((v20 & 7) != 0)
  {
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  if ((unsigned int *)v7 == v8)
    return 2;
  MEMORY[0x2348B274C](&v20, "varying");
  v10 = *a1 & 0xFFFFFFFFFFFFFFF8;
  v11 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
  if ((v20 & 7) != 0)
  {
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  if ((unsigned int *)v10 == v11)
    return 1;
  MEMORY[0x2348B274C](&v20, "vertex");
  v13 = *a1 & 0xFFFFFFFFFFFFFFF8;
  v14 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
  if ((v20 & 7) != 0)
  {
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  if ((unsigned int *)v13 == v14)
    return 1;
  MEMORY[0x2348B274C](&v20, "faceVarying");
  v16 = *a1 & 0xFFFFFFFFFFFFFFF8;
  v17 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
  if ((v20 & 7) != 0)
  {
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if ((unsigned int *)v16 == v17)
    return 3;
  else
    return a2;
}

void convertIndices(uint64_t *a1, std::vector<unsigned int> *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  unsigned int *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  std::vector<unsigned int>::pointer begin;
  unsigned int v13;
  std::vector<unsigned int>::size_type __sz[2];
  __int128 v15;
  unsigned int *v16;

  if (a1
    && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)a1))
  {
    v4 = a1[1];
    if ((v4 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
    else
      v5 = *a1;
    v6 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)__sz = *(_OWORD *)v5;
    v15 = v6;
    v7 = *(unsigned int **)(v5 + 32);
    v16 = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 - 4);
      if (*((_QWORD *)&v15 + 1))
        v8 = (unint64_t *)*((_QWORD *)&v15 + 1);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    std::vector<int>::resize(a2, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v10 = v16;
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    v11 = &v16[__sz[0]];
    if (v10 != v11)
    {
      begin = a2->__begin_;
      do
      {
        v13 = *v10++;
        *begin++ = v13;
      }
      while (v10 != v11);
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  }
}

void sub_2300449EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void addPrimvarToDescriptor(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, unsigned int AttributeRateFromCount, uint64_t *a4, uint64_t a5)
{
  unint64_t **v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unsigned __int16 *v14;
  unint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  void **v18;
  unint64_t *v19;
  unint64_t *v20;
  void ***v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  float64x2_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  int32x2_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  __int128 v38;
  unsigned __int16 *v39;
  unint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  float v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t *v60;
  void *__p;
  _BYTE *v62;
  uint64_t v63;
  __int128 v64;
  void **p_p;

  v8 = (unint64_t **)a2;
  v10 = *a4;
  v11 = a4[1];
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(a2))
  {
    __p = 0;
    v62 = 0;
    v63 = 0;
    v12 = v8[1];
    if ((v12 & 4) != 0)
      v13 = (unint64_t *)(*(uint64_t (**)(unint64_t **))(((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8)
                                                                               + 168))(v8);
    else
      v13 = *v8;
    v62 = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v13);
    v14 = (unsigned __int16 *)v13[4];
    v15 = *v13;
    *(_QWORD *)&v64 = &__p;
    if (v15)
    {
      v16 = &v14[2 * v15];
      v17 = MEMORY[0x24BEE8B20];
      do
      {
        LODWORD(v18) = *(_DWORD *)(v17 + 4 * *v14);
        HIDWORD(v18) = *(_DWORD *)(v17 + 4 * v14[1]);
        p_p = v18;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_((void ***)&v64, &p_p);
        v14 += 2;
      }
      while (v14 != v16);
    }
    if (v10 != v11)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (a4[1] - *a4) >> 2);
LABEL_45:
      REGeomModelDescriptorAddIndexedAttributeVector2F();
      goto LABEL_112;
    }
    if (AttributeRateFromCount == 255)
      AttributeRateFromCount = getAttributeRateFromCount(a1, (v62 - (_BYTE *)__p) >> 3);
    v29 = v62 - (_BYTE *)__p;
    if (AttributeRateFromCount)
      v30 = AttributeRateFromCount;
    else
      v30 = 4 * ((unint64_t)(v62 - (_BYTE *)__p) > 8);
    goto LABEL_81;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
  {
    __p = 0;
    v62 = 0;
    v63 = 0;
    v19 = v8[1];
    if ((v19 & 4) != 0)
      v20 = (unint64_t *)(*(uint64_t (**)(unint64_t **))(((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8)
                                                                               + 168))(v8);
    else
      v20 = *v8;
    v62 = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v20);
    v21 = (void ***)v20[4];
    v22 = *v20;
    *(_QWORD *)&v64 = &__p;
    if (v22)
    {
      v23 = 8 * v22;
      do
      {
        p_p = *v21;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_((void ***)&v64, &p_p);
        ++v21;
        v23 -= 8;
      }
      while (v23);
    }
    if (v10 != v11)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (a4[1] - *a4) >> 2);
      goto LABEL_45;
    }
    if (AttributeRateFromCount == 255)
      AttributeRateFromCount = getAttributeRateFromCount(a1, (v62 - (_BYTE *)__p) >> 3);
    v29 = v62 - (_BYTE *)__p;
    if (AttributeRateFromCount)
      v30 = AttributeRateFromCount;
    else
      v30 = 4 * ((unint64_t)(v62 - (_BYTE *)__p) > 8);
    goto LABEL_81;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
  {
    __p = 0;
    v62 = 0;
    v63 = 0;
    v24 = v8[1];
    if ((v24 & 4) != 0)
      v25 = (unint64_t *)(*(uint64_t (**)(unint64_t **))(((unint64_t)v24 & 0xFFFFFFFFFFFFFFF8)
                                                                               + 168))(v8);
    else
      v25 = *v8;
    v62 = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v25);
    v26 = (float64x2_t *)v25[4];
    v27 = *v25;
    *(_QWORD *)&v64 = &__p;
    if (v27)
    {
      v28 = 16 * v27;
      do
      {
        p_p = (void **)vcvt_f32_f64(*v26);
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_((void ***)&v64, &p_p);
        ++v26;
        v28 -= 16;
      }
      while (v28);
    }
    if (v10 != v11)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (a4[1] - *a4) >> 2);
      goto LABEL_45;
    }
    if (AttributeRateFromCount == 255)
      AttributeRateFromCount = getAttributeRateFromCount(a1, (v62 - (_BYTE *)__p) >> 3);
    v29 = v62 - (_BYTE *)__p;
    if (AttributeRateFromCount)
      v30 = AttributeRateFromCount;
    else
      v30 = 4 * ((unint64_t)(v62 - (_BYTE *)__p) > 8);
    goto LABEL_81;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
  {
    __p = 0;
    v62 = 0;
    v63 = 0;
    v31 = v8[1];
    if ((v31 & 4) != 0)
      v32 = (unint64_t *)(*(uint64_t (**)(unint64_t **))(((unint64_t)v31 & 0xFFFFFFFFFFFFFFF8)
                                                                               + 168))(v8);
    else
      v32 = *v8;
    v62 = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v32);
    v33 = (int32x2_t *)v32[4];
    v34 = *v32;
    *(_QWORD *)&v64 = &__p;
    if (v34)
    {
      v35 = 8 * v34;
      do
      {
        p_p = (void **)vcvt_f32_s32(*v33);
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_((void ***)&v64, &p_p);
        ++v33;
        v35 -= 8;
      }
      while (v35);
    }
    if (v10 != v11)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (a4[1] - *a4) >> 2);
      goto LABEL_45;
    }
    if (AttributeRateFromCount == 255)
      AttributeRateFromCount = getAttributeRateFromCount(a1, (v62 - (_BYTE *)__p) >> 3);
    v29 = v62 - (_BYTE *)__p;
    if (AttributeRateFromCount)
      v30 = AttributeRateFromCount;
    else
      v30 = 4 * ((unint64_t)(v62 - (_BYTE *)__p) > 8);
LABEL_81:
    MEMORY[0x2348B0AFC](a1, a5, v30, v29 >> 3);
    goto LABEL_112;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
  {
    __p = 0;
    v62 = 0;
    v63 = 0;
    v36 = v8[1];
    if ((v36 & 4) != 0)
      v37 = (unint64_t *)(*(uint64_t (**)(unint64_t **))(((unint64_t)v36 & 0xFFFFFFFFFFFFFFF8)
                                                                               + 168))(v8);
    else
      v37 = *v8;
    v62 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v37);
    v39 = (unsigned __int16 *)v37[4];
    v40 = *v37;
    p_p = &__p;
    if (v40)
    {
      v41 = &v39[3 * v40];
      v42 = MEMORY[0x24BEE8B20];
      do
      {
        LODWORD(v38) = *(_DWORD *)(v42 + 4 * *v39);
        DWORD1(v38) = *(_DWORD *)(v42 + 4 * v39[1]);
        DWORD2(v38) = *(_DWORD *)(v42 + 4 * v39[2]);
        v64 = v38;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v64);
        v39 += 3;
      }
      while (v39 != v41);
    }
    if (v10 != v11)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (a4[1] - *a4) >> 2);
LABEL_60:
      REGeomModelDescriptorAddIndexedAttributeVector3F();
      goto LABEL_112;
    }
    if (AttributeRateFromCount == 255)
      AttributeRateFromCount = getAttributeRateFromCount(a1, (v62 - (_BYTE *)__p) >> 4);
    v51 = v62 - (_BYTE *)__p;
    if (AttributeRateFromCount)
      v52 = AttributeRateFromCount;
    else
      v52 = 4 * ((unint64_t)(v62 - (_BYTE *)__p) > 0x10);
    goto LABEL_111;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
  {
    __p = 0;
    v62 = 0;
    v63 = 0;
    v43 = v8[1];
    if ((v43 & 4) != 0)
      v44 = (unint64_t *)(*(uint64_t (**)(unint64_t **))(((unint64_t)v43 & 0xFFFFFFFFFFFFFFF8)
                                                                               + 168))(v8);
    else
      v44 = *v8;
    v62 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v44);
    v46 = v44[4];
    v47 = *v44;
    p_p = &__p;
    if (v47)
    {
      v48 = 12 * v47;
      do
      {
        *(_QWORD *)&v45 = *(_QWORD *)v46;
        DWORD2(v45) = *(_DWORD *)(v46 + 8);
        v64 = v45;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v64);
        v46 += 12;
        v48 -= 12;
      }
      while (v48);
    }
    if (v10 != v11)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (a4[1] - *a4) >> 2);
      goto LABEL_60;
    }
    if (AttributeRateFromCount == 255)
      AttributeRateFromCount = getAttributeRateFromCount(a1, (v62 - (_BYTE *)__p) >> 4);
    v51 = v62 - (_BYTE *)__p;
    if (AttributeRateFromCount)
      v52 = AttributeRateFromCount;
    else
      v52 = 4 * ((unint64_t)(v62 - (_BYTE *)__p) > 0x10);
LABEL_111:
    MEMORY[0x2348B0B08](a1, a5, v52, v51 >> 4);
LABEL_112:
    if (__p)
    {
      v62 = __p;
      operator delete(__p);
    }
    return;
  }
  if ((_Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (_Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec3iEDv3_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (_Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4hEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount,
          a4) & 1) == 0
    && (_Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4fEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (_Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4dEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (_Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4iEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount,
          a4) & 1) == 0
    && (doPrimvar<pxrInternal__aapl__pxrReserved__::pxr_half::half,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (doPrimvar<float,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (doPrimvar<double,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount,
          a4) & 1) == 0
    && (doPrimvar<BOOL,unsigned char,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (doPrimvar<unsigned char,unsigned char,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (doPrimvar<int,int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount,
          a4) & 1) == 0
    && (doPrimvar<unsigned int,unsigned int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (doPrimvar<long long,int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (doPrimvar<unsigned long long,unsigned int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, a5, v10 != v11, AttributeRateFromCount,
          a4) & 1) == 0)
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::pxr_half::half>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
    {
      v49 = v8[1];
      if ((v49 & 4) != 0)
        v8 = (unint64_t **)(*(uint64_t (**)(unint64_t **))(((unint64_t)v49 & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 168))(v8);
      v50 = *(float *)(MEMORY[0x24BEE8B20] + 4 * *(unsigned __int16 *)v8);
LABEL_129:
      *(float *)&__p = v50;
      MEMORY[0x2348B0AB4](a1, a5, 0, 1, &__p);
      return;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
    {
      v53 = v8[1];
      if ((v53 & 4) != 0)
        v8 = (unint64_t **)(*(uint64_t (**)(unint64_t **))(((unint64_t)v53 & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 168))(v8);
      v50 = *(float *)v8;
      goto LABEL_129;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
    {
      v54 = v8[1];
      if ((v54 & 4) != 0)
        v8 = (unint64_t **)(*(uint64_t (**)(unint64_t **))(((unint64_t)v54 & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 168))(v8);
      v50 = *(double *)v8;
      goto LABEL_129;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
    {
      v55 = v8[1];
      if ((v55 & 4) != 0)
        v8 = (unint64_t **)(*(uint64_t (**)(unint64_t **))(((unint64_t)v55 & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 168))(v8);
      LOBYTE(__p) = *(_BYTE *)v8;
      MEMORY[0x2348B0ACC](a1, a5, 0, 1, &__p);
      return;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned char>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
    {
      v56 = v8[1];
      if ((v56 & 4) != 0)
        v8 = (unint64_t **)(*(uint64_t (**)(unint64_t **))(((unint64_t)v56 & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 168))(v8);
      LOBYTE(__p) = *(_BYTE *)v8;
      MEMORY[0x2348B0AF0](a1, a5, 0, 1, &__p);
      return;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
    {
      v57 = v8[1];
      if ((v57 & 4) != 0)
        v8 = (unint64_t **)(*(uint64_t (**)(unint64_t **))(((unint64_t)v57 & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 168))(v8);
      LODWORD(__p) = *(_DWORD *)v8;
LABEL_150:
      MEMORY[0x2348B0AC0](a1, a5, 0, 1, &__p);
      return;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
    {
      v58 = v8[1];
      if ((v58 & 4) != 0)
        v8 = (unint64_t **)(*(uint64_t (**)(unint64_t **))(((unint64_t)v58 & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 168))(v8);
      LODWORD(__p) = *(_DWORD *)v8;
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
      {
        v59 = v8[1];
        if ((v59 & 4) != 0)
          v8 = (unint64_t **)(*(uint64_t (**)(unint64_t **))(((unint64_t)v59 & 0xFFFFFFFFFFFFFFF8)
                                                                                   + 168))(v8);
        LODWORD(__p) = *v8;
        goto LABEL_150;
      }
      if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
        return;
      v60 = v8[1];
      if ((v60 & 4) != 0)
        v8 = (unint64_t **)(*(uint64_t (**)(unint64_t **))(((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 168))(v8);
      LODWORD(__p) = *v8;
    }
    MEMORY[0x2348B0AE4](a1, a5, 0, 1, &__p);
  }
}

void sub_230045628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  float64x2_t *v15;
  unint64_t v16;
  float64x2_t *v17;
  float64x2_t v18;
  float v19;
  uint64_t v20;
  void *__p;
  _BYTE *v23;
  uint64_t v24;
  float64x2_t v25;
  void **p_p;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(a2);
  if ((_DWORD)v12)
  {
    __p = 0;
    v23 = 0;
    v24 = 0;
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v14 = *(unint64_t **)a2;
    v23 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v14);
    v15 = (float64x2_t *)v14[4];
    v16 = *v14;
    p_p = &__p;
    if (v16)
    {
      v17 = (float64x2_t *)((char *)v15 + 24 * v16);
      do
      {
        v18 = *v15;
        *(float32x2_t *)&v18.f64[0] = vcvt_f32_f64(*v15);
        v19 = v15[1].f64[0];
        *(float *)&v18.f64[1] = v19;
        v25 = v18;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v25);
        v15 = (float64x2_t *)((char *)v15 + 24);
      }
      while (v15 != v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeVector3F();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v23 - (_BYTE *)__p) >> 4);
      if (AttributeRateFromCount)
        v20 = AttributeRateFromCount;
      else
        v20 = 4 * ((unint64_t)(v23 - (_BYTE *)__p) > 0x10);
      MEMORY[0x2348B0B08](a1, a3, v20, (unint64_t)(v23 - (_BYTE *)__p) >> 4);
    }
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_23004580C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec3iEDv3_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  __int128 v15;
  int32x2_t *v16;
  unint64_t v17;
  int32x2_t *v18;
  uint64_t v19;
  void *__p;
  _BYTE *v22;
  uint64_t v23;
  __int128 v24;
  void **p_p;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(a2);
  if ((_DWORD)v12)
  {
    __p = 0;
    v22 = 0;
    v23 = 0;
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v14 = *(unint64_t **)a2;
    v22 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v14);
    v16 = (int32x2_t *)v14[4];
    v17 = *v14;
    p_p = &__p;
    if (v17)
    {
      v18 = (int32x2_t *)((char *)v16 + 12 * v17);
      do
      {
        *(float32x2_t *)&v15 = vcvt_f32_s32(*v16);
        *((float *)&v15 + 2) = (float)v16[1].i32[0];
        v24 = v15;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v24);
        v16 = (int32x2_t *)((char *)v16 + 12);
      }
      while (v16 != v18);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeVector3F();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v22 - (_BYTE *)__p) >> 4);
      if (AttributeRateFromCount)
        v19 = AttributeRateFromCount;
      else
        v19 = 4 * ((unint64_t)(v22 - (_BYTE *)__p) > 0x10);
      MEMORY[0x2348B0B08](a1, a3, v19, (unint64_t)(v22 - (_BYTE *)__p) >> 4);
    }
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_2300459C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4hEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unsigned __int16 *v15;
  unint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void *__p;
  _BYTE *v23;
  uint64_t v24;
  __int128 v25;
  void **p_p;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(a2);
  if ((_DWORD)v12)
  {
    __p = 0;
    v23 = 0;
    v24 = 0;
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v14 = *(unint64_t **)a2;
    v23 = 0;
    _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v14);
    v15 = (unsigned __int16 *)v14[4];
    v16 = *v14;
    p_p = &__p;
    if (v16)
    {
      v17 = &v15[4 * v16];
      v18 = MEMORY[0x24BEE8B20];
      do
      {
        LODWORD(v19) = *(_DWORD *)(v18 + 4 * *v15);
        DWORD1(v19) = *(_DWORD *)(v18 + 4 * v15[1]);
        DWORD2(v19) = *(_DWORD *)(v18 + 4 * v15[2]);
        HIDWORD(v19) = *(_DWORD *)(v18 + 4 * v15[3]);
        v25 = v19;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v25);
        v15 += 4;
      }
      while (v15 != v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeVector4F();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v23 - (_BYTE *)__p) >> 4);
      if (AttributeRateFromCount)
        v20 = AttributeRateFromCount;
      else
        v20 = 4 * ((unint64_t)(v23 - (_BYTE *)__p) > 0x10);
      MEMORY[0x2348B0B14](a1, a3, v20, (unint64_t)(v23 - (_BYTE *)__p) >> 4);
    }
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_230045BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4fEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  __int128 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  _BYTE *v21;
  uint64_t v22;
  __int128 v23;
  void **p_p;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(a2);
  if ((_DWORD)v12)
  {
    __p = 0;
    v21 = 0;
    v22 = 0;
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v14 = *(unint64_t **)a2;
    v21 = 0;
    _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v14);
    v15 = (__int128 *)v14[4];
    v16 = *v14;
    p_p = &__p;
    if (v16)
    {
      v17 = 16 * v16;
      do
      {
        v23 = *v15;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v23);
        ++v15;
        v17 -= 16;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeVector4F();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v21 - (_BYTE *)__p) >> 4);
      if (AttributeRateFromCount)
        v18 = AttributeRateFromCount;
      else
        v18 = 4 * ((unint64_t)(v21 - (_BYTE *)__p) > 0x10);
      MEMORY[0x2348B0B14](a1, a3, v18, (unint64_t)(v21 - (_BYTE *)__p) >> 4);
    }
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_230045D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4dEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  float64x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  _BYTE *v21;
  uint64_t v22;
  float32x4_t v23;
  void **p_p;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(a2);
  if ((_DWORD)v12)
  {
    __p = 0;
    v21 = 0;
    v22 = 0;
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v14 = *(unint64_t **)a2;
    v21 = 0;
    _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v14);
    v15 = (float64x2_t *)v14[4];
    v16 = *v14;
    p_p = &__p;
    if (v16)
    {
      v17 = 32 * v16;
      do
      {
        v23 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v15), v15[1]);
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v23);
        v15 += 2;
        v17 -= 32;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeVector4F();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v21 - (_BYTE *)__p) >> 4);
      if (AttributeRateFromCount)
        v18 = AttributeRateFromCount;
      else
        v18 = 4 * ((unint64_t)(v21 - (_BYTE *)__p) > 0x10);
      MEMORY[0x2348B0B14](a1, a3, v18, (unint64_t)(v21 - (_BYTE *)__p) >> 4);
    }
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_230045EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4iEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  int32x4_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  _BYTE *v21;
  uint64_t v22;
  float32x4_t v23;
  void **p_p;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(a2);
  if ((_DWORD)v12)
  {
    __p = 0;
    v21 = 0;
    v22 = 0;
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v14 = *(unint64_t **)a2;
    v21 = 0;
    _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v14);
    v15 = (int32x4_t *)v14[4];
    v16 = *v14;
    p_p = &__p;
    if (v16)
    {
      v17 = 16 * v16;
      do
      {
        v23 = vcvtq_f32_s32(*v15);
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v23);
        ++v15;
        v17 -= 16;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeVector4F();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v21 - (_BYTE *)__p) >> 4);
      if (AttributeRateFromCount)
        v18 = AttributeRateFromCount;
      else
        v18 = 4 * ((unint64_t)(v21 - (_BYTE *)__p) > 0x10);
      MEMORY[0x2348B0B14](a1, a3, v18, (unint64_t)(v21 - (_BYTE *)__p) >> 4);
    }
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_2300460A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<pxrInternal__aapl__pxrReserved__::pxr_half::half,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  void **p_p;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(a2);
  if ((_DWORD)v12)
  {
    __p = 0;
    v22 = 0;
    v23 = 0;
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v14 = *(unint64_t **)a2;
    v22 = 0;
    std::vector<float>::reserve(&__p, *v14);
    v15 = (unsigned __int16 *)v14[4];
    v16 = *v14;
    p_p = &__p;
    if (v16)
    {
      v17 = 2 * v16;
      v18 = MEMORY[0x24BEE8B20];
      do
      {
        v24 = *(_DWORD *)(v18 + 4 * *v15);
        std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&p_p, &v24);
        ++v15;
        v17 -= 2;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeFloat();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v22 - (_BYTE *)__p) >> 2);
      if (AttributeRateFromCount)
        v19 = AttributeRateFromCount;
      else
        v19 = 4 * ((unint64_t)(v22 - (_BYTE *)__p) > 4);
      MEMORY[0x2348B0AB4](a1, a3, v19, (unint64_t)(v22 - (_BYTE *)__p) >> 2);
    }
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_230046258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<float,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  int *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  void **p_p;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a2);
  if ((_DWORD)v12)
  {
    __p = 0;
    v21 = 0;
    v22 = 0;
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v14 = *(unint64_t **)a2;
    v21 = 0;
    std::vector<float>::reserve(&__p, *v14);
    v15 = (int *)v14[4];
    v16 = *v14;
    p_p = &__p;
    if (v16)
    {
      v17 = 4 * v16;
      do
      {
        v23 = *v15;
        std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&p_p, &v23);
        ++v15;
        v17 -= 4;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeFloat();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v21 - (_BYTE *)__p) >> 2);
      if (AttributeRateFromCount)
        v18 = AttributeRateFromCount;
      else
        v18 = 4 * ((unint64_t)(v21 - (_BYTE *)__p) > 4);
      MEMORY[0x2348B0AB4](a1, a3, v18, (unint64_t)(v21 - (_BYTE *)__p) >> 2);
    }
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_230046400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<double,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  double *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  void *__p;
  _BYTE *v22;
  uint64_t v23;
  float v24;
  void **p_p;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>(a2);
  if ((_DWORD)v12)
  {
    __p = 0;
    v22 = 0;
    v23 = 0;
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v14 = *(unint64_t **)a2;
    v22 = 0;
    std::vector<float>::reserve(&__p, *v14);
    v15 = (double *)v14[4];
    v16 = *v14;
    p_p = &__p;
    if (v16)
    {
      v17 = 8 * v16;
      do
      {
        v18 = *v15;
        v24 = v18;
        std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&p_p, &v24);
        ++v15;
        v17 -= 8;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeFloat();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v22 - (_BYTE *)__p) >> 2);
      if (AttributeRateFromCount)
        v19 = AttributeRateFromCount;
      else
        v19 = 4 * ((unint64_t)(v22 - (_BYTE *)__p) > 4);
      MEMORY[0x2348B0AB4](a1, a3, v19, (unint64_t)(v22 - (_BYTE *)__p) >> 2);
    }
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_2300465AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<BOOL,unsigned char,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  size_t *v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  void *__p;
  _BYTE *v20;
  uint64_t v21;
  void **i;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(a2);
  if ((_DWORD)v12)
  {
    __p = 0;
    v20 = 0;
    v21 = 0;
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (size_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
    else
      v14 = *(size_t **)a2;
    v20 = 0;
    std::vector<unsigned char>::reserve((unint64_t *)&__p, *v14);
    v15 = (char *)v14[4];
    v16 = *v14;
    for (i = &__p; v16; --v16)
      std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100]((unint64_t **)&i, *v15++);
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeUInt8();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, v20 - (_BYTE *)__p);
      if (AttributeRateFromCount)
        v17 = AttributeRateFromCount;
      else
        v17 = 4 * ((unint64_t)(v20 - (_BYTE *)__p) > 1);
      MEMORY[0x2348B0AF0](a1, a3, v17);
    }
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_230046740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<unsigned char,unsigned char,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  size_t *v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  void *__p;
  _BYTE *v20;
  uint64_t v21;
  void **i;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(a2);
  if ((_DWORD)v12)
  {
    __p = 0;
    v20 = 0;
    v21 = 0;
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (size_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
    else
      v14 = *(size_t **)a2;
    v20 = 0;
    std::vector<unsigned char>::reserve((unint64_t *)&__p, *v14);
    v15 = (char *)v14[4];
    v16 = *v14;
    for (i = &__p; v16; --v16)
      std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100]((unint64_t **)&i, *v15++);
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeUInt8();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, v20 - (_BYTE *)__p);
      if (AttributeRateFromCount)
        v17 = AttributeRateFromCount;
      else
        v17 = 4 * ((unint64_t)(v20 - (_BYTE *)__p) > 1);
      MEMORY[0x2348B0AF0](a1, a3, v17);
    }
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_2300468D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<int,int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  std::vector<unsigned int>::size_type *v14;
  int *v15;
  std::vector<unsigned int>::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::vector<unsigned int> v20;
  int v21;
  std::vector<unsigned int> *v22;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a2);
  if ((_DWORD)v12)
  {
    memset(&v20, 0, sizeof(v20));
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (std::vector<unsigned int>::size_type *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v14 = *(std::vector<unsigned int>::size_type **)a2;
    v20.__end_ = 0;
    std::vector<int>::reserve(&v20, *v14);
    v15 = (int *)v14[4];
    v16 = *v14;
    v22 = &v20;
    if (v16)
    {
      v17 = 4 * v16;
      do
      {
        v21 = *v15;
        std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100]((uint64_t *)&v22, &v21);
        ++v15;
        v17 -= 4;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeInt32();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, v20.__end_ - v20.__begin_);
      if (AttributeRateFromCount)
        v18 = AttributeRateFromCount;
      else
        v18 = 4
            * ((std::vector<unsigned int>::pointer)((char *)v20.__end_ - (char *)v20.__begin_) > (std::vector<unsigned int>::pointer)4);
      MEMORY[0x2348B0AC0](a1, a3, v18, (unint64_t)((char *)v20.__end_ - (char *)v20.__begin_) >> 2);
    }
    if (v20.__begin_)
    {
      v20.__end_ = v20.__begin_;
      operator delete(v20.__begin_);
    }
  }
  return v12;
}

void sub_230046A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<unsigned int,unsigned int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  std::vector<unsigned int>::size_type *v14;
  int *v15;
  std::vector<unsigned int>::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::vector<unsigned int> v20;
  int v21;
  std::vector<unsigned int> *v22;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(a2);
  if ((_DWORD)v12)
  {
    memset(&v20, 0, sizeof(v20));
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (std::vector<unsigned int>::size_type *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v14 = *(std::vector<unsigned int>::size_type **)a2;
    v20.__end_ = 0;
    std::vector<int>::reserve(&v20, *v14);
    v15 = (int *)v14[4];
    v16 = *v14;
    v22 = &v20;
    if (v16)
    {
      v17 = 4 * v16;
      do
      {
        v21 = *v15;
        std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100]((uint64_t *)&v22, &v21);
        ++v15;
        v17 -= 4;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeUInt32();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, v20.__end_ - v20.__begin_);
      if (AttributeRateFromCount)
        v18 = AttributeRateFromCount;
      else
        v18 = 4
            * ((std::vector<unsigned int>::pointer)((char *)v20.__end_ - (char *)v20.__begin_) > (std::vector<unsigned int>::pointer)4);
      MEMORY[0x2348B0AE4](a1, a3, v18, (unint64_t)((char *)v20.__end_ - (char *)v20.__begin_) >> 2);
    }
    if (v20.__begin_)
    {
      v20.__end_ = v20.__begin_;
      operator delete(v20.__begin_);
    }
  }
  return v12;
}

void sub_230046C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<long long,int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  std::vector<unsigned int>::size_type *v14;
  _QWORD *v15;
  std::vector<unsigned int>::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::vector<unsigned int> v20;
  int v21;
  std::vector<unsigned int> *v22;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(a2);
  if ((_DWORD)v12)
  {
    memset(&v20, 0, sizeof(v20));
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (std::vector<unsigned int>::size_type *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v14 = *(std::vector<unsigned int>::size_type **)a2;
    v20.__end_ = 0;
    std::vector<int>::reserve(&v20, *v14);
    v15 = (_QWORD *)v14[4];
    v16 = *v14;
    v22 = &v20;
    if (v16)
    {
      v17 = 8 * v16;
      do
      {
        v21 = *v15;
        std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100]((uint64_t *)&v22, &v21);
        ++v15;
        v17 -= 8;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeInt32();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, v20.__end_ - v20.__begin_);
      if (AttributeRateFromCount)
        v18 = AttributeRateFromCount;
      else
        v18 = 4
            * ((std::vector<unsigned int>::pointer)((char *)v20.__end_ - (char *)v20.__begin_) > (std::vector<unsigned int>::pointer)4);
      MEMORY[0x2348B0AC0](a1, a3, v18, (unint64_t)((char *)v20.__end_ - (char *)v20.__begin_) >> 2);
    }
    if (v20.__begin_)
    {
      v20.__end_ = v20.__begin_;
      operator delete(v20.__begin_);
    }
  }
  return v12;
}

void sub_230046DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<unsigned long long,unsigned int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  std::vector<unsigned int>::size_type *v14;
  _QWORD *v15;
  std::vector<unsigned int>::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::vector<unsigned int> v20;
  int v21;
  std::vector<unsigned int> *v22;

  v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(a2);
  if ((_DWORD)v12)
  {
    memset(&v20, 0, sizeof(v20));
    v13 = *((_QWORD *)a2 + 1);
    if ((v13 & 4) != 0)
      v14 = (std::vector<unsigned int>::size_type *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v14 = *(std::vector<unsigned int>::size_type **)a2;
    v20.__end_ = 0;
    std::vector<int>::reserve(&v20, *v14);
    v15 = (_QWORD *)v14[4];
    v16 = *v14;
    v22 = &v20;
    if (v16)
    {
      v17 = 8 * v16;
      do
      {
        v21 = *v15;
        std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100]((uint64_t *)&v22, &v21);
        ++v15;
        v17 -= 8;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255)
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      REGeomModelDescriptorAddIndexedAttributeUInt32();
    }
    else
    {
      if (AttributeRateFromCount == 255)
        AttributeRateFromCount = getAttributeRateFromCount(a1, v20.__end_ - v20.__begin_);
      if (AttributeRateFromCount)
        v18 = AttributeRateFromCount;
      else
        v18 = 4
            * ((std::vector<unsigned int>::pointer)((char *)v20.__end_ - (char *)v20.__begin_) > (std::vector<unsigned int>::pointer)4);
      MEMORY[0x2348B0AE4](a1, a3, v18, (unint64_t)((char *)v20.__end_ - (char *)v20.__begin_) >> 2);
    }
    if (v20.__begin_)
    {
      v20.__end_ = v20.__begin_;
      operator delete(v20.__begin_);
    }
  }
  return v12;
}

void sub_230046F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t getAttributeRateFromCount(uint64_t a1, uint64_t a2)
{
  if (a2 == 1)
    return 0;
  if (REGeomModelDescriptorGetFaceCount() == a2)
    return 2;
  if (REGeomModelDescriptorGetVertexCount() == a2)
    return 1;
  if (REGeomModelDescriptorGetIndexCount() == a2)
    return 3;
  return 0;
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void ***_ZNSt3__120back_insert_iteratorINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(void ***a1, _QWORD *a2)
{
  void **v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v11 = ((char *)v5 - (_BYTE *)*v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v12 = v8 - (_QWORD)*v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = *a2;
    v10 = v16 + 8;
    v19 = (char *)*v4;
    v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = *a2;
    v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void ***_ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(void ***a1, _OWORD *a2)
{
  void **v4;
  _OWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v11 = ((char *)v5 - (_BYTE *)*v4) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v12 = v8 - (_QWORD)*v4;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v7, v14);
    else
      v15 = 0;
    v16 = &v15[16 * v11];
    v17 = &v15[16 * v14];
    *(_OWORD *)v16 = *a2;
    v10 = v16 + 16;
    v19 = (char *)*v4;
    v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v16 - 1) = v20;
        v16 -= 16;
      }
      while (v18 != v19);
      v18 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = *a2;
    v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

unint64_t **std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](unint64_t **a1, char a2)
{
  unint64_t *v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  char v16;

  v4 = *a1;
  v6 = (_BYTE *)(*a1)[1];
  v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = &v6[-*v4];
    v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v11 = v5 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unint64_t)operator new(v12);
    else
      v13 = 0;
    v14 = (char *)(v13 + v12);
    v9[v13] = a2;
    v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      v15 = &v6[~v8];
      do
      {
        v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (_BYTE *)v8);
      v6 = (_BYTE *)*v4;
    }
    *v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = a2;
    v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

void std::vector<int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *value;
  int64_t v5;
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v12;
  unsigned int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (unsigned int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

BOOL realityio::isMetaData(realityio *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  _BOOL8 v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *TargetPath;
  _BYTE v10[8];

  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(this))
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this);
  if ((*(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v10) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
  {
    TargetPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(this);
    v7 = (*(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(TargetPath) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v7 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v10);
  return v7;
}

void sub_230047864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t getAttributeRate(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = getAttributeRateHelper(a1, 0xFFu);
  if ((_DWORD)result == 255)
  {
    if (a3)
      v8 = a3;
    else
      v8 = a4;
    return getAttributeRateFromCount(a2, v8);
  }
  return result;
}

uint64_t getCountForAttributeRate(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = 1;
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      LODWORD(result) = REGeomModelDescriptorGetVertexCount();
      break;
    case 2:
      LODWORD(result) = REGeomModelDescriptorGetFaceCount();
      break;
    default:
      LODWORD(result) = REGeomModelDescriptorGetIndexCount();
      break;
  }
  return result;
}

void getResampleIndices(_QWORD *a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  unint64_t CountForAttributeRate;
  unint64_t v10;
  char *v11;
  realityio *FaceCount;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  NSObject *v38;
  _QWORD *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  unsigned int IndexCount;
  unsigned int *begin;
  uint64_t v49;
  int v50;
  std::vector<unsigned int>::pointer v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned int v54;
  _QWORD *v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  std::vector<unsigned int>::pointer v78;
  _QWORD *v79;
  unsigned int v80;
  _QWORD *v81;
  unsigned int *v82;
  unsigned int v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  std::vector<unsigned int> v87;
  std::vector<unsigned int> v88;

  CountForAttributeRate = getCountForAttributeRate(a2, a5);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (CountForAttributeRate)
  {
    v10 = CountForAttributeRate;
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, CountForAttributeRate);
    v11 = (char *)a1[1];
    bzero(v11, 8 * v10);
    a1[1] = &v11[8 * v10];
  }
  FaceCount = (realityio *)REGeomModelDescriptorGetFaceCount();
  if (a5 == 1)
  {
    v18 = *a3;
    if (*a3)
    {
      if (a4 != 2)
      {
        if (a4 == 1)
        {
          v43 = (_QWORD *)*a1;
          v44 = a1[1] - *a1;
          if (v44 && v44 >> 3 == v18)
          {
            v45 = (int *)a3[4];
            do
            {
              v46 = *v45++;
              *v43++ = v46;
              --v18;
            }
            while (v18);
          }
        }
        else if (!a4)
        {
          v19 = (_QWORD *)*a1;
          v20 = a1[1] - *a1;
          if (v20)
          {
            v21 = v20 >> 3;
            v22 = *(int *)a3[4];
            if (v21 <= 1)
              v21 = 1;
            do
            {
              *v19++ = v22;
              --v21;
            }
            while (v21);
          }
        }
        return;
      }
      v38 = *(NSObject **)(realityio::logObjects(FaceCount) + 24);
      if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        return;
      LOWORD(v88.__begin_) = 0;
    }
    else
    {
      if (a4 == 1)
      {
        v72 = (_QWORD *)*a1;
        v73 = (_QWORD *)a1[1];
        if ((_QWORD *)*a1 != v73)
        {
          v74 = 0;
          do
            *v72++ = v74++;
          while (v72 != v73);
        }
        return;
      }
      if (a4 != 2)
        return;
      v38 = *(NSObject **)(realityio::logObjects(FaceCount) + 24);
      if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        return;
      LOWORD(v88.__begin_) = 0;
    }
    _os_log_error_impl(&dword_22FF26000, v38, OS_LOG_TYPE_ERROR, "Invalid conversion from face-rate data to vertex-rate", (uint8_t *)&v88, 2u);
    return;
  }
  if (a5 != 3)
  {
    if (a5 == 2)
    {
      v13 = *a3;
      if (*a3)
      {
        if (a4 == 2)
        {
          v39 = (_QWORD *)*a1;
          v40 = a1[1] - *a1;
          if (v40 && v40 >> 3 == v13)
          {
            v41 = (int *)a3[4];
            do
            {
              v42 = *v41++;
              *v39++ = v42;
              --v13;
            }
            while (v13);
          }
        }
        else if (!a4)
        {
          v14 = (_QWORD *)*a1;
          v15 = a1[1] - *a1;
          if (v15)
          {
            v16 = v15 >> 3;
            v17 = *(int *)a3[4];
            if (v16 <= 1)
              v16 = 1;
            do
            {
              *v14++ = v17;
              --v16;
            }
            while (v16);
          }
        }
      }
      else if (a4 == 2)
      {
        v69 = (_QWORD *)*a1;
        v70 = (_QWORD *)a1[1];
        if ((_QWORD *)*a1 != v70)
        {
          v71 = 0;
          do
            *v69++ = v71++;
          while (v69 != v70);
        }
      }
      else if (!a4)
      {
        v36 = a1[1] - *a1;
        if (v36)
        {
          v37 = v36 >> 3;
          if (v37 <= 1)
            v37 = 1;
          bzero((void *)*a1, 8 * v37);
        }
      }
    }
    return;
  }
  v23 = (int)FaceCount;
  v24 = FaceCount;
  v25 = *a3;
  if (*a3)
  {
    switch(a4)
    {
      case 0:
        v26 = (_QWORD *)*a1;
        v27 = a1[1] - *a1;
        if (v27)
        {
          v28 = v27 >> 3;
          v29 = *(int *)a3[4];
          if (v28 <= 1)
            v28 = 1;
          do
          {
            *v26++ = v29;
            --v28;
          }
          while (v28);
        }
        break;
      case 1:
        std::vector<unsigned int>::vector(&v88, FaceCount);
        REGeomModelDescriptorGetFaceVertexCountsHighVertexPerPolygon();
        IndexCount = REGeomModelDescriptorGetIndexCount();
        std::vector<unsigned int>::vector(&v87, IndexCount);
        REGeomModelDescriptorGetIndices();
        begin = v87.__begin_;
        if (v23)
        {
          v49 = 0;
          v50 = 0;
          v51 = v88.__begin_;
          v52 = a3[4];
          v53 = (_QWORD *)*a1;
          do
          {
            v54 = v51[v49];
            if (v54)
            {
              v55 = &v53[v50];
              v56 = &begin[v50];
              v50 += v54;
              do
              {
                v57 = *v56++;
                *v55++ = *(int *)(v52 + 4 * v57);
                --v54;
              }
              while (v54);
            }
            ++v49;
          }
          while (v49 != v24);
        }
        goto LABEL_96;
      case 2:
        std::vector<unsigned int>::vector(&v88, FaceCount);
        REGeomModelDescriptorGetFaceVertexCountsHighVertexPerPolygon();
        v30 = v88.__begin_;
        if (v23)
        {
          v58 = 0;
          v59 = 0;
          v60 = a3[4];
          v61 = (_QWORD *)*a1;
          do
          {
            v62 = v30[v58];
            if (v62)
            {
              v63 = &v61[v59];
              v59 += v62;
              v64 = *(int *)(v60 + 4 * v58);
              do
              {
                *v63++ = v64;
                --v62;
              }
              while (v62);
            }
            ++v58;
          }
          while (v58 != v24);
        }
        goto LABEL_99;
      case 3:
        v65 = (_QWORD *)*a1;
        v66 = a1[1] - *a1;
        if (v66 && v66 >> 3 == v25)
        {
          v67 = (int *)a3[4];
          do
          {
            v68 = *v67++;
            *v65++ = v68;
            --v25;
          }
          while (v25);
        }
        break;
      default:
        return;
    }
    return;
  }
  if (a4 == 1)
  {
    std::vector<unsigned int>::vector(&v88, FaceCount);
    REGeomModelDescriptorGetFaceVertexCountsHighVertexPerPolygon();
    v75 = REGeomModelDescriptorGetIndexCount();
    std::vector<unsigned int>::vector(&v87, v75);
    REGeomModelDescriptorGetIndices();
    begin = v87.__begin_;
    if (v23)
    {
      v76 = 0;
      v77 = 0;
      v78 = v88.__begin_;
      v79 = (_QWORD *)*a1;
      do
      {
        v80 = v78[v76];
        if (v80)
        {
          v81 = &v79[v77];
          v82 = &begin[v77];
          v77 += v80;
          do
          {
            v83 = *v82++;
            *v81++ = v83;
            --v80;
          }
          while (v80);
        }
        ++v76;
      }
      while (v76 != v24);
    }
LABEL_96:
    if (begin)
    {
      v87.__end_ = begin;
      operator delete(begin);
    }
    v30 = v88.__begin_;
LABEL_99:
    if (v30)
    {
      v88.__end_ = v30;
      operator delete(v30);
    }
    return;
  }
  if (a4 != 3)
  {
    if (a4 != 2)
      return;
    std::vector<unsigned int>::vector(&v88, FaceCount);
    REGeomModelDescriptorGetFaceVertexCountsHighVertexPerPolygon();
    v30 = v88.__begin_;
    if (v23)
    {
      v31 = 0;
      v32 = 0;
      v33 = (_QWORD *)*a1;
      do
      {
        v34 = v30[v31];
        if (v34)
        {
          v35 = &v33[v32];
          v32 += v34;
          do
          {
            *v35++ = v31;
            --v34;
          }
          while (v34);
        }
        ++v31;
      }
      while (v31 != v24);
    }
    goto LABEL_99;
  }
  v84 = (_QWORD *)*a1;
  v85 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v85)
  {
    v86 = 0;
    do
      *v84++ = v86++;
    while (v84 != v85);
  }
}

void sub_230047E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<char const*>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = v4[4] & 0xFFFFFFFFFFFFFFF8;
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_node<pxrInternal__aapl__pxrReserved__::TfToken const&>(a1, a3, (uint64_t)&v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

void std::vector<realityio::MeshDescriptorAction::MaterialGroupInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *i;
  uint64_t v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    for (i = (char *)v1[1]; i != v2; i -= 48)
    {
      v5 = (uint64_t)(i - 40);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v5);
    }
    v1[1] = v2;
    operator delete(**a1);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_Equal(_QWORD **a1, _QWORD **a2)
{
  return **a1 == **a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_EqualPtr(_QWORD **a1, _QWORD *a2)
{
  return **a1 == *a2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;

  v1 = atomic_load((unsigned int *)(*result + 8));
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    v4 = (_QWORD *)*v2;
    v5 = *(_QWORD *)*v2;
    *(_QWORD *)v3 = v5;
    if (v5)
    {
      RERetain();
      v4 = (_QWORD *)*v2;
    }
    v6 = (unsigned int *)(v3 + 8);
    atomic_store(0, (unsigned int *)(v3 + 8));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = v4;
    *v2 = v3;
    return (uint64_t *)boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>::~intrusive_ptr(&v8);
  }
  return result;
}

void sub_23004819C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_StreamOut()
{
  return std::ostream::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio12WrappedRERefIP21REGeomModelDescriptorEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetProxiedAsVtValue@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;

  v2 = *a1;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 1);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v6 = realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(v2);
      MEMORY[0x2348B4E1C](v6, 0x1020C403A5D3213);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = *a2;
  *(_QWORD *)v4 = *a2;
  if (result)
    result = RERetain();
  v6 = (unsigned int *)(v4 + 8);
  atomic_store(0, (unsigned int *)(v4 + 8));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_230048360(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(v8 + 4, v9 + 4);
          pxrInternal__aapl__pxrReserved__::VtValue::operator=(v8 + 5, v9 + 5);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v5, v18, leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue> const&>(v5, a2 + 4);
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_230048500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue> const&>(uint64_t **a1, uint64_t *a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  uint64_t *v6;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v5, leaf_high, v6);
  return v6;
}

void sub_2300485BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11)
{
  if (a10)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

_QWORD *realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_Equal(_QWORD **a1, _QWORD **a2)
{
  return **a1 == **a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_EqualPtr(_QWORD **a1, _QWORD *a2)
{
  return **a1 == *a2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;

  v1 = atomic_load((unsigned int *)(*result + 8));
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    v4 = (_QWORD *)*v2;
    v5 = *(_QWORD *)*v2;
    *(_QWORD *)v3 = v5;
    if (v5)
    {
      RERetain();
      v4 = (_QWORD *)*v2;
    }
    v6 = (unsigned int *)(v3 + 8);
    atomic_store(0, (unsigned int *)(v3 + 8));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = v4;
    *v2 = v3;
    return (uint64_t *)boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>::~intrusive_ptr(&v8);
  }
  return result;
}

void sub_23004873C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_StreamOut()
{
  return std::ostream::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio12WrappedRERefIP17REAssetDescriptorEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetProxiedAsVtValue@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;

  v2 = *a1;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 1);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v6 = realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef(v2);
      MEMORY[0x2348B4E1C](v6, 0x1020C403A5D3213);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>::_PlaceCopy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = *a2;
  *(_QWORD *)v4 = *a2;
  if (result)
    result = RERetain();
  v6 = (unsigned int *)(v4 + 8);
  atomic_store(0, (unsigned int *)(v4 + 8));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_230048900(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t realityio::TextureSwizzleChannels::fromOutputSourceName(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  if (((char)a1[23] & 0x80000000) == 0)
  {
    v1 = a1[23];
    if (v1 != 1)
    {
      if (v1 != 3)
        goto LABEL_12;
      goto LABEL_8;
    }
    v8 = *a1;
    goto LABEL_15;
  }
  v2 = *((_QWORD *)a1 + 1);
  if (v2 == 1)
  {
    v8 = **(unsigned __int8 **)a1;
LABEL_15:
    if (v8 <= 102)
    {
      if (v8 == 97)
      {
        v5 = 0x1000000;
        v4 = 5;
        v7 = 1280;
        v6 = 327680;
        return v7 | v5 | v6 | v4;
      }
      if (v8 != 98)
        goto LABEL_12;
      v5 = 0x1000000;
      v4 = 4;
      v7 = 1024;
      goto LABEL_23;
    }
    if (v8 == 103)
    {
      v5 = 0x1000000;
      v4 = 3;
      v7 = 768;
      v6 = 196608;
      return v7 | v5 | v6 | v4;
    }
    if (v8 == 114)
    {
      v5 = 0x1000000;
      v4 = 2;
      v7 = 512;
      v6 = 0x20000;
      return v7 | v5 | v6 | v4;
    }
    goto LABEL_12;
  }
  if (v2 == 3)
  {
    a1 = *(unsigned __int8 **)a1;
LABEL_8:
    if (*(_WORD *)a1 != 26482 || a1[2] != 98)
      goto LABEL_12;
    v5 = 0x1000000;
    v4 = 2;
    v7 = 768;
LABEL_23:
    v6 = 0x40000;
    return v7 | v5 | v6 | v4;
  }
LABEL_12:
  v4 = realityio::TextureSwizzleChannels::kDefault;
  v5 = HIBYTE(realityio::TextureSwizzleChannels::kDefault) << 24;
  v6 = BYTE2(realityio::TextureSwizzleChannels::kDefault) << 16;
  v7 = BYTE1(realityio::TextureSwizzleChannels::kDefault) << 8;
  return v7 | v5 | v6 | v4;
}

uint64_t realityio::TextureSwizzleChannels::channelFromChar(unsigned __int8 *a1)
{
  int v1;
  int v2;

  v1 = (char)a1[23];
  if ((v1 & 0x80000000) == 0)
  {
    if (v1 == 1)
    {
      v2 = *a1;
      goto LABEL_6;
    }
    return 1;
  }
  if (*((_QWORD *)a1 + 1) != 1)
    return 1;
  v2 = **(unsigned __int8 **)a1;
LABEL_6:
  switch(v2)
  {
    case 'b':
      return 4;
    case 'g':
      return 3;
    case 'r':
      return 2;
    case 'a':
      return 5;
  }
  return 1;
}

void realityio::stringFromCFData(realityio *this@<X0>, std::string *a2@<X8>)
{
  CFIndex Length;
  UInt8 *v6;
  std::string *v7;
  CFRange v8;

  Length = CFDataGetLength(this);
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  std::string::resize(a2, Length + 1, 0);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = (UInt8 *)a2;
  else
    v6 = (UInt8 *)a2->__r_.__value_.__r.__words[0];
  v8.location = 0;
  v8.length = Length;
  CFDataGetBytes(this, v8, v6);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = a2;
  else
    v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  v7->__r_.__value_.__s.__data_[Length] = 0;
}

void sub_230048B34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void realityio::stringFromCFString(realityio *this@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  char *v6;
  char v7;
  __int128 v8;
  uint64_t v9;

  v5 = (void *)MEMORY[0x2348B514C](this, a2);
  v6 = (char *)-[realityio UTF8String](objc_retainAutorelease(this), "UTF8String");
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, v6);
    *(_OWORD *)a3 = v8;
    *(_QWORD *)(a3 + 16) = v9;
    objc_autoreleasePoolPop(v5);
    v7 = 1;
  }
  else
  {
    objc_autoreleasePoolPop(v5);
    v7 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 24) = v7;
}

void realityio::asWrappedCFStringRef(uint64_t a1@<X0>, CFStringRef *a2@<X8>)
{
  const char *v3;
  CFStringRef v4;
  CFStringRef v5;

  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  v5 = v4;
  *a2 = v4;
  if (v4)
    CFRetain(v4);
  CFRelease(v5);
}

void sub_230048C30(_Unwind_Exception *a1)
{
  const void **v1;

  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

CFStringRef realityio::joinAsCFStringRef(unint64_t a1, const void **a2)
{
  const std::string::value_type **v2;
  const std::string::value_type *v3;
  std::string::size_type size;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t EmptyString;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  __int128 v11;
  __int128 v12;
  std::string::value_type *v13;
  const std::string::value_type **v14;
  BOOL v15;
  std::string *v16;
  CFStringRef v17;
  std::string __p;
  std::string v20;
  std::string v21;
  std::string v22;

  v2 = (const std::string::value_type **)(a1 + 8);
  v3 = *(const std::string::value_type **)a1;
  memset(&__p, 0, sizeof(__p));
  if (v3 != (const std::string::value_type *)(a1 + 8))
  {
    do
    {
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size)
      {
        v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p.__r_.__value_.__l.__data_, a2, (uint64_t)&v22);
        if ((*((_QWORD *)v3 + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (*((_QWORD *)v3 + 4) & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
        v8 = *(char *)(EmptyString + 23);
        if (v8 >= 0)
          v9 = (const std::string::value_type *)EmptyString;
        else
          v9 = *(const std::string::value_type **)EmptyString;
        if (v8 >= 0)
          v10 = *(unsigned __int8 *)(EmptyString + 23);
        else
          v10 = *(_QWORD *)(EmptyString + 8);
        a1 = (unint64_t)std::string::append(&v22, v9, v10);
        v11 = *(_OWORD *)a1;
        v21.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
      }
      else
      {
        if ((*((_QWORD *)v3 + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
          a1 = (*((_QWORD *)v3 + 4) & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          a1 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
        if (*(char *)(a1 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
        }
        else
        {
          v12 = *(_OWORD *)a1;
          v21.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
          *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v12;
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v21;
      v13 = (std::string::value_type *)*((_QWORD *)v3 + 1);
      if (v13)
      {
        do
        {
          v14 = (const std::string::value_type **)v13;
          v13 = *(std::string::value_type **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (const std::string::value_type **)*((_QWORD *)v3 + 2);
          v15 = *v14 == v3;
          v3 = (const std::string::value_type *)v14;
        }
        while (!v15);
      }
      v3 = (const std::string::value_type *)v14;
    }
    while (v14 != v2);
  }
  v20 = __p;
  memset(&__p, 0, sizeof(__p));
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v20;
  else
    v16 = (std::string *)v20.__r_.__value_.__r.__words[0];
  v17 = CFStringCreateWithCString(0, (const char *)v16, 0x8000100u);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  return v17;
}

void sub_230048E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

CFStringRef realityio::joinAsCFStringRef(realityio *this, const __CFArray *a2, const char *a3)
{
  const __CFString *v4;
  CFStringRef v5;

  v4 = CFStringCreateWithCStringNoCopy(0, (const char *)a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v5 = CFStringCreateByCombiningStrings(0, this, v4);
  CFRelease(v4);
  return v5;
}

void realityio::CFStringCopyUTF8String(__CFString *this@<X0>, uint64_t a2@<X8>)
{
  char *CStringPtr;
  void *v6;
  const std::error_category *v7;
  std::string v8;
  _DWORD v9[2];

  if (this)
  {
    CStringPtr = (char *)CFStringGetCStringPtr(this, 0x8000100u);
    if (!CStringPtr)
      CStringPtr = (char *)-[__CFString UTF8String](objc_retainAutorelease(this), "UTF8String");
    std::string::basic_string[abi:ne180100]<0>(&v8, CStringPtr);
    v6 = (void *)v8.__r_.__value_.__r.__words[0];
    v9[0] = v8.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v9 + 3) = *(_DWORD *)((char *)&v8.__r_.__value_.__r.__words[2] + 3);
    if ((*((_BYTE *)&v8.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&v8, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
      *(_BYTE *)a2 = 1;
      *(std::string *)(a2 + 8) = v8;
      operator delete(v6);
    }
    else
    {
      LODWORD(v8.__r_.__value_.__r.__words[2]) = v9[0];
      *(_DWORD *)((char *)&v8.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v9 + 3);
      *(_BYTE *)a2 = 1;
      *(std::string *)(a2 + 8) = v8;
    }
  }
  else
  {
    v7 = std::system_category();
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = v7;
  }
}

void sub_230048F88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void realityio::updateStringMapFromCFDictionary(__CFString *this, __CFString *a2, uint64_t **a3, void *a4)
{
  uint64_t *v6;
  _BYTE v7[8];
  std::string __p;
  _BYTE v9[8];
  void *v10[2];
  char v11;
  void **v12;

  realityio::CFStringCopyUTF8String(this, (uint64_t)v9);
  if (v9[0])
  {
    realityio::CFStringCopyUTF8String(a2, (uint64_t)v7);
    if (v7[0])
    {
      v12 = v10;
      v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (const void **)v10, (uint64_t)&std::piecewise_construct, (__int128 **)&v12);
      std::string::operator=((std::string *)(v6 + 7), &__p);
      if (v7[0])
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (v9[0])
    {
      if (v11 < 0)
        operator delete(v10[0]);
    }
  }
}

void sub_230049054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16)
  {
    if (a22 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::urlSafeString(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  objc_msgSend(MEMORY[0x24BDD14A8], "URLQueryAllowedCharacterSet");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (*((char *)a1 + 23) >= 0)
    v4 = a1;
  else
    v4 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByAddingPercentEncodingWithAllowedCharacters:", v8);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_retainAutorelease(v6);
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)objc_msgSend(v7, "UTF8String"));

}

void sub_230049138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void realityio::createRETextureImportOperation(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  const char *v7;
  const std::error_category *v8;
  uint64_t v9;
  const std::error_category *v10;
  uint64_t v11;
  CFStringRef v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  CFTypeRef cf[2];
  uint64_t v19;
  __int128 v20;

  if (a1)
  {
    v15 = RETextureImportOperationCreateWithData();
    if (!v15)
    {
      v10 = std::system_category();
      std::string::basic_string[abi:ne180100]<0>(__p, "Failed to create import operation");
      realityio::DetailedError::DetailedError(cf, 0, (uint64_t)v10, (__int128 *)__p);
      *(_OWORD *)(a4 + 8) = *(_OWORD *)cf;
      v11 = v20;
      *(_QWORD *)(a4 + 24) = v19;
      *(_QWORD *)(a4 + 32) = v11;
      *(_QWORD *)(a4 + 39) = *(_QWORD *)((char *)&v20 + 7);
      LOBYTE(v11) = HIBYTE(v20);
      v20 = 0uLL;
      v19 = 0;
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 47) = v11;
      if (v17 < 0)
        operator delete(__p[0]);
      goto LABEL_28;
    }
    RERetain();
    RERelease();
    if (a3)
      RETextureImportOperationSetDoneWithSourceCallback();
    if (*(_DWORD *)(a2 + 72))
      RETextureImportOperationSetSemantic();
    v7 = (const char *)(a2 + 48);
    if (*(char *)(a2 + 71) < 0)
    {
      if (*(_QWORD *)(a2 + 56))
      {
        cf[0] = 0;
        v7 = *(const char **)v7;
LABEL_16:
        v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, 0x8000100u);
        cf[0] = v12;
        if (v12 && MEMORY[0x2348B142C](v12))
          RETextureImportOperationSetColorSpaceName();
        realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(cf);
      }
    }
    else if (*(_BYTE *)(a2 + 71))
    {
      cf[0] = 0;
      goto LABEL_16;
    }
    if (*(_DWORD *)(a2 + 84))
    {
      RETextureImportOperationSetDimensionsMode();
      RETextureImportOperationSetDownsampleFactor();
    }
    if (!*(_BYTE *)(a2 + 89) || *(_BYTE *)(a2 + 89) == 1)
      RETextureImportOperationSetCompressionType();
    RETextureImportOperationCopyTextureDescriptorTemplate();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setSwizzle:", *(unsigned int *)(a2 + 76));
    if (*(_BYTE *)(a2 + 88))
    {
      RETextureImportOperationSetPixelFormatMode();
      objc_msgSend(v13, "setPixelFormat:", 10);
    }
    RETextureImportOperationSetTextureDescriptorTemplate();
    v14 = v15;
    v15 = 0;
    *(_BYTE *)a4 = 1;
    *(_QWORD *)(a4 + 8) = v14;
    cf[0] = 0;
    realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef(cf);

LABEL_28:
    realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef(&v15);
    return;
  }
  v8 = std::system_category();
  std::string::basic_string[abi:ne180100]<0>(__p, "Could not find service locator");
  realityio::DetailedError::DetailedError(cf, 0, (uint64_t)v8, (__int128 *)__p);
  *(_OWORD *)(a4 + 8) = *(_OWORD *)cf;
  v9 = v20;
  *(_QWORD *)(a4 + 24) = v19;
  *(_QWORD *)(a4 + 32) = v9;
  *(_QWORD *)(a4 + 39) = *(_QWORD *)((char *)&v20 + 7);
  LOBYTE(v9) = HIBYTE(v20);
  v20 = 0uLL;
  v19 = 0;
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 47) = v9;
  if (v17 < 0)
    operator delete(__p[0]);
}

void sub_230049410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va1);
  realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9realityio30createRETextureImportOperationEP16REServiceLocatorNS_12WrappedCFRefIPK8__CFDataEERKNS_30TextureImportOperationSettingsEPKNSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

CFErrorRef realityio::createError(uint64_t a1)
{
  const char *v1;
  const __CFString *v2;
  CFErrorRef v3;
  CFTypeRef cf;
  void *userInfoKeys;

  userInfoKeys = (void *)*MEMORY[0x24BDBD378];
  if (*(char *)(a1 + 23) >= 0)
    v1 = (const char *)a1;
  else
    v1 = *(const char **)a1;
  cf = CFStringCreateWithCString(0, v1, 0x8000100u);
  v2 = CFStringCreateWithCString(0, "RealityIO", 0x8000100u);
  v3 = CFErrorCreateWithUserInfoKeysAndValues(0, v2, 100, (const void *const *)&userInfoKeys, &cf, 1);
  CFRelease(v2);
  CFRelease(cf);
  return v3;
}

void realityio::filterPathName(std::string *a1, uint64_t a2)
{
  unsigned __int8 v3;
  std::string::size_type size;
  std::string *p_p;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v3 = atomic_load((unsigned __int8 *)&_MergedGlobals_17);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_17))
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)&unk_255E54860, "[^A-Za-z0-9_.]", 0);
    __cxa_guard_release(&_MergedGlobals_17);
  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char *>,std::regex_traits<char>,char>(a1, (char *)p_p, (char *)p_p + size, (uint64_t)&unk_255E54860, "_", 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_230049604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  __cxa_guard_abort(&_MergedGlobals_17);
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char *>,std::regex_traits<char>,char>(std::string *a1, char *a2, char *a3, uint64_t a4, char *a5, int a6)
{
  __int16 v6;
  std::string::value_type *v9;
  std::string::value_type *v11;
  std::string::value_type *v12;
  unsigned __int8 *v13;
  std::string::value_type *v14;
  std::string::value_type *v15;
  _QWORD v17[3];
  int v18;
  void *__p[2];
  _BYTE v20[25];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  _BYTE v29[32];
  void *v30[14];

  v6 = a6;
  v9 = a2;
  std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::regex_iterator((uint64_t)v29, a2, a3, a4, a6);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  *(_OWORD *)__p = 0u;
  memset(v20, 0, sizeof(v20));
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  if (std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::operator==((uint64_t)v29, (uint64_t)v17))
  {
    if ((v6 & 0x200) == 0)
    {
      while (v9 != a3)
        std::string::push_back(a1, *v9++);
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = (unsigned __int8 *)&a5[strlen(a5)];
    while (!std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::operator==((uint64_t)v29, (uint64_t)v17))
    {
      if ((v6 & 0x200) == 0)
      {
        v14 = (std::string::value_type *)v30[6];
        v15 = (std::string::value_type *)v30[7];
        while (v14 != v15)
          std::string::push_back(a1, *v14++);
      }
      a1 = std::match_results<std::__wrap_iter<char *>>::format<std::back_insert_iterator<std::string>>((std::string::value_type ***)v30, a1, (unsigned __int8 *)a5, v13, v6);
      v12 = (std::string::value_type *)v30[9];
      v11 = (std::string::value_type *)v30[10];
      if ((v6 & 0x400) != 0)
        break;
      std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::operator++((uint64_t)v29);
    }
    if ((v6 & 0x200) == 0)
    {
      while (v12 != v11)
        std::string::push_back(a1, *v12++);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  return a1;
}

void sub_2300497C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

void realityio::TextureImportOperationSettings::makeTextureResourceKey(realityio::TextureImportOperationSettings *this@<X0>, std::string *a2@<X8>)
{
  unsigned int v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *p_str;
  std::string::size_type size;
  int v12;
  const char *v13;
  uint64_t v14;
  size_t v15;
  const char *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  int v37;
  int64_t v38;
  std::string::size_type v39;
  std::string *v40;
  realityio::TextureImportOperationSettings *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  char *v47;
  int v48;
  int64_t v49;
  std::string *v50;
  int64_t v51;
  char *v52;
  char *v53;
  unsigned __int8 *v54;
  realityio::TextureImportOperationSettings *v55;
  char *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  int v59;
  std::string __dst;
  std::string __str;
  std::string v62;
  char __s[3];
  __int16 v64;

  v5 = *((_DWORD *)this + 21);
  if (v5)
  {
    std::to_string(&__str, v5);
    v6 = std::string::insert(&__str, 0, ".downsample_");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v62, "");
  }
  if (*((_BYTE *)this + 88))
  {
    std::to_string(&__dst, 0xAuLL);
    v8 = std::string::insert(&__dst, 0, ".pixelFormat_");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    std::string::append(&v62, (const std::string::value_type *)p_str, size);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v12 = *((unsigned __int8 *)this + 89);
  if (v12 != 2)
  {
    v13 = "NotSet";
    v14 = 6;
    if (v12 == 1)
    {
      v14 = 8;
      v13 = "GPULossy";
    }
    if (*((_BYTE *)this + 89))
      v15 = v14;
    else
      v15 = 4;
    if (*((_BYTE *)this + 89))
      v16 = v13;
    else
      v16 = "None";
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
    memcpy(&__dst, v16, v15);
    __dst.__r_.__value_.__s.__data_[v15] = 0;
    v17 = std::string::insert(&__dst, 0, ".textureCompression_");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &__str;
    else
      v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v20 = __str.__r_.__value_.__l.__size_;
    std::string::append(&v62, (const std::string::value_type *)v19, v20);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  __s[0] = realityio::TextureSwizzleChannels::toString(void)const::toChar[*((unsigned __int8 *)this + 76)];
  __s[1] = realityio::TextureSwizzleChannels::toString(void)const::toChar[*((unsigned __int8 *)this + 77)];
  __s[2] = realityio::TextureSwizzleChannels::toString(void)const::toChar[*((unsigned __int8 *)this + 78)];
  v64 = realityio::TextureSwizzleChannels::toString(void)const::toChar[*((unsigned __int8 *)this + 79)];
  std::string::basic_string[abi:ne180100]<0>(&__dst, __s);
  v21 = std::string::insert(&__dst, 0, ".swizzle_");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &__str;
  else
    v23 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v24 = __str.__r_.__value_.__l.__size_;
  std::string::append(&v62, (const std::string::value_type *)v23, v24);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  std::to_string(&__dst, *((unsigned __int8 *)this + 80));
  v25 = std::string::insert(&__dst, 0, ".texturetype_");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &__str;
  else
    v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v28 = __str.__r_.__value_.__l.__size_;
  std::string::append(&v62, (const std::string::value_type *)v27, v28);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__dst, off_24FDF0230[*((int *)this + 18)]);
  v29 = std::string::insert(&__dst, 0, ".semantic_");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &__str;
  else
    v31 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v32 = __str.__r_.__value_.__l.__size_;
  std::string::append(&v62, (const std::string::value_type *)v31, v32);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (*((char *)this + 71) < 0)
  {
    if (!*((_QWORD *)this + 7))
      goto LABEL_79;
  }
  else if (!*((_BYTE *)this + 71))
  {
    goto LABEL_79;
  }
  realityio::filterPathName(&__dst, (uint64_t)this + 48);
  v33 = std::string::insert(&__dst, 0, ".colorSpace_");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &__str;
  else
    v35 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v36 = __str.__r_.__value_.__l.__size_;
  std::string::append(&v62, (const std::string::value_type *)v35, v36);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_79:
  if (*((char *)this + 47) < 0)
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  else
    __str = *(std::string *)((_BYTE *)this + 1);
  v37 = *((char *)this + 119);
  if (v37 >= 0)
    v38 = *((unsigned __int8 *)this + 119);
  else
    v38 = *((_QWORD *)this + 13);
  if (v38)
  {
    v39 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__str.__r_.__value_.__r.__words[2])
        : __str.__r_.__value_.__l.__size_;
    if (v39 > v38)
    {
      v40 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      v41 = v37 >= 0
          ? (realityio::TextureImportOperationSettings *)((char *)this + 96)
          : (realityio::TextureImportOperationSettings *)*((_QWORD *)this + 12);
      if ((uint64_t)v39 >= v38)
      {
        v47 = (char *)v40 + v39;
        v48 = *(char *)v41;
        v49 = v39;
        v50 = v40;
        do
        {
          v51 = v49 - v38;
          if (v51 == -1)
            break;
          v52 = (char *)memchr(v50, v48, v51 + 1);
          if (!v52)
            break;
          v53 = v52;
          if (!memcmp(v52, v41, v38))
          {
            if (v53 != v47 && v53 - (char *)v40 != -1)
            {
              v54 = (unsigned __int8 *)v41 + v38;
              v55 = v41;
              v56 = (char *)v41 + v38;
              do
              {
                v57 = (unsigned __int8 *)v55;
                v58 = (unsigned __int8 *)v55;
                while (1)
                {
                  v59 = *v58++;
                  if (v59 == 47)
                    break;
                  v57 = v58;
                  if (v58 == v54)
                  {
                    v57 = (unsigned __int8 *)v56;
                    goto LABEL_136;
                  }
                }
                v55 = (realityio::TextureImportOperationSettings *)(v57 + 1);
                v56 = (char *)v57;
              }
              while (v58 != v54);
LABEL_136:
              if (v57 != v54 && v57 - (unsigned __int8 *)v41 != -1)
              {
                std::string::basic_string(&__dst, &__str, v57 - (unsigned __int8 *)v41, v39 - (v57 - (unsigned __int8 *)v41), (std::allocator<char> *)__s);
                std::string::operator=(&__str, &__dst);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
              }
            }
            break;
          }
          v50 = (std::string *)(v53 + 1);
          v49 = v47 - (v53 + 1);
        }
        while (v49 >= v38);
      }
    }
  }
  realityio::filterPathName(&__dst, (uint64_t)&__str);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(a2, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    *a2 = __dst;
  if (std::string::rfind(a2, 46, 0xFFFFFFFFFFFFFFFFLL) == -1)
  {
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = &v62;
    else
      v45 = (std::string *)v62.__r_.__value_.__r.__words[0];
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    else
      v46 = v62.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v45, v46);
  }
  else
  {
    v42 = std::string::find(a2, 46, 0);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = &v62;
    else
      v43 = (std::string *)v62.__r_.__value_.__r.__words[0];
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    else
      v44 = v62.__r_.__value_.__l.__size_;
    std::string::insert(a2, v42, (const std::string::value_type *)v43, v44);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
}

void sub_230049E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, char *a2, int a3)
{
  std::regex_traits<char> *v6;
  size_t v7;

  v6 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v6[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v6[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[1].__col_ + 4) = 0u;
  HIDWORD(v6[2].__ct_) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)&a2[v7]) != (std::basic_regex<char> *)&a2[v7])std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_230049FF8(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x2348B4D68]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x24BEDB4B0]);
  return this;
}

void sub_23004A05C(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_24FDEFB28;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>((std::basic_regex<char> *)a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (char *)a3);
  }
}

void sub_23004A1C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 17);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_23004A218(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 != (unsigned __int8 *)a3)
  {
    while (*v8 == 124)
    {
      v12 = a1->__end_;
      v13 = v8 + 1;
      v14 = v8 + 1;
      do
      {
        v8 = v14;
        v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v14, a3);
      }
      while (v14 != v8);
      if (v8 == v13)
      {
        v15 = (std::__node<char> *)operator new();
        v16 = a1->__end_;
        v17 = v16->__first_;
        v15[1].__vftable = (std::__node<char>_vtbl *)v17;
        v16->__first_ = v15;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
      if (v8 == (unsigned __int8 *)a3)
        return a3;
    }
    return (char *)v8;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return (char *)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_24FDEFCA0;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, (char *)v3, v4);
    }
    while (v3 != v10);
    if (v10 != (unsigned __int8 *)v4)
    {
      if (v10 + 1 != (unsigned __int8 *)v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_24FDEFCE8;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (std::basic_regex<char> *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = v8 + 1;
  while (v12 != a3)
  {
    v13 = (unsigned __int8 *)memchr(v12, 10, a3 - v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = v14 + 1;
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *end;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::basic_regex<char> *v12;
  std::basic_regex<char> *v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
  while (v12 != a3)
  {
    v13 = (std::basic_regex<char> *)memchr(v12, 10, (char *)a3 - (char *)v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 14);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_23004A8B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x2348B4E1CLL);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

_QWORD *std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24FDEFB80;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23004A950(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x2348B4E1CLL);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&unk_24FDF0168;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&unk_24FDF01B0;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  char *v3;
  int v6;
  char *v7;
  BOOL v8;
  char *v9;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v18;
  int v20;
  BOOL v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      v8 = v6 == 40;
      v7 = a2 + 1;
      v8 = !v8 || v7 == a3;
      if (!v8)
      {
        v8 = *v7 == 63;
        v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            marked_count = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            v13 = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_31:
            v3 = v12 + 1;
            std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v23.__start_);
            std::locale::~locale(&v23.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
LABEL_21:
    *(_QWORD *)v14 = v18 + 16;
    *(_QWORD *)(v14 + 8) = first;
    *(_BYTE *)(v14 + 16) = v15;
    end->__first_ = (std::__node<char> *)v14;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    goto LABEL_21;
  }
  if (a2 + 1 != a3)
  {
    v20 = a2[1];
    if (v20 == 66)
    {
      v21 = 1;
    }
    else
    {
      if (v20 != 98)
        return v3;
      v21 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v21);
    v3 += 2;
  }
  return v3;
}

void sub_23004AF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v6;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  int *p_open_count;
  unsigned __int8 *v12;
  unsigned int marked_count;
  unsigned __int8 *v14;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = (char)*a2;
  if (v6 > 62)
  {
    if (v6 > 91)
    {
      if (v6 == 92)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, a2, a3);
      if (v6 != 123)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
    else
    {
      if (v6 == 91)
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      if (v6 != 63)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
LABEL_29:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
  if (v6 == 40)
  {
    if (a2 + 1 == a3)
      goto LABEL_30;
    if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
    {
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
      if (v12 == a3)
        goto LABEL_30;
      v3 = v12;
      if (*v12 != 41)
        goto LABEL_30;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v14 == a3 || (v3 = v14, *v14 != 41))
LABEL_30:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
    }
    --*p_open_count;
    return ++v3;
  }
  if (v6 == 46)
  {
    v7 = (std::__node<char> *)operator new();
    end = this->__end_;
    first = end->__first_;
    v7->__vftable = (std::__node<char>_vtbl *)&unk_24FDEFDC0;
    v7[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v7;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if ((v6 - 42) < 2)
    goto LABEL_29;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &unk_24FDEFD30;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  std::__node<char> *v8;

  v8 = (std::__node<char> *)operator new();
  std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100]((uint64_t)v8, (uint64_t)a2, a3, (uint64_t)this->__end_->__first_, a4);
  this->__end_->__first_ = v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_23004B55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 6);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_23004B5B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24FDEFD30;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24FDEFD30;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &unk_24FDEFD78;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(_BYTE *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24FDEFD78;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24FDEFD78;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::sub_match<const char *> *begin;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  std::vector<std::csub_match>::value_type v22;
  char v23;
  uint64_t v24;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  memset(&v22, 0, 17);
  v23 = 0;
  v24 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  v19 = v5;
  v20 = v5;
  v21 = 0;
  v22 = v18;
  v24 = v5;
  v23 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_23004BC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::match_results<char const*>::__init(std::match_results<const char *> *this, unsigned int __s, const char *__f, const char *__l, BOOL __no_update_pos)
{
  std::match_results<const char *>::value_type *p_unmatched;

  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos)
    this->__position_start_ = __f;
  this->__ready_ = 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  _OWORD *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  const char *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t *v34;
  _BYTE v37[56];
  void *__p[2];
  _QWORD v39[4];
  std::vector<std::csub_match>::value_type __x;
  _OWORD *v41;
  _OWORD *v42;
  unint64_t v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v39, 0, 21);
    v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v37[32])
    {
      *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    v34 = a4;
    v11 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((_QWORD *)v11 - 11) = a2;
    *((_QWORD *)v11 - 10) = a2;
    *((_QWORD *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    v12 = v42;
    *((_QWORD *)v42 - 2) = v6;
    *((_DWORD *)v12 - 2) = a5;
    *((_BYTE *)v12 - 4) = a6;
    v13 = 1;
    while (2)
    {
      if ((v13 & 0xFFF) == 0 && (int)(v13 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v15 = v12 - 1;
      v14 = *((_QWORD *)v12 - 2);
      v16 = v12 - 6;
      if (v14)
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 16))(v14, v12 - 6);
      switch(*(_DWORD *)v16)
      {
        case 0xFFFFFC18:
          v17 = (const char *)*((_QWORD *)v12 - 10);
          if ((a5 & 0x20) != 0 && v17 == a2 || (a5 & 0x1000) != 0 && v17 != a3)
            goto LABEL_16;
          v25 = *v34;
          *(_QWORD *)v25 = a2;
          *(_QWORD *)(v25 + 8) = v17;
          *(_BYTE *)(v25 + 16) = 1;
          v26 = *((_QWORD *)v12 - 8);
          v27 = *((_QWORD *)v12 - 7) - v26;
          if (v27)
          {
            v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
            v29 = (_BYTE *)(v26 + 16);
            v30 = 1;
            do
            {
              v31 = v25 + 24 * v30;
              *(_OWORD *)v31 = *((_OWORD *)v29 - 1);
              v32 = *v29;
              v29 += 24;
              *(_BYTE *)(v31 + 16) = v32;
            }
            while (v28 > v30++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v18 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (_QWORD *)v42 - 12);
          v42 = v18;
          goto LABEL_23;
        case 0xFFFFFC20:
          v19 = *(v12 - 5);
          *(_OWORD *)v37 = *v16;
          *(_OWORD *)&v37[16] = v19;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v37[32], *((__int128 **)v12 - 8), *((__int128 **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v12 - 5), *((__int128 **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          v20 = *v15;
          *(_QWORD *)((char *)&v39[1] + 5) = *(_QWORD *)((char *)v12 - 11);
          v39[1] = v20;
          (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v15 + 24))(*v15, 1, v12 - 6);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v39[1] + 24))(v39[1], 0, v37);
          v21 = v42;
          if ((unint64_t)v42 >= v43)
          {
            v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v22 = *(_OWORD *)&v37[16];
            *v42 = *(_OWORD *)v37;
            v21[1] = v22;
            *((_QWORD *)v21 + 4) = 0;
            *((_QWORD *)v21 + 5) = 0;
            *((_QWORD *)v21 + 6) = 0;
            *((_QWORD *)v21 + 7) = 0;
            v21[2] = *(_OWORD *)&v37[32];
            *((_QWORD *)v21 + 6) = *(_QWORD *)&v37[48];
            memset(&v37[32], 0, 24);
            *((_QWORD *)v21 + 8) = 0;
            *((_QWORD *)v21 + 9) = 0;
            *(_OWORD *)((char *)v21 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v21 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            v23 = v39[1];
            *(_QWORD *)((char *)v21 + 85) = *(_QWORD *)((char *)&v39[1] + 5);
            *((_QWORD *)v21 + 10) = v23;
            v42 = v21 + 6;
          }
          if (*(_QWORD *)&v37[32])
          {
            *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          v12 = v42;
          ++v13;
          if (v41 != v42)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_23004C08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::size_type v3;
  BOOL v4;
  std::vector<std::csub_match>::size_type v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  v4 = __sz >= v3;
  v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 12);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_23004C33C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 16);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_23004C388(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 85) = *(_QWORD *)(a2 + 85);
  *((_QWORD *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_23004C4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 - 48);
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 11) = *(_QWORD *)(a3 - 11);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 96;
      *((_QWORD *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<std::__state<char>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::__state<char>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::__state<char>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100](v4, (_QWORD *)(i - 96));
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::__compressed_pair<std::csub_match *> *p_end_cap;
  std::sub_match<const char *> *v7;
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  std::sub_match<const char *> *v15;
  std::vector<std::csub_match>::size_type v16;
  std::pair<const char *, const char *> v17;
  std::sub_match<const char *> *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> *v21;
  std::pair<const char *, const char *> v22;
  std::sub_match<const char *> *v23;
  std::sub_match<const char *> *end;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v26;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      v15 = &v9[__n];
      v16 = 24 * __n;
      do
      {
        v17 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&v9->matched = *(_QWORD *)&__x->matched;
        v9->std::pair<const char *, const char *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)p_end_cap, v13);
    else
      v14 = 0;
    v18 = (std::sub_match<const char *> *)&v14[24 * v10];
    v19 = &v18[__n];
    v20 = 24 * __n;
    v21 = v18;
    do
    {
      v22 = __x->std::pair<const char *, const char *>;
      v21[1].first = *(const char **)&__x->matched;
      *v21 = v22;
      v21 = (std::pair<const char *, const char *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    v23 = (std::sub_match<const char *> *)&v14[24 * v13];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v26 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v18[-1].matched = *(_QWORD *)&end[-1].matched;
        v18[-1].std::pair<const char *, const char *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
      operator delete(end);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::__compressed_pair<std::pair<unsigned long, const char *> *, std::allocator<std::pair<unsigned long, const char *>>> *p_end_cap;
  std::pair<unsigned long, const char *> *v5;
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = (char *)v7 - (char *)this->__begin_;
    v9 = __n + (v8 >> 4);
    if (v9 >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)p_end_cap, v12);
    else
      v13 = 0;
    v14 = (std::pair<unsigned long, const char *> *)&v13[16 * v10];
    v15 = (std::pair<unsigned long, const char *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    v16 = &v14[__n];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_23004CA9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_23004CB0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (result == v5)
        return a2;
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t *v7;
  char *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &unk_24FDF0000;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &unk_24FDF0048;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 11);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_23004CE74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;
  BOOL v5;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = (char)*a2;
    v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 3);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_23004CFC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;

  if (a2 == a3)
    return a2;
  v4 = *a2;
  v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8)
    return a2;
  v6 = a3;
  v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      v8 = *v7;
      if ((v8 - 48) > 9)
        break;
      if (v5 >= 0x19999999)
        goto LABEL_16;
      ++v7;
      v5 = v8 + 10 * v5 - 48;
      if (v7 == a3)
        goto LABEL_12;
    }
    v6 = v7;
LABEL_12:
    if (!v5)
      goto LABEL_16;
  }
  if (v5 > a1->__marked_count_)
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  int v4;
  BOOL v5;
  BOOL v6;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v8;
  BOOL v9;
  std::__bracket_expression<char, std::regex_traits<char>> *v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100)
      return v3;
    v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      v6 = 1;
      goto LABEL_12;
    case 'S':
      v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      v5 = 1;
LABEL_15:
      v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  std::string *v6;
  std::basic_regex<char>::value_type locale;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  std::string::value_type v14;
  char v15;
  std::string::value_type v16;
  uint64_t v17;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v6 = a4;
            locale = 10;
            goto LABEL_48;
          }
          locale = 10;
          goto LABEL_57;
        case 'r':
          if (a4)
          {
            v6 = a4;
            locale = 13;
            goto LABEL_48;
          }
          locale = 13;
          goto LABEL_57;
        case 't':
          if (a4)
          {
            v6 = a4;
            locale = 9;
            goto LABEL_48;
          }
          locale = 9;
          goto LABEL_57;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
                  goto LABEL_23;
              }
            }
          }
          goto LABEL_62;
        case 'v':
          if (a4)
          {
            v6 = a4;
            locale = 11;
            goto LABEL_48;
          }
          locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_62;
          v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_28;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u)
            goto LABEL_62;
          v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_62;
          v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_33;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u)
            goto LABEL_62;
          v13 = -87;
LABEL_33:
          v14 = v12 + 16 * (v10 + v11) + v13;
          if (a4)
            std::string::operator=(a4, v14);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_43;
      }
      goto LABEL_57;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v6 = a4;
        locale = 0;
        goto LABEL_48;
      }
      locale = 0;
LABEL_57:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v6 = a4;
          locale = 12;
LABEL_48:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_57;
      }
LABEL_43:
      v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if ((_DWORD)v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v6 = a4;
          goto LABEL_48;
        }
        goto LABEL_57;
      }
LABEL_62:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_62;
    v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v15 & 0xDF) - 65) > 0x19u)
      goto LABEL_62;
    v16 = v15 & 0x1F;
    if (a4)
      std::string::operator=(a4, v16);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](v8, (uint64_t)this, v2, (uint64_t)this->__end_->__first_);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_24FDEFE50;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_24FDEFE98;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_23004D510(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 4);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_23004D56C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_24FDEFF70;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_24FDEFE08;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_23004D6E8(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24FDEFE08;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24FDEFE08;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24FDEFE50;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24FDEFE50;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24FDEFEE0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24FDEFEE0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24FDEFF28;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24FDEFF28;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = v6;
      v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v10++;
        if (v11 != v13)
          break;
        if (!--v9)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2348B4E1CLL);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  std::__bracket_expression<char, std::regex_traits<char>> *v4;

  v4 = (std::__bracket_expression<char, std::regex_traits<char>> *)operator new();
  std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v4, (uint64_t)this, (uint64_t)this->__end_->__first_, __negate, this->__flags_ & 1, (this->__flags_ & 8) != 0);
  this->__end_->__first_ = v4;
  this->__end_ = v4;
  return v4;
}

void sub_23004DEFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 40);
  v5 = *(_BYTE **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_23004E25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  _Unwind_Resume(a1);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x2348B4E1C](a1, 0x10F1C4061CF1F02);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  signed __int8 v6;
  signed __int8 v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  unsigned __int8 v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  const void *p_p;
  uint64_t v21;
  unsigned __int8 *v22;
  BOOL v23;
  int v24;
  size_t v25;
  char *v26;
  size_t v27;
  int v28;
  _BOOL4 v29;
  int v30;
  size_t v31;
  char *v32;
  size_t v33;
  int v34;
  BOOL v35;
  _BOOL4 negate;
  char v37;
  uint64_t v38;
  size_t v39;
  unsigned __int8 v40;
  std::vector<char>::pointer v41;
  unint64_t v42;
  int v43;
  std::regex_traits<char>::char_class_type v44;
  char v45;
  int v46;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v48;
  char *v49;
  std::vector<std::pair<std::string, std::string>>::pointer v50;
  std::vector<std::pair<std::string, std::string>>::pointer v51;
  unsigned int v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  size_t v56;
  const void *v57;
  uint64_t v58;
  unsigned __int8 *v59;
  BOOL v60;
  int v61;
  size_t v62;
  char *v63;
  size_t v64;
  int v65;
  _BOOL4 v66;
  int v67;
  size_t v68;
  char *v69;
  size_t v70;
  int v71;
  BOOL v72;
  std::vector<std::string>::pointer v73;
  uint64_t v74;
  int64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  size_t v79;
  size_t v80;
  uint64_t v81;
  BOOL j;
  std::string *v83;
  std::string::size_type v84;
  int v85;
  std::string *v86;
  uint64_t v87;
  std::string *v88;
  void *v89;
  size_t v90;
  std::vector<std::string>::pointer v91;
  uint64_t v92;
  int64_t v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  size_t v97;
  size_t v98;
  uint64_t v99;
  BOOL i;
  std::string *v101;
  std::string::size_type size;
  int v103;
  std::string *v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  size_t v108;
  std::regex_traits<char>::char_class_type v109;
  int v110;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v113;
  std::regex_traits<char>::char_class_type neg_mask;
  int v115;
  std::__node<char> *first;
  int v117;
  unsigned __int8 v118;
  char v119;
  BOOL v120;
  _BOOL4 v121;
  _BOOL4 v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  std::string *v126;
  void *__p;
  size_t v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  uint64_t v132;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v38 = 0;
    negate = this->__negate_;
    goto LABEL_229;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_58;
  v6 = *current;
  v130 = *current;
  v7 = current[1];
  v131 = v7;
  if (this->__icase_)
  {
    v130 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    v131 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v132, (uint64_t)&__p);
  if (((char)v129 & 0x80000000) == 0)
  {
    if (v129)
      goto LABEL_8;
LABEL_58:
    negate = 0;
    v38 = 1;
    goto LABEL_59;
  }
  v39 = v128;
  operator delete(__p);
  if (!v39)
    goto LABEL_58;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    while (v130 != *(p_second - 1) || v131 != *p_second)
    {
      p_second += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_226;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
    goto LABEL_165;
  }
  std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v132);
  v14 = this->__ranges_.__begin_;
  v15 = v129;
  v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (v16)
  {
    v17 = 0;
    v18 = v16 / 48;
    v118 = v129;
    if ((v129 & 0x80u) == 0)
      v19 = v129;
    else
      v19 = v128;
    if ((v129 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v18 <= 1)
      v21 = 1;
    else
      v21 = v16 / 48;
    v22 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
    v23 = 1;
    while (1)
    {
      v24 = (char)*(v22 - 24);
      if (v24 >= 0)
        v25 = *(v22 - 24);
      else
        v25 = *(_QWORD *)(v22 - 39);
      if (v24 >= 0)
        v26 = (char *)(v22 - 47);
      else
        v26 = *(char **)(v22 - 47);
      if (v25 >= v19)
        v27 = v19;
      else
        v27 = v25;
      v28 = memcmp(p_p, v26, v27);
      v29 = v19 >= v25;
      if (v28)
        v29 = v28 >= 0;
      if (v29)
      {
        v30 = (char)*v22;
        if (v30 >= 0)
          v31 = *v22;
        else
          v31 = *(_QWORD *)(v22 - 15);
        if (v30 >= 0)
          v32 = (char *)(v22 - 23);
        else
          v32 = *(char **)(v22 - 23);
        if (v19 >= v31)
          v33 = v31;
        else
          v33 = v19;
        v34 = memcmp(v32, p_p, v33);
        v35 = v31 >= v19;
        if (v34)
          v35 = v34 >= 0;
        if (v35)
          break;
      }
      v23 = ++v17 < v18;
      v22 += 48;
      if (v21 == v17)
      {
        negate = 0;
        v37 = 1;
        goto LABEL_159;
      }
    }
    v37 = 0;
    negate = 1;
LABEL_159:
    p_traits = &this->__traits_;
    v15 = v118;
  }
  else
  {
    v23 = 0;
    negate = 0;
    v37 = 1;
  }
  if ((v15 & 0x80) != 0)
    operator delete(__p);
  if (!v23)
  {
LABEL_165:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
      goto LABEL_208;
    std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v130, (char *)&v132, (uint64_t)&__p);
    v91 = this->__equivalences_.__begin_;
    v92 = v129;
    v93 = (char *)this->__equivalences_.__end_ - (char *)v91;
    if (v93)
    {
      v94 = 0;
      v95 = v93 / 24;
      v96 = __p;
      v97 = v128;
      if ((v129 & 0x80u) == 0)
        v98 = v129;
      else
        v98 = v128;
      if (v95 <= 1)
        v99 = 1;
      else
        v99 = v93 / 24;
      for (i = 1; ; i = v94 < v95)
      {
        v101 = &v91[v94];
        size = HIBYTE(v101->__r_.__value_.__r.__words[2]);
        v103 = (char)size;
        if ((size & 0x80u) != 0)
          size = v101->__r_.__value_.__l.__size_;
        if (v98 != size)
          goto LABEL_186;
        v104 = v103 >= 0 ? &v91[v94] : (std::string *)v101->__r_.__value_.__r.__words[0];
        if ((v92 & 0x80) == 0)
          break;
        v123 = i;
        v126 = v91;
        v106 = v95;
        v107 = v96;
        v108 = v97;
        if (!memcmp(v96, v104, v97))
        {
          operator delete(__p);
          if (!v123)
          {
LABEL_207:
            negate = 1;
            goto LABEL_208;
          }
LABEL_192:
          negate = 1;
LABEL_228:
          v38 = 2;
          goto LABEL_229;
        }
        ++v94;
        v97 = v108;
        v96 = v107;
        v95 = v106;
        v91 = v126;
        if (v94 == v99)
          goto LABEL_194;
LABEL_190:
        ;
      }
      if (!(_DWORD)v92)
      {
LABEL_191:
        if (!i)
          goto LABEL_207;
        goto LABEL_192;
      }
      v105 = 0;
      while (*((unsigned __int8 *)&__p + v105) == v104->__r_.__value_.__s.__data_[v105])
      {
        if (v92 == ++v105)
          goto LABEL_191;
      }
LABEL_186:
      if (++v94 == v99)
        goto LABEL_193;
      goto LABEL_190;
    }
LABEL_193:
    if ((v92 & 0x80) != 0)
LABEL_194:
      operator delete(__p);
LABEL_208:
    if ((char)v130 < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v113 = tab[v130];
      if (((v113 & mask) != 0 || v130 == 95 && (mask & 0x80) != 0)
        && ((char)v131 & 0x80000000) == 0
        && ((tab[v131] & mask) != 0 || (mask & 0x80) != 0 && v131 == 95))
      {
        goto LABEL_226;
      }
      neg_mask = this->__neg_mask_;
      if ((neg_mask & v113) != 0 || v130 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_225:
        v115 = negate;
LABEL_227:
        negate = v115;
        goto LABEL_228;
      }
    }
    if (((char)v131 & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[v131] & neg_mask) == 0)
      {
        v115 = 1;
        if (v131 != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_227;
      }
      goto LABEL_225;
    }
LABEL_226:
    v115 = 1;
    goto LABEL_227;
  }
  if ((v37 & 1) == 0)
    goto LABEL_228;
  v38 = 2;
LABEL_59:
  v40 = *a2->__current_;
  v130 = v40;
  if (this->__icase_)
  {
    v40 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v40);
    v130 = v40;
  }
  v41 = this->__chars_.__begin_;
  v42 = this->__chars_.__end_ - v41;
  if (v42)
  {
    if (v42 <= 1)
      v42 = 1;
    while (1)
    {
      v43 = *v41++;
      if (v43 == v40)
        break;
      if (!--v42)
        goto LABEL_66;
    }
LABEL_203:
    negate = 1;
    goto LABEL_229;
  }
LABEL_66:
  v44 = this->__neg_mask_;
  if (v44 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v40 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v40] & v44) == 0)
    {
      v46 = (v44 >> 7) & 1;
      v45 = v40 == 95 ? v46 : 0;
    }
    else
    {
      v45 = 1;
    }
    end = this->__neg_chars_.__end_;
    v48 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v40, end - this->__neg_chars_.__begin_);
    v49 = v48 ? v48 : end;
    if ((v45 & 1) == 0 && v49 == end)
      goto LABEL_203;
  }
  v50 = this->__ranges_.__begin_;
  v51 = this->__ranges_.__end_;
  if (v50 != v51)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v131);
      v50 = this->__ranges_.__begin_;
      v51 = this->__ranges_.__end_;
      v52 = v129;
    }
    else
    {
      v52 = 1;
      v129 = 1;
      LOWORD(__p) = v40;
    }
    v53 = (char *)v51 - (char *)v50;
    if (v53)
    {
      v124 = v38;
      v121 = negate;
      v54 = 0;
      v55 = v53 / 48;
      v119 = v52;
      if ((v52 & 0x80u) == 0)
        v56 = v52;
      else
        v56 = v128;
      if ((v52 & 0x80u) == 0)
        v57 = &__p;
      else
        v57 = __p;
      if (v55 <= 1)
        v58 = 1;
      else
        v58 = v53 / 48;
      v59 = (unsigned __int8 *)&v50->second.__r_.__value_.__r.__words[2] + 7;
      v60 = 1;
      while (1)
      {
        v61 = (char)*(v59 - 24);
        if (v61 >= 0)
          v62 = *(v59 - 24);
        else
          v62 = *(_QWORD *)(v59 - 39);
        if (v61 >= 0)
          v63 = (char *)(v59 - 47);
        else
          v63 = *(char **)(v59 - 47);
        if (v62 >= v56)
          v64 = v56;
        else
          v64 = v62;
        v65 = memcmp(v57, v63, v64);
        v66 = v56 >= v62;
        if (v65)
          v66 = v65 >= 0;
        if (v66)
        {
          v67 = (char)*v59;
          if (v67 >= 0)
            v68 = *v59;
          else
            v68 = *(_QWORD *)(v59 - 15);
          if (v67 >= 0)
            v69 = (char *)(v59 - 23);
          else
            v69 = *(char **)(v59 - 23);
          if (v56 >= v68)
            v70 = v68;
          else
            v70 = v56;
          v71 = memcmp(v69, v57, v70);
          v72 = v68 >= v56;
          if (v71)
            v72 = v71 >= 0;
          if (v72)
            break;
        }
        v60 = ++v54 < v55;
        v59 += 48;
        if (v58 == v54)
        {
          negate = v121;
          goto LABEL_124;
        }
      }
      negate = 1;
LABEL_124:
      v38 = v124;
      if ((v119 & 0x80) == 0)
        goto LABEL_126;
    }
    else
    {
      v60 = 0;
      if ((v52 & 0x80) == 0)
        goto LABEL_126;
    }
    operator delete(__p);
LABEL_126:
    if (v60)
      goto LABEL_229;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_198;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v131, (uint64_t)&__p);
  v73 = this->__equivalences_.__begin_;
  v74 = v129;
  v75 = (char *)this->__equivalences_.__end_ - (char *)v73;
  if (!v75)
  {
    if ((v129 & 0x80) != 0)
      operator delete(__p);
LABEL_198:
    if ((char)v130 < 0)
      goto LABEL_229;
    v109 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v130] & v109) == 0)
    {
      v110 = (v109 >> 7) & 1;
      if (v130 != 95)
        v110 = 0;
      if (v110 != 1)
        goto LABEL_229;
    }
    goto LABEL_203;
  }
  v125 = v38;
  v76 = 0;
  v77 = v75 / 24;
  v78 = __p;
  v79 = v128;
  if ((v129 & 0x80u) == 0)
    v80 = v129;
  else
    v80 = v128;
  if (v77 <= 1)
    v81 = 1;
  else
    v81 = v75 / 24;
  for (j = 1; ; j = v76 < v77)
  {
    v83 = &v73[v76];
    v84 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
    v85 = (char)v84;
    if ((v84 & 0x80u) != 0)
      v84 = v83->__r_.__value_.__l.__size_;
    if (v80 == v84)
      break;
LABEL_148:
    if (++v76 == v81)
    {
      if ((v74 & 0x80) != 0)
LABEL_196:
        operator delete(__p);
      v38 = v125;
      goto LABEL_198;
    }
LABEL_152:
    ;
  }
  if (v85 >= 0)
    v86 = &v73[v76];
  else
    v86 = (std::string *)v83->__r_.__value_.__r.__words[0];
  if ((v74 & 0x80) == 0)
  {
    if (!(_DWORD)v74)
    {
LABEL_153:
      negate = 1;
      v38 = v125;
      if (!j)
        goto LABEL_198;
      goto LABEL_229;
    }
    v87 = 0;
    while (*((unsigned __int8 *)&__p + v87) == v86->__r_.__value_.__s.__data_[v87])
    {
      if (v74 == ++v87)
        goto LABEL_153;
    }
    goto LABEL_148;
  }
  v120 = j;
  v122 = negate;
  v88 = v73;
  v89 = v78;
  v90 = v79;
  if (memcmp(v78, v86, v79))
  {
    ++v76;
    v79 = v90;
    v78 = v89;
    v73 = v88;
    negate = v122;
    if (v76 == v81)
      goto LABEL_196;
    goto LABEL_152;
  }
  operator delete(__p);
  negate = 1;
  v38 = v125;
  if (!v120)
    goto LABEL_198;
LABEL_229:
  if (negate == this->__negate_)
  {
    first = 0;
    v117 = -993;
  }
  else
  {
    a2->__current_ += v38;
    first = this->__first_;
    v117 = -995;
  }
  a2->__do_ = v117;
  a2->__node_ = first;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_23004EDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_23004EF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char *,char *>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_23004F11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 5);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_23004F170(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  std::string *v17;
  uint64_t v18;
  std::string::size_type size;
  char v20;
  uint64_t v22;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      v6 = v10;
      v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = (_BYTE *)v18;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_36;
LABEL_28:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    v20 = 1;
    v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = (_BYTE *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if ((_DWORD)v16 == 92)
    {
      if (v11)
        v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      else
        v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v20 & 1) != 0)
    return v4;
  return (_BYTE *)v6;
}

void sub_23004F4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  for (i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_33;
  }
  if (&a2[i] == a3)
LABEL_33:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    v8 = v19;
    if (v19)
    {
      v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v8 = v18;
  if (!v18)
    goto LABEL_34;
  v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, v9, &v9[v8], (uint64_t)__p);
  v10 = v16;
  if ((v16 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (__int128 *)__p);
  }
  else
  {
    v11 = v19;
    if ((v19 & 0x80u) != 0)
      v11 = v18;
    if (v11 == 2)
    {
      v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v13 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v12 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v17);
  return (uint64_t)&a2[i + 2];
}

void sub_23004F6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  int v7;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  for (i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_11;
  }
  if (&a2[i] == a3)
LABEL_11:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  v7 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, &a2[i], *(_BYTE *)(a1 + 24) & 1);
  if (!v7)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return (uint64_t)&a2[i + 2];
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  unint64_t v7;
  char *v8;
  char v9;
  char *v10;
  unint64_t j;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v16;
  unint64_t k;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t m;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  _BYTE *v32;
  char *v33;
  char v34;
  _BYTE *v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  uint64_t v43;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        v7 = v4[23] < 0 ? *((_QWORD *)v4 + 1) : v4[23];
        if (i >= v7)
          break;
        v8 = v4;
        if (v4[23] < 0)
          v8 = *(char **)v4;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v8[i]);
        v10 = v4;
        if (v4[23] < 0)
          v10 = *(char **)v4;
        v10[i] = v9;
      }
      for (j = 0; ; ++j)
      {
        v12 = v3[23] < 0 ? *((_QWORD *)v3 + 1) : v3[23];
        if (j >= v12)
          break;
        v13 = v3;
        if (v3[23] < 0)
          v13 = *(char **)v3;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v13[j]);
        v15 = v3;
        if (v3[23] < 0)
          v15 = *(char **)v3;
        v15[j] = v14;
      }
    }
    else
    {
      for (k = 0; ; ++k)
      {
        v18 = a2[23] < 0 ? *((_QWORD *)a2 + 1) : a2[23];
        if (k >= v18)
          break;
        v19 = a2;
        if (a2[23] < 0)
          v19 = *(char **)a2;
        v20 = a2;
        if (a2[23] < 0)
          v20 = *(char **)a2;
        v20[k] = v19[k];
      }
      for (m = 0; ; ++m)
      {
        v22 = a3[23] < 0 ? *((_QWORD *)a3 + 1) : a3[23];
        if (m >= v22)
          break;
        v23 = a3;
        if (a3[23] < 0)
          v23 = *(char **)a3;
        v24 = a3;
        if (a3[23] < 0)
          v24 = *(char **)a3;
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      v26 = v4;
      v4 = *(char **)v4;
      v25 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v25 = v4[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      v28 = v3;
      v3 = *(char **)v3;
      v27 = *((_QWORD *)v28 + 1);
    }
    else
    {
      v27 = v3[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)v40 = v38;
    v41 = v39;
    *(_OWORD *)__p = *(_OWORD *)v36;
    v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
  else
  {
    if (a2[23] < 0)
      v16 = *((_QWORD *)a2 + 1);
    else
      v16 = a2[23];
    if (v16 != 1 || (a3[23] < 0 ? (v29 = *((_QWORD *)a3 + 1)) : (v29 = a3[23]), v29 != 1))
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    if (*(_BYTE *)(a1 + 169))
    {
      v30 = a2;
      if (a2[23] < 0)
        v30 = *(char **)a2;
      v31 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v30);
      v32 = v4;
      if (v4[23] < 0)
        v32 = *(_BYTE **)v4;
      *v32 = v31;
      v33 = v3;
      if (v3[23] < 0)
        v33 = *(char **)v3;
      v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v33);
      v35 = v3;
      if (v3[23] < 0)
        v35 = *(_BYTE **)v3;
      *v35 = v34;
    }
    *(_OWORD *)v40 = *(_OWORD *)v4;
    v41 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v43 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
}

void sub_23004FF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a21);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  __int16 v8;
  _WORD *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _WORD *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;

  if (!*(_BYTE *)(a1 + 169))
  {
    v18 = a1 + 128;
    v19 = *(_QWORD *)(a1 + 128);
    v10 = (char **)(a1 + 112);
    v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v9 = *(_WORD **)(a1 + 120);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        v21 = v20 >> 1;
        v22 = v19 - (_QWORD)*v10;
        if (v22 <= (v20 >> 1) + 1)
          v23 = v21 + 1;
        else
          v23 = v22;
        if (v22 >= 0x7FFFFFFFFFFFFFFELL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v24);
        else
          v25 = 0;
        v27 = &v25[2 * v21];
        v28 = &v25[2 * v24];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v38 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v38)
          goto LABEL_46;
        do
        {
          v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        v33 = v32 >> 1;
        v34 = v19 - (_QWORD)*v10;
        if (v34 <= (v32 >> 1) + 1)
          v35 = v33 + 1;
        else
          v35 = v34;
        if (v34 >= 0x7FFFFFFFFFFFFFFELL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v36);
        else
          v37 = 0;
        v27 = &v37[2 * v33];
        v28 = &v37[2 * v36];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v40 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v40)
          goto LABEL_46;
        do
        {
          v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = v5 | (unsigned __int16)(v6 << 8);
  v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *v9 = v8;
    v26 = v9 + 1;
    goto LABEL_48;
  }
  v10 = (char **)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3)
    goto LABEL_49;
  v13 = v12 >> 1;
  v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1)
    v15 = v13 + 1;
  else
    v15 = v14;
  if (v14 >= 0x7FFFFFFFFFFFFFFELL)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(a1 + 128, v16);
  else
    v17 = 0;
  v27 = &v17[2 * v13];
  v28 = &v17[2 * v16];
  *(_WORD *)v27 = v8;
  v26 = v27 + 2;
  v30 = *(char **)(a1 + 112);
  v29 = *(char **)(a1 + 120);
  if (v29 == v30)
    goto LABEL_46;
  do
  {
    v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  v29 = *v10;
LABEL_46:
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 128) = v28;
  if (v29)
    operator delete(v29);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 1);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_2300501D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_230050388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_230050494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 2);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_2300504E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t classname;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_230050598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 64);
  v5 = *(_BYTE **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, __int128 *a2)
{
  std::allocator<std::pair<std::string, std::string>> *p_end_cap;
  std::pair<std::string, std::string> *v5;
  std::pair<std::string, std::string> *value;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::pair<std::string, std::string> *end;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::pair<std::string, std::string> *v15;
  std::pair<std::string, std::string> *v16;
  __int128 v17;
  __int128 v18;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14)
      v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_230050934(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_2300509C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 9);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_230050A1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::pair<std::string, std::string> *v4;
  std::pair<std::string, std::string> *begin;
  std::pair<std::string, std::string> *end;
  std::pair<std::string, std::string> *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](this);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &unk_24FDF0090;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&unk_24FDF0120;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_230050F38(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  int v4;
  int v5;
  int v6;

  if (a2 != a3)
  {
    v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38)
            break;
          if (v5 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3)
            return a3;
        }
      }
    }
  }
  return a2;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 8);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_230051034(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 7);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_230051080(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24FDF00F0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24FDF00F0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x2348B4E1CLL);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24FDF00F0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24FDF00F0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x2348B4E1CLL);
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = (_BYTE *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((_QWORD *)v7 - 2) = v5;
      *((_QWORD *)v7 - 1) = v5;
      *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24FDF00F0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24FDF00F0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2348B4AA4](exception, 15);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_230051528(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v8;

  if (a2 == a3)
    return (unsigned __int8 *)a2;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2)
    return (unsigned __int8 *)a2;
  else
    return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  unsigned int marked_count;
  char *v11;
  _BOOL4 v13;
  uint64_t v14;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      v8 = a2[1];
      if (v8 == 40)
      {
        v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        marked_count = a1->__marked_count_;
        do
        {
          v11 = (char *)v9;
          v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        v14 = 2;
        if (!v13)
          v14 = 0;
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  std::basic_regex<char> *v22;
  int v24;
  int v25;

  v6 = a2;
  if (a2 != a3)
  {
    v7 = __mexp_end;
    v8 = __mexp_begin;
    v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v13 = a2 + 2;
      v25 = 0;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13)
        goto LABEL_16;
      if (v14 != a3)
      {
        v15 = v14 + 1;
        v16 = *v14;
        if (v16 == 44)
        {
          v24 = -1;
          v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            v19 = v24;
            v18 = v25;
            if (v24 == -1)
            {
              v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            v6 = &v17[2 * (v17[1] == 125)];
            v20 = v8;
            v21 = v7;
            v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          v6 = v14 + 2;
          v18 = v25;
          v20 = v8;
          v21 = v7;
          v22 = this;
          v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v6;
  char *result;
  std::__node<char> *v9;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a2);
    if (result != a2)
      return result;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
    return a2 + 1;
  }
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v9 = (std::__node<char> *)operator new();
  end = this->__end_;
  first = end->__first_;
  v9->__vftable = (std::__node<char>_vtbl *)&unk_24FDF01F8;
  v9[1].__vftable = (std::__node<char>_vtbl *)first;
  end->__first_ = v9;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  return a2 + 1;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  int locale_low;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  std::basic_regex<char> *v17;
  std::basic_regex<char> *v18;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3)
    goto LABEL_12;
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      goto LABEL_8;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v17 == a3 || (v18 = v17, LOBYTE(v17->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)&v18->__traits_.__loc_.__locale_ + 1;
LABEL_12:
      if (v9 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
LABEL_8:
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = v14 + 16;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (unsigned __int8 *)a2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  char *result;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(a1, a2, a3);
  if (result == (char *)a2)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
      }
      else
      {
        v7 = (std::__node<char> *)operator new();
        end = a1->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_24FDF01F8;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        return (char *)&a2->__traits_.__loc_.__locale_ + 1;
      }
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int locale_low;
  uint64_t v5;

  v3 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    v5 = (locale_low - 36);
    if (v5 > 0x3A)
      goto LABEL_8;
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0)
      return v3;
    if (v5 == 5)
    {
      if (a1->__open_count_)
        return v3;
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2)
        return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  std::basic_regex<char>::value_type v6;
  BOOL v7;
  _BOOL4 v9;
  uint64_t v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  v6 = *v4;
  v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    v10 = 2;
    if (!v9)
      v10 = 0;
    v3 += v10;
    return v3;
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  int v9;
  std::match_results<const char *>::value_type *p_unmatched;
  const char *first;
  const char *second;
  uint64_t result;
  int v14;
  const char *v15;
  int v16;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_)
      p_unmatched = &this->__unmatched_;
    else
      p_unmatched = this->__matches_.__begin_;
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    v14 = v9 | 0x80;
    v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        begin = this->__matches_.__begin_;
        end = this->__matches_.__end_;
        if (v16)
          break;
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l)
          goto LABEL_14;
      }
      if (end == begin)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
  }
  result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a1 + 28))
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v55[40];
  __int128 v56;
  void *__p[2];
  _QWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)v55 = 0;
    memset(&v55[8], 0, 32);
    v56 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    memset(v58, 0, 21);
    std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v55[32])
    {
      *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
      operator delete(*(void **)&v55[32]);
    }
    v12 = *((_QWORD *)&v59 + 1);
    v13 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v13 / 0x2A));
    v16 = 3 * (v13 % 0x2A);
    v17 = v15 + 32 * v16;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    v53 = 0;
    v18 = 0;
    v51 = 0;
    v52 = a2;
    v19 = a3 - a2;
    v20 = *((_QWORD *)&v61 + 1);
    v21 = *((_QWORD *)&v59 + 1);
    v22 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v23 = v22 / 0x2A;
    v24 = 3 * (v22 % 0x2A);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    v25 = *(_QWORD *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(_BYTE *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v27 = v20 + v61 - 1;
      v28 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v27 / 0x2A));
      v29 = v27 % 0x2A;
      v30 = v28 + 96 * (v27 % 0x2A);
      v32 = (_QWORD *)(v30 + 80);
      v31 = *(_QWORD *)(v30 + 80);
      if (v31)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v28 + 96 * v29);
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          v33 = *(_QWORD *)(v28 + 96 * v29 + 16);
          v35 = (a5 & 0x1000) == 0 || v33 == a3;
          v36 = v33 != v52 || (a5 & 0x20) == 0;
          if (!v36 || !v35)
            goto LABEL_37;
          v37 = v33 - *(_QWORD *)(v28 + 96 * v29 + 8);
          v38 = v51;
          if ((v53 & (v51 >= v37)) == 0)
            v38 = v37;
          if (v38 != v19)
          {
            v51 = v38;
            std::deque<std::__state<char>>::pop_back(&v59);
            v53 = 1;
            goto LABEL_38;
          }
          v39 = (void **)*((_QWORD *)&v59 + 1);
          v40 = v60;
          if ((_QWORD)v60 == *((_QWORD *)&v59 + 1))
          {
            v40 = *((_QWORD *)&v59 + 1);
          }
          else
          {
            v41 = (_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((unint64_t)v61 / 0x2A));
            v42 = (_QWORD *)(*v41 + 96 * ((unint64_t)v61 % 0x2A));
            v43 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) % 0x2AuLL);
            if (v42 != (_QWORD *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v61 + 8, v42);
                v42 += 12;
                if ((_QWORD *)((char *)v42 - *v41) == (_QWORD *)4032)
                {
                  v44 = (_QWORD *)v41[1];
                  ++v41;
                  v42 = v44;
                }
              }
              while (v42 != (_QWORD *)v43);
              v39 = (void **)*((_QWORD *)&v59 + 1);
              v40 = v60;
            }
          }
          *((_QWORD *)&v61 + 1) = 0;
          v47 = v40 - (_QWORD)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              v39 = (void **)(*((_QWORD *)&v59 + 1) + 8);
              *((_QWORD *)&v59 + 1) = v39;
              v47 = v60 - (_QWORD)v39;
            }
            while ((_QWORD)v60 - (_QWORD)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2)
              goto LABEL_53;
            v48 = 42;
          }
          *(_QWORD *)&v61 = v48;
LABEL_53:
          v53 = 1;
          v51 = v19;
LABEL_38:
          v20 = *((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1))
            continue;
          if ((v53 & 1) != 0)
          {
            v49 = *a4;
            *(_QWORD *)v49 = v52;
            *(_QWORD *)(v49 + 8) = v52 + v51;
            v6 = 1;
            *(_BYTE *)(v49 + 16) = 1;
          }
          else
          {
            v6 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v59, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v59);
          goto LABEL_38;
        case 0xFFFFFC20:
          v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)v55 = *(_OWORD *)v30;
          *(_OWORD *)&v55[16] = v45;
          v56 = 0uLL;
          *(_QWORD *)&v55[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v55[32], *(__int128 **)(v28 + 96 * v29 + 32), *(__int128 **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 40) - *(_QWORD *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v58[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v28 + 96 * v29 + 56), *(__int128 **)(v28 + 96 * v29 + 64), (uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 64) - *(_QWORD *)(v28 + 96 * v29 + 56)) >> 4);
          v46 = *v32;
          *(_QWORD *)((char *)&v58[1] + 5) = *(_QWORD *)(v30 + 85);
          v58[1] = v46;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v58[1] + 24))(v58[1], 0, v55);
          std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v55[32])
          {
            *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
            operator delete(*(void **)&v55[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v59);
  return v6;
}

void sub_230052634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((_QWORD *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  unsigned int v12;
  const char *v13;
  _OWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  const char *v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  __int128 v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v41;
  const char *v42;
  char v43;
  _BYTE v46[56];
  void *__p[2];
  _QWORD v48[4];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v50[40];
  __int128 v51;
  void *v52[6];
  _OWORD *v53;
  _OWORD *v54;
  _QWORD v55[3];

  v53 = 0;
  v54 = 0;
  v55[0] = 0;
  *(_DWORD *)v50 = 0;
  memset(&v50[8], 0, 32);
  v51 = 0u;
  memset(v52, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_43;
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v46 = 0;
  memset(&v46[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v48, 0, 21);
  v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v46[32])
  {
    *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  v41 = a4;
  v11 = v54;
  *((_DWORD *)v54 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
  std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v54 - 40), *(unsigned int *)(a1 + 32));
  v42 = 0;
  v43 = 0;
  v12 = 0;
  v13 = (const char *)(a3 - a2);
  v14 = v54;
  *((_QWORD *)v54 - 2) = v6;
  *((_DWORD *)v14 - 2) = a5;
  *((_BYTE *)v14 - 4) = a6;
  do
  {
    v15 = (++v12 & 0xFFF) != 0 || (int)(v12 >> 12) < (int)v13;
    if (!v15)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v17 = v14 - 1;
    v16 = *((_QWORD *)v14 - 2);
    v18 = v14 - 6;
    if (v16)
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 16))(v16, v14 - 6);
    switch(*(_DWORD *)v18)
    {
      case 0xFFFFFC18:
        v19 = (const char *)*((_QWORD *)v14 - 10);
        if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != a3)
          goto LABEL_19;
        v26 = &v19[-*((_QWORD *)v14 - 11)];
        v27 = v42;
        if ((v43 & ((uint64_t)v42 >= (uint64_t)v26)) == 0)
        {
          v28 = *(v14 - 5);
          *(_OWORD *)v50 = *(_OWORD *)v18;
          *(_OWORD *)&v50[16] = v28;
          if (v50 != v18)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v50[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v52, *((uint64_t **)v14 - 5), *((uint64_t **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          }
          v29 = (void *)*v17;
          *(void **)((char *)&v52[3] + 5) = *(void **)((char *)v14 - 11);
          v52[3] = v29;
          v27 = v26;
        }
        v30 = v54;
        if (v27 == v13)
        {
          v31 = (uint64_t)v53;
          while (v30 != (_QWORD *)v31)
          {
            v30 -= 12;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, v30);
          }
          v54 = (_OWORD *)v31;
          v43 = 1;
          v42 = (const char *)(a3 - a2);
        }
        else
        {
          v42 = v27;
          v32 = v54 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
          v54 = v32;
          v43 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        v20 = v54 - 6;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
        v54 = v20;
        break;
      case 0xFFFFFC20:
        v21 = *(v14 - 5);
        *(_OWORD *)v46 = *(_OWORD *)v18;
        *(_OWORD *)&v46[16] = v21;
        memset(&v46[32], 0, 24);
        std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v46[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v48[0] = 0;
        std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
        v22 = (void *)*v17;
        *(_QWORD *)((char *)&v48[1] + 5) = *(_QWORD *)((char *)v14 - 11);
        v48[1] = v22;
        (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 6);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v48[1] + 24))(v48[1], 0, v46);
        v23 = v54;
        if ((unint64_t)v54 >= v55[0])
        {
          v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v24 = *(_OWORD *)&v46[16];
          *v54 = *(_OWORD *)v46;
          v23[1] = v24;
          *((_QWORD *)v23 + 4) = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 7) = 0;
          v23[2] = *(_OWORD *)&v46[32];
          *((_QWORD *)v23 + 6) = *(_QWORD *)&v46[48];
          memset(&v46[32], 0, 24);
          *((_QWORD *)v23 + 8) = 0;
          *((_QWORD *)v23 + 9) = 0;
          *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v23 + 9) = v48[0];
          __p[0] = 0;
          __p[1] = 0;
          v48[0] = 0;
          v25 = v48[1];
          *(_QWORD *)((char *)v23 + 85) = *(_QWORD *)((char *)&v48[1] + 5);
          *((_QWORD *)v23 + 10) = v25;
          v54 = v23 + 6;
        }
        if (*(_QWORD *)&v46[32])
        {
          *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v14 = v54;
  }
  while (v53 != v54);
  if ((v43 & 1) != 0)
  {
    v33 = *v41;
    *(_QWORD *)v33 = a2;
    *(_QWORD *)(v33 + 8) = &v42[(_QWORD)a2];
    *(_BYTE *)(v33 + 16) = 1;
    if ((_QWORD)v51 != *(_QWORD *)&v50[32])
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(_QWORD *)&v50[32]) >> 3);
      v35 = (_BYTE *)(*(_QWORD *)&v50[32] + 16);
      v36 = 1;
      do
      {
        v37 = v33 + 24 * v36;
        *(_OWORD *)v37 = *((_OWORD *)v35 - 1);
        v38 = *v35;
        v35 += 24;
        *(_BYTE *)(v37 + 16) = v38;
        v15 = v34 > v36++;
      }
      while (v15);
    }
    v39 = 1;
  }
  else
  {
LABEL_43:
    v39 = 0;
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (*(_QWORD *)&v50[32])
  {
    *(_QWORD *)&v51 = *(_QWORD *)&v50[32];
    operator delete(*(void **)&v50[32]);
  }
  *(_QWORD *)v50 = &v53;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  return v39;
}

void sub_230052B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a19);
  std::__state<char>::~__state(&a35);
  a35 = v35 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v8 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = a1 + 5;
  v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;
  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x2A));
  v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4032;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_QWORD *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v7 - 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_QWORD *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v7 - 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v7 - 11) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v7 - 16) = v9;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_23020EE70);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_230053124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 42 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A)
    a2 = 1;
  if (v5 < 0x54)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x2A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      std::__split_buffer<unsigned long *>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 21;
      else
        v40 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        std::__split_buffer<unsigned long *>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 21;
      else
        v35 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_2300534B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  __int128 *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    v19 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v19;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      v25 = result;
      if (a2 != a3)
      {
        v26 = result;
        do
        {
          *(_OWORD *)v26 = *v6;
          v26[16] = *((_BYTE *)v6 + 16);
          v25 += 24;
          v6 = (__int128 *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      v18 = v25 - result;
      v13 = result;
    }
    else
    {
      v21 = (__int128 *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)result = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          v6 = (__int128 *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      v22 = v13;
      if (v21 != a3)
      {
        v23 = v13;
        do
        {
          v24 = *v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          v23 += 24;
          v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__vallocate[abi:ne180100](a1, v12);
    v15 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v15;
    v16 = v15;
    if (v6 != a3)
    {
      v16 = v13;
      do
      {
        v17 = *v6;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v16 = v17;
        v16 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    v18 = v16 - v13;
  }
  *v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          v29 = v6[1];
          v6 += 2;
          *(_QWORD *)v27 = v28;
          *((_QWORD *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = (__int128 *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          *(_QWORD *)result = v21;
          *((_QWORD *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      v23 = v12;
      if (v20 != (__int128 *)a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_OWORD *)v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (__int128 *)a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

_QWORD *realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

BOOL std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  v6 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v6 + 8);
  v9 = a2 + 32;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(v9 + 8);
  v10 = v8 == v7 && v5 == v4;
  if (v5 != v4 && v8 != v7)
    return *(_QWORD *)a1 == *(_QWORD *)a2
        && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
        && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
        && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
        && std::sub_match<std::__wrap_iter<char *>>::compare[abi:ne180100](v4, v7) == 0;
  return v10;
}

std::string *std::match_results<std::__wrap_iter<char *>>::format<std::back_insert_iterator<std::string>>(std::string::value_type ***a1, std::string *this, unsigned __int8 *a3, unsigned __int8 *a4, __int16 a5)
{
  unsigned __int8 *v6;
  int v9;
  unsigned __int8 *v10;
  int v11;
  std::string::value_type *v12;
  std::string::value_type *v13;
  std::string::value_type v14;
  std::string::value_type *v15;
  std::string::value_type *v16;
  std::string::value_type v17;
  std::string::value_type *v18;
  std::string::value_type *v19;
  std::string::value_type v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  std::string::value_type *v26;
  std::string::value_type *v27;
  std::string::value_type v28;
  int v29;
  std::string::value_type *v30;
  std::string::value_type *v31;
  std::string::value_type v32;
  unsigned __int8 *v33;
  unint64_t v34;
  uint64_t v35;
  std::string::value_type *v36;
  std::string::value_type *v37;
  std::string::value_type v38;

  v6 = a3;
  if ((a5 & 0x100) != 0)
  {
    if (a3 == a4)
      return this;
    while (1)
    {
      v29 = *v6;
      if (v29 == 92)
      {
        v33 = v6 + 1;
        if (v6 + 1 == a4)
        {
          LOBYTE(v29) = 92;
        }
        else
        {
          v29 = *v33;
          if ((v29 - 48) <= 9u)
          {
            v34 = (v29 - 48);
            if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v34)
              v35 = (uint64_t)(a1 + 3);
            else
              v35 = (uint64_t)&(*a1)[3 * v34];
            v36 = *(std::string::value_type **)v35;
            v37 = *(std::string::value_type **)(v35 + 8);
            while (v36 != v37)
            {
              v38 = *v36++;
              std::string::push_back(this, v38);
            }
            goto LABEL_53;
          }
          ++v6;
        }
      }
      else if (v29 == 38)
      {
        v30 = **a1;
        v31 = (*a1)[1];
        while (v30 != v31)
        {
          v32 = *v30++;
          std::string::push_back(this, v32);
        }
        goto LABEL_52;
      }
      std::string::push_back(this, v29);
LABEL_52:
      v33 = v6;
LABEL_53:
      v6 = v33 + 1;
      if (v33 + 1 == a4)
        return this;
    }
  }
  if (a3 != a4)
  {
    do
    {
      v9 = *v6;
      if (v9 == 36)
      {
        v10 = v6 + 1;
        if (v6 + 1 == a4)
          goto LABEL_31;
        v11 = (char)*v10;
        v9 = *v10;
        if (v11 > 38)
        {
          if (v11 == 39)
          {
            v18 = (std::string::value_type *)a1[9];
            v19 = (std::string::value_type *)a1[10];
            while (v18 != v19)
            {
              v20 = *v18++;
              std::string::push_back(this, v20);
            }
            goto LABEL_33;
          }
          if (v11 == 96)
          {
            v15 = (std::string::value_type *)a1[6];
            v16 = (std::string::value_type *)a1[7];
            while (v15 != v16)
            {
              v17 = *v15++;
              std::string::push_back(this, v17);
            }
            goto LABEL_33;
          }
LABEL_20:
          if ((v9 - 48) <= 9)
          {
            v21 = *v10 - 48;
            if (v6 + 2 != a4)
            {
              v22 = v6[2];
              v23 = v22 - 48;
              v24 = v22 + 10 * (int)v21 - 48;
              if (v23 > 9)
              {
                v10 = v6 + 1;
              }
              else
              {
                v21 = v24;
                v10 = v6 + 2;
              }
            }
            if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v21)
              v25 = (uint64_t)(a1 + 3);
            else
              v25 = (uint64_t)&(*a1)[3 * (int)v21];
            v26 = *(std::string::value_type **)v25;
            v27 = *(std::string::value_type **)(v25 + 8);
            while (v26 != v27)
            {
              v28 = *v26++;
              std::string::push_back(this, v28);
            }
            goto LABEL_33;
          }
LABEL_31:
          LOBYTE(v9) = 36;
          goto LABEL_32;
        }
        if (v11 != 36)
        {
          if (v11 == 38)
          {
            v12 = **a1;
            v13 = (*a1)[1];
            while (v12 != v13)
            {
              v14 = *v12++;
              std::string::push_back(this, v14);
            }
            goto LABEL_33;
          }
          goto LABEL_20;
        }
        ++v6;
      }
LABEL_32:
      std::string::push_back(this, v9);
      v10 = v6;
LABEL_33:
      v6 = v10 + 1;
    }
    while (v10 + 1 != a4);
  }
  return this;
}

uint64_t std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::operator++(uint64_t a1)
{
  char **v2;
  uint64_t v3;
  int v4;
  int v5;
  char **v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  char *v11;
  uint64_t v12;
  char v13;
  std::match_results<const char *> __p;

  v3 = a1 + 32;
  v2 = *(char ***)(a1 + 32);
  v4 = *(_DWORD *)(v3 - 8);
  v5 = v4 | 0x800;
  *(_DWORD *)(v3 - 8) = v4 | 0x800;
  if (*(char ***)(v3 + 8) == v2)
    v6 = (char **)(v3 + 24);
  else
    v6 = v2;
  v7 = v6[1];
  if (*v6 != v7)
  {
LABEL_5:
    *(_DWORD *)(a1 + 24) = v5 | 0x80;
    v9 = *(char **)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    v10 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v8, v7, v9, &__p, v5 | 0x80u);
    std::match_results<std::__wrap_iter<char *>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v3, (uint64_t)v7, (uint64_t)v9, (uint64_t *)&__p, (v5 & 0x800) != 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if ((v10 & 1) == 0)
    {
      v2 = *(char ***)v3;
LABEL_14:
      if (v2)
      {
        *(_QWORD *)(a1 + 40) = v2;
        operator delete(v2);
        *(_QWORD *)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
        *(_QWORD *)(v3 + 16) = 0;
      }
      *(_BYTE *)(a1 + 128) = 0;
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 25) = 0u;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_BYTE *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 104) = 0;
      *(_QWORD *)(a1 + 112) = 0;
      *(_BYTE *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 136) = 0;
      return a1;
    }
    return a1;
  }
  v11 = *(char **)(a1 + 8);
  if (v11 == v7)
    goto LABEL_14;
  v12 = *(_QWORD *)(a1 + 16);
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v12, v7, v11, &__p, v4 | 0x860u);
  std::match_results<std::__wrap_iter<char *>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v3, (uint64_t)v7, (uint64_t)v11, (uint64_t *)&__p, 1);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if ((v13 & 1) == 0)
  {
    ++v7;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_5;
  }
  return a1;
}

void sub_230053E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::regex_iterator(uint64_t a1, char *a2, char *a3, uint64_t a4, int a5)
{
  __int16 v5;
  uint64_t v9;
  std::match_results<const char *> __p;

  v5 = a5;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(_OWORD *)(a1 + 32) = 0u;
  v9 = a1 + 32;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, a2, a3, &__p, a5);
  std::match_results<std::__wrap_iter<char *>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  return a1;
}

void sub_230053F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void std::match_results<std::__wrap_iter<char *>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v10 = a4[6];
  std::vector<std::sub_match<std::__wrap_iter<char *>>>::resize(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
  {
    v12 = 0;
    v13 = 0;
    v15 = *a4;
    v14 = a4[1];
    do
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      v17 = (_QWORD *)(v15 + v12);
      if (v16 <= v13)
        v18 = a4 + 3;
      else
        v18 = v17;
      *(_QWORD *)(v11 + v12) = a2 + *v18 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13)
        v19 = a4 + 3;
      else
        v19 = (uint64_t *)(*a4 + v12);
      *(_QWORD *)(*(_QWORD *)a1 + v12 + 8) = a2 + v19[1] - v10;
      v15 = *a4;
      v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13)
        v20 = a4 + 3;
      else
        v20 = (uint64_t *)(*a4 + v12);
      v21 = *((_BYTE *)v20 + 16);
      v11 = *(_QWORD *)a1;
      v22 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(*(_QWORD *)a1 + v12 + 16) = v21;
      ++v13;
      v12 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v11) >> 3));
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  v23 = a2 + a4[6] - v10;
  *(_QWORD *)(a1 + 48) = v23;
  *(_QWORD *)(a1 + 56) = a2 + a4[7] - v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(_QWORD *)(a1 + 72) = a2 + a4[9] - v10;
  *(_QWORD *)(a1 + 80) = a2 + a4[10] - v10;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = v23;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

void std::vector<std::sub_match<std::__wrap_iter<char *>>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::sub_match<std::__wrap_iter<char *>>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void std::vector<std::sub_match<std::__wrap_iter<char *>>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[3 * a2];
      v14 = 24 * a2;
      do
      {
        *v7 = 0;
        v7[1] = 0;
        *((_BYTE *)v7 + 16) = 0;
        v7 += 3;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>(v4, v11);
    else
      v12 = 0;
    v15 = &v12[24 * v8];
    v16 = &v15[24 * a2];
    v17 = 24 * a2;
    v18 = v15;
    do
    {
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v18[16] = 0;
      v18 += 24;
      v17 -= 24;
    }
    while (v17);
    v19 = &v12[24 * v11];
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        v15 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
}

uint64_t std::sub_match<std::__wrap_iter<char *>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  size_t v4;
  void **v5;
  char v6;
  size_t v7;
  const void *p_p;
  size_t v9;
  void **v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  void **v15;
  size_t v16;
  uint64_t v17;
  void *__p;
  size_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(char **)a1, *(char **)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
  else
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&v15, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v3 = HIBYTE(v17);
    v5 = v15;
    v4 = v16;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  v6 = HIBYTE(v20);
  if (v20 >= 0)
    v7 = HIBYTE(v20);
  else
    v7 = v19;
  if (v20 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v3 & 0x80u) == 0)
    v9 = v3;
  else
    v9 = v4;
  if ((v3 & 0x80u) == 0)
    v10 = (void **)&v15;
  else
    v10 = v5;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_24;
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  v13 = v9 < v7;
  if (v7 < v9)
    v13 = -1;
  if (v12)
    return v12;
  else
    return v13;
}

void sub_230054380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerGetTypeID()
{
  if (RIOPxrSdfLayerGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfLayerGetTypeID::onceToken, &__block_literal_global_11);
  return RIOPxrSdfLayerGetTypeID::typeID;
}

uint64_t RIOPxrSdfLayerCreateAnonymous(char *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v4;
  _QWORD **v6;
  _QWORD *v7[2];
  unsigned int *v8;
  unsigned int *v9;
  void *__p;
  char *v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  __p = &v11;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&__p, v11);
  v9 = 0;
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  }
  else
  {
    __p = 0;
    v11 = 0;
    v12 = 0;
  }
  v7[0] = 0;
  v7[1] = 0;
  v6 = v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous();
  v3 = v8;
  v2 = v9;
  v8 = 0;
  v9 = v3;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)&v9, v2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v6, v7[0]);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  v4 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> &>(&v9);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v9);
  return v4;
}

void sub_230054514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, unsigned int *a12, unsigned int *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a12);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  if (a19 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a13);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> &>(_QWORD *a1)
{
  uint64_t Instance;
  uint64_t v3;

  if (RIOPxrSdfLayerGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfLayerGetTypeID::onceToken, &__block_literal_global_11);
  Instance = _CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = *a1;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(Instance + 16));
  }
  return v3;
}

CFStringRef RIOPxrSdfLayerCreateIdentifier(char *a1, const __CFDictionary *a2)
{
  void **v3;
  CFStringRef v4;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  _BYTE v10[8];
  _QWORD *v11;

  std::string::basic_string[abi:ne180100]<0>(__p, a1);
  MEMORY[0x2348B283C](v8, __p, v10);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 >= 0)
    v3 = v8;
  else
    v3 = (void **)v8[0];
  v4 = CFStringCreateWithCString(0, (const char *)v3, 0x8000100u);
  if (v9 < 0)
    operator delete(v8[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v10, v11);
  return v4;
}

void sub_2300546A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v21 - 40, *(_QWORD **)(v21 - 32));
  _Unwind_Resume(a1);
}

void `anonymous namespace'::decodeCFDictionaryRefOfFileFormatArguments(_anonymous_namespace_ *this, CFDictionaryRef theDict)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  if (theDict)
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)realityio::updateStringMapFromCFDictionary, this);
}

void sub_23005472C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerSave(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  std::recursive_mutex *v10;
  std::recursive_mutex *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (!a1)
    return 0;
  v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
  v6 = a1[2];
  v5 = a1 + 2;
  if (v6)
  {
    v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v18, v7);
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  v9.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v18);
  v11 = v10;
  v12 = v19;
  if (v19)
  {
    v13 = (unsigned int *)(v19 + 8);
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v12 + 8))(v12, v9);
  }
  std::recursive_mutex::lock(v11);
  v16 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
  v8 = MEMORY[0x2348B4690](v16, a2);
  std::recursive_mutex::unlock(v11);
  return v8;
}

void sub_230054814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerReload(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  std::recursive_mutex *v8;
  std::recursive_mutex *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
    return 0;
  v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
  v4 = a1[2];
  v3 = a1 + 2;
  if (v4)
  {
    v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v16, v5);
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  v7.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v16);
  v9 = v8;
  v10 = v17;
  if (v17)
  {
    v11 = (unsigned int *)(v17 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v10 + 8))(v10, v7);
  }
  std::recursive_mutex::lock(v9);
  v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
  v6 = pxrInternal__aapl__pxrReserved__::SdfLayer::Reload(v14);
  std::recursive_mutex::unlock(v9);
  return v6;
}

void sub_23005492C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerExportWithURL(uint64_t a1, void *a2, char *a3, const __CFDictionary *a4)
{
  id v7;
  realityio *v8;
  uint64_t v9;
  NSObject *v10;
  uint8_t v12[16];

  v7 = a2;
  v8 = (realityio *)objc_msgSend(v7, "isFileURL");
  if ((v8 & 1) != 0)
  {
  }
  else
  {
    v10 = *(NSObject **)(realityio::logObjects(v8) + 32);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v12 = 0;
      _os_log_error_impl(&dword_22FF26000, v10, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports exporting content to file URLs", v12, 2u);
    }
    v9 = 0;
  }

  return v9;
}

void sub_230054A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::exportLayerWithFilePath(uint64_t a1, char *a2, char *a3, CFDictionaryRef theDict)
{
  char *v7;
  uint64_t v8;
  void *__p;
  char v11;
  void *v12;
  char v13;
  _BYTE v14[8];
  _QWORD *v15;

  if (!a1)
    return 0;
  if (a3)
    v7 = a3;
  else
    v7 = "";
  std::string::basic_string[abi:ne180100]<0>(&v12, v7);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  v8 = pxrInternal__aapl__pxrReserved__::SdfLayer::Export();
  if (v11 < 0)
    operator delete(__p);
  if (v13 < 0)
    operator delete(v12);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v14, v15);
  return v8;
}

void sub_230054B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,_QWORD *a23)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerExportWithFilePath(uint64_t a1, char *a2, char *a3, const __CFDictionary *a4)
{
  if (a2)
  else
    return 0;
}

CFStringRef RIOPxrSdfLayerCopyExportString(uint64_t a1)
{
  void **v1;
  CFStringRef v2;
  void *__p[2];
  uint64_t v5;

  if (!a1)
    return 0;
  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString())
  {
    if (v5 >= 0)
      v1 = __p;
    else
      v1 = (void **)__p[0];
    v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  }
  else
  {
    v2 = 0;
  }
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_230054BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerClear(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::recursive_mutex *v7;
  std::recursive_mutex *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v14, v5);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v6.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    v8 = v7;
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
    }
    std::recursive_mutex::lock(v8);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(v13);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_230054CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerTransferContent(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  std::recursive_mutex *v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 && a2)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = *(_QWORD *)(a2 + 16);
    v5 = (uint64_t *)(a2 + 16);
    if (v6)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v19, v7);
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v8.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v19);
    v10 = v9;
    v11 = v20;
    if (v20)
    {
      v12 = (unsigned int *)(v20 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v19, a1 + 2);
    pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent();
    v15 = v20;
    if (v20)
    {
      v16 = (unsigned int *)(v20 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    std::recursive_mutex::unlock(v10);
  }
}

void sub_230054E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  std::recursive_mutex *v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (a10)
  {
    v12 = a10 + 2;
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_230054E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (a10)
  {
    v10 = a10 + 2;
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  JUMPOUT(0x230054E54);
}

uint64_t RIOPxrSdfLayerCreateOrFindRelativeToLayer(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t (*v10)(uint64_t *);
  char v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int **v17;
  uint64_t Instance;
  unsigned int *v20;
  _QWORD *v21[2];
  void *__p;
  _QWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  char **v27;
  char *v28;
  uint64_t v29;

  v28 = 0;
  v29 = 0;
  v27 = &v28;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v27, v28);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v27, a2);
    v23 = 0;
    v24 = 0;
    __p = &v23;
    pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen();
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v23);
    if (SHIBYTE(v29) < 0)
      operator delete(v27);
    if (v20)
    {
      v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> &>(&v20);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v20);
      return v2;
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v20);
    std::string::basic_string[abi:ne180100]<0>(&v27, a2);
    v23 = 0;
    v24 = 0;
    __p = &v23;
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew();
    if (RIOPxrSdfLayerGetTypeID::onceToken != -1)
      dispatch_once(&RIOPxrSdfLayerGetTypeID::onceToken, &__block_literal_global_11);
    Instance = _CFRuntimeCreateInstance();
    v2 = Instance;
    if (Instance)
    {
      *(_QWORD *)(Instance + 16) = v20;
      v20 = 0;
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v20);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v23);
    goto LABEL_34;
  }
  v5 = (uint64_t *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v25, v5);
  std::string::basic_string[abi:ne180100]<0>(&v27, a2);
  v23 = 0;
  v24 = 0;
  __p = &v23;
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindRelativeToLayer();
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v23);
  if (SHIBYTE(v29) < 0)
    operator delete(v27);
  v6 = v26;
  if (v26)
  {
    v7 = (unsigned int *)(v26 + 8);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator pxrInternal__aapl__pxrReserved__::SdfLayer* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::*)(void)const(&v20);
  v12 = v11 & 1 | (unint64_t)v10;
  if (v12)
    v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>((uint64_t *)&v20);
  v13 = v21[0];
  if (v21[0])
  {
    v14 = (unsigned int *)(v21[0] + 1);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  }
  if (!v12)
  {
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ComputeAbsolutePath();
    if (SHIBYTE(v24) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    v21[0] = 0;
    v21[1] = 0;
    v20 = (unsigned int *)v21;
    pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen();
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v21[0]);
    if (SHIBYTE(v24) < 0)
      operator delete(__p);
    if (v25)
    {
      v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> &>(&v25);
      v17 = &v25;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v25);
      v23 = 0;
      v24 = 0;
      __p = &v23;
      pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew();
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v23);
      v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> &>(&v20);
      v17 = &v20;
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(v17);
LABEL_34:
    if (SHIBYTE(v29) < 0)
      operator delete(v27);
  }
  return v2;
}

void sub_2300551CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a10);
  if (*(char *)(v20 - 33) < 0)
    operator delete(*(void **)(v20 - 56));
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerCreateWithIdentifier(char *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v4;
  _QWORD **v6;
  _QWORD *v7[2];
  unsigned int *v8;
  unsigned int *v9;
  void *__p;
  char *v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  __p = &v11;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&__p, v11);
  v9 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  v7[0] = 0;
  v7[1] = 0;
  v6 = v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew();
  v3 = v8;
  v2 = v9;
  v8 = 0;
  v9 = v3;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)&v9, v2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v6, v7[0]);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  v4 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> &>(&v9);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v9);
  return v4;
}

void sub_2300553CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, unsigned int *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a14);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerIsAnonymous(uint64_t result)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (result)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymous(v1);
  }
  return result;
}

uint64_t RIOPxrSdfLayerIsEmpty(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (!a1)
    return 1;
  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  return pxrInternal__aapl__pxrReserved__::SdfLayer::IsEmpty(v1);
}

uint64_t RIOPxrSdfLayerCopyDefaultPrim(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetDefaultPrim(v1);
  result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v5);
  if ((v5 & 7) != 0)
  {
    v3 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  return result;
}

void RIOPxrSdfLayerSetDefaultPrim(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  std::recursive_mutex *v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 && a2)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v16, v7);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v8.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v16);
    v10 = v9;
    v11 = v17;
    if (v17)
    {
      v12 = (unsigned int *)(v17 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetDefaultPrim(v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    std::recursive_mutex::unlock(v10);
  }
}

void sub_2300555AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerClearDefaultPrim(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::recursive_mutex *v7;
  std::recursive_mutex *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v14, v5);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v6.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    v8 = v7;
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
    }
    std::recursive_mutex::lock(v8);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearDefaultPrim(v13);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_2300556A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrSdfLayerCopyComment(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  const char *p_p;
  CFStringRef v3;
  void *__p;
  char v6;

  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetComment(v1);
  if (v6 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v3 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (v6 < 0)
    operator delete(__p);
  return v3;
}

void sub_230055758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerSetComment(uint64_t *a1, char *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  std::recursive_mutex *v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *__p;
  uint64_t v16;
  char v17;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&__p, v7);
    }
    else
    {
      __p = 0;
      v16 = 0;
    }
    v8.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &__p);
    v10 = v9;
    v11 = v16;
    if (v16)
    {
      v12 = (unsigned int *)(v16 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    if (a2)
      std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    else
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetComment();
    if (v17 < 0)
      operator delete(__p);
    std::recursive_mutex::unlock(v10);
  }
}

void sub_230055888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::recursive_mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::recursive_mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void sub_2300558C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a11)
  {
    v11 = a11 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  JUMPOUT(0x2300558B8);
}

CFStringRef RIOPxrSdfLayerCopyIdentifier(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  uint64_t Identifier;
  const char *v3;

  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v1);
  if (*(char *)(Identifier + 23) >= 0)
    v3 = (const char *)Identifier;
  else
    v3 = *(const char **)Identifier;
  return CFStringCreateWithCString(0, v3, 0x8000100u);
}

void RIOPxrSdfLayerSetIdentifier(uint64_t *a1, char *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  std::recursive_mutex *v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *__p;
  uint64_t v16;
  char v17;

  if (a1 && a2)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&__p, v7);
    }
    else
    {
      __p = 0;
      v16 = 0;
    }
    v8.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &__p);
    v10 = v9;
    v11 = v16;
    if (v16)
    {
      v12 = (unsigned int *)(v16 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier();
    if (v17 < 0)
      operator delete(__p);
    std::recursive_mutex::unlock(v10);
  }
}

void sub_230055A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::recursive_mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::recursive_mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void sub_230055A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a11)
  {
    v11 = a11 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  JUMPOUT(0x230055A3CLL);
}

CFStringRef RIOPxrSdfLayerCopyRepositoryPath(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  uint64_t RepositoryPath;
  const char *v3;

  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  RepositoryPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRepositoryPath(v1);
  if (*(char *)(RepositoryPath + 23) >= 0)
    v3 = (const char *)RepositoryPath;
  else
    v3 = *(const char **)RepositoryPath;
  return CFStringCreateWithCString(0, v3, 0x8000100u);
}

CFStringRef RIOPxrSdfLayerCopyDisplayName(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  const char *p_p;
  CFStringRef v3;
  void *__p;
  char v6;

  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetDisplayName(v1);
  if (v6 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v3 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (v6 < 0)
    operator delete(__p);
  return v3;
}

void sub_230055B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrSdfLayerCopyRealPath(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  uint64_t RealPath;
  const char *v3;

  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v1);
  if (*(char *)(RealPath + 23) >= 0)
    v3 = (const char *)RealPath;
  else
    v3 = *(const char **)RealPath;
  return CFStringCreateWithCString(0, v3, 0x8000100u);
}

CFStringRef RIOPxrSdfLayerCopyAbsolutePath(uint64_t a1, char *a2)
{
  const char *p_p;
  CFStringRef v4;
  void *v6;
  char v7;
  void *__p;
  char v9;

  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  std::string::basic_string[abi:ne180100]<0>(&v6, a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::ComputeAbsolutePath();
  if (v9 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v4 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  return v4;
}

void sub_230055C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrSdfLayerCopyAssetName(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  uint64_t AssetName;
  const char *v3;

  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  AssetName = pxrInternal__aapl__pxrReserved__::SdfLayer::GetAssetName(v1);
  if (*(char *)(AssetName + 23) >= 0)
    v3 = (const char *)AssetName;
  else
    v3 = *(const char **)AssetName;
  return CFStringCreateWithCString(0, v3, 0x8000100u);
}

CFStringRef RIOPxrSdfLayerCopyFileExtension(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  const char *p_p;
  CFStringRef v3;
  void *__p;
  char v6;

  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileExtension(v1);
  if (v6 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v3 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (v6 < 0)
    operator delete(__p);
  return v3;
}

void sub_230055CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerGetMetadata(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 0;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  v4 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v3);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v3, v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  v5 = v9;
  if (v9)
  {
    if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(MEMORY[0x24BEDB6C8] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
    {
LABEL_7:
      if ((v5 & 4) != 0)
        (*(void (**)(_BYTE *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v8);
      v6 = 0;
      goto LABEL_11;
    }
    if ((v9 & 4) != 0
      && pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl((pxrInternal__aapl__pxrReserved__::VtValue *)v8, MEMORY[0x24BEDB6C8]))
    {
      v5 = v9;
      goto LABEL_7;
    }
  }
  v6 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
LABEL_11:
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return v6;
}

void sub_230055E00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrSdfLayerSetMetadata(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  std::recursive_mutex *v11;
  std::recursive_mutex *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v18;
  uint64_t v19;
  uint64_t v20;

  if (a1)
  {
    v6 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v8 = a1[2];
    v7 = a1 + 2;
    if (v8)
    {
      v9 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v7);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v19, v9);
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v10.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v6, &v19);
    v12 = v11;
    v13 = v20;
    if (v20)
    {
      v14 = (unsigned int *)(v20 + 8);
      do
      {
        v15 = __ldxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v13 + 8))(v13, v10);
    }
    std::recursive_mutex::lock(v12);
    v17 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v7);
    v18 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v17);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v17, v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a3 + 16));
    std::recursive_mutex::unlock(v12);
  }
}

void sub_230055EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerCopyColorConfiguration(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  std::string *v3;
  uint64_t v4;
  _BYTE v5[24];
  void *__p;
  char v7;
  std::string v8;

  if (!a1)
    return RIOPxrSdfAssetPathCreateEmptyPath();
  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetColorConfiguration(v1);
  if ((v5[23] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)v5, *(std::string::size_type *)&v5[8]);
  else
    v8 = *(std::string *)v5;
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v8;
  else
    v3 = (std::string *)v8.__r_.__value_.__r.__words[0];
  v4 = RIOPxrSdfAssetPathCreateFromCString((char *)v3);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(__p);
  if ((v5[23] & 0x80000000) != 0)
    operator delete(*(void **)v5);
  return v4;
}

void sub_230056000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)&a9);
  _Unwind_Resume(a1);
}

void RIOPxrSdfLayerSetColorConfiguration(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  std::recursive_mutex *v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v16, v7);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v8.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v16);
    v10 = v9;
    v11 = v17;
    if (v17)
    {
      v12 = (unsigned int *)(v17 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetColorConfiguration(v15, (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)(a2 + 16));
    std::recursive_mutex::unlock(v10);
  }
}

void sub_2300560EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasColorConfiguration(uint64_t result)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (result)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasColorConfiguration(v1);
  }
  return result;
}

void RIOPxrSdfLayerClearColorConfiguration(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::recursive_mutex *v7;
  std::recursive_mutex *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v14, v5);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v6.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    v8 = v7;
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
    }
    std::recursive_mutex::lock(v8);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearColorConfiguration(v13);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_230056204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerCopyColorManagementSystem(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  if (a1)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetColorManagementSystem(v1);
    result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v5);
    if ((v5 & 7) != 0)
    {
      v3 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1)
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_1_2);
    return RIOPxrTfTokenEmpty::tokenRef;
  }
  return result;
}

void RIOPxrSdfLayerSetColorManagementSystem(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  std::recursive_mutex *v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v16, v7);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v8.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v16);
    v10 = v9;
    v11 = v17;
    if (v17)
    {
      v12 = (unsigned int *)(v17 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetColorManagementSystem(v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    std::recursive_mutex::unlock(v10);
  }
}

void sub_2300563BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasColorManagementSystem(uint64_t result)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (result)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasColorManagementSystem(v1);
  }
  return result;
}

void RIOPxrSdfLayerClearColorManagementSystem(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::recursive_mutex *v7;
  std::recursive_mutex *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v14, v5);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v6.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    v8 = v7;
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
    }
    std::recursive_mutex::lock(v8);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearColorManagementSystem(v13);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_2300564D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrSdfLayerCopyDocumentation(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  const char *p_p;
  CFStringRef v4;
  void *__p;
  char v7;

  if (a1)
  {
    v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetDocumentation(v2);
    if (v7 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
  }
  else
  {
    p_p = "";
  }
  v4 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (a1 && v7 < 0)
    operator delete(__p);
  return v4;
}

void sub_2300565A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (v15)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerSetDocumentation(uint64_t *a1, char *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  std::recursive_mutex *v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  void *__p;
  uint64_t v17;
  char v18;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&__p, v7);
    }
    else
    {
      __p = 0;
      v17 = 0;
    }
    v8.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &__p);
    v10 = v9;
    v11 = v17;
    if (v17)
    {
      v12 = (unsigned int *)(v17 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    if (a2)
      v15 = a2;
    else
      v15 = "";
    std::string::basic_string[abi:ne180100]<0>(&__p, v15);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetDocumentation();
    if (v18 < 0)
      operator delete(__p);
    std::recursive_mutex::unlock(v10);
  }
}

void sub_2300566B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::recursive_mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::recursive_mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void sub_2300566E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a11)
  {
    v11 = a11 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  JUMPOUT(0x2300566D8);
}

double RIOPxrSdfLayerGetStartTimeCode(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  double result;

  if (!a1)
    return 0.0;
  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetStartTimeCode(v1);
  return result;
}

void RIOPxrSdfLayerSetStartTimeCode(uint64_t *a1, double a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  std::recursive_mutex *v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v16, v7);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v8.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v16);
    v10 = v9;
    v11 = v17;
    if (v17)
    {
      v12 = (unsigned int *)(v17 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetStartTimeCode(v15, a2);
    std::recursive_mutex::unlock(v10);
  }
}

void sub_2300567F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasStartTimeCode(uint64_t result)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (result)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasStartTimeCode(v1);
  }
  return result;
}

void RIOPxrSdfLayerClearStartTimeCode(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::recursive_mutex *v7;
  std::recursive_mutex *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v14, v5);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v6.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    v8 = v7;
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
    }
    std::recursive_mutex::lock(v8);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearStartTimeCode(v13);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_230056910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

double RIOPxrSdfLayerGetEndTimeCode(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  double result;

  if (!a1)
    return 0.0;
  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetEndTimeCode(v1);
  return result;
}

void RIOPxrSdfLayerSetEndTimeCode(uint64_t *a1, double a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  std::recursive_mutex *v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v16, v7);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v8.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v16);
    v10 = v9;
    v11 = v17;
    if (v17)
    {
      v12 = (unsigned int *)(v17 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetEndTimeCode(v15, a2);
    std::recursive_mutex::unlock(v10);
  }
}

void sub_230056A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasEndTimeCode(uint64_t result)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (result)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasEndTimeCode(v1);
  }
  return result;
}

void RIOPxrSdfLayerClearEndTimeCode(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::recursive_mutex *v7;
  std::recursive_mutex *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v14, v5);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v6.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    v8 = v7;
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
    }
    std::recursive_mutex::lock(v8);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearEndTimeCode(v13);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_230056B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

double RIOPxrSdfLayerGetTimeCodesPerSecond(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  double result;

  if (!a1)
    return 24.0;
  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(v1);
  return result;
}

void RIOPxrSdfLayerSetTimeCodesPerSecond(uint64_t *a1, double a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  std::recursive_mutex *v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v16, v7);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v8.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v16);
    v10 = v9;
    v11 = v17;
    if (v17)
    {
      v12 = (unsigned int *)(v17 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeCodesPerSecond(v15, a2);
    std::recursive_mutex::unlock(v10);
  }
}

void sub_230056C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasTimeCodesPerSecond(uint64_t result)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (result)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasTimeCodesPerSecond(v1);
  }
  return result;
}

void RIOPxrSdfLayerClearTimeCodesPerSecond(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::recursive_mutex *v7;
  std::recursive_mutex *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v14, v5);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v6.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    v8 = v7;
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
    }
    std::recursive_mutex::lock(v8);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearTimeCodesPerSecond(v13);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_230056D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

double RIOPxrSdfLayerGetFramesPerSecond(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  double result;

  if (!a1)
    return 24.0;
  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetFramesPerSecond(v1);
  return result;
}

void RIOPxrSdfLayerSetFramesPerSecond(uint64_t *a1, double a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  std::recursive_mutex *v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v16, v7);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v8.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v16);
    v10 = v9;
    v11 = v17;
    if (v17)
    {
      v12 = (unsigned int *)(v17 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetFramesPerSecond(v15, a2);
    std::recursive_mutex::unlock(v10);
  }
}

void sub_230056EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasFramesPerSecond(uint64_t result)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (result)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasFramesPerSecond(v1);
  }
  return result;
}

void RIOPxrSdfLayerClearFramesPerSecond(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::recursive_mutex *v7;
  std::recursive_mutex *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v14, v5);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v6.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    v8 = v7;
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
    }
    std::recursive_mutex::lock(v8);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearFramesPerSecond(v13);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_230056FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerGetFramePrecision(uint64_t result)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (result)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return pxrInternal__aapl__pxrReserved__::SdfLayer::GetFramePrecision(v1);
  }
  return result;
}

void RIOPxrSdfLayerSetFramePrecision(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::recursive_mutex *v7;
  std::recursive_mutex *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v14, v5);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v6.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    v8 = v7;
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
    }
    std::recursive_mutex::lock(v8);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetFramePrecision(v13);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_230057104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasFramePrecision(uint64_t result)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (result)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasFramePrecision(v1);
  }
  return result;
}

void RIOPxrSdfLayerClearFramePrecision(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::recursive_mutex *v7;
  std::recursive_mutex *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v14, v5);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v6.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    v8 = v7;
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
    }
    std::recursive_mutex::lock(v8);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearFramePrecision(v13);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23005721C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrSdfLayerCopyOwner(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  const char *p_p;
  CFStringRef v4;
  void *__p;
  char v7;

  if (a1)
  {
    v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetOwner(v2);
    if (v7 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
  }
  else
  {
    p_p = "";
  }
  v4 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (a1 && v7 < 0)
    operator delete(__p);
  return v4;
}

void sub_2300572E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (v15)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerSetOwner(uint64_t *a1, char *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  std::recursive_mutex *v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  void *__p;
  uint64_t v17;
  char v18;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&__p, v7);
    }
    else
    {
      __p = 0;
      v17 = 0;
    }
    v8.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &__p);
    v10 = v9;
    v11 = v17;
    if (v17)
    {
      v12 = (unsigned int *)(v17 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    if (a2)
      v15 = a2;
    else
      v15 = "";
    std::string::basic_string[abi:ne180100]<0>(&__p, v15);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetOwner();
    if (v18 < 0)
      operator delete(__p);
    std::recursive_mutex::unlock(v10);
  }
}

void sub_2300573F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::recursive_mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::recursive_mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void sub_230057428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a11)
  {
    v11 = a11 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  JUMPOUT(0x230057420);
}

uint64_t RIOPxrSdfLayerHasOwner(uint64_t result)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (result)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasOwner(v1);
  }
  return result;
}

void RIOPxrSdfLayerClearOwner(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::recursive_mutex *v7;
  std::recursive_mutex *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v14, v5);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v6.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    v8 = v7;
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
    }
    std::recursive_mutex::lock(v8);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearOwner(v13);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23005752C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrSdfLayerCopySessionOwner(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  const char *p_p;
  CFStringRef v4;
  void *__p;
  char v7;

  if (a1)
  {
    v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetSessionOwner(v2);
    if (v7 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
  }
  else
  {
    p_p = "";
  }
  v4 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (a1 && v7 < 0)
    operator delete(__p);
  return v4;
}

void sub_2300575F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (v15)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerSetSessionOwner(uint64_t *a1, char *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  std::recursive_mutex *v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  void *__p;
  uint64_t v17;
  char v18;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&__p, v7);
    }
    else
    {
      __p = 0;
      v17 = 0;
    }
    v8.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &__p);
    v10 = v9;
    v11 = v17;
    if (v17)
    {
      v12 = (unsigned int *)(v17 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    if (a2)
      v15 = a2;
    else
      v15 = "";
    std::string::basic_string[abi:ne180100]<0>(&__p, v15);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetSessionOwner();
    if (v18 < 0)
      operator delete(__p);
    std::recursive_mutex::unlock(v10);
  }
}

void sub_230057708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::recursive_mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::recursive_mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void sub_230057738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a11)
  {
    v11 = a11 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  JUMPOUT(0x230057730);
}

uint64_t RIOPxrSdfLayerHasSessionOwner(uint64_t result)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (result)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasSessionOwner(v1);
  }
  return result;
}

void RIOPxrSdfLayerClearSessionOwner(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::recursive_mutex *v7;
  std::recursive_mutex *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v14, v5);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v6.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    v8 = v7;
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
    }
    std::recursive_mutex::lock(v8);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearSessionOwner(v13);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23005783C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerGetHasOwnedSubLayers(uint64_t result)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (result)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return pxrInternal__aapl__pxrReserved__::SdfLayer::GetHasOwnedSubLayers(v1);
  }
  return result;
}

void RIOPxrSdfLayerSetHasOwnedSubLayers(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::recursive_mutex *v7;
  std::recursive_mutex *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v14, v5);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v6.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    v8 = v7;
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
    }
    std::recursive_mutex::lock(v8);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetHasOwnedSubLayers(v13);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_230057964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasCustomLayerMetaData(uint64_t result)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (result)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasCustomLayerData(v1);
  }
  return result;
}

void RIOPxrSdfLayerClearAllCustomLayerMetaData(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::recursive_mutex *v7;
  std::recursive_mutex *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v14, v5);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v6.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    v8 = v7;
    v9 = v15;
    if (v15)
    {
      v10 = (unsigned int *)(v15 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
    }
    std::recursive_mutex::lock(v8);
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearCustomLayerData(v13);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_230057A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *RIOPxrSdfLayerCopySubLayerPaths(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;
  __CFArray *Mutable;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  std::string *p_p;
  CFStringRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::string __p;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unsigned int v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(v1);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v3 = pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>::_Validate(v21);
  v4 = v3;
  v5 = 0;
  v6 = 0;
  if (v3)
    v7 = &v21;
  else
    v7 = 0;
  if (v3)
    v8 = (uint64_t)&v23;
  else
    v8 = 16;
  while (1)
  {
    v9 = pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>::_Validate(v21);
    if (v21)
    {
      v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 112))(v21, v23);
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[1] - *v10) >> 3);
    }
    else
    {
      v11 = 0;
    }
    if (v4 != v9)
    {
      v24 = "sdf/listProxy.h";
      v25 = "equal";
      v26 = 268;
      v27 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>"
            "::_Iterator<pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerType"
            "Policy> *, pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypeP"
            "olicy>::_GetHelper>::equal(const This &) const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLayerT"
            "ypePolicy, Owner = pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLa"
            "yerTypePolicy> *, GetItem = pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__:"
            ":SdfSubLayerTypePolicy>::_GetHelper]";
      v28 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
      goto LABEL_14;
    }
    if (v6 == v11)
      break;
LABEL_14:
    if (*v7)
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)(*v7 + 8)))
      {
        v12 = (__int128 *)(*(_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)*v7 + 112))(*v7, *(unsigned int *)v8)+ v5);
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
        }
        else
        {
          v13 = *v12;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
        }
        goto LABEL_21;
      }
      v24 = "sdf/listProxy.h";
      v25 = "_Validate";
      v26 = 702;
      v27 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>"
            "::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy]";
      v28 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    }
    memset(&__p, 0, sizeof(__p));
LABEL_21:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v15 = CFStringCreateWithCString(0, (const char *)p_p, 0x8000100u);
    CFArrayAppendValue(Mutable, v15);
    CFRelease(v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    ++v6;
    v5 += 24;
  }
  v16 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return Mutable;
}

void sub_230057D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void RIOPxrSdfLayerSetSubLayerPathsWithStrings(uint64_t a1, CFArrayRef theArray)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v5;
  __int128 *v6;
  __int128 v7;
  __int128 *v8;
  realityio::UsdLayerMutexTracker *v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  std::recursive_mutex *v16;
  std::recursive_mutex *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  std::string v25;
  _BYTE __p[32];
  __int128 *v27;
  __int128 *v28;
  unint64_t v29;
  _QWORD v30[3];
  realityio::UsdLayerMutexTracker *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return;
  v2 = theArray;
  v30[0] = &off_24FDF02F8;
  v31 = (realityio::UsdLayerMutexTracker *)v30;
  if (theArray)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    Count = CFArrayGetCount(theArray);
    if (Count < 1)
    {
LABEL_22:
      memset(__p, 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)__p, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
      LODWORD(v2) = 1;
      v22 = 1;
      v23 = *(_OWORD *)__p;
      v24 = *(_QWORD *)&__p[16];
      v25.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      memset(__p, 0, 24);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
    }
    else
    {
      v5 = 0;
      while (1)
      {
        v25.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayGetValueAtIndex(v2, v5);
        if (!v31)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *__return_ptr, realityio::UsdLayerMutexTracker *, std::string *))(*(_QWORD *)v31 + 48))(__p, v31, &v25);
        if (!__p[0])
          break;
        if ((__p[31] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
        else
          v25 = *(std::string *)&__p[8];
        v6 = v28;
        if ((unint64_t)v28 >= v29)
        {
          v8 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v27, (__int128 *)&v25);
        }
        else
        {
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v28, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
          }
          else
          {
            v7 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
            *((_QWORD *)v28 + 2) = *((_QWORD *)&v25.__r_.__value_.__l + 2);
            *v6 = v7;
          }
          v8 = (__int128 *)((char *)v6 + 24);
        }
        v28 = v8;
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
        if (__p[0] && (__p[31] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
        if (Count == ++v5)
          goto LABEL_22;
      }
      LODWORD(v2) = 0;
      v22 = 0;
      v23 = *(_OWORD *)&__p[8];
    }
    *(_QWORD *)__p = &v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    v22 = 0;
    *(_QWORD *)&v23 = 0;
    *((_QWORD *)&v23 + 1) = std::system_category();
  }
  v9 = v31;
  if (v31 == (realityio::UsdLayerMutexTracker *)v30)
  {
    v10 = 4;
    v9 = (realityio::UsdLayerMutexTracker *)v30;
  }
  else
  {
    if (!v31)
      goto LABEL_31;
    v10 = 5;
  }
  v9 = (realityio::UsdLayerMutexTracker *)(*(uint64_t (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_31:
  if ((_DWORD)v2)
  {
    v11 = realityio::UsdLayerMutexTracker::instance(v9);
    v13 = *(_QWORD *)(a1 + 16);
    v12 = (uint64_t *)(a1 + 16);
    if (v13)
    {
      v14 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v12);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(__p, v14);
    }
    else
    {
      *(_OWORD *)__p = 0uLL;
    }
    v15.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v11, __p);
    v17 = v16;
    v18 = *(_QWORD *)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v19 = (unsigned int *)(*(_QWORD *)&__p[8] + 8);
      do
      {
        v20 = __ldxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v18 + 8))(v18, v15);
    }
    std::recursive_mutex::lock(v17);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v12);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetSubLayerPaths();
    std::recursive_mutex::unlock(v17);
    if (v22)
    {
      *(_QWORD *)__p = &v23;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
  }
}

void sub_230058058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28)
{
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;

  a20 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  v30 = *(_QWORD **)(v28 - 64);
  if (v30 == (_QWORD *)(v28 - 88))
  {
    v31 = 4;
    v30 = (_QWORD *)(v28 - 88);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerGetNumSubLayerPaths(uint64_t result)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v1;

  if (result)
  {
    v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return pxrInternal__aapl__pxrReserved__::SdfLayer::GetNumSubLayerPaths(v1);
  }
  return result;
}

BOOL RIOPxrSdfLayerCanApplyBatchNamespaceEdit(_BOOL8 a1, const __CFArray *a2)
{
  _BOOL8 v2;
  _BYTE v4[24];

  v2 = a1;
  if (a1)
  {
    makeBatchNamespaceEditFromCFArray((const __CFArray *)v4, a2);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(v2 + 16));
    v2 = pxrInternal__aapl__pxrReserved__::SdfLayer::CanApply() != 0;
    pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)v4);
  }
  return v2;
}

void sub_2300581D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)va);
  _Unwind_Resume(a1);
}

void makeBatchNamespaceEditFromCFArray(const __CFArray *a1, const __CFArray *a2)
{
  unint64_t Count;
  unint64_t v4;
  uint64_t v5;
  CFIndex i;
  _DWORD *ValueAtIndex;
  CFTypeID v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  _DWORD *v18;
  _QWORD v19[2];
  void **v20;
  void **v21;
  void **v22;
  char *v23;
  _QWORD *v24;

  Count = CFArrayGetCount(a2);
  v17 = 0;
  v18 = 0;
  v19[0] = 0;
  if (Count)
  {
    v4 = Count;
    if (Count > 0xCCCCCCCCCCCCCCCLL)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v24 = v19;
    v20 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>>(Count);
    v21 = v20;
    v22 = v20;
    v23 = (char *)v20 + 20 * v5;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::__swap_out_circular_buffer(&v17, &v20);
    std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::~__split_buffer((uint64_t)&v20);
    for (i = 0; i != v4; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      v8 = CFGetTypeID(ValueAtIndex);
      if (RIOPxrSdfNamespaceEditGetTypeID::onceToken != -1)
        dispatch_once(&RIOPxrSdfNamespaceEditGetTypeID::onceToken, &__block_literal_global_1);
      if (v8 == RIOPxrSdfNamespaceEditGetTypeID::typeID)
      {
        v9 = ValueAtIndex + 4;
        v10 = v18;
        if ((unint64_t)v18 >= v19[0])
        {
          v12 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v18 - v17) >> 2);
          v13 = v12 + 1;
          if (v12 + 1 > 0xCCCCCCCCCCCCCCCLL)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((v19[0] - v17) >> 2) > v13)
            v13 = 0x999999999999999ALL * ((v19[0] - v17) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * ((v19[0] - v17) >> 2) >= 0x666666666666666)
            v14 = 0xCCCCCCCCCCCCCCCLL;
          else
            v14 = v13;
          v24 = v19;
          if (v14)
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>>(v14);
          else
            v15 = 0;
          v16 = (void **)(v14 + 20 * v12);
          v20 = (void **)v14;
          v21 = v16;
          v23 = (char *)(v14 + 20 * v15);
          std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit,pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit const&>(v16, v9);
          v22 = (void **)((char *)v16 + 20);
          std::vector<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::__swap_out_circular_buffer(&v17, &v20);
          v11 = v18;
          std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::~__split_buffer((uint64_t)&v20);
        }
        else
        {
          std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit,pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit const&>(v18, v9);
          v11 = v10 + 5;
        }
        v18 = v11;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::SdfBatchNamespaceEdit();
  v20 = (void **)&v17;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::__destroy_vector::operator()[abi:ne180100](&v20);
}

void sub_2300583E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerApplyBatchNamespaceEdit(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2;
  realityio::UsdLayerMutexTracker *v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  std::recursive_mutex *v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  _BYTE v17[24];
  uint64_t v18;
  uint64_t v19;

  v2 = a1;
  if (a1)
  {
    makeBatchNamespaceEditFromCFArray((const __CFArray *)v17, a2);
    v4 = realityio::UsdLayerMutexTracker::instance(v3);
    v6 = *(_QWORD *)(v2 + 16);
    v5 = (uint64_t *)(v2 + 16);
    if (v6)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v18, v7);
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    v8.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v18);
    v10 = v9;
    v11 = v19;
    if (v19)
    {
      v12 = (unsigned int *)(v19 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    v2 = pxrInternal__aapl__pxrReserved__::SdfLayer::Apply(v15, (const pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)v17);
    std::recursive_mutex::unlock(v10);
    pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)v17);
  }
  return v2;
}

void sub_2300584DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v15 = a14;
  if (a14)
  {
    v16 = (unsigned int *)(a14 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)&a10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerCopyCustomLayerDataValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  pxrInternal__aapl__pxrReserved__::TfToken *CustomLayerData;
  const pxrInternal__aapl__pxrReserved__::VtValue *ValueAtPath;
  uint64_t v8;

  v2 = 0;
  if (a1 && a2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    CustomLayerData = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v4);
    if ((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(CustomLayerData);
    ValueAtPath = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
    if (ValueAtPath)
      v2 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>(ValueAtPath);
    else
      v2 = 0;
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v8, 0);
  }
  return v2;
}

void sub_2300585C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerSetCustomLayerData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *CustomLayerData;
  realityio::UsdLayerMutexTracker *v9;
  void *v10;
  uint64_t v11;
  __n128 v12;
  std::recursive_mutex *v13;
  std::recursive_mutex *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1)
    v3 = a3 == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (!v3)
  {
    v6 = (uint64_t *)(a1 + 16);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    CustomLayerData = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v7);
    if ((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(CustomLayerData);
    v9 = (realityio::UsdLayerMutexTracker *)pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
    v10 = realityio::UsdLayerMutexTracker::instance(v9);
    if (*v6)
    {
      v11 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v6);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v22, v11);
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v10, &v22);
    v14 = v13;
    v15 = v23;
    if (v23)
    {
      v16 = (unsigned int *)(v23 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
    }
    std::recursive_mutex::lock(v14);
    v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v6);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(v19, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v21);
    std::recursive_mutex::unlock(v14);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v21, 0);
  }
  return v4;
}

void sub_2300586FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

BOOL RIOPxrSdfLayerClearCustomLayerData(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  pxrInternal__aapl__pxrReserved__::TfToken *CustomLayerData;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t v8;

  if (a1)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    CustomLayerData = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v4);
    if ((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(CustomLayerData);
    pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath();
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(v6, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v8);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v8, 0);
  }
  return a1 != 0;
}

void sub_2300587F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerFlattenSubGraphInPlace(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  char v28;
  int v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v24, (uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v29, (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v30, (_DWORD *)(a2 + 20));
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v27 = (unsigned int *)&v19;
  v28 = 0;
  v19 = operator new(8uLL);
  v20 = v19;
  v21 = v19 + 2;
  v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v21, &v29, &v31, v19);
  MEMORY[0x2348B2368](&v22, &v19);
  pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked();
  v27 = (unsigned int *)&v22;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = (unsigned int *)&v19;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
  v4 = v25;
  if (v25)
  {
    v5 = (unsigned int *)(v25 + 8);
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (v26)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v26);
    pxrInternal__aapl__pxrReserved__::UsdStage::Flatten(v8);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v22, (uint64_t *)&v27);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v19, v3);
    v9 = pxrInternal__aapl__pxrReserved__::SdfCopySpec();
    v10 = v20;
    if (v20)
    {
      v11 = v20 + 2;
      do
      {
        v12 = __ldxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    }
    v14 = v23;
    if (v23)
    {
      v15 = (unsigned int *)(v23 + 8);
      do
      {
        v16 = __ldxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v27);
  }
  else
  {
    v9 = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v26);
  return v9;
}

void sub_230058A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, unsigned int *a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  va_list va;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v17 = va_arg(va1, unsigned int *);
  if (a4)
  {
    v11 = a4 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a4 + 8))(a4);
  }
  if (a7)
  {
    v14 = a7 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a7 + 8))(a7);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr((unsigned int **)va1);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)va);
  _Unwind_Resume(a1);
}

unsigned int **RIOPxrSdfLayerReplicationStartSending(unsigned int **result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (result && a3)
  {
    v8 = result[2];
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v8);
    getOrCreateReplicationLayerStateDelegate((pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase **)&v9, (uint64_t *)&v8);
    v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::operator->((uint64_t)v9);
    v10[0] = &off_24FDF0388;
    v10[1] = a3;
    v10[2] = a2;
    v11 = v10;
    boost::optional_detail::optional_base<realityio::replication::LayerStateDelegate::Sender>::emplace_assign<std::function<void ()(char const*,unsigned long)> const&>(v5 + 48, v10);
    v6 = v11;
    if (v11 == v10)
    {
      v7 = 4;
      v6 = v10;
    }
    else
    {
      if (!v11)
      {
LABEL_8:
        pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr(&v9);
        return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v8);
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_8;
  }
  return result;
}

void sub_230058C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10, unsigned int *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr(&a11);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a10);
  _Unwind_Resume(a1);
}

unsigned int **getOrCreateReplicationLayerStateDelegate(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase **a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  BOOL v5;
  realityio::replication::LayerStateDelegate *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  realityio::replication::LayerStateDelegate *v11;
  realityio::UsdLayerMutexTracker *v12;
  void *v13;
  uint64_t v14;
  __n128 v15;
  std::recursive_mutex *v16;
  std::recursive_mutex *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *v22;
  unsigned int *v23;
  int v24;
  unsigned int v25;
  unsigned int v27;
  char v28;
  realityio::replication::LayerStateDelegate *v29;
  void *lpsrc;
  uint64_t v31;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetStateDelegate(v4);
  if (!v31
    || (*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(&v31)
                 + 14)
      ? (v5 = lpsrc == 0)
      : (v5 = 1),
        v5))
  {
    v6 = 0;
  }
  else
  {
  }
  v29 = v6;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::_AddRef((uint64_t)v6);
  v7 = v31;
  if (v31)
  {
    v8 = (unsigned int *)(v31 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v11 = v29;
  if (!v29)
  {
    v12 = (realityio::UsdLayerMutexTracker *)realityio::replication::LayerStateDelegate::New(a1);
    v13 = realityio::UsdLayerMutexTracker::instance(v12);
    if (*a2)
    {
      v14 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(a2);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&lpsrc, v14);
    }
    else
    {
      lpsrc = 0;
      v31 = 0;
    }
    v15.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v13, &lpsrc);
    v17 = v16;
    v18 = v31;
    if (v31)
    {
      v19 = (unsigned int *)(v31 + 8);
      do
      {
        v20 = __ldxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v18 + 8))(v18, v15);
    }
    std::recursive_mutex::lock(v17);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(a2);
    v22 = *a1;
    lpsrc = v22;
    if (!v22)
      goto LABEL_26;
    v23 = (unsigned int *)((char *)v22 + 8);
    v24 = *((_DWORD *)v22 + 2);
    if ((v24 & 0x80000000) == 0)
    {
      do
        v25 = __ldxr(v23);
      while (__stxr(v25 + 1, v23));
      goto LABEL_26;
    }
    if (v24 == -1)
      goto LABEL_36;
    v27 = __ldxr(v23);
    if (v27 == v24)
    {
      if (!__stxr(v24 - 1, v23))
      {
        v28 = 1;
        goto LABEL_35;
      }
    }
    else
    {
      __clrex();
    }
    v28 = 0;
LABEL_35:
    if ((v28 & 1) != 0)
    {
LABEL_26:
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetStateDelegate();
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase>::~TfRefPtr((unsigned int **)&lpsrc);
      std::recursive_mutex::unlock(v17);
      return pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr((unsigned int **)&v29);
    }
LABEL_36:
    pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
    goto LABEL_26;
  }
  *a1 = v29;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::_AddRef((uint64_t)v11);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr((unsigned int **)&v29);
}

