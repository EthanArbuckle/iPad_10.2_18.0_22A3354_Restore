char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<NLTransliterationCandidate **>,std::__wrap_iter<NLTransliterationCandidate **>>(char *__src, char *a2, char *a3)
{
  char *v4;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  size_t v9;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      v6 = *(_QWORD *)__src;
      v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v7];
      *(_QWORD *)v4 = v6;
    }
    else if (a2 + 8 == a3)
    {
      v8 = *((_QWORD *)a3 - 1);
      v4 = __src + 8;
      v9 = a3 - 8 - __src;
      if (a3 - 8 != __src)
        memmove(__src + 8, __src, v9);
      *(_QWORD *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<NLTransliterationCandidate **>>(__src, a2, a3);
    }
  }
  return v4;
}

_QWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<NLTransliterationCandidate **>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = a1 + 1;
      v5 = a2 + 1;
      do
      {
        v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2)
          break;
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    v8 = a3 - a2;
    v9 = a2 - a1;
    do
    {
      v10 = v9;
      v9 = v8;
      v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      v11 = &a1[v9];
      do
      {
        v13 = *--v11;
        v12 = v13;
        v14 = &v11[v3];
        v15 = v11;
        do
        {
          v16 = v14;
          *v15 = *v14;
          v17 = &v14[v3];
          v18 = __OFSUB__(v3, a3 - v14);
          v20 = v3 - (a3 - v14);
          v19 = (v20 < 0) ^ v18;
          v14 = &a1[v20];
          if (v19)
            v14 = v17;
          v15 = v16;
        }
        while (v14 != v11);
        *v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

std::string *std::vector<std::vector<NLExtendedString>>::__construct_one_at_end[abi:ne180100]<std::vector<NLExtendedString> const&>(uint64_t a1, __int128 **a2)
{
  std::string *v3;
  std::string *result;

  v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(_QWORD *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_1A188A2F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  ++v15;
  std::vector<std::vector<NLExtendedString>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<NLExtendedString>>::~__split_buffer(v14);
  return v12;
}

void sub_1A188A40C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<NLExtendedString>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<NLExtendedString>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<NLExtendedString>>,std::reverse_iterator<std::vector<NLExtendedString>*>,std::reverse_iterator<std::vector<NLExtendedString>*>,std::reverse_iterator<std::vector<NLExtendedString>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<NLExtendedString>>,std::reverse_iterator<std::vector<NLExtendedString>*>,std::reverse_iterator<std::vector<NLExtendedString>*>,std::reverse_iterator<std::vector<NLExtendedString>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::reverse_iterator<std::vector<NLExtendedString>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::reverse_iterator<std::vector<NLExtendedString>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::reverse_iterator<std::vector<NLExtendedString>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::reverse_iterator<std::vector<NLExtendedString>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<NLExtendedString>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<NLExtendedString>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<NLExtendedString>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::vector<NLTransliterationCandidate *>>::__push_back_slow_path<std::vector<NLTransliterationCandidate *> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<NLTransliterationCandidate *>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1A188A730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<NLTransliterationCandidate *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<NLTransliterationCandidate *>>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<NLTransliterationCandidate *>>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLTransliterationCandidate *>>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLTransliterationCandidate *>>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<NLLatticePath>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<NLLatticePath>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<NLLatticePath>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 24);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

std::string *std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<NLExtendedString>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NLExtendedString>,NLExtendedString*,NLExtendedString*,NLExtendedString*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1A188AA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<NLLatticePath>::__push_back_slow_path<NLLatticePath const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  std::string *v11;
  std::string::value_type *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLLatticePath>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (std::string *)&v7[56 * v3];
  v13 = &v7[56 * v6];
  std::allocator<NLLatticePath>::construct[abi:ne180100]<NLLatticePath,NLLatticePath const&>((_DWORD)a1 + 16, v11, a2);
  v12 = &v11[2].__r_.__value_.__s.__data_[8];
  std::vector<NLLatticePath>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<NLLatticePath>::~__split_buffer(&v10);
  return v8;
}

void sub_1A188AB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<NLLatticePath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

double std::allocator<NLLatticePath>::construct[abi:ne180100]<NLLatticePath,NLLatticePath const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  double result;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(this + 1, *((__int128 **)a3 + 3), *((__int128 **)a3 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 4) - *((_QWORD *)a3 + 3)) >> 4));
  result = *((double *)a3 + 6);
  *(double *)&this[2].__r_.__value_.__l.__data_ = result;
  return result;
}

void sub_1A188ABE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<NLLatticePath>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLLatticePath>,std::reverse_iterator<NLLatticePath*>,std::reverse_iterator<NLLatticePath*>,std::reverse_iterator<NLLatticePath*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NLLatticePath>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLLatticePath>,std::reverse_iterator<NLLatticePath*>,std::reverse_iterator<NLLatticePath*>,std::reverse_iterator<NLLatticePath*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v14 + 1) - 56;
      *((_QWORD *)&v14 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLLatticePath>,std::reverse_iterator<NLLatticePath*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLLatticePath>,std::reverse_iterator<NLLatticePath*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<NLLatticePath>,std::reverse_iterator<NLLatticePath*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<NLLatticePath>,std::reverse_iterator<NLLatticePath*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<NLLatticePath>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<NLLatticePath>::~__split_buffer(void **a1)
{
  std::__split_buffer<NLLatticePath>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<NLLatticePath>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<NLLatticePath>::destroy[abi:ne180100](v4, i - 56);
  }
}

void *std::get_temporary_buffer[abi:ne180100]<NLExtendedString>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x2AAAAAAAAAAAAAALL)
    v1 = 0x2AAAAAAAAAAAAAALL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(48 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, __int128 *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v17 = a1;
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v16 = a2 - 48;
      if (NLExtendedString::operator>(a2 - 48, (uint64_t)a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<NLExtendedString *> &,std::__wrap_iter<NLExtendedString *> &>(&v17, &v16);
    }
    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>((uint64_t)a1, a2);
    }
    else
    {
      v12 = a4 >> 1;
      v13 = (uint64_t)&a1[6 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>((uint64_t)a1, (uint64_t)&a1[6 * (a4 >> 1)], a3, a4 >> 1, (uint64_t)a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>((uint64_t)&a1[6 * (a4 >> 1)], a2, a3, a4 - v12, (uint64_t)&a5[3 * v12]);
        v15 = a4;
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,NLExtendedString*,NLExtendedString*,std::__wrap_iter<NLExtendedString*>>((uint64_t)a5, &a5[3 * v12], (uint64_t)&a5[3 * v12], (uint64_t)&a5[3 * a4], (uint64_t)a1);
        if (a5)
          std::__destruct_n::__process[abi:ne180100]<NLExtendedString>(&v15, (uint64_t)a5);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(a1, &a1[6 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        v14 = a4 - v12;
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(v13, a2, a3, v14, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>((uint64_t)a1, v13, a2, a3, v12, v14, a5, a6);
      }
    }
  }
}

void sub_1A188B098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;

  if (v10)
    std::__destruct_n::__process[abi:ne180100]<NLExtendedString>(&a10, v10);
  _Unwind_Resume(exception_object);
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<NLExtendedString *> &,std::__wrap_iter<NLExtendedString *> &>(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  char v9;
  _BYTE v10[15];

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  *(_QWORD *)v10 = (*a1)[1];
  *(_QWORD *)&v10[7] = *(uint64_t *)((char *)*a1 + 15);
  v5 = *((_BYTE *)*a1 + 23);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  v8 = *(__n128 *)(v2 + 3);
  v9 = *((_BYTE *)v2 + 40);
  v6 = *(_QWORD *)(v3 + 16);
  *(_OWORD *)v2 = *(_OWORD *)v3;
  v2[2] = v6;
  *(_BYTE *)(v3 + 23) = 0;
  *(_BYTE *)v3 = 0;
  LOBYTE(v6) = *(_BYTE *)(v3 + 40);
  *(_OWORD *)(v2 + 3) = *(_OWORD *)(v3 + 24);
  *((_BYTE *)v2 + 40) = v6;
  if (*(char *)(v3 + 23) < 0)
    operator delete(*(void **)v3);
  *(_QWORD *)v3 = v4;
  *(_QWORD *)(v3 + 8) = *(_QWORD *)v10;
  *(_QWORD *)(v3 + 15) = *(_QWORD *)&v10[7];
  *(_BYTE *)(v3 + 23) = v5;
  result = v8;
  *(__n128 *)(v3 + 24) = v8;
  *(_BYTE *)(v3 + 40) = v9;
  return result;
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  char v21;

  if (a1 != a2)
  {
    v4 = a1 + 48;
    if (a1 + 48 != a2)
    {
      v5 = 0;
      v6 = a1;
      do
      {
        v7 = v4;
        if (NLExtendedString::operator>(v4, v6))
        {
          v8 = *(_OWORD *)v7;
          v19 = *(_QWORD *)(v7 + 16);
          v18 = v8;
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)v7 = 0;
          v20 = *(_OWORD *)(v6 + 72);
          v21 = *(_BYTE *)(v6 + 88);
          v9 = v5;
          while (1)
          {
            v10 = v9;
            v11 = a1 + v9;
            v12 = a1 + v9 + 48;
            if (*(char *)(a1 + v9 + 71) < 0)
              operator delete(*(void **)v12);
            *(_OWORD *)v12 = *(_OWORD *)v11;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v11 + 16);
            *(_BYTE *)(v11 + 23) = 0;
            *(_BYTE *)v11 = 0;
            *(_OWORD *)(v11 + 72) = *(_OWORD *)(v11 + 24);
            *(_BYTE *)(v11 + 88) = *(_BYTE *)(v11 + 40);
            if (!v10)
              break;
            v13 = NLExtendedString::operator>((uint64_t)&v18, a1 + v10 - 48);
            v9 = v10 - 48;
            if (!v13)
            {
              v14 = a1 + v10;
              goto LABEL_12;
            }
          }
          v14 = a1;
LABEL_12:
          if (*(char *)(v14 + 23) < 0)
            operator delete(*(void **)v14);
          v15 = a1 + v10 + 24;
          v16 = v18;
          *(_QWORD *)(v14 + 16) = v19;
          *(_OWORD *)v14 = v16;
          v17 = v20;
          *(_BYTE *)(v15 + 16) = v21;
          *(_OWORD *)v15 = v17;
        }
        v4 = v7 + 48;
        v5 += 48;
        v6 = v7;
      }
      while (v7 + 48 != a2);
    }
  }
}

void sub_1A188B2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  __int128 v9;
  __n128 result;
  __int128 *v11;
  _BOOL4 v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 *v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (a4)
  {
    if (a4 == 2)
    {
      v11 = (__int128 *)(a2 - 48);
      v12 = NLExtendedString::operator>(a2 - 48, a1);
      v13 = (_OWORD *)(a5 + 24);
      v14 = (_OWORD *)(a5 + 48);
      if (v12)
      {
        v15 = *v11;
        *(_QWORD *)(a5 + 16) = *(_QWORD *)(a2 - 32);
        *(_OWORD *)a5 = v15;
        *(_QWORD *)(a2 - 40) = 0;
        *(_QWORD *)(a2 - 32) = 0;
        *(_QWORD *)v11 = 0;
        v16 = *(_OWORD *)(a2 - 24);
        *(_BYTE *)(a5 + 40) = *(_BYTE *)(a2 - 8);
        *v13 = v16;
        v17 = *(_OWORD *)a1;
        *(_QWORD *)(a5 + 64) = *(_QWORD *)(a1 + 16);
        *v14 = v17;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v18 = (__n128 *)(a1 + 24);
      }
      else
      {
        v20 = *(_OWORD *)a1;
        *(_QWORD *)(a5 + 16) = *(_QWORD *)(a1 + 16);
        *(_OWORD *)a5 = v20;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v21 = *(_OWORD *)(a1 + 24);
        *(_BYTE *)(a5 + 40) = *(_BYTE *)(a1 + 40);
        *v13 = v21;
        v22 = *v11;
        *(_QWORD *)(a5 + 64) = *(_QWORD *)(a2 - 32);
        *v14 = v22;
        *(_QWORD *)(a2 - 40) = 0;
        *(_QWORD *)(a2 - 32) = 0;
        *(_QWORD *)v11 = 0;
        v18 = (__n128 *)(a2 - 24);
      }
      result = *v18;
      *(_BYTE *)(a5 + 88) = v18[1].n128_u8[0];
      *(__n128 *)(a5 + 72) = result;
    }
    else if (a4 == 1)
    {
      v9 = *(_OWORD *)a1;
      *(_QWORD *)(a5 + 16) = *(_QWORD *)(a1 + 16);
      *(_OWORD *)a5 = v9;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      result = *(__n128 *)(a1 + 24);
      *(_BYTE *)(a5 + 40) = *(_BYTE *)(a1 + 40);
      *(__n128 *)(a5 + 24) = result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(a1, a1 + 48 * (a4 >> 1), a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(a1 + 48 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5 + 48 * (a4 >> 1), a4 - (a4 >> 1));
      result.n128_u64[0] = std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>(a1, (_QWORD *)(a1 + 48 * (a4 >> 1)), a1 + 48 * (a4 >> 1), a2, a5).n128_u64[0];
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(a1, a2, a5);
    }
  }
  return result;
}

void sub_1A188B510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;

  if (v10)
    std::__destruct_n::__process[abi:ne180100]<NLExtendedString>(&a10, v10);
  _Unwind_Resume(exception_object);
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,NLExtendedString*,NLExtendedString*,std::__wrap_iter<NLExtendedString*>>(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  __int128 v19;

  if ((_BYTE *)a1 == a2)
  {
LABEL_16:
    while (a3 != a4)
    {
      if (*(char *)(a5 + 23) < 0)
        operator delete(*(void **)a5);
      v15 = *(_OWORD *)a3;
      *(_QWORD *)(a5 + 16) = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a5 = v15;
      *(_BYTE *)(a3 + 23) = 0;
      *(_BYTE *)a3 = 0;
      result = *(__n128 *)(a3 + 24);
      *(_BYTE *)(a5 + 40) = *(_BYTE *)(a3 + 40);
      *(__n128 *)(a5 + 24) = result;
      a5 += 48;
      a3 += 48;
    }
  }
  else
  {
    v9 = a1;
    while (a3 != a4)
    {
      v10 = NLExtendedString::operator>(a3, v9);
      v11 = *(char *)(a5 + 23);
      if (v10)
      {
        if (v11 < 0)
          operator delete(*(void **)a5);
        v12 = *(_OWORD *)a3;
        *(_QWORD *)(a5 + 16) = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a5 = v12;
        *(_BYTE *)(a3 + 23) = 0;
        *(_BYTE *)a3 = 0;
        result = *(__n128 *)(a3 + 24);
        *(_BYTE *)(a5 + 40) = *(_BYTE *)(a3 + 40);
        *(__n128 *)(a5 + 24) = result;
        a3 += 48;
      }
      else
      {
        if (v11 < 0)
          operator delete(*(void **)a5);
        v14 = *(_OWORD *)v9;
        *(_QWORD *)(a5 + 16) = *(_QWORD *)(v9 + 16);
        *(_OWORD *)a5 = v14;
        *(_BYTE *)(v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        result = *(__n128 *)(v9 + 24);
        *(_BYTE *)(a5 + 40) = *(_BYTE *)(v9 + 40);
        *(__n128 *)(a5 + 24) = result;
        v9 += 48;
      }
      a5 += 48;
      if ((_BYTE *)v9 == a2)
        goto LABEL_16;
    }
    if ((_BYTE *)v9 != a2)
    {
      v16 = 0;
      do
      {
        v17 = a5 + v16;
        if (*(char *)(a5 + v16 + 23) < 0)
          operator delete(*(void **)v17);
        v18 = (_BYTE *)(v9 + v16);
        v19 = *(_OWORD *)(v9 + v16);
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(v9 + v16 + 16);
        *(_OWORD *)v17 = v19;
        v18[23] = 0;
        *v18 = 0;
        result = *(__n128 *)(v9 + v16 + 24);
        *(_BYTE *)(v17 + 40) = *(_BYTE *)(v9 + v16 + 40);
        *(__n128 *)(v17 + 24) = result;
        v16 += 48;
      }
      while (v18 + 48 != a2);
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  unint64_t v40;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;

  v44 = a2;
  if (a6)
  {
    v8 = a8;
    v12 = (uint64_t *)a2;
    v14 = v44;
    v15 = a2;
    while (1)
    {
      if (a6 <= v8 || a5 <= v8)
      {
        v44 = v14;
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(a1, v15, a3, a4, a5, a6, a7);
        return;
      }
      if (!a5)
        goto LABEL_45;
      v43 = a6;
      v16 = 0;
      v17 = -a5;
      while (1)
      {
        v18 = (uint64_t *)(a1 + v16);
        if (NLExtendedString::operator>(v15, a1 + v16))
          break;
        v16 += 48;
        if (__CFADD__(v17++, 1))
          goto LABEL_45;
      }
      v45 = (uint64_t *)(a1 + v16);
      v20 = -v17;
      v21 = v43;
      if (-v17 >= v43)
      {
        if (v17 == -1)
        {
          v44 = v14;
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<NLExtendedString *> &,std::__wrap_iter<NLExtendedString *> &>(&v45, &v44);
          return;
        }
        if (v17 > 0)
          v20 = 1 - v17;
        v27 = v20 >> 1;
        v28 = a1 + 48 * (v20 >> 1);
        v26 = v27;
        v12 = (uint64_t *)(v28 + v16);
        v14 = a3;
        if (a3 != v15)
        {
          v40 = v27;
          v29 = 0xAAAAAAAAAAAAAAABLL * ((a3 - v15) >> 4);
          v14 = v15;
          do
          {
            v30 = v14 + 48 * (v29 >> 1);
            v31 = NLExtendedString::operator>(v30, (uint64_t)v12);
            if (v31)
              v29 += ~(v29 >> 1);
            else
              v29 >>= 1;
            if (v31)
              v14 = v30 + 48;
          }
          while (v29);
          v26 = v40;
          v21 = v43;
        }
        v23 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 4);
      }
      else
      {
        if (v43 >= 0)
          v22 = v43;
        else
          v22 = v43 + 1;
        v23 = v22 >> 1;
        v14 = (uint64_t)&v12[6 * (v22 >> 1)];
        v24 = (uint64_t)v12 - a1 - v16;
        if (v24)
        {
          v38 = v22 >> 1;
          v39 = a7;
          v25 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 4);
          v12 = (uint64_t *)(a1 + v16);
          do
          {
            if (NLExtendedString::operator>(v14, (uint64_t)&v12[6 * (v25 >> 1)]))
            {
              v25 >>= 1;
            }
            else
            {
              v12 += 6 * (v25 >> 1) + 6;
              v25 += ~(v25 >> 1);
            }
          }
          while (v25);
          a7 = v39;
          v21 = v43;
          v23 = v38;
        }
        v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - a1 - v16) >> 4);
      }
      if (v12 == (uint64_t *)v15)
      {
        v34 = (uint64_t *)v14;
      }
      else if (v15 == v14)
      {
        v34 = v12;
      }
      else
      {
        v32 = v23;
        v33 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<NLExtendedString *>>(v12, v15, v14);
        v23 = v32;
        v21 = v43;
        v34 = v33;
      }
      a5 = -(uint64_t)(v26 + v17);
      v35 = v21 - v23;
      if ((uint64_t)(v26 + v23) >= (uint64_t)(v21 - (v26 + v23) - v17))
      {
        v8 = a8;
        v36 = a5;
        v37 = v23;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(v34, v14, a3, a4, v36, v21 - v23, a7, a8);
        v14 = (uint64_t)v12;
        v35 = v37;
        a5 = v26;
        a3 = (uint64_t)v34;
      }
      else
      {
        v8 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(v18, v12, v34, a4, v26, v23, a7, a8);
        v45 = v34;
        v18 = v34;
        v12 = (uint64_t *)v14;
      }
      v15 = v14;
      a1 = (uint64_t)v18;
      a6 = v35;
      if (!v35)
      {
LABEL_45:
        v44 = v14;
        return;
      }
    }
  }
}

void std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  if (a1 != a2)
  {
    v5 = a1;
    v6 = *(_OWORD *)a1;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
    *(_OWORD *)a3 = v6;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    v7 = *(_OWORD *)(a1 + 24);
    *(_BYTE *)(a3 + 40) = *(_BYTE *)(a1 + 40);
    *(_OWORD *)(a3 + 24) = v7;
    v23 = 1;
    v8 = a1 + 48;
    if (a1 + 48 != a2)
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = v8;
        v12 = NLExtendedString::operator>(v8, v10);
        v13 = (_OWORD *)(v10 + 48);
        v14 = (_OWORD *)(v10 + 72);
        if (v12)
        {
          *v13 = *(_OWORD *)v10;
          *(_QWORD *)(v10 + 64) = *(_QWORD *)(v10 + 16);
          *(_QWORD *)(v10 + 8) = 0;
          *(_QWORD *)(v10 + 16) = 0;
          *(_QWORD *)v10 = 0;
          *v14 = *(_OWORD *)(v10 + 24);
          *(_BYTE *)(v10 + 88) = *(_BYTE *)(v10 + 40);
          v15 = a3;
          ++v23;
          if (v10 != a3)
          {
            v16 = v9;
            while (1)
            {
              v17 = a3 + v16;
              if (!NLExtendedString::operator>(v11, a3 + v16 - 48))
                break;
              v18 = a3 + v16;
              if (*(char *)(a3 + v16 + 23) < 0)
                operator delete(*(void **)v17);
              *(_OWORD *)v17 = *(_OWORD *)(a3 + v16 - 48);
              *(_QWORD *)(v17 + 16) = *(_QWORD *)(a3 + v16 - 32);
              *(_BYTE *)(v18 - 25) = 0;
              *(_BYTE *)(v17 - 48) = 0;
              *(_OWORD *)(v18 + 24) = *(_OWORD *)(v18 - 24);
              *(_BYTE *)(v18 + 40) = *(_BYTE *)(v18 - 8);
              v16 -= 48;
              if (!v16)
              {
                v15 = a3;
                goto LABEL_14;
              }
            }
            v15 = a3 + v16;
          }
LABEL_14:
          if (*(char *)(v15 + 23) < 0)
            operator delete(*(void **)v15);
          v21 = *(_OWORD *)v11;
          *(_QWORD *)(v15 + 16) = *(_QWORD *)(v11 + 16);
          *(_OWORD *)v15 = v21;
          *(_BYTE *)(v5 + 71) = 0;
          *(_BYTE *)v11 = 0;
          v22 = *(_OWORD *)(v5 + 72);
          *(_BYTE *)(v15 + 40) = *(_BYTE *)(v5 + 88);
          *(_OWORD *)(v15 + 24) = v22;
        }
        else
        {
          v19 = *(_OWORD *)v11;
          *(_QWORD *)(v10 + 64) = *(_QWORD *)(v11 + 16);
          *v13 = v19;
          *(_QWORD *)(v11 + 8) = 0;
          *(_QWORD *)(v11 + 16) = 0;
          *(_QWORD *)v11 = 0;
          v20 = *(_OWORD *)(v5 + 72);
          *(_BYTE *)(v10 + 88) = *(_BYTE *)(v5 + 88);
          *v14 = v20;
          ++v23;
        }
        v8 = v11 + 48;
        v9 += 48;
        v10 += 48;
        v5 = v11;
      }
      while (v11 + 48 != a2);
    }
  }
}

void sub_1A188BBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;

  if (v10)
    std::__destruct_n::__process[abi:ne180100]<NLExtendedString>(&a10, v10);
  _Unwind_Resume(exception_object);
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  __n128 *v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;

  v20 = 0;
  if ((_QWORD *)a1 == a2)
  {
    v9 = a5;
LABEL_11:
    while (a3 != a4)
    {
      v15 = *(_OWORD *)a3;
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(a3 + 16);
      *(_OWORD *)v9 = v15;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      result = *(__n128 *)(a3 + 24);
      *(_BYTE *)(v9 + 40) = *(_BYTE *)(a3 + 40);
      *(__n128 *)(v9 + 24) = result;
      a3 += 48;
      v9 += 48;
    }
  }
  else
  {
    v8 = a1;
    v9 = a5;
    while (a3 != a4)
    {
      v10 = NLExtendedString::operator>(a3, v8);
      v11 = (__n128 *)(v9 + 24);
      if (v10)
      {
        v12 = *(_OWORD *)a3;
        *(_QWORD *)(v9 + 16) = *(_QWORD *)(a3 + 16);
        *(_OWORD *)v9 = v12;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)a3 = 0;
        result = *(__n128 *)(a3 + 24);
        *(_BYTE *)(v9 + 40) = *(_BYTE *)(a3 + 40);
        *v11 = result;
        a3 += 48;
      }
      else
      {
        v14 = *(_OWORD *)v8;
        *(_QWORD *)(v9 + 16) = *(_QWORD *)(v8 + 16);
        *(_OWORD *)v9 = v14;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)v8 = 0;
        result = *(__n128 *)(v8 + 24);
        *(_BYTE *)(v9 + 40) = *(_BYTE *)(v8 + 40);
        *v11 = result;
        v8 += 48;
      }
      ++v20;
      v9 += 48;
      if ((_QWORD *)v8 == a2)
        goto LABEL_11;
    }
    if ((_QWORD *)v8 != a2)
    {
      v16 = 0;
      do
      {
        v17 = v9 + v16;
        v18 = (_QWORD *)(v8 + v16);
        v19 = *(_OWORD *)(v8 + v16);
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(v8 + v16 + 16);
        *(_OWORD *)v17 = v19;
        v18[1] = 0;
        v18[2] = 0;
        *v18 = 0;
        result = *(__n128 *)(v8 + v16 + 24);
        *(_BYTE *)(v17 + 40) = *(_BYTE *)(v8 + v16 + 40);
        *(__n128 *)(v17 + 24) = result;
        v16 += 48;
      }
      while (v18 + 6 != a2);
    }
  }
  return result;
}

void sub_1A188BD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;

  if (v10)
    std::__destruct_n::__process[abi:ne180100]<NLExtendedString>(&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__destruct_n::__process[abi:ne180100]<NLExtendedString>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v5;

  v2 = *a1;
  if (*a1)
  {
    v5 = 0;
    do
    {
      if (*(char *)(a2 + 23) < 0)
      {
        operator delete(*(void **)a2);
        v2 = *a1;
      }
      ++v5;
      a2 += 48;
    }
    while (v5 < v2);
  }
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;

  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      v15 = 0;
      v16 = a7;
    }
    else
    {
      v15 = 0;
      v16 = a7;
      v17 = a1;
      do
      {
        v18 = *(_OWORD *)v17;
        *((_QWORD *)v16 + 2) = *(_QWORD *)(v17 + 16);
        *v16 = v18;
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 16) = 0;
        *(_QWORD *)v17 = 0;
        v19 = *(_OWORD *)(v17 + 24);
        *((_BYTE *)v16 + 40) = *(_BYTE *)(v17 + 40);
        *(__int128 *)((char *)v16 + 24) = v19;
        ++v15;
        v16 += 3;
        v17 += 48;
      }
      while (v17 != a2);
    }
    v20 = v15;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,NLExtendedString*,NLExtendedString*,std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>(a7, v16, a2, a3, a1);
  }
  else
  {
    if (a2 == a3)
    {
      v10 = 0;
      v11 = (uint64_t)a7;
    }
    else
    {
      v10 = 0;
      v11 = (uint64_t)a7;
      v12 = a2;
      do
      {
        v13 = *(_OWORD *)v12;
        *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
        *(_OWORD *)v11 = v13;
        *(_QWORD *)(v12 + 8) = 0;
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)v12 = 0;
        v14 = *(_OWORD *)(v12 + 24);
        *(_BYTE *)(v11 + 40) = *(_BYTE *)(v12 + 40);
        *(_OWORD *)(v11 + 24) = v14;
        ++v10;
        v11 += 48;
        v12 += 48;
      }
      while (v12 != a3);
    }
    v20 = v10;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::greater<NLExtendedString> &>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<std::__wrap_iter<NLExtendedString*>>,std::reverse_iterator<std::__wrap_iter<NLExtendedString*>>,std::reverse_iterator<std::__wrap_iter<NLExtendedString*>>>(v11, v11, (uint64_t)a7, (uint64_t)a7, a2, a2, a1, a1, a3, a3);
  }
  if (a7)
    std::__destruct_n::__process[abi:ne180100]<NLExtendedString>(&v20, (uint64_t)a7);
}

void sub_1A188BF24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v1)
    std::__destruct_n::__process[abi:ne180100]<NLExtendedString>((unint64_t *)(v2 - 24), v1);
  _Unwind_Resume(exception_object);
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,NLExtendedString*,NLExtendedString*,std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v19 = v5;
    v20 = v6;
    v11 = (uint64_t)a1;
    while (a3 != a4)
    {
      v12 = NLExtendedString::operator>(a3, v11);
      v13 = *(char *)(a5 + 23);
      if (v12)
      {
        if (v13 < 0)
          operator delete(*(void **)a5);
        v14 = *(_OWORD *)a3;
        *(_QWORD *)(a5 + 16) = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a5 = v14;
        *(_BYTE *)(a3 + 23) = 0;
        *(_BYTE *)a3 = 0;
        v15 = *(_OWORD *)(a3 + 24);
        *(_BYTE *)(a5 + 40) = *(_BYTE *)(a3 + 40);
        *(_OWORD *)(a5 + 24) = v15;
        a3 += 48;
      }
      else
      {
        if (v13 < 0)
          operator delete(*(void **)a5);
        v16 = *(_OWORD *)v11;
        *(_QWORD *)(a5 + 16) = *(_QWORD *)(v11 + 16);
        *(_OWORD *)a5 = v16;
        *(_BYTE *)(v11 + 23) = 0;
        *(_BYTE *)v11 = 0;
        v17 = *(_OWORD *)(v11 + 24);
        *(_BYTE *)(a5 + 40) = *(_BYTE *)(v11 + 40);
        *(_OWORD *)(a5 + 24) = v17;
        v11 += 48;
      }
      a5 += 48;
      if ((__int128 *)v11 == a2)
        return;
    }
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<NLExtendedString *,NLExtendedString *,NLExtendedString *>((uint64_t)&v18, (__int128 *)v11, a2, a5);
  }
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::greater<NLExtendedString> &>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<std::__wrap_iter<NLExtendedString*>>,std::reverse_iterator<std::__wrap_iter<NLExtendedString*>>,std::reverse_iterator<std::__wrap_iter<NLExtendedString*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  _BOOL4 v15;
  void **v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;

  if (a2 != a4)
  {
    v13 = a2;
    while (a6 != a8)
    {
      v15 = NLExtendedString::operator>(v13 - 48, a6 - 48);
      v16 = (void **)(a10 - 48);
      if (v15)
        v17 = a6;
      else
        v17 = v13;
      if (v15)
        v18 = (__int128 *)(a6 - 48);
      else
        v18 = (__int128 *)(v13 - 48);
      if (v15)
        a6 -= 48;
      else
        v13 -= 48;
      if (*(char *)(a10 - 25) < 0)
        operator delete(*v16);
      v19 = *v18;
      *(_QWORD *)(a10 - 32) = *((_QWORD *)v18 + 2);
      *(_OWORD *)v16 = v19;
      *(_BYTE *)(v17 - 25) = 0;
      *(_BYTE *)v18 = 0;
      v20 = *(_OWORD *)(v17 - 24);
      *(_BYTE *)(a10 - 8) = *(_BYTE *)(v17 - 8);
      *(_OWORD *)(a10 - 24) = v20;
      a10 -= 48;
      if (v13 == a4)
        return;
    }
    v21 = 0;
    do
    {
      v22 = a10 + v21;
      v23 = (void **)(a10 + v21 - 48);
      if (*(char *)(a10 + v21 - 25) < 0)
        operator delete(*v23);
      v24 = (__int128 *)(v13 + v21 - 48);
      v25 = *v24;
      *(_QWORD *)(a10 + v21 - 32) = *(_QWORD *)(v13 + v21 - 32);
      *(_OWORD *)v23 = v25;
      *(_BYTE *)(v13 + v21 - 25) = 0;
      *(_BYTE *)v24 = 0;
      v26 = *(_OWORD *)(v13 + v21 - 24);
      *(_BYTE *)(v22 - 8) = *(_BYTE *)(v13 + v21 - 8);
      *(_OWORD *)(v22 - 24) = v26;
      v21 -= 48;
    }
    while (v13 + v21 != a4);
  }
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<NLExtendedString *,NLExtendedString *,NLExtendedString *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;
  __int128 v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v8 = *(__int128 *)((char *)v5 + 24);
      *(_BYTE *)(a4 + 40) = *((_BYTE *)v5 + 40);
      *(_OWORD *)(a4 + 24) = v8;
      a4 += 48;
      v5 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<NLExtendedString *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t *v11;

  v4 = a2;
  v10 = a2;
  v11 = a1;
  while (1)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<NLExtendedString *> &,std::__wrap_iter<NLExtendedString *> &>(&v11, &v10);
    v5 = v11 + 6;
    v6 = v10 + 48;
    v10 = v6;
    v11 += 6;
    if (v6 == a3)
      break;
    if (v5 == (uint64_t *)v4)
      v4 = v6;
  }
  if (v5 != (uint64_t *)v4)
  {
    do
    {
      v10 = v4;
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<NLExtendedString *> &,std::__wrap_iter<NLExtendedString *> &>(&v11, &v10);
        v7 = v11 + 6;
        v8 = v10 + 48;
        v10 = v8;
        v11 += 6;
        if (v8 == a3)
          break;
        if (v7 == (uint64_t *)v4)
          v4 = v8;
      }
    }
    while (v7 != (uint64_t *)v4);
  }
  return v5;
}

void std::vector<NLExtendedString>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NLExtendedString *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  NLExtendedString *v13;
  uint64_t v14;
  NLExtendedString *v15;
  uint64_t v16;
  NLExtendedString *v17;
  uint64_t v18;
  _QWORD v19[2];
  NLExtendedString *v20;
  char *v21;
  uint64_t v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(NLExtendedString **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = (NLExtendedString *)((char *)v7 + 48 * a2);
      v14 = 48 * a2;
      do
      {
        NLExtendedString::NLExtendedString(v7);
        v7 = (NLExtendedString *)((char *)v7 + 48);
        v14 -= 48;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v22 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>(v4, v11);
    else
      v12 = 0;
    v15 = (NLExtendedString *)&v12[48 * v8];
    v19[0] = v12;
    v19[1] = v15;
    v20 = v15;
    v21 = &v12[48 * v11];
    v16 = 3 * a2;
    v17 = (NLExtendedString *)((char *)v15 + 48 * a2);
    v18 = 16 * v16;
    do
    {
      NLExtendedString::NLExtendedString(v15);
      v15 = (NLExtendedString *)((char *)v15 + 48);
      v18 -= 48;
    }
    while (v18);
    v20 = v17;
    std::vector<NLExtendedString>::__swap_out_circular_buffer(a1, v19);
    std::__split_buffer<NLExtendedString>::~__split_buffer((uint64_t)v19);
  }
}

void sub_1A188C3EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<NLExtendedString>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<__CFString const*>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1A188C474(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<std::vector<NLExtendedString>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::vector<std::vector<std::vector<NLExtendedString>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<NLExtendedString>> const&>(uint64_t a1, __int128 ***a2)
{
  std::string *v3;
  std::string *result;

  v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<std::vector<NLExtendedString>>::__init_with_size[abi:ne180100]<std::vector<NLExtendedString>*,std::vector<NLExtendedString>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(_QWORD *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_1A188C554(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<NLExtendedString>>>::__push_back_slow_path<std::vector<std::vector<NLExtendedString>> const&>(uint64_t *a1, __int128 ***a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::vector<NLExtendedString>>::__init_with_size[abi:ne180100]<std::vector<NLExtendedString>*,std::vector<NLExtendedString>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  ++v15;
  std::vector<std::vector<std::vector<NLExtendedString>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<NLExtendedString>>>::~__split_buffer(v14);
  return v12;
}

void sub_1A188C668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<NLExtendedString>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::vector<NLExtendedString>>::__init_with_size[abi:ne180100]<std::vector<NLExtendedString>*,std::vector<NLExtendedString>*>(std::string *result, __int128 **a2, __int128 **a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<NLExtendedString>>,std::vector<NLExtendedString>*,std::vector<NLExtendedString>*,std::vector<NLExtendedString>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1A188C6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<NLExtendedString>>,std::vector<NLExtendedString>*,std::vector<NLExtendedString>*,std::vector<NLExtendedString>*>(uint64_t a1, __int128 **a2, __int128 **a3, std::string *a4)
{
  std::string *v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
      v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::vector<NLExtendedString>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1A188C7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::vector<NLExtendedString>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::vector<NLExtendedString>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::vector<NLExtendedString>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::vector<NLExtendedString>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::vector<std::vector<std::vector<NLExtendedString>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<NLExtendedString>>>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<NLExtendedString>>>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<NLExtendedString>>>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<NLExtendedString>>>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<NLExtendedString>>>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<NLExtendedString>>>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<NLExtendedString>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<NLExtendedString>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<NLExtendedString>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void NLExtendedString::NLExtendedString(NLExtendedString *this)
{
  _QWORD *v1;

  v1 = std::string::basic_string[abi:ne180100]<0>(this, "");
  *((_DWORD *)v1 + 6) = 0;
  v1[4] = 0x3FF0000000000000;
  *((_BYTE *)v1 + 40) |= 3u;
}

void NLExtendedString::NLExtendedString(std::string *this, __int128 *a2, int a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = a3;
  this[1].__r_.__value_.__l.__size_ = 0x3FF0000000000000;
  this[1].__r_.__value_.__s.__data_[16] |= 3u;
}

void NLExtendedString::NLExtendedString(std::string *this, __int128 *a2, int a3, double a4)
{
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = a3;
  *(double *)&this[1].__r_.__value_.__l.__size_ = a4;
  this[1].__r_.__value_.__s.__data_[16] |= 3u;
}

void NLExtendedString::NLExtendedString(std::string *this, __int128 *a2, int a3, int a4, double a5)
{
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = a3;
  *(double *)&this[1].__r_.__value_.__l.__size_ = a5;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = a4;
}

uint64_t NLExtendedString::getPos(NLExtendedString *this)
{
  return *((unsigned int *)this + 6);
}

double NLExtendedString::getWeight(NLExtendedString *this)
{
  return *((double *)this + 4);
}

uint64_t NLExtendedString::setWeight(uint64_t this, double a2)
{
  *(double *)(this + 32) = a2;
  return this;
}

BOOL NLExtendedString::operator>(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 32) > *(double *)(a2 + 32);
}

uint64_t NLExtendedString::getJoinNext(NLExtendedString *this)
{
  return (*((unsigned __int8 *)this + 40) >> 1) & 1;
}

uint64_t NLExtendedString::getJoinPrev(NLExtendedString *this)
{
  return *((_BYTE *)this + 40) & 1;
}

uint64_t NLExtendedString::setJoin(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2;
  return result;
}

void NLGujaratiTransliterator::NLGujaratiTransliterator(NLGujaratiTransliterator *this, const __CFDictionary *a2)
{
  char *v4;
  NLAbstractTransMappings *v5;
  __CFDictionary *Mutable;
  NLGujaratiWordLanguageModeler *v7;
  NLGujaratiCharLanguageModeler *v8;
  NLGujaratiOrthographyChecker *v9;
  NLAbstractDictionaryLookup *v10;
  NLAbstractDictionaryLookup *v11;
  _QWORD *v12;
  uint64_t v13[5];

  *((_OWORD *)this + 5) = 0u;
  v4 = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = xmmword_1A18D4870;
  *((_DWORD *)this + 34) = 2;
  *((_QWORD *)this + 18) = 0xC03E000000000000;
  *((_QWORD *)this + 19) = 0x3E800000005;
  *((_DWORD *)this + 40) = 3;
  *((_QWORD *)this + 21) = 0x3FF3333333333333;
  *(_QWORD *)this = &off_1E45CDAB8;
  *((_QWORD *)this + 22) = 0x1F40000000ALL;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 184), "[\",,;.\"'?!:{}<>*\\-]",
    0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 248), "([bcdfghjklmnpqrstvwxyzoai])([ywv])(a)$", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)this + 13, "(tr|dr)(a)$", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 376), "(r)([iu])", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 440), "aa[a]+", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)this + 21, "([bcdfghjklmnpqrstvwxyz]|^)(eh|ehe)", 0);
  v5 = (NLAbstractTransMappings *)operator new();
  NLAbstractTransMappings::NLAbstractTransMappings(v5, a2);
  *((_QWORD *)this + 1) = v5;
  (*(void (**)(uint64_t *__return_ptr, NLGujaratiTransliterator *))(*(_QWORD *)this + 120))(v13, this);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)v4, v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v13);
  Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
  CFDictionarySetValue(Mutable, CFSTR("useLanguageModel"), (const void *)*MEMORY[0x1E0C9AE40]);
  v7 = (NLGujaratiWordLanguageModeler *)operator new();
  NLGujaratiWordLanguageModeler::NLGujaratiWordLanguageModeler(v7, Mutable);
  *((_QWORD *)this + 2) = v7;
  CFRelease(Mutable);
  *((_QWORD *)this + 3) = 0;
  v8 = (NLGujaratiCharLanguageModeler *)operator new();
  NLGujaratiCharLanguageModeler::NLGujaratiCharLanguageModeler(v8, a2);
  *((_QWORD *)this + 5) = v8;
  v9 = (NLGujaratiOrthographyChecker *)operator new();
  NLGujaratiOrthographyChecker::NLGujaratiOrthographyChecker(v9);
  *((_QWORD *)this + 6) = v9;
  v10 = (NLAbstractDictionaryLookup *)operator new();
  NLAbstractDictionaryLookup::NLAbstractDictionaryLookup(v10);
  *((_QWORD *)this + 7) = v10;
  v11 = (NLAbstractDictionaryLookup *)operator new();
  NLAbstractDictionaryLookup::NLAbstractDictionaryLookup(v11);
  *((_QWORD *)this + 8) = v11;
  v12 = (_QWORD *)operator new();
  *v12 = &unk_1E45CE388;
  *((_QWORD *)this + 9) = v12;
}

void sub_1A188CEDC(_Unwind_Exception *a1)
{
  NLGenericTransliterator *v1;
  std::locale *v2;
  std::locale *v3;
  std::locale *v4;
  std::locale *v5;
  std::locale *v6;
  std::locale *v7;
  uint64_t v8;

  MEMORY[0x1A1B0E068](v8, 0xE1C40D30581F4);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 544);
  std::locale::~locale(v7);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 480);
  std::locale::~locale(v6);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 416);
  std::locale::~locale(v5);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 352);
  std::locale::~locale(v4);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 288);
  std::locale::~locale(v3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 224);
  std::locale::~locale(v2);
  NLGenericTransliterator::~NLGenericTransliterator(v1);
  _Unwind_Resume(a1);
}

void NLGujaratiTransliterator::addSpecialElements(_QWORD **a1, char *a2, int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  std::string __str;
  std::string v13;
  std::string *p_str;

  std::string::basic_string[abi:ne180100]<0>(&__str, a2);
  std::string::basic_string(&v13, &__str, *a3, 2uLL, (std::allocator<char> *)&p_str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  (*(void (**)(std::string *__return_ptr, _QWORD *, std::string *))(*a1[1] + 32))(&__str, a1[1], &v13);
  ((void (*)(_QWORD **, std::string *, _QWORD, _QWORD, char *, uint64_t))(*a1)[18])(a1, &__str, *a4, *a5, a2, a6);
  p_str = &__str;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1A188D0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double NLGujaratiTransliterator::getEnglishCandidateSequenceScore(uint64_t a1, uint64_t *a2)
{
  double v2;
  int *v3;
  int v4;
  double v5;
  int *v8;
  int *v9;

  stringToUTF32Characters(a2, &v8);
  v2 = 0.0;
  if (v8 != v9)
  {
    v3 = v8;
    do
    {
      v4 = *v3;
      v5 = -0.75;
      if (*v3 != 2765)
      {
        v5 = 1.0;
        if ((v4 - 2709) >= 0x25)
        {
          if ((v4 - 2750) >= 0xF && (v4 - 2693) >= 0xF)
            v5 = 0.3;
          else
            v5 = 0.5;
        }
      }
      v2 = v2 + v5;
      ++v3;
    }
    while (v3 != v9);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  return v2;
}

void NLGujaratiTransliterator::preProcessForRomanSuffixes(uint64_t a1@<X0>, std::__wrap_iter<const char *> a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::__wrap_iter<const char *> v8;
  uint64_t v9;
  std::__wrap_iter<const char *> v10;
  std::__wrap_iter<const char *> v11;
  std::string v12;

  v5 = *((unsigned __int8 *)a2.__i_ + 23);
  if (a2.__i_[23] < 0)
  {
    v7 = *((_QWORD *)a2.__i_ + 1);
    if (v7 < 4)
    {
      std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2.__i_, v7);
      return;
    }
    goto LABEL_7;
  }
  if (v5 >= 4)
  {
    v7 = *((_QWORD *)a2.__i_ + 1);
LABEL_7:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if ((v5 & 0x80u) != 0)
    {
      a2.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a2.__i_;
      v5 = v7;
    }
    v8.__i_ = &a2.__i_[v5];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)a3, a2, v8, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)(a1 + 248), "$1$2", 0);
    memset(&v12, 0, sizeof(v12));
    v9 = *(unsigned __int8 *)(a3 + 23);
    if ((v9 & 0x80u) == 0)
      v10.__i_ = (std::__wrap_iter<const char *>::iterator_type)a3;
    else
      v10.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a3;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a3 + 8);
    v11.__i_ = &v10.__i_[v9];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v12, v10, v11, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)(a1 + 312), "$1", 0);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v6 = v12.__r_.__value_.__r.__words[2];
    goto LABEL_17;
  }
  *(_OWORD *)a3 = *(_OWORD *)a2.__i_;
  v6 = *((_QWORD *)a2.__i_ + 2);
LABEL_17:
  *(_QWORD *)(a3 + 16) = v6;
}

void sub_1A188D2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void NLGujaratiTransliterator::addDynamicMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  void *v19;
  char *v20;
  _BOOL4 v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27[2];
  char v28;
  std::vector<std::ssub_match> v29[2];
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  std::match_results<const char *> __p;

  v2 = a2;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  memset(v29, 0, 41);
  v4 = a1 + 376;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 32);
  v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = *(_QWORD *)(a2 + 8);
  if ((v5 & 0x80u) != 0)
  {
    a2 = *(_QWORD *)a2;
    v5 = v6;
  }
  *(std::pair<const char *, const char *> *)((char *)&__p.__unmatched_.std::pair<const char *, const char *> + 1) = 0uLL;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v4, (char *)a2, (char *)(a2 + v5), &__p, 0);
  v8 = *(unsigned __int8 *)(v2 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = v2;
  else
    v9 = *(_QWORD *)v2;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(v2 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v29, v9, (std::sub_match<std::__wrap_iter<const char *>> *)(v9 + v8), (uint64_t *)&__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (v7)
  {
    v10 = *(_BYTE *)(v2 + 23);
    if (v10 >= 0)
      v11 = *(unsigned __int8 *)(v2 + 23);
    else
      v11 = *(_QWORD *)(v2 + 8);
    if (v10 >= 0)
      v12 = (char *)v2;
    else
      v12 = *(char **)v2;
    v13 = &v12[v11];
    v14 = &v12[v11];
    if (v11 > 4)
    {
      v15 = v11;
      v16 = v12;
      do
      {
        v17 = (char *)memchr(v16, 112, v15 - 4);
        if (!v17)
          break;
        v14 = v17;
        if (*(_DWORD *)v17 == 1953067632 && v17[4] == 104)
          goto LABEL_26;
        v16 = v17 + 1;
        v15 = v13 - (v14 + 1);
      }
      while (v15 > 4);
      v14 = &v12[v11];
    }
LABEL_26:
    if (v11 >= 4)
    {
      v19 = v12;
      do
      {
        v20 = (char *)memchr(v19, 103, v11 - 3);
        if (!v20)
          break;
        if (*(_DWORD *)v20 == 1751741031)
          goto LABEL_32;
        v19 = v20 + 1;
        v11 = v13 - (_BYTE *)v19;
      }
      while (v13 - (_BYTE *)v19 > 3);
    }
    v20 = v13;
LABEL_32:
    v22 = v20 != v13 && v20 - v12 != -1;
    v23 = v14 - v12 == -1 || v14 == v13;
    if (!v23 || v22)
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "");
      NLExtendedString::NLExtendedString((std::string *)&__p, (__int128 *)v27, 2, 2, 1.0);
      if (v28 < 0)
        operator delete(v27[0]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "");
      NLExtendedString::NLExtendedString((std::string *)&__p, (__int128 *)v27, 2, 2, 0.005);
      if (v28 < 0)
        operator delete(v27[0]);
    }
    v24 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v27, "i");
    (*(void (**)(uint64_t, void **, std::match_results<const char *> *))(*(_QWORD *)v24 + 16))(v24, v27, &__p);
    if (v28 < 0)
      operator delete(v27[0]);
    if (SHIBYTE(__p.__matches_.__end_cap_.__value_) < 0)
      operator delete(__p.__matches_.__begin_);
  }
  v25 = *(char *)(v2 + 23);
  if (v25 < 0)
  {
    if (*(_QWORD *)(v2 + 8) != 1)
      goto LABEL_65;
    v2 = *(_QWORD *)v2;
  }
  else if (v25 != 1)
  {
    goto LABEL_65;
  }
  if (*(_BYTE *)v2 == 111)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "ઑ");
    NLExtendedString::NLExtendedString(&__p, v27, 1, 1.0);
    if (v28 < 0)
      operator delete(v27[0]);
    v26 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v27, "o");
    (*(void (**)(uint64_t, void **, std::match_results<const char *> *))(*(_QWORD *)v26 + 16))(v26, v27, &__p);
    if (v28 < 0)
      operator delete(v27[0]);
    if (SHIBYTE(__p.__matches_.__end_cap_.__value_) < 0)
      operator delete(__p.__matches_.__begin_);
  }
LABEL_65:
  if (v29[0].__begin_)
  {
    v29[0].__end_ = v29[0].__begin_;
    operator delete(v29[0].__begin_);
  }
}

void sub_1A188D684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a15 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void NLGujaratiTransliterator::postProcessForExaggeration(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  __int128 v15;
  double Weight;
  unint64_t v17;
  unint64_t i;
  unint64_t v19;
  std::string __p;
  _QWORD v21[3];
  char v22;

  v10 = a1[1];
  std::string::basic_string(&__p, (const std::string *)a2, 0, 2uLL, (std::allocator<char> *)&v22);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v10 + 32))(v21, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_DWORD *)(a2 + 8);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t, _QWORD, uint64_t, uint64_t *))(*a1 + 144))(a1, v21, a4, (v11 + a4), a3, a5);
  v12 = *a5;
  if (a5[1] != *a5)
  {
    v13 = 0;
    do
    {
      NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(v12 + 48 * v13));
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
      }
      else
      {
        v15 = *v14;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 4) <= v13)
        goto LABEL_24;
      Weight = NLExtendedString::getWeight((NLExtendedString *)(*a5 + 48 * v13));
      v17 = *(unsigned __int8 *)(a2 + 23);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(a2 + 8);
      if (v17 >= 3)
      {
        for (i = 2; i < v19; ++i)
        {
          std::string::append(&__p, "ઽ");
          Weight = Weight + Weight;
          v19 = *(unsigned __int8 *)(a2 + 23);
          if ((v19 & 0x80u) != 0)
            v19 = *(_QWORD *)(a2 + 8);
        }
      }
      if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 4) <= v13
        || (NLExtendedString::setString((std::string *)(*a5 + 48 * v13), &__p),
            0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 4) <= v13))
      {
LABEL_24:
        std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
      }
      NLExtendedString::setWeight(*a5 + 48 * v13, Weight);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v13;
      v12 = *a5;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 4) > v13);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1A188D944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a16;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t NLGujaratiTransliterator::isSpecialCharSeq(int a1, int a2, char *__s, int a4)
{
  uint64_t v5;
  size_t v6;
  unsigned int v7;

  if (a2 != 2)
    return 0;
  v5 = a4;
  v6 = a4 + 1;
  if (strlen(__s) > v6 && __s[v5] == 114 && (v7 = __s[v6] - 97, v7 <= 0x14))
    return (0x100101u >> v7) & 1;
  else
    return 0;
}

uint64_t NLGujaratiTransliterator::addSpecialCandidates(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5;
  _WORD *v6;
  _WORD *v7;
  uint64_t result;
  std::string *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  std::string *v16;
  char *v17;
  char *v18;
  std::string **v19;
  char *v20;
  char *v21;
  char *v22;
  std::string *v23;
  std::string *v24;
  std::string **v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  std::string **v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  std::string *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  std::string **v40;
  char *v41;
  char *v42;
  char *v43;
  std::string *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  std::string *v50;
  std::string *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  std::string **v58;
  char *v59;
  char *v60;
  char *v61;
  std::string *v62;
  unint64_t v63;
  uint64_t v64;
  _WORD *v65;
  std::string *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  std::string **v73;
  char *v74;
  char *v75;
  char *v76;
  std::string *v77;
  std::string *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  std::string **v85;
  char *v86;
  char *v87;
  char *v88;
  std::string *v89;
  std::string *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  std::string **v97;
  char *v98;
  char *v99;
  char *v100;
  std::string *v101;
  unint64_t v102;
  uint64_t v103;
  void *v104[2];
  char v105;
  void *__p;
  char *v107;
  unint64_t v108;

  v5 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8) != 2)
    {
      result = 0;
      goto LABEL_111;
    }
    v6 = *(_WORD **)a2;
    if (**(_WORD **)a2 == 26994)
      goto LABEL_12;
  }
  else
  {
    if (v5 != 2)
    {
      result = 0;
      goto LABEL_109;
    }
    v6 = (_WORD *)a2;
    if (*(_WORD *)a2 == 26994)
    {
      __p = 0;
      v107 = 0;
      v7 = (_WORD *)a2;
      v108 = 0;
      goto LABEL_17;
    }
  }
  if (*v6 != 30066)
  {
    result = 0;
    if ((v5 & 0x80) == 0)
      goto LABEL_109;
    goto LABEL_111;
  }
LABEL_12:
  __p = 0;
  v107 = 0;
  v108 = 0;
  if ((v5 & 0x80) != 0)
  {
    if (*(_QWORD *)(a2 + 8) != 2)
      goto LABEL_18;
    v7 = *(_WORD **)a2;
  }
  else
  {
    v7 = (_WORD *)a2;
    if (v5 != 2)
      goto LABEL_18;
  }
LABEL_17:
  if (*v7 == 26994)
  {
    v16 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v104, "રિ");
    NLTransliterationCandidate::NLTransliterationCandidate(v16, (__int128 *)a2, (__int128 *)v104, 0, 0, 1.0);
    v17 = v107;
    if ((unint64_t)v107 >= v108)
    {
      v36 = (v107 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v36 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v37 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
      if (v37 <= v36 + 1)
        v37 = v36 + 1;
      if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      if (v38)
        v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v38);
      else
        v39 = 0;
      v40 = (std::string **)&v39[8 * v36];
      v41 = &v39[8 * v38];
      *v40 = v16;
      v18 = (char *)(v40 + 1);
      v43 = (char *)__p;
      v42 = v107;
      if (v107 != __p)
      {
        do
        {
          v44 = (std::string *)*((_QWORD *)v42 - 1);
          v42 -= 8;
          *--v40 = v44;
        }
        while (v42 != v43);
        v42 = (char *)__p;
      }
      __p = v40;
      v107 = v18;
      v108 = (unint64_t)v41;
      if (v42)
        operator delete(v42);
    }
    else
    {
      *(_QWORD *)v107 = v16;
      v18 = v17 + 8;
    }
    v107 = v18;
    if (v105 < 0)
      operator delete(v104[0]);
    v24 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v104, "રી");
    NLTransliterationCandidate::NLTransliterationCandidate(v24, (__int128 *)a2, (__int128 *)v104, 0, 0, 1.0);
    v25 = (std::string **)v107;
    if ((unint64_t)v107 >= v108)
    {
      v45 = (v107 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v45 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v46 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
      if (v46 <= v45 + 1)
        v46 = v45 + 1;
      if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v47 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v47 = v46;
      if (v47)
        v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v47);
      else
        v48 = 0;
      v30 = (std::string **)&v48[8 * v45];
      v31 = &v48[8 * v47];
      *v30 = v24;
      v32 = (char *)(v30 + 1);
      v49 = (char *)__p;
      v33 = v107;
      if (v107 == __p)
        goto LABEL_81;
      do
      {
        v50 = (std::string *)*((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v30 = v50;
      }
      while (v33 != v49);
      goto LABEL_80;
    }
LABEL_68:
    *v25 = v24;
    v32 = (char *)(v25 + 1);
    goto LABEL_83;
  }
LABEL_18:
  v9 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(v104, "રુ");
  NLTransliterationCandidate::NLTransliterationCandidate(v9, (__int128 *)a2, (__int128 *)v104, 0, 0, 1.0);
  v10 = v107;
  if ((unint64_t)v107 >= v108)
  {
    v12 = (v107 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v13 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
    if (v13 <= v12 + 1)
      v13 = v12 + 1;
    if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v14);
    else
      v15 = 0;
    v19 = (std::string **)&v15[8 * v12];
    v20 = &v15[8 * v14];
    *v19 = v9;
    v11 = (char *)(v19 + 1);
    v22 = (char *)__p;
    v21 = v107;
    if (v107 != __p)
    {
      do
      {
        v23 = (std::string *)*((_QWORD *)v21 - 1);
        v21 -= 8;
        *--v19 = v23;
      }
      while (v21 != v22);
      v21 = (char *)__p;
    }
    __p = v19;
    v107 = v11;
    v108 = (unint64_t)v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *(_QWORD *)v107 = v9;
    v11 = v10 + 8;
  }
  v107 = v11;
  if (v105 < 0)
    operator delete(v104[0]);
  v24 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(v104, "રૂ");
  NLTransliterationCandidate::NLTransliterationCandidate(v24, (__int128 *)a2, (__int128 *)v104, 0, 0, 1.0);
  v25 = (std::string **)v107;
  if ((unint64_t)v107 < v108)
    goto LABEL_68;
  v26 = (v107 - (_BYTE *)__p) >> 3;
  if ((unint64_t)(v26 + 1) >> 61)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  v27 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
  if (v27 <= v26 + 1)
    v27 = v26 + 1;
  if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
    v28 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v28 = v27;
  if (v28)
    v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v28);
  else
    v29 = 0;
  v30 = (std::string **)&v29[8 * v26];
  v31 = &v29[8 * v28];
  *v30 = v24;
  v32 = (char *)(v30 + 1);
  v34 = (char *)__p;
  v33 = v107;
  if (v107 == __p)
    goto LABEL_81;
  do
  {
    v35 = (std::string *)*((_QWORD *)v33 - 1);
    v33 -= 8;
    *--v30 = v35;
  }
  while (v33 != v34);
LABEL_80:
  v33 = (char *)__p;
LABEL_81:
  __p = v30;
  v107 = v32;
  v108 = (unint64_t)v31;
  if (v33)
    operator delete(v33);
LABEL_83:
  v107 = v32;
  if (v105 < 0)
    operator delete(v104[0]);
  v51 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(v104, "ઋ");
  NLTransliterationCandidate::NLTransliterationCandidate(v51, (__int128 *)a2, (__int128 *)v104, 0, 0, 1.0);
  v52 = v107;
  if ((unint64_t)v107 >= v108)
  {
    v54 = (v107 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v54 + 1) >> 61)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v55 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
    if (v55 <= v54 + 1)
      v55 = v54 + 1;
    if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v56 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v56 = v55;
    if (v56)
      v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v56);
    else
      v57 = 0;
    v58 = (std::string **)&v57[8 * v54];
    v59 = &v57[8 * v56];
    *v58 = v51;
    v53 = (char *)(v58 + 1);
    v61 = (char *)__p;
    v60 = v107;
    if (v107 != __p)
    {
      do
      {
        v62 = (std::string *)*((_QWORD *)v60 - 1);
        v60 -= 8;
        *--v58 = v62;
      }
      while (v60 != v61);
      v60 = (char *)__p;
    }
    __p = v58;
    v107 = v53;
    v108 = (unint64_t)v59;
    if (v60)
      operator delete(v60);
  }
  else
  {
    *(_QWORD *)v107 = v51;
    v53 = v52 + 8;
  }
  v107 = v53;
  if (v105 < 0)
    operator delete(v104[0]);
  v63 = a3[1];
  if (v63 >= a3[2])
  {
    v64 = std::vector<std::vector<NLTransliterationCandidate *>>::__push_back_slow_path<std::vector<NLTransliterationCandidate *> const&>(a3, (uint64_t)&__p);
  }
  else
  {
    std::vector<std::vector<NLTransliterationCandidate *>>::__construct_one_at_end[abi:ne180100]<std::vector<NLTransliterationCandidate *> const&>((uint64_t)a3, (uint64_t)&__p);
    v64 = v63 + 24;
  }
  a3[1] = v64;
  if (__p)
  {
    v107 = (char *)__p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 23);
  result = 1;
  if ((v5 & 0x80) == 0)
  {
LABEL_109:
    v65 = (_WORD *)a2;
    if (v5 != 2)
      return result;
    goto LABEL_113;
  }
LABEL_111:
  if (*(_QWORD *)(a2 + 8) != 2)
    return result;
  v65 = *(_WORD **)a2;
LABEL_113:
  if (*v65 == 28015)
  {
    __p = 0;
    v107 = 0;
    v108 = 0;
    v66 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v104, "ઓમ્");
    NLTransliterationCandidate::NLTransliterationCandidate(v66, (__int128 *)a2, (__int128 *)v104, 0, 0, 2.0);
    v67 = v107;
    if ((unint64_t)v107 >= v108)
    {
      v69 = (v107 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v69 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v70 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
      if (v70 <= v69 + 1)
        v70 = v69 + 1;
      if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v71 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v71 = v70;
      if (v71)
        v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v71);
      else
        v72 = 0;
      v73 = (std::string **)&v72[8 * v69];
      v74 = &v72[8 * v71];
      *v73 = v66;
      v68 = (char *)(v73 + 1);
      v76 = (char *)__p;
      v75 = v107;
      if (v107 != __p)
      {
        do
        {
          v77 = (std::string *)*((_QWORD *)v75 - 1);
          v75 -= 8;
          *--v73 = v77;
        }
        while (v75 != v76);
        v75 = (char *)__p;
      }
      __p = v73;
      v107 = v68;
      v108 = (unint64_t)v74;
      if (v75)
        operator delete(v75);
    }
    else
    {
      *(_QWORD *)v107 = v66;
      v68 = v67 + 8;
    }
    v107 = v68;
    if (v105 < 0)
      operator delete(v104[0]);
    v78 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v104, "ઓમ");
    NLTransliterationCandidate::NLTransliterationCandidate(v78, (__int128 *)a2, (__int128 *)v104, 0, 0, 1.5);
    v79 = v107;
    if ((unint64_t)v107 >= v108)
    {
      v81 = (v107 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v81 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v82 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
      if (v82 <= v81 + 1)
        v82 = v81 + 1;
      if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v83 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v83 = v82;
      if (v83)
        v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v83);
      else
        v84 = 0;
      v85 = (std::string **)&v84[8 * v81];
      v86 = &v84[8 * v83];
      *v85 = v78;
      v80 = (char *)(v85 + 1);
      v88 = (char *)__p;
      v87 = v107;
      if (v107 != __p)
      {
        do
        {
          v89 = (std::string *)*((_QWORD *)v87 - 1);
          v87 -= 8;
          *--v85 = v89;
        }
        while (v87 != v88);
        v87 = (char *)__p;
      }
      __p = v85;
      v107 = v80;
      v108 = (unint64_t)v86;
      if (v87)
        operator delete(v87);
    }
    else
    {
      *(_QWORD *)v107 = v78;
      v80 = v79 + 8;
    }
    v107 = v80;
    if (v105 < 0)
      operator delete(v104[0]);
    v90 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v104, "ૐ");
    NLTransliterationCandidate::NLTransliterationCandidate(v90, (__int128 *)a2, (__int128 *)v104, 0, 0, 1.0);
    v91 = v107;
    if ((unint64_t)v107 >= v108)
    {
      v93 = (v107 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v93 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v94 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
      if (v94 <= v93 + 1)
        v94 = v93 + 1;
      if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v95 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v95 = v94;
      if (v95)
        v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v95);
      else
        v96 = 0;
      v97 = (std::string **)&v96[8 * v93];
      v98 = &v96[8 * v95];
      *v97 = v90;
      v92 = (char *)(v97 + 1);
      v100 = (char *)__p;
      v99 = v107;
      if (v107 != __p)
      {
        do
        {
          v101 = (std::string *)*((_QWORD *)v99 - 1);
          v99 -= 8;
          *--v97 = v101;
        }
        while (v99 != v100);
        v99 = (char *)__p;
      }
      __p = v97;
      v107 = v92;
      v108 = (unint64_t)v98;
      if (v99)
        operator delete(v99);
    }
    else
    {
      *(_QWORD *)v107 = v90;
      v92 = v91 + 8;
    }
    v107 = v92;
    if (v105 < 0)
      operator delete(v104[0]);
    v102 = a3[1];
    if (v102 >= a3[2])
    {
      v103 = std::vector<std::vector<NLTransliterationCandidate *>>::__push_back_slow_path<std::vector<NLTransliterationCandidate *> const&>(a3, (uint64_t)&__p);
    }
    else
    {
      std::vector<std::vector<NLTransliterationCandidate *>>::__construct_one_at_end[abi:ne180100]<std::vector<NLTransliterationCandidate *> const&>((uint64_t)a3, (uint64_t)&__p);
      v103 = v102 + 24;
    }
    a3[1] = v103;
    if (__p)
    {
      v107 = (char *)__p;
      operator delete(__p);
    }
    return 1;
  }
  return result;
}

void sub_1A188E478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  MEMORY[0x1A1B0E068](v16, 0x1012C40B0087DDBLL);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *NLGujaratiTransliterator::getHalantCharacter@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "્");
}

_QWORD *NLGujaratiTransliterator::getFirstLetter@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "અ");
}

_QWORD *NLGujaratiTransliterator::getLastLetter@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "હ");
}

_QWORD *NLGujaratiTransliterator::getAnyConsonant@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "બ");
}

void NLGujaratiTransliterator::~NLGujaratiTransliterator(std::locale *this)
{
  std::locale *v2;
  std::locale *v3;

  this->__locale_ = (std::locale::__imp *)&off_1E45CDAB8;
  v2 = this + 28;
  v3 = this + 63;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[68]);
  std::locale::~locale(v3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[60]);
  std::locale::~locale(this + 55);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[52]);
  std::locale::~locale(this + 47);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[44]);
  std::locale::~locale(this + 39);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[36]);
  std::locale::~locale(this + 31);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::locale::~locale(this + 23);
  NLGenericTransliterator::~NLGenericTransliterator((NLGenericTransliterator *)this);
}

{
  std::locale *v2;
  std::locale *v3;

  this->__locale_ = (std::locale::__imp *)&off_1E45CDAB8;
  v2 = this + 28;
  v3 = this + 63;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[68]);
  std::locale::~locale(v3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[60]);
  std::locale::~locale(this + 55);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[52]);
  std::locale::~locale(this + 47);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[44]);
  std::locale::~locale(this + 39);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[36]);
  std::locale::~locale(this + 31);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::locale::~locale(this + 23);
  NLGenericTransliterator::~NLGenericTransliterator((NLGenericTransliterator *)this);
  JUMPOUT(0x1A1B0E068);
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, char *a2, int a3)
{
  std::regex_traits<char> *v6;
  size_t v7;

  v6 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v6[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v6[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[1].__col_ + 4) = 0u;
  HIDWORD(v6[2].__ct_) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)&a2[v7]) != (std::basic_regex<char> *)&a2[v7])std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1A188E784(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return (char *)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_1E45CEC60;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, (char *)v3, v4);
    }
    while (v3 != v10);
    if (v10 != (unsigned __int8 *)v4)
    {
      if (v10 + 1 != (unsigned __int8 *)v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_1E45CECC0;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (std::basic_regex<char> *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = v8 + 1;
  while (v12 != a3)
  {
    v13 = (unsigned __int8 *)memchr(v12, 10, a3 - v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = v14 + 1;
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *end;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::basic_regex<char> *v12;
  std::basic_regex<char> *v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
  while (v12 != a3)
  {
    v13 = (std::basic_regex<char> *)memchr(v12, 10, (char *)a3 - (char *)v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (result == v5)
        return a2;
    }
  }
  return result;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;

  if (a2 == a3)
    return a2;
  v4 = *a2;
  v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8)
    return a2;
  v6 = a3;
  v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      v8 = *v7;
      if ((v8 - 48) > 9)
        break;
      if (v5 >= 0x19999999)
        goto LABEL_16;
      ++v7;
      v5 = v8 + 10 * v5 - 48;
      if (v7 == a3)
        goto LABEL_12;
    }
    v6 = v7;
LABEL_12:
    if (!v5)
      goto LABEL_16;
  }
  if (v5 > a1->__marked_count_)
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  char v6;
  std::string *v7;
  std::basic_regex<char>::value_type locale;
  int v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  std::string::value_type v16;
  char v17;
  std::string::value_type v18;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v7 = a4;
            locale = 10;
            goto LABEL_50;
          }
          locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            v7 = a4;
            locale = 13;
            goto LABEL_50;
          }
          locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            v7 = a4;
            locale = 9;
            goto LABEL_50;
          }
          locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_64;
          v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
            goto LABEL_64;
          v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_64;
          v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_24;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6)
            goto LABEL_64;
          v11 = -87;
LABEL_24:
          v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_64;
          v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_30;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6)
            goto LABEL_64;
          v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_64;
          v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
            goto LABEL_35;
          v14 |= 0x20u;
          if ((v14 - 97) >= 6)
            goto LABEL_64;
          v15 = -87;
LABEL_35:
          v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4)
            std::string::operator=(a4, v16);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            v7 = a4;
            locale = 11;
            goto LABEL_50;
          }
          locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v7 = a4;
        locale = 0;
        goto LABEL_50;
      }
      locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v7 = a4;
          locale = 12;
LABEL_50:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v7 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_64;
    v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v17 & 0xDF) - 65) > 0x19u)
      goto LABEL_64;
    v18 = v17 & 0x1F;
    if (a4)
      std::string::operator=(a4, v18);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  for (i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_33;
  }
  if (&a2[i] == a3)
LABEL_33:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    v8 = v19;
    if (v19)
    {
      v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v8 = v18;
  if (!v18)
    goto LABEL_34;
  v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<char *>(a1, v9, &v9[v8], (uint64_t)__p);
  v10 = v16;
  if ((v16 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (__int128 *)__p);
  }
  else
  {
    v11 = v19;
    if ((v19 & 0x80u) != 0)
      v11 = v18;
    if (v11 == 2)
    {
      v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v13 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v12 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v17);
  return (uint64_t)&a2[i + 2];
}

void sub_1A188F208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  int v7;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  for (i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_11;
  }
  if (&a2[i] == a3)
LABEL_11:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  v7 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, a2, &a2[i], *(_BYTE *)(a1 + 24) & 1);
  if (!v7)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return (uint64_t)&a2[i + 2];
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v8;

  if (a2 == a3)
    return (unsigned __int8 *)a2;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2)
    return (unsigned __int8 *)a2;
  else
    return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  unsigned int marked_count;
  char *v11;
  _BOOL4 v13;
  uint64_t v14;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      v8 = a2[1];
      if (v8 == 40)
      {
        v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        marked_count = a1->__marked_count_;
        do
        {
          v11 = (char *)v9;
          v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        v14 = 2;
        if (!v13)
          v14 = 0;
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  std::basic_regex<char> *v22;
  int v24;
  int v25;

  v6 = a2;
  if (a2 != a3)
  {
    v7 = __mexp_end;
    v8 = __mexp_begin;
    v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v13 = a2 + 2;
      v25 = 0;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13)
        goto LABEL_16;
      if (v14 != a3)
      {
        v15 = v14 + 1;
        v16 = *v14;
        if (v16 == 44)
        {
          v24 = -1;
          v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            v19 = v24;
            v18 = v25;
            if (v24 == -1)
            {
              v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            v6 = &v17[2 * (v17[1] == 125)];
            v20 = v8;
            v21 = v7;
            v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          v6 = v14 + 2;
          v18 = v25;
          v20 = v8;
          v21 = v7;
          v22 = this;
          v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v6;
  char *result;
  std::__node<char> *v9;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
    if (result != a2)
      return result;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
    return a2 + 1;
  }
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v9 = (std::__node<char> *)operator new();
  end = this->__end_;
  first = end->__first_;
  v9->__vftable = (std::__node<char>_vtbl *)&unk_1E45CE9C8;
  v9[1].__vftable = (std::__node<char>_vtbl *)first;
  end->__first_ = v9;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  return a2 + 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  int locale_low;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  std::basic_regex<char> *v17;
  std::basic_regex<char> *v18;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3)
    goto LABEL_12;
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      goto LABEL_8;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v17 == a3 || (v18 = v17, LOBYTE(v17->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)&v18->__traits_.__loc_.__locale_ + 1;
LABEL_12:
      if (v9 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
LABEL_8:
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = v14 + 16;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (unsigned __int8 *)a2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  char *result;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (result == (char *)a2)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
      }
      else
      {
        v7 = (std::__node<char> *)operator new();
        end = a1->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_1E45CE9C8;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        return (char *)&a2->__traits_.__loc_.__locale_ + 1;
      }
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  std::basic_regex<char>::value_type v6;
  BOOL v7;
  _BOOL4 v9;
  uint64_t v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  v6 = *v4;
  v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    v10 = 2;
    if (!v9)
      v10 = 0;
    v3 += v10;
    return v3;
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
}

std::string *std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, std::__wrap_iter<const char *> a2, std::__wrap_iter<const char *> a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, char *a5, unsigned __int32 __m)
{
  __int16 v6;
  std::string::value_type *i;
  std::__wrap_iter<const char *>::iterator_type v11;
  std::string::value_type *v12;
  unsigned __int8 *v13;
  std::string::value_type *v14;
  std::__wrap_iter<const char *>::iterator_type v15;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v17;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v18;

  v6 = __m;
  i = (std::string::value_type *)a2.__i_;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v18, a2, a3, a4, (std::regex_constants::match_flag_type)__m);
  memset(&v17.__match_.__prefix_, 0, 17);
  memset(&v17.__match_.__suffix_, 0, 17);
  v17.__match_.__ready_ = 0;
  v17.__match_.__position_start_.__i_ = 0;
  memset(&v17.__match_, 0, 41);
  memset(&v17, 0, 28);
  if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v18, &v17))
  {
    if ((v6 & 0x200) == 0)
    {
      while (i != a3.__i_)
        std::string::push_back(a1, *i++);
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = (unsigned __int8 *)&a5[strlen(a5)];
    while (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v18, &v17))
    {
      if ((v6 & 0x200) == 0)
      {
        v14 = (std::string::value_type *)v18.__match_.__prefix_.first.__i_;
        v15 = v18.__match_.__prefix_.second.__i_;
        while (v14 != v15)
          std::string::push_back(a1, *v14++);
      }
      a1 = std::match_results<std::__wrap_iter<char const*>>::format<std::back_insert_iterator<std::string>>((std::string::value_type ***)&v18.__match_, a1, (unsigned __int8 *)a5, v13, v6);
      v12 = (std::string::value_type *)v18.__match_.__suffix_.first.__i_;
      v11 = v18.__match_.__suffix_.second.__i_;
      if ((v6 & 0x400) != 0)
        break;
      std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v18);
    }
    if ((v6 & 0x200) == 0)
    {
      while (v12 != v11)
        std::string::push_back(a1, *v12++);
    }
  }
  if (v17.__match_.__matches_.__begin_)
  {
    v17.__match_.__matches_.__end_ = v17.__match_.__matches_.__begin_;
    operator delete(v17.__match_.__matches_.__begin_);
  }
  if (v18.__match_.__matches_.__begin_)
  {
    v18.__match_.__matches_.__end_ = v18.__match_.__matches_.__begin_;
    operator delete(v18.__match_.__matches_.__begin_);
  }
  return a1;
}

void sub_1A1890044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

std::string *std::match_results<std::__wrap_iter<char const*>>::format<std::back_insert_iterator<std::string>>(std::string::value_type ***a1, std::string *this, unsigned __int8 *a3, unsigned __int8 *a4, __int16 a5)
{
  unsigned __int8 *v6;
  int v9;
  unsigned __int8 *v10;
  int v12;
  std::string::value_type *v13;
  std::string::value_type *v14;
  std::string::value_type v15;
  std::string::value_type *v16;
  std::string::value_type *v17;
  std::string::value_type v18;
  std::string::value_type *v19;
  std::string::value_type *v20;
  std::string::value_type v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  std::string::value_type *v27;
  std::string::value_type *v28;
  std::string::value_type v29;
  int v30;
  std::string::value_type *v31;
  std::string::value_type *v32;
  std::string::value_type v33;
  unsigned __int8 *v34;
  unint64_t v35;
  uint64_t v36;
  std::string::value_type *v37;
  std::string::value_type *v38;
  std::string::value_type v39;

  v6 = a3;
  if ((a5 & 0x100) != 0)
  {
    if (a3 == a4)
      return this;
    while (1)
    {
      v30 = *v6;
      if (v30 == 92)
      {
        v34 = v6 + 1;
        if (v6 + 1 != a4)
        {
          v30 = *v34;
          if ((v30 - 48) <= 9u)
          {
            v35 = (v30 - 48);
            if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v35)
              v36 = (uint64_t)(a1 + 3);
            else
              v36 = (uint64_t)&(*a1)[3 * v35];
            v37 = *(std::string::value_type **)v36;
            v38 = *(std::string::value_type **)(v36 + 8);
            while (v37 != v38)
            {
              v39 = *v37++;
              std::string::push_back(this, v39);
            }
            goto LABEL_55;
          }
          ++v6;
        }
      }
      else if (v30 == 38)
      {
        v31 = **a1;
        v32 = (*a1)[1];
        while (v31 != v32)
        {
          v33 = *v31++;
          std::string::push_back(this, v33);
        }
        goto LABEL_54;
      }
      std::string::push_back(this, v30);
LABEL_54:
      v34 = v6;
LABEL_55:
      v6 = v34 + 1;
      if (v34 + 1 == a4)
        return this;
    }
  }
  if (a3 != a4)
  {
    do
    {
      v9 = *v6;
      v10 = v6 + 1;
      if (v9 == 36 && v10 != a4)
      {
        v12 = (char)*v10;
        v9 = *v10;
        if (v12 > 38)
        {
          if (v12 == 39)
          {
            v19 = (std::string::value_type *)a1[9];
            v20 = (std::string::value_type *)a1[10];
            while (v19 != v20)
            {
              v21 = *v19++;
              std::string::push_back(this, v21);
            }
            goto LABEL_10;
          }
          if (v12 == 96)
          {
            v16 = (std::string::value_type *)a1[6];
            v17 = (std::string::value_type *)a1[7];
            while (v16 != v17)
            {
              v18 = *v16++;
              std::string::push_back(this, v18);
            }
            goto LABEL_10;
          }
        }
        else
        {
          if (v12 == 36)
            goto LABEL_9;
          if (v12 == 38)
          {
            v13 = **a1;
            v14 = (*a1)[1];
            while (v13 != v14)
            {
              v15 = *v13++;
              std::string::push_back(this, v15);
            }
            goto LABEL_10;
          }
        }
        if ((v9 - 48) <= 9)
        {
          v22 = *v10 - 48;
          if (v6 + 2 != a4)
          {
            v23 = v6[2];
            v24 = v23 - 48;
            v25 = v23 + 10 * (int)v22 - 48;
            if (v24 > 9)
            {
              v10 = v6 + 1;
            }
            else
            {
              v22 = v25;
              v10 = v6 + 2;
            }
          }
          if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v22)
            v26 = (uint64_t)(a1 + 3);
          else
            v26 = (uint64_t)&(*a1)[3 * (int)v22];
          v27 = *(std::string::value_type **)v26;
          v28 = *(std::string::value_type **)(v26 + 8);
          while (v27 != v28)
          {
            v29 = *v27++;
            std::string::push_back(this, v29);
          }
          goto LABEL_10;
        }
        LOBYTE(v9) = 36;
      }
      v10 = v6;
LABEL_9:
      std::string::push_back(this, v9);
LABEL_10:
      v6 = v10 + 1;
    }
    while (v10 + 1 != a4);
  }
  return this;
}

_QWORD *std::vector<std::vector<NLTransliterationCandidate *>>::__construct_one_at_end[abi:ne180100]<std::vector<NLTransliterationCandidate *> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1A1890334(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

NL::Resource *createPathForLocalizedResource(const __CFLocale *a1, const __CFString *a2)
{
  CFTypeRef Value;
  CFTypeRef v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  NL::Resource *BundleResource;

  Value = CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  v5 = CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
  if (v5)
    v6 = CFStringCreateWithFormat(0, 0, CFSTR("%@_%@-%@"), Value, v5, a2);
  else
    v6 = CFStringCreateWithFormat(0, 0, CFSTR("%@-%@"), Value, a2);
  v8 = v6;
  BundleResource = NL::Resource::createBundleResource(a1, v6, 0, 0, v7);
  CFRelease(v8);
  return BundleResource;
}

void NLEmojiGenerator::NLEmojiGenerator(NLEmojiGenerator *this, CFDictionaryRef theDict)
{
  const __CFString *Value;
  const __CFString *v4;
  CFTypeID v5;
  const __CFLocale *v6;
  CFTypeID v7;
  NL::Resource *PathForLocalizedResource;
  unsigned int *v9;
  const __CFString *v10;
  const __CFURL *CFURLFromPathRepresentation;
  const __CFURL *v12;
  unsigned int *v13;
  unsigned int v14;
  BOOL v15;
  signed int v16;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (!theDict)
    return;
  Value = (const __CFString *)CFDictionaryGetValue(theDict, kNLEmojiPredictionLocaleKey[0]);
  if (Value)
  {
    v4 = Value;
    v5 = CFGetTypeID(Value);
    if (v5 == CFStringGetTypeID())
    {
      v6 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4);
      goto LABEL_7;
    }
    v7 = CFGetTypeID(v4);
    if (v7 == CFLocaleGetTypeID())
    {
      v6 = (const __CFLocale *)CFRetain(v4);
LABEL_7:
      *((_QWORD *)this + 1) = v6;
      if (!v6)
        return;
      goto LABEL_10;
    }
  }
  v6 = (const __CFLocale *)*((_QWORD *)this + 1);
  if (!v6)
    return;
LABEL_10:
  PathForLocalizedResource = createPathForLocalizedResource(v6, CFSTR("phrase-to-emojis.plist"));
  if (PathForLocalizedResource)
  {
    v9 = (unsigned int *)PathForLocalizedResource;
    v10 = (const __CFString *)NL::Resource::URL(PathForLocalizedResource);
    if (v10)
    {
      CFURLFromPathRepresentation = createCFURLFromPathRepresentation(v10);
      if (CFURLFromPathRepresentation)
      {
        v12 = CFURLFromPathRepresentation;
        *(_QWORD *)this = createDictionaryWithContentsOfURL(CFURLFromPathRepresentation, 0);
        CFRelease(v12);
      }
    }
    v13 = v9 + 2;
    do
    {
      v14 = __ldxr(v13);
      v15 = __OFSUB__(v14, 1);
      v16 = v14 - 1;
    }
    while (__stxr(v16, v13));
    if ((v16 < 0) ^ v15 | (v16 == 0))
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  }
}

void NLEmojiGenerator::~NLEmojiGenerator(NLEmojiGenerator *this)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)this;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
    CFRelease(v3);
}

CFStringRef NLEmojiGenerator::copyKeyEndingWithPhrase(CFDictionaryRef *this, const __CFString *a2)
{
  const __CFDictionary *v3;
  CFIndex Count;
  void **v6;
  unint64_t v7;
  const __CFString *v8;
  CFIndex Length;
  CFIndex v10;
  CFStringRef Copy;
  void **keys;
  void **v14;

  v3 = *this;
  if (!v3)
    return 0;
  Count = CFDictionaryGetCount(v3);
  if (Count < 1)
    return 0;
  std::vector<__CFString const*>::vector(&keys, Count);
  CFDictionaryGetKeysAndValues(*this, (const void **)keys, 0);
  v6 = v14;
  if (v14 == keys)
  {
LABEL_10:
    Copy = 0;
    if (!v6)
      return Copy;
    goto LABEL_14;
  }
  v7 = 0;
  v6 = keys;
  while (1)
  {
    if (CFStringHasSuffix(a2, (CFStringRef)v6[v7]))
    {
      v8 = (const __CFString *)keys[v7];
      Length = CFStringGetLength(a2);
      v10 = CFStringGetLength(v8);
      if (Length == v10 || Length > v10 && CFStringGetCharacterAtIndex(a2, Length + ~v10) == 32)
        break;
    }
    ++v7;
    v6 = keys;
    if (v7 >= v14 - keys)
      goto LABEL_10;
  }
  Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFStringRef)keys[v7]);
  v6 = keys;
  if (keys)
  {
LABEL_14:
    v14 = v6;
    operator delete(v6);
  }
  return Copy;
}

void sub_1A1890660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *NLEmojiGenerator::createEmojisForString(NLEmojiGenerator *this, const __CFString *a2)
{
  __CFArray *Mutable;
  const __CFLocale *v5;
  const __CFAllocator *v6;
  CFIndex Length;
  __CFString *MutableCopy;
  __CFString *v9;
  const __CFCharacterSet *Predefined;
  BOOL v11;
  CFIndex location;
  const __CFArray *Value;
  const __CFArray *v14;
  CFIndex v15;
  const void *ValueAtIndex;
  CFStringRef v17;
  CFStringRef v18;
  const __CFArray *v19;
  const __CFArray *v20;
  CFIndex v21;
  const void *v22;
  CFRange v24;
  CFRange v25;
  CFRange v26;
  CFRange v27;
  CFRange v28;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (a2)
  {
    v5 = (const __CFLocale *)*((_QWORD *)this + 1);
    if (v5)
    {
      if (*(_QWORD *)this)
      {
        v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Length = CFStringGetLength(a2);
        MutableCopy = CFStringCreateMutableCopy(v6, Length, a2);
        if (MutableCopy)
        {
          v9 = MutableCopy;
          CFStringTrimWhitespace(MutableCopy);
          CFStringLowercase(v9, v5);
          Predefined = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
          v26.length = CFStringGetLength(v9);
          v26.location = 0;
          if (CFStringFindCharacterFromSet(v9, Predefined, v26, 0, &v24))
            v11 = v24.location == 0;
          else
            v11 = 0;
          if (v11)
          {
            do
            {
              v25.length = v24.length;
              v25.location = 0;
              CFStringDelete(v9, v25);
              v27.length = CFStringGetLength(v9);
              v27.location = 0;
            }
            while (CFStringFindCharacterFromSet(v9, Predefined, v27, 0, &v24) && !v24.location);
          }
          while (1)
          {
            v28.length = CFStringGetLength(v9);
            v28.location = 0;
            if (!CFStringFindCharacterFromSet(v9, Predefined, v28, 4uLL, &v24))
              break;
            location = v24.location;
            if (location != CFStringGetLength(v9) - 1)
              break;
            CFStringDelete(v9, v24);
          }
          CFStringTrimWhitespace(v9);
          Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)this, v9);
          if (Value)
          {
            v14 = Value;
            if (CFArrayGetCount(Value) >= 1)
            {
              v15 = 0;
              do
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v14, v15);
                CFArrayAppendValue(Mutable, ValueAtIndex);
                ++v15;
              }
              while (v15 < CFArrayGetCount(v14));
            }
          }
          else
          {
            v17 = NLEmojiGenerator::copyKeyEndingWithPhrase((CFDictionaryRef *)this, v9);
            if (v17)
            {
              v18 = v17;
              v19 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)this, v17);
              if (v19)
              {
                v20 = v19;
                if (CFArrayGetCount(v19) >= 1)
                {
                  v21 = 0;
                  do
                  {
                    v22 = CFArrayGetValueAtIndex(v20, v21);
                    CFArrayAppendValue(Mutable, v22);
                    ++v21;
                  }
                  while (v21 < CFArrayGetCount(v20));
                }
              }
              CFRelease(v18);
            }
          }
          CFRelease(v9);
        }
      }
    }
  }
  return Mutable;
}

void loadAlternteKeywordsPlistFromFile(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const __CFString *CFStringFromString;
  NL::CFLogger *v4;
  const __CFAllocator *v5;
  std::string *v6;
  const __CFString *v7;
  CFURLRef v8;
  CFURLRef v9;
  int v10;
  uint64_t v11;
  const __CFDictionary *v12;
  CFIndex Count;
  const void **v14;
  const __CFString *v15;
  CFIndex v16;
  const __CFString **v17;
  const __CFString *v18;
  const __CFArray *v19;
  CFIndex v20;
  CFIndex v21;
  const __CFDictionary *ValueAtIndex;
  CFIndex v23;
  void **v24;
  unint64_t v25;
  const __CFString *v26;
  const __CFString *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void **v41;
  const __CFDictionary *theDict;
  const void **v43;
  void **v44;
  const __CFDictionary *Value;
  const __CFString **v46;
  const __CFArray *v47;
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  char v51;
  void **v52;
  void **v53;
  _OWORD v54[2];
  int v55;
  void *v56[2];
  char v57;
  void **keys;
  void **v59;
  void *v60[2];
  char v61;
  const void **v62;
  const void **v63;
  CFErrorRef error;
  SInt32 errorCode;
  CFDataRef resourceData;
  std::string v67;
  __int128 *v68[2];

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  CFStringFromString = createCFStringFromString(a1);
  getPathForResource(CFStringFromString, &v67);
  v4 = (NL::CFLogger *)std::string::compare(&v67, "");
  if ((_DWORD)v4)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v67;
    else
      v6 = (std::string *)v67.__r_.__value_.__r.__words[0];
    v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v6, 0x8000100u);
    v8 = CFURLCreateWithFileSystemPath(v5, v7, kCFURLPOSIXPathStyle, 0);
    v9 = v8;
    resourceData = 0;
    errorCode = 0;
    if (v8)
    {
      v8 = (CFURLRef)CFURLCreateDataAndPropertiesFromResource(v5, v8, &resourceData, 0, 0, &errorCode);
      v10 = (int)v8;
      if (!v7)
        goto LABEL_12;
    }
    else
    {
      v10 = 0;
      if (!v7)
      {
LABEL_12:
        if (v9)
          CFRelease(v9);
        if (CFStringFromString)
          CFRelease(CFStringFromString);
        if (v10 && resourceData)
        {
          error = 0;
          v12 = (const __CFDictionary *)CFPropertyListCreateWithData(v5, resourceData, 0, 0, &error);
          if (resourceData)
            CFRelease(resourceData);
          if (v12)
          {
            Count = CFDictionaryGetCount(v12);
            std::vector<__CFString const*>::vector(&v62, Count);
            CFDictionaryGetKeysAndValues(v12, v62, 0);
            v14 = v62;
            v41 = v63;
            if (v62 != v63)
            {
              theDict = v12;
              do
              {
                v43 = v14;
                v15 = (const __CFString *)*v14;
                Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, *v14);
                getUTF8StringFromCFString(v15, v60);
                v16 = CFDictionaryGetCount(Value);
                std::vector<__CFString const*>::vector(&keys, v16);
                CFDictionaryGetKeysAndValues(Value, (const void **)keys, 0);
                v17 = (const __CFString **)keys;
                v44 = v59;
                if (keys != v59)
                {
                  do
                  {
                    v46 = v17;
                    v18 = *v17;
                    getUTF8StringFromCFString(*v17, v56);
                    v19 = (const __CFArray *)CFDictionaryGetValue(Value, v18);
                    v20 = CFArrayGetCount(v19);
                    memset(v54, 0, sizeof(v54));
                    v55 = 1065353216;
                    if (v20 >= 1)
                    {
                      v21 = 0;
                      v47 = v19;
                      do
                      {
                        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, v21);
                        v23 = CFDictionaryGetCount(ValueAtIndex);
                        std::vector<__CFString const*>::vector(&v52, v23);
                        CFDictionaryGetKeysAndValues(ValueAtIndex, (const void **)v52, 0);
                        v24 = v53;
                        if (v53 != v52)
                        {
                          v25 = 0;
                          v24 = v52;
                          do
                          {
                            v26 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, v24[v25]);
                            if (v25 >= v53 - v52)
                              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
                            v27 = v26;
                            getUTF8StringFromCFString((const __CFString *)v52[v25], __p);
                            getUTF8StringFromCFString(v27, v48);
                            v68[0] = (__int128 *)v60;
                            v28 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)v60, (uint64_t)&std::piecewise_construct, v68);
                            v68[0] = (__int128 *)v56;
                            v29 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v28 + 40), (unsigned __int8 *)v56, (uint64_t)&std::piecewise_construct, v68);
                            v68[0] = (__int128 *)__p;
                            v30 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v29 + 40), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, v68);
                            v31 = v30 + 40;
                            if ((char)v30[63] < 0)
                              operator delete(*(void **)v31);
                            *(_OWORD *)v31 = *(_OWORD *)v48;
                            *((_QWORD *)v31 + 2) = v49;
                            if (v51 < 0)
                              operator delete(__p[0]);
                            ++v25;
                            v24 = v52;
                          }
                          while (v25 < v53 - v52);
                        }
                        if (v24)
                        {
                          v53 = v24;
                          operator delete(v24);
                        }
                        ++v21;
                        v19 = v47;
                      }
                      while (v21 != v20);
                    }
                    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v54);
                    if (v57 < 0)
                      operator delete(v56[0]);
                    v17 = v46 + 1;
                  }
                  while (v46 + 1 != (const __CFString **)v44);
                  v17 = (const __CFString **)keys;
                }
                if (v17)
                {
                  v59 = (void **)v17;
                  operator delete(v17);
                }
                if (v61 < 0)
                  operator delete(v60[0]);
                v14 = v43 + 1;
              }
              while (v43 + 1 != v41);
              v14 = v62;
              v12 = theDict;
            }
            if (v14)
            {
              v63 = v14;
              operator delete(v14);
            }
            CFRelease(v12);
          }
          else
          {
            CFShow(error);
          }
        }
        else
        {
          if (resourceData)
            CFRelease(resourceData);
          v32 = NL::CFLogger::sharedInstance(v8);
          (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v32 + 16))(v32, 3, "Could not load the mappings from resource bundle %d", errorCode);
          if (LogHandleForNLPhotoSharingIntentRecognizer(void)::onceToken != -1)
            dispatch_once(&LogHandleForNLPhotoSharingIntentRecognizer(void)::onceToken, &__block_literal_global_4);
          v33 = LogHandleForNLPhotoSharingIntentRecognizer(void)::logHandle;
          if (os_log_type_enabled((os_log_t)LogHandleForNLPhotoSharingIntentRecognizer(void)::logHandle, OS_LOG_TYPE_FAULT))
          {
            loadAlternteKeywordsPlistFromFile(v33, v34, v35, v36, v37, v38, v39, v40);
          }
        }
        goto LABEL_58;
      }
    }
    CFRelease(v7);
    goto LABEL_12;
  }
  v11 = NL::CFLogger::sharedInstance(v4);
  (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v11 + 16))(v11, 3, "Could not find the mappings from resource bundle");
  if (CFStringFromString)
    CFRelease(CFStringFromString);
LABEL_58:
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
}

void sub_1A1890F64()
{
  __cxa_end_catch();
  JUMPOUT(0x1A1890F78);
}

void sub_1A1890F74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 - 105) < 0)
    operator delete(*(void **)(v2 - 128));
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t NLPhotoSharingIntentRecognizer::NLPhotoSharingIntentRecognizer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  const __CFAllocator *v7;
  const char *v8;
  const __CFString *v9;
  __CFDictionary *Mutable;
  const char *v11;
  CFStringRef v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __n128 (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  void *__p;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;

  v4 = NLAbstractIntentRecognizer::NLAbstractIntentRecognizer(a1, (__int128 *)a2);
  *(_QWORD *)v4 = &off_1E45CE408;
  *(_OWORD *)(v4 + 80) = 0u;
  v5 = v4 + 80;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_DWORD *)(v4 + 112) = 1065353216;
  v6 = std::string::basic_string[abi:ne180100]<0>(&v22, "photosharing-alternate-keywords.plist");
  loadAlternteKeywordsPlistFromFile((uint64_t)v6, (uint64_t)&v14);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__move_assign(v5, &v14);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table((uint64_t)&v14);
  if (v23 < 0)
    operator delete(v22);
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*(char *)(a2 + 23) >= 0)
    v8 = (const char *)a2;
  else
    v8 = *(const char **)a2;
  v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8, 0x8000100u);
  CFLocaleCreate(0, v9);
  if (v9)
    CFRelease(v9);
  v14 = 0;
  v15 = &v14;
  v16 = 0x4002000000;
  v17 = __Block_byref_object_copy__10;
  v18 = __Block_byref_object_dispose__10;
  v21 = 0;
  __p = 0;
  v20 = 0;
  LDEnumerateAssetDataItems();
  if (*((char *)v15 + 63) < 0)
  {
    if (!v15[6])
      goto LABEL_18;
  }
  else if (!*((_BYTE *)v15 + 63))
  {
    goto LABEL_18;
  }
  Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = (const char *)(v15 + 5);
  if (*((char *)v15 + 63) < 0)
    v11 = *(const char **)v11;
  v12 = CFStringCreateWithCString(v7, v11, 0);
  CFDictionaryAddValue(Mutable, kMRLModelFileLocationKey, v12);
  *(_QWORD *)(a1 + 32) = MRLModelCreate();
  *(_QWORD *)(a1 + 40) = MRLModelGetIOMappings();
  if (Mutable)
    CFRelease(Mutable);
  if (v12)
    CFRelease(v12);
LABEL_18:
  _Block_object_dispose(&v14, 8);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  return a1;
}

void sub_1A18911B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  NLAbstractIntentRecognizer *v24;
  uint64_t v25;

  _Block_object_dispose(&a14, 8);
  if (a24 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table(v25);
  NLAbstractIntentRecognizer::~NLAbstractIntentRecognizer(v24);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN30NLPhotoSharingIntentRecognizerC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, const __CFURL *a2, int a3, int a4, CFTypeRef cf1, _BYTE *a6)
{
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0D43848]))
  {
    v9 = CFURLCopyPath(a2);
    getUTF8StringFromCFString(v9, &v12);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v11 = v10 + 40;
    if (*(char *)(v10 + 63) < 0)
      operator delete(*(void **)v11);
    *(_OWORD *)v11 = v12;
    *(_QWORD *)(v11 + 16) = v13;
    if (v9)
      CFRelease(v9);
    *a6 = 1;
  }
}

uint64_t NLPhotoSharingIntentRecognizer::NLPhotoSharingIntentRecognizer(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  const char *v10;
  CFStringRef v11;
  void *__p[2];
  char v14;
  uint64_t v15[5];

  v6 = NLAbstractIntentRecognizer::NLAbstractIntentRecognizer(a1, a2);
  *(_QWORD *)v6 = &off_1E45CE408;
  *(_OWORD *)(v6 + 80) = 0u;
  v7 = v6 + 80;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_DWORD *)(v6 + 112) = 1065353216;
  std::string::operator=((std::string *)(v6 + 8), (const std::string *)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "photosharing-alternate-keywords.plist");
  loadAlternteKeywordsPlistFromFile((uint64_t)__p, (uint64_t)v15);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__move_assign(v7, v15);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table((uint64_t)v15);
  if (v14 < 0)
    operator delete(__p[0]);
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*(char *)(a3 + 23) >= 0)
    v10 = (const char *)a3;
  else
    v10 = *(const char **)a3;
  v11 = CFStringCreateWithCString(v8, v10, 0);
  CFDictionaryAddValue(Mutable, kMRLModelFileLocationKey, v11);
  *(_QWORD *)(a1 + 32) = MRLModelCreate();
  *(_QWORD *)(a1 + 40) = MRLModelGetIOMappings();
  if (v11)
    CFRelease(v11);
  return a1;
}

void sub_1A1891428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  NLAbstractIntentRecognizer *v14;
  uint64_t v15;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table(v15);
  NLAbstractIntentRecognizer::~NLAbstractIntentRecognizer(v14);
  _Unwind_Resume(a1);
}

void NLPhotoSharingIntentRecognizer::copyIntentCandidate(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t **a3@<X8>)
{
  const __CFAllocator *v4;
  CFIndex Count;
  uint64_t v6;
  CFIndex v7;
  __CFArray *v8;
  __CFArray *v9;
  CFIndex v10;
  CFIndex v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  const __CFArray *ValueAtIndex;
  CFIndex v15;
  CFIndex v16;
  uint64_t v17;
  const __CFString *v18;
  CFMutableStringRef MutableCopy;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  _BOOL4 v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  _BOOL4 v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  std::string *v40;
  size_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  __int128 *v45;
  __int128 *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  __int128 *v53;
  __int128 *v54;
  __int128 *v55;
  __int128 *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  int *v64;
  int v65;
  _QWORD *v66;
  uint64_t v67;
  __int128 **v68;
  uint64_t v69;
  __int128 **v70;
  uint64_t i;
  CFIndex v72;
  const __CFArray *v73;
  CFIndex v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  float v80;
  uint64_t *v81;
  float *v82;
  int v83;
  uint64_t *v84;
  float *v85;
  int v86;
  uint64_t v87;
  int v88;
  double v89;
  uint64_t *v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  uint64_t **v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  char *v108;
  uint64_t v109;
  _BYTE v110[16];
  const __CFArray *v111;
  uint64_t **v112;
  uint64_t v113;
  const __CFString *v114;
  CFIndex v115;
  int v116;
  uint64_t v117;
  __CFArray *Mutable;
  uint64_t v119;
  CFStringRef v120;
  const __CFArray **v121;
  _BYTE *v122;
  _BYTE v123[44];
  int v124;
  __int128 v125;
  __int128 v126;
  int v127;
  int v128;
  _BYTE __str[32];
  int v130;
  __int128 **v131;
  __int128 **v132;
  __int128 *v133;
  __int128 *v134;
  __int128 *v135;
  std::string v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  v112 = a3;
  a3[2] = 0;
  if (!*(_QWORD *)(a1 + 32))
    return;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v121 = (const __CFArray **)*MEMORY[0x1E0C9AE00];
  v114 = CFStringCreateWithCString(v4, a2, 0x8000100u);
  v111 = NLTokenizerWithDataDetector::copyTokenizedSentences((NLTokenizerWithDataDetector *)(a1 + 72), v114);
  Count = CFArrayGetCount(v111);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)v121, 0, MEMORY[0x1E0C9B378]);
  if (Count < 1)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = Count;
    do
    {
      if (!std::string::compare((const std::string *)(a1 + 8), "zh-Hans"))
        v8 = NLTokenizerWithDataDetector::copyCharacterTokens((NLTokenizerWithDataDetector *)(a1 + 72), v114);
      else
        v8 = NLTokenizerWithDataDetector::copyTokens((NLTokenizerWithDataDetector *)(a1 + 72), v114);
      v9 = v8;
      v10 = CFArrayGetCount(v8);
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v9);
      v6 += v10;
      --v7;
    }
    while (v7);
  }
  v122 = (_BYTE *)a1;
  v113 = operator new[]();
  v117 = Count;
  if (Count < 1)
    goto LABEL_57;
  v11 = 0;
  v116 = 0;
  v120 = (CFStringRef)*MEMORY[0x1E0C9B350];
  v12 = v122 + 80;
  v13 = v122 + 8;
  v119 = v6;
  do
  {
    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(Mutable, v11);
    v15 = CFArrayGetCount(ValueAtIndex);
    if (v15 < 1)
      goto LABEL_56;
    v115 = v11;
    v16 = 0;
    v17 = v113 + 4 * v116;
    do
    {
      v18 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, v16);
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)v121, 0, v18);
      CFStringLowercase(MutableCopy, 0);
      CFStringTransform(MutableCopy, 0, v120, 0);
      getUTF8StringFromCFString(MutableCopy, &v136);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v12, v13))goto LABEL_49;
      *(_QWORD *)&v125 = v13;
      v20 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v12, v13, (uint64_t)&std::piecewise_construct, (__int128 **)&v125);
      std::string::basic_string[abi:ne180100]<0>(__str, "nouns");
      v21 = std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>((_QWORD *)v20 + 5, __str);
      *(_QWORD *)&v125 = v13;
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v12, v13, (uint64_t)&std::piecewise_construct, (__int128 **)&v125);
      if (v21)
      {
        *(_QWORD *)&v125 = v13;
        v22 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v12, v13, (uint64_t)&std::piecewise_construct, (__int128 **)&v125);
        std::string::basic_string[abi:ne180100]<0>(&v125, "nouns");
        v133 = &v125;
        v23 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v22 + 40), (unsigned __int8 *)&v125, (uint64_t)&std::piecewise_construct, &v133);
        v24 = std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>((_QWORD *)v23 + 5, (unsigned __int8 *)&v136);
        v133 = (__int128 *)v13;
        v25 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v12, v13, (uint64_t)&std::piecewise_construct, &v133);
        std::string::basic_string[abi:ne180100]<0>(&v133, "nouns");
        v131 = &v133;
        std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v25 + 40), (unsigned __int8 *)&v133, (uint64_t)&std::piecewise_construct, (__int128 **)&v131);
        v26 = v24 != 0;
        if (SHIBYTE(v135) < 0)
          operator delete(v133);
        if (SBYTE7(v126) < 0)
          operator delete((void *)v125);
      }
      else
      {
        v26 = 0;
      }
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      if (v26)
      {
        *(_QWORD *)&v125 = v13;
        v27 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v12, v13, (uint64_t)&std::piecewise_construct, (__int128 **)&v125);
        std::string::basic_string[abi:ne180100]<0>(&v125, "nouns");
        v133 = &v125;
        v28 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v27 + 40), (unsigned __int8 *)&v125, (uint64_t)&std::piecewise_construct, &v133);
        v133 = (__int128 *)&v136;
        v29 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v28 + 40), (unsigned __int8 *)&v136, (uint64_t)&std::piecewise_construct, &v133);
        if ((char)v29[63] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *((const std::string::value_type **)v29 + 5), *((_QWORD *)v29 + 6));
        }
        else
        {
          *(_OWORD *)__str = *(_OWORD *)(v29 + 40);
          *(_QWORD *)&__str[16] = *((_QWORD *)v29 + 7);
        }
        if (SBYTE7(v126) < 0)
          operator delete((void *)v125);
      }
      else
      {
        *(_QWORD *)&v125 = v13;
        v30 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v12, v13, (uint64_t)&std::piecewise_construct, (__int128 **)&v125);
        std::string::basic_string[abi:ne180100]<0>(__str, "verbs");
        v31 = std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>((_QWORD *)v30 + 5, __str);
        *(_QWORD *)&v125 = v13;
        std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v12, v13, (uint64_t)&std::piecewise_construct, (__int128 **)&v125);
        if (v31)
        {
          *(_QWORD *)&v125 = v13;
          v32 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v12, v13, (uint64_t)&std::piecewise_construct, (__int128 **)&v125);
          std::string::basic_string[abi:ne180100]<0>(&v125, "verbs");
          v133 = &v125;
          v33 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v32 + 40), (unsigned __int8 *)&v125, (uint64_t)&std::piecewise_construct, &v133);
          v34 = std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>((_QWORD *)v33 + 5, (unsigned __int8 *)&v136);
          v133 = (__int128 *)v13;
          v35 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v12, v13, (uint64_t)&std::piecewise_construct, &v133);
          std::string::basic_string[abi:ne180100]<0>(&v133, "verbs");
          v131 = &v133;
          std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v35 + 40), (unsigned __int8 *)&v133, (uint64_t)&std::piecewise_construct, (__int128 **)&v131);
          v36 = v34 != 0;
          if (SHIBYTE(v135) < 0)
            operator delete(v133);
          if (SBYTE7(v126) < 0)
            operator delete((void *)v125);
        }
        else
        {
          v36 = 0;
        }
        if ((__str[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__str);
          if (!v36)
            goto LABEL_49;
        }
        else if (!v36)
        {
          goto LABEL_49;
        }
        *(_QWORD *)&v125 = v13;
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v12, v13, (uint64_t)&std::piecewise_construct, (__int128 **)&v125);
        std::string::basic_string[abi:ne180100]<0>(&v125, "verbs");
        v133 = &v125;
        v38 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v37 + 40), (unsigned __int8 *)&v125, (uint64_t)&std::piecewise_construct, &v133);
        v133 = (__int128 *)&v136;
        v39 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v38 + 40), (unsigned __int8 *)&v136, (uint64_t)&std::piecewise_construct, &v133);
        if ((char)v39[63] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *((const std::string::value_type **)v39 + 5), *((_QWORD *)v39 + 6));
        }
        else
        {
          *(_OWORD *)__str = *(_OWORD *)(v39 + 40);
          *(_QWORD *)&__str[16] = *((_QWORD *)v39 + 7);
        }
        if (SBYTE7(v126) < 0)
          operator delete((void *)v125);
      }
      std::string::operator=(&v136, (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
LABEL_49:
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v136;
      else
        v40 = (std::string *)v136.__r_.__value_.__r.__words[0];
      v41 = strlen((const char *)v40);
      *(_DWORD *)(v17 + 4 * v16) = IOMappings::lookupInput(*((IOMappings **)v122 + 5), (char *)v40, v41);
      CFRelease(MutableCopy);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      ++v16;
      v6 = v119;
    }
    while (v15 != v16);
    v116 += v16;
    v11 = v115;
LABEL_56:
    ++v11;
  }
  while (v11 != v117);
LABEL_57:
  v121 = &v111;
  MEMORY[0x1E0C80A78]();
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v42 = *((_QWORD *)v122 + 5);
  if (!*(_QWORD *)(v42 + 64))
    goto LABEL_136;
  v43 = 0;
  do
  {
    LODWORD(v136.__r_.__value_.__l.__data_) = kOutputMappingCodesForPhotoSharingIntentClass[v43];
    v44 = *(_DWORD *)std::map<int,int>::at(v42 + 48, (int *)&v136);
    v45 = v134;
    if (v134 >= v135)
    {
      v47 = ((char *)v134 - (char *)v133) >> 3;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v49 = (char *)v135 - (char *)v133;
      if (((char *)v135 - (char *)v133) >> 2 > v48)
        v48 = v49 >> 2;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v48;
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v135, v50);
      v53 = (__int128 *)&v51[8 * v47];
      *(_DWORD *)v53 = v44;
      *((_DWORD *)v53 + 1) = v43;
      v55 = v133;
      v54 = v134;
      v56 = v53;
      if (v134 != v133)
      {
        do
        {
          v57 = *((_QWORD *)v54 - 1);
          v54 = (__int128 *)((char *)v54 - 8);
          *((_QWORD *)v56 - 1) = v57;
          v56 = (__int128 *)((char *)v56 - 8);
        }
        while (v54 != v55);
        v54 = v133;
      }
      v46 = (__int128 *)((char *)v53 + 8);
      v133 = v56;
      v134 = (__int128 *)((char *)v53 + 8);
      v135 = (__int128 *)&v51[8 * v52];
      if (v54)
        operator delete(v54);
    }
    else
    {
      *(_DWORD *)v134 = v44;
      *((_DWORD *)v45 + 1) = v43;
      v46 = (__int128 *)((char *)v45 + 8);
    }
    v134 = v46;
    ++v43;
    v42 = *((_QWORD *)v122 + 5);
    v58 = *(_QWORD *)(v42 + 64);
  }
  while (v58 > v43);
  if (v58 != 3)
LABEL_136:
    __assert_rtn("copyIntentCandidate", "NLPhotoSharingIntentRecognizer.cpp", 295, "numClasses == m_IOMappings->dummyOutputMap.size()");
  v59 = 126 - 2 * __clz(((char *)v46 - (char *)v133) >> 3);
  if (v46 == v133)
    v60 = 0;
  else
    v60 = v59;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>((uint64_t)v133, (int *)v46, (uint64_t)&v136, v60, 1);
  v61 = v117;
  v62 = v122;
  v63 = 0;
  v64 = (int *)v133 + 1;
  do
  {
    v65 = *v64;
    v64 += 2;
    *(_DWORD *)&v110[v63] = v65;
    v63 += 4;
  }
  while (v63 != 12);
  v66 = v62 + 48;
  std::vector<float>::resize((uint64_t)(v62 + 48), 3 * v6);
  v67 = *((_QWORD *)v62 + 6);
  if (!MRLModelStateCreate())
    __assert_rtn("copyIntentCandidate", "NLPhotoSharingIntentRecognizer.cpp", 306, "modelState");
  std::vector<float>::vector(&v131, 3 * v6);
  MRLModelReset();
  MRLModelRecognize();
  v68 = v131;
  if (v6 >= 1)
  {
    v69 = 0;
    v70 = v131;
    do
    {
      for (i = 0; i != 12; i += 4)
        *(_DWORD *)(v67 + i) = *(_DWORD *)((char *)v70 + i);
      v67 += 12;
      ++v69;
      v70 = (__int128 **)((char *)v70 + 12);
    }
    while (v69 != v6);
  }
  v132 = v68;
  MEMORY[0x1A1B0E050](v113, 0x1000C8052888210);
  MRLModelStateRelease();
  memset(__str, 0, sizeof(__str));
  v130 = 1065353216;
  if (v61 >= 1)
  {
    v122 = v110;
    v72 = 0;
    do
    {
      v73 = (const __CFArray *)CFArrayGetValueAtIndex(Mutable, v72);
      v74 = CFArrayGetCount(v73);
      v75 = v74;
      if (v74 > 0)
      {
        v76 = 0;
        if (v74 >= 100)
          v77 = 100;
        else
          v77 = v74;
        do
        {
          v78 = 0;
          v79 = *v66 + 12 * v76;
          LODWORD(v125) = 0;
          do
          {
            v80 = *(float *)(v79 + 4 * v78);
            v128 = v72;
            v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
            v81 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,float>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,float>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, &v128, (uint64_t)&std::piecewise_construct, &v136);
            v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v125;
            v82 = (float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v81 + 3), (int *)&v125, (uint64_t)&std::piecewise_construct, &v136);
            v82[5] = v80 + v82[5];
            v83 = v125;
            v78 = v125 + 1;
            LODWORD(v125) = v125 + 1;
          }
          while (v83 < 2);
          ++v76;
        }
        while (v76 != v77);
      }
      LODWORD(v125) = 0;
      do
      {
        v128 = v72;
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
        v84 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,float>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,float>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, &v128, (uint64_t)&std::piecewise_construct, &v136);
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v125;
        v85 = (float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v84 + 3), (int *)&v125, (uint64_t)&std::piecewise_construct, &v136);
        v85[5] = v85[5] / (float)v75;
        v86 = v125;
        LODWORD(v125) = v125 + 1;
      }
      while (v86 < 2);
      ++v72;
    }
    while (v72 != v117);
    v128 = 0;
    if (v117 >= 1)
    {
      v87 = (uint64_t)(v112 + 2);
      do
      {
        v88 = 0;
        v126 = 0u;
        v125 = 0u;
        v127 = 1065353216;
        v89 = 0.0;
        v124 = 0;
        do
        {
          v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
          v90 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,float>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,float>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, &v128, (uint64_t)&std::piecewise_construct, &v136);
          v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
          if (v89 < *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v90 + 3), &v124, (uint64_t)&std::piecewise_construct, &v136)+ 5))
          {
            v88 = v124;
            v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
            v91 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,float>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,float>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, &v128, (uint64_t)&std::piecewise_construct, &v136);
            v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
            v89 = *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v91 + 3), &v124, (uint64_t)&std::piecewise_construct, &v136)+ 5);
          }
          v92 = v124++;
        }
        while (v92 < 2);
        if (*(_DWORD *)&v122[4 * v88] == 1)
        {
          v93 = operator new();
          std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v123, (uint64_t)&v125);
          NLMessageIntentCandidate::NLMessageIntentCandidate(v93, 1, (uint64_t)v123, v89);
          v94 = v112;
          v96 = v112[1];
          v95 = (unint64_t)v112[2];
          if ((unint64_t)v96 >= v95)
          {
            v98 = *v112;
            v99 = v96 - *v112;
            v100 = v99 + 1;
            if ((unint64_t)(v99 + 1) >> 61)
              std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
            v101 = v95 - (_QWORD)v98;
            if (v101 >> 2 > v100)
              v100 = v101 >> 2;
            if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
              v102 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v102 = v100;
            v138 = v87;
            if (v102)
            {
              v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v87, v102);
              v98 = *v112;
              v96 = v112[1];
            }
            else
            {
              v103 = 0;
            }
            v104 = (uint64_t *)&v103[8 * v99];
            v105 = &v103[8 * v102];
            v137 = v105;
            *v104 = v93;
            v136.__r_.__value_.__r.__words[2] = (std::string::size_type)(v104 + 1);
            if (v96 == v98)
            {
              v97 = v104 + 1;
            }
            else
            {
              do
              {
                v106 = *--v96;
                *v96 = 0;
                *--v104 = v106;
              }
              while (v96 != v98);
              v97 = (uint64_t *)v136.__r_.__value_.__r.__words[2];
              v105 = v137;
            }
            v94 = v112;
            v107 = *(_OWORD *)v112;
            *v112 = v104;
            v94[1] = v97;
            *(_OWORD *)&v136.__r_.__value_.__r.__words[1] = v107;
            v108 = (char *)v94[2];
            v94[2] = (uint64_t *)v105;
            v137 = v108;
            v136.__r_.__value_.__r.__words[0] = v107;
            std::__split_buffer<std::unique_ptr<NLMessageIntentCandidate>>::~__split_buffer((uint64_t)&v136);
          }
          else
          {
            *v96 = v93;
            v97 = v96 + 1;
          }
          v94[1] = v97;
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v123);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v125);
        v109 = ++v128;
      }
      while (v117 > v109);
    }
  }
  if (v114)
    CFRelease(v114);
  if (Mutable)
    CFRelease(Mutable);
  if (v111)
    CFRelease(v111);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,float>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,float>>>>::~__hash_table((uint64_t)__str);
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
}

void sub_1A1892358(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 184);
  if (v3)
  {
    *(_QWORD *)(v1 - 176) = v3;
    operator delete(v3);
  }
  *(_QWORD *)(v1 - 256) = *(_QWORD *)(v1 - 440);
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 256));
  _Unwind_Resume(a1);
}

uint64_t IOMappings::lookupInput(IOMappings *this, char *src, size_t srcLength)
{
  IOMappings *v7;
  IOMappings *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;
  UErrorCode pErrorCode;

  pErrorCode = U_ZERO_ERROR;
  u_strFromUTF8(0, 0, 0, src, srcLength, &pErrorCode);
  if (pErrorCode >= U_ILLEGAL_ARGUMENT_ERROR && pErrorCode != U_BUFFER_OVERFLOW_ERROR)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "UNKNOWN");
    v10 = (unsigned int *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)this, (const void **)__p);
    if (v16 < 0)
      operator delete(__p[0]);
    if ((unsigned int *)((char *)this + 8) == v10)
      return 1;
    else
      return v10[14];
  }
  std::string::basic_string[abi:ne180100](__p, src, srcLength);
  v7 = (IOMappings *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)this, (const void **)__p);
  v8 = v7;
  if ((IOMappings *)((char *)this + 8) != v7)
  {
    v9 = (uint64_t)v7;
LABEL_15:
    v11 = *(unsigned int *)(v9 + 56);
    goto LABEL_16;
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "UNKNOWN");
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)this, (const void **)v13);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v8 != (IOMappings *)v9)
    goto LABEL_15;
  v11 = 1;
LABEL_16:
  if (v16 < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_1A1892680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void NLPhotoSharingIntentRecognizer::~NLPhotoSharingIntentRecognizer(NLPhotoSharingIntentRecognizer *this)
{
  *(_QWORD *)this = &off_1E45CE408;
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table((uint64_t)this + 80);
  NLAbstractIntentRecognizer::~NLAbstractIntentRecognizer(this);
}

{
  *(_QWORD *)this = &off_1E45CE408;
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table((uint64_t)this + 80);
  NLAbstractIntentRecognizer::~NLAbstractIntentRecognizer(this);
  JUMPOUT(0x1A1B0E068);
}

os_log_t ___ZL42LogHandleForNLPhotoSharingIntentRecognizerv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.NLP", "NLPhotoSharingIntentRecognizer");
  LogHandleForNLPhotoSharingIntentRecognizer(void)::logHandle = (uint64_t)result;
  return result;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A1892C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1A1892CC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A1892F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1A1893048(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  char *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (char *)operator new(0x50uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)v17 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *((_DWORD *)v17 + 18) = 1065353216;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1A1893430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  char v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *(a2 - 2);
        v22 = *v9;
        if (v21 < *v9 || v22 >= v21 && *(a2 - 1) < v9[1])
        {
          *v9 = v21;
          *(a2 - 2) = v22;
          v23 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v23;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = *(v9 - 2);
          if (v17 >= *v9 && (*v9 < v17 || *(v9 - 1) >= v9[1]))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,std::__less<void,void> &>(v9, a2);
            v9 = (int *)result;
            goto LABEL_19;
          }
LABEL_14:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,std::__less<void,void> &>(v9, a2);
          if ((v19 & 1) == 0)
            goto LABEL_17;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9, v18);
          v9 = v18 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v18 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>(v8, v18, a3, -v11, a5 & 1);
            v9 = v18 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,std::pair<int,int> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

_DWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(_DWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  _DWORD *v15;

  if (result == a2)
    return result;
  v2 = result + 2;
  if (result + 2 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = v5[2];
    v7 = *v5;
    if (v6 >= *v5 && (v7 < v6 || v5[3] >= v5[1]))
      goto LABEL_18;
    v9 = v5[2];
    v8 = v5[3];
    v10 = v5[1];
    v5[2] = v7;
    v4[1] = v10;
    v11 = result;
    if (v5 == result)
      goto LABEL_17;
    v12 = v3;
    while (1)
    {
      v13 = *(_DWORD *)((char *)result + v12 - 8);
      if (v13 <= v9)
        break;
      v14 = *(_DWORD *)((char *)result + v12 - 4);
LABEL_11:
      v5 -= 2;
      v15 = (_DWORD *)((char *)result + v12);
      *v15 = v13;
      v15[1] = v14;
      v12 -= 8;
      if (!v12)
      {
        v11 = result;
        goto LABEL_17;
      }
    }
    if (v13 >= v9)
    {
      v11 = (_DWORD *)((char *)result + v12);
      v14 = *(_DWORD *)((char *)result + v12 - 4);
      if (v14 <= v8)
        goto LABEL_17;
      goto LABEL_11;
    }
    v11 = v5;
LABEL_17:
    *v11 = v9;
    v11[1] = v8;
LABEL_18:
    v2 = v4 + 2;
    v3 += 8;
  }
  while (v4 + 2 != a2);
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *result, int *a2)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int *i;
  int v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = result + 1;
      do
      {
        v4 = result;
        result = v2;
        v5 = v4[2];
        v6 = *v4;
        if (v5 < *v4 || v6 >= v5 && v4[3] < v4[1])
        {
          v7 = *result;
          v8 = result[1];
          for (i = v3; ; i -= 2)
          {
            v10 = *i;
            i[1] = v6;
            i[2] = v10;
            v6 = *(i - 3);
            if (v6 <= v7 && (v6 < v7 || *(i - 2) <= v8))
              break;
          }
          *(i - 1) = v7;
          *i = v8;
        }
        v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1]))
      return 0;
    *a2 = v9;
    *a3 = v3;
    v11 = a2 + 1;
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1]))
      return 1;
    *a1 = v12;
    v6 = a1 + 1;
    *a2 = v13;
    v8 = 2;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = a1 + 1;
      *a3 = v4;
      v7 = a3 + 1;
      v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      v15 = *a3;
      v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14))
        return 1;
      *a2 = v15;
      *a3 = v16;
      v7 = a3 + 1;
      v8 = 2;
      v6 = a2 + 1;
    }
    v11 = v7;
  }
  v17 = *v6;
  *v6 = *v11;
  *v11 = v17;
  return v8;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,std::__less<void,void> &>(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int *i;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || *(a2 - 1) <= v2))
  {
    for (i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || i[1] <= v2); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && a2[1] > v2; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || i[1] <= v2));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
          v14 = v13 < v3;
        }
        while (v13 > v3);
      }
      while (!v14 && a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

_DWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,std::__less<void,void> &>(int *a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v9 > v3)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (_DWORD *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (_DWORD *)v6;
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v5;
      v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          v16 = v13[2];
          v13 += 2;
          v5 = v16;
          v17 = v16 <= v3;
        }
        while (v16 < v3);
      }
      while (v17 && v13[1] < v4);
      do
      {
        v18 = *(v14 - 2);
        v14 -= 2;
        v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int v8;
  int *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1]))
      goto LABEL_22;
    v14 = *v10;
    v15 = v10[1];
    *v10 = v13;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_21;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(int *)((char *)a1 + v17 + 8);
      if (v19 > v14)
      {
        v20 = *((_DWORD *)v18 + 3);
        goto LABEL_17;
      }
      if (v19 < v14)
      {
        v16 = v9;
        goto LABEL_21;
      }
      v20 = *(int *)((char *)a1 + v17 + 12);
      if (v20 <= v15)
        break;
LABEL_17:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        v16 = a1;
        goto LABEL_21;
      }
    }
    v16 = (int *)((char *)a1 + v17 + 16);
LABEL_21:
    *v16 = v14;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_22:
    v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,std::pair<int,int> *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;
  int v21;
  int *v22;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *v14 = v16;
          *a1 = v15;
          v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v18 = (unint64_t)v8 >> 3;
      v19 = a2 - 2;
      do
      {
        v21 = *a1;
        v20 = a1[1];
        v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a4, v18);
        if (v19 == v22)
        {
          *v22 = v21;
          v22[1] = v20;
        }
        else
        {
          *v22 = *v19;
          v22[1] = v19[1];
          *v19 = v21;
          v19[1] = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 3);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (int *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 8 * v7 + 4) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || v8[1] >= a4[1]))
      {
        v12 = *a4;
        v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (int *)(result + 8 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 8 * v7 + 4) < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_22;
          }
        }
        v14 = v8;
LABEL_22:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(_DWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 2 * v3 + 2;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        v3 = v9;
      }
    }
    *v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  unint64_t v12;
  int v13;
  int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (int *)(result + 8 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_DWORD *)(a2 - 8);
    if (*v6 < v8 || v8 >= v7 && *(_DWORD *)(result + 8 * v5 + 4) < *(_DWORD *)(a2 - 4))
    {
      v9 = *(_DWORD *)(a2 - 8);
      v10 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 8) = v7;
      *(_DWORD *)(a2 - 4) = v6[1];
      if (v4 >= 2)
      {
        while (1)
        {
          v12 = v5 - 1;
          v5 = (v5 - 1) >> 1;
          v11 = (int *)(result + 8 * v5);
          v13 = *v11;
          if (*v11 >= v9)
          {
            if (v13 > v9)
              break;
            v14 = *(_DWORD *)(result + 8 * v5 + 4);
            if (v14 >= v10)
              break;
          }
          else
          {
            v14 = v11[1];
          }
          *v6 = v13;
          v6[1] = v14;
          v6 = (int *)(result + 8 * v5);
          if (v12 <= 1)
            goto LABEL_12;
        }
      }
      v11 = v6;
LABEL_12:
      *v11 = v9;
      v11[1] = v10;
    }
  }
  return result;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1A1894588(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,float>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,float>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,float>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,float>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,float>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,float>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,float>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,float>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,float>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1A18948B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,float>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,float>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1A1894B18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<NLMessageIntentCandidate>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100]((uint64_t *)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

const __CFString *containsNonNamePunctuation(const __CFString *result)
{
  const __CFString *v1;
  CFIndex Length;
  const __CFCharacterSet *Predefined;
  const __CFCharacterSet *v4;
  CFRange v5;
  CFRange v6;

  if (result)
  {
    v1 = result;
    Length = CFStringGetLength(result);
    Predefined = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
    v5.location = 0;
    v5.length = 1;
    result = (const __CFString *)1;
    if (!CFStringFindCharacterFromSet(v1, Predefined, v5, 0, 0))
    {
      v4 = CFCharacterSetGetPredefined(kCFCharacterSetLetter);
      v6.location = 0;
      v6.length = Length;
      if (CFStringFindCharacterFromSet(v1, v4, v6, 0, 0))
        return 0;
    }
  }
  return result;
}

CFStringRef lookslikeProperName(CFStringRef theString, uint64_t a2, uint64_t a3, int a4)
{
  CFStringRef v4;
  CFStringRef v8;
  CFStringRef v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  const __CFString *v14;
  const __CFString *v15;
  double DoubleValue;
  CFTypeID v17;
  NSObject *v18;
  CFArrayRef v19;
  CFArrayRef v20;
  _BOOL4 v21;
  NSObject *v22;
  dispatch_time_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t HasResultsForQuery;
  _QWORD v28[6];
  _QWORD v29[7];
  _QWORD block[7];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  void *values[2];
  uint64_t v43;

  v4 = theString;
  v43 = *MEMORY[0x1E0C80C00];
  if (theString)
  {
    if (CFStringGetLength(theString) && (containsNonNamePunctuation(v4) & 1) == 0)
    {
      v8 = a4
         ? CFStringCreateWithFormat(0, 0, CFSTR("(kMDItemRecipients=\"%@*\"cwd || kMDItemRecipientEmailAddresses=\"%@\"cd || kMDItemAuthors=\"%@*\"cwd || kMDItemAuthorEmailAddresses=\"%@\"cd)"), v4, v4, v4, v4): CFStringCreateWithFormat(0, 0, CFSTR("(kMDItemRecipients=\"%@*\"cwd || kMDItemRecipientEmailAddresses=\"%@@*\"cd || kMDItemAuthors=\"%@*\"cwd || kMDItemAuthorEmailAddresses=\"%@@*\"cd)"), v4, v4, v4, v4);
      if (v8)
      {
        v9 = v8;
        v35 = 0;
        v36 = &v35;
        v37 = 0x2000000000;
        v38 = 0;
        v31 = 0;
        v32 = &v31;
        v33 = 0x2000000000;
        v34 = 0;
        if (getDynamicNamesQueue(void)::namesOnce != -1)
          dispatch_once(&getDynamicNamesQueue(void)::namesOnce, &__block_literal_global_55);
        v10 = MEMORY[0x1E0C809B0];
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __lookslikeProperName_block_invoke;
        block[3] = &unk_1E45CF520;
        block[4] = &v31;
        block[5] = &v35;
        block[6] = v4;
        dispatch_sync((dispatch_queue_t)getDynamicNamesQueue(void)::dynamicNamesQueue, block);
        v11 = v32;
        v12 = *((unsigned __int8 *)v32 + 24);
        if (*((_BYTE *)v32 + 24) && a4 && *((_DWORD *)v36 + 6) == 1)
          *((_BYTE *)v32 + 24) = 1;
        if (!v12 || (a4 & 1) != 0)
        {
          if (!v12)
          {
            v14 = (const __CFString *)CFPreferencesCopyValue(CFSTR("NLSearchNameCheckTimeout"), CFSTR("com.apple.NLP"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
            v15 = v14;
            v29[6] = v14;
            DoubleValue = 0.09;
            if (v14)
            {
              v17 = CFGetTypeID(v14);
              if (v17 == CFStringGetTypeID())
                DoubleValue = CFStringGetDoubleValue(v15);
            }
            if ((a3 & 0xFFFFFFFFFFFFFFFELL) != 2)
              goto LABEL_49;
            if (!CoreSpotlightLibraryCore(char **)::frameworkLibrary)
            {
              v39 = xmmword_1E45D0168;
              v40 = 0;
              CoreSpotlightLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
            }
            if (!CoreSpotlightLibraryCore(char **)::frameworkLibrary)
              goto LABEL_49;
            if (CFPreferencesGetAppBooleanValue(CFSTR("NLSearchEnableLogging"), (CFStringRef)*MEMORY[0x1E0C9B228], 0))
            {
              v18 = _nlpDefaultLog();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
                lookslikeProperName_cold_1(v18);
            }
            *(_OWORD *)values = xmmword_1E45D0018;
            v19 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
            if (!v19)
              goto LABEL_49;
            v20 = CFLocaleCopyPreferredLanguages();
            if (v20)
            {
              if (a2)
                v26 = MEMORY[0x1A1B0D63C](a2);
              else
                v26 = 0;
              *(_QWORD *)&v39 = 0;
              *((_QWORD *)&v39 + 1) = &v39;
              v40 = 0x2000000000;
              v41 = 0;
              v22 = dispatch_group_create();
              dispatch_group_enter(v22);
              v29[0] = v10;
              v29[1] = 0x40000000;
              v29[2] = __lookslikeProperName_block_invoke_14;
              v29[3] = &unk_1E45D0030;
              v29[4] = &v39;
              v29[5] = v22;
              HasResultsForQuery = _CSSimpleQueryHasResultsForQuery((uint64_t)v9, (uint64_t)v19, v26, (uint64_t)v20, (uint64_t)v29);
              v23 = dispatch_time(0, (uint64_t)(DoubleValue * 1000000000.0));
              if (dispatch_group_wait(v22, v23))
                _CSSimpleQueryCancel(HasResultsForQuery);
              dispatch_release(v22);
              v24 = *(unsigned __int8 *)(*((_QWORD *)&v39 + 1) + 24);
              CFRelease(v20);
              v21 = v24 != 0;
              _Block_object_dispose(&v39, 8);
            }
            else
            {
              v21 = 0;
            }
            CFRelease(v19);
            if (v21)
            {
              if (a4)
                v25 = 1;
              else
                v25 = 2;
              *((_DWORD *)v36 + 6) = v25;
              CFRetain(v4);
              if (getDynamicNamesQueue(void)::namesOnce != -1)
                dispatch_once(&getDynamicNamesQueue(void)::namesOnce, &__block_literal_global_55);
              v28[0] = v10;
              v28[1] = 0x40000000;
              v28[2] = __lookslikeProperName_block_invoke_2;
              v28[3] = &unk_1E45D0078;
              v28[4] = &v35;
              v28[5] = v4;
              dispatch_async((dispatch_queue_t)getDynamicNamesQueue(void)::dynamicNamesQueue, v28);
              v4 = (CFStringRef)1;
            }
            else
            {
LABEL_49:
              v4 = 0;
            }
            CFRelease(v9);
            if (v15)
              CFRelease(v15);
            goto LABEL_22;
          }
        }
        else if (*((_DWORD *)v36 + 6) == 2)
        {
          *((_BYTE *)v11 + 24) = 1;
        }
        CFRelease(v9);
        v4 = (CFStringRef)(*((_BYTE *)v32 + 24) != 0);
LABEL_22:
        _Block_object_dispose(&v31, 8);
        _Block_object_dispose(&v35, 8);
        return v4;
      }
    }
    return 0;
  }
  return v4;
}

void sub_1A18950A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  nlp::CFScopedPtr<void const*>::reset(&a27, 0);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 208), 8);
  _Unwind_Resume(a1);
}

BOOL __lookslikeProperName_block_invoke(uint64_t a1)
{
  _BOOL8 result;

  if (getProperNames(void)::propernamesOnce != -1)
    dispatch_once(&getProperNames(void)::propernamesOnce, &__block_literal_global_58);
  result = searchBurstTrie((nlp *)getProperNames(void)::propernames, *(CFStringRef *)(a1 + 48), (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

BOOL searchBurstTrie(nlp *a1, CFStringRef theString, _DWORD *a3)
{
  CFIndex Length;
  uint64_t v7;
  const char *v8;
  CFIndex v9;
  size_t v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(theString);
  CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)v12 - v7;
  CFStringGetCString(theString, (char *)v12 - v7, v9, 0x8000100u);
  v10 = strlen(v8);
  return nlp::BurstTrieContains(a1, v8, v10, a3, 0) != 0;
}

uint64_t _CSSimpleQueryHasResultsForQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  void *v11;
  _Unwind_Exception *v13;
  _Unwind_Exception *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v10 = getCSSimpleQueryHasResultsForQuerySymbolLoc(void)::ptr;
  v18 = getCSSimpleQueryHasResultsForQuerySymbolLoc(void)::ptr;
  if (!getCSSimpleQueryHasResultsForQuerySymbolLoc(void)::ptr)
  {
    v11 = (void *)CoreSpotlightLibrary();
    v10 = dlsym(v11, "CSSimpleQueryHasResultsForQuery");
    v16[3] = (uint64_t)v10;
    getCSSimpleQueryHasResultsForQuerySymbolLoc(void)::ptr = v10;
  }
  _Block_object_dispose(&v15, 8);
  if (!v10)
  {
    _CSSimpleQueryHasResultsForQuery();
    v14 = v13;
    _Block_object_dispose(&v15, 8);
    _Unwind_Resume(v14);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t))v10)(a1, a2, 0, a3, a4, 0, a5);
}

void __lookslikeProperName_block_invoke_14(uint64_t a1, int a2, int a3)
{
  if (a2 && a3)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t _CSSimpleQueryCancel(uint64_t a1)
{
  void *v2;
  void *v3;
  _Unwind_Exception *v5;
  _Unwind_Exception *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v2 = getCSSimpleQueryCancelSymbolLoc(void)::ptr;
  v10 = getCSSimpleQueryCancelSymbolLoc(void)::ptr;
  if (!getCSSimpleQueryCancelSymbolLoc(void)::ptr)
  {
    v3 = (void *)CoreSpotlightLibrary();
    v2 = dlsym(v3, "CSSimpleQueryCancel");
    v8[3] = (uint64_t)v2;
    getCSSimpleQueryCancelSymbolLoc(void)::ptr = v2;
  }
  _Block_object_dispose(&v7, 8);
  if (!v2)
  {
    _CSSimpleQueryHasResultsForQuery();
    v6 = v5;
    _Block_object_dispose(&v7, 8);
    _Unwind_Resume(v6);
  }
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void __lookslikeProperName_block_invoke_2(uint64_t a1)
{
  CFMutableArrayRef Mutable;
  const __CFArray *v3;
  nlp *v4;
  _QWORD *v5;
  uint64_t v6;
  CFIndex Count;
  CFIndex i;
  const __CFString *ValueAtIndex;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (getProperNames(void)::propernamesOnce != -1)
    dispatch_once(&getProperNames(void)::propernamesOnce, &__block_literal_global_58);
  if (nlp::BurstTrieGetCount(getProperNames(void)::propernames) == 2000)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v3 = Mutable;
      if (getProperNames(void)::propernamesOnce != -1)
        dispatch_once(&getProperNames(void)::propernamesOnce, &__block_literal_global_58);
      v4 = (nlp *)getProperNames(void)::propernames;
      v10[0] = &unk_1E45CE728;
      v10[1] = _Block_copy(&__block_literal_global_5);
      v11 = v10;
      nlp::BurstTrieSearch(v4, "", 0, (uint64_t)v3, (uint64_t)v10, -1);
      v5 = v11;
      if (v11 == v10)
      {
        v6 = 4;
        v5 = v10;
      }
      else
      {
        if (!v11)
        {
LABEL_12:
          Count = CFArrayGetCount(v3);
          if (Count >= 1)
          {
            for (i = 0; i != Count; ++i)
            {
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v3, i);
              if (getProperNames(void)::propernamesOnce != -1)
                dispatch_once(&getProperNames(void)::propernamesOnce, &__block_literal_global_58);
              removeFromBurstTrie((_DWORD *)getProperNames(void)::propernames, ValueAtIndex);
            }
          }
          CFRelease(v3);
          goto LABEL_18;
        }
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
      goto LABEL_12;
    }
  }
LABEL_18:
  if (getProperNames(void)::propernamesOnce != -1)
    dispatch_once(&getProperNames(void)::propernamesOnce, &__block_literal_global_58);
  addToBurstTrie(getProperNames(void)::propernames, *(CFStringRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void sub_1A1895620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void __lookslikeProperName_block_invoke_3(uint64_t a1, __CFArray *a2, uint64_t a3)
{
  const __CFAllocator *v5;
  const UInt8 *Completion;
  unsigned int Length;
  CFStringRef v8;
  CFStringRef v9;

  if (nlp::TrieCompletionGetScore(a3) <= 1.0)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Completion = (const UInt8 *)nlp::TrieCompletionGetCompletion(a3);
    Length = nlp::TrieCompletionGetLength(a3);
    v8 = CFStringCreateWithBytes(v5, Completion, Length, 0x8000100u, 0);
    if (v8)
    {
      v9 = v8;
      CFArrayAppendValue(a2, v8);
      CFRelease(v9);
    }
  }
}

uint64_t removeFromBurstTrie(_DWORD *a1, CFStringRef theString)
{
  CFIndex Length;
  uint64_t v5;
  char *v6;
  CFIndex v7;
  int v8;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(theString);
  CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)v10 - v5;
  CFStringGetCString(theString, (char *)v10 - v5, v7, 0x8000100u);
  v8 = strlen(v6);
  return nlp::BurstTrieRemove(a1, v6, v8);
}

BOOL addToBurstTrie(uint64_t a1, CFStringRef theString)
{
  CFIndex Length;
  uint64_t v5;
  const char *v6;
  CFIndex v7;
  int v8;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(theString);
  CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)v10 - v5;
  CFStringGetCString(theString, (char *)v10 - v5, v7, 0x8000100u);
  v8 = strlen(v6);
  return nlp::BurstTrieAdd(a1, (uint64_t)v6, v8, 1);
}

uint64_t NL::EntityConverter::EntityConverter(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NL::NumericConverter *v15;
  NL::NumericConverter *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const void **v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v7 = (_QWORD *)operator new();
  v8 = (uint64_t)v7;
  v9 = (std::__shared_weak_count *)a2[1];
  v27 = *a2;
  v28 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  NL::DateConverter::DateConverter(v7, &v27);
  std::unique_ptr<NL::DateConverter>::reset[abi:ne180100]((uint64_t *)(a1 + 16), v8);
  v12 = v28;
  if (v28)
  {
    v13 = (unint64_t *)&v28->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (NL::NumericConverter *)operator new();
  v16 = v15;
  v17 = (std::__shared_weak_count *)a2[1];
  v25 = *a2;
  v26 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  NL::DateConverter::DateConverter(v15, &v25);
  std::unique_ptr<NL::NumericConverter>::reset[abi:ne180100]((NL::NumericConverter **)(a1 + 24), v16);
  v20 = v26;
  if (v26)
  {
    v21 = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (const void **)operator new();
  NL::Transcriber::Transcriber(v23, *(const __CFLocale **)(*a2 + 8));
  std::unique_ptr<NL::Transcriber>::reset[abi:ne180100]((NL::Transcriber **)(a1 + 32), (NL::Transcriber *)v23);
  return a1;
}

void sub_1A1895A4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  NL::NumericConverter **v3;
  NL::Transcriber **v4;
  uint64_t v5;

  MEMORY[0x1A1B0E068](v5, 0x20C4093837F09);
  std::unique_ptr<NL::Transcriber>::reset[abi:ne180100](v4, 0);
  std::unique_ptr<NL::NumericConverter>::reset[abi:ne180100](v3, 0);
  std::unique_ptr<NL::DateConverter>::reset[abi:ne180100](v2, 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

CFIndex NL::EntityConverter::entityWithString@<X0>(CFIndex this@<X0>, CFStringRef theString@<X1>, CFRange a3@<0:X2, 8:X3>, _QWORD *a4@<X8>)
{
  *a4 = 0;
  if (theString && (*(_DWORD *)(*(_QWORD *)this + 40) - 7) <= 1)
  {
    if (*(_QWORD *)(*(_QWORD *)this + 8))
      return CFStringGetLength(theString);
  }
  return this;
}

void sub_1A1895B18(_Unwind_Exception *a1)
{
  NL::Entity **v1;

  std::unique_ptr<NL::Entity>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

NL::Entity *NL::EntityConverter::enumerateEntitiesWithTypeAndValues(NL::Entity *result, CFStringRef theString, CFIndex a3, CFIndex a4, const __CFString *a5, const __CFString *a6, const __CFDictionary *a7, int a8, uint64_t a9)
{
  NL::Entity *v14;
  CFIndex Count;
  const __CFString *v16;
  int v17;
  unint64_t v18;
  const void **v19;
  size_t v20;
  const void **v21;
  _BYTE *v22;
  size_t v23;
  uint64_t v24;
  std::string *v25;
  NL::Entity *v26;
  const __CFString *v27;
  std::string *v28;
  NL::Entity *v29;
  NL::Entity *v30;
  std::string *v31;
  NL::Entity *v32;
  NL::Entity *v33;
  NL::Entity *v34;
  const __CFString *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v39;
  std::string *v40;
  NL::Entity *v41;
  NL::Entity *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  NL::Entity *v47;
  NL::Entity *v48;
  std::string *v49;
  NL::Entity *v50;
  NL::Entity *v51;
  NL::Entity *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::string *v56;
  NL::Entity *v57;
  std::string *v58;
  NL::Entity *v59;
  unint64_t *v60;
  unint64_t v61;
  NL::Entity *v62;
  NL::Entity **v63;
  const __CFString *v64;
  std::string *v65;
  NL::Entity *v66;
  NL::Entity *v67;
  std::string *v68;
  NL::Entity *v69;
  unint64_t *v70;
  unint64_t v71;
  NL::Entity *v72;
  _QWORD *v73;
  uint64_t v74;
  std::string *v75;
  NL::Entity *v76;
  unint64_t *v77;
  unint64_t v78;
  NL::Entity *v79;
  _QWORD *v80;
  uint64_t v81;
  std::string *v82;
  NL::Entity *v83;
  unint64_t *v84;
  unint64_t v85;
  NL::Entity *v86;
  std::string *v87;
  NL::Entity *v88;
  std::string *v89;
  uint64_t v90;
  NL::Entity *v91;
  _BYTE v92[12];
  int v93;
  _BYTE *v94;
  uint64_t v95;
  const __CFString *v96;
  CFRange v97;
  NL::Entity *v98;
  __int128 v99;
  char v100;
  __int128 v101;
  char v102;
  NL::Entity *v103;
  __int128 v104;
  char v105;
  __int128 v106;
  char v107;
  NL::Entity *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  __int128 v111;
  char v112;
  __int128 v113;
  char v114;
  NL::Entity *v115;
  __int128 v116;
  char v117;
  __int128 v118;
  char v119;
  NL::Entity *v120;
  __int128 v121;
  char v122;
  __int128 v123;
  char v124;
  NL::Entity *v125;
  __int128 v126;
  __int128 v127;
  char v128;
  __int128 v129;
  char v130;
  NL::Entity *v131;
  __int128 v132;
  __int128 v133;
  char v134;
  __int128 v135;
  char v136;
  NL::Entity *v137;
  __int128 v138;
  __int128 v139;
  char v140;
  __int128 v141;
  char v142;
  NL::Entity *v143;
  __int128 v144;
  __int128 v145;
  char v146;
  __int128 v147;
  char v148;
  __int128 v149;
  __int128 v150;
  NL::Entity *v151;
  __int128 v152;
  char v153;
  __int128 v154;
  char v155;
  __int128 v156;
  char v157;
  NL::Entity *v158;
  __int128 v159;
  char v160;
  __int128 v161;
  char v162;
  NL::Entity *v163;
  std::string __str;
  __int128 v165;
  char v166;
  __int128 v167;
  char v168;
  const __CFString *v169;
  NL::Entity *v170[4];

  v97.location = a3;
  v97.length = a4;
  v170[1] = *(NL::Entity **)MEMORY[0x1E0C80C00];
  if (theString)
  {
    if (a5)
    {
      if (a6)
      {
        v14 = result;
        result = (NL::Entity *)CFStringGetLength(theString);
        if (v97.location + v97.length <= (uint64_t)result)
        {
          v170[0] = 0;
          if (a7)
            Count = CFDictionaryGetCount(a7);
          else
            Count = 0;
          v16 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, v97);
          v169 = v16;
          if (CFStringHasSuffix(a5, CFSTR("Text")))
            v17 = 7;
          else
            v17 = 0;
          if (a8)
            v17 = 3;
          v93 = v17;
          if (!Count)
          {
            if (CFStringHasSuffix(a6, CFSTR("Date")) || CFStringHasSuffix(a6, CFSTR("Time")))
            {
              v35 = v16;
              NL::DateConverter::datePeriodForRelativeDate(*((const __CFDate ****)v14 + 2), a6, (NL::DatePeriod **)&v149);
              v36 = v149;
              *(_QWORD *)&v150 = v149;
              if ((_QWORD)v149)
              {
                v37 = (std::__shared_weak_count *)operator new();
                v37->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v37->__shared_owners_;
                v39 = (std::__shared_weak_count_vtbl *)v149;
                v37->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CF118;
                v37->__shared_weak_owners_ = 0;
                v37[1].__vftable = v39;
                *((_QWORD *)&v150 + 1) = v37;
                v40 = (std::string *)operator new();
                nlp::getUTF8StringFromCFString(a5, &v113);
                nlp::getUTF8StringFromCFString(v35, &v111);
                NL::Entity::Entity(v40, &v113, &v111, v97.location, v97.length);
                v41 = v170[0];
                v170[0] = (NL::Entity *)v40;
                if (v41)
                {
                  NL::Entity::~Entity(v41);
                  MEMORY[0x1A1B0E068]();
                }
                if (v112 < 0)
                  operator delete((void *)v111);
                if (v114 < 0)
                  operator delete((void *)v113);
                v42 = v170[0];
                v109 = v36;
                v110 = v37;
                do
                  v43 = __ldxr(p_shared_owners);
                while (__stxr(v43 + 1, p_shared_owners));
                std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)v42 + 16, &v109);
                v44 = v110;
                if (v110)
                {
                  v45 = (unint64_t *)&v110->__shared_owners_;
                  do
                    v46 = __ldaxr(v45);
                  while (__stlxr(v46 - 1, v45));
                  if (!v46)
                  {
                    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                    std::__shared_weak_count::__release_weak(v44);
                  }
                }
                v47 = v170[0];
                *((_DWORD *)v170[0] + 28) = 1;
                v170[0] = 0;
                v108 = v47;
                (*(void (**)(uint64_t, NL::Entity **))(a9 + 16))(a9, &v108);
                v48 = v108;
                v108 = 0;
                if (v48)
                {
                  NL::Entity::~Entity(v48);
                  MEMORY[0x1A1B0E068]();
                }
                v49 = (std::string *)operator new();
                std::string::basic_string[abi:ne180100]<0>(&v106, "Text");
                nlp::getUTF8StringFromCFString(v169, &v104);
                NL::Entity::Entity(v49, &v106, &v104, v97.location, v97.length);
                v50 = v170[0];
                v170[0] = (NL::Entity *)v49;
                if (v50)
                {
                  NL::Entity::~Entity(v50);
                  MEMORY[0x1A1B0E068]();
                }
                if (v105 < 0)
                  operator delete((void *)v104);
                if (v107 < 0)
                  operator delete((void *)v106);
                v51 = v170[0];
                *((_DWORD *)v170[0] + 28) = 7;
                v170[0] = 0;
                v103 = v51;
                (*(void (**)(uint64_t, NL::Entity **))(a9 + 16))(a9, &v103);
                v52 = v103;
                v103 = 0;
                if (v52)
                {
                  NL::Entity::~Entity(v52);
                  MEMORY[0x1A1B0E068]();
                }
                v53 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
                if (*((_QWORD *)&v150 + 1))
                {
                  v54 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
                  do
                    v55 = __ldaxr(v54);
                  while (__stlxr(v55 - 1, v54));
                  if (!v55)
                  {
                    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                    std::__shared_weak_count::__release_weak(v53);
                  }
                }
              }
              v16 = v169;
              if (!v169)
                goto LABEL_75;
            }
            else
            {
              v56 = (std::string *)operator new();
              nlp::getUTF8StringFromCFString(a5, &v101);
              nlp::getUTF8StringFromCFString(v16, &v99);
              NL::Entity::Entity(v56, &v101, &v99, v97.location, v97.length);
              std::unique_ptr<NL::Entity>::reset[abi:ne180100](v170, (NL::Entity *)v56);
              if (v100 < 0)
                operator delete((void *)v99);
              if (v102 < 0)
                operator delete((void *)v101);
              v57 = v170[0];
              *((_DWORD *)v170[0] + 28) = v93;
              v170[0] = 0;
              v98 = v57;
              (*(void (**)(uint64_t, NL::Entity **))(a9 + 16))(a9, &v98);
              std::unique_ptr<NL::Entity>::reset[abi:ne180100](&v98, 0);
              if (!v16)
                goto LABEL_75;
            }
            goto LABEL_74;
          }
          v94 = v92;
          MEMORY[0x1E0C80A78]();
          v95 = a9;
          v96 = v16;
          v18 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
          v19 = (const void **)&v92[-v18];
          if ((unint64_t)(8 * Count) >= 0x200)
            v20 = 512;
          else
            v20 = 8 * Count;
          bzero(&v92[-v18], v20);
          MEMORY[0x1E0C80A78]();
          v21 = (const void **)&v92[-v18];
          v22 = &v92[-v18];
          v23 = v20;
          v24 = v95;
          v16 = v96;
          bzero(v22, v23);
          CFDictionaryGetKeysAndValues(a7, v19, v21);
          if (CFStringsAreEqual(a6, CFSTR("Contact")) || CFStringFind(a6, CFSTR("Email"), 0).location != -1)
          {
            v25 = (std::string *)operator new();
            nlp::getUTF8StringFromCFString(a5, &v167);
            nlp::getUTF8StringFromCFString(v16, &v165);
            NL::Entity::Entity(v25, &v167, &v165, v97.location, v97.length);
            v26 = v170[0];
            v170[0] = (NL::Entity *)v25;
            if (v26)
            {
              NL::Entity::~Entity(v26);
              MEMORY[0x1A1B0E068]();
            }
            if (v166 < 0)
              operator delete((void *)v165);
            if (v168 < 0)
              operator delete((void *)v167);
            if (*(_BYTE *)(*(_QWORD *)v14 + 65))
            {
              NL::Transcriber::updateLocale(*((const void ***)v14 + 4), *(CFLocaleRef *)(*(_QWORD *)v14 + 8));
              v27 = NL::Transcriber::copyTranscription(*((CFStringTokenizerRef **)v14 + 4), v16);
              *(_QWORD *)&v150 = v27;
              v28 = (std::string *)v170[0];
              nlp::getUTF8StringFromCFString(v27, &__str);
              std::string::operator=(v28 + 2, &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (v27)
                CFRelease(v27);
            }
            v29 = v170[0];
            v170[0] = 0;
            v163 = v29;
            (*(void (**)(uint64_t, NL::Entity **))(v24 + 16))(v24, &v163);
            v30 = v163;
            v163 = 0;
            if (v30)
            {
              NL::Entity::~Entity(v30);
              MEMORY[0x1A1B0E068]();
            }
            v31 = (std::string *)operator new();
            std::string::basic_string[abi:ne180100]<0>(&v161, "NameText");
            nlp::getUTF8StringFromCFString(v16, &v159);
            NL::Entity::Entity(v31, &v161, &v159, v97.location, v97.length);
            v32 = v170[0];
            v170[0] = (NL::Entity *)v31;
            if (v32)
            {
              NL::Entity::~Entity(v32);
              MEMORY[0x1A1B0E068]();
            }
            if (v160 < 0)
              operator delete((void *)v159);
            if (v162 < 0)
              operator delete((void *)v161);
            v33 = v170[0];
            *((_DWORD *)v170[0] + 28) = 7;
            v170[0] = 0;
            v158 = v33;
            (*(void (**)(uint64_t, NL::Entity **))(v24 + 16))(v24, &v158);
            v34 = v158;
            v158 = 0;
            if (v34)
            {
LABEL_39:
              NL::Entity::~Entity(v34);
              MEMORY[0x1A1B0E068]();
            }
LABEL_40:
            if (!v16)
            {
LABEL_75:
              result = v170[0];
              v170[0] = 0;
              if (result)
              {
                NL::Entity::~Entity(result);
                return (NL::Entity *)MEMORY[0x1A1B0E068]();
              }
              return result;
            }
LABEL_74:
            CFRelease(v16);
            goto LABEL_75;
          }
          if (CFStringHasSuffix(a6, CFSTR("Status")))
          {
            if (Count >= 1)
            {
              while (!CFStringHasSuffix(a5, (CFStringRef)*v19))
              {
                ++v21;
                ++v19;
                if (!--Count)
                  goto LABEL_40;
              }
              v64 = (const __CFString *)*v21;
              v65 = (std::string *)operator new();
              nlp::getUTF8StringFromCFString(a5, &v156);
              nlp::getUTF8StringFromCFString(v16, &v154);
              nlp::getUTF8StringFromCFString(v64, &v152);
              NL::Entity::Entity(v65, &v156, &v154, &v152, v97.location, v97.length);
              v66 = v170[0];
              v170[0] = (NL::Entity *)v65;
              if (v66)
              {
                NL::Entity::~Entity(v66);
                MEMORY[0x1A1B0E068]();
              }
              if (v153 < 0)
                operator delete((void *)v152);
              if (v155 < 0)
                operator delete((void *)v154);
              if (v157 < 0)
                operator delete((void *)v156);
              v67 = v170[0];
              v170[0] = 0;
              v151 = v67;
              (*(void (**)(uint64_t, NL::Entity **))(v24 + 16))(v24, &v151);
              v34 = v151;
              v151 = 0;
              if (v34)
                goto LABEL_39;
            }
            goto LABEL_40;
          }
          if (CFStringHasSuffix(a6, CFSTR("Value")))
          {
            NL::NumericConverter::numericValueForTypeWithValues(*((NL::ParserContext ***)v14 + 3), a6, a7, &v149);
            v150 = v149;
            v149 = 0uLL;
            std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&v149);
            if ((_QWORD)v150)
            {
              v58 = (std::string *)operator new();
              nlp::getUTF8StringFromCFString(a5, &v147);
              nlp::getUTF8StringFromCFString(v16, &v145);
              NL::Entity::Entity(v58, &v147, &v145, v97.location, v97.length);
              std::unique_ptr<NL::Entity>::reset[abi:ne180100](v170, (NL::Entity *)v58);
              if (v146 < 0)
                operator delete((void *)v145);
              if (v148 < 0)
                operator delete((void *)v147);
              v59 = v170[0];
              v144 = v150;
              if (*((_QWORD *)&v150 + 1))
              {
                v60 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
                do
                  v61 = __ldxr(v60);
                while (__stxr(v61 + 1, v60));
              }
              std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)v59 + 18, (uint64_t *)&v144);
              std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&v144);
              v62 = v170[0];
              *((_DWORD *)v170[0] + 28) = 2;
              v170[0] = 0;
              v143 = v62;
              (*(void (**)(uint64_t, NL::Entity **))(v24 + 16))(v24, &v143);
              v63 = &v143;
LABEL_119:
              std::unique_ptr<NL::Entity>::reset[abi:ne180100](v63, 0);
            }
          }
          else if (CFStringHasSuffix(a6, CFSTR("Count")))
          {
            NL::NumericConverter::numericValueForTypeWithValues(*((NL::ParserContext ***)v14 + 3), a5, a7, &v149);
            v150 = v149;
            v149 = 0uLL;
            std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&v149);
            if ((_QWORD)v150)
            {
              v68 = (std::string *)operator new();
              nlp::getUTF8StringFromCFString(a5, &v141);
              nlp::getUTF8StringFromCFString(v16, &v139);
              NL::Entity::Entity(v68, &v141, &v139, v97.location, v97.length);
              std::unique_ptr<NL::Entity>::reset[abi:ne180100](v170, (NL::Entity *)v68);
              if (v140 < 0)
                operator delete((void *)v139);
              if (v142 < 0)
                operator delete((void *)v141);
              v69 = v170[0];
              v138 = v150;
              if (*((_QWORD *)&v150 + 1))
              {
                v70 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
                do
                  v71 = __ldxr(v70);
                while (__stxr(v71 + 1, v70));
              }
              std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)v69 + 18, (uint64_t *)&v138);
              std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&v138);
              v72 = v170[0];
              *((_DWORD *)v170[0] + 28) = 2;
              v170[0] = 0;
              v137 = v72;
              (*(void (**)(uint64_t, NL::Entity **))(v24 + 16))(v24, &v137);
              v63 = &v137;
              goto LABEL_119;
            }
          }
          else if (CFStringHasSuffix(a6, CFSTR("CalendarTime")) || CFStringHasSuffix(a6, CFSTR("FormattedTime")))
          {
            NL::DateConverter::datePeriodForValues(*((_QWORD *)v14 + 2), a6, a7, (uint64_t *)&v149);
            *(_QWORD *)&v150 = v149;
            if ((_QWORD)v149)
            {
              v73 = (_QWORD *)operator new();
              v74 = v149;
              *v73 = &unk_1E45CF118;
              v73[1] = 0;
              v73[2] = 0;
              v73[3] = v74;
            }
            else
            {
              v73 = 0;
            }
            *((_QWORD *)&v150 + 1) = v73;
            *(_QWORD *)&v149 = 0;
            std::unique_ptr<NL::DatePeriod>::reset[abi:ne180100]((const void ***)&v149, 0);
            if ((_QWORD)v150)
            {
              v75 = (std::string *)operator new();
              nlp::getUTF8StringFromCFString(a5, &v135);
              nlp::getUTF8StringFromCFString(v16, &v133);
              NL::Entity::Entity(v75, &v135, &v133, v97.location, v97.length);
              std::unique_ptr<NL::Entity>::reset[abi:ne180100](v170, (NL::Entity *)v75);
              if (v134 < 0)
                operator delete((void *)v133);
              if (v136 < 0)
                operator delete((void *)v135);
              v76 = v170[0];
              v132 = v150;
              if (*((_QWORD *)&v150 + 1))
              {
                v77 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
                do
                  v78 = __ldxr(v77);
                while (__stxr(v78 + 1, v77));
              }
              std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)v76 + 16, (uint64_t *)&v132);
              std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&v132);
              v79 = v170[0];
              *((_DWORD *)v170[0] + 28) = 1;
              v170[0] = 0;
              v131 = v79;
              (*(void (**)(uint64_t, NL::Entity **))(v24 + 16))(v24, &v131);
              std::unique_ptr<NL::Entity>::reset[abi:ne180100](&v131, 0);
            }
          }
          else
          {
            if (!CFStringHasSuffix(a6, CFSTR("Date")) && !CFStringHasSuffix(a6, CFSTR("Time")))
            {
              v89 = (std::string *)operator new();
              nlp::getUTF8StringFromCFString(a5, &v118);
              nlp::getUTF8StringFromCFString(v96, &v116);
              NL::Entity::Entity(v89, &v118, &v116, v97.location, v97.length);
              std::unique_ptr<NL::Entity>::reset[abi:ne180100](v170, (NL::Entity *)v89);
              if (v117 < 0)
                operator delete((void *)v116);
              if (v119 < 0)
                operator delete((void *)v118);
              NL::Entity::setValues(v170[0], a7);
              v90 = v95;
              v91 = v170[0];
              *((_DWORD *)v170[0] + 28) = v93;
              v170[0] = 0;
              v115 = v91;
              (*(void (**)(uint64_t, NL::Entity **))(v90 + 16))(v90, &v115);
              std::unique_ptr<NL::Entity>::reset[abi:ne180100](&v115, 0);
              v16 = v96;
              goto LABEL_40;
            }
            NL::DateConverter::datePeriodForValues(*((_QWORD *)v14 + 2), a6, a7, (uint64_t *)&v149);
            *(_QWORD *)&v150 = v149;
            if ((_QWORD)v149)
            {
              v80 = (_QWORD *)operator new();
              v81 = v149;
              *v80 = &unk_1E45CF118;
              v80[1] = 0;
              v80[2] = 0;
              v80[3] = v81;
            }
            else
            {
              v80 = 0;
            }
            *((_QWORD *)&v150 + 1) = v80;
            *(_QWORD *)&v149 = 0;
            std::unique_ptr<NL::DatePeriod>::reset[abi:ne180100]((const void ***)&v149, 0);
            if ((_QWORD)v150)
            {
              v82 = (std::string *)operator new();
              nlp::getUTF8StringFromCFString(a5, &v129);
              nlp::getUTF8StringFromCFString(v96, &v127);
              NL::Entity::Entity(v82, &v129, &v127, v97.location, v97.length);
              std::unique_ptr<NL::Entity>::reset[abi:ne180100](v170, (NL::Entity *)v82);
              if (v128 < 0)
                operator delete((void *)v127);
              if (v130 < 0)
                operator delete((void *)v129);
              v83 = v170[0];
              v126 = v150;
              if (*((_QWORD *)&v150 + 1))
              {
                v84 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
                do
                  v85 = __ldxr(v84);
                while (__stxr(v85 + 1, v84));
              }
              std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)v83 + 16, (uint64_t *)&v126);
              std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&v126);
              v86 = v170[0];
              *((_DWORD *)v170[0] + 28) = 1;
              v170[0] = 0;
              v125 = v86;
              (*(void (**)(uint64_t, NL::Entity **))(v95 + 16))(v95, &v125);
              std::unique_ptr<NL::Entity>::reset[abi:ne180100](&v125, 0);
              v87 = (std::string *)operator new();
              std::string::basic_string[abi:ne180100]<0>(&v123, "Text");
              nlp::getUTF8StringFromCFString(v96, &v121);
              NL::Entity::Entity(v87, &v123, &v121, v97.location, v97.length);
              std::unique_ptr<NL::Entity>::reset[abi:ne180100](v170, (NL::Entity *)v87);
              if (v122 < 0)
                operator delete((void *)v121);
              if (v124 < 0)
                operator delete((void *)v123);
              v88 = v170[0];
              *((_DWORD *)v170[0] + 28) = 7;
              v170[0] = 0;
              v120 = v88;
              (*(void (**)(uint64_t, NL::Entity **))(v95 + 16))(v95, &v120);
              std::unique_ptr<NL::Entity>::reset[abi:ne180100](&v120, 0);
              v16 = v96;
            }
          }
          std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&v150);
          goto LABEL_40;
        }
      }
    }
  }
  return result;
}

void sub_1A1896AAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::unique_ptr<NL::Entity>::reset[abi:ne180100]((NL::Entity **)(v1 + 240), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v2 - 120), 0);
  std::unique_ptr<NL::Entity>::reset[abi:ne180100]((NL::Entity **)(v2 - 112), 0);
  _Unwind_Resume(a1);
}

void NL::Entity::setValues(NL::Entity *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 15);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 15) = 0;
  }
  if (cf)
    *((_QWORD *)this + 15) = CFRetain(cf);
}

void NL::EntityConverter::enumerateEntitiesWithString(uint64_t a1, const __CFString *a2, const __CFString *a3, CFIndex a4, CFIndex a5, std::string::size_type a6, std::string::size_type a7, uint64_t a8)
{
  const __CFCharacterSet *Predefined;
  CFIndex Length;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v20;
  CFStringRef v21;
  const __CFString *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFMutableStringRef v27;
  NL::Entity *v28;
  uint64_t v29;
  NL::Entity *v30;
  uint64_t v31;
  _BOOL4 v32;
  _BOOL4 v33;
  uint64_t v34;
  NL::Entity *v35;
  uint64_t v36;
  _BOOL4 v37;
  NL::Entity *v39;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;
  NL::Entity *v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  NL::Entity *v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  void *v54[2];
  char v55;
  NL::Entity *v56;
  void *__p[2];
  char v58;
  __int128 v59;
  char v60;
  NL::Entity *v61;
  std::string __str;
  __int128 v63;
  char v64;
  __int128 v65;
  char v66;
  CFStringRef v67;
  CFRange result;
  uint64_t v69;
  CFRange v70;
  CFRange v71;

  if (a2 && a4 != -1)
  {
    v69 = 0;
    result = (CFRange)xmmword_1A18D3A50;
    Predefined = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
    v70.location = a4;
    v70.length = a5;
    CFStringFindCharacterFromSet(a2, Predefined, v70, 0, &result);
    Length = CFStringGetLength(a2);
    if (a3)
    {
      v17 = CFStringHasPrefix(a3, CFSTR("QuotedText")) != 0;
      v18 = CFStringHasPrefix(a3, CFSTR("Keyword")) != 0;
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    if (result.location == -1)
    {
      v37 = 0;
    }
    else
    {
      v20 = result.location == a4 && result.length == a5;
      v37 = v20;
    }
    if (!v17)
    {
      a6 = a4;
      a7 = a5;
    }
    v71.location = a4;
    v71.length = a5;
    v21 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, v71);
    v22 = v21;
    v23 = !v37;
    if (a3)
      v23 = 0;
    v67 = v21;
    if ((v23 | (v17 || v18)) == 1)
    {
      v24 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v25 = NL::ParserContext::index(*(NL::ParserContext **)a1);
      if (lookslikeProperName(v22, v24, v25, a4 + a5 < Length))
      {
        v26 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v65, "Contact");
        nlp::getUTF8StringFromCFString(v22, &v63);
        NL::Entity::Entity((std::string *)v26, &v65, &v63, a6, a7);
        v69 = v26;
        if (v64 < 0)
          operator delete((void *)v63);
        if (v66 < 0)
          operator delete((void *)v65);
        if (*(_BYTE *)(*(_QWORD *)a1 + 65))
        {
          v27 = NL::Transcriber::copyTranscription(*(CFStringTokenizerRef **)(a1 + 32), v22);
          v50[0] = v27;
          nlp::getUTF8StringFromCFString(v27, &__str);
          std::string::operator=((std::string *)(v26 + 48), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (v27)
            CFRelease(v27);
        }
        if (v17)
          *(_DWORD *)(v26 + 112) = 5;
        v69 = 0;
        v61 = (NL::Entity *)v26;
        (*(void (**)(uint64_t, NL::Entity **))(a8 + 16))(a8, &v61);
        v28 = v61;
        v61 = 0;
        if (v28)
        {
          NL::Entity::~Entity(v28);
          MEMORY[0x1A1B0E068]();
        }
        v29 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v59, "NameText");
        nlp::getUTF8StringFromCFString(v22, __p);
        NL::Entity::Entity((std::string *)v29, &v59, (__int128 *)__p, a6, a7);
        if (v58 < 0)
          operator delete(__p[0]);
        if (v60 < 0)
          operator delete((void *)v59);
        if (v17)
          *(_DWORD *)(v29 + 112) = 5;
        v69 = 0;
        v56 = (NL::Entity *)v29;
        (*(void (**)(uint64_t, NL::Entity **))(a8 + 16))(a8, &v56);
        v30 = v56;
        v56 = 0;
        if (v30)
        {
          NL::Entity::~Entity(v30);
          MEMORY[0x1A1B0E068]();
        }
      }
      if ((*(_DWORD *)(*(_QWORD *)a1 + 40) - 7) <= 1 && v22 && *(_QWORD *)(*(_QWORD *)a1 + 8))
        CFStringGetLength(v22);
    }
    if (!a3)
    {
      if (v37)
      {
        v34 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v47, "Punct");
        nlp::getUTF8StringFromCFString(v22, v45);
        NL::Entity::Entity((std::string *)v34, (__int128 *)v47, (__int128 *)v45, a6, a7);
        if (v46 < 0)
          operator delete(v45[0]);
        if (v48 < 0)
          operator delete(v47[0]);
        *(_DWORD *)(v34 + 112) = 4;
        v69 = 0;
        v44 = (NL::Entity *)v34;
        (*(void (**)(uint64_t, NL::Entity **))(a8 + 16))(a8, &v44);
        v35 = v44;
        v44 = 0;
        if (!v35)
          goto LABEL_67;
      }
      else
      {
        v36 = operator new();
        std::string::basic_string[abi:ne180100]<0>(v42, "Text");
        nlp::getUTF8StringFromCFString(v22, v40);
        NL::Entity::Entity((std::string *)v36, (__int128 *)v42, (__int128 *)v40, a6, a7);
        if (v41 < 0)
          operator delete(v40[0]);
        if (v43 < 0)
          operator delete(v42[0]);
        *(_DWORD *)(v36 + 112) = 7;
        v69 = 0;
        v39 = (NL::Entity *)v36;
        (*(void (**)(uint64_t, NL::Entity **))(a8 + 16))(a8, &v39);
        v35 = v39;
        v39 = 0;
        if (!v35)
          goto LABEL_67;
      }
LABEL_66:
      NL::Entity::~Entity(v35);
      MEMORY[0x1A1B0E068]();
LABEL_67:
      if (v22)
        CFRelease(v22);
      return;
    }
    v31 = operator new();
    getUTF8StringFromCFString(a3, v54);
    nlp::getUTF8StringFromCFString(v22, v52);
    NL::Entity::Entity((std::string *)v31, (__int128 *)v54, (__int128 *)v52, a6, a7);
    v69 = v31;
    if (v53 < 0)
      operator delete(v52[0]);
    if (v55 < 0)
      operator delete(v54[0]);
    std::string::basic_string[abi:ne180100]<0>(v50, "Text");
    v32 = endswith((uint64_t *)v31, (uint64_t *)v50);
    v33 = v32;
    if (v51 < 0)
    {
      operator delete(v50[0]);
      if (v33)
      {
LABEL_53:
        *(_DWORD *)(v31 + 112) = 7;
        if (!v17)
        {
LABEL_65:
          v69 = 0;
          v49 = (NL::Entity *)v31;
          (*(void (**)(uint64_t, NL::Entity **))(a8 + 16))(a8, &v49);
          v35 = v49;
          v49 = 0;
          if (!v35)
            goto LABEL_67;
          goto LABEL_66;
        }
LABEL_64:
        *(_DWORD *)(v31 + 112) = 5;
        goto LABEL_65;
      }
    }
    else if (v32)
    {
      goto LABEL_53;
    }
    if (!v17)
      goto LABEL_65;
    goto LABEL_64;
  }
}

void sub_1A1897510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  if (*(char *)(v62 - 169) < 0)
    operator delete(*(void **)(v62 - 192));
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a38, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v62 - 120), 0);
  std::unique_ptr<NL::Entity>::reset[abi:ne180100]((NL::Entity **)(v62 - 96), 0);
  _Unwind_Resume(a1);
}

void NL::EntityConverter::merge(uint64_t a1, NL::Entity *a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  NL::DateConverter *v24;
  const NL::DatePeriod *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  const NL::DatePeriod *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  const void **v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  NL::Entity *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  NL::Entity *v45;
  NL::Entity *v46;
  NL::Entity **v47;
  NL::Entity **v48;
  NL::Entity *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD v53[2];
  NL::Entity *(*v54)(uint64_t, NL::Entity *);
  void *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  NL::Entity *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  const NL::DatePeriod *v65;
  std::__shared_weak_count *v66;
  const NL::DatePeriod *v67;
  std::__shared_weak_count *v68;
  NL::DatePeriod *v69;
  NL::Entity *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  __n128 (*v74)(uint64_t, uint64_t);
  uint64_t (*v75)(uint64_t);
  uint64_t v76;
  std::__shared_weak_count *v77;

  v12 = *((_QWORD *)a2 + 16);
  v13 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (v12)
  {
    v16 = *(_QWORD *)(a4 + 128);
    v17 = *(std::__shared_weak_count **)(a4 + 136);
    if (!v17)
    {
      v20 = v16 == 0;
      if (!v13)
        goto LABEL_20;
      goto LABEL_15;
    }
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v20 = v16 == 0;
    do
      v21 = __ldaxr(v18);
    while (__stlxr(v21 - 1, v18));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if (!v13)
        goto LABEL_20;
      goto LABEL_15;
    }
  }
  else
  {
    v20 = 1;
  }
  if (!v13)
    goto LABEL_20;
LABEL_15:
  v22 = (unint64_t *)&v13->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_20:
  if (!v20)
  {
    v71 = 0;
    v72 = &v71;
    v73 = 0x3802000000;
    v74 = __Block_byref_object_copy__11;
    v75 = __Block_byref_object_dispose__11;
    v76 = 0;
    v77 = 0;
    NL::Entity::entityTemplate(a2, (std::string **)&v70);
    v24 = *(NL::DateConverter **)(a1 + 16);
    v25 = (const NL::DatePeriod *)*((_QWORD *)a2 + 16);
    v26 = (std::__shared_weak_count *)*((_QWORD *)a2 + 17);
    v67 = v25;
    v68 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = *(const NL::DatePeriod **)(a4 + 128);
    v30 = *(std::__shared_weak_count **)(a4 + 136);
    v65 = v29;
    v66 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    NL::DateConverter::mergeRange(v24, v25, v29, a3, a5, 0, (uint64_t *)&v69);
    std::shared_ptr<NL::DatePeriod>::operator=[abi:ne180100]<NL::DatePeriod,std::default_delete<NL::DatePeriod>,void>(v72 + 5, (uint64_t *)&v69);
    v33 = (const void **)v69;
    v69 = 0;
    if (v33)
    {
      NL::DatePeriod::~DatePeriod(v33);
      MEMORY[0x1A1B0E068]();
    }
    if (v30)
    {
      v34 = (unint64_t *)&v30->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (v68)
    {
      v36 = &v68->__shared_owners_;
      do
        v37 = __ldaxr((unint64_t *)v36);
      while (__stlxr(v37 - 1, (unint64_t *)v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if (v72[5])
    {
      v38 = v70;
      v39 = (std::__shared_weak_count *)v72[6];
      v63 = v72[5];
      v64 = v39;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)v38 + 16, &v63);
      v42 = v64;
      if (v64)
      {
        v43 = (unint64_t *)&v64->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = v70;
      v70 = 0;
      v62 = v45;
      (*(void (**)(uint64_t, NL::Entity **))(a6 + 16))(a6, &v62);
      v46 = v62;
      v62 = 0;
      if (v46)
      {
        NL::Entity::~Entity(v46);
        MEMORY[0x1A1B0E068]();
      }
      v53[0] = MEMORY[0x1E0C809B0];
      v53[1] = 0x40000000;
      v54 = ___ZN2NL15EntityConverter5mergeERKNS_6EntityEjS3_jU13block_pointerFvNSt3__110unique_ptrIS1_NS4_14default_deleteIS1_EEEEE_block_invoke;
      v55 = &unk_1E45D00C8;
      v58 = a1;
      v59 = a4;
      v60 = a3;
      v61 = a5;
      v56 = a6;
      v57 = &v71;
      v47 = (NL::Entity **)*((_QWORD *)a2 + 20);
      v48 = (NL::Entity **)*((_QWORD *)a2 + 21);
      while (v47 != v48)
      {
        v54((uint64_t)v53, *v47);
        v47 += 2;
      }
    }
    v49 = v70;
    v70 = 0;
    if (v49)
    {
      NL::Entity::~Entity(v49);
      MEMORY[0x1A1B0E068]();
    }
    _Block_object_dispose(&v71, 8);
    v50 = v77;
    if (v77)
    {
      v51 = (unint64_t *)&v77->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
}

void sub_1A1897AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, NL::Entity *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,NL::Entity *a27)
{
  uint64_t v27;
  uint64_t v28;

  std::unique_ptr<NL::Entity>::reset[abi:ne180100](&a19, 0);
  std::unique_ptr<NL::Entity>::reset[abi:ne180100](&a27, 0);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v27 + 40);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__11(uint64_t a1)
{
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 40);
}

void NL::Entity::entityTemplate(NL::Entity *this@<X0>, std::string **a2@<X8>)
{
  std::string *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::string *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string *v18;
  std::string __p;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = (std::string *)operator new();
  if (*((char *)this + 23) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  else
    v26 = *(std::string *)this;
  if (*((char *)this + 47) < 0)
    std::string::__init_copy_ctor_external(&v25, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  else
    v25 = *(std::string *)((_BYTE *)this + 1);
  if (*((char *)this + 95) < 0)
    std::string::__init_copy_ctor_external(&v24, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  else
    v24 = *(std::string *)((_BYTE *)this + 3);
  NL::Entity::Entity(v4, (__int128 *)&v26, (__int128 *)&v25, (__int128 *)&v24, *((_QWORD *)this + 12), *((_QWORD *)this + 13));
  *a2 = v4;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  v22 = *((_QWORD *)this + 16);
  v23 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](&v4[5].__r_.__value_.__l.__size_, &v22);
  v8 = v23;
  if (v23)
  {
    v9 = (unint64_t *)&v23->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  v20 = *((_QWORD *)this + 18);
  v21 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](v11[6].__r_.__value_.__r.__words, &v20);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *a2;
  LODWORD((*a2)[4].__r_.__value_.__r.__words[2]) = *((_DWORD *)this + 28);
  if (*((char *)this + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  else
    __p = *(std::string *)((_BYTE *)this + 2);
  std::string::operator=(v18 + 2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  NL::Entity::setValues((NL::Entity *)v18, *((CFTypeRef *)this + 15));
}

void sub_1A1897DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  MEMORY[0x1A1B0E068](v32, 0x1072C4084E83484);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<NL::DatePeriod>::operator=[abi:ne180100]<NL::DatePeriod,std::default_delete<NL::DatePeriod>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E45CF118;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1A189816C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  std::unique_ptr<NL::Entity>::reset[abi:ne180100]((NL::Entity **)va, 0);
  std::unique_ptr<NL::Entity>::reset[abi:ne180100]((NL::Entity **)(v10 - 40), 0);
  _Unwind_Resume(a1);
}

void sub_1A18983DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<NL::Entity>::reset[abi:ne180100]((NL::Entity **)va, 0);
  std::unique_ptr<NL::Entity>::reset[abi:ne180100]((NL::Entity **)(v2 - 40), 0);
  _Unwind_Resume(a1);
}

dispatch_queue_t ___ZL20getDynamicNamesQueuev_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.NLP.DynamicNames", 0);
  getDynamicNamesQueue(void)::dynamicNamesQueue = (uint64_t)result;
  return result;
}

void ___ZL14getProperNamesv_block_invoke(nlp *a1)
{
  uint64_t v1;

  nlp::BurstTrieCreateMutable(a1);
  getProperNames(void)::propernames = v1;
}

uint64_t CoreSpotlightLibrary(void)
{
  uint64_t v0;
  void *v2;

  if (!CoreSpotlightLibraryCore(char **)::frameworkLibrary)
    CoreSpotlightLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = CoreSpotlightLibraryCore(char **)::frameworkLibrary;
  if (!CoreSpotlightLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

std::string *NL::Entity::Entity(std::string *this, __int128 *a2, __int128 *a3, std::string::size_type a4, std::string::size_type a5)
{
  __int128 v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v10;
  }
  std::string::basic_string[abi:ne180100]<0>(this[2].__r_.__value_.__r.__words, "");
  std::string::basic_string[abi:ne180100]<0>(this[3].__r_.__value_.__r.__words, "");
  this[4].__r_.__value_.__r.__words[0] = a4;
  this[4].__r_.__value_.__l.__size_ = a5;
  LODWORD(this[4].__r_.__value_.__r.__words[2]) = 0;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = 0u;
  return this;
}

void sub_1A18985F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *NL::Entity::Entity(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, std::string::size_type a5, std::string::size_type a6)
{
  __int128 v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v12 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v12;
  }
  std::string::basic_string[abi:ne180100]<0>(this[2].__r_.__value_.__r.__words, "");
  v13 = this + 3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v14 = *a4;
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  this[4].__r_.__value_.__r.__words[0] = a5;
  this[4].__r_.__value_.__l.__size_ = a6;
  LODWORD(this[4].__r_.__value_.__r.__words[2]) = 0;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = 0u;
  return this;
}

void sub_1A1898730(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void nlp::CFScopedPtr<void const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void std::__function::__func<void({block_pointer})(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void({block_pointer})(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::~__func()
{
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__function::__func<void({block_pointer})(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void({block_pointer})(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::__clone()
{
  return 0;
}

void *std::__function::__func<void({block_pointer})(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void({block_pointer})(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &unk_1E45CE728;
  result = *(void **)(a1 + 8);
  if (result)
    result = _Block_copy(result);
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer})(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void({block_pointer})(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::destroy(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t std::__function::__func<void({block_pointer})(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void({block_pointer})(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer})(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void({block_pointer})(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void({block_pointer})(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void({block_pointer})(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::target_type()
{
}

void std::__shared_ptr_pointer<NL::DatePeriod  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

const void **std::__shared_ptr_pointer<NL::DatePeriod  *>::__on_zero_shared(uint64_t a1)
{
  const void **result;

  result = *(const void ***)(a1 + 24);
  if (result)
  {
    NL::DatePeriod::~DatePeriod(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<NL::DatePeriod  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

uint64_t NLAbstractIntentRecognizer::NLAbstractIntentRecognizer(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  *(_QWORD *)a1 = off_1E45CDE28;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  NLTokenizerWithDataDetector::NLTokenizerWithDataDetector((NLTokenizerWithDataDetector *)(a1 + 72));
  return a1;
}

void sub_1A18989B8(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 56) = v6;
    operator delete(v6);
  }
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void NLAbstractIntentRecognizer::~NLAbstractIntentRecognizer(NLAbstractIntentRecognizer *this)
{
  void *v2;

  *(_QWORD *)this = off_1E45CDE28;
  if (*((_QWORD *)this + 4))
    MRLModelRelease();
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

NL::SpotlightUserContext *NL::SpotlightUserContext::SpotlightUserContext(NL::SpotlightUserContext *this)
{
  CFMutableSetRef Mutable;

  *(_QWORD *)this = getuid();
  *((_QWORD *)this + 1) = 0;
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  nlp::CFScopedPtr<__CFSet *>::reset((const void **)this + 1, Mutable);
  return this;
}

void sub_1A1898AA8(_Unwind_Exception *a1)
{
  const void **v1;

  nlp::CFScopedPtr<__CFSet *>::reset(v1, 0);
  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<__CFSet *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void NL::SpotlightUserContext::~SpotlightUserContext(const void **this)
{
  nlp::CFScopedPtr<__CFSet *>::reset(this + 1, 0);
}

uint64_t NL::SpotlightUserContext::copyUserNames(NL::SpotlightUserContext *this)
{
  return 0;
}

void NLUrduTransliterator::NLUrduTransliterator(NLUrduTransliterator *this, const __CFDictionary *a2)
{
  char *v4;
  NLAbstractTransMappings *v5;
  __CFDictionary *Mutable;
  NLUrduWordLanguageModeler *v7;
  NLUrduCharLanguageModeler *v8;
  _QWORD *v9;
  NLAbstractDictionaryLookup *v10;
  NLAbstractDictionaryLookup *v11;
  _QWORD *v12;
  uint64_t v13[5];

  *((_OWORD *)this + 5) = 0u;
  v4 = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = xmmword_1A18D4870;
  *((_DWORD *)this + 34) = 2;
  *((_QWORD *)this + 18) = 0xC03E000000000000;
  *((_QWORD *)this + 19) = 0x3E800000005;
  *((_DWORD *)this + 40) = 3;
  *((_QWORD *)this + 21) = 0x3FF3333333333333;
  *(_QWORD *)this = &off_1E45CD408;
  *((_QWORD *)this + 22) = 0x1F40000000ALL;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 184), "[\",,;.\"'?!:{}<>*\\-]",
    0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 248), "([bcdfghjklmnpqrstvwxyzi])([ywv])(a)$", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)this + 13, "(tr|dr)(a)$", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 376), "(r)([iu])", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 440), "aa[a]+", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)this + 21, "([bcdfghjklmnpqrstvwxyz]|^)(eh|ehe)", 0);
  v5 = (NLAbstractTransMappings *)operator new();
  NLAbstractTransMappings::NLAbstractTransMappings(v5, a2);
  *((_QWORD *)this + 1) = v5;
  (*(void (**)(uint64_t *__return_ptr, NLUrduTransliterator *))(*(_QWORD *)this + 120))(v13, this);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)v4, v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v13);
  Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
  CFDictionarySetValue(Mutable, CFSTR("useLanguageModel"), (const void *)*MEMORY[0x1E0C9AE40]);
  v7 = (NLUrduWordLanguageModeler *)operator new();
  NLUrduWordLanguageModeler::NLUrduWordLanguageModeler(v7, Mutable);
  *((_QWORD *)this + 2) = v7;
  CFRelease(Mutable);
  *((_QWORD *)this + 3) = 0;
  v8 = (NLUrduCharLanguageModeler *)operator new();
  NLUrduCharLanguageModeler::NLUrduCharLanguageModeler(v8, a2);
  *((_QWORD *)this + 5) = v8;
  v9 = (_QWORD *)operator new();
  *v9 = &unk_1E45CE0A0;
  *((_QWORD *)this + 6) = v9;
  v10 = (NLAbstractDictionaryLookup *)operator new();
  NLAbstractDictionaryLookup::NLAbstractDictionaryLookup(v10);
  *((_QWORD *)this + 7) = v10;
  v11 = (NLAbstractDictionaryLookup *)operator new();
  NLAbstractDictionaryLookup::NLAbstractDictionaryLookup(v11);
  *((_QWORD *)this + 8) = v11;
  v12 = (_QWORD *)operator new();
  *v12 = &unk_1E45CE388;
  *((_QWORD *)this + 9) = v12;
}

void sub_1A1898DF0(_Unwind_Exception *a1)
{
  NLGenericTransliterator *v1;
  std::locale *v2;
  std::locale *v3;
  std::locale *v4;
  std::locale *v5;
  std::locale *v6;
  std::locale *v7;
  uint64_t v8;

  MEMORY[0x1A1B0E068](v8, 0xE1C40D30581F4);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 544);
  std::locale::~locale(v7);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 480);
  std::locale::~locale(v6);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 416);
  std::locale::~locale(v5);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 352);
  std::locale::~locale(v4);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 288);
  std::locale::~locale(v3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 224);
  std::locale::~locale(v2);
  NLGenericTransliterator::~NLGenericTransliterator(v1);
  _Unwind_Resume(a1);
}

void NLUrduTransliterator::addDynamicMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  void *v19;
  char *v20;
  _BOOL4 v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36[2];
  char v37;
  std::vector<std::ssub_match> v38[2];
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  std::match_results<const char *> __p;

  v2 = a2;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  memset(v38, 0, 41);
  v4 = a1 + 376;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 32);
  v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = *(_QWORD *)(a2 + 8);
  if ((v5 & 0x80u) != 0)
  {
    a2 = *(_QWORD *)a2;
    v5 = v6;
  }
  *(std::pair<const char *, const char *> *)((char *)&__p.__unmatched_.std::pair<const char *, const char *> + 1) = 0uLL;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v4, (char *)a2, (char *)(a2 + v5), &__p, 0);
  v8 = *(unsigned __int8 *)(v2 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = v2;
  else
    v9 = *(_QWORD *)v2;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(v2 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v38, v9, (std::sub_match<std::__wrap_iter<const char *>> *)(v9 + v8), (uint64_t *)&__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (v7)
  {
    v10 = *(_BYTE *)(v2 + 23);
    if (v10 >= 0)
      v11 = *(unsigned __int8 *)(v2 + 23);
    else
      v11 = *(_QWORD *)(v2 + 8);
    if (v10 >= 0)
      v12 = (char *)v2;
    else
      v12 = *(char **)v2;
    v13 = &v12[v11];
    v14 = &v12[v11];
    if (v11 > 4)
    {
      v15 = v11;
      v16 = v12;
      do
      {
        v17 = (char *)memchr(v16, 112, v15 - 4);
        if (!v17)
          break;
        v14 = v17;
        if (*(_DWORD *)v17 == 1953067632 && v17[4] == 104)
          goto LABEL_26;
        v16 = v17 + 1;
        v15 = v13 - (v14 + 1);
      }
      while (v15 > 4);
      v14 = &v12[v11];
    }
LABEL_26:
    if (v11 >= 4)
    {
      v19 = v12;
      do
      {
        v20 = (char *)memchr(v19, 103, v11 - 3);
        if (!v20)
          break;
        if (*(_DWORD *)v20 == 1751741031)
          goto LABEL_32;
        v19 = v20 + 1;
        v11 = v13 - (_BYTE *)v19;
      }
      while (v13 - (_BYTE *)v19 > 3);
    }
    v20 = v13;
LABEL_32:
    v22 = v20 != v13 && v20 - v12 != -1;
    v23 = v14 - v12 == -1 || v14 == v13;
    if (!v23 || v22)
    {
      std::string::basic_string[abi:ne180100]<0>(v36, "");
      NLExtendedString::NLExtendedString((std::string *)&__p, (__int128 *)v36, 2, 2, 1.0);
      if (v37 < 0)
        operator delete(v36[0]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v36, "");
      NLExtendedString::NLExtendedString((std::string *)&__p, (__int128 *)v36, 2, 2, 0.005);
      if (v37 < 0)
        operator delete(v36[0]);
    }
    v24 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v36, "i");
    (*(void (**)(uint64_t, void **, std::match_results<const char *> *))(*(_QWORD *)v24 + 16))(v24, v36, &__p);
    if (v37 < 0)
      operator delete(v36[0]);
    if (SHIBYTE(__p.__matches_.__end_cap_.__value_) < 0)
      operator delete(__p.__matches_.__begin_);
  }
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v25 = *(unsigned __int8 *)(v2 + 23);
  if ((v25 & 0x80u) == 0)
    v26 = (char *)v2;
  else
    v26 = *(char **)v2;
  if ((v25 & 0x80u) != 0)
    v25 = *(_QWORD *)(v2 + 8);
  v27 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 312, v26, &v26[v25], &__p, 0);
  v28 = *(unsigned __int8 *)(v2 + 23);
  if ((v28 & 0x80u) == 0)
    v29 = v2;
  else
    v29 = *(_QWORD *)v2;
  if ((v28 & 0x80u) != 0)
    v28 = *(_QWORD *)(v2 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v38, v29, (std::sub_match<std::__wrap_iter<const char *>> *)(v29 + v28), (uint64_t *)&__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if ((v27 & 1) != 0)
    goto LABEL_79;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v30 = *(unsigned __int8 *)(v2 + 23);
  if ((v30 & 0x80u) == 0)
    v31 = (char *)v2;
  else
    v31 = *(char **)v2;
  if ((v30 & 0x80u) != 0)
    v30 = *(_QWORD *)(v2 + 8);
  v32 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 248, v31, &v31[v30], &__p, 0);
  v33 = *(unsigned __int8 *)(v2 + 23);
  if ((v33 & 0x80u) == 0)
    v34 = v2;
  else
    v34 = *(_QWORD *)v2;
  if ((v33 & 0x80u) != 0)
    v33 = *(_QWORD *)(v2 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v38, v34, (std::sub_match<std::__wrap_iter<const char *>> *)(v34 + v33), (uint64_t *)&__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (v32)
  {
LABEL_79:
    std::string::basic_string[abi:ne180100]<0>(v36, "");
    NLExtendedString::NLExtendedString((std::string *)&__p, (__int128 *)v36, 3, 2, 0.1);
    if (v37 < 0)
      operator delete(v36[0]);
    v35 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v36, "a");
    (*(void (**)(uint64_t, void **, std::match_results<const char *> *))(*(_QWORD *)v35 + 16))(v35, v36, &__p);
    if (v37 < 0)
      operator delete(v36[0]);
    if (SHIBYTE(__p.__matches_.__end_cap_.__value_) < 0)
      operator delete(__p.__matches_.__begin_);
  }
  if (v38[0].__begin_)
  {
    v38[0].__end_ = v38[0].__begin_;
    operator delete(v38[0].__begin_);
  }
}

void sub_1A1899390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a15 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t NLUrduTransliterator::addSpecialCandidates(uint64_t a1, unsigned __int16 *a2, uint64_t *a3)
{
  int v5;
  unsigned __int16 *v6;
  _BOOL8 v7;
  int v8;
  std::string *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  std::string **v16;
  char *v17;
  char *v18;
  char *v19;
  std::string *v20;
  unint64_t v21;
  uint64_t v22;
  _WORD *v23;
  _WORD *v24;
  std::string *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  std::string **v32;
  char *v33;
  char *v34;
  char *v35;
  std::string *v36;
  unint64_t v37;
  uint64_t v38;
  _WORD *v39;
  std::string *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  std::string **v47;
  char *v48;
  char *v49;
  char *v50;
  std::string *v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  std::string *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  std::string **v62;
  char *v63;
  char *v64;
  char *v65;
  std::string *v66;
  unint64_t v67;
  uint64_t v68;
  std::string *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  std::string **v76;
  char *v77;
  char *v78;
  char *v79;
  std::string *v80;
  std::string *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  std::string **v88;
  char *v89;
  char *v90;
  char *v91;
  std::string *v92;
  unint64_t v93;
  uint64_t v94;
  void *v96[2];
  char v97;
  void *__p;
  char *v99;
  unint64_t v100;

  v5 = *((unsigned __int8 *)a2 + 23);
  if (*((char *)a2 + 23) < 0)
  {
    if (*((_QWORD *)a2 + 1) != 2)
    {
      v7 = 0;
      goto LABEL_36;
    }
    v6 = *(unsigned __int16 **)a2;
  }
  else
  {
    v6 = a2;
    if (v5 != 2)
    {
      v7 = 0;
LABEL_34:
      if (v5 != 2)
      {
LABEL_40:
        if (v5 != 2)
        {
LABEL_70:
          if (v5 != 2)
            goto LABEL_100;
          v39 = a2;
          goto LABEL_98;
        }
        v24 = a2;
        goto LABEL_68;
      }
      v23 = a2;
      goto LABEL_38;
    }
  }
  v8 = *v6;
  v7 = v8 == 25977;
  if (v8 == 25977)
  {
    __p = 0;
    v99 = 0;
    v100 = 0;
    v9 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v96, "یہ");
    NLTransliterationCandidate::NLTransliterationCandidate(v9, (__int128 *)a2, (__int128 *)v96, 0, 0, 1.0);
    v10 = v99;
    if ((unint64_t)v99 >= v100)
    {
      v12 = (v99 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v13 = (uint64_t)(v100 - (_QWORD)__p) >> 2;
      if (v13 <= v12 + 1)
        v13 = v12 + 1;
      if (v100 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v100, v14);
      else
        v15 = 0;
      v16 = (std::string **)&v15[8 * v12];
      v17 = &v15[8 * v14];
      *v16 = v9;
      v11 = (char *)(v16 + 1);
      v19 = (char *)__p;
      v18 = v99;
      if (v99 != __p)
      {
        do
        {
          v20 = (std::string *)*((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = (char *)__p;
      }
      __p = v16;
      v99 = v11;
      v100 = (unint64_t)v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *(_QWORD *)v99 = v9;
      v11 = v10 + 8;
    }
    v99 = v11;
    if (v97 < 0)
      operator delete(v96[0]);
    v21 = a3[1];
    if (v21 >= a3[2])
    {
      v22 = std::vector<std::vector<NLTransliterationCandidate *>>::__push_back_slow_path<std::vector<NLTransliterationCandidate *> const&>(a3, (uint64_t)&__p);
    }
    else
    {
      std::vector<std::vector<NLTransliterationCandidate *>>::__construct_one_at_end[abi:ne180100]<std::vector<NLTransliterationCandidate *> const&>((uint64_t)a3, (uint64_t)&__p);
      v22 = v21 + 24;
    }
    a3[1] = v22;
    if (__p)
    {
      v99 = (char *)__p;
      operator delete(__p);
    }
    v5 = *((unsigned __int8 *)a2 + 23);
    if ((v5 & 0x80) == 0)
      goto LABEL_34;
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_34;
  }
LABEL_36:
  if (*((_QWORD *)a2 + 1) != 2)
    goto LABEL_66;
  v23 = *(_WORD **)a2;
LABEL_38:
  if (*v23 == 28535)
  {
    __p = 0;
    v99 = 0;
    v100 = 0;
    v25 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v96, "وہ");
    NLTransliterationCandidate::NLTransliterationCandidate(v25, (__int128 *)a2, (__int128 *)v96, 0, 0, 2.0);
    v26 = v99;
    if ((unint64_t)v99 >= v100)
    {
      v28 = (v99 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v29 = (uint64_t)(v100 - (_QWORD)__p) >> 2;
      if (v29 <= v28 + 1)
        v29 = v28 + 1;
      if (v100 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v100, v30);
      else
        v31 = 0;
      v32 = (std::string **)&v31[8 * v28];
      v33 = &v31[8 * v30];
      *v32 = v25;
      v27 = (char *)(v32 + 1);
      v35 = (char *)__p;
      v34 = v99;
      if (v99 != __p)
      {
        do
        {
          v36 = (std::string *)*((_QWORD *)v34 - 1);
          v34 -= 8;
          *--v32 = v36;
        }
        while (v34 != v35);
        v34 = (char *)__p;
      }
      __p = v32;
      v99 = v27;
      v100 = (unint64_t)v33;
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_QWORD *)v99 = v25;
      v27 = v26 + 8;
    }
    v99 = v27;
    if (v97 < 0)
      operator delete(v96[0]);
    v37 = a3[1];
    if (v37 >= a3[2])
    {
      v38 = std::vector<std::vector<NLTransliterationCandidate *>>::__push_back_slow_path<std::vector<NLTransliterationCandidate *> const&>(a3, (uint64_t)&__p);
    }
    else
    {
      std::vector<std::vector<NLTransliterationCandidate *>>::__construct_one_at_end[abi:ne180100]<std::vector<NLTransliterationCandidate *> const&>((uint64_t)a3, (uint64_t)&__p);
      v38 = v37 + 24;
    }
    a3[1] = v38;
    if (__p)
    {
      v99 = (char *)__p;
      operator delete(__p);
    }
    v5 = *((unsigned __int8 *)a2 + 23);
    v7 = 1;
    if ((v5 & 0x80) == 0)
      goto LABEL_40;
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_40;
  }
LABEL_66:
  if (*((_QWORD *)a2 + 1) != 2)
    goto LABEL_96;
  v24 = *(_WORD **)a2;
LABEL_68:
  if (*v24 == 28534)
  {
    __p = 0;
    v99 = 0;
    v100 = 0;
    v40 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v96, "وہ");
    NLTransliterationCandidate::NLTransliterationCandidate(v40, (__int128 *)a2, (__int128 *)v96, 0, 0, 2.0);
    v41 = v99;
    if ((unint64_t)v99 >= v100)
    {
      v43 = (v99 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v43 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v44 = (uint64_t)(v100 - (_QWORD)__p) >> 2;
      if (v44 <= v43 + 1)
        v44 = v43 + 1;
      if (v100 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v45 = v44;
      if (v45)
        v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v100, v45);
      else
        v46 = 0;
      v47 = (std::string **)&v46[8 * v43];
      v48 = &v46[8 * v45];
      *v47 = v40;
      v42 = (char *)(v47 + 1);
      v50 = (char *)__p;
      v49 = v99;
      if (v99 != __p)
      {
        do
        {
          v51 = (std::string *)*((_QWORD *)v49 - 1);
          v49 -= 8;
          *--v47 = v51;
        }
        while (v49 != v50);
        v49 = (char *)__p;
      }
      __p = v47;
      v99 = v42;
      v100 = (unint64_t)v48;
      if (v49)
        operator delete(v49);
    }
    else
    {
      *(_QWORD *)v99 = v40;
      v42 = v41 + 8;
    }
    v99 = v42;
    if (v97 < 0)
      operator delete(v96[0]);
    v52 = a3[1];
    if (v52 >= a3[2])
    {
      v53 = std::vector<std::vector<NLTransliterationCandidate *>>::__push_back_slow_path<std::vector<NLTransliterationCandidate *> const&>(a3, (uint64_t)&__p);
    }
    else
    {
      std::vector<std::vector<NLTransliterationCandidate *>>::__construct_one_at_end[abi:ne180100]<std::vector<NLTransliterationCandidate *> const&>((uint64_t)a3, (uint64_t)&__p);
      v53 = v52 + 24;
    }
    a3[1] = v53;
    if (__p)
    {
      v99 = (char *)__p;
      operator delete(__p);
    }
    v5 = *((unsigned __int8 *)a2 + 23);
    v7 = 1;
    if ((v5 & 0x80) == 0)
      goto LABEL_70;
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_70;
  }
LABEL_96:
  if (*((_QWORD *)a2 + 1) != 2)
    goto LABEL_126;
  v39 = *(_WORD **)a2;
LABEL_98:
  if (*v39 == 26987)
  {
    __p = 0;
    v99 = 0;
    v100 = 0;
    v55 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v96, "کہ");
    NLTransliterationCandidate::NLTransliterationCandidate(v55, (__int128 *)a2, (__int128 *)v96, 0, 0, 2.0);
    v56 = v99;
    if ((unint64_t)v99 >= v100)
    {
      v58 = (v99 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v58 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v59 = (uint64_t)(v100 - (_QWORD)__p) >> 2;
      if (v59 <= v58 + 1)
        v59 = v58 + 1;
      if (v100 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v60 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v60 = v59;
      if (v60)
        v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v100, v60);
      else
        v61 = 0;
      v62 = (std::string **)&v61[8 * v58];
      v63 = &v61[8 * v60];
      *v62 = v55;
      v57 = (char *)(v62 + 1);
      v65 = (char *)__p;
      v64 = v99;
      if (v99 != __p)
      {
        do
        {
          v66 = (std::string *)*((_QWORD *)v64 - 1);
          v64 -= 8;
          *--v62 = v66;
        }
        while (v64 != v65);
        v64 = (char *)__p;
      }
      __p = v62;
      v99 = v57;
      v100 = (unint64_t)v63;
      if (v64)
        operator delete(v64);
    }
    else
    {
      *(_QWORD *)v99 = v55;
      v57 = v56 + 8;
    }
    v99 = v57;
    if (v97 < 0)
      operator delete(v96[0]);
    v67 = a3[1];
    if (v67 >= a3[2])
    {
      v68 = std::vector<std::vector<NLTransliterationCandidate *>>::__push_back_slow_path<std::vector<NLTransliterationCandidate *> const&>(a3, (uint64_t)&__p);
    }
    else
    {
      std::vector<std::vector<NLTransliterationCandidate *>>::__construct_one_at_end[abi:ne180100]<std::vector<NLTransliterationCandidate *> const&>((uint64_t)a3, (uint64_t)&__p);
      v68 = v67 + 24;
    }
    a3[1] = v68;
    if (__p)
    {
      v99 = (char *)__p;
      operator delete(__p);
    }
    v5 = *((unsigned __int8 *)a2 + 23);
    v7 = 1;
    if ((v5 & 0x80) == 0)
    {
LABEL_100:
      v54 = a2;
      if (v5 != 1)
        return v7;
      goto LABEL_128;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_100;
  }
LABEL_126:
  if (*((_QWORD *)a2 + 1) != 1)
    return v7;
  v54 = *(_BYTE **)a2;
LABEL_128:
  if (*v54 == 107)
  {
    __p = 0;
    v99 = 0;
    v100 = 0;
    v69 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v96, "کہ");
    NLTransliterationCandidate::NLTransliterationCandidate(v69, (__int128 *)a2, (__int128 *)v96, 0, 0, 2.0);
    v70 = v99;
    if ((unint64_t)v99 >= v100)
    {
      v72 = (v99 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v72 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v73 = (uint64_t)(v100 - (_QWORD)__p) >> 2;
      if (v73 <= v72 + 1)
        v73 = v72 + 1;
      if (v100 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v74 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v74 = v73;
      if (v74)
        v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v100, v74);
      else
        v75 = 0;
      v76 = (std::string **)&v75[8 * v72];
      v77 = &v75[8 * v74];
      *v76 = v69;
      v71 = (char *)(v76 + 1);
      v79 = (char *)__p;
      v78 = v99;
      if (v99 != __p)
      {
        do
        {
          v80 = (std::string *)*((_QWORD *)v78 - 1);
          v78 -= 8;
          *--v76 = v80;
        }
        while (v78 != v79);
        v78 = (char *)__p;
      }
      __p = v76;
      v99 = v71;
      v100 = (unint64_t)v77;
      if (v78)
        operator delete(v78);
    }
    else
    {
      *(_QWORD *)v99 = v69;
      v71 = v70 + 8;
    }
    v99 = v71;
    if (v97 < 0)
      operator delete(v96[0]);
    v81 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v96, "کے");
    NLTransliterationCandidate::NLTransliterationCandidate(v81, (__int128 *)a2, (__int128 *)v96, 0, 0, 2.0);
    v82 = v99;
    if ((unint64_t)v99 >= v100)
    {
      v84 = (v99 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v84 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v85 = (uint64_t)(v100 - (_QWORD)__p) >> 2;
      if (v85 <= v84 + 1)
        v85 = v84 + 1;
      if (v100 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v86 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v86 = v85;
      if (v86)
        v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v100, v86);
      else
        v87 = 0;
      v88 = (std::string **)&v87[8 * v84];
      v89 = &v87[8 * v86];
      *v88 = v81;
      v83 = (char *)(v88 + 1);
      v91 = (char *)__p;
      v90 = v99;
      if (v99 != __p)
      {
        do
        {
          v92 = (std::string *)*((_QWORD *)v90 - 1);
          v90 -= 8;
          *--v88 = v92;
        }
        while (v90 != v91);
        v90 = (char *)__p;
      }
      __p = v88;
      v99 = v83;
      v100 = (unint64_t)v89;
      if (v90)
        operator delete(v90);
    }
    else
    {
      *(_QWORD *)v99 = v81;
      v83 = v82 + 8;
    }
    v99 = v83;
    if (v97 < 0)
      operator delete(v96[0]);
    v93 = a3[1];
    if (v93 >= a3[2])
    {
      v94 = std::vector<std::vector<NLTransliterationCandidate *>>::__push_back_slow_path<std::vector<NLTransliterationCandidate *> const&>(a3, (uint64_t)&__p);
    }
    else
    {
      std::vector<std::vector<NLTransliterationCandidate *>>::__construct_one_at_end[abi:ne180100]<std::vector<NLTransliterationCandidate *> const&>((uint64_t)a3, (uint64_t)&__p);
      v94 = v93 + 24;
    }
    a3[1] = v94;
    if (__p)
    {
      v99 = (char *)__p;
      operator delete(__p);
    }
    return 1;
  }
  return v7;
}

void sub_1A1899DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL NLUrduTransliterator::isSpecialCharSeq(int a1, int a2, char *__s, int a4)
{
  uint64_t v5;
  size_t v6;
  int v7;

  if (a2 != 1)
    return 0;
  v5 = a4;
  v6 = a4 + 1;
  if (strlen(__s) <= v6 || __s[v5] != 97)
    return 0;
  v7 = __s[v6];
  return v7 == 104 || v7 == 121;
}

void NLUrduTransliterator::~NLUrduTransliterator(std::locale *this)
{
  std::locale *v2;
  std::locale *v3;

  this->__locale_ = (std::locale::__imp *)&off_1E45CD408;
  v2 = this + 28;
  v3 = this + 63;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[68]);
  std::locale::~locale(v3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[60]);
  std::locale::~locale(this + 55);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[52]);
  std::locale::~locale(this + 47);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[44]);
  std::locale::~locale(this + 39);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[36]);
  std::locale::~locale(this + 31);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::locale::~locale(this + 23);
  NLGenericTransliterator::~NLGenericTransliterator((NLGenericTransliterator *)this);
}

{
  std::locale *v2;
  std::locale *v3;

  this->__locale_ = (std::locale::__imp *)&off_1E45CD408;
  v2 = this + 28;
  v3 = this + 63;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[68]);
  std::locale::~locale(v3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[60]);
  std::locale::~locale(this + 55);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[52]);
  std::locale::~locale(this + 47);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[44]);
  std::locale::~locale(this + 39);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[36]);
  std::locale::~locale(this + 31);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::locale::~locale(this + 23);
  NLGenericTransliterator::~NLGenericTransliterator((NLGenericTransliterator *)this);
  JUMPOUT(0x1A1B0E068);
}

uint64_t _CFInit_TransliteratorWrapper(uint64_t result)
{
  *(_QWORD *)(result + 16) = &unk_1E45CD768;
  return result;
}

uint64_t createTransliteratorWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_TransliteratorWrapper)
  {
    qword_1EDBB1B28 = 0;
    unk_1EDBB1B38 = 0u;
    unk_1EDBB1B48 = 0u;
    g_CFTypeID_TransliteratorWrapper = _CFRuntimeRegisterClass();
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  *(_QWORD *)(result + 32) = a2;
  return result;
}

const __CFDictionary *NLTransliteratorCreate(const __CFDictionary *TransliteratorWrapper)
{
  __CFString *Value;
  const __CFString *v3;
  CFTypeID v4;
  const __CFLocale *v5;
  const __CFString *v6;
  const __CFString *v7;
  CFTypeID v8;
  const __CFLocale *v9;
  const __CFLocale *v10;
  void (*v11)(void);
  CFTypeID v12;
  const __CFLocale *v13;
  const __CFURL *v14;
  const __CFURL *v15;
  NLCompositeTransliterator *v16;
  CFTypeID v17;
  const __CFString *v18;
  NLGenericTransliterator *v19;
  uint64_t v20;
  NLHindiTransliterator *v21;
  NLGujaratiTransliterator *v22;
  NLUrduTransliterator *v23;

  if ((_os_feature_enabled_impl() & 1) != 0)
  {
    if (TransliteratorWrapper)
    {
      Value = (__CFString *)CFDictionaryGetValue(TransliteratorWrapper, kNLTransliteratorTargetLocaleKey[0]);
      if (Value)
      {
        v3 = Value;
        v4 = CFGetTypeID(Value);
        if (v4 == CFStringGetTypeID())
        {
          v5 = CFLocaleCreate(0, v3);
          goto LABEL_15;
        }
        v12 = CFGetTypeID(v3);
        Value = (__CFString *)CFLocaleGetTypeID();
        if ((__CFString *)v12 == Value)
        {
          v5 = (const __CFLocale *)CFRetain(v3);
LABEL_15:
          v13 = v5;
          v14 = (const __CFURL *)CFDictionaryGetValue(TransliteratorWrapper, (const void *)kNLTransliteratorBundleURLKey);
          if (v13)
          {
            v15 = v14;
            v16 = (NLCompositeTransliterator *)operator new();
            NLCompositeTransliterator::NLCompositeTransliterator(v16, v13, v15);
            TransliteratorWrapper = (const __CFDictionary *)createTransliteratorWrapper(0, (uint64_t)v16);
            CFRelease(v13);
            return TransliteratorWrapper;
          }
          return 0;
        }
      }
      goto LABEL_29;
    }
  }
  else
  {
    if (TransliteratorWrapper)
    {
      v6 = (const __CFString *)CFDictionaryGetValue(TransliteratorWrapper, kNLTransliteratorTargetLocaleKey[0]);
      if (!v6)
      {
        v11 = *(void (**)(void))(*(_QWORD *)NL::CFLogger::sharedInstance(0) + 16);
LABEL_30:
        v11();
        return 0;
      }
      v7 = v6;
      v8 = CFGetTypeID(v6);
      if (v8 == CFStringGetTypeID())
      {
        v9 = CFLocaleCreate(0, v7);
      }
      else
      {
        v17 = CFGetTypeID(v7);
        Value = (__CFString *)CFLocaleGetTypeID();
        if ((__CFString *)v17 != Value)
        {
LABEL_29:
          v11 = *(void (**)(void))(*(_QWORD *)NL::CFLogger::sharedInstance((NL::CFLogger *)Value) + 16);
          goto LABEL_30;
        }
        v9 = (const __CFLocale *)CFRetain(v7);
      }
      v10 = v9;
    }
    else
    {
      v10 = 0;
    }
    v18 = (const __CFString *)CFLocaleGetValue(v10, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
    if (CFStringCompare(v18, CFSTR("hi"), 0))
    {
      if (CFStringCompare(v18, CFSTR("gu"), 0))
      {
        if (CFStringCompare(v18, CFSTR("ur"), 0))
        {
          if (CFStringCompare(v18, CFSTR("ar"), 0))
          {
            v19 = (NLGenericTransliterator *)operator new();
            NLGenericTransliterator::NLGenericTransliterator(v19, TransliteratorWrapper);
          }
          else
          {
            v19 = (NLGenericTransliterator *)operator new();
            NLArabicTransliterator::NLArabicTransliterator(v19, TransliteratorWrapper);
          }
          v20 = createTransliteratorWrapper((uint64_t)v19, 0);
        }
        else
        {
          v23 = (NLUrduTransliterator *)operator new();
          NLUrduTransliterator::NLUrduTransliterator(v23, TransliteratorWrapper);
          v20 = createTransliteratorWrapper((uint64_t)v23, 0);
        }
      }
      else
      {
        v22 = (NLGujaratiTransliterator *)operator new();
        NLGujaratiTransliterator::NLGujaratiTransliterator(v22, TransliteratorWrapper);
        v20 = createTransliteratorWrapper((uint64_t)v22, 0);
      }
    }
    else
    {
      v21 = (NLHindiTransliterator *)operator new();
      NLHindiTransliterator::NLHindiTransliterator(v21, TransliteratorWrapper);
      v20 = createTransliteratorWrapper((uint64_t)v21, 0);
    }
    TransliteratorWrapper = (const __CFDictionary *)v20;
    if (v10)
      CFRelease(v10);
  }
  return TransliteratorWrapper;
}

#error "1A189A5E4: call analysis failed (funcsize=34)"

void sub_1A189A5F8()
{
  __cxa_end_catch();
  JUMPOUT(0x1A189A508);
}

CFIndex convertToVector@<X0>(CFIndex theArray@<X0>, void **a2@<X8>)
{
  const __CFArray *v2;
  CFIndex v4;
  uint64_t v5;
  NLTextSlot *ValueAtIndex;
  uint64_t ResolvedDate;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (theArray)
  {
    v2 = (const __CFArray *)theArray;
    v4 = 0;
    v5 = (uint64_t)(a2 + 2);
    while (1)
    {
      theArray = CFArrayGetCount(v2);
      if (theArray <= v4)
        break;
      ValueAtIndex = (NLTextSlot *)CFArrayGetValueAtIndex(v2, v4);
      ResolvedDate = NLTextSlot::getResolvedDate(ValueAtIndex);
      v8 = ResolvedDate;
      v10 = (uint64_t *)a2[1];
      v9 = (unint64_t)a2[2];
      if ((unint64_t)v10 >= v9)
      {
        v12 = ((char *)v10 - (_BYTE *)*a2) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        v13 = v9 - (_QWORD)*a2;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v5, v15);
        else
          v16 = 0;
        v17 = (uint64_t *)&v16[8 * v12];
        *v17 = v8;
        v11 = v17 + 1;
        v19 = (char *)*a2;
        v18 = (char *)a2[1];
        if (v18 != *a2)
        {
          do
          {
            v20 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *--v17 = v20;
          }
          while (v18 != v19);
          v18 = (char *)*a2;
        }
        *a2 = v17;
        a2[1] = v11;
        a2[2] = &v16[8 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v10 = ResolvedDate;
        v11 = v10 + 1;
      }
      a2[1] = v11;
      ++v4;
    }
  }
  return theArray;
}

void sub_1A189A734(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *NLTransliteratorCopyCandidates(uint64_t a1, const __CFString *a2, const void *a3, uint64_t a4)
{
  __CFArray *Mutable;
  NLTransliterationCandidate **v9;
  unsigned __int8 v10;
  char *v11;
  NLTransliterationCandidate **v12;
  char *v13;
  NLTransliterationCandidate **v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v19;
  NLTransliterationCandidate **v20;
  NLTransliterationCandidate **v21;
  const void *CandidateWrapper;
  void *first;
  const __CFArray *v24;
  CFIndex Count;
  CFIndex v26;
  CFArrayRef v27;
  CFIndex v28;
  unint64_t v29;
  NLTextSlot *v30;
  CFStringRef v31;
  std::vector<std::string>::pointer end;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  std::string *v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  NLTransliterationCandidate **v41;
  std::__split_buffer<std::string>::pointer begin;
  const void *v43;
  CFArrayRef theArray;
  std::vector<std::string> v46;
  void *v47;
  NLTransliterationCandidate **v48;
  unsigned __int8 v49;
  void *__p[2];
  std::string::size_type v51;
  CFTypeRef cf;
  std::__split_buffer<std::string> __v;

  Mutable = 0;
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    if (a1 && a2)
    {
      convertToVector((CFIndex)a3, (void **)&__v.__first_);
      v19 = *(_QWORD *)(a1 + 24);
      getUTF8StringFromCFString(a2, __p);
      (*(void (**)(void **__return_ptr, uint64_t, void **, std::__split_buffer<std::string> *, uint64_t))(*(_QWORD *)v19 + 16))(&v47, v19, __p, &__v, a4);
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v20 = (NLTransliterationCandidate **)v47;
      v21 = v48;
      if (v47 != v48)
      {
        do
        {
          CandidateWrapper = (const void *)createCandidateWrapper(*v20);
          CFArrayAppendValue(Mutable, CandidateWrapper);
          CFRelease(CandidateWrapper);
          ++v20;
        }
        while (v20 != v21);
        v20 = (NLTransliterationCandidate **)v47;
      }
      if (v20)
      {
        v48 = v20;
        operator delete(v20);
      }
      if (SHIBYTE(v51) < 0)
        operator delete(__p[0]);
      first = __v.__first_;
      if (__v.__first_)
      {
        __v.__begin_ = __v.__first_;
LABEL_73:
        operator delete(first);
        return Mutable;
      }
    }
    return Mutable;
  }
  if (!a1 || !a2)
    return Mutable;
  getUTF8StringFromCFString(a2, &v47);
  v9 = (NLTransliterationCandidate **)v49;
  v10 = v49;
  v11 = (char *)v47;
  v12 = v48;
  if ((v49 & 0x80u) == 0)
    v13 = (char *)&v47;
  else
    v13 = (char *)v47;
  if ((v49 & 0x80u) == 0)
    v14 = (NLTransliterationCandidate **)v49;
  else
    v14 = v48;
  if (v14)
  {
    v15 = (char *)v14 + (_QWORD)v13;
    v16 = MEMORY[0x1E0C80978];
    while (1)
    {
      v17 = *v13;
      if (!((v17 & 0x80000000) != 0 ? __maskrune(v17, 0x100uLL) : *(_DWORD *)(v16 + 4 * v17 + 60) & 0x100))
        break;
      ++v13;
      v14 = (NLTransliterationCandidate **)((char *)v14 - 1);
      if (!v14)
      {
        v13 = v15;
        break;
      }
    }
    v9 = (NLTransliterationCandidate **)v49;
    v11 = (char *)v47;
    v12 = v48;
    v10 = v49;
  }
  if ((v10 & 0x80u) != 0)
    v9 = v12;
  else
    v11 = (char *)&v47;
  if (v13 == (char *)v9 + (_QWORD)v11)
  {
    if (a3)
      CFRetain(a3);
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, a3);
    memset(&v46, 0, sizeof(v46));
    v24 = theArray;
    if (!theArray)
    {
LABEL_64:
      NLCompositeTransliterator::getTransliterationCandidates(*(_QWORD *)(a1 + 32), (uint64_t *)&v46, (uint64_t)&v47, a4, (std::string *)&__v);
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v41 = (NLTransliterationCandidate **)__v.__first_;
      begin = __v.__begin_;
      if (__v.__first_ != __v.__begin_)
      {
        do
        {
          v43 = (const void *)createCandidateWrapper(*v41);
          CFArrayAppendValue(Mutable, v43);
          if (v43)
            CFRelease(v43);
          ++v41;
        }
        while (v41 != (NLTransliterationCandidate **)begin);
        v41 = (NLTransliterationCandidate **)__v.__first_;
      }
      if (v41)
      {
        __v.__begin_ = (std::__split_buffer<std::string>::pointer)v41;
        operator delete(v41);
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v46;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      if ((v49 & 0x80) != 0)
        goto LABEL_72;
      return Mutable;
    }
    Count = CFArrayGetCount(theArray);
    v26 = Count;
    v27 = theArray;
    if (theArray)
    {
      v28 = CFArrayGetCount(theArray);
      if (!v26)
      {
LABEL_62:
        if (theArray)
          CFRelease(theArray);
        goto LABEL_64;
      }
    }
    else
    {
      v28 = 0;
      if (!Count)
        goto LABEL_62;
    }
    v29 = 0;
    do
    {
      if (v24 == v27 && v28 == v29)
        break;
      v30 = (NLTextSlot *)applesauce::CF::details::at_to<void const*>(v24, v29);
      v31 = NLTransliterationCandidateCopyOutputString(v30);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v31);
      applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)__p);
      end = v46.__end_;
      if (v46.__end_ >= v46.__end_cap_.__value_)
      {
        v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_ - (char *)v46.__begin_) >> 3);
        v35 = v34 + 1;
        if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) > v35)
          v35 = 0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) >= 0x555555555555555)
          v36 = 0xAAAAAAAAAAAAAAALL;
        else
          v36 = v35;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v46.__end_cap_;
        if (v36)
          v37 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v46.__end_cap_, v36);
        else
          v37 = 0;
        v38 = v37 + v34;
        __v.__first_ = v37;
        __v.__begin_ = v38;
        __v.__end_cap_.__value_ = &v37[v36];
        v39 = *(_OWORD *)__p;
        v38->__r_.__value_.__r.__words[2] = v51;
        *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
        __p[1] = 0;
        v51 = 0;
        __p[0] = 0;
        __v.__end_ = v38 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v46, &__v);
        v40 = v46.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v46.__end_ = v40;
        if (SHIBYTE(v51) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v33 = *(_OWORD *)__p;
        v46.__end_->__r_.__value_.__r.__words[2] = v51;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v33;
        v46.__end_ = end + 1;
      }
      if (cf)
        CFRelease(cf);
      ++v29;
    }
    while (v26 != v29);
    goto LABEL_62;
  }
  Mutable = 0;
  if ((v10 & 0x80) != 0)
  {
LABEL_72:
    first = v47;
    goto LABEL_73;
  }
  return Mutable;
}

void sub_1A189ABA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,CFTypeRef cf,char *__p,char *a27)
{
  if (__p)
  {
    a27 = __p;
    operator delete(__p);
  }
  __p = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t NLTransliterationCandidateCreate(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  std::string *v5;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  v5 = (std::string *)operator new();
  getUTF8StringFromCFString(a2, v9);
  getUTF8StringFromCFString(a3, __p);
  NLTransliterationCandidate::NLTransliterationCandidate(v5, (__int128 *)v9, (__int128 *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  return createCandidateWrapper((NLTransliterationCandidate *)v5);
}

void sub_1A189AD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  MEMORY[0x1A1B0E068](v20, 0x1012C40B0087DDBLL);
  _Unwind_Resume(a1);
}

NLTextSlot *NLTransliterationCandidateCopyInputString(NLTextSlot *result)
{
  NLAbstractOrthographyConvertor *ResolvedDate;
  uint64_t v2;

  if (result)
  {
    ResolvedDate = (NLAbstractOrthographyConvertor *)NLTextSlot::getResolvedDate(result);
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(ResolvedDate);
    return (NLTextSlot *)createCFStringFromString(v2);
  }
  return result;
}

CFStringRef NLTransliterationCandidateCopyOutputString(NLTextSlot *a1)
{
  NLTransliterationCandidate *ResolvedDate;
  uint64_t TransliteratedWord;

  if (!a1)
    return 0;
  ResolvedDate = (NLTransliterationCandidate *)NLTextSlot::getResolvedDate(a1);
  if (!ResolvedDate)
    return 0;
  TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord(ResolvedDate);
  return createCFStringFromString(TransliteratedWord);
}

NLTextSlot *NLTransliterationCandidateIsExtensionCandidate(NLTextSlot *result)
{
  NLTransliterationCandidate *ResolvedDate;

  if (result)
  {
    ResolvedDate = (NLTransliterationCandidate *)NLTextSlot::getResolvedDate(result);
    return (NLTextSlot *)NLTransliterationCandidate::isExtensionCandidate(ResolvedDate);
  }
  return result;
}

double NLTransliterationCandidateScore(NLTextSlot *a1)
{
  NLTransliterationCandidate *ResolvedDate;

  if (!a1)
    return 0.0;
  ResolvedDate = (NLTransliterationCandidate *)NLTextSlot::getResolvedDate(a1);
  return NLTransliterationCandidate::getLMScore(ResolvedDate);
}

void NLTransliteratorAcceptCandidate(uint64_t a1, CFIndex a2, NLTextSlot *a3)
{
  uint64_t v6;
  uint64_t ResolvedDate;
  void *__p[3];

  if (a1 && a3 && (_os_feature_enabled_impl() & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 24);
    convertToVector(a2, __p);
    ResolvedDate = NLTextSlot::getResolvedDate(a3);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v6 + 32))(v6, __p, ResolvedDate);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1A189AEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NLTransliteratorFlushDynamicLanguageModel(uint64_t a1)
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if ((result & 1) == 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
  return result;
}

uint64_t NLTransliteratorResetDynamicLanguageModel(uint64_t a1)
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if ((result & 1) == 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
  return result;
}

uint64_t NLTransliterationCandidateIsInVocabulary(NLTextSlot *a1)
{
  NLTransliterationCandidate *ResolvedDate;

  if (_os_feature_enabled_impl()
    && (ResolvedDate = (NLTransliterationCandidate *)NLTextSlot::getResolvedDate(a1)) != 0)
  {
    return NLTransliterationCandidate::isInVocabulary(ResolvedDate);
  }
  else
  {
    return 0;
  }
}

uint64_t NLTransliteratorAssetsAvailable()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  void (*v6)(uint64_t);
  void *v7;
  CFTypeRef cf;

  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
  {
    v2 = 0;
    v3 = &v2;
    v4 = 0x3812000000;
    v5 = __Block_byref_object_copy__12;
    v6 = __Block_byref_object_dispose__12;
    v7 = &unk_1A18F4361;
    cf = 0;
    LMEnumerateAssetDataItems();
    v1 = v3[6];
    _Block_object_dispose(&v2, 8);
    if (cf)
      CFRelease(cf);
    return v1 != 0;
  }
  return result;
}

void sub_1A189B0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf)
{
  _Block_object_dispose(&a14, 8);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

uint64_t NLTransliterationCandidateCopyMetadata(NLTextSlot *a1)
{
  NLTransliterationCandidate *ResolvedDate;

  ResolvedDate = (NLTransliterationCandidate *)NLTextSlot::getResolvedDate(a1);
  return NLTransliterationCandidate::copyMetadata(ResolvedDate);
}

void TransliteratorWrapper::~TransliteratorWrapper(TransliteratorWrapper *this)
{
  TransliteratorWrapper::~TransliteratorWrapper(this);
  JUMPOUT(0x1A1B0E068);
}

{
  uint64_t v2;
  NLCompositeTransliterator *v3;

  *(_QWORD *)this = &unk_1E45CD768;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (NLCompositeTransliterator *)*((_QWORD *)this + 2);
  if (v3)
  {
    NLCompositeTransliterator::~NLCompositeTransliterator(v3);
    MEMORY[0x1A1B0E068]();
  }
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

_QWORD *applesauce::CF::convert_to<std::string,0>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a1 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return applesauce::CF::details::CFString_get_value<true>(a1, a2);
}

void sub_1A189B1FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_1A189B28C(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

const void *applesauce::CF::details::at_to<void const*>(const __CFArray *a1, unint64_t a2)
{
  const void *result;
  std::runtime_error *exception;

  if (!a1 || CFArrayGetCount(a1) <= a2 || (result = CFArrayGetValueAtIndex(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1A189B330(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *applesauce::CF::not_found@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not find item");
}

std::runtime_error *applesauce::CF::convert_error@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not convert");
}

applesauce::CF::ArrayRef *applesauce::CF::ArrayRef::ArrayRef(applesauce::CF::ArrayRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_1A189B3E0(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(a1 + 48), 0);
}

void ___ZL23isSeq2SeqModelAvailablePK10__CFLocale_block_invoke(uint64_t a1, CFURLRef url, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  const __CFString *PathComponent;
  const __CFString *v10;
  uint64_t v11;
  CFStringRef v12;

  PathComponent = CFURLCopyLastPathComponent(url);
  if (PathComponent)
  {
    v10 = PathComponent;
    if (CFStringsAreEqual(PathComponent, CFSTR("EMT_package")))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v12 = CFURLCopyPath(url);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v11 + 48), v12);
      *a6 = 1;
    }
    CFRelease(v10);
  }
}

void sub_1A189B4B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t NLLatticePath::NLLatticePath(uint64_t a1, const std::string *a2, double a3)
{
  uint64_t *v5;
  void *__p[2];
  char v8;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v5 = (uint64_t *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)a1, a2);
  NLExtendedString::NLExtendedString((NLExtendedString *)__p);
  std::vector<NLExtendedString>::push_back[abi:ne180100](v5, (__int128 *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  *(double *)(a1 + 48) = a3;
  return a1;
}

void sub_1A189B544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(a1);
}

uint64_t NLLatticePath::appendPathString(std::string *this, const NLExtendedString *a2)
{
  std::string::size_type size;
  uint64_t *v3;
  std::string::size_type v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string::size_type v12;
  uint64_t v13;

  size = this[1].__r_.__value_.__l.__size_;
  v3 = (uint64_t *)&this[1];
  if (size == this[1].__r_.__value_.__r.__words[0])
    goto LABEL_19;
  if (NLExtendedString::getJoinNext((NLExtendedString *)(size - 48)) == 1
    && NLExtendedString::getJoinPrev(a2) == 1)
  {
    goto LABEL_8;
  }
  v6 = this[1].__r_.__value_.__l.__size_;
  if (v6 == this[1].__r_.__value_.__r.__words[0])
LABEL_19:
    std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
  if (NLExtendedString::getJoinNext((NLExtendedString *)(v6 - 48))
    || NLExtendedString::getJoinPrev(a2))
  {
    v7 = 0;
    goto LABEL_15;
  }
LABEL_8:
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(a2);
  v9 = *(char *)(v8 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)v8;
  else
    v10 = *(const std::string::value_type **)v8;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(v8 + 23);
  else
    v11 = *(_QWORD *)(v8 + 8);
  std::string::append(this, v10, v11);
  v7 = 1;
LABEL_15:
  v12 = this[1].__r_.__value_.__l.__size_;
  if (v12 >= this[1].__r_.__value_.__r.__words[2])
  {
    v13 = std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>(v3, (__int128 *)a2);
  }
  else
  {
    std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)v3, (__int128 *)a2);
    v13 = v12 + 48;
  }
  this[1].__r_.__value_.__l.__size_ = v13;
  return v7;
}

double NLLatticePath::addPathScore(NLLatticePath *this, double a2)
{
  double result;

  result = *((double *)this + 6) + a2;
  *((double *)this + 6) = result;
  return result;
}

std::string *NLLatticePath::getNodeVector@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(a2, this[3], this[4], 0xAAAAAAAAAAAAAAABLL * (this[4] - this[3]));
}

void NLTokenizerWithDataDetector::NLTokenizerWithDataDetector(NLTokenizerWithDataDetector *this)
{
  uint64_t v2;
  const __CFString *v3;
  NL::CFLogger *UTF8StringFromCFString;
  uint64_t v5;
  void **v6;
  void *__p[2];
  char v8;
  CFErrorRef err;

  err = 0;
  v2 = DDScannerCreateWithType();
  *(_QWORD *)this = v2;
  if (!v2 && err)
  {
    v3 = CFErrorCopyDescription(err);
    UTF8StringFromCFString = (NL::CFLogger *)getUTF8StringFromCFString(v3, __p);
    v5 = NL::CFLogger::sharedInstance(UTF8StringFromCFString);
    if (v8 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v5 + 16))(v5, 3, "Could not create DDScanner : %s", (const char *)v6);
    if (v3)
      CFRelease(v3);
    CFRelease(err);
    if (v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_1A189B76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *NLTokenizerWithDataDetector::copyTokenizeWithDataDetectors(NLTokenizerWithDataDetector *this, const __CFString *a2)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  const __CFString *v12;
  const void *v13;
  int v14;
  const void *Type;
  uint64_t Range;
  uint64_t v17;
  uint64_t v18;
  CFStringRef v19;
  CFIndex Length;
  CFStringRef v21;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef cf2;
  CFTypeRef v28;
  CFRange v29;
  CFRange v30;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (*(_QWORD *)this
    && DDScannerScanString()
    && (v6 = (const __CFArray *)DDScannerCopyResultsWithOptions()) != 0)
  {
    v7 = v6;
    Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      v9 = Count;
      v10 = 0;
      v11 = 0;
      v28 = (CFTypeRef)*MEMORY[0x1E0D1CA98];
      v26 = (CFTypeRef)*MEMORY[0x1E0D1CAA0];
      v25 = (CFTypeRef)*MEMORY[0x1E0D1CB88];
      v24 = (CFTypeRef)*MEMORY[0x1E0D1CA90];
      v23 = (CFTypeRef)*MEMORY[0x1E0D1CB80];
      cf2 = (CFTypeRef)*MEMORY[0x1E0D1CB98];
      while (2)
      {
        CFArrayGetValueAtIndex(v7, v11);
        v12 = CFSTR("URL");
        switch(DDResultGetCategory())
        {
          case 1u:
            goto LABEL_17;
          case 2u:
            v12 = CFSTR("PHONE");
            goto LABEL_17;
          case 3u:
            v12 = CFSTR("ADDRESS");
            goto LABEL_17;
          case 4u:
            Type = (const void *)DDResultGetType();
            v12 = CFSTR("DATETIME");
            if (CFEqual(Type, v28)
              || CFEqual(Type, v26)
              || CFEqual(Type, v25)
              || CFEqual(Type, v24)
              || CFEqual(Type, v23))
            {
              goto LABEL_17;
            }
            goto LABEL_20;
          default:
            v13 = (const void *)DDResultGetType();
            v14 = CFEqual(v13, cf2);
            v12 = CFSTR("CURRENCY");
            if ((DDResultHasType() & 1) == 0)
            {
              v12 = CFSTR("DATETIME");
              if (!v14)
                goto LABEL_20;
            }
LABEL_17:
            Range = DDResultGetRange();
            v18 = v17;
            if (Range > v10)
            {
              v29.location = v10;
              v29.length = Range - v10;
              v19 = CFStringCreateWithSubstring(v4, a2, v29);
              CFArrayAppendValue(Mutable, v19);
              CFRelease(v19);
            }
            CFArrayAppendValue(Mutable, v12);
            v10 = Range + v18;
LABEL_20:
            if (v9 == ++v11)
              goto LABEL_24;
            continue;
        }
      }
    }
    v10 = 0;
LABEL_24:
    CFRelease(v7);
  }
  else
  {
    v10 = 0;
  }
  Length = CFStringGetLength(a2);
  if (Length > v10)
  {
    v30.location = v10;
    v30.length = Length - v10;
    v21 = CFStringCreateWithSubstring(v4, a2, v30);
    CFArrayAppendValue(Mutable, v21);
    CFRelease(v21);
  }
  return Mutable;
}

__CFArray *NLTokenizerWithDataDetector::copyCharacterTokens(NLTokenizerWithDataDetector *this, const __CFString *a2)
{
  const __CFAllocator *v3;
  __CFArray *Mutable;
  CFIndex Length;
  CFIndex v6;
  CFIndex i;
  CFStringRef v8;
  CFRange v10;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  Length = CFStringGetLength(a2);
  if (Length >= 1)
  {
    v6 = Length;
    for (i = 0; i != v6; ++i)
    {
      v10.location = i;
      v10.length = 1;
      v8 = CFStringCreateWithSubstring(v3, a2, v10);
      CFArrayAppendValue(Mutable, v8);
      CFRelease(v8);
    }
  }
  return Mutable;
}

CFMutableArrayRef NLTokenizerWithDataDetector::copyTokens(NLTokenizerWithDataDetector *this, const __CFString *a2)
{
  __CFArray *v2;
  const __CFAllocator *v3;
  __CFArray *Mutable;
  const void *v5;
  CFIndex Count;
  CFMutableArrayRef v7;
  CFIndex i;
  const __CFString *ValueAtIndex;

  v2 = NLTokenizerWithDataDetector::copyTokenizeWithDataDetectors(this, a2);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E0D174F0]);
  v5 = (const void *)NLTaggerCreate();
  if (Mutable)
    CFRelease(Mutable);
  Count = CFArrayGetCount(v2);
  v7 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v2, i);
      NLTaggerSetString();
      CFStringGetLength(ValueAtIndex);
      NLTaggerEnumerateTokens();
    }
  }
  if (v2)
    CFRelease(v2);
  if (v5)
    CFRelease(v5);
  return v7;
}

void ___ZN27NLTokenizerWithDataDetector10copyTokensEPK10__CFString_block_invoke(uint64_t a1, CFRange *a2)
{
  CFStringRef v3;

  v3 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)(a1 + 32), *a2);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v3);
  if (v3)
    CFRelease(v3);
}

CFMutableArrayRef NLTokenizerWithDataDetector::copyTokenizedSentences(NLTokenizerWithDataDetector *this, const __CFString *a2)
{
  const __CFAllocator *v3;
  const CFArrayCallBacks *v4;
  __CFArray *Mutable;
  const void *v6;
  CFMutableArrayRef v7;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E0D174F0]);
  v6 = (const void *)NLTaggerCreate();
  NLTaggerSetString();
  CFStringGetLength(a2);
  v7 = CFArrayCreateMutable(v3, 0, v4);
  NLTaggerEnumerateTokens();
  if (v6)
    CFRelease(v6);
  if (Mutable)
    CFRelease(Mutable);
  return v7;
}

void ___ZN27NLTokenizerWithDataDetector22copyTokenizedSentencesEPK10__CFString_block_invoke(uint64_t a1, CFRange *a2)
{
  CFStringRef v3;

  v3 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)(a1 + 32), *a2);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v3);
  if (v3)
    CFRelease(v3);
}

void getVocabulary(uint64_t a1, uint64_t a2)
{
  char *Completion;
  int Score;
  void *__p[2];
  char v7;

  Completion = (char *)nlp::TrieCompletionGetCompletion(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, Completion);
  Score = NLBranchGetScore(a2);
  NL::SearchRules::addVocabulary(a1, (uint64_t)__p, Score);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1A189BE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NL::SearchRules::addVocabulary(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  int TermID;
  uint64_t **v8;
  _DWORD *v9;
  uint64_t **v10;
  std::string __p;
  uint64_t v12;

  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    TermID = a3;
    if (a3)
    {
      v8 = (uint64_t **)(a1 + 32);
      if (a1 + 40 != std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 32, (const void **)a2))return;
LABEL_15:
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      LODWORD(v12) = TermID;
      std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned int>>(v8, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v10 = (uint64_t **)(a1 + 8);
      LODWORD(__p.__r_.__value_.__l.__data_) = TermID;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p.__r_.__value_.__r.__words[1], *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)a2;
        v12 = *(_QWORD *)(a2 + 16);
      }
      std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::string>>(v10, (unsigned int *)&__p, (uint64_t)&__p);
      if (SHIBYTE(v12) < 0)
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      return;
    }
    if (v4 < 0)
    {
      if (*(_QWORD *)(a2 + 8) != 4)
      {
LABEL_13:
        v8 = (uint64_t **)(a1 + 32);
        if (a1 + 40 != std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 32, (const void **)a2))return;
        TermID = NL::SearchRules::getTermID(a1, (const void **)a2);
        goto LABEL_15;
      }
      v9 = *(_DWORD **)a2;
    }
    else
    {
      v9 = (_DWORD *)a2;
      if (v4 != 4)
        goto LABEL_13;
    }
    if (*v9 == 1701736270)
      return;
    goto LABEL_13;
  }
}

void sub_1A189C008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NL::SearchRules *NL::SearchRules::createFromPath(NL::SearchRules *this, const __CFURL *a2)
{
  NL::SearchRules *v2;
  int v4;
  unsigned int *v5;
  unsigned int *v6;
  const char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  stat v19;
  _QWORD v20[3];
  _QWORD *v21;
  UInt8 buffer[1024];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    CFURLGetFileSystemRepresentation(this, 1u, buffer, 1024);
    if (!stat((const char *)buffer, &v19))
    {
      v4 = open((const char *)buffer, 0);
      if ((v4 & 0x80000000) == 0)
      {
        v5 = (unsigned int *)mmap(0, v19.st_size, 1, 1, v4, 0);
        v6 = v5;
        if (v5 == (unsigned int *)-1)
        {
          v2 = 0;
LABEL_40:
          close(v4);
          return v2;
        }
        if (*v5 != 485346046 || v5[1] != 2)
        {
          v2 = 0;
LABEL_39:
          munmap(v6, v19.st_size);
          goto LABEL_40;
        }
        v2 = (NL::SearchRules *)operator new();
        NL::SearchRules::SearchRules(v2);
        v8 = nlp::BurstTrieCreateWithBytes((nlp *)((char *)v6 + v6[2]), v7);
        v20[0] = &unk_1E45CE678;
        v20[1] = getVocabulary;
        v21 = v20;
        nlp::BurstTrieSearch((nlp *)v8, "", 0, (uint64_t)v2, (uint64_t)v20, -1);
        v9 = v21;
        if (v21 == v20)
        {
          v10 = 4;
          v9 = v20;
        }
        else
        {
          if (!v21)
          {
LABEL_16:
            if (v6[15])
              *((_BYTE *)v2 + 2) = 1;
            if (v6[16])
              *(_BYTE *)v2 = 1;
            if (v6[4])
            {
              v11 = 0;
              v12 = v6;
              do
              {
                NL::SearchRules::addRule(v2, *(unsigned int *)((char *)v12 + v6[3]), *(unsigned int *)((char *)v12 + v6[3] + 4), *(unsigned int *)((char *)v12 + v6[3] + 8), *(unsigned int *)((char *)v12 + v6[3] + 12));
                ++v11;
                v12 += 4;
              }
              while (v11 < v6[4]);
            }
            if (v6[10])
            {
              v13 = 0;
              do
                NL::SearchRules::setIsInferred(v2, *(unsigned int *)((char *)&v6[v13++] + v6[9]));
              while (v13 < v6[10]);
            }
            if (v6[6])
            {
              v14 = 0;
              do
                NL::SearchRules::setIsCombinable(v2, *(unsigned int *)((char *)&v6[v14++] + v6[5]));
              while (v14 < v6[6]);
            }
            if (v6[8])
            {
              v15 = 0;
              do
                NL::SearchRules::setIsFunction(v2, *(unsigned int *)((char *)&v6[v15++] + v6[7]));
              while (v15 < v6[8]);
            }
            if (v6[12])
            {
              v16 = 0;
              do
                NL::SearchRules::setRequiresComplement(v2, *(unsigned int *)((char *)&v6[v16++] + v6[11]));
              while (v16 < v6[12]);
            }
            if (v6[14])
            {
              v17 = 0;
              v18 = v6;
              do
              {
                NL::SearchRules::setEquivalence(v2, *(unsigned int *)((char *)v18 + v6[13]), *(unsigned int *)((char *)v18 + v6[13] + 4));
                ++v17;
                v18 += 2;
              }
              while (v17 < v6[14]);
            }
            nlp::BurstTrieRelease(v8);
            goto LABEL_39;
          }
          v10 = 5;
        }
        (*(void (**)(void))(*v9 + 8 * v10))();
        goto LABEL_16;
      }
    }
  }
  return 0;
}

void sub_1A189C340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char *a31)
{
  char *v31;
  char *v33;
  uint64_t v34;

  v33 = a31;
  if (a31 == v31)
  {
    v34 = 4;
    v33 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_6;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t *NL::SearchRules::addRule(NL::SearchRules *this, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unsigned int v13;
  BOOL v14;
  char **v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int v25;
  BOOL v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t *v32;
  char *v33;
  unsigned int v34;
  BOOL v35;
  uint64_t *v36;
  char *v37;
  unsigned int v38;
  BOOL v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int v45;
  BOOL v46;
  uint64_t *v47;
  _QWORD **v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD **v53;
  _QWORD *v54;
  uint64_t v55;

  v10 = (char *)this + 208;
  v9 = *((_QWORD *)this + 26);
  if (!v9)
    goto LABEL_12;
  v11 = (char *)this + 208;
  v12 = (char *)*((_QWORD *)this + 26);
  do
  {
    v13 = *((_DWORD *)v12 + 8);
    v14 = v13 >= a3;
    if (v13 >= a3)
      v15 = (char **)v12;
    else
      v15 = (char **)(v12 + 8);
    if (v14)
      v11 = v12;
    v12 = *v15;
  }
  while (*v15);
  if (v11 == v10 || *((_DWORD *)v11 + 8) > a3)
  {
LABEL_12:
    v50 = 0;
    v51 = 0;
    v49 = &v50;
    LODWORD(v52) = a3;
    v54 = 0;
    v55 = 0;
    v53 = &v54;
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>((uint64_t)this + 200, (unsigned int *)&v52, (uint64_t)&v52);
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::destroy((uint64_t)&v53, v54);
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::destroy((uint64_t)&v49, v50);
    v9 = *(_QWORD *)v10;
  }
  if (!v9)
    goto LABEL_24;
  v16 = v10;
  v17 = v9;
  do
  {
    v18 = *(_DWORD *)(v17 + 32);
    v19 = v18 >= a3;
    if (v18 >= a3)
      v20 = (uint64_t *)v17;
    else
      v20 = (uint64_t *)(v17 + 8);
    if (v19)
      v16 = (char *)v17;
    v17 = *v20;
  }
  while (*v20);
  if (v16 == v10 || *((_DWORD *)v16 + 8) > a3)
LABEL_24:
    v16 = v10;
  v23 = *((_QWORD *)v16 + 6);
  v21 = v16 + 48;
  v22 = v23;
  if (!v23)
    goto LABEL_36;
  v24 = v21;
  do
  {
    v25 = *(_DWORD *)(v22 + 32);
    v26 = v25 >= a2;
    if (v25 >= a2)
      v27 = (uint64_t *)v22;
    else
      v27 = (uint64_t *)(v22 + 8);
    if (v26)
      v24 = (char *)v22;
    v22 = *v27;
  }
  while (*v27);
  if (v24 == v21 || *((_DWORD *)v24 + 8) > a2)
LABEL_36:
    v24 = v21;
  if (!v9)
    goto LABEL_48;
  v28 = v10;
  v29 = v9;
  do
  {
    v30 = *(_DWORD *)(v29 + 32);
    v31 = v30 >= a3;
    if (v30 >= a3)
      v32 = (uint64_t *)v29;
    else
      v32 = (uint64_t *)(v29 + 8);
    if (v31)
      v28 = (char *)v29;
    v29 = *v32;
  }
  while (*v32);
  if (v28 == v10 || *((_DWORD *)v28 + 8) > a3)
LABEL_48:
    v28 = v10;
  if (v24 == v28 + 48)
  {
    if (!v9)
      goto LABEL_63;
    v33 = v10;
    do
    {
      v34 = *(_DWORD *)(v9 + 32);
      v35 = v34 >= a3;
      if (v34 >= a3)
        v36 = (uint64_t *)v9;
      else
        v36 = (uint64_t *)(v9 + 8);
      if (v35)
        v33 = (char *)v9;
      v9 = *v36;
    }
    while (*v36);
    if (v33 == v10 || *((_DWORD *)v33 + 8) > a3)
LABEL_63:
      v33 = v10;
    v50 = 0;
    v51 = 0;
    v49 = &v50;
    LODWORD(v52) = a2;
    v54 = 0;
    v55 = 0;
    v53 = &v54;
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>((uint64_t)(v33 + 40), (unsigned int *)&v52, (uint64_t)&v52);
    std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy((uint64_t)&v53, v54);
    std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy((uint64_t)&v49, v50);
    v9 = *(_QWORD *)v10;
    if (!*(_QWORD *)v10)
      goto LABEL_75;
  }
  else if (!v9)
  {
LABEL_75:
    v37 = v10;
    goto LABEL_76;
  }
  v37 = v10;
  do
  {
    v38 = *(_DWORD *)(v9 + 32);
    v39 = v38 >= a3;
    if (v38 >= a3)
      v40 = (uint64_t *)v9;
    else
      v40 = (uint64_t *)(v9 + 8);
    if (v39)
      v37 = (char *)v9;
    v9 = *v40;
  }
  while (*v40);
  if (v37 == v10 || *((_DWORD *)v37 + 8) > a3)
    goto LABEL_75;
LABEL_76:
  v43 = *((_QWORD *)v37 + 6);
  v41 = v37 + 48;
  v42 = v43;
  if (!v43)
    goto LABEL_87;
  v44 = v41;
  do
  {
    v45 = *(_DWORD *)(v42 + 32);
    v46 = v45 >= a2;
    if (v45 >= a2)
      v47 = (uint64_t *)v42;
    else
      v47 = (uint64_t *)(v42 + 8);
    if (v46)
      v44 = (_QWORD *)v42;
    v42 = *v47;
  }
  while (*v47);
  if (v44 == v41 || *((_DWORD *)v44 + 8) > a2)
LABEL_87:
    v44 = v41;
  v52 = a4 | (unint64_t)(a5 << 32);
  return std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,unsigned int>>((uint64_t **)v44 + 5, (unsigned int *)&v52, (uint64_t *)&v52);
}

void sub_1A189C674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  uint64_t v15;

  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy(v15, a15);
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void NL::SearchRules::setIsInferred(NL::SearchRules *this, unsigned int __c)
{
  uint64_t v2;
  _DWORD *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  void **v9;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  __int32 *v13;
  unint64_t v14;
  _DWORD *v15;
  __int32 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v5 = (_DWORD *)((char *)this + 16);
    do
    {
      v6 = *(_DWORD *)(v2 + 32);
      v7 = v6 >= __c;
      if (v6 >= __c)
        v8 = (uint64_t *)v2;
      else
        v8 = (uint64_t *)(v2 + 8);
      if (v7)
        v5 = (_DWORD *)v2;
      v2 = *v8;
    }
    while (*v8);
    if (v5 != (_DWORD *)((char *)this + 16) && v5[8] <= __c)
    {
      v10 = (__int32 *)*((_QWORD *)this + 14);
      v9 = (void **)((char *)this + 104);
      v11 = wmemchr(*((__int32 **)this + 13), __c, ((uint64_t)v10 - *((_QWORD *)this + 13)) >> 2);
      v12 = v11 ? v11 : v10;
      v13 = (__int32 *)*((_QWORD *)this + 14);
      if (v12 == v13)
      {
        v14 = *((_QWORD *)this + 15);
        if ((unint64_t)v12 >= v14)
        {
          v16 = (__int32 *)*v9;
          v17 = ((char *)v13 - (_BYTE *)*v9) >> 2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v19 = v14 - (_QWORD)v16;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this + 120, v20);
            v16 = (__int32 *)*((_QWORD *)this + 13);
            v12 = (__int32 *)*((_QWORD *)this + 14);
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[4 * v17];
          v23 = &v21[4 * v20];
          *(_DWORD *)v22 = __c;
          v15 = v22 + 4;
          while (v12 != v16)
          {
            v24 = *--v12;
            *((_DWORD *)v22 - 1) = v24;
            v22 -= 4;
          }
          *((_QWORD *)this + 13) = v22;
          *((_QWORD *)this + 14) = v15;
          *((_QWORD *)this + 15) = v23;
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v12 = __c;
          v15 = v12 + 1;
        }
        *((_QWORD *)this + 14) = v15;
      }
    }
  }
}

void NL::SearchRules::setIsCombinable(NL::SearchRules *this, unsigned int __c)
{
  uint64_t v2;
  _DWORD *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  void **v9;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  __int32 *v13;
  unint64_t v14;
  _DWORD *v15;
  __int32 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v5 = (_DWORD *)((char *)this + 16);
    do
    {
      v6 = *(_DWORD *)(v2 + 32);
      v7 = v6 >= __c;
      if (v6 >= __c)
        v8 = (uint64_t *)v2;
      else
        v8 = (uint64_t *)(v2 + 8);
      if (v7)
        v5 = (_DWORD *)v2;
      v2 = *v8;
    }
    while (*v8);
    if (v5 != (_DWORD *)((char *)this + 16) && v5[8] <= __c)
    {
      v10 = (__int32 *)*((_QWORD *)this + 17);
      v9 = (void **)((char *)this + 128);
      v11 = wmemchr(*((__int32 **)this + 16), __c, ((uint64_t)v10 - *((_QWORD *)this + 16)) >> 2);
      v12 = v11 ? v11 : v10;
      v13 = (__int32 *)*((_QWORD *)this + 17);
      if (v12 == v13)
      {
        v14 = *((_QWORD *)this + 18);
        if ((unint64_t)v12 >= v14)
        {
          v16 = (__int32 *)*v9;
          v17 = ((char *)v13 - (_BYTE *)*v9) >> 2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v19 = v14 - (_QWORD)v16;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this + 144, v20);
            v16 = (__int32 *)*((_QWORD *)this + 16);
            v12 = (__int32 *)*((_QWORD *)this + 17);
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[4 * v17];
          v23 = &v21[4 * v20];
          *(_DWORD *)v22 = __c;
          v15 = v22 + 4;
          while (v12 != v16)
          {
            v24 = *--v12;
            *((_DWORD *)v22 - 1) = v24;
            v22 -= 4;
          }
          *((_QWORD *)this + 16) = v22;
          *((_QWORD *)this + 17) = v15;
          *((_QWORD *)this + 18) = v23;
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v12 = __c;
          v15 = v12 + 1;
        }
        *((_QWORD *)this + 17) = v15;
      }
    }
  }
}

void NL::SearchRules::setIsFunction(NL::SearchRules *this, unsigned int __c)
{
  uint64_t v2;
  _DWORD *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  void **v9;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  __int32 *v13;
  unint64_t v14;
  _DWORD *v15;
  __int32 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v5 = (_DWORD *)((char *)this + 16);
    do
    {
      v6 = *(_DWORD *)(v2 + 32);
      v7 = v6 >= __c;
      if (v6 >= __c)
        v8 = (uint64_t *)v2;
      else
        v8 = (uint64_t *)(v2 + 8);
      if (v7)
        v5 = (_DWORD *)v2;
      v2 = *v8;
    }
    while (*v8);
    if (v5 != (_DWORD *)((char *)this + 16) && v5[8] <= __c)
    {
      v10 = (__int32 *)*((_QWORD *)this + 20);
      v9 = (void **)((char *)this + 152);
      v11 = wmemchr(*((__int32 **)this + 19), __c, ((uint64_t)v10 - *((_QWORD *)this + 19)) >> 2);
      v12 = v11 ? v11 : v10;
      v13 = (__int32 *)*((_QWORD *)this + 20);
      if (v12 == v13)
      {
        v14 = *((_QWORD *)this + 21);
        if ((unint64_t)v12 >= v14)
        {
          v16 = (__int32 *)*v9;
          v17 = ((char *)v13 - (_BYTE *)*v9) >> 2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v19 = v14 - (_QWORD)v16;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this + 168, v20);
            v16 = (__int32 *)*((_QWORD *)this + 19);
            v12 = (__int32 *)*((_QWORD *)this + 20);
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[4 * v17];
          v23 = &v21[4 * v20];
          *(_DWORD *)v22 = __c;
          v15 = v22 + 4;
          while (v12 != v16)
          {
            v24 = *--v12;
            *((_DWORD *)v22 - 1) = v24;
            v22 -= 4;
          }
          *((_QWORD *)this + 19) = v22;
          *((_QWORD *)this + 20) = v15;
          *((_QWORD *)this + 21) = v23;
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v12 = __c;
          v15 = v12 + 1;
        }
        *((_QWORD *)this + 20) = v15;
      }
    }
  }
}

void NL::SearchRules::setRequiresComplement(NL::SearchRules *this, unsigned int __c)
{
  uint64_t v2;
  _DWORD *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  void **v9;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  __int32 *v13;
  unint64_t v14;
  _DWORD *v15;
  __int32 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v5 = (_DWORD *)((char *)this + 16);
    do
    {
      v6 = *(_DWORD *)(v2 + 32);
      v7 = v6 >= __c;
      if (v6 >= __c)
        v8 = (uint64_t *)v2;
      else
        v8 = (uint64_t *)(v2 + 8);
      if (v7)
        v5 = (_DWORD *)v2;
      v2 = *v8;
    }
    while (*v8);
    if (v5 != (_DWORD *)((char *)this + 16) && v5[8] <= __c)
    {
      v10 = (__int32 *)*((_QWORD *)this + 23);
      v9 = (void **)((char *)this + 176);
      v11 = wmemchr(*((__int32 **)this + 22), __c, ((uint64_t)v10 - *((_QWORD *)this + 22)) >> 2);
      v12 = v11 ? v11 : v10;
      v13 = (__int32 *)*((_QWORD *)this + 23);
      if (v12 == v13)
      {
        v14 = *((_QWORD *)this + 24);
        if ((unint64_t)v12 >= v14)
        {
          v16 = (__int32 *)*v9;
          v17 = ((char *)v13 - (_BYTE *)*v9) >> 2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v19 = v14 - (_QWORD)v16;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this + 192, v20);
            v16 = (__int32 *)*((_QWORD *)this + 22);
            v12 = (__int32 *)*((_QWORD *)this + 23);
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[4 * v17];
          v23 = &v21[4 * v20];
          *(_DWORD *)v22 = __c;
          v15 = v22 + 4;
          while (v12 != v16)
          {
            v24 = *--v12;
            *((_DWORD *)v22 - 1) = v24;
            v22 -= 4;
          }
          *((_QWORD *)this + 22) = v22;
          *((_QWORD *)this + 23) = v15;
          *((_QWORD *)this + 24) = v23;
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v12 = __c;
          v15 = v12 + 1;
        }
        *((_QWORD *)this + 23) = v15;
      }
    }
  }
}

void NL::SearchRules::setEquivalence(NL::SearchRules *this, unsigned int __c, unsigned __int32 a3)
{
  char *v6;
  char *v7;
  uint64_t **v8;
  char *v9;
  char *v10;
  unsigned int v11;
  BOOL v12;
  char **v13;
  char *v14;
  char *v15;
  unsigned __int32 v16;
  BOOL v17;
  char **v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unsigned int v36;
  BOOL v37;
  char **v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int32 *v41;
  __int32 *v42;
  unsigned __int32 *v43;
  uint64_t v44;
  unsigned __int32 **v45;
  unsigned __int32 *v46;
  unsigned __int32 **v47;
  uint64_t v48;
  unint64_t v49;
  char **v50;
  unint64_t v51;
  unsigned __int32 *v52;
  char *v53;
  unsigned __int32 v54;
  BOOL v55;
  char **v56;
  uint64_t v57;
  __int32 *v58;
  __int32 *v59;
  __int32 *v60;
  uint64_t v61;
  __int32 **v62;
  __int32 *v63;
  __int32 **v64;
  uint64_t v65;
  unint64_t v66;
  char **v67;
  unint64_t v68;
  __int32 *v69;
  unsigned __int32 *v70;
  char *v71;
  unsigned __int32 v72;
  unint64_t v73;
  uint64_t v74;
  unsigned __int32 *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  __int32 *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  unsigned __int32 *v87;
  char *v88;
  unsigned __int32 v89;
  uint64_t v90;
  char *v91;
  unsigned __int32 v92;
  BOOL v93;
  uint64_t *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  int v98;
  uint64_t v99;
  char *v100;
  unsigned int v101;
  BOOL v102;
  uint64_t *v103;
  void *__p;
  unint64_t v105;
  char *v106;

  v7 = (char *)this + 64;
  v6 = (char *)*((_QWORD *)this + 8);
  v8 = (uint64_t **)((char *)this + 56);
  if (!v6)
  {
LABEL_21:
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3);
    __p = (void *)__c;
    v105 = v19;
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,unsigned long>>((uint64_t **)this + 7, (unsigned int *)&__p, (uint64_t)&__p);
    __p = (void *)a3;
    v105 = v19;
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,unsigned long>>(v8, (unsigned int *)&__p, (uint64_t)&__p);
    __p = 0;
    v105 = 0;
    v106 = 0;
    v21 = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)&v106, 1uLL);
    v22 = (char *)__p;
    v23 = (char *)v105;
    v24 = (char *)&v21[v20];
    *v21 = __c;
    v25 = (char *)(v21 + 1);
    v26 = (char *)v21;
    while (v23 != v22)
    {
      v27 = *((_DWORD *)v23 - 1);
      v23 -= 4;
      *((_DWORD *)v26 - 1) = v27;
      v26 -= 4;
    }
    __p = v26;
    v105 = (unint64_t)(v21 + 1);
    v106 = (char *)&v21[v20];
    if (v22)
    {
      operator delete(v22);
      v24 = v106;
    }
    v105 = (unint64_t)(v21 + 1);
    if (v25 >= v24)
    {
      v29 = (char *)__p;
      v30 = (v25 - (_BYTE *)__p) >> 2;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 62)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v32 = v24 - (_BYTE *)__p;
      if (v32 >> 1 > v31)
        v31 = v32 >> 1;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
        v33 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)&v106, v33);
        v29 = (char *)__p;
        v25 = (char *)v105;
      }
      else
      {
        v34 = 0;
      }
      v70 = (unsigned __int32 *)&v34[4 * v30];
      v71 = &v34[4 * v33];
      *v70 = a3;
      v28 = v70 + 1;
      while (v25 != v29)
      {
        v72 = *((_DWORD *)v25 - 1);
        v25 -= 4;
        *--v70 = v72;
      }
      __p = v70;
      v105 = (unint64_t)v28;
      v106 = v71;
      if (v29)
        operator delete(v29);
    }
    else
    {
      v21[1] = a3;
      v28 = v21 + 2;
    }
    v105 = (unint64_t)v28;
    v73 = *((_QWORD *)this + 11);
    if (v73 >= *((_QWORD *)this + 12))
    {
      v74 = std::vector<std::vector<unsigned int>>::__push_back_slow_path<std::vector<unsigned int> const&>((uint64_t *)this + 10, (uint64_t)&__p);
    }
    else
    {
      std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>((uint64_t)this + 80, (uint64_t)&__p);
      v74 = v73 + 24;
    }
    *((_QWORD *)this + 11) = v74;
    if (__p)
    {
      v105 = (unint64_t)__p;
      operator delete(__p);
    }
    return;
  }
  v9 = (char *)this + 64;
  v10 = (char *)*((_QWORD *)this + 8);
  do
  {
    v11 = *((_DWORD *)v10 + 7);
    v12 = v11 >= __c;
    if (v11 >= __c)
      v13 = (char **)v10;
    else
      v13 = (char **)(v10 + 8);
    if (v12)
      v9 = v10;
    v10 = *v13;
  }
  while (*v13);
  v14 = (char *)this + 64;
  v15 = (char *)*((_QWORD *)this + 8);
  if (v9 == v7 || (v14 = (char *)this + 64, v15 = (char *)*((_QWORD *)this + 8), *((_DWORD *)v9 + 7) > __c))
  {
    do
    {
      v16 = *((_DWORD *)v15 + 7);
      v17 = v16 >= a3;
      if (v16 >= a3)
        v18 = (char **)v15;
      else
        v18 = (char **)(v15 + 8);
      if (v17)
        v14 = v15;
      v15 = *v18;
    }
    while (*v18);
    if (v14 == v7 || *((_DWORD *)v14 + 7) > a3)
      goto LABEL_21;
    v53 = (char *)this + 64;
    do
    {
      v54 = *((_DWORD *)v6 + 7);
      v55 = v54 >= a3;
      if (v54 >= a3)
        v56 = (char **)v6;
      else
        v56 = (char **)(v6 + 8);
      if (v55)
        v53 = v6;
      v6 = *v56;
    }
    while (*v56);
    if (v53 == v7 || *((_DWORD *)v53 + 7) > a3)
      v53 = (char *)this + 64;
    v39 = *((unsigned int *)v53 + 8);
    v57 = *((_QWORD *)this + 10) + 24 * v39;
    v58 = *(__int32 **)(v57 + 8);
    v59 = wmemchr(*(__int32 **)v57, __c, ((uint64_t)v58 - *(_QWORD *)v57) >> 2);
    if (v59)
      v60 = v59;
    else
      v60 = v58;
    v61 = *((_QWORD *)this + 10);
    v62 = (__int32 **)(v61 + 24 * v39);
    v64 = v62 + 1;
    v63 = v62[1];
    if (v60 == v63)
    {
      v65 = v61 + 24 * v39;
      v68 = *(_QWORD *)(v65 + 16);
      v67 = (char **)(v65 + 16);
      v66 = v68;
      if ((unint64_t)v60 >= v68)
      {
        v81 = *v62;
        v82 = v63 - *v62;
        v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 62)
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        v84 = v66 - (_QWORD)v81;
        if (v84 >> 1 > v83)
          v83 = v84 >> 1;
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
          v85 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v85 = v83;
        if (v85)
        {
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)v67, v85);
          v60 = *v64;
          v81 = *v62;
        }
        else
        {
          v86 = 0;
        }
        v96 = &v86[4 * v82];
        v97 = &v86[4 * v85];
        *(_DWORD *)v96 = __c;
        v69 = (__int32 *)(v96 + 4);
        while (v60 != v81)
        {
          v98 = *--v60;
          *((_DWORD *)v96 - 1) = v98;
          v96 -= 4;
        }
        *v62 = (__int32 *)v96;
        *v64 = v69;
        *v67 = v97;
        if (v81)
          operator delete(v81);
      }
      else
      {
        *v60 = __c;
        v69 = v60 + 1;
      }
      *v64 = v69;
    }
    v99 = *(_QWORD *)v7;
    if (!*(_QWORD *)v7)
      goto LABEL_134;
    v100 = v7;
    do
    {
      v101 = *(_DWORD *)(v99 + 28);
      v102 = v101 >= __c;
      if (v101 >= __c)
        v103 = (uint64_t *)v99;
      else
        v103 = (uint64_t *)(v99 + 8);
      if (v102)
        v100 = (char *)v99;
      v99 = *v103;
    }
    while (*v103);
    if (v100 == v7 || *((_DWORD *)v100 + 7) > __c)
    {
LABEL_134:
      v95 = __c;
      goto LABEL_135;
    }
  }
  else
  {
    v35 = (char *)this + 64;
    do
    {
      v36 = *((_DWORD *)v6 + 7);
      v37 = v36 >= __c;
      if (v36 >= __c)
        v38 = (char **)v6;
      else
        v38 = (char **)(v6 + 8);
      if (v37)
        v35 = v6;
      v6 = *v38;
    }
    while (*v38);
    if (v35 == v7 || *((_DWORD *)v35 + 7) > __c)
      v35 = (char *)this + 64;
    v39 = *((unsigned int *)v35 + 8);
    v40 = *((_QWORD *)this + 10) + 24 * v39;
    v41 = *(unsigned __int32 **)(v40 + 8);
    v42 = wmemchr(*(__int32 **)v40, a3, ((uint64_t)v41 - *(_QWORD *)v40) >> 2);
    if (v42)
      v43 = (unsigned __int32 *)v42;
    else
      v43 = v41;
    v44 = *((_QWORD *)this + 10);
    v45 = (unsigned __int32 **)(v44 + 24 * v39);
    v47 = v45 + 1;
    v46 = v45[1];
    if (v43 == v46)
    {
      v48 = v44 + 24 * v39;
      v51 = *(_QWORD *)(v48 + 16);
      v50 = (char **)(v48 + 16);
      v49 = v51;
      if ((unint64_t)v43 >= v51)
      {
        v75 = *v45;
        v76 = v46 - *v45;
        v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 62)
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        v78 = v49 - (_QWORD)v75;
        if (v78 >> 1 > v77)
          v77 = v78 >> 1;
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
          v79 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v79 = v77;
        if (v79)
        {
          v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)v50, v79);
          v43 = *v47;
          v75 = *v45;
        }
        else
        {
          v80 = 0;
        }
        v87 = (unsigned __int32 *)&v80[4 * v76];
        v88 = &v80[4 * v79];
        *v87 = a3;
        v52 = v87 + 1;
        while (v43 != v75)
        {
          v89 = *--v43;
          *--v87 = v89;
        }
        *v45 = v87;
        *v47 = v52;
        *v50 = v88;
        if (v75)
          operator delete(v75);
      }
      else
      {
        *v43 = a3;
        v52 = v43 + 1;
      }
      *v47 = v52;
    }
    v90 = *(_QWORD *)v7;
    if (!*(_QWORD *)v7)
      goto LABEL_115;
    v91 = v7;
    do
    {
      v92 = *(_DWORD *)(v90 + 28);
      v93 = v92 >= a3;
      if (v92 >= a3)
        v94 = (uint64_t *)v90;
      else
        v94 = (uint64_t *)(v90 + 8);
      if (v93)
        v91 = (char *)v90;
      v90 = *v94;
    }
    while (*v94);
    if (v91 == v7 || *((_DWORD *)v91 + 7) > a3)
    {
LABEL_115:
      v95 = a3;
LABEL_135:
      __p = (void *)(v95 | (v39 << 32));
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,unsigned int>>(v8, (unsigned int *)&__p, (uint64_t *)&__p);
    }
  }
}

void sub_1A189D13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NL::SearchRules *NL::SearchRules::SearchRules(NL::SearchRules *this)
{
  *(_WORD *)this = 0;
  *((_BYTE *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = (char *)this + 208;
  NL::SearchRules::loadVocabulary((uint64_t **)this);
  return this;
}

void sub_1A189D228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  void **v9;
  uint64_t v10;
  void *v12;
  va_list va;

  va_start(va, a2);
  v10 = v6;
  std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy(v10, *(_QWORD **)(v2 + 208));
  v12 = *(void **)(v2 + 176);
  if (v12)
  {
    *(_QWORD *)(v2 + 184) = v12;
    operator delete(v12);
  }
  NL::SearchRules::SearchRules(v9, v8, v7, (_QWORD *)v2);
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy(v5, *(_QWORD **)(v2 + 64));
  std::__tree<std::string>::destroy(v4, *(char **)(v2 + 40));
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(v3, *(char **)(v2 + 16));
  _Unwind_Resume(a1);
}

void NL::SearchRules::loadVocabulary(uint64_t **this)
{
  uint64_t **v2;
  void *v3[2];
  uint64_t v4;
  _BYTE __p[24];
  uint64_t v6;

  v2 = this + 4;
  std::string::basic_string[abi:ne180100]<0>(v3, "None");
  *(_OWORD *)__p = *(_OWORD *)v3;
  *(_QWORD *)&__p[16] = v4;
  v3[1] = 0;
  v4 = 0;
  v3[0] = 0;
  LODWORD(v6) = 0;
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned int>>(v2, (const void **)__p, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
  std::string::basic_string[abi:ne180100]<0>(v3, "None");
  *(_DWORD *)__p = 0;
  *(_OWORD *)&__p[8] = *(_OWORD *)v3;
  v6 = v4;
  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::string>>(this + 1, (unsigned int *)__p, (uint64_t)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(*(void **)&__p[8]);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
  std::string::basic_string[abi:ne180100]<0>(v3, "S");
  *(_OWORD *)__p = *(_OWORD *)v3;
  *(_QWORD *)&__p[16] = v4;
  v3[1] = 0;
  v4 = 0;
  v3[0] = 0;
  LODWORD(v6) = 1;
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned int>>(v2, (const void **)__p, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
  std::string::basic_string[abi:ne180100]<0>(v3, "S");
  *(_DWORD *)__p = 1;
  *(_OWORD *)&__p[8] = *(_OWORD *)v3;
  v6 = v4;
  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::string>>(this + 1, (unsigned int *)__p, (uint64_t)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(*(void **)&__p[8]);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
  std::string::basic_string[abi:ne180100]<0>(v3, "$");
  *(_OWORD *)__p = *(_OWORD *)v3;
  *(_QWORD *)&__p[16] = v4;
  v3[1] = 0;
  v4 = 0;
  v3[0] = 0;
  LODWORD(v6) = 2;
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned int>>(v2, (const void **)__p, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
  std::string::basic_string[abi:ne180100]<0>(v3, "$");
  *(_DWORD *)__p = 2;
  *(_OWORD *)&__p[8] = *(_OWORD *)v3;
  v6 = v4;
  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::string>>(this + 1, (unsigned int *)__p, (uint64_t)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(*(void **)&__p[8]);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
  *((_DWORD *)this + 1) = 3;
  std::string::basic_string[abi:ne180100]<0>(__p, "To");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 3);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Of");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 4);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "From");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 5);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "For");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 6);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "About");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 7);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "With");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 8);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "By");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 9);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "In");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 10);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "As");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 11);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Via");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 12);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Honorific");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 13);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "After");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 14);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Before");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 15);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Since");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 16);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 17);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 18);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JabberOrEmail");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 19);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AIMOrEmail");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 20);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Date");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 21);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TO");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 22);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FROM");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 23);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FROMTO");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 24);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTO");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 25);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTFROM");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 26);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "WITH");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 27);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BY");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 28);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AUTHORED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 29);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DATE");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 30);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ANYDATE");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 31);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FROMDATE");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 32);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BEFOREDATE");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 33);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AFTERDATE");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 34);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SINCEDATE");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 35);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "STARTDATE");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 36);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ENDDATE");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 37);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ABOUT");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 38);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TOPIC");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 39);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TOPICMOD");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 40);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "THEME");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 41);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TITLE");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 42);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TITLED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 43);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TITLEMOD");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 44);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FILETITLED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 45);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QUOTED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 46);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTMOD");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 47);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVEMOD");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 48);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IGNORED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 49);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IGNOREMOD");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 50);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "REPLIED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 51);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "REPLYMOD");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 52);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FLAGGED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 53);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FLAGMOD");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 54);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 55);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MODIFIED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 56);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DOWNLOADED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 57);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PRINTED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 58);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VIEWED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 59);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ADDED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 60);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AIRDROPPED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 61);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 62);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 63);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SHARED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 64);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CAPTURED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 65);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CONTAINS");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 66);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TAGGED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 67);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TAGMOD");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 68);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ATTACHED");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 69);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ATTACHMOD");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 70);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KIND");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 71);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ALBUM");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 72);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Sent");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 73);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "UserSent");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 74);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Received");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 75);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Tag");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 76);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 77);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "NameText");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 78);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 79);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Title");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 80);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Titled");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 81);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MessageKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 82);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 83);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ChatKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 84);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "WebsiteKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 85);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 86);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 87);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 88);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 89);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AlbumKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 90);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ApplicationKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 91);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 92);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 93);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 94);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 95);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 96);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 97);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "NotesKind");
  NL::SearchRules::addVocabulary((uint64_t)this, (uint64_t)__p, 98);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
}

void sub_1A189E70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1A189E8A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  if (a15 < 0)
    JUMPOUT(0x1A189E898);
  JUMPOUT(0x1A189E89CLL);
}

BOOL NL::SearchRules::hasExpansions(NL::SearchRules *this, unsigned int a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;

  v4 = (char *)*((_QWORD *)this + 26);
  v2 = (char *)this + 208;
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = v2;
  do
  {
    v6 = *((_DWORD *)v3 + 8);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (char **)v3;
    else
      v8 = (char **)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *((_DWORD *)v5 + 8) > a2)
LABEL_12:
    v5 = v2;
  return v5 != v2;
}

BOOL NL::SearchRules::isEquivalent(NL::SearchRules *this, unsigned int a2, unsigned int a3)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  char *v11;
  char *v12;
  unsigned int v13;
  BOOL v14;
  char **v15;
  char *v16;
  char *v17;
  unsigned int v18;
  BOOL v19;
  char **v20;
  int v21;
  char *v22;
  unsigned int v23;
  BOOL v24;
  char **v25;

  v5 = (char *)*((_QWORD *)this + 8);
  v3 = (char *)this + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  v7 = v4;
  do
  {
    v8 = *((_DWORD *)v7 + 7);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (char **)v7;
    else
      v10 = (char **)(v7 + 8);
    if (v9)
      v6 = v7;
    v7 = *v10;
  }
  while (*v10);
  if (v6 == v3 || *((_DWORD *)v6 + 7) > a2)
    return 0;
  v11 = v3;
  v12 = v4;
  do
  {
    v13 = *((_DWORD *)v12 + 7);
    v14 = v13 >= a3;
    if (v13 >= a3)
      v15 = (char **)v12;
    else
      v15 = (char **)(v12 + 8);
    if (v14)
      v11 = v12;
    v12 = *v15;
  }
  while (*v15);
  if (v11 == v3 || *((_DWORD *)v11 + 7) > a3)
    return 0;
  v16 = v3;
  v17 = v4;
  do
  {
    v18 = *((_DWORD *)v17 + 7);
    v19 = v18 >= a2;
    if (v18 >= a2)
      v20 = (char **)v17;
    else
      v20 = (char **)(v17 + 8);
    if (v19)
      v16 = v17;
    v17 = *v20;
  }
  while (*v20);
  if (v16 == v3 || *((_DWORD *)v16 + 7) > a2)
    v16 = v3;
  v21 = *((_DWORD *)v16 + 8);
  v22 = v3;
  do
  {
    v23 = *((_DWORD *)v4 + 7);
    v24 = v23 >= a3;
    if (v23 >= a3)
      v25 = (char **)v4;
    else
      v25 = (char **)(v4 + 8);
    if (v24)
      v22 = v4;
    v4 = *v25;
  }
  while (*v25);
  if (v22 == v3 || *((_DWORD *)v22 + 7) > a3)
    v22 = v3;
  return v21 == *((_DWORD *)v22 + 8);
}

char *NL::SearchRules::term(NL::SearchRules *this, unsigned int a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  char *v10;
  unsigned int v11;
  BOOL v12;
  char **v13;

  v4 = (char *)*((_QWORD *)this + 2);
  v2 = (char *)this + 16;
  v3 = v4;
  if (!v4)
    goto LABEL_26;
  v5 = v2;
  v6 = v3;
  do
  {
    v7 = *((_DWORD *)v6 + 8);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (char **)v6;
    else
      v9 = (char **)(v6 + 8);
    if (v8)
      v5 = v6;
    v6 = *v9;
  }
  while (*v9);
  if (v5 == v2 || *((_DWORD *)v5 + 8) > a2)
  {
    do
    {
      v10 = v3;
      v3 = *(char **)v3;
    }
    while (v3);
    if (v10 != v2 && !*((_DWORD *)v10 + 8))
      return v10 + 40;
LABEL_26:
    v10 = v2;
    return v10 + 40;
  }
  v10 = v2;
  do
  {
    v11 = *((_DWORD *)v3 + 8);
    v12 = v11 >= a2;
    if (v11 >= a2)
      v13 = (char **)v3;
    else
      v13 = (char **)(v3 + 8);
    if (v12)
      v10 = v3;
    v3 = *v13;
  }
  while (*v13);
  if (v10 == v2 || *((_DWORD *)v10 + 8) > a2)
    goto LABEL_26;
  return v10 + 40;
}

uint64_t NL::SearchRules::termID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return 0;
  v4 = a1 + 32;
  if (a1 + 40 != std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 32, (const void **)a2))return *(unsigned int *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v4, (const void **)a2)+ 56);
  std::string::basic_string[abi:ne180100]<0>(__p, "None");
  v5 = *(unsigned int *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v4, (const void **)__p)+ 56);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_1A189EB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NL::SearchRules::score(NL::SearchRules *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  char **v11;
  char *v12;
  unsigned int v13;
  BOOL v14;
  char **v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unsigned int v21;
  BOOL v22;
  char **v23;
  char *v24;
  unsigned int v25;
  BOOL v26;
  char **v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  unsigned int v33;
  BOOL v34;
  uint64_t *v35;
  char *v37;
  unsigned int v38;
  BOOL v39;
  uint64_t *v40;

  v6 = (char *)*((_QWORD *)this + 26);
  v4 = (char *)this + 208;
  v5 = v6;
  if (!v6)
    return 0;
  v7 = v4;
  v8 = v5;
  do
  {
    v9 = *((_DWORD *)v8 + 8);
    v10 = v9 >= a3;
    if (v9 >= a3)
      v11 = (char **)v8;
    else
      v11 = (char **)(v8 + 8);
    if (v10)
      v7 = v8;
    v8 = *v11;
  }
  while (*v11);
  if (v7 == v4 || *((_DWORD *)v7 + 8) > a3)
    return 0;
  v12 = v4;
  do
  {
    v13 = *((_DWORD *)v5 + 8);
    v14 = v13 >= a3;
    if (v13 >= a3)
      v15 = (char **)v5;
    else
      v15 = (char **)(v5 + 8);
    if (v14)
      v12 = v5;
    v5 = *v15;
  }
  while (*v15);
  if (v12 == v4 || *((_DWORD *)v12 + 8) > a3)
    v12 = v4;
  v18 = (char *)*((_QWORD *)v12 + 6);
  v16 = v12 + 48;
  v17 = v18;
  if (!v18)
    return 0;
  v19 = v16;
  v20 = v17;
  do
  {
    v21 = *((_DWORD *)v20 + 8);
    v22 = v21 >= a2;
    if (v21 >= a2)
      v23 = (char **)v20;
    else
      v23 = (char **)(v20 + 8);
    if (v22)
      v19 = v20;
    v20 = *v23;
  }
  while (*v23);
  if (v19 == v16 || *((_DWORD *)v19 + 8) > a2)
    return 0;
  v24 = v16;
  do
  {
    v25 = *((_DWORD *)v17 + 8);
    v26 = v25 >= a2;
    if (v25 >= a2)
      v27 = (char **)v17;
    else
      v27 = (char **)(v17 + 8);
    if (v26)
      v24 = v17;
    v17 = *v27;
  }
  while (*v27);
  if (v24 == v16 || *((_DWORD *)v24 + 8) > a2)
    v24 = v16;
  v30 = (char *)*((_QWORD *)v24 + 6);
  v29 = v24 + 48;
  v28 = v30;
  if (!v30)
    return 0;
  v31 = v29;
  v32 = v28;
  do
  {
    v33 = *((_DWORD *)v32 + 7);
    v34 = v33 >= a4;
    if (v33 >= a4)
      v35 = (uint64_t *)v32;
    else
      v35 = (uint64_t *)(v32 + 8);
    if (v34)
      v31 = v32;
    v32 = (char *)*v35;
  }
  while (*v35);
  if (v31 == v29 || *((_DWORD *)v31 + 7) > a4)
    return 0;
  v37 = v29;
  do
  {
    v38 = *((_DWORD *)v28 + 7);
    v39 = v38 >= a4;
    if (v38 >= a4)
      v40 = (uint64_t *)v28;
    else
      v40 = (uint64_t *)(v28 + 8);
    if (v39)
      v37 = v28;
    v28 = (char *)*v40;
  }
  while (*v40);
  if (v37 == v29 || *((_DWORD *)v37 + 7) > a4)
    v37 = v29;
  return *((unsigned int *)v37 + 8);
}

uint64_t NL::SearchRules::termIDs(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  char v8;

  v8 = 0;
  v2 = *(_QWORD **)(result + 8);
  v3 = (_QWORD *)(result + 16);
  if (v2 != (_QWORD *)(result + 16))
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD, char *))(a2 + 16))(a2, *((unsigned int *)v2 + 8), &v8);
      if (v8)
        break;
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

void NL::SearchRules::expansions(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  int v32;
  _QWORD *v33;
  _QWORD *v34;
  void *__p;
  char *v36;
  char *v37;
  unsigned __int8 v38;

  v38 = 0;
  v5 = *(_QWORD *)(a1 + 208);
  v3 = a1 + 208;
  v4 = v5;
  if (v5)
  {
    v7 = v3;
    v8 = v4;
    do
    {
      v9 = *(_DWORD *)(v8 + 32);
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v8;
      else
        v11 = (uint64_t *)(v8 + 8);
      if (v10)
        v7 = v8;
      v8 = *v11;
    }
    while (*v11);
    if (v7 != v3 && *(_DWORD *)(v7 + 32) <= a2)
    {
      v12 = v3;
      do
      {
        v13 = *(_DWORD *)(v4 + 32);
        v14 = v13 >= a2;
        if (v13 >= a2)
          v15 = (uint64_t *)v4;
        else
          v15 = (uint64_t *)(v4 + 8);
        if (v14)
          v12 = v4;
        v4 = *v15;
      }
      while (*v15);
      if (v12 == v3 || *(_DWORD *)(v12 + 32) > a2)
        v12 = v3;
      v16 = *(_QWORD **)(v12 + 40);
      v17 = (_QWORD *)(v12 + 48);
      if (v16 != (_QWORD *)(v12 + 48))
      {
        do
        {
          __p = 0;
          v36 = 0;
          v37 = 0;
          v18 = (_QWORD *)v16[5];
          if (v18 != v16 + 6)
          {
            v19 = 0;
            do
            {
              if (v19 >= v37)
              {
                v20 = (char *)__p;
                v21 = (v19 - (_BYTE *)__p) >> 2;
                v22 = v21 + 1;
                if ((unint64_t)(v21 + 1) >> 62)
                  std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
                v23 = v37 - (_BYTE *)__p;
                if ((v37 - (_BYTE *)__p) >> 1 > v22)
                  v22 = v23 >> 1;
                if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                  v24 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v24 = v22;
                if (v24)
                {
                  v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)&v37, v24);
                  v20 = (char *)__p;
                  v19 = v36;
                }
                else
                {
                  v25 = 0;
                }
                v26 = &v25[4 * v21];
                *(_DWORD *)v26 = *((_DWORD *)v18 + 7);
                v27 = v26 + 4;
                while (v19 != v20)
                {
                  v28 = *((_DWORD *)v19 - 1);
                  v19 -= 4;
                  *((_DWORD *)v26 - 1) = v28;
                  v26 -= 4;
                }
                __p = v26;
                v36 = v27;
                v37 = &v25[4 * v24];
                if (v20)
                  operator delete(v20);
                v19 = v27;
              }
              else
              {
                *(_DWORD *)v19 = *((_DWORD *)v18 + 7);
                v19 += 4;
              }
              v36 = v19;
              v29 = (_QWORD *)v18[1];
              if (v29)
              {
                do
                {
                  v30 = v29;
                  v29 = (_QWORD *)*v29;
                }
                while (v29);
              }
              else
              {
                do
                {
                  v30 = (_QWORD *)v18[2];
                  v31 = *v30 == (_QWORD)v18;
                  v18 = v30;
                }
                while (!v31);
              }
              v18 = v30;
            }
            while (v30 != v16 + 6);
          }
          (*(void (**)(uint64_t, _QWORD, void **, unsigned __int8 *))(a3 + 16))(a3, *((unsigned int *)v16 + 8), &__p, &v38);
          v32 = v38;
          if (__p)
          {
            v36 = (char *)__p;
            operator delete(__p);
          }
          if (v32)
            break;
          v33 = (_QWORD *)v16[1];
          if (v33)
          {
            do
            {
              v34 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              v34 = (_QWORD *)v16[2];
              v31 = *v34 == (_QWORD)v16;
              v16 = v34;
            }
            while (!v31);
          }
          v16 = v34;
        }
        while (v34 != v17);
      }
    }
  }
}

void sub_1A189F008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NL::SearchRules::getTermID(uint64_t a1, const void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  v4 = (_QWORD *)(a1 + 32);
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 32, a2);
  if (a1 + 40 != v5)
    return *(unsigned int *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)v4, a2)+ 56);
  v7 = (_QWORD *)*v4;
  if (*v4 == v5)
  {
    result = 1;
  }
  else
  {
    v8 = 0;
    do
    {
      if (*((_DWORD *)v7 + 14) > v8)
        v8 = *((_DWORD *)v7 + 14);
      v9 = (_QWORD *)v7[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v7[2];
          v11 = *v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      v7 = v10;
    }
    while (v10 != (_QWORD *)v5);
    result = v8 + 1;
  }
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

void std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

void std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::~__func()
{
  JUMPOUT(0x1A1B0E068);
}

_QWORD *std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E45CE678;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E45CE678;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::target_type()
{
}

void std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,unsigned int>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t **v5;
  unsigned int v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = *((_DWORD *)v4 + 8);
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>>::__construct_node<std::pair<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>(a1, a3, (uint64_t)&v10);
    std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

_DWORD *std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>>::__construct_node<std::pair<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *result;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v5 = a1 + 8;
  result = operator new(0x40uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  result[8] = *(_DWORD *)a2;
  v7 = (_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)result + 5) = *(_QWORD *)(a2 + 8);
  *((_QWORD *)result + 6) = v8;
  v9 = (char *)(result + 12);
  v10 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)result + 7) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(a2 + 8) = v7;
    *v7 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *((_QWORD *)result + 5) = v9;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,unsigned int>>(uint64_t **a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = *a3;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

_OWORD *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned int>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    std::__tree<std::string>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::string>>(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  char *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x40uLL);
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v10 + 7) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,unsigned long>>(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v11 = *(_QWORD *)(a3 + 8);
    *((_DWORD *)v10 + 7) = *(_DWORD *)a3;
    *((_DWORD *)v10 + 8) = v11;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_QWORD *std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1A189F6EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::__push_back_slow_path<std::vector<unsigned int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1A189F7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1A189F864(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void NLAbstractDictionaryLookup::NLAbstractDictionaryLookup(NLAbstractDictionaryLookup *this)
{
  *(_QWORD *)this = &off_1E45CDE00;
  *((_QWORD *)this + 1) = 0;
}

void NLAbstractDictionaryLookup::~NLAbstractDictionaryLookup(NLAbstractDictionaryLookup *this)
{
  NL::StringMap *v1;

  *(_QWORD *)this = &off_1E45CDE00;
  v1 = (NL::StringMap *)*((_QWORD *)this + 1);
  if (v1)
  {
    NL::StringMap::~StringMap(v1);
    MEMORY[0x1A1B0E068]();
  }
}

uint64_t NLAbstractDictionaryLookup::getDictMap(NLAbstractDictionaryLookup *this)
{
  return *((_QWORD *)this + 1);
}

_QWORD *NLAbstractDictionaryLookup::getWord@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

_DWORD *NLMessageIntentTypeWithMetadata::NLMessageIntentTypeWithMetadata(_DWORD *a1, int a2, uint64_t a3)
{
  *a1 = a2;
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)(a1 + 2), a3);
  return a1;
}

void NLEnglishHindiDictionaryLookup::NLEnglishHindiDictionaryLookup(NLEnglishHindiDictionaryLookup *this)
{
  NLEnglishHindiDictionaryLookup *v1;

  NLAbstractDictionaryLookup::NLAbstractDictionaryLookup(this);
  *(_QWORD *)v1 = &off_1E45CE3E0;
  NLEnglishHindiDictionaryLookup::loadDictMap(v1);
}

void sub_1A189FA30(_Unwind_Exception *a1)
{
  NLAbstractDictionaryLookup *v1;

  NLAbstractDictionaryLookup::~NLAbstractDictionaryLookup(v1);
  _Unwind_Resume(a1);
}

void NLEnglishHindiDictionaryLookup::loadDictMap(NLEnglishHindiDictionaryLookup *this)
{
  const __CFString *v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, CFURLRef, uint64_t, uint64_t, uint64_t, _BYTE *);
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  CFLocaleCreate(0, CFSTR("hi"));
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v8 = MEMORY[0x1E0C809B0];
  v9 = 0x40000000;
  v10 = ___ZN30NLEnglishHindiDictionaryLookup11loadDictMapEv_block_invoke;
  v11 = &unk_1E45CF568;
  v12 = &v13;
  LMEnumerateAssetDataItems();
  v2 = (const __CFString *)v14[3];
  if (v2)
  {
    getUTF8StringFromCFString(v2, __p);
    CFRelease((CFTypeRef)v14[3]);
    v3 = NL::StringMap::createWithFile((char *)__p);
    *((_QWORD *)this + 1) = v3;
    if (!v3)
    {
      v4 = NL::CFLogger::sharedInstance(0);
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v4 + 16))(v4, 3, "Could not locate English-Hindi dictionary resource");
    }
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5 = NL::CFLogger::sharedInstance(0);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v5 + 16))(v5, 3, "Could not locate English-Hindi dictionary resource");
    *((_QWORD *)this + 1) = 0;
  }
  _Block_object_dispose(&v13, 8);
}

void sub_1A189FB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  _Block_object_dispose((const void *)(v14 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN30NLEnglishHindiDictionaryLookup11loadDictMapEv_block_invoke(uint64_t a1, CFURLRef url, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  const __CFString *PathComponent;
  const __CFString *v10;

  PathComponent = CFURLCopyLastPathComponent(url);
  if (PathComponent)
  {
    v10 = PathComponent;
    if (CFStringsAreEqual(PathComponent, CFSTR("english-hindi.dict")))
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFURLCopyPath(url);
      *a6 = 1;
    }
    CFRelease(v10);
  }
}

double NLEnglishHindiDictionaryLookup::getWord@<D0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  __int16 *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __int16 v13;
  NL::CFLogger *v14;
  uint64_t v15;
  const char *p_p;
  UniChar *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int16 *v23;
  __int16 *v24;
  __int16 v25;
  const __CFString *v26;
  double result;
  _QWORD *v28;
  UniChar *chars;
  __int16 *v30;
  __int16 *v31;
  std::string v32;
  void *__p;
  char v34;
  _QWORD v35[11];
  char v36;
  uint64_t v37;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    NL::StringMap::get(v4, a2, &v32);
    if (!std::string::compare(&v32, ""))
    {
      result = *(double *)&v32.__r_.__value_.__l.__data_;
      *(std::string *)a3 = v32;
    }
    else
    {
      v28 = a3;
      chars = 0;
      v5 = 0;
      v30 = 0;
      v31 = 0;
      size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v32;
      else
        v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v32.__r_.__value_.__l.__size_;
      v8 = (std::string *)((char *)v7 + size);
      v9 = *MEMORY[0x1E0DE4F60];
      v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v11 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        v12 = v7->__r_.__value_.__s.__data_[0];
        if (v12 > 0x71)
        {
          if (v12 == 114)
          {
            v13 = 44;
          }
          else
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
            std::ostream::operator<<();
            v14 = (NL::CFLogger *)std::stringbuf::str();
            v15 = NL::CFLogger::sharedInstance(v14);
            p_p = (const char *)&__p;
            if (v34 < 0)
              p_p = (const char *)__p;
            (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v15 + 16))(v15, 3, "Could not find decoding for character: %s\n", p_p);
            if (v34 < 0)
              operator delete(__p);
            v35[0] = v9;
            *(_QWORD *)((char *)v35 + *(_QWORD *)(v9 - 24)) = v10;
            v35[1] = v11;
            if (v36 < 0)
              operator delete((void *)v35[9]);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x1A1B0DFFC](&v37);
            v13 = 32;
            v5 = v30;
          }
        }
        else
        {
          v13 = v12 + 2304;
        }
        if (v5 >= v31)
        {
          v17 = chars;
          v18 = (char *)v5 - (char *)chars;
          if ((char *)v5 - (char *)chars <= -3)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v19 = v18 >> 1;
          if ((char *)v31 - (char *)chars <= (unint64_t)((v18 >> 1) + 1))
            v20 = v19 + 1;
          else
            v20 = (char *)v31 - (char *)chars;
          if ((unint64_t)((char *)v31 - (char *)chars) >= 0x7FFFFFFFFFFFFFFELL)
            v21 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)&v31, v21);
            v17 = chars;
            v5 = v30;
          }
          else
          {
            v22 = 0;
          }
          v23 = (__int16 *)&v22[2 * v19];
          *v23 = v13;
          v24 = v23 + 1;
          while (v5 != (__int16 *)v17)
          {
            v25 = *--v5;
            *--v23 = v25;
          }
          chars = (UniChar *)v23;
          v31 = (__int16 *)&v22[2 * v21];
          if (v17)
            operator delete(v17);
          v5 = v24;
        }
        else
        {
          *v5++ = v13;
        }
        v30 = v5;
        v7 = (std::string *)((char *)v7 + 1);
      }
      while (v7 != v8);
      v26 = CFStringCreateWithCharacters(0, chars, ((char *)v5 - (char *)chars) >> 1);
      getUTF8StringFromCFString(v26, v28);
      CFRelease(v26);
      if (chars)
        operator delete(chars);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  return result;
}

void sub_1A189FEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 + 23) < 0)
    operator delete(*a11);
  if (__p)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void NLTextSlot::~NLTextSlot(NLTextSlot *this)
{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 3);
  if (v1)
    CFRelease(v1);
}

uint64_t NLTextSlot::getRange(NLTextSlot *this)
{
  return *(_QWORD *)this;
}

uint64_t NLTextSlot::getSlotID(NLTextSlot *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t NLTextSlot::getResolvedDate(NLTextSlot *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t NLTextSlot::getAllDayEventFlag(NLTextSlot *this)
{
  return *((unsigned __int8 *)this + 32);
}

uint64_t NLTextStructuredEvent::NLTextStructuredEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  char *v11;
  char *v12;

  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v12 = (char *)(a1 + 80);
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)(a1 + 40), a7);
  if (v11 != (char *)a8)
    std::vector<NLTextSlot *>::__assign_with_size[abi:ne180100]<NLTextSlot **,NLTextSlot **>(v11, *(char **)a8, *(_QWORD *)(a8 + 8), (uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 3);
  if (v12 != (char *)a9)
    std::vector<NLTextSlot *>::__assign_with_size[abi:ne180100]<NLTextSlot **,NLTextSlot **>(v12, *(char **)a9, *(_QWORD *)(a9 + 8), (uint64_t)(*(_QWORD *)(a9 + 8) - *(_QWORD *)a9) >> 3);
  return a1;
}

void sub_1A18A0068(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 88) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 64) = v7;
    operator delete(v7);
  }
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void NLTextStructuredEvent::~NLTextStructuredEvent(NLTextStructuredEvent *this)
{
  NLTextSlot *v2;
  NLTextSlot **v3;
  NLTextSlot **v4;
  unint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  NLTextSlot *v9;

  v2 = (NLTextSlot *)*((_QWORD *)this + 4);
  if (v2)
  {
    NLTextSlot::~NLTextSlot(v2);
    MEMORY[0x1A1B0E068]();
  }
  if (*((_QWORD *)this + 5))
    std::shared_ptr<NLTextSlotRecurrentEvent>::reset[abi:ne180100]((_QWORD *)this + 5);
  v3 = (NLTextSlot **)*((_QWORD *)this + 7);
  v4 = (NLTextSlot **)*((_QWORD *)this + 8);
  if (v4 == v3)
  {
    v3 = (NLTextSlot **)*((_QWORD *)this + 8);
  }
  else
  {
    v5 = 0;
    do
    {
      if (v3[v5])
      {
        NLTextSlot::~NLTextSlot(v3[v5]);
        MEMORY[0x1A1B0E068]();
        v3 = (NLTextSlot **)*((_QWORD *)this + 7);
        v4 = (NLTextSlot **)*((_QWORD *)this + 8);
      }
      ++v5;
    }
    while (v5 < v4 - v3);
  }
  v6 = (_QWORD *)*((_QWORD *)this + 10);
  v7 = (_BYTE *)*((_QWORD *)this + 11);
  if (v7 == (_BYTE *)v6)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 11);
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (NLTextSlot *)v6[v8];
      if (v9)
      {
        NLTextSlot::~NLTextSlot(v9);
        MEMORY[0x1A1B0E068]();
        v6 = (_QWORD *)*((_QWORD *)this + 10);
        v7 = (_BYTE *)*((_QWORD *)this + 11);
      }
      ++v8;
    }
    while (v8 < (v7 - (_BYTE *)v6) >> 3);
    v3 = (NLTextSlot **)*((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 8) = v3;
  *((_QWORD *)this + 11) = v6;
  if (v6)
  {
    operator delete(v6);
    v3 = (NLTextSlot **)*((_QWORD *)this + 7);
  }
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
}

void std::shared_ptr<NLTextSlotRecurrentEvent>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t NLTextStructuredEvent::getActionPhraseRange(NLTextStructuredEvent *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t NLTextStructuredEvent::getRecurrentEvent(NLTextStructuredEvent *this)
{
  return *((_QWORD *)this + 5);
}

_QWORD *NLTextStructuredEvent::getLocationRanges@<X0>(NLTextStructuredEvent *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<NLTextSlot *>::__init_with_size[abi:ne180100]<NLTextSlot **,NLTextSlot **>(a2, *((const void **)this + 7), *((_QWORD *)this + 8), (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
}

_QWORD *NLTextStructuredEvent::getPeopleRanges@<X0>(NLTextStructuredEvent *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<NLTextSlot *>::__init_with_size[abi:ne180100]<NLTextSlot **,NLTextSlot **>(a2, *((const void **)this + 10), *((_QWORD *)this + 11), (uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3);
}

void NLTextSlotRecurrentEvent::NLTextSlotRecurrentEvent(NLTextSlotRecurrentEvent *this, CFTypeRef cf, CFTypeRef a3, CFTypeRef a4, CFRange a5, char a6)
{
  CFIndex length;
  CFIndex location;

  length = a5.length;
  location = a5.location;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (cf)
    *(_QWORD *)this = CFRetain(cf);
  if (a3)
    *((_QWORD *)this + 1) = CFRetain(a3);
  if (a4)
    *((_QWORD *)this + 4) = CFRetain(a4);
  *((_QWORD *)this + 2) = location;
  *((_QWORD *)this + 3) = length;
  *((_BYTE *)this + 40) = a6;
}

void NLTextSlotRecurrentEvent::~NLTextSlotRecurrentEvent(NLTextSlotRecurrentEvent *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)this;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 4);
  if (v4)
    CFRelease(v4);
}

uint64_t NLTextSlotRecurrentEvent::getEventEndDate(NLTextSlotRecurrentEvent *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t NLTextSlotRecurrentEvent::getAllDayEventFlag(NLTextSlotRecurrentEvent *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t NLTextSlotRecurrentEvent::setEventDateRange(uint64_t this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(this + 16) = a2;
  *(_QWORD *)(this + 24) = a3;
  return this;
}

void NLTextSlotParser::NLTextSlotParser(NLTextSlotParser *this, const __CFLocale *a2, const __CFDictionary *a3)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_QWORD *)this = MEMORY[0x1A1B0D624](*MEMORY[0x1E0C9AE00], a2);
  *((_QWORD *)this + 1) = CFRetain(a3);
}

void NLTextSlotParser::~NLTextSlotParser(NLTextSlotParser *this)
{
  const void *v2;
  const void *v3;
  NLTextSlotParserEventExtractor *v4;
  NLTextSlotParserDateTimeExtractor *v5;
  NLTextSlotParserNamedEntityExtractor *v6;
  NLTextSlotParserRecurrenceEventExtractor *v7;

  v2 = *(const void **)this;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
    CFRelease(v3);
  v4 = (NLTextSlotParserEventExtractor *)*((_QWORD *)this + 2);
  if (v4)
  {
    NLTextSlotParserEventExtractor::~NLTextSlotParserEventExtractor(v4);
    MEMORY[0x1A1B0E068]();
  }
  v5 = (NLTextSlotParserDateTimeExtractor *)*((_QWORD *)this + 3);
  if (v5)
  {
    NLTextSlotParserDateTimeExtractor::~NLTextSlotParserDateTimeExtractor(v5);
    MEMORY[0x1A1B0E068]();
  }
  v6 = (NLTextSlotParserNamedEntityExtractor *)*((_QWORD *)this + 4);
  if (v6)
  {
    NLTextSlotParserNamedEntityExtractor::~NLTextSlotParserNamedEntityExtractor(v6);
    MEMORY[0x1A1B0E068]();
  }
  v7 = (NLTextSlotParserRecurrenceEventExtractor *)*((_QWORD *)this + 5);
  if (v7)
  {
    NLTextSlotParserRecurrenceEventExtractor::~NLTextSlotParserRecurrenceEventExtractor(v7);
    MEMORY[0x1A1B0E068]();
  }
}

uint64_t NLTextSlotParser::createStructuredEvent(NLTextSlotParser *this, const __CFString *a2, const __CFTimeZone *a3)
{
  uint64_t v3;
  NLTextSlotParserEventExtractor *v7;
  uint64_t EventNameRange;
  uint64_t v9;
  uint64_t v10;
  uint64_t EventActionPhraseRange;
  uint64_t v12;
  uint64_t v13;
  NLTextSlotParserDateTimeExtractor *v14;
  uint64_t v15;
  CFTypeRef v16;
  char v17;
  NLTextSlotParserRecurrenceEventExtractor *v18;
  NLTextSlotParserNamedEntityExtractor *v19;
  _QWORD *v20;
  _QWORD *i;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  void *v68[2];
  void *__p;
  _QWORD *v70;
  CFTypeRef cf;
  __int128 v72;
  char v73;
  void *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  __int128 v80;

  v3 = 0;
  if (a3 && a2 && *(_QWORD *)this)
  {
    v80 = 0uLL;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v7 = (NLTextSlotParserEventExtractor *)*((_QWORD *)this + 2);
    if (!v7)
    {
      v7 = (NLTextSlotParserEventExtractor *)operator new();
      NLTextSlotParserEventExtractor::NLTextSlotParserEventExtractor(v7, *(const __CFLocale **)this);
      *((_QWORD *)this + 2) = v7;
    }
    EventNameRange = NLTextSlotParserEventExtractor::getEventNameRange(v7, a2);
    v10 = v9;
    EventActionPhraseRange = NLTextSlotParserEventExtractor::getEventActionPhraseRange(*((NLTextSlotParserEventExtractor **)this + 2), a2);
    v13 = v12;
    if (!*((_QWORD *)this + 3))
    {
      v14 = (NLTextSlotParserDateTimeExtractor *)operator new();
      NLTextSlotParserDateTimeExtractor::NLTextSlotParserDateTimeExtractor(v14, *(const __CFLocale **)this);
      *((_QWORD *)this + 3) = v14;
    }
    NLTextSlotParserDateTimeExtractor::getEventFixedDateTimeAndRange(a3, (uint64_t)&cf);
    v15 = operator new();
    v16 = cf;
    v17 = v73;
    *(_DWORD *)(v15 + 16) = 2;
    *(_QWORD *)(v15 + 24) = 0;
    *(_BYTE *)(v15 + 32) = v17;
    *(_OWORD *)v15 = v72;
    if (v16)
      *(_QWORD *)(v15 + 24) = CFRetain(v16);
    if (*((_QWORD *)this + 1))
    {
      v18 = (NLTextSlotParserRecurrenceEventExtractor *)*((_QWORD *)this + 5);
      if (!v18)
      {
        v18 = (NLTextSlotParserRecurrenceEventExtractor *)operator new();
        NLTextSlotParserRecurrenceEventExtractor::NLTextSlotParserRecurrenceEventExtractor(v18, *((const __CFDictionary **)this + 1));
        *((_QWORD *)this + 5) = v18;
      }
      NLTextSlotParserRecurrenceEventExtractor::getRecurrentEventDatesAndFrequency(v18, a2, a3, v68);
      v80 = *(_OWORD *)v68;
    }
    v19 = (NLTextSlotParserNamedEntityExtractor *)*((_QWORD *)this + 4);
    if (!v19)
    {
      v19 = (NLTextSlotParserNamedEntityExtractor *)operator new();
      NLTextSlotParserNamedEntityExtractor::NLTextSlotParserNamedEntityExtractor(v19, *(const __CFLocale **)this);
      *((_QWORD *)this + 4) = v19;
    }
    v66 = v10;
    NLTextSlotParserNamedEntityExtractor::getLocationAndPeopleNameRanges(v19, a2, (uint64_t)v68);
    v64 = v13;
    v65 = EventActionPhraseRange;
    v20 = v68[0];
    for (i = v68[1]; v20 != i; v20 += 3)
    {
      v22 = *(_DWORD *)v20;
      v23 = v20[1];
      v24 = v20[2];
      v25 = operator new();
      v26 = v25;
      *(_DWORD *)(v25 + 16) = v22;
      *(_QWORD *)(v25 + 24) = 0;
      *(_BYTE *)(v25 + 32) = 0;
      *(_QWORD *)v25 = v23;
      *(_QWORD *)(v25 + 8) = v24;
      v27 = v78;
      if (v78 >= v79)
      {
        v29 = v78 - v77;
        if ((unint64_t)(v29 + 1) >> 61)
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        v30 = ((char *)v79 - (char *)v77) >> 2;
        if (v30 <= v29 + 1)
          v30 = v29 + 1;
        if ((unint64_t)((char *)v79 - (char *)v77) >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v79, v31);
        else
          v32 = 0;
        v33 = (uint64_t *)&v32[8 * v29];
        *v33 = v26;
        v28 = v33 + 1;
        v35 = v77;
        v34 = v78;
        if (v78 != v77)
        {
          do
          {
            v36 = *--v34;
            *--v33 = v36;
          }
          while (v34 != v35);
          v34 = v77;
        }
        v77 = v33;
        v78 = v28;
        v79 = (uint64_t *)&v32[8 * v31];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *v78 = v25;
        v28 = v27 + 1;
      }
      v78 = v28;
    }
    v37 = __p;
    v38 = v70;
    if (__p != v70)
    {
      do
      {
        v39 = *(_DWORD *)v37;
        v40 = v37[1];
        v41 = v37[2];
        v42 = operator new();
        v43 = v42;
        *(_DWORD *)(v42 + 16) = v39;
        *(_QWORD *)(v42 + 24) = 0;
        *(_BYTE *)(v42 + 32) = 0;
        *(_QWORD *)v42 = v40;
        *(_QWORD *)(v42 + 8) = v41;
        v44 = v75;
        if (v75 >= v76)
        {
          v46 = ((char *)v75 - (_BYTE *)v74) >> 3;
          if ((unint64_t)(v46 + 1) >> 61)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v47 = ((char *)v76 - (_BYTE *)v74) >> 2;
          if (v47 <= v46 + 1)
            v47 = v46 + 1;
          if ((unint64_t)((char *)v76 - (_BYTE *)v74) >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v47;
          if (v48)
            v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v76, v48);
          else
            v49 = 0;
          v50 = (uint64_t *)&v49[8 * v46];
          *v50 = v43;
          v45 = v50 + 1;
          v52 = (char *)v74;
          v51 = (char *)v75;
          if (v75 != v74)
          {
            do
            {
              v53 = *((_QWORD *)v51 - 1);
              v51 -= 8;
              *--v50 = v53;
            }
            while (v51 != v52);
            v51 = (char *)v74;
          }
          v74 = v50;
          v75 = v45;
          v76 = (uint64_t *)&v49[8 * v48];
          if (v51)
            operator delete(v51);
        }
        else
        {
          *v75 = v42;
          v45 = v44 + 1;
        }
        v75 = v45;
        v37 += 3;
      }
      while (v37 != v38);
    }
    v54 = operator new();
    v3 = v54;
    v67 = v80;
    if (*((_QWORD *)&v80 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    NLTextStructuredEvent::NLTextStructuredEvent(v54, EventNameRange, v66, v65, v64, v15, (uint64_t *)&v67, (uint64_t)&v77, (uint64_t)&v74);
    v57 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
    {
      v58 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    if (__p)
    {
      v70 = __p;
      operator delete(__p);
    }
    if (v68[0])
    {
      v68[1] = v68[0];
      operator delete(v68[0]);
    }
    if (v74)
    {
      v75 = (uint64_t *)v74;
      operator delete(v74);
    }
    if (v77)
    {
      v78 = v77;
      operator delete(v77);
    }
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
    if (*((_QWORD *)&v80 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
  }
  return v3;
}

void sub_1A18A0984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  void *v31;

  MEMORY[0x1A1B0E068](v28, 0x60C40FAD0F902);
  if (__p)
    operator delete(__p);
  v31 = *(void **)(v29 - 136);
  if (v31)
  {
    *(_QWORD *)(v29 - 128) = v31;
    operator delete(v31);
  }
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v29 - 112);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::vector<std::pair<NLTextSlotID,CFRange>>,std::vector<std::pair<NLTextSlotID,CFRange>>>::~pair(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

char *std::vector<NLTextSlot *>::__assign_with_size[abi:ne180100]<NLTextSlot **,NLTextSlot **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<__CFString const*>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *std::vector<NLTextSlot *>::__init_with_size[abi:ne180100]<NLTextSlot **,NLTextSlot **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<__CFString const*>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1A18A0C38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void NLQamus::NLQamus(NLQamus *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 58) = 1065353216;
  *(_OWORD *)((char *)this + 216) = 0u;
  NLConvertBW2UTF::NLConvertBW2UTF((NLQamus *)((char *)this + 240));
}

void sub_1A18A0CF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v6);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void NLQamus::~NLQamus(NLQamus *this)
{
  char *v2;

  v2 = (char *)this + 240;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 280);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v2);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)this + 200);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)this + 160);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this);
}

uint64_t NLQamus::getBw2UTFConverter@<X0>(NLQamus *this@<X0>, uint64_t a2@<X8>)
{
  std::unordered_map<std::string,std::string>::unordered_map(a2, (uint64_t)this + 240);
  return std::unordered_map<std::string,std::string>::unordered_map(a2 + 40, (uint64_t)this + 280);
}

void sub_1A18A0DCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t NLQamus::loadTable@<X0>(uint64_t a1@<X8>)
{
  std::locale::id *v2;
  const std::locale::facet *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  BOOL v6;
  BOOL v7;
  std::string::size_type size;
  std::__wrap_iter<const char *> v9;
  std::__wrap_iter<const char *> v10;
  unint64_t v11;
  unint64_t v12;
  std::__wrap_iter<const char *> v13;
  std::__wrap_iter<const char *> v14;
  unint64_t v15;
  unint64_t v16;
  std::__wrap_iter<const char *> v17;
  std::__wrap_iter<const char *> v18;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t *v26;
  unint64_t v27;
  std::string v29;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v30;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v31;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v32;
  std::string __p;
  _QWORD v34[2];
  _BYTE v35[408];
  _QWORD v36[22];

  v36[19] = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  std::ifstream::basic_ifstream(v34);
  memset(&__p, 0, sizeof(__p));
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v32.__traits_, "^\\s+", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v31.__traits_, "\\s+$", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v30.__traits_, "\\s+", 0);
  v2 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24)));
    v3 = std::locale::use_facet((const std::locale *)&v29, v2);
    v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale((std::locale *)&v29);
    v5 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v34, (uint64_t)&__p, v4);
    if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)
      break;
    trim((unint64_t)&__p, &v29);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v29;
    std::string::basic_string[abi:ne180100]<0>(&v29, ";");
    v6 = startswith((unsigned __int8 *)&__p, (unsigned __int8 *)&v29);
    v7 = v6;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v29.__r_.__value_.__l.__data_);
      if (!v7)
        goto LABEL_9;
    }
    else if (!v6)
    {
LABEL_9:
      memset(&v29, 0, sizeof(v29));
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9.__i_ = (std::__wrap_iter<const char *>::iterator_type)&__p;
      else
        v9.__i_ = (std::__wrap_iter<const char *>::iterator_type)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      v10.__i_ = &v9.__i_[size];
      std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v29, v9, v10, &v32, "", 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v11 = v29.__r_.__value_.__r.__words[2];
      __p = v29;
      memset(&v29, 0, sizeof(v29));
      v12 = HIBYTE(v11);
      if ((v12 & 0x80u) == 0)
        v13.__i_ = (std::__wrap_iter<const char *>::iterator_type)&__p;
      else
        v13.__i_ = (std::__wrap_iter<const char *>::iterator_type)__p.__r_.__value_.__r.__words[0];
      if ((v12 & 0x80u) != 0)
        v12 = __p.__r_.__value_.__l.__size_;
      v14.__i_ = &v13.__i_[v12];
      std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v29, v13, v14, &v31, "", 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v15 = v29.__r_.__value_.__r.__words[2];
      __p = v29;
      memset(&v29, 0, sizeof(v29));
      v16 = HIBYTE(v15);
      if ((v16 & 0x80u) == 0)
        v17.__i_ = (std::__wrap_iter<const char *>::iterator_type)&__p;
      else
        v17.__i_ = (std::__wrap_iter<const char *>::iterator_type)__p.__r_.__value_.__r.__words[0];
      if ((v16 & 0x80u) != 0)
        v16 = __p.__r_.__value_.__l.__size_;
      v18.__i_ = &v17.__i_[v16];
      std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v29, v17, v18, &v30, " ", 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v29;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)&__p, (uint64_t)&__p);
    }
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24)), *(_DWORD *)&v35[*(_QWORD *)(v34[0] - 24) + 16] | 4);
  cntrl = v30.__start_.__cntrl_;
  if (v30.__start_.__cntrl_)
  {
    p_shared_owners = &v30.__start_.__cntrl_->__shared_owners_;
    do
      v21 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v21 - 1, (unint64_t *)p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  std::locale::~locale(&v30.__traits_.__loc_);
  v22 = v31.__start_.__cntrl_;
  if (v31.__start_.__cntrl_)
  {
    v23 = &v31.__start_.__cntrl_->__shared_owners_;
    do
      v24 = __ldaxr((unint64_t *)v23);
    while (__stlxr(v24 - 1, (unint64_t *)v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::locale::~locale(&v31.__traits_.__loc_);
  v25 = v32.__start_.__cntrl_;
  if (v32.__start_.__cntrl_)
  {
    v26 = &v32.__start_.__cntrl_->__shared_owners_;
    do
      v27 = __ldaxr((unint64_t *)v26);
    while (__stlxr(v27 - 1, (unint64_t *)v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::locale::~locale(&v32.__traits_.__loc_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v34[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1A1B0DEAC](v35);
  std::istream::~istream();
  return MEMORY[0x1A1B0DFFC](v36);
}

void sub_1A18A1200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::locale a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::locale a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46)
{
  uint64_t v46;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::locale::~locale(&a24);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::locale::~locale(&a32);
  if (a45 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a46);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v46);
  _Unwind_Resume(a1);
}

uint64_t NLQamus::loadDict@<X0>(uint64_t a1@<X8>)
{
  std::locale::id *v1;
  const std::locale::facet *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  BOOL v5;
  BOOL v6;
  unint64_t v7;
  std::string::size_type size;
  std::__wrap_iter<const char *> v9;
  std::__wrap_iter<const char *> v10;
  std::string *p_s;
  uint64_t v12;
  std::string::size_type v13;
  std::string::size_type v14;
  int v15;
  std::string::size_type v16;
  std::string *v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  uint64_t v21;
  std::string *v22;
  __int128 v23;
  unsigned __int8 *v24;
  size_t v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *p_traits;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  const std::string::value_type *p_p;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string::size_type v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  std::string *v78;
  std::string *v79;
  std::string::size_type v80;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v83;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string __s;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v101;
  std::string v102;
  uint64_t v103;
  std::string *v104;
  unint64_t v105;
  __int128 __p;
  const std::collate<char> *col;
  std::string traits;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;
  std::string v113;
  std::string v114;
  std::string *__str;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[4];
  int v119;
  void *v120[2];
  uint64_t v121;
  std::__split_buffer<std::string> __v;
  _QWORD v123[2];
  _QWORD v124[2];
  _BYTE v125[408];
  _QWORD v126[22];

  v126[19] = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  std::ifstream::basic_ifstream(v124);
  v1 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  v120[1] = 0;
  v120[0] = 0;
  v121 = 0;
  memset(v118, 0, sizeof(v118));
  v119 = 1065353216;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v124 + *(_QWORD *)(v124[0] - 24)));
    v2 = std::locale::use_facet(&v101.__traits_.__loc_, v1);
    v3 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
    std::locale::~locale(&v101.__traits_.__loc_);
    v4 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v124, (uint64_t)v120, v3);
    if ((*((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 5) != 0)
      break;
    std::string::basic_string[abi:ne180100]<0>(&v101, ";");
    v5 = startswith((unsigned __int8 *)v120, (unsigned __int8 *)&v101);
    v6 = v5;
    if (SHIBYTE(v101.__traits_.__col_) < 0)
    {
      operator delete(v101.__traits_.__loc_.__locale_);
      if (!v6)
        goto LABEL_7;
    }
    else if (!v5)
    {
LABEL_7:
      v116 = 0;
      __str = 0;
      v117 = 0;
      splitWithChar((uint64_t)v120, 9u, (uint64_t)&__str);
      std::string::basic_string[abi:ne180100]<0>(&v114, "");
      std::string::basic_string[abi:ne180100]<0>(&v113, "");
      std::string::basic_string[abi:ne180100]<0>(&v112, "");
      std::string::basic_string[abi:ne180100]<0>(&v111, "");
      std::string::basic_string[abi:ne180100]<0>(&v110, "");
      std::string::basic_string[abi:ne180100]<0>(&v109, "");
      std::string::basic_string[abi:ne180100]<0>(&traits, "");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      v7 = 0xAAAAAAAAAAAAAAABLL * ((v116 - (uint64_t)__str) >> 3);
      if (v7 == 5)
      {
        std::string::operator=(&v112, __str);
        std::string::operator=(&v111, __str + 1);
        std::string::operator=(&v110, __str + 2);
        std::string::operator=(&v109, __str + 3);
        std::string::operator=(&traits, __str + 4);
        trim((unint64_t)&traits, &v101);
        if (SHIBYTE(traits.__r_.__value_.__r.__words[2]) < 0)
          operator delete(traits.__r_.__value_.__l.__data_);
        traits = (std::string)v101.__traits_;
      }
      else
      {
        if (v7 == 6)
        {
          std::string::operator=(&v113, __str);
          std::string::operator=(&v112, __str + 1);
          std::string::operator=(&v111, __str + 2);
          std::string::operator=(&v110, __str + 3);
          std::string::operator=(&v109, __str + 4);
          trim((unint64_t)&__str[5], &v101);
          if (SHIBYTE(traits.__r_.__value_.__r.__words[2]) < 0)
            operator delete(traits.__r_.__value_.__l.__data_);
          traits = (std::string)v101.__traits_;
        }
        else
        {
          if (v7 != 8)
            goto LABEL_21;
          std::string::operator=(&v114, __str);
          std::string::operator=(&v113, __str + 1);
          std::string::operator=(&v112, __str + 2);
          std::string::operator=(&v111, __str + 3);
          std::string::operator=(&v110, __str + 4);
          std::string::operator=(&v109, __str + 5);
          std::string::operator=(&traits, __str + 6);
          trim((unint64_t)&__str[7], &v101);
          if (SHIBYTE(col) < 0)
            operator delete((void *)__p);
          __p = *(_OWORD *)&v101.__traits_.__loc_.__locale_;
          col = v101.__traits_.__col_;
        }
        if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v118, (unsigned __int8 *)&v113))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v118, (unsigned __int8 *)&v113, (uint64_t)&v113);
      }
LABEL_21:
      v104 = 0;
      v103 = 0;
      v105 = 0;
      v104 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v103, (__int128 *)&v112);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v102, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
      else
        v102 = v112;
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v101.__traits_, "^[>|<{]", 0);
      memset(&__s, 0, sizeof(__s));
      size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v102;
      else
        v9.__i_ = (std::__wrap_iter<const char *>::iterator_type)v102.__r_.__value_.__r.__words[0];
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v102.__r_.__value_.__l.__size_;
      v10.__i_ = &v9.__i_[size];
      std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char *>,std::regex_traits<char>,char>(&__s, v9, v10, &v101, "A", 0);
      v12 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      else
        v13 = v102.__r_.__value_.__l.__size_;
      v14 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      v15 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
      v16 = __s.__r_.__value_.__l.__size_;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = __s.__r_.__value_.__l.__size_;
      if (v13 != v14)
        goto LABEL_45;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_s = &__s;
      else
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&v102.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(v102.__r_.__value_.__l.__data_, p_s, v102.__r_.__value_.__l.__size_))
          goto LABEL_45;
      }
      else if (*((_BYTE *)&v102.__r_.__value_.__s + 23))
      {
        v17 = &v102;
        while (v17->__r_.__value_.__s.__data_[0] == p_s->__r_.__value_.__s.__data_[0])
        {
          v17 = (std::string *)((char *)v17 + 1);
          p_s = (std::string *)((char *)p_s + 1);
          if (!--v12)
            goto LABEL_52;
        }
LABEL_45:
        v18 = v104;
        if ((unint64_t)v104 >= v105)
        {
          v20 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v103, (__int128 *)&__s);
        }
        else
        {
          if (v15 < 0)
          {
            std::string::__init_copy_ctor_external(v104, __s.__r_.__value_.__l.__data_, v16);
          }
          else
          {
            v19 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
            v104->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
          }
          v20 = v18 + 1;
        }
        v104 = v20;
      }
LABEL_52:
      v21 = v103;
      v22 = v104;
      while ((std::string *)v21 != v22)
      {
        if (*(char *)(v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v21, *(_QWORD *)(v21 + 8));
        }
        else
        {
          v23 = *(_OWORD *)v21;
          v99.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 16);
          *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v23;
        }
        __v.__first_ = &v99;
        v24 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v99, (uint64_t)&std::piecewise_construct, (__int128 **)&__v);
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
        else
          v25 = v99.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v86, v25 + 1);
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &v86;
        else
          v26 = (std::string *)v86.__r_.__value_.__r.__words[0];
        if (v25)
        {
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v99;
          else
            v27 = (std::string *)v99.__r_.__value_.__r.__words[0];
          memmove(v26, v27, v25);
        }
        *(_WORD *)((char *)&v26->__r_.__value_.__l.__data_ + v25) = 9;
        if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = &v111;
        else
          v28 = (std::string *)v111.__r_.__value_.__r.__words[0];
        if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
        else
          v29 = v111.__r_.__value_.__l.__size_;
        v30 = std::string::append(&v86, (const std::string::value_type *)v28, v29);
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v87.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = std::string::append(&v87, "\t");
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = &v110;
        else
          v34 = (std::string *)v110.__r_.__value_.__r.__words[0];
        if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
        else
          v35 = v110.__r_.__value_.__l.__size_;
        v36 = std::string::append(&v88, (const std::string::value_type *)v34, v35);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v38 = std::string::append(&v89, "\t");
        v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = &v109;
        else
          v40 = (std::string *)v109.__r_.__value_.__r.__words[0];
        if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
        else
          v41 = v109.__r_.__value_.__l.__size_;
        v42 = std::string::append(&v90, (const std::string::value_type *)v40, v41);
        v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        v44 = std::string::append(&v91, "\t");
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((traits.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_traits = &traits;
        else
          p_traits = (std::string *)traits.__r_.__value_.__r.__words[0];
        if ((traits.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = HIBYTE(traits.__r_.__value_.__r.__words[2]);
        else
          v47 = traits.__r_.__value_.__l.__size_;
        v48 = std::string::append(&v92, (const std::string::value_type *)p_traits, v47);
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        v50 = std::string::append(&v93, "\t");
        v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = &v113;
        else
          v52 = (std::string *)v113.__r_.__value_.__r.__words[0];
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
        else
          v53 = v113.__r_.__value_.__l.__size_;
        v54 = std::string::append(&v94, (const std::string::value_type *)v52, v53);
        v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        v56 = std::string::append(&v95, "\t");
        v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(col) >= 0)
          p_p = (const std::string::value_type *)&__p;
        else
          p_p = (const std::string::value_type *)__p;
        if (SHIBYTE(col) >= 0)
          v59 = HIBYTE(col);
        else
          v59 = *((_QWORD *)&__p + 1);
        v60 = std::string::append(&v96, p_p, v59);
        v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        v62 = std::string::append(&v97, "\t");
        v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64 = &v114;
        else
          v64 = (std::string *)v114.__r_.__value_.__r.__words[0];
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
        else
          v65 = v114.__r_.__value_.__l.__size_;
        v66 = std::string::append(&v98, (const std::string::value_type *)v64, v65);
        v67 = v66->__r_.__value_.__r.__words[0];
        v123[0] = v66->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v123 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
        v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        v69 = *((_QWORD *)v24 + 7);
        v70 = *((_QWORD *)v24 + 6);
        if (v70 >= v69)
        {
          v73 = *((_QWORD *)v24 + 5);
          v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - v73) >> 3);
          v75 = v74 + 1;
          if (v74 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - v73) >> 3);
          if (2 * v76 > v75)
            v75 = 2 * v76;
          if (v76 >= 0x555555555555555)
            v77 = 0xAAAAAAAAAAAAAAALL;
          else
            v77 = v75;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v24 + 56);
          if (v77)
            v78 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v24 + 56), v77);
          else
            v78 = 0;
          v79 = v78 + v74;
          __v.__first_ = v78;
          __v.__begin_ = v79;
          __v.__end_cap_.__value_ = &v78[v77];
          v80 = v123[0];
          v79->__r_.__value_.__r.__words[0] = v67;
          v79->__r_.__value_.__l.__size_ = v80;
          *(std::string::size_type *)((char *)&v79->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v123 + 7);
          *((_BYTE *)&v79->__r_.__value_.__s + 23) = v68;
          v123[0] = 0;
          *(_QWORD *)((char *)v123 + 7) = 0;
          __v.__end_ = v79 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v24 + 40), &__v);
          v72 = *((_QWORD *)v24 + 6);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          v71 = v123[0];
          *(_QWORD *)v70 = v67;
          *(_QWORD *)(v70 + 8) = v71;
          *(_QWORD *)(v70 + 15) = *(_QWORD *)((char *)v123 + 7);
          *(_BYTE *)(v70 + 23) = v68;
          v123[0] = 0;
          *(_QWORD *)((char *)v123 + 7) = 0;
          v72 = v70 + 24;
          *((_QWORD *)v24 + 6) = v70 + 24;
        }
        *((_QWORD *)v24 + 6) = v72;
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v98.__r_.__value_.__l.__data_);
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
        v21 += 24;
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      cntrl = v101.__start_.__cntrl_;
      v1 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      if (v101.__start_.__cntrl_)
      {
        p_shared_owners = &v101.__start_.__cntrl_->__shared_owners_;
        do
          v83 = __ldaxr((unint64_t *)p_shared_owners);
        while (__stlxr(v83 - 1, (unint64_t *)p_shared_owners));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *, std::string *))cntrl->__on_zero_shared)(cntrl, p_s);
          std::__shared_weak_count::__release_weak(cntrl);
        }
      }
      std::locale::~locale(&v101.__traits_.__loc_);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      v101.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v103;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
      if (SHIBYTE(col) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(traits.__r_.__value_.__r.__words[2]) < 0)
        operator delete(traits.__r_.__value_.__l.__data_);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
      v101.__traits_.__loc_.__locale_ = (std::locale::__imp *)&__str;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
    }
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v124 + *(_QWORD *)(v124[0] - 24)), *(_DWORD *)&v125[*(_QWORD *)(v124[0] - 24) + 16] | 4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v118);
  if (SHIBYTE(v121) < 0)
    operator delete(v120[0]);
  v124[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v124 + *(_QWORD *)(v124[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1A1B0DEAC](v125);
  std::istream::~istream();
  return MEMORY[0x1A1B0DFFC](v126);
}

void sub_1A18A1EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(a9);
  _Unwind_Resume(a1);
}

void sub_1A18A2228()
{
  JUMPOUT(0x1A18A20D4);
}

std::string *std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char *>,std::regex_traits<char>,char>(std::string *a1, std::__wrap_iter<const char *> a2, std::__wrap_iter<const char *> a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, char *a5, unsigned __int32 __m)
{
  __int16 v6;
  std::string::value_type *i;
  std::__wrap_iter<const char *>::iterator_type v11;
  std::string::value_type *v12;
  unsigned __int8 *v13;
  std::string::value_type *v14;
  std::__wrap_iter<const char *>::iterator_type v15;
  _QWORD v17[3];
  int v18;
  void *__p[2];
  _BYTE v20[25];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v29;

  v6 = __m;
  i = (std::string::value_type *)a2.__i_;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v29, a2, a3, a4, (std::regex_constants::match_flag_type)__m);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  *(_OWORD *)__p = 0u;
  memset(v20, 0, sizeof(v20));
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  if (std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::operator==((uint64_t)&v29, (uint64_t)v17))
  {
    if ((v6 & 0x200) == 0)
    {
      while (i != a3.__i_)
        std::string::push_back(a1, *i++);
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = (unsigned __int8 *)&a5[strlen(a5)];
    while (!std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::operator==((uint64_t)&v29, (uint64_t)v17))
    {
      if ((v6 & 0x200) == 0)
      {
        v14 = (std::string::value_type *)v29.__match_.__prefix_.first.__i_;
        v15 = v29.__match_.__prefix_.second.__i_;
        while (v14 != v15)
          std::string::push_back(a1, *v14++);
      }
      a1 = std::match_results<std::__wrap_iter<char const*>>::format<std::back_insert_iterator<std::string>>((std::string::value_type ***)&v29.__match_, a1, (unsigned __int8 *)a5, v13, v6);
      v12 = (std::string::value_type *)v29.__match_.__suffix_.first.__i_;
      v11 = v29.__match_.__suffix_.second.__i_;
      if ((v6 & 0x400) != 0)
        break;
      std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v29);
    }
    if ((v6 & 0x200) == 0)
    {
      while (v12 != v11)
        std::string::push_back(a1, *v12++);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v29.__match_.__matches_.__begin_)
  {
    v29.__match_.__matches_.__end_ = v29.__match_.__matches_.__begin_;
    operator delete(v29.__match_.__matches_.__begin_);
  }
  return a1;
}

void sub_1A18A23AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

void NLQamus::loadData(NLQamus *this)
{
  CFLocaleRef v2;
  uint64_t v3[16];
  _QWORD v4[5];
  void *__p;
  char v6;
  _QWORD v7[5];
  void *v8;
  char v9;
  _QWORD v10[5];
  void *v11;
  char v12;
  _QWORD v13[5];
  void *v14;
  char v15;
  _QWORD v16[5];
  void *v17;
  char v18;
  _QWORD v19[5];
  void *v20;
  char v21;
  _QWORD v22[5];
  void *v23;
  char v24;

  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x4002000000;
  v22[3] = __Block_byref_object_copy__13;
  v22[4] = __Block_byref_object_dispose__13;
  std::string::basic_string[abi:ne180100]<0>(&v23, "");
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x4002000000;
  v19[3] = __Block_byref_object_copy__13;
  v19[4] = __Block_byref_object_dispose__13;
  std::string::basic_string[abi:ne180100]<0>(&v20, "");
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x4002000000;
  v16[3] = __Block_byref_object_copy__13;
  v16[4] = __Block_byref_object_dispose__13;
  std::string::basic_string[abi:ne180100]<0>(&v17, "");
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x4002000000;
  v13[3] = __Block_byref_object_copy__13;
  v13[4] = __Block_byref_object_dispose__13;
  std::string::basic_string[abi:ne180100]<0>(&v14, "");
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x4002000000;
  v10[3] = __Block_byref_object_copy__13;
  v10[4] = __Block_byref_object_dispose__13;
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x4002000000;
  v7[3] = __Block_byref_object_copy__13;
  v7[4] = __Block_byref_object_dispose__13;
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x4002000000;
  v4[3] = __Block_byref_object_copy__13;
  v4[4] = __Block_byref_object_dispose__13;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v2 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("ar"));
  v3[5] = MEMORY[0x1E0C809B0];
  v3[6] = 0x40000000;
  v3[7] = (uint64_t)___ZN7NLQamus8loadDataEv_block_invoke;
  v3[8] = (uint64_t)&unk_1E45CF590;
  v3[9] = (uint64_t)v22;
  v3[10] = (uint64_t)v19;
  v3[11] = (uint64_t)v16;
  v3[12] = (uint64_t)v13;
  v3[13] = (uint64_t)v10;
  v3[14] = (uint64_t)v7;
  v3[15] = (uint64_t)v4;
  NL::Resource::enumerateAssetResourcesWithContentType();
  CFRelease(v2);
  NLConvertBW2UTF::loadBw2utf((uint64_t)this + 240);
  NLQamus::loadDict((uint64_t)v3);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__move_assign((uint64_t)this + 120, v3);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v3);
  NLQamus::loadDict((uint64_t)v3);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__move_assign((uint64_t)this + 160, v3);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v3);
  NLQamus::loadDict((uint64_t)v3);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__move_assign((uint64_t)this + 200, v3);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v3);
  NLQamus::loadTable((uint64_t)v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)this, v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v3);
  NLQamus::loadTable((uint64_t)v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)this + 40, v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v3);
  NLQamus::loadTable((uint64_t)v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)this + 80, v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v3);
  _Block_object_dispose(v4, 8);
  if (v6 < 0)
    operator delete(__p);
  _Block_object_dispose(v7, 8);
  if (v9 < 0)
    operator delete(v8);
  _Block_object_dispose(v10, 8);
  if (v12 < 0)
    operator delete(v11);
  _Block_object_dispose(v13, 8);
  if (v15 < 0)
    operator delete(v14);
  _Block_object_dispose(v16, 8);
  if (v18 < 0)
    operator delete(v17);
  _Block_object_dispose(v19, 8);
  if (v21 < 0)
    operator delete(v20);
  _Block_object_dispose(v22, 8);
  if (v24 < 0)
    operator delete(v23);
}

void sub_1A18A2758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  uint64_t v68;

  _Block_object_dispose(&a25, 8);
  if (a35 < 0)
    operator delete(__p);
  _Block_object_dispose(&a36, 8);
  if (a46 < 0)
    operator delete(a41);
  _Block_object_dispose(&a47, 8);
  if (a57 < 0)
    operator delete(a52);
  _Block_object_dispose(&a58, 8);
  if (a68 < 0)
    operator delete(a63);
  _Block_object_dispose((const void *)(v68 - 256), 8);
  if (*(char *)(v68 - 193) < 0)
    operator delete(*(void **)(v68 - 216));
  _Block_object_dispose((const void *)(v68 - 192), 8);
  if (*(char *)(v68 - 129) < 0)
    operator delete(*(void **)(v68 - 152));
  _Block_object_dispose((const void *)(v68 - 128), 8);
  if (*(char *)(v68 - 65) < 0)
    operator delete(*(void **)(v68 - 88));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN7NLQamus8loadDataEv_block_invoke(int a1, const __CFURL **this)
{
  _QWORD *exception;
  void *__p[2];

  if (this)
    NL::Resource::exists(this);
  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "Couldn't create the resource for Arabic Morphological Analyzer");
  NL::ResourceCreationException::ResourceCreationException(exception, (__int128 *)__p);
}

void sub_1A18A2D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void extractRooPartOfSpeechTag(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const std::string *v3;
  const std::string *v4;
  uint64_t v5;
  const std::string **v6;

  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_3;
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(a2, "");
    return;
  }
  if (!*(_BYTE *)(a1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = 0;
  v4 = 0;
  v5 = 0;
  splitWithChar(a1, 0x20u, (uint64_t)&v3);
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  if (v4 != v3)
    std::string::operator=(a2, v3);
  v6 = &v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
}

void sub_1A18A2E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;

  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void NLQamus::process_word_for_analysisType(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v6;
  __int128 v7;
  std::string *p_p;
  std::string::size_type size;
  std::string::size_type v10;
  std::__wrap_iter<const char *> v11;
  std::__wrap_iter<const char *> v12;
  std::string::size_type v13;
  _QWORD *v14;
  __int128 v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  std::string::size_type v21;
  const NLResult *i;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string *p_str;
  std::string *p_s1;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  std::string *v46;
  std::string *v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  __int128 v65;
  unsigned __int8 *v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  std::string::size_type v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  std::string *v88;
  std::string *v89;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v92;
  std::string::size_type v93;
  char v94;
  std::string *v95;
  std::string::size_type v96;
  std::string *v97;
  std::string *v98;
  std::string::size_type v99;
  std::string::size_type v100;
  std::string *v101;
  std::string *v102;
  std::string::size_type v103;
  std::string::size_type v104;
  std::string *v105;
  std::string *v106;
  std::string::size_type v107;
  std::string::size_type v108;
  std::string *v109;
  std::string::size_type v110;
  std::string *v111;
  __int128 v112;
  const std::string::value_type *locale;
  std::string::size_type col_high;
  std::string *v115;
  __int128 v116;
  const std::string::value_type *v117;
  std::string::size_type ct;
  std::string *v119;
  __int128 v120;
  const std::string::value_type *v121;
  std::string::size_type v122;
  uint64_t *v123;
  std::locale::__imp *v124;
  const std::ctype<char> *v125;
  int v126;
  __int128 v127;
  std::string::size_type v128;
  unint64_t v129;
  size_t v130;
  std::string *v131;
  const void *v132;
  int v133;
  const std::string::value_type *v134;
  std::string::size_type v135;
  std::string *v136;
  std::string::size_type v137;
  unsigned __int8 v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  size_t v141;
  std::string *v142;
  const void *v143;
  std::string *v144;
  size_t v145;
  std::string *v146;
  const void *v147;
  std::string *v148;
  unsigned __int8 *v149;
  std::string::size_type v150;
  std::string::size_type v151;
  size_t v152;
  std::string *v153;
  const void *v154;
  std::string *v155;
  std::string::size_type v156;
  unsigned __int8 v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  std::string::size_type v160;
  std::string::size_type v161;
  size_t v162;
  std::string *v163;
  const void *v164;
  std::string *v165;
  std::string::size_type v166;
  std::string *v167;
  std::string::size_type v168;
  unsigned __int8 v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  std::string::size_type v172;
  int *v173;
  int v174;
  int v175;
  int v176;
  uint64_t *v178;
  uint64_t *v179;
  _QWORD *v181;
  std::string::size_type v182;
  std::string v183;
  std::string v184;
  std::string v185;
  std::string v186;
  std::string v187;
  std::string v188;
  std::string v189;
  std::string v190;
  std::string v191;
  std::string v192;
  std::string __p;
  void *v194;
  char v195;
  void *v196;
  char v197;
  void *v198;
  char v199;
  void *v200;
  char v201;
  void *v202;
  char v203;
  std::string __s1;
  std::string v205;
  std::string v206;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v207;
  std::string v208;
  std::string v209;
  _OWORD v210[2];
  int v211;
  __int128 v212;
  __int128 v213;
  int v214;
  _OWORD v215[2];
  int v216;
  _OWORD v217[2];
  int v218;
  _OWORD v219[2];
  int v220;
  std::string v221;
  std::string v222;
  std::__split_buffer<std::string> __v;
  std::string v224;
  std::string v225;
  std::string __str;
  std::string v227;
  std::string v228;
  uint64_t v229;

  v229 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v222, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v222 = *(std::string *)a2;
  std::string::basic_string[abi:ne180100]<0>(&v221, "");
  memset(v219, 0, sizeof(v219));
  v220 = 1065353216;
  memset(v217, 0, sizeof(v217));
  v218 = 1065353216;
  memset(v215, 0, sizeof(v215));
  v216 = 1065353216;
  v212 = 0u;
  v213 = 0u;
  v214 = 1065353216;
  memset(v210, 0, sizeof(v210));
  v211 = 1065353216;
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v209, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  else
    v209 = v222;
  std::operator+<char>();
  v6 = std::string::append((std::string *)&v207, "\n");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(&v221, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v207.__traits_.__col_) < 0)
    operator delete(v207.__traits_.__loc_.__locale_);
  NLQamus::get_lookup((uint64_t)a1, (uint64_t)&v222, &v208);
  v179 = a3;
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v208.__r_.__value_.__l.__size_)
      goto LABEL_19;
LABEL_200:
    if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
    else
      __p = v222;
    v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v94 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v96 = __p.__r_.__value_.__l.__size_;
    v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v97 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v98 = &__p;
    else
      v98 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v99 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v99 = __p.__r_.__value_.__l.__size_;
    if (v99)
    {
      do
      {
        if (v98->__r_.__value_.__s.__data_[0] == 240)
          v98->__r_.__value_.__s.__data_[0] = 70;
        v98 = (std::string *)((char *)v98 + 1);
        --v99;
      }
      while (v99);
      v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v96 = __p.__r_.__value_.__l.__size_;
      v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v94 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v94 >= 0)
    {
      v100 = v93;
    }
    else
    {
      v97 = v95;
      v100 = v96;
    }
    if (v100)
    {
      do
      {
        if (v97->__r_.__value_.__s.__data_[0] == 241)
          v97->__r_.__value_.__s.__data_[0] = 78;
        v97 = (std::string *)((char *)v97 + 1);
        --v100;
      }
      while (v100);
      v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v96 = __p.__r_.__value_.__l.__size_;
      v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v94 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    v101 = &__p;
    if (v94 >= 0)
      v102 = &__p;
    else
      v102 = v95;
    if (v94 >= 0)
      v103 = v93;
    else
      v103 = v96;
    if (v103)
    {
      do
      {
        if (v102->__r_.__value_.__s.__data_[0] == 242)
          v102->__r_.__value_.__s.__data_[0] = 75;
        v102 = (std::string *)((char *)v102 + 1);
        --v103;
      }
      while (v103);
      v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v96 = __p.__r_.__value_.__l.__size_;
      v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v94 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v94 >= 0)
    {
      v104 = v93;
    }
    else
    {
      v101 = v95;
      v104 = v96;
    }
    if (v104)
    {
      do
      {
        if (v101->__r_.__value_.__s.__data_[0] == 243)
          v101->__r_.__value_.__s.__data_[0] = 97;
        v101 = (std::string *)((char *)v101 + 1);
        --v104;
      }
      while (v104);
      v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v96 = __p.__r_.__value_.__l.__size_;
      v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v94 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    v105 = &__p;
    if (v94 >= 0)
      v106 = &__p;
    else
      v106 = v95;
    if (v94 >= 0)
      v107 = v93;
    else
      v107 = v96;
    if (v107)
    {
      do
      {
        if (v106->__r_.__value_.__s.__data_[0] == 245)
          v106->__r_.__value_.__s.__data_[0] = 117;
        v106 = (std::string *)((char *)v106 + 1);
        --v107;
      }
      while (v107);
      v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v96 = __p.__r_.__value_.__l.__size_;
      v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v94 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v94 >= 0)
    {
      v108 = v93;
    }
    else
    {
      v105 = v95;
      v108 = v96;
    }
    if (v108)
    {
      do
      {
        if (v105->__r_.__value_.__s.__data_[0] == 246)
          v105->__r_.__value_.__s.__data_[0] = 105;
        v105 = (std::string *)((char *)v105 + 1);
        --v108;
      }
      while (v108);
      v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v96 = __p.__r_.__value_.__l.__size_;
      v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v94 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v94 >= 0)
      v109 = &__p;
    else
      v109 = v95;
    if (v94 >= 0)
      v110 = v93;
    else
      v110 = v96;
    if (v110)
    {
      do
      {
        if (v109->__r_.__value_.__s.__data_[0] == 248)
          v109->__r_.__value_.__s.__data_[0] = 126;
        v109 = (std::string *)((char *)v109 + 1);
        --v110;
      }
      while (v110);
      v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v96 = __p.__r_.__value_.__l.__size_;
      v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v94 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v94 < 0)
      v93 = v96;
    else
      v95 = &__p;
    for (; v93; --v93)
    {
      if (v95->__r_.__value_.__s.__data_[0] == 250)
        v95->__r_.__value_.__s.__data_[0] = 111;
      v95 = (std::string *)((char *)v95 + 1);
    }
    std::operator+<char>();
    v111 = std::string::append((std::string *)&__v, "\n");
    v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
    v207.__traits_.__col_ = (const std::collate<char> *)v111->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v207.__traits_.__loc_.__locale_ = v112;
    v111->__r_.__value_.__l.__size_ = 0;
    v111->__r_.__value_.__r.__words[2] = 0;
    v111->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v207.__traits_.__col_) >= 0)
      locale = (const std::string::value_type *)&v207;
    else
      locale = (const std::string::value_type *)v207.__traits_.__loc_.__locale_;
    if (SHIBYTE(v207.__traits_.__col_) >= 0)
      col_high = HIBYTE(v207.__traits_.__col_);
    else
      col_high = (std::string::size_type)v207.__traits_.__ct_;
    std::string::append(&v221, locale, col_high);
    if (SHIBYTE(v207.__traits_.__col_) < 0)
      operator delete(v207.__traits_.__loc_.__locale_);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::append(&v221, "\t <solution>\n");
    std::operator+<char>();
    v115 = std::string::append((std::string *)&__v, "</voc>\n");
    v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
    v207.__traits_.__col_ = (const std::collate<char> *)v115->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v207.__traits_.__loc_.__locale_ = v116;
    v115->__r_.__value_.__l.__size_ = 0;
    v115->__r_.__value_.__r.__words[2] = 0;
    v115->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v207.__traits_.__col_) >= 0)
      v117 = (const std::string::value_type *)&v207;
    else
      v117 = (const std::string::value_type *)v207.__traits_.__loc_.__locale_;
    if (SHIBYTE(v207.__traits_.__col_) >= 0)
      ct = HIBYTE(v207.__traits_.__col_);
    else
      ct = (std::string::size_type)v207.__traits_.__ct_;
    std::string::append(&v221, v117, ct);
    if (SHIBYTE(v207.__traits_.__col_) < 0)
      operator delete(v207.__traits_.__loc_.__locale_);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::operator+<char>();
    v119 = std::string::append((std::string *)&__v, "/NOUN</pos>\n");
    v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
    v207.__traits_.__col_ = (const std::collate<char> *)v119->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v207.__traits_.__loc_.__locale_ = v120;
    v119->__r_.__value_.__l.__size_ = 0;
    v119->__r_.__value_.__r.__words[2] = 0;
    v119->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v207.__traits_.__col_) >= 0)
      v121 = (const std::string::value_type *)&v207;
    else
      v121 = (const std::string::value_type *)v207.__traits_.__loc_.__locale_;
    if (SHIBYTE(v207.__traits_.__col_) >= 0)
      v122 = HIBYTE(v207.__traits_.__col_);
    else
      v122 = (std::string::size_type)v207.__traits_.__ct_;
    std::string::append(&v221, v121, v122);
    if (SHIBYTE(v207.__traits_.__col_) < 0)
      operator delete(v207.__traits_.__loc_.__locale_);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::append(&v221, "\t\t<gloss>[loose diacritic(s)]</gloss>\n");
    std::string::append(&v221, "\t </solution>\n");
    std::string::append(&v221, "  </variant>\n");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_310;
  }
  if (!*((_BYTE *)&v208.__r_.__value_.__s + 23))
    goto LABEL_200;
LABEL_19:
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v207.__traits_, "Y(?=([^']))", 0);
  memset(&v206, 0, sizeof(v206));
  v10 = HIBYTE(v208.__r_.__value_.__r.__words[2]);
  if ((v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v208;
  else
    v11.__i_ = (std::__wrap_iter<const char *>::iterator_type)v208.__r_.__value_.__r.__words[0];
  if ((v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = v208.__r_.__value_.__l.__size_;
  v12.__i_ = &v11.__i_[v10];
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char *>,std::regex_traits<char>,char>(&v206, v11, v12, &v207, "y", 0);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v219, (unsigned __int8 *)&v206))
  {
    NLQamus::get_variants((__int128 *)&v206, (uint64_t)&v205);
    v182 = v205.__r_.__value_.__l.__size_;
    v13 = v205.__r_.__value_.__r.__words[0];
    if (v205.__r_.__value_.__r.__words[0] == v205.__r_.__value_.__l.__size_)
      goto LABEL_190;
    v14 = a1 + 30;
    v181 = a1;
    while (1)
    {
      if (*(char *)(v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
      }
      else
      {
        v15 = *(_OWORD *)v13;
        v228.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
        *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v15;
      }
      __v.__first_ = &v206;
      v16 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v219, (unsigned __int8 *)&v206, (uint64_t)&std::piecewise_construct, (__int128 **)&__v);
      v17 = v16;
      v18 = *((_QWORD *)v16 + 6);
      if (v18 >= *((_QWORD *)v16 + 7))
      {
        v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v16 + 5, (__int128 *)&v228);
      }
      else
      {
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(*((std::string **)v16 + 6), v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
        }
        else
        {
          v19 = *(_OWORD *)&v228.__r_.__value_.__l.__data_;
          *(_QWORD *)(v18 + 16) = *((_QWORD *)&v228.__r_.__value_.__l + 2);
          *(_OWORD *)v18 = v19;
        }
        v20 = v18 + 24;
        *((_QWORD *)v17 + 6) = v18 + 24;
      }
      *((_QWORD *)v17 + 6) = v20;
      NLQamus::analyze(a1, &v228, (uint64_t *)&v227);
      if (v227.__r_.__value_.__l.__size_ == v227.__r_.__value_.__r.__words[0])
        goto LABEL_187;
      std::string::basic_string[abi:ne180100]<0>(&__s1, "");
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      v21 = v227.__r_.__value_.__l.__size_;
      for (i = (const NLResult *)v227.__r_.__value_.__r.__words[0];
            i != (const NLResult *)v21;
            i = (const NLResult *)((char *)i + 152))
      {
        NLResult::NLResult(&__p, i);
        NLResult::getLemmaID((NLResult *)&__p, (std::string *)&__v);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
        v23 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        else
          v24 = __s1.__r_.__value_.__l.__size_;
        v25 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v25 = __str.__r_.__value_.__l.__size_;
        if (v24 == v25)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (!memcmp(__s1.__r_.__value_.__l.__data_, p_str, __s1.__r_.__value_.__l.__size_))
              goto LABEL_89;
          }
          else
          {
            if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
              goto LABEL_89;
            p_s1 = &__s1;
            while (p_s1->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              p_str = (std::string *)((char *)p_str + 1);
              if (!--v23)
                goto LABEL_89;
            }
          }
        }
        NLResult::getLemmaID((NLResult *)&__p, (std::string *)&__v);
        v28 = std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(&v212, (unsigned __int8 *)&__v);
        v29 = v28;
        if (SHIBYTE(__v.__end_) < 0)
        {
          operator delete(__v.__first_);
          if (v29)
            goto LABEL_89;
        }
        else if (v28)
        {
          goto LABEL_89;
        }
        NLResult::getLemmaID((NLResult *)&__p, &v192);
        __v.__first_ = &v192;
        v30 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v212, (unsigned __int8 *)&v192, (uint64_t)&std::piecewise_construct, (__int128 **)&__v);
        NLResult::getLemmaID((NLResult *)&__p, &v190);
        v31 = std::string::append(&v190, "+\t");
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v191.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        NLResult::getLemmaID((NLResult *)&__p, &v188);
        NLConvertBW2UTF::bw2utf(v14, (uint64_t)&v188, &v189);
        if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &v189;
        else
          v33 = (std::string *)v189.__r_.__value_.__r.__words[0];
        if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = HIBYTE(v189.__r_.__value_.__r.__words[2]);
        else
          v34 = v189.__r_.__value_.__l.__size_;
        v35 = std::string::append(&v191, (const std::string::value_type *)v33, v34);
        v36 = v35->__r_.__value_.__r.__words[0];
        v225.__r_.__value_.__r.__words[0] = v35->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v225.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
        v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        v38 = *((_QWORD *)v30 + 7);
        v39 = *((_QWORD *)v30 + 6);
        if (v39 >= v38)
        {
          v41 = *((_QWORD *)v30 + 5);
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - v41) >> 3);
          v43 = v42 + 1;
          if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - v41) >> 3);
          if (2 * v44 > v43)
            v43 = 2 * v44;
          if (v44 >= 0x555555555555555)
            v45 = 0xAAAAAAAAAAAAAAALL;
          else
            v45 = v43;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v30 + 56);
          if (v45)
            v46 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v30 + 56), v45);
          else
            v46 = 0;
          v47 = v46 + v42;
          __v.__first_ = v46;
          __v.__begin_ = v47;
          __v.__end_cap_.__value_ = &v46[v45];
          v47->__r_.__value_.__r.__words[0] = v36;
          v47->__r_.__value_.__l.__size_ = v225.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v47->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v225.__r_.__value_.__r.__words + 7);
          *((_BYTE *)&v47->__r_.__value_.__s + 23) = v37;
          v225.__r_.__value_.__r.__words[0] = 0;
          *(std::string::size_type *)((char *)v225.__r_.__value_.__r.__words + 7) = 0;
          __v.__end_ = v47 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v30 + 40), &__v);
          v40 = *((_QWORD *)v30 + 6);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(_QWORD *)v39 = v36;
          *(_QWORD *)(v39 + 8) = v225.__r_.__value_.__r.__words[0];
          *(_QWORD *)(v39 + 15) = *(std::string::size_type *)((char *)v225.__r_.__value_.__r.__words + 7);
          *(_BYTE *)(v39 + 23) = v37;
          v225.__r_.__value_.__r.__words[0] = 0;
          *(std::string::size_type *)((char *)v225.__r_.__value_.__r.__words + 7) = 0;
          v40 = v39 + 24;
          *((_QWORD *)v30 + 6) = v39 + 24;
        }
        *((_QWORD *)v30 + 6) = v40;
        if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v189.__r_.__value_.__l.__data_);
        if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v188.__r_.__value_.__l.__data_);
        if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v191.__r_.__value_.__l.__data_);
        if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v190.__r_.__value_.__l.__data_);
        if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v192.__r_.__value_.__l.__data_);
LABEL_89:
        NLResult::getLemmaID((NLResult *)&__p, &v187);
        v48 = std::string::append(&v187, "\t");
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v225.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        NLResult::getVocStr((NLResult *)&__p, &v186);
        if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = &v186;
        else
          v50 = (std::string *)v186.__r_.__value_.__r.__words[0];
        if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = HIBYTE(v186.__r_.__value_.__r.__words[2]);
        else
          v51 = v186.__r_.__value_.__l.__size_;
        v52 = std::string::append(&v225, (const std::string::value_type *)v50, v51);
        v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        v189.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        v54 = std::string::append(&v189, "\t");
        v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        v190.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        NLResult::getVocStr((NLResult *)&__p, &v184);
        NLConvertBW2UTF::bw2utf(v14, (uint64_t)&v184, &v185);
        if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v56 = &v185;
        else
          v56 = (std::string *)v185.__r_.__value_.__r.__words[0];
        if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v57 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
        else
          v57 = v185.__r_.__value_.__l.__size_;
        v58 = std::string::append(&v190, (const std::string::value_type *)v56, v57);
        v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v191.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        v60 = std::string::append(&v191, "\t");
        v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        __v.__end_ = (std::__split_buffer<std::string>::pointer)v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__v.__first_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        NLResult::getPosStr((NLResult *)&__p, &v224);
        if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &v224;
        else
          v62 = (std::string *)v224.__r_.__value_.__r.__words[0];
        if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = HIBYTE(v224.__r_.__value_.__r.__words[2]);
        else
          v63 = v224.__r_.__value_.__l.__size_;
        v64 = std::string::append((std::string *)&__v, (const std::string::value_type *)v62, v63);
        v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v192.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v224.__r_.__value_.__l.__data_);
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);
        if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v191.__r_.__value_.__l.__data_);
        if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v185.__r_.__value_.__l.__data_);
        if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v184.__r_.__value_.__l.__data_);
        if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v190.__r_.__value_.__l.__data_);
        if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v189.__r_.__value_.__l.__data_);
        if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v186.__r_.__value_.__l.__data_);
        if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v225.__r_.__value_.__l.__data_);
        if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v187.__r_.__value_.__l.__data_);
        if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v210, (unsigned __int8 *)&v192))
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v210, (unsigned __int8 *)&v192, (uint64_t)&v192);
          NLResult::getLemmaID((NLResult *)&__p, &v191);
          __v.__first_ = &v191;
          v66 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v212, (unsigned __int8 *)&v191, (uint64_t)&std::piecewise_construct, (__int128 **)&__v);
          NLResult::getVocStr((NLResult *)&__p, &v187);
          v67 = std::string::append(&v187, "\t");
          v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
          v225.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v68;
          v67->__r_.__value_.__l.__size_ = 0;
          v67->__r_.__value_.__r.__words[2] = 0;
          v67->__r_.__value_.__r.__words[0] = 0;
          NLResult::getVocStr((NLResult *)&__p, &v183);
          NLConvertBW2UTF::bw2utf(v14, (uint64_t)&v183, &v186);
          if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v69 = &v186;
          else
            v69 = (std::string *)v186.__r_.__value_.__r.__words[0];
          if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = HIBYTE(v186.__r_.__value_.__r.__words[2]);
          else
            v70 = v186.__r_.__value_.__l.__size_;
          v71 = std::string::append(&v225, (const std::string::value_type *)v69, v70);
          v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
          v189.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v72;
          v71->__r_.__value_.__l.__size_ = 0;
          v71->__r_.__value_.__r.__words[2] = 0;
          v71->__r_.__value_.__r.__words[0] = 0;
          v73 = std::string::append(&v189, "\t");
          v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
          v190.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v74;
          v73->__r_.__value_.__l.__size_ = 0;
          v73->__r_.__value_.__r.__words[2] = 0;
          v73->__r_.__value_.__r.__words[0] = 0;
          NLResult::getPosStr((NLResult *)&__p, &v185);
          if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = &v185;
          else
            v75 = (std::string *)v185.__r_.__value_.__r.__words[0];
          if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
          else
            v76 = v185.__r_.__value_.__l.__size_;
          v77 = std::string::append(&v190, (const std::string::value_type *)v75, v76);
          v78 = v77->__r_.__value_.__r.__words[0];
          v224.__r_.__value_.__r.__words[0] = v77->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v224.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v77->__r_.__value_.__r.__words[1] + 7);
          v79 = HIBYTE(v77->__r_.__value_.__r.__words[2]);
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          v80 = *((_QWORD *)v66 + 7);
          v81 = *((_QWORD *)v66 + 6);
          if (v81 >= v80)
          {
            v83 = *((_QWORD *)v66 + 5);
            v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - v83) >> 3);
            v85 = v84 + 1;
            if (v84 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
            v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - v83) >> 3);
            if (2 * v86 > v85)
              v85 = 2 * v86;
            if (v86 >= 0x555555555555555)
              v87 = 0xAAAAAAAAAAAAAAALL;
            else
              v87 = v85;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v66 + 56);
            if (v87)
              v88 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v66 + 56), v87);
            else
              v88 = 0;
            v89 = v88 + v84;
            __v.__first_ = v88;
            __v.__begin_ = v89;
            __v.__end_cap_.__value_ = &v88[v87];
            v89->__r_.__value_.__r.__words[0] = v78;
            v89->__r_.__value_.__l.__size_ = v224.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v89->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v224.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v89->__r_.__value_.__s + 23) = v79;
            v224.__r_.__value_.__r.__words[0] = 0;
            *(std::string::size_type *)((char *)v224.__r_.__value_.__r.__words + 7) = 0;
            __v.__end_ = v89 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v66 + 40), &__v);
            v82 = *((_QWORD *)v66 + 6);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            *(_QWORD *)v81 = v78;
            *(_QWORD *)(v81 + 8) = v224.__r_.__value_.__r.__words[0];
            *(_QWORD *)(v81 + 15) = *(std::string::size_type *)((char *)v224.__r_.__value_.__r.__words + 7);
            *(_BYTE *)(v81 + 23) = v79;
            v224.__r_.__value_.__r.__words[0] = 0;
            *(std::string::size_type *)((char *)v224.__r_.__value_.__r.__words + 7) = 0;
            v82 = v81 + 24;
            *((_QWORD *)v66 + 6) = v81 + 24;
          }
          *((_QWORD *)v66 + 6) = v82;
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v185.__r_.__value_.__l.__data_);
          if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v190.__r_.__value_.__l.__data_);
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v189.__r_.__value_.__l.__data_);
          if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v186.__r_.__value_.__l.__data_);
          if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v183.__r_.__value_.__l.__data_);
          if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v225.__r_.__value_.__l.__data_);
          if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v187.__r_.__value_.__l.__data_);
          if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v191.__r_.__value_.__l.__data_);
        }
        std::string::operator=(&__s1, &__str);
        if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v192.__r_.__value_.__l.__data_);
        if (v203 < 0)
          operator delete(v202);
        if (v201 < 0)
          operator delete(v200);
        if (v199 < 0)
          operator delete(v198);
        if (v197 < 0)
          operator delete(v196);
        if (v195 < 0)
          operator delete(v194);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      a1 = v181;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_187:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v227;
      std::vector<NLResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v228.__r_.__value_.__l.__data_);
      v13 += 24;
      if (v13 == v182)
      {
LABEL_190:
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v205;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        break;
      }
    }
  }
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v206.__r_.__value_.__l.__data_);
  cntrl = v207.__start_.__cntrl_;
  if (v207.__start_.__cntrl_)
  {
    p_shared_owners = &v207.__start_.__cntrl_->__shared_owners_;
    do
      v92 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v92 - 1, (unint64_t *)p_shared_owners));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  std::locale::~locale(&v207.__traits_.__loc_);
LABEL_310:
  v123 = (uint64_t *)v213;
  if ((_QWORD)v213)
  {
    while (1)
    {
      if (*((char *)v123 + 39) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v123[2], v123[3]);
      else
        __p = *(std::string *)(v123 + 2);
      memset(&v207, 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v207, (__int128 *)v123[5], (__int128 *)v123[6], 0xAAAAAAAAAAAAAAABLL * ((v123[6] - v123[5]) >> 3));
      v125 = v207.__traits_.__ct_;
      v124 = v207.__traits_.__loc_.__locale_;
      if (v207.__traits_.__loc_.__locale_ != (std::locale::__imp *)v207.__traits_.__ct_)
        break;
LABEL_425:
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v207;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v123 = (uint64_t *)*v123;
      if (!v123)
        goto LABEL_428;
    }
    v126 = 0;
    while (1)
    {
      if (*((char *)v124 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)v124, *((_QWORD *)v124 + 1));
      }
      else
      {
        v127 = *(_OWORD *)v124;
        __v.__end_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v124 + 2);
        *(_OWORD *)&__v.__first_ = v127;
      }
      memset(&v206, 0, sizeof(v206));
      splitWithChar((uint64_t)&__v, 9u, (uint64_t)&v206);
      v128 = v206.__r_.__value_.__r.__words[0];
      v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v206.__r_.__value_.__l.__size_ - v206.__r_.__value_.__r.__words[0]) >> 3);
      if (v129 < 2)
        goto LABEL_376;
      if (v126)
      {
        if (v129 < 3)
        {
          if (*(char *)(v206.__r_.__value_.__r.__words[0] + 47) >= 0)
            v141 = *(unsigned __int8 *)(v206.__r_.__value_.__r.__words[0] + 47);
          else
            v141 = *(_QWORD *)(v206.__r_.__value_.__r.__words[0] + 32);
          std::string::basic_string[abi:ne180100]((uint64_t)&v205, v141 + 1);
          if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v142 = &v205;
          else
            v142 = (std::string *)v205.__r_.__value_.__r.__words[0];
          if (v141)
          {
            if (*(char *)(v128 + 47) >= 0)
              v143 = (const void *)(v128 + 24);
            else
              v143 = *(const void **)(v128 + 24);
            memmove(v142, v143, v141);
          }
          *(_WORD *)((char *)&v142->__r_.__value_.__l.__data_ + v141) = 9;
          v144 = std::string::append(&v205, "UNKNOWN");
          v137 = v144->__r_.__value_.__r.__words[0];
          v228.__r_.__value_.__r.__words[0] = v144->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v228.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v144->__r_.__value_.__r.__words[1] + 7);
          v138 = HIBYTE(v144->__r_.__value_.__r.__words[2]);
          v144->__r_.__value_.__l.__size_ = 0;
          v144->__r_.__value_.__r.__words[2] = 0;
          v144->__r_.__value_.__r.__words[0] = 0;
          v139 = (unsigned __int8 *)v206.__r_.__value_.__r.__words[0];
          if (v206.__r_.__value_.__l.__size_ == v206.__r_.__value_.__r.__words[0])
            std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        }
        else
        {
          if (*(char *)(v206.__r_.__value_.__r.__words[0] + 47) >= 0)
            v130 = *(unsigned __int8 *)(v206.__r_.__value_.__r.__words[0] + 47);
          else
            v130 = *(_QWORD *)(v206.__r_.__value_.__r.__words[0] + 32);
          std::string::basic_string[abi:ne180100]((uint64_t)&v205, v130 + 1);
          if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v131 = &v205;
          else
            v131 = (std::string *)v205.__r_.__value_.__r.__words[0];
          if (v130)
          {
            if (*(char *)(v128 + 47) >= 0)
              v132 = (const void *)(v128 + 24);
            else
              v132 = *(const void **)(v128 + 24);
            memmove(v131, v132, v130);
          }
          *(_WORD *)((char *)&v131->__r_.__value_.__l.__data_ + v130) = 9;
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v206.__r_.__value_.__l.__size_ - v206.__r_.__value_.__r.__words[0]) >> 3) <= 2)
            std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
          v133 = *(char *)(v206.__r_.__value_.__r.__words[0] + 71);
          if (v133 >= 0)
            v134 = (const std::string::value_type *)(v206.__r_.__value_.__r.__words[0] + 48);
          else
            v134 = *(const std::string::value_type **)(v206.__r_.__value_.__r.__words[0] + 48);
          if (v133 >= 0)
            v135 = *(unsigned __int8 *)(v206.__r_.__value_.__r.__words[0] + 71);
          else
            v135 = *(_QWORD *)(v206.__r_.__value_.__r.__words[0] + 56);
          v136 = std::string::append(&v205, v134, v135);
          v137 = v136->__r_.__value_.__r.__words[0];
          v228.__r_.__value_.__r.__words[0] = v136->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v228.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v136->__r_.__value_.__r.__words[1] + 7);
          v138 = HIBYTE(v136->__r_.__value_.__r.__words[2]);
          v136->__r_.__value_.__l.__size_ = 0;
          v136->__r_.__value_.__r.__words[2] = 0;
          v136->__r_.__value_.__r.__words[0] = 0;
          v139 = (unsigned __int8 *)v206.__r_.__value_.__r.__words[0];
          if (v206.__r_.__value_.__l.__size_ == v206.__r_.__value_.__r.__words[0])
            std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        }
        v227.__r_.__value_.__r.__words[0] = v206.__r_.__value_.__r.__words[0];
        v140 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v215, v139, (uint64_t)&std::piecewise_construct, (__int128 **)&v227);
      }
      else
      {
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v207.__traits_.__ct_ - (char *)v207.__traits_.__loc_.__locale_) >> 3) >= 2)
        {
          memset(&v205, 0, sizeof(v205));
          splitWithChar((uint64_t)v207.__traits_.__loc_.__locale_ + 24, 9u, (uint64_t)&v205);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v205.__r_.__value_.__l.__size_ - v205.__r_.__value_.__r.__words[0]) >> 3) < 3)
          {
            v151 = v206.__r_.__value_.__r.__words[0];
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v206.__r_.__value_.__l.__size_ - v206.__r_.__value_.__r.__words[0]) >> 3) <= 1)
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            if (*(char *)(v206.__r_.__value_.__r.__words[0] + 47) >= 0)
              v152 = *(unsigned __int8 *)(v206.__r_.__value_.__r.__words[0] + 47);
            else
              v152 = *(_QWORD *)(v206.__r_.__value_.__r.__words[0] + 32);
            std::string::basic_string[abi:ne180100]((uint64_t)&v228, v152 + 1);
            if ((v228.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v153 = &v228;
            else
              v153 = (std::string *)v228.__r_.__value_.__r.__words[0];
            if (v152)
            {
              if (*(char *)(v151 + 47) >= 0)
                v154 = (const void *)(v151 + 24);
              else
                v154 = *(const void **)(v151 + 24);
              memmove(v153, v154, v152);
            }
            *(_WORD *)((char *)&v153->__r_.__value_.__l.__data_ + v152) = 9;
            v155 = std::string::append(&v228, "UNKNOWN");
            v156 = v155->__r_.__value_.__r.__words[0];
            v227.__r_.__value_.__r.__words[0] = v155->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v227.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v155->__r_.__value_.__r.__words[1] + 7);
            v157 = HIBYTE(v155->__r_.__value_.__r.__words[2]);
            v155->__r_.__value_.__l.__size_ = 0;
            v155->__r_.__value_.__r.__words[2] = 0;
            v155->__r_.__value_.__r.__words[0] = 0;
            __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            v158 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v217, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__s1);
            v159 = v158;
            if ((char)v158[63] < 0)
              operator delete(*((void **)v158 + 5));
            v160 = v227.__r_.__value_.__r.__words[0];
            *((_QWORD *)v159 + 5) = v156;
            *((_QWORD *)v159 + 6) = v160;
            *(_QWORD *)(v159 + 55) = *(std::string::size_type *)((char *)v227.__r_.__value_.__r.__words + 7);
            v159[63] = v157;
            if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v228.__r_.__value_.__l.__data_);
          }
          else
          {
            if (*(char *)(v205.__r_.__value_.__r.__words[0] + 71) < 0)
              std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(v205.__r_.__value_.__r.__words[0] + 48), *(_QWORD *)(v205.__r_.__value_.__r.__words[0] + 56));
            else
              v228 = *(std::string *)(v205.__r_.__value_.__r.__words[0] + 48);
            v161 = v206.__r_.__value_.__r.__words[0];
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v206.__r_.__value_.__l.__size_ - v206.__r_.__value_.__r.__words[0]) >> 3) <= 1)
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            if (*(char *)(v206.__r_.__value_.__r.__words[0] + 47) >= 0)
              v162 = *(unsigned __int8 *)(v206.__r_.__value_.__r.__words[0] + 47);
            else
              v162 = *(_QWORD *)(v206.__r_.__value_.__r.__words[0] + 32);
            std::string::basic_string[abi:ne180100]((uint64_t)&v227, v162 + 1);
            if ((v227.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v163 = &v227;
            else
              v163 = (std::string *)v227.__r_.__value_.__r.__words[0];
            if (v162)
            {
              if (*(char *)(v161 + 47) >= 0)
                v164 = (const void *)(v161 + 24);
              else
                v164 = *(const void **)(v161 + 24);
              memmove(v163, v164, v162);
            }
            *(_WORD *)((char *)&v163->__r_.__value_.__l.__data_ + v162) = 9;
            extractRooPartOfSpeechTag((uint64_t)&v228, &__s1);
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v165 = &__s1;
            else
              v165 = (std::string *)__s1.__r_.__value_.__r.__words[0];
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v166 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            else
              v166 = __s1.__r_.__value_.__l.__size_;
            v167 = std::string::append(&v227, (const std::string::value_type *)v165, v166);
            v168 = v167->__r_.__value_.__r.__words[0];
            __str.__r_.__value_.__r.__words[0] = v167->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v167->__r_.__value_.__r.__words[1] + 7);
            v169 = HIBYTE(v167->__r_.__value_.__r.__words[2]);
            v167->__r_.__value_.__l.__size_ = 0;
            v167->__r_.__value_.__r.__words[2] = 0;
            v167->__r_.__value_.__r.__words[0] = 0;
            v192.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            v170 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v217, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v192);
            v171 = v170;
            if ((char)v170[63] < 0)
              operator delete(*((void **)v170 + 5));
            v172 = __str.__r_.__value_.__r.__words[0];
            *((_QWORD *)v171 + 5) = v168;
            *((_QWORD *)v171 + 6) = v172;
            *(_QWORD *)(v171 + 55) = *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7);
            v171[63] = v169;
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v227.__r_.__value_.__l.__data_);
            if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v228.__r_.__value_.__l.__data_);
          }
          v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&v205;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
          goto LABEL_375;
        }
        if (*(char *)(v206.__r_.__value_.__r.__words[0] + 47) >= 0)
          v145 = *(unsigned __int8 *)(v206.__r_.__value_.__r.__words[0] + 47);
        else
          v145 = *(_QWORD *)(v206.__r_.__value_.__r.__words[0] + 32);
        std::string::basic_string[abi:ne180100]((uint64_t)&v205, v145 + 1);
        if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v146 = &v205;
        else
          v146 = (std::string *)v205.__r_.__value_.__r.__words[0];
        if (v145)
        {
          if (*(char *)(v128 + 47) >= 0)
            v147 = (const void *)(v128 + 24);
          else
            v147 = *(const void **)(v128 + 24);
          memmove(v146, v147, v145);
        }
        *(_WORD *)((char *)&v146->__r_.__value_.__l.__data_ + v145) = 9;
        v148 = std::string::append(&v205, "UNKNOWN");
        v137 = v148->__r_.__value_.__r.__words[0];
        v228.__r_.__value_.__r.__words[0] = v148->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v228.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v148->__r_.__value_.__r.__words[1] + 7);
        v138 = HIBYTE(v148->__r_.__value_.__r.__words[2]);
        v148->__r_.__value_.__l.__size_ = 0;
        v148->__r_.__value_.__r.__words[2] = 0;
        v148->__r_.__value_.__r.__words[0] = 0;
        v227.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v140 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v217, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v227);
      }
      v149 = v140;
      if ((char)v140[63] < 0)
        operator delete(*((void **)v140 + 5));
      v150 = v228.__r_.__value_.__r.__words[0];
      *((_QWORD *)v149 + 5) = v137;
      *((_QWORD *)v149 + 6) = v150;
      *(_QWORD *)(v149 + 55) = *(std::string::size_type *)((char *)v228.__r_.__value_.__r.__words + 7);
      v149[63] = v138;
      if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v205.__r_.__value_.__l.__data_);
LABEL_375:
      ++v126;
LABEL_376:
      v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&v206;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      v124 = (std::locale::__imp *)((char *)v124 + 24);
      if (v124 == (std::locale::__imp *)v125)
        goto LABEL_425;
    }
  }
LABEL_428:
  v173 = (int *)v179;
  v174 = *((char *)v179 + 23);
  if (v174 < 0)
  {
    if (v179[1] != 6)
    {
LABEL_437:
      v178 = (uint64_t *)v215;
      goto LABEL_438;
    }
    v173 = (int *)*v179;
  }
  else if (v174 != 6)
  {
    goto LABEL_437;
  }
  v175 = *v173;
  v176 = *((unsigned __int16 *)v173 + 2);
  if (v175 != 1835885932 || v176 != 29537)
    goto LABEL_437;
  v178 = (uint64_t *)v217;
LABEL_438:
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(a4, v178);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v208.__r_.__value_.__l.__data_);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v209.__r_.__value_.__l.__data_);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v210);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&v212);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v215);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v217);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v219);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v221.__r_.__value_.__l.__data_);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v222.__r_.__value_.__l.__data_);
}

void sub_1A18A46F8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x290]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&STACK[0x2C0]);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&STACK[0x2F0]);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&STACK[0x320]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&STACK[0x350]);
  if (SLOBYTE(STACK[0x38F]) < 0)
    operator delete((void *)STACK[0x378]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  _Unwind_Resume(a1);
}

void NLQamus::get_lookup(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  std::__wrap_iter<const char *> v6;
  std::__wrap_iter<const char *> v7;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v10;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v11;
  std::string v12;
  void *v13[2];
  unsigned __int8 v14;

  v4 = a1 + 240;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v12 = *(std::string *)a2;
  NLConvertBW2UTF::utf2bw(v4, (uint64_t)&v12, 1, 0, 0, (uint64_t)v13);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v11.__traits_, "[aui~oFNK]", 0);
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v5 = v14;
  if ((v14 & 0x80u) == 0)
    v6.__i_ = (std::__wrap_iter<const char *>::iterator_type)v13;
  else
    v6.__i_ = (std::__wrap_iter<const char *>::iterator_type)v13[0];
  if ((v14 & 0x80u) != 0)
    v5 = (unint64_t)v13[1];
  v7.__i_ = &v6.__i_[v5];
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(a3, v6, v7, &v11, "", 0);
  cntrl = v11.__start_.__cntrl_;
  if (v11.__start_.__cntrl_)
  {
    p_shared_owners = &v11.__start_.__cntrl_->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v10 - 1, (unint64_t *)p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  std::locale::~locale(&v11.__traits_.__loc_);
  if ((char)v14 < 0)
    operator delete(v13[0]);
}

void sub_1A18A4DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  if (*(char *)(v15 - 17) < 0)
    operator delete(*(void **)(v15 - 40));
  _Unwind_Resume(a1);
}

uint64_t NLQamus::get_variants@<X0>(__int128 *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  __int128 v8;
  std::string::size_type size;
  std::__wrap_iter<const char *> v10;
  std::__wrap_iter<const char *> v11;
  uint64_t v12;
  std::string::size_type v13;
  const std::ctype<char> *col_high;
  unsigned __int8 *locale;
  std::string *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  std::vector<std::string>::pointer v20;
  std::vector<std::string>::pointer v21;
  __int128 v22;
  std::string::size_type v23;
  std::__wrap_iter<const char *> v24;
  std::__wrap_iter<const char *> v25;
  uint64_t v26;
  std::string::size_type v27;
  const std::ctype<char> *ct;
  unsigned __int8 *v29;
  std::string *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  std::vector<std::string>::pointer v34;
  std::vector<std::string>::pointer v35;
  __int128 v36;
  std::string::size_type v37;
  std::__wrap_iter<const char *> v38;
  std::__wrap_iter<const char *> v39;
  uint64_t v40;
  std::string::size_type v41;
  const std::ctype<char> *v42;
  unsigned __int8 *v43;
  std::string *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  std::vector<std::string>::pointer v48;
  std::vector<std::string>::pointer v49;
  __int128 v50;
  std::string::size_type v51;
  std::__wrap_iter<const char *> v52;
  std::__wrap_iter<const char *> v53;
  uint64_t v54;
  std::string::size_type v55;
  const std::ctype<char> *v56;
  unsigned __int8 *v57;
  std::string *v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  std::vector<std::string>::pointer v62;
  std::vector<std::string>::pointer v63;
  __int128 v64;
  std::string::size_type v65;
  std::__wrap_iter<const char *> v66;
  std::__wrap_iter<const char *> v67;
  uint64_t v68;
  std::string::size_type v69;
  const std::ctype<char> *v70;
  unsigned __int8 *v71;
  std::string *v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75;
  std::vector<std::string>::pointer v76;
  std::vector<std::string>::pointer v77;
  __int128 v78;
  std::string::size_type v79;
  std::__wrap_iter<const char *> v80;
  std::__wrap_iter<const char *> v81;
  uint64_t v82;
  std::string::size_type v83;
  std::string::size_type v84;
  std::string *v85;
  std::string *v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  std::vector<std::string>::pointer v90;
  std::vector<std::string>::pointer v91;
  __int128 v92;
  std::string::size_type v93;
  std::__wrap_iter<const char *> v94;
  std::__wrap_iter<const char *> v95;
  uint64_t v96;
  std::string::size_type v97;
  std::string::size_type v98;
  std::string *v99;
  std::string *v100;
  unint64_t v101;
  __int128 v102;
  uint64_t v103;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t *v123;
  unint64_t v124;
  void ***v125;
  std::string v127;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v128;
  std::string v129;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v130;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v131;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v132;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v133;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type __str;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v135;
  std::vector<std::string> v136;
  std::string v137;
  _QWORD v138[4];
  int v139;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  memset(v138, 0, sizeof(v138));
  v139 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v137, "");
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, a1);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a2, a1);
    v5 = v4 + 24;
  }
  *(_QWORD *)(a2 + 8) = v5;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v138, (unsigned __int8 *)a1, (uint64_t)a1);
  memset(&v136, 0, sizeof(v136));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v136, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v135.__traits_, "Y'$", 0);
  begin = v136.__begin_;
  end = v136.__end_;
  while (begin != end)
  {
    if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__str, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
    }
    else
    {
      v8 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
      __str.__traits_.__col_ = (const std::collate<char> *)begin->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__traits_.__loc_.__locale_ = v8;
    }
    std::string::operator=(&v137, (const std::string *)&__str);
    memset(&v133, 0, 24);
    size = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v137;
    else
      v10.__i_ = (std::__wrap_iter<const char *>::iterator_type)v137.__r_.__value_.__r.__words[0];
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v137.__r_.__value_.__l.__size_;
    v11.__i_ = &v10.__i_[size];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&v133, v10, v11, &v135, "}", 0);
    v12 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      v13 = v137.__r_.__value_.__l.__size_;
    col_high = (const std::ctype<char> *)HIBYTE(v133.__traits_.__col_);
    if (SHIBYTE(v133.__traits_.__col_) < 0)
      col_high = v133.__traits_.__ct_;
    if ((const std::ctype<char> *)v13 != col_high)
      goto LABEL_29;
    if (SHIBYTE(v133.__traits_.__col_) >= 0)
      locale = (unsigned __int8 *)&v133;
    else
      locale = (unsigned __int8 *)v133.__traits_.__loc_.__locale_;
    if ((*((_BYTE *)&v137.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v137.__r_.__value_.__l.__data_, locale, v137.__r_.__value_.__l.__size_))
        goto LABEL_29;
    }
    else if (*((_BYTE *)&v137.__r_.__value_.__s + 23))
    {
      v16 = &v137;
      while (v16->__r_.__value_.__s.__data_[0] == *locale)
      {
        v16 = (std::string *)((char *)v16 + 1);
        ++locale;
        if (!--v12)
          goto LABEL_37;
      }
LABEL_29:
      std::string::operator=(&v137, (const std::string *)&v133);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v138, (unsigned __int8 *)&v137))
      {
        v17 = *(_QWORD *)(a2 + 8);
        if (v17 >= *(_QWORD *)(a2 + 16))
        {
          v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (__int128 *)&v137);
        }
        else
        {
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
          }
          else
          {
            v18 = *(_OWORD *)&v137.__r_.__value_.__l.__data_;
            *(_QWORD *)(v17 + 16) = *((_QWORD *)&v137.__r_.__value_.__l + 2);
            *(_OWORD *)v17 = v18;
          }
          v19 = v17 + 24;
          *(_QWORD *)(a2 + 8) = v17 + 24;
        }
        *(_QWORD *)(a2 + 8) = v19;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v138, (unsigned __int8 *)&v137, (uint64_t)&v137);
      }
    }
LABEL_37:
    if (SHIBYTE(v133.__traits_.__col_) < 0)
      operator delete(v133.__traits_.__loc_.__locale_);
    if (SHIBYTE(__str.__traits_.__col_) < 0)
      operator delete(__str.__traits_.__loc_.__locale_);
    ++begin;
  }
  if (&v136 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v136, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&__str.__traits_, "w'", 0);
  v20 = v136.__begin_;
  v21 = v136.__end_;
  while (v20 != v21)
  {
    if (SHIBYTE(v20->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v133, v20->__r_.__value_.__l.__data_, v20->__r_.__value_.__l.__size_);
    }
    else
    {
      v22 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v133.__traits_.__col_ = (const std::collate<char> *)v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v133.__traits_.__loc_.__locale_ = v22;
    }
    std::string::operator=(&v137, (const std::string *)&v133);
    memset(&v132, 0, 24);
    v23 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v137;
    else
      v24.__i_ = (std::__wrap_iter<const char *>::iterator_type)v137.__r_.__value_.__r.__words[0];
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v23 = v137.__r_.__value_.__l.__size_;
    v25.__i_ = &v24.__i_[v23];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&v132, v24, v25, &__str, "&", 0);
    v26 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      v27 = v137.__r_.__value_.__l.__size_;
    ct = (const std::ctype<char> *)HIBYTE(v132.__traits_.__col_);
    if (SHIBYTE(v132.__traits_.__col_) < 0)
      ct = v132.__traits_.__ct_;
    if ((const std::ctype<char> *)v27 != ct)
      goto LABEL_69;
    if (SHIBYTE(v132.__traits_.__col_) >= 0)
      v29 = (unsigned __int8 *)&v132;
    else
      v29 = (unsigned __int8 *)v132.__traits_.__loc_.__locale_;
    if ((*((_BYTE *)&v137.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v137.__r_.__value_.__l.__data_, v29, v137.__r_.__value_.__l.__size_))
        goto LABEL_69;
    }
    else if (*((_BYTE *)&v137.__r_.__value_.__s + 23))
    {
      v30 = &v137;
      while (v30->__r_.__value_.__s.__data_[0] == *v29)
      {
        v30 = (std::string *)((char *)v30 + 1);
        ++v29;
        if (!--v26)
          goto LABEL_77;
      }
LABEL_69:
      std::string::operator=(&v137, (const std::string *)&v132);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v138, (unsigned __int8 *)&v137))
      {
        v31 = *(_QWORD *)(a2 + 8);
        if (v31 >= *(_QWORD *)(a2 + 16))
        {
          v33 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (__int128 *)&v137);
        }
        else
        {
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
          }
          else
          {
            v32 = *(_OWORD *)&v137.__r_.__value_.__l.__data_;
            *(_QWORD *)(v31 + 16) = *((_QWORD *)&v137.__r_.__value_.__l + 2);
            *(_OWORD *)v31 = v32;
          }
          v33 = v31 + 24;
          *(_QWORD *)(a2 + 8) = v31 + 24;
        }
        *(_QWORD *)(a2 + 8) = v33;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v138, (unsigned __int8 *)&v137, (uint64_t)&v137);
      }
    }
LABEL_77:
    if (SHIBYTE(v132.__traits_.__col_) < 0)
      operator delete(v132.__traits_.__loc_.__locale_);
    if (SHIBYTE(v133.__traits_.__col_) < 0)
      operator delete(v133.__traits_.__loc_.__locale_);
    ++v20;
  }
  if (&v136 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v136, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v133.__traits_, "y'$", 0);
  v34 = v136.__begin_;
  v35 = v136.__end_;
  while (v34 != v35)
  {
    if (SHIBYTE(v34->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v132, v34->__r_.__value_.__l.__data_, v34->__r_.__value_.__l.__size_);
    }
    else
    {
      v36 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v132.__traits_.__col_ = (const std::collate<char> *)v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v132.__traits_.__loc_.__locale_ = v36;
    }
    std::string::operator=(&v137, (const std::string *)&v132);
    memset(&v131, 0, 24);
    v37 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v137;
    else
      v38.__i_ = (std::__wrap_iter<const char *>::iterator_type)v137.__r_.__value_.__r.__words[0];
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v37 = v137.__r_.__value_.__l.__size_;
    v39.__i_ = &v38.__i_[v37];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&v131, v38, v39, &v133, "}", 0);
    v40 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      v41 = v137.__r_.__value_.__l.__size_;
    v42 = (const std::ctype<char> *)HIBYTE(v131.__traits_.__col_);
    if (SHIBYTE(v131.__traits_.__col_) < 0)
      v42 = v131.__traits_.__ct_;
    if ((const std::ctype<char> *)v41 != v42)
      goto LABEL_109;
    if (SHIBYTE(v131.__traits_.__col_) >= 0)
      v43 = (unsigned __int8 *)&v131;
    else
      v43 = (unsigned __int8 *)v131.__traits_.__loc_.__locale_;
    if ((*((_BYTE *)&v137.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v137.__r_.__value_.__l.__data_, v43, v137.__r_.__value_.__l.__size_))
        goto LABEL_109;
    }
    else if (*((_BYTE *)&v137.__r_.__value_.__s + 23))
    {
      v44 = &v137;
      while (v44->__r_.__value_.__s.__data_[0] == *v43)
      {
        v44 = (std::string *)((char *)v44 + 1);
        ++v43;
        if (!--v40)
          goto LABEL_117;
      }
LABEL_109:
      std::string::operator=(&v137, (const std::string *)&v131);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v138, (unsigned __int8 *)&v137))
      {
        v45 = *(_QWORD *)(a2 + 8);
        if (v45 >= *(_QWORD *)(a2 + 16))
        {
          v47 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (__int128 *)&v137);
        }
        else
        {
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
          }
          else
          {
            v46 = *(_OWORD *)&v137.__r_.__value_.__l.__data_;
            *(_QWORD *)(v45 + 16) = *((_QWORD *)&v137.__r_.__value_.__l + 2);
            *(_OWORD *)v45 = v46;
          }
          v47 = v45 + 24;
          *(_QWORD *)(a2 + 8) = v45 + 24;
        }
        *(_QWORD *)(a2 + 8) = v47;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v138, (unsigned __int8 *)&v137, (uint64_t)&v137);
      }
    }
LABEL_117:
    if (SHIBYTE(v131.__traits_.__col_) < 0)
      operator delete(v131.__traits_.__loc_.__locale_);
    if (SHIBYTE(v132.__traits_.__col_) < 0)
      operator delete(v132.__traits_.__loc_.__locale_);
    ++v34;
  }
  if (&v136 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v136, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v132.__traits_, "y$", 0);
  v48 = v136.__begin_;
  v49 = v136.__end_;
  while (v48 != v49)
  {
    if (SHIBYTE(v48->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v131, v48->__r_.__value_.__l.__data_, v48->__r_.__value_.__l.__size_);
    }
    else
    {
      v50 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v131.__traits_.__col_ = (const std::collate<char> *)v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v131.__traits_.__loc_.__locale_ = v50;
    }
    std::string::operator=(&v137, (const std::string *)&v131);
    memset(&v130, 0, 24);
    v51 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v137;
    else
      v52.__i_ = (std::__wrap_iter<const char *>::iterator_type)v137.__r_.__value_.__r.__words[0];
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v51 = v137.__r_.__value_.__l.__size_;
    v53.__i_ = &v52.__i_[v51];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&v130, v52, v53, &v132, "Y", 0);
    v54 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      v55 = v137.__r_.__value_.__l.__size_;
    v56 = (const std::ctype<char> *)HIBYTE(v130.__traits_.__col_);
    if (SHIBYTE(v130.__traits_.__col_) < 0)
      v56 = v130.__traits_.__ct_;
    if ((const std::ctype<char> *)v55 != v56)
      goto LABEL_149;
    if (SHIBYTE(v130.__traits_.__col_) >= 0)
      v57 = (unsigned __int8 *)&v130;
    else
      v57 = (unsigned __int8 *)v130.__traits_.__loc_.__locale_;
    if ((*((_BYTE *)&v137.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v137.__r_.__value_.__l.__data_, v57, v137.__r_.__value_.__l.__size_))
        goto LABEL_149;
    }
    else if (*((_BYTE *)&v137.__r_.__value_.__s + 23))
    {
      v58 = &v137;
      while (v58->__r_.__value_.__s.__data_[0] == *v57)
      {
        v58 = (std::string *)((char *)v58 + 1);
        ++v57;
        if (!--v54)
          goto LABEL_157;
      }
LABEL_149:
      std::string::operator=(&v137, (const std::string *)&v130);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v138, (unsigned __int8 *)&v137))
      {
        v59 = *(_QWORD *)(a2 + 8);
        if (v59 >= *(_QWORD *)(a2 + 16))
        {
          v61 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (__int128 *)&v137);
        }
        else
        {
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
          }
          else
          {
            v60 = *(_OWORD *)&v137.__r_.__value_.__l.__data_;
            *(_QWORD *)(v59 + 16) = *((_QWORD *)&v137.__r_.__value_.__l + 2);
            *(_OWORD *)v59 = v60;
          }
          v61 = v59 + 24;
          *(_QWORD *)(a2 + 8) = v59 + 24;
        }
        *(_QWORD *)(a2 + 8) = v61;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v138, (unsigned __int8 *)&v137, (uint64_t)&v137);
      }
    }
LABEL_157:
    if (SHIBYTE(v130.__traits_.__col_) < 0)
      operator delete(v130.__traits_.__loc_.__locale_);
    if (SHIBYTE(v131.__traits_.__col_) < 0)
      operator delete(v131.__traits_.__loc_.__locale_);
    ++v48;
  }
  if (&v136 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v136, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v131.__traits_, "Y", 0);
  v62 = v136.__begin_;
  v63 = v136.__end_;
  while (v62 != v63)
  {
    if (SHIBYTE(v62->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v130, v62->__r_.__value_.__l.__data_, v62->__r_.__value_.__l.__size_);
    }
    else
    {
      v64 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v130.__traits_.__col_ = (const std::collate<char> *)v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v130.__traits_.__loc_.__locale_ = v64;
    }
    std::string::operator=(&v137, (const std::string *)&v130);
    memset(&v128, 0, 24);
    v65 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v137;
    else
      v66.__i_ = (std::__wrap_iter<const char *>::iterator_type)v137.__r_.__value_.__r.__words[0];
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v65 = v137.__r_.__value_.__l.__size_;
    v67.__i_ = &v66.__i_[v65];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&v128, v66, v67, &v131, "y", 0);
    v68 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v69 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      v69 = v137.__r_.__value_.__l.__size_;
    v70 = (const std::ctype<char> *)HIBYTE(v128.__traits_.__col_);
    if (SHIBYTE(v128.__traits_.__col_) < 0)
      v70 = v128.__traits_.__ct_;
    if ((const std::ctype<char> *)v69 != v70)
      goto LABEL_189;
    if (SHIBYTE(v128.__traits_.__col_) >= 0)
      v71 = (unsigned __int8 *)&v128;
    else
      v71 = (unsigned __int8 *)v128.__traits_.__loc_.__locale_;
    if ((*((_BYTE *)&v137.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v137.__r_.__value_.__l.__data_, v71, v137.__r_.__value_.__l.__size_))
        goto LABEL_189;
    }
    else if (*((_BYTE *)&v137.__r_.__value_.__s + 23))
    {
      v72 = &v137;
      while (v72->__r_.__value_.__s.__data_[0] == *v71)
      {
        v72 = (std::string *)((char *)v72 + 1);
        ++v71;
        if (!--v68)
          goto LABEL_197;
      }
LABEL_189:
      std::string::operator=(&v137, (const std::string *)&v128);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v138, (unsigned __int8 *)&v137))
      {
        v73 = *(_QWORD *)(a2 + 8);
        if (v73 >= *(_QWORD *)(a2 + 16))
        {
          v75 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (__int128 *)&v137);
        }
        else
        {
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
          }
          else
          {
            v74 = *(_OWORD *)&v137.__r_.__value_.__l.__data_;
            *(_QWORD *)(v73 + 16) = *((_QWORD *)&v137.__r_.__value_.__l + 2);
            *(_OWORD *)v73 = v74;
          }
          v75 = v73 + 24;
          *(_QWORD *)(a2 + 8) = v73 + 24;
        }
        *(_QWORD *)(a2 + 8) = v75;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v138, (unsigned __int8 *)&v137, (uint64_t)&v137);
      }
    }
LABEL_197:
    if (SHIBYTE(v128.__traits_.__col_) < 0)
      operator delete(v128.__traits_.__loc_.__locale_);
    if (SHIBYTE(v130.__traits_.__col_) < 0)
      operator delete(v130.__traits_.__loc_.__locale_);
    ++v62;
  }
  if (&v136 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v136, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v130.__traits_, "h$", 0);
  v76 = v136.__begin_;
  v77 = v136.__end_;
  while (v76 != v77)
  {
    if (SHIBYTE(v76->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v128, v76->__r_.__value_.__l.__data_, v76->__r_.__value_.__l.__size_);
    }
    else
    {
      v78 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v128.__traits_.__col_ = (const std::collate<char> *)v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v128.__traits_.__loc_.__locale_ = v78;
    }
    std::string::operator=(&v137, (const std::string *)&v128);
    memset(&v129, 0, sizeof(v129));
    v79 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v80.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v137;
    else
      v80.__i_ = (std::__wrap_iter<const char *>::iterator_type)v137.__r_.__value_.__r.__words[0];
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v79 = v137.__r_.__value_.__l.__size_;
    v81.__i_ = &v80.__i_[v79];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v129, v80, v81, &v130, "p", 0);
    v82 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v83 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      v83 = v137.__r_.__value_.__l.__size_;
    v84 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v84 = v129.__r_.__value_.__l.__size_;
    if (v83 != v84)
      goto LABEL_229;
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v85 = &v129;
    else
      v85 = (std::string *)v129.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&v137.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v137.__r_.__value_.__l.__data_, v85, v137.__r_.__value_.__l.__size_))
        goto LABEL_229;
    }
    else if (*((_BYTE *)&v137.__r_.__value_.__s + 23))
    {
      v86 = &v137;
      while (v86->__r_.__value_.__s.__data_[0] == v85->__r_.__value_.__s.__data_[0])
      {
        v86 = (std::string *)((char *)v86 + 1);
        v85 = (std::string *)((char *)v85 + 1);
        if (!--v82)
          goto LABEL_237;
      }
LABEL_229:
      std::string::operator=(&v137, &v129);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v138, (unsigned __int8 *)&v137))
      {
        v87 = *(_QWORD *)(a2 + 8);
        if (v87 >= *(_QWORD *)(a2 + 16))
        {
          v89 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (__int128 *)&v137);
        }
        else
        {
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
          }
          else
          {
            v88 = *(_OWORD *)&v137.__r_.__value_.__l.__data_;
            *(_QWORD *)(v87 + 16) = *((_QWORD *)&v137.__r_.__value_.__l + 2);
            *(_OWORD *)v87 = v88;
          }
          v89 = v87 + 24;
          *(_QWORD *)(a2 + 8) = v87 + 24;
        }
        *(_QWORD *)(a2 + 8) = v89;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v138, (unsigned __int8 *)&v137, (uint64_t)&v137);
      }
    }
LABEL_237:
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v129.__r_.__value_.__l.__data_);
    if (SHIBYTE(v128.__traits_.__col_) < 0)
      operator delete(v128.__traits_.__loc_.__locale_);
    ++v76;
  }
  if (&v136 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v136, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v128.__traits_, "p$", 0);
  v90 = v136.__begin_;
  v91 = v136.__end_;
  while (v90 != v91)
  {
    if (SHIBYTE(v90->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v129, v90->__r_.__value_.__l.__data_, v90->__r_.__value_.__l.__size_);
    }
    else
    {
      v92 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v129.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v92;
    }
    std::string::operator=(&v137, &v129);
    memset(&v127, 0, sizeof(v127));
    v93 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v94.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v137;
    else
      v94.__i_ = (std::__wrap_iter<const char *>::iterator_type)v137.__r_.__value_.__r.__words[0];
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v93 = v137.__r_.__value_.__l.__size_;
    v95.__i_ = &v94.__i_[v93];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v127, v94, v95, &v128, "h", 0);
    v96 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v97 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      v97 = v137.__r_.__value_.__l.__size_;
    v98 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v98 = v127.__r_.__value_.__l.__size_;
    if (v97 != v98)
      goto LABEL_269;
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v99 = &v127;
    else
      v99 = (std::string *)v127.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&v137.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v137.__r_.__value_.__l.__data_, v99, v137.__r_.__value_.__l.__size_))
        goto LABEL_269;
    }
    else if (*((_BYTE *)&v137.__r_.__value_.__s + 23))
    {
      v100 = &v137;
      while (v100->__r_.__value_.__s.__data_[0] == v99->__r_.__value_.__s.__data_[0])
      {
        v100 = (std::string *)((char *)v100 + 1);
        v99 = (std::string *)((char *)v99 + 1);
        if (!--v96)
          goto LABEL_277;
      }
LABEL_269:
      std::string::operator=(&v137, &v127);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v138, (unsigned __int8 *)&v137))
      {
        v101 = *(_QWORD *)(a2 + 8);
        if (v101 >= *(_QWORD *)(a2 + 16))
        {
          v103 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (__int128 *)&v137);
        }
        else
        {
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
          }
          else
          {
            v102 = *(_OWORD *)&v137.__r_.__value_.__l.__data_;
            *(_QWORD *)(v101 + 16) = *((_QWORD *)&v137.__r_.__value_.__l + 2);
            *(_OWORD *)v101 = v102;
          }
          v103 = v101 + 24;
          *(_QWORD *)(a2 + 8) = v101 + 24;
        }
        *(_QWORD *)(a2 + 8) = v103;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v138, (unsigned __int8 *)&v137, (uint64_t)&v137);
      }
    }
LABEL_277:
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v127.__r_.__value_.__l.__data_);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v129.__r_.__value_.__l.__data_);
    ++v90;
  }
  cntrl = v128.__start_.__cntrl_;
  if (v128.__start_.__cntrl_)
  {
    p_shared_owners = &v128.__start_.__cntrl_->__shared_owners_;
    do
      v106 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v106 - 1, (unint64_t *)p_shared_owners));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  std::locale::~locale(&v128.__traits_.__loc_);
  v107 = v130.__start_.__cntrl_;
  if (v130.__start_.__cntrl_)
  {
    v108 = &v130.__start_.__cntrl_->__shared_owners_;
    do
      v109 = __ldaxr((unint64_t *)v108);
    while (__stlxr(v109 - 1, (unint64_t *)v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  std::locale::~locale(&v130.__traits_.__loc_);
  v110 = v131.__start_.__cntrl_;
  if (v131.__start_.__cntrl_)
  {
    v111 = &v131.__start_.__cntrl_->__shared_owners_;
    do
      v112 = __ldaxr((unint64_t *)v111);
    while (__stlxr(v112 - 1, (unint64_t *)v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  std::locale::~locale(&v131.__traits_.__loc_);
  v113 = v132.__start_.__cntrl_;
  if (v132.__start_.__cntrl_)
  {
    v114 = &v132.__start_.__cntrl_->__shared_owners_;
    do
      v115 = __ldaxr((unint64_t *)v114);
    while (__stlxr(v115 - 1, (unint64_t *)v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  std::locale::~locale(&v132.__traits_.__loc_);
  v116 = v133.__start_.__cntrl_;
  if (v133.__start_.__cntrl_)
  {
    v117 = &v133.__start_.__cntrl_->__shared_owners_;
    do
      v118 = __ldaxr((unint64_t *)v117);
    while (__stlxr(v118 - 1, (unint64_t *)v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  std::locale::~locale(&v133.__traits_.__loc_);
  v119 = __str.__start_.__cntrl_;
  if (__str.__start_.__cntrl_)
  {
    v120 = &__str.__start_.__cntrl_->__shared_owners_;
    do
      v121 = __ldaxr((unint64_t *)v120);
    while (__stlxr(v121 - 1, (unint64_t *)v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  std::locale::~locale(&__str.__traits_.__loc_);
  v122 = v135.__start_.__cntrl_;
  if (v135.__start_.__cntrl_)
  {
    v123 = &v135.__start_.__cntrl_->__shared_owners_;
    do
      v124 = __ldaxr((unint64_t *)v123);
    while (__stlxr(v124 - 1, (unint64_t *)v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  std::locale::~locale(&v135.__traits_.__loc_);
  v135.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v125);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v137.__r_.__value_.__l.__data_);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v138);
}

void sub_1A18A5E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::locale a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::locale a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::locale a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::locale a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t v62;
  uint64_t v63;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::locale::~locale(&a25);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::locale::~locale(&a33);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  std::locale::~locale(&a41);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  std::locale::~locale(&a49);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::locale::~locale(&a57);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v63 - 200);
  std::locale::~locale((std::locale *)(v63 - 240));
  *(_QWORD *)(v63 - 240) = v63 - 176;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v63 - 240));
  if (*(char *)(v63 - 129) < 0)
    operator delete(*(void **)(v63 - 152));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v63 - 128);
  *(_QWORD *)(v63 - 240) = v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v63 - 240));
  _Unwind_Resume(a1);
}

void NLQamus::analyze(_QWORD *a1@<X0>, std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  __int128 *v4;
  _QWORD *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  std::string *v10;
  unsigned __int8 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  unsigned __int8 *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  size_t size;
  char *locale;
  std::string *v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  unsigned __int8 *v30;
  __int128 *v31;
  __int128 *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  size_t v36;
  char *v37;
  std::string *v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  size_t v43;
  char *v44;
  std::string *v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string::size_type v54;
  std::__wrap_iter<const char *> v55;
  std::__wrap_iter<const char *> v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string::size_type v61;
  std::__wrap_iter<const char *> v62;
  std::__wrap_iter<const char *> v63;
  std::string::size_type v64;
  std::__wrap_iter<const char *> v65;
  std::__wrap_iter<const char *> v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  __int128 v70;
  std::string::size_type v71;
  std::__wrap_iter<const char *> v72;
  std::__wrap_iter<const char *> v73;
  std::string::size_type v74;
  std::__wrap_iter<const char *> v75;
  std::__wrap_iter<const char *> v76;
  std::string *v77;
  __int128 v78;
  std::string *p_s;
  std::string::size_type v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  std::string::size_type v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  std::string::size_type v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  std::string::size_type v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  std::string::size_type v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  char *v108;
  _QWORD *v109;
  uint64_t *v110;
  std::string::size_type v111;
  std::string::value_type *v112;
  int v113;
  std::string *v114;
  uint64_t v115;
  unint64_t v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  int v124;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v127;
  std::__shared_weak_count *v128;
  uint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t *v138;
  unint64_t v139;
  __int128 *v140;
  _QWORD *v141;
  __int128 *v142;
  __int128 *i;
  _QWORD *v144;
  __int128 *v145;
  _QWORD *v146;
  __int128 *v148;
  __int128 *v149;
  __int128 *j;
  std::string v151;
  std::string v152;
  std::string v153;
  std::string v154;
  std::string v155;
  std::string v156;
  std::string __p;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  int v166;
  __int128 v167;
  uint64_t v168;
  std::string v169;
  std::string v170;
  std::string v171;
  std::string v172;
  std::string v173;
  std::string v174;
  std::string v175;
  std::string v176;
  std::string v177;
  std::string v178;
  _DWORD v179[2];
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v180;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v181;
  std::string v182;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v183;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v184;
  std::string v185;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v186;
  std::string __s;
  void *v188[2];
  char v189;
  void *v190[2];
  char v191;
  std::string v192;
  std::string v193;
  std::string v194;
  std::string v195;
  std::string v196;
  _QWORD v197[3];
  std::string v198;
  void *v199[2];
  char v200;
  std::string v201;
  std::string v202;
  std::string v203;
  std::string v204;
  std::string v205;
  std::string v206;
  std::string v207;
  std::string v208;
  _QWORD v209[3];
  std::string v210;
  std::string v211;
  std::string v212;
  std::string v213;
  std::string v214;
  std::string v215;
  _QWORD v216[3];
  std::string v217;
  void *v218[2];
  char v219;
  void *v220[2];
  char v221;
  std::string v222;
  const std::string *v223;
  uint64_t v224;
  uint64_t v225;
  std::string v226;
  __int128 *v227;
  __int128 *v228;

  v3 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  NLQamus::segmentword(a2, (std::string::size_type)&v227);
  v4 = v227;
  v140 = v228;
  if (v227 != v228)
  {
    v141 = a1 + 20;
    v144 = a1 + 15;
    v146 = a1 + 25;
    v5 = a1 + 5;
    v6 = "";
    while (1)
    {
      v142 = v4;
      if (*((char *)v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v226, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
      }
      else
      {
        v7 = *v4;
        v226.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
        *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v7;
      }
      v223 = 0;
      v224 = 0;
      v225 = 0;
      splitWithChar((uint64_t)&v226, 9u, (uint64_t)&v223);
      if (SHIBYTE(v223->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v222, v223->__r_.__value_.__l.__data_, v223->__r_.__value_.__l.__size_);
      }
      else
      {
        v8 = *(_OWORD *)&v223->__r_.__value_.__l.__data_;
        v222.__r_.__value_.__r.__words[2] = v223->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v8;
      }
      v9 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v220, v6);
      if (0xAAAAAAAAAAAAAAABLL * ((v224 - (uint64_t)v223) >> 3) >= 2)
        std::string::operator=(v9, v223 + 1);
      v10 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v218, v6);
      if (0xAAAAAAAAAAAAAAABLL * ((v224 - (uint64_t)v223) >> 3) >= 3)
        std::string::operator=(v10, v223 + 2);
      if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v141, (unsigned __int8 *)&v222)&& std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v144, (unsigned __int8 *)v220)&& std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v146, (unsigned __int8 *)v218))
      {
        break;
      }
LABEL_401:
      if (v219 < 0)
        operator delete(v218[0]);
      if (v221 < 0)
        operator delete(v220[0]);
      if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v222.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v223;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v226.__r_.__value_.__l.__data_);
      v4 = (__int128 *)((char *)v142 + 24);
      if ((__int128 *)((char *)v142 + 24) == v140)
        goto LABEL_410;
    }
    v186.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v222;
    v11 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v141, (unsigned __int8 *)&v222, (uint64_t)&std::piecewise_construct, (__int128 **)&v186);
    v13 = (__int128 *)*((_QWORD *)v11 + 5);
    v12 = (__int128 *)*((_QWORD *)v11 + 6);
    for (i = v12; ; v12 = i)
    {
      if (v13 == v12)
        goto LABEL_401;
      v145 = v13;
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
      }
      else
      {
        v14 = *v13;
        v217.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
        *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v14;
      }
      memset(v216, 0, sizeof(v216));
      splitWithChar((uint64_t)&v217, 9u, (uint64_t)v216);
      v15 = v216[0];
      if (*(char *)(v216[0] + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)v216[0], *(_QWORD *)(v216[0] + 8));
        v15 = v216[0];
      }
      else
      {
        v16 = *(_OWORD *)v216[0];
        v215.__r_.__value_.__r.__words[2] = *(_QWORD *)(v216[0] + 16);
        *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v16;
      }
      if (*(char *)(v15 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)(v15 + 24), *(_QWORD *)(v15 + 32));
        v15 = v216[0];
      }
      else
      {
        v214 = *(std::string *)(v15 + 24);
      }
      if (*(char *)(v15 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v213, *(const std::string::value_type **)(v15 + 48), *(_QWORD *)(v15 + 56));
        v15 = v216[0];
      }
      else
      {
        v213 = *(std::string *)(v15 + 48);
      }
      if (*(char *)(v15 + 95) < 0)
      {
        std::string::__init_copy_ctor_external(&v212, *(const std::string::value_type **)(v15 + 72), *(_QWORD *)(v15 + 80));
        v15 = v216[0];
      }
      else
      {
        v212 = *(std::string *)(v15 + 72);
      }
      if (*(char *)(v15 + 119) < 0)
        std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)(v15 + 96), *(_QWORD *)(v15 + 104));
      else
        v211 = *(std::string *)(v15 + 96);
      v186.__traits_.__loc_.__locale_ = (std::locale::__imp *)v220;
      v17 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v144, (unsigned __int8 *)v220, (uint64_t)&std::piecewise_construct, (__int128 **)&v186);
      v19 = (__int128 *)*((_QWORD *)v17 + 5);
      v18 = (__int128 *)*((_QWORD *)v17 + 6);
      v148 = v18;
      while (v19 != v18)
      {
        if (*((char *)v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
        }
        else
        {
          v20 = *v19;
          v210.__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
          *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v20;
        }
        memset(v209, 0, sizeof(v209));
        splitWithChar((uint64_t)&v210, 9u, (uint64_t)v209);
        v21 = v209[0];
        if (*(char *)(v209[0] + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)v209[0], *(_QWORD *)(v209[0] + 8));
          v21 = v209[0];
        }
        else
        {
          v22 = *(_OWORD *)v209[0];
          v208.__r_.__value_.__r.__words[2] = *(_QWORD *)(v209[0] + 16);
          *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v22;
        }
        if (*(char *)(v21 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v207, *(const std::string::value_type **)(v21 + 24), *(_QWORD *)(v21 + 32));
          v21 = v209[0];
        }
        else
        {
          v207 = *(std::string *)(v21 + 24);
        }
        if (*(char *)(v21 + 71) < 0)
        {
          std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)(v21 + 48), *(_QWORD *)(v21 + 56));
          v21 = v209[0];
        }
        else
        {
          v206 = *(std::string *)(v21 + 48);
        }
        if (*(char *)(v21 + 95) < 0)
        {
          std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)(v21 + 72), *(_QWORD *)(v21 + 80));
          v21 = v209[0];
        }
        else
        {
          v205 = *(std::string *)(v21 + 72);
        }
        if (*(char *)(v21 + 119) < 0)
        {
          std::string::__init_copy_ctor_external(&v204, *(const std::string::value_type **)(v21 + 96), *(_QWORD *)(v21 + 104));
          v21 = v209[0];
        }
        else
        {
          v204 = *(std::string *)(v21 + 96);
        }
        if (*(char *)(v21 + 143) < 0)
        {
          std::string::__init_copy_ctor_external(&v203, *(const std::string::value_type **)(v21 + 120), *(_QWORD *)(v21 + 128));
          v21 = v209[0];
        }
        else
        {
          v203 = *(std::string *)(v21 + 120);
        }
        if (*(char *)(v21 + 167) < 0)
        {
          std::string::__init_copy_ctor_external(&v202, *(const std::string::value_type **)(v21 + 144), *(_QWORD *)(v21 + 152));
          v21 = v209[0];
        }
        else
        {
          v202 = *(std::string *)(v21 + 144);
        }
        if (*(char *)(v21 + 191) < 0)
          std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)(v21 + 168), *(_QWORD *)(v21 + 176));
        else
          v201 = *(std::string *)(v21 + 168);
        if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v213.__r_.__value_.__r.__words[2]);
        else
          size = v213.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v186, size + 1);
        if (SHIBYTE(v186.__traits_.__col_) >= 0)
          locale = (char *)&v186;
        else
          locale = (char *)v186.__traits_.__loc_.__locale_;
        if (size)
        {
          if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &v213;
          else
            v25 = (std::string *)v213.__r_.__value_.__r.__words[0];
          memmove(locale, v25, size);
        }
        *(_WORD *)&locale[size] = 32;
        if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &v206;
        else
          v26 = (std::string *)v206.__r_.__value_.__r.__words[0];
        if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
        else
          v27 = v206.__r_.__value_.__l.__size_;
        v28 = std::string::append((std::string *)&v186, (const std::string::value_type *)v26, v27);
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        trim((unint64_t)&__p, v199);
        v149 = v19;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v186.__traits_.__col_) < 0)
          operator delete(v186.__traits_.__loc_.__locale_);
        if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a1, (unsigned __int8 *)v199))
        {
          v186.__traits_.__loc_.__locale_ = (std::locale::__imp *)v218;
          v30 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v146, (unsigned __int8 *)v218, (uint64_t)&std::piecewise_construct, (__int128 **)&v186);
          v32 = (__int128 *)*((_QWORD *)v30 + 5);
          v31 = (__int128 *)*((_QWORD *)v30 + 6);
          for (j = v31; ; v31 = j)
          {
            if (v32 == v31)
              goto LABEL_367;
            if (*((char *)v32 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v198, *(const std::string::value_type **)v32, *((_QWORD *)v32 + 1));
            }
            else
            {
              v33 = *v32;
              v198.__r_.__value_.__r.__words[2] = *((_QWORD *)v32 + 2);
              *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v33;
            }
            memset(v197, 0, sizeof(v197));
            splitWithChar((uint64_t)&v198, 9u, (uint64_t)v197);
            v34 = v197[0];
            if (*(char *)(v197[0] + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)v197[0], *(_QWORD *)(v197[0] + 8));
              v34 = v197[0];
            }
            else
            {
              v35 = *(_OWORD *)v197[0];
              v196.__r_.__value_.__r.__words[2] = *(_QWORD *)(v197[0] + 16);
              *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v35;
            }
            if (*(char *)(v34 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&v195, *(const std::string::value_type **)(v34 + 24), *(_QWORD *)(v34 + 32));
              v34 = v197[0];
            }
            else
            {
              v195 = *(std::string *)(v34 + 24);
            }
            if (*(char *)(v34 + 71) < 0)
            {
              std::string::__init_copy_ctor_external(&v194, *(const std::string::value_type **)(v34 + 48), *(_QWORD *)(v34 + 56));
              v34 = v197[0];
            }
            else
            {
              v194 = *(std::string *)(v34 + 48);
            }
            if (*(char *)(v34 + 95) < 0)
            {
              std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)(v34 + 72), *(_QWORD *)(v34 + 80));
              v34 = v197[0];
            }
            else
            {
              v193 = *(std::string *)(v34 + 72);
            }
            if (*(char *)(v34 + 119) < 0)
              std::string::__init_copy_ctor_external(&v192, *(const std::string::value_type **)(v34 + 96), *(_QWORD *)(v34 + 104));
            else
              v192 = *(std::string *)(v34 + 96);
            if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v36 = HIBYTE(v213.__r_.__value_.__r.__words[2]);
            else
              v36 = v213.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v186, v36 + 1);
            if (SHIBYTE(v186.__traits_.__col_) >= 0)
              v37 = (char *)&v186;
            else
              v37 = (char *)v186.__traits_.__loc_.__locale_;
            if (v36)
            {
              if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v38 = &v213;
              else
                v38 = (std::string *)v213.__r_.__value_.__r.__words[0];
              memmove(v37, v38, v36);
            }
            *(_WORD *)&v37[v36] = 32;
            if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v39 = &v194;
            else
              v39 = (std::string *)v194.__r_.__value_.__r.__words[0];
            if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v40 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
            else
              v40 = v194.__r_.__value_.__l.__size_;
            v41 = std::string::append((std::string *)&v186, (const std::string::value_type *)v39, v40);
            v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v42;
            v41->__r_.__value_.__l.__size_ = 0;
            v41->__r_.__value_.__r.__words[2] = 0;
            v41->__r_.__value_.__r.__words[0] = 0;
            trim((unint64_t)&__p, v190);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v186.__traits_.__col_) < 0)
              operator delete(v186.__traits_.__loc_.__locale_);
            if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v5, (unsigned __int8 *)v190))
            {
              break;
            }
LABEL_350:
            if (v191 < 0)
              operator delete(v190[0]);
            if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v192.__r_.__value_.__l.__data_);
            if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v193.__r_.__value_.__l.__data_);
            if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v194.__r_.__value_.__l.__data_);
            if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v195.__r_.__value_.__l.__data_);
            if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v196.__r_.__value_.__l.__data_);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v197;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v198.__r_.__value_.__l.__data_);
            v32 = (__int128 *)((char *)v32 + 24);
          }
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
          else
            v43 = v206.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v186, v43 + 1);
          if (SHIBYTE(v186.__traits_.__col_) >= 0)
            v44 = (char *)&v186;
          else
            v44 = (char *)v186.__traits_.__loc_.__locale_;
          if (v43)
          {
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v45 = &v206;
            else
              v45 = (std::string *)v206.__r_.__value_.__r.__words[0];
            memmove(v44, v45, v43);
          }
          *(_WORD *)&v44[v43] = 32;
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v46 = &v194;
          else
            v46 = (std::string *)v194.__r_.__value_.__r.__words[0];
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v47 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
          else
            v47 = v194.__r_.__value_.__l.__size_;
          v48 = std::string::append((std::string *)&v186, (const std::string::value_type *)v46, v47);
          v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          trim((unint64_t)&__p, v188);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v186.__traits_.__col_) < 0)
            operator delete(v186.__traits_.__loc_.__locale_);
          if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a1 + 10, (unsigned __int8 *)v188))
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v214.__r_.__value_.__l.__data_, (const void **)&v207.__r_.__value_.__l.__data_, (uint64_t)&__p);
            if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v50 = &v195;
            else
              v50 = (std::string *)v195.__r_.__value_.__r.__words[0];
            if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v51 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
            else
              v51 = v195.__r_.__value_.__l.__size_;
            v52 = std::string::append(&__p, (const std::string::value_type *)v50, v51);
            v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
            __s.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v53;
            v52->__r_.__value_.__l.__size_ = 0;
            v52->__r_.__value_.__r.__words[2] = 0;
            v52->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v186.__traits_, "A\\+a([pt])", 0);
            memset(&__p, 0, sizeof(__p));
            v54 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v55.__i_ = (std::__wrap_iter<const char *>::iterator_type)&__s;
            else
              v55.__i_ = (std::__wrap_iter<const char *>::iterator_type)__s.__r_.__value_.__r.__words[0];
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v54 = __s.__r_.__value_.__l.__size_;
            v56.__i_ = &v55.__i_[v54];
            std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&__p, v55, v56, &v186, "A$1", 0);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s.__r_.__value_.__l.__data_);
            __s = __p;
            std::string::basic_string[abi:ne180100]<0>(&__p, "{");
            std::string::basic_string[abi:ne180100]<0>(&v184, "A");
            replaceAll(&__s, (char *)&__p, (uint64_t)&v184);
            if (SHIBYTE(v184.__traits_.__col_) < 0)
              operator delete(v184.__traits_.__loc_.__locale_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&__p, "+");
            std::string::basic_string[abi:ne180100]<0>(&v184, v6);
            replaceAll(&__s, (char *)&__p, (uint64_t)&v184);
            if (SHIBYTE(v184.__traits_.__col_) < 0)
              operator delete(v184.__traits_.__loc_.__locale_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v211.__r_.__value_.__l.__data_, (const void **)&v204.__r_.__value_.__l.__data_, (uint64_t)&__p);
            if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = &v192;
            else
              v57 = (std::string *)v192.__r_.__value_.__r.__words[0];
            if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
            else
              v58 = v192.__r_.__value_.__l.__size_;
            v59 = std::string::append(&__p, (const std::string::value_type *)v57, v58);
            v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            v185.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v184.__traits_, "^\\+", 0);
            memset(&__p, 0, sizeof(__p));
            v61 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
            if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v62.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v185;
            else
              v62.__i_ = (std::__wrap_iter<const char *>::iterator_type)v185.__r_.__value_.__r.__words[0];
            if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v61 = v185.__r_.__value_.__l.__size_;
            v63.__i_ = &v62.__i_[v61];
            std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&__p, v62, v63, &v184, v6, 0);
            if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v185.__r_.__value_.__l.__data_);
            v185 = __p;
            std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v183.__traits_, "\\+$", 0);
            memset(&__p, 0, sizeof(__p));
            v64 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
            if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v65.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v185;
            else
              v65.__i_ = (std::__wrap_iter<const char *>::iterator_type)v185.__r_.__value_.__r.__words[0];
            if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v64 = v185.__r_.__value_.__l.__size_;
            v66.__i_ = &v65.__i_[v64];
            std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&__p, v65, v66, &v183, v6, 0);
            if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v185.__r_.__value_.__l.__data_);
            v185 = __p;
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v212.__r_.__value_.__l.__data_, (const void **)&v205.__r_.__value_.__l.__data_, (uint64_t)&__p);
            if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v67 = &v193;
            else
              v67 = (std::string *)v193.__r_.__value_.__r.__words[0];
            if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v68 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
            else
              v68 = v193.__r_.__value_.__l.__size_;
            v69 = std::string::append(&__p, (const std::string::value_type *)v67, v68);
            v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
            v182.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v182.__r_.__value_.__l.__data_ = v70;
            v69->__r_.__value_.__l.__size_ = 0;
            v69->__r_.__value_.__r.__words[2] = 0;
            v69->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v181.__traits_, "^\\s*\\+\\s*", 0);
            memset(&__p, 0, sizeof(__p));
            v71 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
            if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v182;
            else
              v72.__i_ = (std::__wrap_iter<const char *>::iterator_type)v182.__r_.__value_.__r.__words[0];
            if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v71 = v182.__r_.__value_.__l.__size_;
            v73.__i_ = &v72.__i_[v71];
            std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&__p, v72, v73, &v181, v6, 0);
            if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v182.__r_.__value_.__l.__data_);
            v182 = __p;
            std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v180.__traits_, "\\s*\\+\\s*$", 0);
            memset(&__p, 0, sizeof(__p));
            v74 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
            if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v75.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v182;
            else
              v75.__i_ = (std::__wrap_iter<const char *>::iterator_type)v182.__r_.__value_.__r.__words[0];
            if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v74 = v182.__r_.__value_.__l.__size_;
            v76.__i_ = &v75.__i_[v74];
            std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&__p, v75, v76, &v180, v6, 0);
            if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v182.__r_.__value_.__l.__data_);
            v182 = __p;
            std::operator+<char>();
            v77 = std::string::append(&v169, "</lemmaID>\n\t\t<voc>");
            v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
            v170.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v78;
            v77->__r_.__value_.__l.__size_ = 0;
            v77->__r_.__value_.__r.__words[2] = 0;
            v77->__r_.__value_.__r.__words[0] = 0;
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_s = &__s;
            else
              p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v80 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            else
              v80 = __s.__r_.__value_.__l.__size_;
            v81 = std::string::append(&v170, (const std::string::value_type *)p_s, v80);
            v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
            v171.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v82;
            v81->__r_.__value_.__l.__size_ = 0;
            v81->__r_.__value_.__r.__words[2] = 0;
            v81->__r_.__value_.__r.__words[0] = 0;
            v83 = std::string::append(&v171, "</voc>\n\t\t<pos>");
            v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
            v172.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v84;
            v83->__r_.__value_.__l.__size_ = 0;
            v83->__r_.__value_.__r.__words[2] = 0;
            v83->__r_.__value_.__r.__words[0] = 0;
            if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v85 = &v185;
            else
              v85 = (std::string *)v185.__r_.__value_.__r.__words[0];
            if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v86 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
            else
              v86 = v185.__r_.__value_.__l.__size_;
            v87 = std::string::append(&v172, (const std::string::value_type *)v85, v86);
            v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
            v173.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v88;
            v87->__r_.__value_.__l.__size_ = 0;
            v87->__r_.__value_.__r.__words[2] = 0;
            v87->__r_.__value_.__r.__words[0] = 0;
            v89 = std::string::append(&v173, "</pos>\n\t\t<gloss>");
            v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
            v174.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v90;
            v89->__r_.__value_.__l.__size_ = 0;
            v89->__r_.__value_.__r.__words[2] = 0;
            v89->__r_.__value_.__r.__words[0] = 0;
            if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v91 = &v182;
            else
              v91 = (std::string *)v182.__r_.__value_.__r.__words[0];
            if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v92 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
            else
              v92 = v182.__r_.__value_.__l.__size_;
            v93 = std::string::append(&v174, (const std::string::value_type *)v91, v92);
            v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
            v175.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v94;
            v93->__r_.__value_.__l.__size_ = 0;
            v93->__r_.__value_.__r.__words[2] = 0;
            v93->__r_.__value_.__r.__words[0] = 0;
            v95 = std::string::append(&v175, "</gloss>\n\t\t<lexid>");
            v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
            v176.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v176.__r_.__value_.__l.__data_ = v96;
            v95->__r_.__value_.__l.__size_ = 0;
            v95->__r_.__value_.__r.__words[2] = 0;
            v95->__r_.__value_.__r.__words[0] = 0;
            if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v97 = &v201;
            else
              v97 = (std::string *)v201.__r_.__value_.__r.__words[0];
            if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v98 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
            else
              v98 = v201.__r_.__value_.__l.__size_;
            v99 = std::string::append(&v176, (const std::string::value_type *)v97, v98);
            v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
            v177.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v100;
            v99->__r_.__value_.__l.__size_ = 0;
            v99->__r_.__value_.__r.__words[2] = 0;
            v99->__r_.__value_.__r.__words[0] = 0;
            v101 = std::string::append(&v177, "</lexid>\n\t\t<length>");
            v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
            v178.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v178.__r_.__value_.__l.__data_ = v102;
            v101->__r_.__value_.__l.__size_ = 0;
            v101->__r_.__value_.__r.__words[2] = 0;
            v101->__r_.__value_.__r.__words[0] = 0;
            if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v103 = &v202;
            else
              v103 = (std::string *)v202.__r_.__value_.__r.__words[0];
            if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v104 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
            else
              v104 = v202.__r_.__value_.__l.__size_;
            v105 = std::string::append(&v178, (const std::string::value_type *)v103, v104);
            v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v106;
            v105->__r_.__value_.__l.__size_ = 0;
            v105->__r_.__value_.__r.__words[2] = 0;
            v105->__r_.__value_.__r.__words[0] = 0;
            v107 = std::string::append(&__p, "</length>\n");
            v108 = v6;
            v109 = v5;
            v110 = v3;
            v112 = (std::string::value_type *)v107->__r_.__value_.__r.__words[0];
            v111 = v107->__r_.__value_.__l.__size_;
            v179[0] = v107->__r_.__value_.__r.__words[2];
            *(_DWORD *)((char *)v179 + 3) = *(_DWORD *)((char *)&v107->__r_.__value_.__r.__words[2] + 3);
            v113 = SHIBYTE(v107->__r_.__value_.__r.__words[2]);
            v107->__r_.__value_.__l.__size_ = 0;
            v107->__r_.__value_.__r.__words[2] = 0;
            v107->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v178.__r_.__value_.__l.__data_);
            if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v177.__r_.__value_.__l.__data_);
            if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v176.__r_.__value_.__l.__data_);
            if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v175.__r_.__value_.__l.__data_);
            if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v174.__r_.__value_.__l.__data_);
            if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v173.__r_.__value_.__l.__data_);
            if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v172.__r_.__value_.__l.__data_);
            if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v171.__r_.__value_.__l.__data_);
            if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v170.__r_.__value_.__l.__data_);
            if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v169.__r_.__value_.__l.__data_);
            if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v156, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
            else
              v156 = v203;
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v155, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              v155 = __s;
            if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v154, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
            else
              v154 = v185;
            if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v153, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
            else
              v153 = v182;
            if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v152, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
            else
              v152 = v201;
            if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v114 = &v202;
            else
              v114 = (std::string *)v202.__r_.__value_.__r.__words[0];
            v115 = atoi((const char *)v114);
            if (v113 < 0)
            {
              std::string::__init_copy_ctor_external(&v151, v112, v111);
            }
            else
            {
              v151.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
              v151.__r_.__value_.__l.__size_ = v111;
              LODWORD(v151.__r_.__value_.__r.__words[2]) = v179[0];
              *(_DWORD *)((char *)&v151.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v179 + 3);
              *((_BYTE *)&v151.__r_.__value_.__s + 23) = v113;
            }
            NLResult::NLResult(&__p, &v156, &v155, &v154, &v153, &v152, v115, &v151);
            v116 = v110[1];
            if (v116 >= v110[2])
            {
              v123 = std::vector<NLResult>::__push_back_slow_path<NLResult>(v110, (__int128 *)&__p);
              v124 = SHIBYTE(v168);
              v110[1] = v123;
              if (v124 < 0)
                operator delete((void *)v167);
            }
            else
            {
              v117 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)(v116 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)v116 = v117;
              memset(&__p, 0, sizeof(__p));
              v118 = v159;
              *(_OWORD *)(v116 + 24) = v158;
              *(_QWORD *)(v116 + 40) = v118;
              v159 = 0;
              v158 = 0uLL;
              v119 = v160;
              *(_QWORD *)(v116 + 64) = v161;
              *(_OWORD *)(v116 + 48) = v119;
              v161 = 0;
              v160 = 0uLL;
              v120 = v162;
              *(_QWORD *)(v116 + 88) = v163;
              *(_OWORD *)(v116 + 72) = v120;
              v162 = 0uLL;
              v163 = 0;
              v121 = v164;
              *(_QWORD *)(v116 + 112) = v165;
              *(_OWORD *)(v116 + 96) = v121;
              v164 = 0uLL;
              v165 = 0;
              *(_DWORD *)(v116 + 120) = v166;
              v122 = v167;
              *(_QWORD *)(v116 + 144) = v168;
              *(_OWORD *)(v116 + 128) = v122;
              v168 = 0;
              v167 = 0uLL;
              v110[1] = v116 + 152;
            }
            if (SHIBYTE(v165) < 0)
              operator delete((void *)v164);
            if (SHIBYTE(v163) < 0)
              operator delete((void *)v162);
            if (SHIBYTE(v161) < 0)
              operator delete((void *)v160);
            if (SHIBYTE(v159) < 0)
              operator delete((void *)v158);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v151.__r_.__value_.__l.__data_);
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v152.__r_.__value_.__l.__data_);
            if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v153.__r_.__value_.__l.__data_);
            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v154.__r_.__value_.__l.__data_);
            if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v155.__r_.__value_.__l.__data_);
            if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v156.__r_.__value_.__l.__data_);
              if ((v113 & 0x80000000) == 0)
                goto LABEL_317;
            }
            else if ((v113 & 0x80000000) == 0)
            {
LABEL_317:
              cntrl = v180.__start_.__cntrl_;
              v3 = v110;
              v5 = v109;
              v6 = v108;
              if (v180.__start_.__cntrl_)
              {
                p_shared_owners = &v180.__start_.__cntrl_->__shared_owners_;
                do
                  v127 = __ldaxr((unint64_t *)p_shared_owners);
                while (__stlxr(v127 - 1, (unint64_t *)p_shared_owners));
                if (!v127)
                {
                  ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
                  std::__shared_weak_count::__release_weak(cntrl);
                }
              }
              std::locale::~locale(&v180.__traits_.__loc_);
              v128 = v181.__start_.__cntrl_;
              if (v181.__start_.__cntrl_)
              {
                v129 = &v181.__start_.__cntrl_->__shared_owners_;
                do
                  v130 = __ldaxr((unint64_t *)v129);
                while (__stlxr(v130 - 1, (unint64_t *)v129));
                if (!v130)
                {
                  ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                  std::__shared_weak_count::__release_weak(v128);
                }
              }
              std::locale::~locale(&v181.__traits_.__loc_);
              if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v182.__r_.__value_.__l.__data_);
              v131 = v183.__start_.__cntrl_;
              if (v183.__start_.__cntrl_)
              {
                v132 = &v183.__start_.__cntrl_->__shared_owners_;
                do
                  v133 = __ldaxr((unint64_t *)v132);
                while (__stlxr(v133 - 1, (unint64_t *)v132));
                if (!v133)
                {
                  ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                  std::__shared_weak_count::__release_weak(v131);
                }
              }
              std::locale::~locale(&v183.__traits_.__loc_);
              v134 = v184.__start_.__cntrl_;
              if (v184.__start_.__cntrl_)
              {
                v135 = &v184.__start_.__cntrl_->__shared_owners_;
                do
                  v136 = __ldaxr((unint64_t *)v135);
                while (__stlxr(v136 - 1, (unint64_t *)v135));
                if (!v136)
                {
                  ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                  std::__shared_weak_count::__release_weak(v134);
                }
              }
              std::locale::~locale(&v184.__traits_.__loc_);
              if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v185.__r_.__value_.__l.__data_);
              v137 = v186.__start_.__cntrl_;
              if (v186.__start_.__cntrl_)
              {
                v138 = &v186.__start_.__cntrl_->__shared_owners_;
                do
                  v139 = __ldaxr((unint64_t *)v138);
                while (__stlxr(v139 - 1, (unint64_t *)v138));
                if (!v139)
                {
                  ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                  std::__shared_weak_count::__release_weak(v137);
                }
              }
              std::locale::~locale(&v186.__traits_.__loc_);
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s.__r_.__value_.__l.__data_);
              goto LABEL_348;
            }
            operator delete(v112);
            goto LABEL_317;
          }
LABEL_348:
          if (v189 < 0)
            operator delete(v188[0]);
          goto LABEL_350;
        }
LABEL_367:
        if (v200 < 0)
          operator delete(v199[0]);
        if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v201.__r_.__value_.__l.__data_);
        if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v202.__r_.__value_.__l.__data_);
        if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v203.__r_.__value_.__l.__data_);
        if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v204.__r_.__value_.__l.__data_);
        if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v205.__r_.__value_.__l.__data_);
        if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v206.__r_.__value_.__l.__data_);
        if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v207.__r_.__value_.__l.__data_);
        if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v208.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v209;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v210.__r_.__value_.__l.__data_);
        v19 = (__int128 *)((char *)v149 + 24);
        v18 = v148;
      }
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v211.__r_.__value_.__l.__data_);
      if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v212.__r_.__value_.__l.__data_);
      if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v213.__r_.__value_.__l.__data_);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v215.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v216;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v217.__r_.__value_.__l.__data_);
      v13 = (__int128 *)((char *)v145 + 24);
    }
  }
LABEL_410:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v227;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1A18A783C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  std::vector<NLResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a51);
  _Unwind_Resume(a1);
}

void sub_1A18A7F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
    JUMPOUT(0x1A18A7BD8);
  JUMPOUT(0x1A18A7BDCLL);
}

void sub_1A18A7F84()
{
  JUMPOUT(0x1A18A7C1CLL);
}

void sub_1A18A7F8C()
{
  JUMPOUT(0x1A18A7CECLL);
}

void sub_1A18A7FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
    JUMPOUT(0x1A18A7CF8);
  JUMPOUT(0x1A18A7CFCLL);
}

void sub_1A18A7FB4()
{
  if (SLOBYTE(STACK[0x477]) < 0)
    JUMPOUT(0x1A18A7D58);
  JUMPOUT(0x1A18A7D5CLL);
}

void sub_1A18A7FE8()
{
  if (SLOBYTE(STACK[0x477]) < 0)
    JUMPOUT(0x1A18A7D68);
  JUMPOUT(0x1A18A7D6CLL);
}

void sub_1A18A7FF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x477]) < 0)
    JUMPOUT(0x1A18A7D68);
  JUMPOUT(0x1A18A7D6CLL);
}

void sub_1A18A801C()
{
  JUMPOUT(0x1A18A7D6CLL);
}

void NLResult::~NLResult(void **this)
{
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void NLQamus::segmentword(std::string *__str@<X1>, std::string::size_type size@<X8>)
{
  std::vector<std::string> *v3;
  int64_t v4;
  std::allocator<std::string> *v5;
  std::string::size_type v6;
  uint64_t v7;
  size_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  std::vector<std::string>::pointer end;
  std::string *value;
  std::string::size_type v24;
  std::string *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  std::string *v30;
  std::string *v31;
  std::string::size_type v32;
  int64_t v34;
  int v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::__split_buffer<std::string> __v;
  _QWORD v43[5];

  v3 = (std::vector<std::string> *)size;
  v4 = 0;
  v43[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(size + 16) = 0;
  v5 = (std::allocator<std::string> *)(size + 16);
  LODWORD(size) = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  v3->__begin_ = 0;
  v3->__end_ = 0;
  v34 = (int)size;
  v35 = size;
  do
  {
    std::string::basic_string(&v41, __str, 0, v4, (std::allocator<char> *)&__v);
    if (v34 > v4)
    {
      v6 = 0;
      v7 = v35;
      do
      {
        std::string::basic_string(&v40, __str, v4, v7, (std::allocator<char> *)&__v);
        std::string::basic_string(&v39, __str, v4 + v7, v6, (std::allocator<char> *)&__v);
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v8 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
        else
          v8 = v41.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v36, v8 + 1);
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = &v36;
        else
          v9 = (std::string *)v36.__r_.__value_.__r.__words[0];
        if (v8)
        {
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v10 = &v41;
          else
            v10 = (std::string *)v41.__r_.__value_.__r.__words[0];
          memmove(v9, v10, v8);
        }
        *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 9;
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &v40;
        else
          v11 = (std::string *)v40.__r_.__value_.__r.__words[0];
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
        else
          v12 = v40.__r_.__value_.__l.__size_;
        v13 = std::string::append(&v36, (const std::string::value_type *)v11, v12);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v37.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        v15 = std::string::append(&v37, "\t");
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v39;
        else
          v17 = (std::string *)v39.__r_.__value_.__r.__words[0];
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        else
          v18 = v39.__r_.__value_.__l.__size_;
        v19 = std::string::append(&v38, (const std::string::value_type *)v17, v18);
        v20 = v19->__r_.__value_.__r.__words[0];
        v43[0] = v19->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v43 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
        v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        end = v3->__end_;
        value = v3->__end_cap_.__value_;
        if (end >= value)
        {
          v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v3->__begin_) >> 3);
          v27 = v26 + 1;
          if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v3->__begin_) >> 3);
          if (2 * v28 > v27)
            v27 = 2 * v28;
          if (v28 >= 0x555555555555555)
            v29 = 0xAAAAAAAAAAAAAAALL;
          else
            v29 = v27;
          __v.__end_cap_.__value_ = v5;
          if (v29)
            v30 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v5, v29);
          else
            v30 = 0;
          v31 = v30 + v26;
          __v.__first_ = v30;
          __v.__begin_ = v31;
          __v.__end_cap_.__value_ = &v30[v29];
          v32 = v43[0];
          v31->__r_.__value_.__r.__words[0] = v20;
          v31->__r_.__value_.__l.__size_ = v32;
          *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v43 + 7);
          *((_BYTE *)&v31->__r_.__value_.__s + 23) = v21;
          v43[0] = 0;
          *(_QWORD *)((char *)v43 + 7) = 0;
          __v.__end_ = v31 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(v3, &__v);
          v25 = v3->__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          v24 = v43[0];
          end->__r_.__value_.__r.__words[0] = v20;
          end->__r_.__value_.__l.__size_ = v24;
          *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v43 + 7);
          *((_BYTE *)&end->__r_.__value_.__s + 23) = v21;
          v25 = end + 1;
          v3->__end_ = end + 1;
        }
        v3->__end_ = v25;
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        if (v7 < 2)
          break;
        --v7;
      }
      while (v6++ < 6);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    ++v4;
    --v35;
  }
  while (v4 != 5);
}

void sub_1A18A8440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  _Unwind_Resume(a1);
}

void NLResult::NLResult(std::string *this, const NLResult *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  LODWORD(this[5].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 30);
  v9 = (std::string *)((char *)this + 128);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 8);
    this[6].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 18);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1A18A8660(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  v6 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v6 + 8);
  v9 = a2 + 32;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(v9 + 8);
  v10 = v8 == v7 && v5 == v4;
  if (v5 != v4 && v8 != v7)
    return *(_QWORD *)a1 == *(_QWORD *)a2
        && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
        && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
        && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
        && std::sub_match<std::__wrap_iter<char *>>::compare[abi:ne180100](v4, v7) == 0;
  return v10;
}

uint64_t std::sub_match<std::__wrap_iter<char *>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  size_t v4;
  void **v5;
  char v6;
  size_t v7;
  const void *p_p;
  size_t v9;
  void **v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  void **v15;
  size_t v16;
  uint64_t v17;
  void *__p;
  size_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, *(char **)a1, *(char **)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
  else
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v15, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v3 = HIBYTE(v17);
    v5 = v15;
    v4 = v16;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  v6 = HIBYTE(v20);
  if (v20 >= 0)
    v7 = HIBYTE(v20);
  else
    v7 = v19;
  if (v20 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v3 & 0x80u) == 0)
    v9 = v3;
  else
    v9 = v4;
  if ((v3 & 0x80u) == 0)
    v10 = (void **)&v15;
  else
    v10 = v5;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_24;
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  v13 = v9 < v7;
  if (v7 < v9)
    v13 = -1;
  if (v12)
    return v12;
  else
    return v13;
}

void sub_1A18A8880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::vector<NLResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::allocator<NLResult>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<NLResult>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 151) < 0)
    operator delete(*(void **)(a2 + 128));
  if (*(char *)(a2 + 119) < 0)
    operator delete(*(void **)(a2 + 96));
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::vector<NLResult>::__push_back_slow_path<NLResult>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v20[5];

  v3 = *a1;
  v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xD79435E50D7943)
    v9 = 0x1AF286BCA1AF286;
  else
    v9 = v5;
  v20[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLResult>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[152 * v4];
  v20[0] = v10;
  v20[1] = v11;
  v20[3] = &v10[152 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)v11 + 5) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(v11 + 24) = v13;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v14 = a2[3];
  *((_QWORD *)v11 + 8) = *((_QWORD *)a2 + 8);
  *((_OWORD *)v11 + 3) = v14;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  v15 = *(__int128 *)((char *)a2 + 72);
  *((_QWORD *)v11 + 11) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(v11 + 72) = v15;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  v16 = a2[6];
  *((_QWORD *)v11 + 14) = *((_QWORD *)a2 + 14);
  *((_OWORD *)v11 + 6) = v16;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_DWORD *)v11 + 30) = *((_DWORD *)a2 + 30);
  v17 = a2[8];
  *((_QWORD *)v11 + 18) = *((_QWORD *)a2 + 18);
  *((_OWORD *)v11 + 8) = v17;
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 16) = 0;
  v20[2] = v11 + 152;
  std::vector<NLResult>::__swap_out_circular_buffer(a1, v20);
  v18 = a1[1];
  std::__split_buffer<NLResult>::~__split_buffer(v20);
  return v18;
}

void sub_1A18A8C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<NLResult>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<NLResult>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLResult>,std::reverse_iterator<NLResult*>,std::reverse_iterator<NLResult*>,std::reverse_iterator<NLResult*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NLResult>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(152 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLResult>,std::reverse_iterator<NLResult*>,std::reverse_iterator<NLResult*>,std::reverse_iterator<NLResult*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v19[3];
  char v20;
  __int128 v21;
  __int128 v22;

  *(_QWORD *)&v22 = a6;
  *((_QWORD *)&v22 + 1) = a7;
  v21 = v22;
  v19[0] = a1;
  v19[1] = &v21;
  v19[2] = &v22;
  if (a3 == a5)
  {
    v17 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 152);
      *(_QWORD *)(v8 - 136) = *(_QWORD *)(a3 + v7 - 136);
      *(_OWORD *)(v8 - 152) = v10;
      *(_QWORD *)(v9 - 144) = 0;
      *(_QWORD *)(v9 - 136) = 0;
      *(_QWORD *)(v9 - 152) = 0;
      v11 = *(_OWORD *)(a3 + v7 - 128);
      *(_QWORD *)(v8 - 112) = *(_QWORD *)(a3 + v7 - 112);
      *(_OWORD *)(v8 - 128) = v11;
      *(_QWORD *)(v9 - 120) = 0;
      *(_QWORD *)(v9 - 112) = 0;
      *(_QWORD *)(v9 - 128) = 0;
      v12 = *(_OWORD *)(a3 + v7 - 104);
      *(_QWORD *)(v8 - 88) = *(_QWORD *)(a3 + v7 - 88);
      *(_OWORD *)(v8 - 104) = v12;
      *(_QWORD *)(v9 - 96) = 0;
      *(_QWORD *)(v9 - 88) = 0;
      v13 = *(_OWORD *)(a3 + v7 - 80);
      v14 = *(_QWORD *)(a3 + v7 - 64);
      *(_QWORD *)(v9 - 104) = 0;
      *(_QWORD *)(v8 - 64) = v14;
      *(_OWORD *)(v8 - 80) = v13;
      *(_QWORD *)(v9 - 80) = 0;
      *(_QWORD *)(v9 - 72) = 0;
      *(_QWORD *)(v9 - 64) = 0;
      v15 = *(_OWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(a3 + v7 - 40);
      *(_OWORD *)(v8 - 56) = v15;
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_DWORD *)(v8 - 32) = *(_DWORD *)(a3 + v7 - 32);
      v16 = *(_OWORD *)(a3 + v7 - 24);
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 + v7 - 8);
      *(_OWORD *)(v8 - 24) = v16;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      v7 -= 152;
    }
    while (a3 + v7 != a5);
    *((_QWORD *)&v22 + 1) = a7 + v7;
    v17 = v22;
  }
  v20 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLResult>,std::reverse_iterator<NLResult*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v19);
  return v17;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLResult>,std::reverse_iterator<NLResult*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<NLResult>,std::reverse_iterator<NLResult*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<NLResult>,std::reverse_iterator<NLResult*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<NLResult>::destroy[abi:ne180100](v3, v1);
      v1 += 152;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<NLResult>::~__split_buffer(void **a1)
{
  std::__split_buffer<NLResult>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<NLResult>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 152;
    std::allocator<NLResult>::destroy[abi:ne180100](v4, i - 152);
  }
}

void NLMessageConversationTurn::NLMessageConversationTurn(std::string *this, __int128 *a2, __int128 *a3, std::string::size_type a4)
{
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  v8 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  this[2].__r_.__value_.__r.__words[0] = a4;
}

void sub_1A18A8FA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t NLMessageConversationTurn::getTimestamp(NLMessageConversationTurn *this)
{
  return *((_QWORD *)this + 6);
}

CFStringTokenizerRef NL::Transcriber::updateLocale(const void **this, CFLocaleRef locale)
{
  const void *v4;
  CFStringTokenizerRef result;
  CFRange v6;

  v4 = *this;
  if (v4)
    CFRelease(v4);
  v6.location = 0;
  v6.length = 0;
  result = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &stru_1E45D0A48, v6, 0x10000uLL, locale);
  *this = result;
  return result;
}

const void **NL::Transcriber::Transcriber(const void **this, const __CFLocale *a2)
{
  *this = 0;
  NL::Transcriber::updateLocale(this, a2);
  return this;
}

void NL::Transcriber::~Transcriber(const void **this)
{
  const void *v2;

  v2 = *this;
  if (v2)
    CFRelease(v2);
  *this = 0;
}

CFMutableStringRef NL::Transcriber::copyTranscription(CFStringTokenizerRef *this, const __CFString *a2)
{
  CFMutableStringRef Mutable;
  __CFStringTokenizer *v5;
  const __CFString *v6;
  const __CFString *v7;
  CFRange v9;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v5 = *this;
  v9.length = CFStringGetLength(a2);
  v9.location = 0;
  CFStringTokenizerSetString(v5, a2, v9);
  while (CFStringTokenizerAdvanceToNextToken(*this))
  {
    v6 = (const __CFString *)CFStringTokenizerCopyCurrentTokenAttribute(*this, 0x10000uLL);
    if (v6)
    {
      v7 = v6;
      CFStringAppend(Mutable, v6);
      CFStringAppend(Mutable, CFSTR(" "));
      CFRelease(v7);
    }
  }
  CFStringTrimWhitespace(Mutable);
  if (CFStringsAreEqual(Mutable, a2))
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

void NLTextSlotParserNamedEntityExtractor::NLTextSlotParserNamedEntityExtractor(NLTextSlotParserNamedEntityExtractor *this, const __CFLocale *a2)
{
  const __CFAllocator *v3;
  __CFArray *Mutable;
  NL::Resource *v5;
  const __CFString *v6;
  const __CFURL **AssetResource;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *(_QWORD *)this = MEMORY[0x1A1B0D624](*MEMORY[0x1E0C9AE00]);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = CFLocaleCreate(v3, CFSTR("root"));
  CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E0D174D8]);
  AssetResource = (const __CFURL **)NL::Resource::createAssetResource(v5, (const __CFLocale *)CFSTR("Tagging"), CFSTR("reminder-gazetteer.dat"), v6);
  if (AssetResource)
    NL::Resource::exists(AssetResource);
  *((_QWORD *)this + 1) = NLTaggerCreate();
  if (v5)
    CFRelease(v5);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1A18A945C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, const void *a12, const void *a13, const void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,const void *a22,const void *a23,const void *a24)
{
  nlp::CFScopedPtr<__CFArray *>::reset(&a12, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset(&a13, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset(&a14, 0);
  if (a21 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFString const*>::reset(&a22, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset(&a23, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(&a24, 0);
  _Unwind_Resume(a1);
}

void NLTextSlotParserNamedEntityExtractor::~NLTextSlotParserNamedEntityExtractor(NLTextSlotParserNamedEntityExtractor *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

void NLTextSlotParserNamedEntityExtractor::getLocationAndPeopleNameRanges(NLTextSlotParserNamedEntityExtractor *this@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, _OWORD *);
  void *v15;
  uint64_t *v16;
  uint64_t *v17;
  NLTextSlotParserNamedEntityExtractor *v18;
  uint64_t v19;
  __int128 **v20;
  uint64_t v21;
  __n128 (*v22)(_QWORD *, uint64_t);
  void (*v23)(uint64_t);
  void *__p;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 **v28;
  uint64_t v29;
  __n128 (*v30)(_QWORD *, uint64_t);
  void (*v31)(uint64_t);
  void *v32;
  void *v33;
  uint64_t v34;

  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  if (*((_QWORD *)this + 1))
  {
    NLTaggerSetString();
    CFStringGetLength(a2);
    NLTaggerSetLocaleForRange();
    v27 = 0;
    v28 = (__int128 **)&v27;
    v29 = 0x4002000000;
    v30 = __Block_byref_object_copy__14;
    v31 = __Block_byref_object_dispose__14;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    v19 = 0;
    v20 = (__int128 **)&v19;
    v21 = 0x4002000000;
    v22 = __Block_byref_object_copy__14;
    v23 = __Block_byref_object_dispose__14;
    v25 = 0;
    v26 = 0;
    __p = 0;
    CFStringGetLength(a2);
    v12 = MEMORY[0x1E0C809B0];
    v13 = 0x40000000;
    v14 = ___ZN36NLTextSlotParserNamedEntityExtractor30getLocationAndPeopleNameRangesEPK10__CFString_block_invoke;
    v15 = &unk_1E45CF5B8;
    v17 = &v27;
    v18 = this;
    v16 = &v19;
    NLTaggerEnumerateTokens();
    std::pair<std::vector<std::pair<NLTextSlotID,CFRange>>,std::vector<std::pair<NLTextSlotID,CFRange>>>::pair[abi:ne180100]<std::vector<std::pair<NLTextSlotID,CFRange>>&,std::vector<std::pair<NLTextSlotID,CFRange>>&,0>((uint64_t)&v8, v28 + 5, v20 + 5);
    v6 = v9;
    *(_OWORD *)a3 = v8;
    *(_QWORD *)(a3 + 16) = v6;
    v7 = v11;
    *(_OWORD *)(a3 + 24) = v10;
    *(_QWORD *)(a3 + 40) = v7;
    _Block_object_dispose(&v19, 8);
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(&v27, 8);
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
  }
}

void sub_1A18A96E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  void *v32;

  _Block_object_dispose(&a23, 8);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v30 - 128), 8);
  v32 = *(void **)(v30 - 88);
  if (v32)
  {
    *(_QWORD *)(v30 - 80) = v32;
    operator delete(v32);
  }
  std::pair<std::vector<std::pair<NLTextSlotID,CFRange>>,std::vector<std::pair<NLTextSlotID,CFRange>>>::~pair(v29);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__14(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void ___ZN36NLTextSlotParserNamedEntityExtractor30getLocationAndPeopleNameRangesEPK10__CFString_block_invoke(uint64_t a1, _OWORD *a2)
{
  const __CFString *v4;
  const __CFString *v5;
  void **v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  void **v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  void **v66;
  char *v67;
  __int128 v68;
  void **v69;
  char *v70;
  __int128 v71;
  void **v72;
  _BYTE v73[24];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFString *)NLTaggerCopyTagForCurrentToken();
  if (v4)
  {
    v5 = v4;
    if (CFStringCompare(v4, (CFStringRef)*MEMORY[0x1E0D17158], 0))
    {
      if (CFStringCompare(v5, (CFStringRef)*MEMORY[0x1E0D17160], 0))
      {
        if (CFStringCompare(v5, CFSTR("<LEAVE_CAR>"), 0))
        {
          if (CFStringCompare(v5, CFSTR("<GOTO_CAR>"), 0))
          {
            if (CFStringCompare(v5, CFSTR("<LEAVE_WORK>"), 0))
            {
              if (CFStringCompare(v5, CFSTR("<GOTO_WORK>"), 0))
              {
                if (CFStringCompare(v5, CFSTR("<LEAVE_HOME>"), 0))
                {
                  if (CFStringCompare(v5, CFSTR("<GOTO_HOME>"), 0))
                  {
                    if (CFStringCompare(v5, CFSTR("<LEAVE_SCHOOL>"), 0))
                    {
                      if (CFStringCompare(v5, CFSTR("<GOTO_SCHOOL>"), 0))
                      {
                        if (CFStringCompare(v5, CFSTR("<SERVICE>"), 0) == kCFCompareEqualTo
                          || CFStringCompare(v5, CFSTR("<GROCERY>"), 0) == kCFCompareEqualTo
                          || CFStringCompare(v5, CFSTR("<RESTAURANT>"), 0) == kCFCompareEqualTo)
                        {
                          v6 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
                          *(_DWORD *)v73 = 4;
                          *(_OWORD *)&v73[8] = *a2;
                          std::vector<std::pair<NLTextSlotID,CFRange>>::push_back[abi:ne180100](v6, (__int128 *)v73);
                        }
                      }
                      else
                      {
                        v72 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
                        *(_DWORD *)v73 = 11;
                        *(_OWORD *)&v73[8] = *a2;
                        std::vector<std::pair<NLTextSlotID,CFRange>>::push_back[abi:ne180100](v72, (__int128 *)v73);
                      }
                    }
                    else
                    {
                      v69 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
                      *(_DWORD *)v73 = 12;
                      *(_OWORD *)&v73[8] = *a2;
                      std::vector<std::pair<NLTextSlotID,CFRange>>::push_back[abi:ne180100](v69, (__int128 *)v73);
                    }
                  }
                  else
                  {
                    v66 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
                    *(_DWORD *)v73 = 5;
                    *(_OWORD *)&v73[8] = *a2;
                    std::vector<std::pair<NLTextSlotID,CFRange>>::push_back[abi:ne180100](v66, (__int128 *)v73);
                  }
                }
                else
                {
                  v57 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
                  *(_DWORD *)v73 = 6;
                  *(_OWORD *)&v73[8] = *a2;
                  std::vector<std::pair<NLTextSlotID,CFRange>>::push_back[abi:ne180100](v57, (__int128 *)v73);
                }
                goto LABEL_107;
              }
              v7 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
              *(_OWORD *)&v73[4] = *a2;
              v8 = v7[6];
              v48 = v7[7];
              if (v8 < v48)
              {
                v10 = 9;
                goto LABEL_68;
              }
              v12 = (void **)(v7 + 5);
              v58 = v7[5];
              v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v58) >> 3);
              v60 = v59 + 1;
              if (v59 + 1 <= 0xAAAAAAAAAAAAAAALL)
              {
                v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - v58) >> 3);
                if (2 * v61 > v60)
                  v60 = 2 * v61;
                if (v61 >= 0x555555555555555)
                  v62 = 0xAAAAAAAAAAAAAAALL;
                else
                  v62 = v60;
                if (v62)
                  v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v7 + 7), v62);
                else
                  v63 = 0;
                v33 = &v63[24 * v59];
                v34 = &v63[24 * v62];
                *(_DWORD *)v33 = 9;
                *(_OWORD *)(v33 + 4) = *(_OWORD *)v73;
                *((_DWORD *)v33 + 5) = *(_DWORD *)&v73[16];
                v35 = v33 + 24;
                v70 = (char *)v7[5];
                v36 = (char *)v7[6];
                if (v36 == v70)
                  goto LABEL_104;
                do
                {
                  v71 = *(_OWORD *)(v36 - 24);
                  *((_QWORD *)v33 - 1) = *((_QWORD *)v36 - 1);
                  *(_OWORD *)(v33 - 24) = v71;
                  v33 -= 24;
                  v36 -= 24;
                }
                while (v36 != v70);
LABEL_103:
                v36 = (char *)*v12;
LABEL_104:
                v7[5] = v33;
                v7[6] = v35;
                v7[7] = v34;
                if (v36)
                  operator delete(v36);
                goto LABEL_106;
              }
              goto LABEL_110;
            }
            v7 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
            *(_OWORD *)&v73[4] = *a2;
            v8 = v7[6];
            v39 = v7[7];
            if (v8 >= v39)
            {
              v12 = (void **)(v7 + 5);
              v49 = v7[5];
              v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v49) >> 3);
              v51 = v50 + 1;
              if (v50 + 1 <= 0xAAAAAAAAAAAAAAALL)
              {
                v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - v49) >> 3);
                if (2 * v52 > v51)
                  v51 = 2 * v52;
                if (v52 >= 0x555555555555555)
                  v53 = 0xAAAAAAAAAAAAAAALL;
                else
                  v53 = v51;
                if (v53)
                  v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v7 + 7), v53);
                else
                  v54 = 0;
                v33 = &v54[24 * v50];
                v34 = &v54[24 * v53];
                *(_DWORD *)v33 = 10;
                *(_OWORD *)(v33 + 4) = *(_OWORD *)v73;
                *((_DWORD *)v33 + 5) = *(_DWORD *)&v73[16];
                v35 = v33 + 24;
                v67 = (char *)v7[5];
                v36 = (char *)v7[6];
                if (v36 == v67)
                  goto LABEL_104;
                do
                {
                  v68 = *(_OWORD *)(v36 - 24);
                  *((_QWORD *)v33 - 1) = *((_QWORD *)v36 - 1);
                  *(_OWORD *)(v33 - 24) = v68;
                  v33 -= 24;
                  v36 -= 24;
                }
                while (v36 != v67);
                goto LABEL_103;
              }
              goto LABEL_110;
            }
            v10 = 10;
          }
          else
          {
            v7 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
            *(_OWORD *)&v73[4] = *a2;
            v8 = v7[6];
            v26 = v7[7];
            if (v8 >= v26)
            {
              v12 = (void **)(v7 + 5);
              v40 = v7[5];
              v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v40) >> 3);
              v42 = v41 + 1;
              if (v41 + 1 <= 0xAAAAAAAAAAAAAAALL)
              {
                v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v40) >> 3);
                if (2 * v43 > v42)
                  v42 = 2 * v43;
                if (v43 >= 0x555555555555555)
                  v44 = 0xAAAAAAAAAAAAAAALL;
                else
                  v44 = v42;
                if (v44)
                  v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v7 + 7), v44);
                else
                  v45 = 0;
                v33 = &v45[24 * v41];
                v34 = &v45[24 * v44];
                *(_DWORD *)v33 = 7;
                *(_OWORD *)(v33 + 4) = *(_OWORD *)v73;
                *((_DWORD *)v33 + 5) = *(_DWORD *)&v73[16];
                v35 = v33 + 24;
                v64 = (char *)v7[5];
                v36 = (char *)v7[6];
                if (v36 == v64)
                  goto LABEL_104;
                do
                {
                  v65 = *(_OWORD *)(v36 - 24);
                  *((_QWORD *)v33 - 1) = *((_QWORD *)v36 - 1);
                  *(_OWORD *)(v33 - 24) = v65;
                  v33 -= 24;
                  v36 -= 24;
                }
                while (v36 != v64);
                goto LABEL_103;
              }
              goto LABEL_110;
            }
            v10 = 7;
          }
        }
        else
        {
          v7 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
          *(_OWORD *)&v73[4] = *a2;
          v8 = v7[6];
          v19 = v7[7];
          if (v8 >= v19)
          {
            v12 = (void **)(v7 + 5);
            v27 = v7[5];
            v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v27) >> 3);
            v29 = v28 + 1;
            if (v28 + 1 <= 0xAAAAAAAAAAAAAAALL)
            {
              v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v27) >> 3);
              if (2 * v30 > v29)
                v29 = 2 * v30;
              if (v30 >= 0x555555555555555)
                v31 = 0xAAAAAAAAAAAAAAALL;
              else
                v31 = v29;
              if (v31)
                v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v7 + 7), v31);
              else
                v32 = 0;
              v33 = &v32[24 * v28];
              v34 = &v32[24 * v31];
              *(_DWORD *)v33 = 8;
              *(_OWORD *)(v33 + 4) = *(_OWORD *)v73;
              *((_DWORD *)v33 + 5) = *(_DWORD *)&v73[16];
              v35 = v33 + 24;
              v55 = (char *)v7[5];
              v36 = (char *)v7[6];
              if (v36 == v55)
                goto LABEL_104;
              do
              {
                v56 = *(_OWORD *)(v36 - 24);
                *((_QWORD *)v33 - 1) = *((_QWORD *)v36 - 1);
                *(_OWORD *)(v33 - 24) = v56;
                v33 -= 24;
                v36 -= 24;
              }
              while (v36 != v55);
              goto LABEL_103;
            }
            goto LABEL_110;
          }
          v10 = 8;
        }
      }
      else
      {
        v7 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
        *(_OWORD *)&v73[4] = *a2;
        v8 = v7[6];
        v11 = v7[7];
        if (v8 >= v11)
        {
          v12 = (void **)(v7 + 5);
          v20 = v7[5];
          v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v20) >> 3);
          v22 = v21 + 1;
          if (v21 + 1 <= 0xAAAAAAAAAAAAAAALL)
          {
            v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v20) >> 3);
            if (2 * v23 > v22)
              v22 = 2 * v23;
            if (v23 >= 0x555555555555555)
              v24 = 0xAAAAAAAAAAAAAAALL;
            else
              v24 = v22;
            if (v24)
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v7 + 7), v24);
            else
              v25 = 0;
            v33 = &v25[24 * v21];
            v34 = &v25[24 * v24];
            *(_DWORD *)v33 = 4;
            *(_OWORD *)(v33 + 4) = *(_OWORD *)v73;
            *((_DWORD *)v33 + 5) = *(_DWORD *)&v73[16];
            v35 = v33 + 24;
            v46 = (char *)v7[5];
            v36 = (char *)v7[6];
            if (v36 == v46)
              goto LABEL_104;
            do
            {
              v47 = *(_OWORD *)(v36 - 24);
              *((_QWORD *)v33 - 1) = *((_QWORD *)v36 - 1);
              *(_OWORD *)(v33 - 24) = v47;
              v33 -= 24;
              v36 -= 24;
            }
            while (v36 != v46);
            goto LABEL_103;
          }
          goto LABEL_110;
        }
        v10 = 4;
      }
    }
    else
    {
      v7 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
      *(_OWORD *)&v73[4] = *a2;
      v8 = v7[6];
      v9 = v7[7];
      if (v8 >= v9)
      {
        v12 = (void **)(v7 + 5);
        v13 = v7[5];
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v13) >> 3);
        v15 = v14 + 1;
        if (v14 + 1 <= 0xAAAAAAAAAAAAAAALL)
        {
          v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v13) >> 3);
          if (2 * v16 > v15)
            v15 = 2 * v16;
          if (v16 >= 0x555555555555555)
            v17 = 0xAAAAAAAAAAAAAAALL;
          else
            v17 = v15;
          if (v17)
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v7 + 7), v17);
          else
            v18 = 0;
          v33 = &v18[24 * v14];
          v34 = &v18[24 * v17];
          *(_DWORD *)v33 = 14;
          *(_OWORD *)(v33 + 4) = *(_OWORD *)v73;
          *((_DWORD *)v33 + 5) = *(_DWORD *)&v73[16];
          v35 = v33 + 24;
          v37 = (char *)v7[5];
          v36 = (char *)v7[6];
          if (v36 == v37)
            goto LABEL_104;
          do
          {
            v38 = *(_OWORD *)(v36 - 24);
            *((_QWORD *)v33 - 1) = *((_QWORD *)v36 - 1);
            *(_OWORD *)(v33 - 24) = v38;
            v33 -= 24;
            v36 -= 24;
          }
          while (v36 != v37);
          goto LABEL_103;
        }
LABEL_110:
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      }
      v10 = 14;
    }
LABEL_68:
    *(_DWORD *)v8 = v10;
    *(_OWORD *)(v8 + 4) = *(_OWORD *)v73;
    *(_DWORD *)(v8 + 20) = *(_DWORD *)&v73[16];
    v35 = (char *)(v8 + 24);
LABEL_106:
    v7[6] = v35;
LABEL_107:
    CFRelease(v5);
  }
}

void std::vector<std::pair<NLTextSlotID,CFRange>>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[24 * v10];
    v16 = &v14[24 * v13];
    v17 = *a2;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v15 = v17;
    v9 = v15 + 24;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v15 - 24) = v20;
        v15 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18)
      operator delete(v18);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    v9 = (char *)(v7 + 24);
  }
  a1[1] = v9;
}

uint64_t std::pair<std::vector<std::pair<NLTextSlotID,CFRange>>,std::vector<std::pair<NLTextSlotID,CFRange>>>::pair[abi:ne180100]<std::vector<std::pair<NLTextSlotID,CFRange>>&,std::vector<std::pair<NLTextSlotID,CFRange>>&,0>(uint64_t a1, __int128 **a2, __int128 **a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::pair<NLTextSlotID,CFRange>>::__init_with_size[abi:ne180100]<std::pair<NLTextSlotID,CFRange>*,std::pair<NLTextSlotID,CFRange>*>((char *)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<std::pair<NLTextSlotID,CFRange>>::__init_with_size[abi:ne180100]<std::pair<NLTextSlotID,CFRange>*,std::pair<NLTextSlotID,CFRange>*>((char *)(a1 + 24), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return a1;
}

void sub_1A18AA170(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<NLTextSlotID,CFRange>>::__init_with_size[abi:ne180100]<std::pair<NLTextSlotID,CFRange>*,std::pair<NLTextSlotID,CFRange>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1A18AA1EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *operator<<(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  char *v19;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  std::string *v25;
  std::string::size_type size;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  void **v30;
  uint64_t v31;
  std::string *v33;
  __int128 v34;
  void *__p[2];
  unsigned __int8 v36;
  void *v37[2];
  int64_t v38;
  std::string v39;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Latin string: ", 14);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", Transliterated string: ", 25);
  v10 = *(char *)(a2 + 47);
  if (v10 >= 0)
    v11 = a2 + 24;
  else
    v11 = *(_QWORD *)(a2 + 24);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 47);
  else
    v12 = *(_QWORD *)(a2 + 32);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", LM score: ", 12);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", Seq2Seq score: ", 17);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", Total Score: ", 15);
  NLTransliterationCandidate::getTotalScore((NLTransliterationCandidate *)a2);
  v16 = (_QWORD *)std::ostream::operator<<();
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", Type: ", 8);
  v18 = *(_DWORD *)(a2 + 72);
  switch(v18)
  {
    case 0:
      v19 = "Lexicon";
      goto LABEL_22;
    case 1:
      v19 = "OrthographicVariant";
      goto LABEL_22;
    case 2:
      v19 = "NasalizedVariant";
      goto LABEL_22;
    case 3:
      v19 = "EnglishLexicon";
      goto LABEL_22;
    case 4:
      v19 = "Unknown";
      goto LABEL_22;
    case 5:
      v19 = "Exception list";
      goto LABEL_22;
    case 6:
      v19 = "Seq2Seq";
      goto LABEL_22;
    case 7:
      v19 = "Emoji";
LABEL_22:
      std::string::basic_string[abi:ne180100]<0>(v37, v19);
      break;
    default:
      std::to_string(&v39, v18);
      v33 = std::string::insert(&v39, 0, "Unknown type: ");
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v38 = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)v37 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      break;
  }
  if (v38 >= 0)
    v20 = v37;
  else
    v20 = (void **)v37[0];
  if (v38 >= 0)
    v21 = HIBYTE(v38);
  else
    v21 = (uint64_t)v37[1];
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v20, v21);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", Is in vocabulary: ", 20);
  if (*(_BYTE *)(a2 + 77))
    v24 = "true";
  else
    v24 = "false";
  std::string::basic_string[abi:ne180100]<0>(&v39, v24);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v39;
  else
    v25 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    size = v39.__r_.__value_.__l.__size_;
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, size);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", Is extension candidate: ", 26);
  if (*(_BYTE *)(a2 + 76))
    v29 = "true";
  else
    v29 = "false";
  std::string::basic_string[abi:ne180100]<0>(__p, v29);
  if ((v36 & 0x80u) == 0)
    v30 = __p;
  else
    v30 = (void **)__p[0];
  if ((v36 & 0x80u) == 0)
    v31 = v36;
  else
    v31 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v30, v31);
  if ((char)v36 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  return a1;
}

void sub_1A18AA4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NLTransliterationCandidate::getTransliteratedWord(NLTransliterationCandidate *this)
{
  return (uint64_t)this + 24;
}

double NLTransliterationCandidate::getLMScore(NLTransliterationCandidate *this)
{
  return *((double *)this + 7);
}

double NLTransliterationCandidate::getSequenceScore(NLTransliterationCandidate *this)
{
  return *((double *)this + 8);
}

uint64_t NLTransliterationCandidate::getType(NLTransliterationCandidate *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t NLTransliterationCandidate::isInVocabulary(NLTransliterationCandidate *this)
{
  return *((unsigned __int8 *)this + 77);
}

uint64_t NLTransliterationCandidate::isExtensionCandidate(NLTransliterationCandidate *this)
{
  return *((unsigned __int8 *)this + 76);
}

void NLTransliterationCandidate::NLTransliterationCandidate(std::string *this, __int128 *a2, __int128 *a3, int a4, std::string::value_type a5, double a6, double a7)
{
  __int128 v13;
  std::string *v14;
  __int128 v15;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
  }
  v14 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v15 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  *(double *)&this[2].__r_.__value_.__l.__size_ = a6;
  *(double *)&this[2].__r_.__value_.__r.__words[2] = a7;
  LODWORD(this[3].__r_.__value_.__l.__data_) = a4;
  this[3].__r_.__value_.__s.__data_[4] = a5;
  this[3].__r_.__value_.__s.__data_[5] = 0;
}

void sub_1A18AA61C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void NLTransliterationCandidate::NLTransliterationCandidate(std::string *a1, __int128 *a2, __int128 *a3)
{
  NLTransliterationCandidate::NLTransliterationCandidate(a1, a2, a3, 4, 1, -INFINITY, 1.0);
}

void NLTransliterationCandidate::NLTransliterationCandidate(std::string *a1, __int128 *a2, __int128 *a3, int a4, std::string::value_type a5, double a6)
{
  NLTransliterationCandidate::NLTransliterationCandidate(a1, a2, a3, a4, a5, a6, 1.0);
}

uint64_t NLTransliterationCandidate::setCharLMScore(uint64_t this, double a2)
{
  *(double *)(this + 48) = a2;
  return this;
}

uint64_t NLTransliterationCandidate::setLMScore(uint64_t this, double a2)
{
  *(double *)(this + 56) = a2;
  return this;
}

uint64_t NLTransliterationCandidate::setType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 72) = a2;
  return result;
}

uint64_t NLTransliterationCandidate::setIsExtensionCandidate(uint64_t this, char a2)
{
  *(_BYTE *)(this + 76) = a2;
  return this;
}

uint64_t NLTransliterationCandidate::setIsInVocabulary(uint64_t this, char a2)
{
  *(_BYTE *)(this + 77) = a2;
  return this;
}

uint64_t _CFInit_TransliterationCandidateWrapper(uint64_t result)
{
  *(_QWORD *)(result + 16) = &unk_1E45CE4A0;
  return result;
}

uint64_t createCandidateWrapper(NLTransliterationCandidate *a1)
{
  uint64_t result;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_TransliterationCandidateWrapper)
  {
    qword_1EDBB1AC8 = 0;
    unk_1EDBB1AD8 = 0u;
    unk_1EDBB1AE8 = 0u;
    g_CFTypeID_TransliterationCandidateWrapper = _CFRuntimeRegisterClass();
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

void TransliterationCandidateWrapper::~TransliterationCandidateWrapper(TransliterationCandidateWrapper *this)
{
  TransliterationCandidateWrapper::~TransliterationCandidateWrapper(this);
  JUMPOUT(0x1A1B0E068);
}

{
  uint64_t v2;

  *(_QWORD *)this = &unk_1E45CE4A0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*(char *)(v2 + 47) < 0)
      operator delete(*(void **)(v2 + 24));
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1B0E068](v2, 0x1012C40B0087DDBLL);
  }
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

uint64_t **NL::StringMap::StringMap(uint64_t **a1, char *a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)operator new();
  StringMapFile::StringMapFile(v4, a2);
  *a1 = v4;
  a1[1] = 0;
  return a1;
}

void sub_1A18AA7F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1B0E068](v1, 0x70C40A8FA3B04);
  _Unwind_Resume(a1);
}

uint64_t **NL::StringMap::createWithFile(char *a1)
{
  uint64_t **v2;

  v2 = (uint64_t **)operator new();
  NL::StringMap::StringMap(v2, a1);
  return v2;
}

void sub_1A18AA85C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2;
  MEMORY[0x1A1B0E068](v4, 0x80C40803F642BLL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1A18AA84CLL);
  }
  _Unwind_Resume(a1);
}

void NL::StringMap::~StringMap(NL::StringMap *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD *)this + 1), *(_QWORD **)(v2 + 8));
    MEMORY[0x1A1B0E068](v2, 0x1020C4062D53EE8);
  }
  if (*(_QWORD *)this)
  {
    StringMapFile::~StringMapFile(*(StringMapFile **)this);
    MEMORY[0x1A1B0E068]();
  }
}

void NL::StringMap::get(uint64_t *a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;

  v4 = a1[1];
  if (v4)
    StringMapBuilder::get(v4, a2, a3);
  else
    StringMapFile::get(*a1, a3);
}

void StringMapBuilder::get(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;

  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1, a2);
  if (a1 + 8 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v5 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v5 + 56), *(_QWORD *)(v5 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 56);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

_QWORD *StringMapFile::get@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;

  if (CFBurstTrieFindUTF8String())
    v4 = *(char **)(a1 + 8);
  else
    v4 = "";
  return std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

uint64_t *StringMapFile::StringMapFile(uint64_t *a1, char *a2)
{
  _QWORD *v3;
  char *v4;
  _DWORD *v5;
  _QWORD *exception;
  _QWORD *v8;
  __int128 v9;

  *a1 = 0;
  v3 = a1 + 2;
  if (a2[23] >= 0)
    v4 = a2;
  else
    v4 = *(char **)a2;
  NL::ReadOnlyFile<char>::open(v4, (uint64_t)"r", 1, v3);
  v5 = *(_DWORD **)a1[2];
  if (*v5 != -149896238)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, "string map file is invalid");
    NL::ResourceCreationException::ResourceCreationException(exception, &v9);
  }
  if (v5[1] != 1)
  {
    v8 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, "string map file version is not supported");
    NL::ResourceCreationException::ResourceCreationException(v8, &v9);
  }
  a1[1] = (uint64_t)v5 + v5[2] + 24;
  *a1 = CFBurstTrieCreateFromMapBytes();
  return a1;
}

void sub_1A18AAB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void NL::ReadOnlyFile<char>::open(char *__s@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *exception;
  _QWORD v9[7];
  char v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  uint64_t v20;

  v13 = 0;
  v14 = &v13;
  v15 = 0x4002000000;
  v16 = __Block_byref_object_copy__15;
  v17 = __Block_byref_object_dispose__15;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZN2NL12ReadOnlyFileIcE4openEPKcS3_b_block_invoke;
  v9[3] = &unk_1E45CF5E0;
  v9[5] = __s;
  v9[6] = a2;
  v10 = a3;
  v9[4] = &v13;
  nlp::SingletonResourceManager<std::string,NL::ReadOnlyFile<char>>::getResource((uint64_t)__p, (uint64_t)v9, a4);
  if (v12 < 0)
    operator delete(__p[0]);
  if ((*((char *)v14 + 63) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v14 + 63))
      goto LABEL_5;
LABEL_9:
    exception = __cxa_allocate_exception(0x20uLL);
    NL::ResourceCreationException::ResourceCreationException(exception, (__int128 *)(v14 + 5));
  }
  if (v14[6])
    goto LABEL_9;
LABEL_5:
  _Block_object_dispose(&v13, 8);
  if (SHIBYTE(v20) < 0)
    operator delete(v18);
}

void sub_1A18AACE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v34);
  _Block_object_dispose(&a24, 8);
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void nlp::SingletonResourceManager<std::string,NL::ReadOnlyFile<char>>::getResource(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *Queue;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[7];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __n128 (*v17)(uint64_t, uint64_t);
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  std::__shared_weak_count *v20;

  v14 = 0;
  v15 = &v14;
  v16 = 0x3802000000;
  v17 = __Block_byref_object_copy__4;
  v18 = __Block_byref_object_dispose__5;
  v19 = 0;
  v20 = 0;
  Queue = nlp::SingletonResourceManager<std::string,NL::ReadOnlyFile<char>>::getQueue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 0x40000000;
  v13[2] = ___ZN3nlp24SingletonResourceManagerINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN2NL12ReadOnlyFileIcEEE11getResourceERKS7_U13block_pointerFPSA_vE_block_invoke;
  v13[3] = &unk_1E45D01A8;
  v13[5] = &v14;
  v13[6] = a1;
  v13[4] = a2;
  dispatch_sync(Queue, v13);
  v7 = v15[6];
  *a3 = v15[5];
  a3[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  _Block_object_dispose(&v14, 8);
  v10 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

uint64_t ___ZN2NL12ReadOnlyFileIcE4openEPKcS3_b_block_invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  NL::ReadOnlyFile<char>::ReadOnlyFile(v2, *(char **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  return v2;
}

void sub_1A18AAECC(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v7;
  uint64_t v8;

  v5 = v3;
  MEMORY[0x1A1B0E068](v5, 0x1012C403EBA5055);
  if (a2 == 1)
  {
    v7 = __cxa_begin_catch(a1);
    v8 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 16))(v7);
    MEMORY[0x1A1B0DE04](*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 40, v8);
    __cxa_end_catch();
    JUMPOUT(0x1A18AAEB8);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__5(uint64_t a1)
{
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t nlp::SingletonResourceManager<std::string,NL::ReadOnlyFile<char>>::getQueue()
{
  unsigned __int8 v0;
  unsigned __int8 v1;
  unint64_t v2;
  int v4;

  if ((v0 & 1) == 0
  {
    nlp::SingletonResourceManager<std::string,NL::ReadOnlyFile<char>>::getQueue(void)::attributes = (uint64_t)dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  }
  v2 = 0x1EE645000uLL;
  if ((v1 & 1) == 0)
  {
    v2 = 0x1EE645000;
    if (v4)
    {
      nlp::SingletonResourceManager<std::string,NL::ReadOnlyFile<char>>::getQueue(void)::queue = (uint64_t)dispatch_queue_create("com.apple.NLPUtils.SingletonResourceManager", (dispatch_queue_attr_t)nlp::SingletonResourceManager<std::string,NL::ReadOnlyFile<char>>::getQueue(void)::attributes);
      v2 = 0x1EE645000;
    }
  }
  return *(_QWORD *)(v2 + 3160);
}

void ___ZN3nlp24SingletonResourceManagerINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN2NL12ReadOnlyFileIcEEE11getResourceERKS7_U13block_pointerFPSA_vE_block_invoke(uint64_t a1)
{
  __int128 *Cache;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  std::__shared_weak_count *v19;
  __int128 v20;

  Cache = nlp::SingletonResourceManager<std::string,NL::ReadOnlyFile<char>>::getCache();
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(Cache, *(unsigned __int8 **)(a1 + 48));
  if (v3)
  {
    v4 = v3;
    v20 = 0uLL;
    v5 = (std::__shared_weak_count *)*((_QWORD *)v3 + 6);
    if (v5)
    {
      *((_QWORD *)&v20 + 1) = std::__shared_weak_count::lock(v5);
      if (*((_QWORD *)&v20 + 1))
        *(_QWORD *)&v20 = *((_QWORD *)v4 + 5);
    }
    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40, &v20);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v11 = *(_QWORD *)(v9 + 40);
  v10 = (_QWORD *)(v9 + 40);
  if (!v11)
  {
    v12 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    std::shared_ptr<NL::ReadOnlyFile<char>>::reset[abi:ne180100]<NL::ReadOnlyFile<char>,void>(v10, v12);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v14 = *(_QWORD *)(v13 + 40);
    if (v14)
    {
      v15 = *(_QWORD *)(v13 + 48);
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 16);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      *(_QWORD *)&v20 = *(_QWORD *)(a1 + 48);
      v18 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)Cache, (unsigned __int8 *)v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v20);
      v19 = (std::__shared_weak_count *)*((_QWORD *)v18 + 6);
      *((_QWORD *)v18 + 5) = v14;
      *((_QWORD *)v18 + 6) = v15;
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1A18AB154(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

__int128 *nlp::SingletonResourceManager<std::string,NL::ReadOnlyFile<char>>::getCache()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    nlp::SingletonResourceManager<std::string,NL::ReadOnlyFile<char>>::getCache(void)::cache = 0u;
    unk_1EE645C78 = 0u;
    dword_1EE645C88 = 1065353216;
  }
  return &nlp::SingletonResourceManager<std::string,NL::ReadOnlyFile<char>>::getCache(void)::cache;
}

void std::shared_ptr<NL::ReadOnlyFile<char>>::reset[abi:ne180100]<NL::ReadOnlyFile<char>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<NL::ReadOnlyFile<char>>::shared_ptr[abi:ne180100]<NL::ReadOnlyFile<char>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *std::shared_ptr<NL::ReadOnlyFile<char>>::shared_ptr[abi:ne180100]<NL::ReadOnlyFile<char>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E45CF150;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1A18AB2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<NL::ReadOnlyFile<char>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<NL::ReadOnlyFile<char> *,std::shared_ptr<NL::ReadOnlyFile<char>>::__shared_ptr_default_delete<NL::ReadOnlyFile<char>,NL::ReadOnlyFile<char>>,std::allocator<NL::ReadOnlyFile<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__shared_ptr_pointer<NL::ReadOnlyFile<char> *,std::shared_ptr<NL::ReadOnlyFile<char>>::__shared_ptr_default_delete<NL::ReadOnlyFile<char>,NL::ReadOnlyFile<char>>,std::allocator<NL::ReadOnlyFile<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    NL::ReadOnlyFile<char>::~ReadOnlyFile(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<NL::ReadOnlyFile<char> *,std::shared_ptr<NL::ReadOnlyFile<char>>::__shared_ptr_default_delete<NL::ReadOnlyFile<char>,NL::ReadOnlyFile<char>>,std::allocator<NL::ReadOnlyFile<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t NL::ReadOnlyFile<char>::~ReadOnlyFile(uint64_t a1)
{
  void *v2;
  const char *v3;
  int v4;
  int v5;

  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 68))
    {
      munmap(*(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      if (*(_DWORD *)(a1 + 64) != 2)
        goto LABEL_10;
      v3 = (const char *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0)
        v3 = *(const char **)v3;
      v4 = open(v3, 2);
      v5 = v4;
      v2 = *(void **)a1;
      if ((v4 & 0x80000000) == 0)
      {
        write(v4, *(const void **)a1, *(_QWORD *)(a1 + 8));
        close(v5);
        v2 = *(void **)a1;
      }
      if (v2)
LABEL_10:
        MEMORY[0x1A1B0E050](v2, 0x1000C8077774924);
    }
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t std::unique_ptr<NL::ReadOnlyFile<char>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::ReadOnlyFile<char>::~ReadOnlyFile(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A18AB6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1A18AB778(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<NL::ReadOnlyFile<char>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<NL::ReadOnlyFile<char>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<NL::ReadOnlyFile<char>>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t NL::ReadOnlyFile<char>::ReadOnlyFile(uint64_t a1, char *a2, char *a3, int a4)
{
  int v8;
  int v9;
  int st_size;
  size_t v11;
  void *v12;
  void *v13;
  _QWORD *exception;
  _QWORD *v16;
  stat v17;
  uint64_t v18;
  int v19;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), a2);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 40), a3);
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = a4;
  if (!strcmp(a3, "r"))
  {
    *(_DWORD *)(a1 + 64) = 0;
    v8 = open(a2, 0);
  }
  else
  {
    if (strcmp(a3, "r+"))
      goto LABEL_13;
    *(_DWORD *)(a1 + 64) = 514;
    v8 = open(a2, 514, 384);
  }
  v9 = v8;
  if (v8 < 0)
  {
LABEL_13:
    exception = __cxa_allocate_exception(0x20uLL);
    NL::ReadOnlyFileCreationException::ReadOnlyFileCreationException(exception);
    goto LABEL_17;
  }
  if (fstat(v8, &v17) < 0)
  {
LABEL_16:
    close(v9);
    exception = __cxa_allocate_exception(0x20uLL);
    NL::ReadOnlyFileCreationException::ReadOnlyFileCreationException(exception);
LABEL_17:
  }
  st_size = v17.st_size;
  *(_QWORD *)(a1 + 8) = v17.st_size;
  v18 = 0;
  v19 = st_size;
  fcntl(v9, 44, &v18);
  v11 = *(_QWORD *)(a1 + 8);
  if (!a4)
  {
    v13 = (void *)operator new[]();
    *(_QWORD *)a1 = v13;
    if ((read(v9, v13, *(_QWORD *)(a1 + 8)) & 0x8000000000000000) == 0)
      goto LABEL_12;
    goto LABEL_16;
  }
  if (v11)
  {
    v12 = mmap(0, v11, *(_DWORD *)(a1 + 64) & 2 | 1u, 1, v9, 0);
    if (v12 == (void *)-1)
    {
      close(v9);
      v16 = __cxa_allocate_exception(0x20uLL);
      NL::ReadOnlyFileCreationException::ReadOnlyFileCreationException(v16);
    }
    *(_QWORD *)a1 = v12;
  }
LABEL_12:
  close(v9);
  return a1;
}

void sub_1A18ABA5C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void *v4;

  __cxa_free_exception(v4);
  if (*(char *)(v2 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

_QWORD *NL::ReadOnlyFileCreationException::ReadOnlyFileCreationException(_QWORD *a1)
{
  __int128 __p;
  char v4;

  std::operator+<char>();
  NL::ResourceCreationException::ResourceCreationException(a1, &__p);
  if (v4 < 0)
    operator delete((void *)__p);
  *a1 = &unk_1E45CE5A0;
  return a1;
}

void sub_1A18ABB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NL::ReadOnlyFileCreationException::~ReadOnlyFileCreationException(std::exception *this)
{
  NL::ResourceCreationException::~ResourceCreationException(this);
  JUMPOUT(0x1A1B0E068);
}

void StringMapFile::~StringMapFile(StringMapFile *this)
{
  if (*(_QWORD *)this)
    CFBurstTrieRelease();
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

dispatch_queue_t ___Z23getParserResourcesQueuev_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.NLP.Resources", 0);
  getParserResourcesQueue(void)::resourcesQueue = (uint64_t)result;
  return result;
}

NL::ParserResources *NL::ParserResources::ParserResources(NL::ParserResources *this, const __CFDictionary *a2)
{
  const void **v4;
  const void **v5;
  const void **v6;
  const __CFString *Value;
  const __CFString *v8;
  CFTypeID v9;
  const void *v10;
  CFTypeID v11;
  const void *v12;
  const __CFString *v13;
  const __CFString *v14;
  CFTypeID v15;
  const void *v16;
  CFTypeID v17;
  CFURLRef v18;
  const void *v19;
  CFTypeRef v20;
  const __CFString *v21;
  const __CFBoolean *v22;
  __CFNotificationCenter *LocalCenter;
  CFLocaleRef v24;
  _QWORD block[5];

  *((_OWORD *)this + 1) = 0u;
  v4 = (const void **)((char *)this + 16);
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 8) = 8;
  *((_QWORD *)this + 5) = 0;
  v5 = (const void **)((char *)this + 40);
  *((_WORD *)this + 24) = 1;
  v6 = (const void **)((char *)this + 8);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  NL::AssetResourceManager::AssetResourceManager((NL::ParserResources *)((char *)this + 80));
  if (!a2)
    goto LABEL_26;
  Value = (const __CFString *)CFDictionaryGetValue(a2, kNLSearchParserLocaleKey);
  v8 = Value;
  if (Value)
  {
    v9 = CFGetTypeID(Value);
    if (v9 == CFStringGetTypeID())
    {
      v10 = CFLocaleCreate(0, v8);
    }
    else
    {
      v11 = CFGetTypeID(v8);
      if (v11 != CFLocaleGetTypeID())
        goto LABEL_8;
      v10 = CFRetain(v8);
    }
    nlp::CFScopedPtr<__CFLocale const*>::reset(v6, v10);
  }
LABEL_8:
  v12 = CFDictionaryGetValue(a2, kNLSearchParserDateKey);
  if (v12)
    NL::ParserResources::setDate((const void **)this, v12);
  v13 = (const __CFString *)CFDictionaryGetValue(a2, kNLSearchParserCustomResourceDirectoryKey);
  v14 = v13;
  if (!v13)
    goto LABEL_18;
  v15 = CFGetTypeID(v13);
  if (v15 == CFStringGetTypeID())
  {
    v16 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v14, kCFURLPOSIXPathStyle, 1u);
  }
  else
  {
    v17 = CFGetTypeID(v14);
    if (v17 != CFURLGetTypeID())
      goto LABEL_16;
    v16 = CFRetain(v14);
  }
  nlp::CFScopedPtr<__CFURL const*>::reset(v5, v16);
LABEL_16:
  if (!*v5)
  {
    v18 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &stru_1E45D0A48, 0);
    nlp::CFScopedPtr<__CFURL const*>::reset(v5, v18);
  }
LABEL_18:
  v19 = CFDictionaryGetValue(a2, CFSTR("username"));
  if (v19)
  {
    v20 = CFRetain(v19);
    nlp::CFScopedPtr<__CFString const*>::reset(v4, v20);
  }
  if (CFDictionaryContainsKey(a2, CFSTR("contextIdentifier")))
  {
    v21 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("contextIdentifier"));
    NL::ParserResources::setContext(this, v21);
  }
  if (CFDictionaryContainsKey(a2, CFSTR("includeFutureDates")))
  {
    v22 = (const __CFBoolean *)CFDictionaryGetValue(a2, CFSTR("includeFutureDates"));
    if (v22)
    {
      if (CFBooleanGetValue(v22))
        *((_BYTE *)this + 49) = 1;
    }
  }
LABEL_26:
  if (!*v6)
  {
    *((_BYTE *)this + 48) = 1;
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, this, (CFNotificationCallback)localeChangeCallback, (CFStringRef)*MEMORY[0x1E0C9B070], 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v24 = copyCurrentLocale();
    nlp::CFScopedPtr<__CFLocale const*>::reset(v6, v24);
  }
  if (getParserResourcesQueue(void)::resourcesOnceToken != -1)
    dispatch_once(&getParserResourcesQueue(void)::resourcesOnceToken, &__block_literal_global_6);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN2NL15ParserResourcesC2EPK14__CFDictionary_block_invoke;
  block[3] = &__block_descriptor_tmp_9_0;
  block[4] = this;
  dispatch_sync((dispatch_queue_t)getParserResourcesQueue(void)::resourcesQueue, block);
  return this;
}

void sub_1A18ABEEC(_Unwind_Exception *a1)
{
  const void **v1;
  const void **v2;
  const void **v3;
  const void **v4;
  NL::AssetResourceManager *v5;

  NL::AssetResourceManager::~AssetResourceManager(v5);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 8));
  nlp::CFScopedPtr<__CFURL const*>::reset(v4, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(v1 + 3, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v2, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset(v3, 0);
  nlp::CFScopedPtr<__CFDate const*>::reset(v1, 0);
  _Unwind_Resume(a1);
}

void NL::ParserResources::setDate(const void **this, CFTypeRef cf2)
{
  CFTypeRef v3;
  const void *v4;

  if (!cf2)
    goto LABEL_5;
  v3 = cf2;
  v4 = *this;
  if (!*this || !CFEqual(v4, cf2))
  {
    nlp::CFScopedPtr<__CFDate const*>::reset(this, 0);
    cf2 = CFRetain(v3);
LABEL_5:
    nlp::CFScopedPtr<__CFDate const*>::reset(this, cf2);
  }
}

CFComparisonResult NL::ParserResources::setContext(NL::ParserResources *this, CFStringRef theString1)
{
  CFComparisonResult result;
  int v5;

  result = CFStringCompare(theString1, CFSTR("com.apple.mail"), 1uLL);
  if (result == kCFCompareEqualTo)
  {
    *((_DWORD *)this + 8) = 1;
    return result;
  }
  result = CFStringCompare(theString1, CFSTR("com.apple.Finder"), 1uLL);
  if (result == kCFCompareEqualTo)
  {
    v5 = 2;
    goto LABEL_15;
  }
  result = CFStringCompare(theString1, CFSTR("com.apple.Notes"), 1uLL);
  if (result == kCFCompareEqualTo
    || (result = CFStringCompare(theString1, CFSTR("com.apple.mobilenotes"), 1uLL)) == kCFCompareEqualTo)
  {
    v5 = 3;
    goto LABEL_15;
  }
  result = CFStringCompare(theString1, CFSTR("com.apple.Photos"), 1uLL);
  if (result == kCFCompareEqualTo)
  {
    v5 = 4;
    goto LABEL_15;
  }
  result = CFStringCompare(theString1, CFSTR("com.apple.Reminders"), 1uLL);
  if (result == kCFCompareEqualTo)
  {
    v5 = 5;
    goto LABEL_15;
  }
  result = CFStringCompare(theString1, CFSTR("com.apple.Calendar"), 1uLL);
  if (result == kCFCompareEqualTo
    || (result = CFStringCompare(theString1, CFSTR("com.apple.iCal"), 1uLL)) == kCFCompareEqualTo)
  {
    v5 = 6;
    goto LABEL_15;
  }
  result = CFStringCompare(theString1, CFSTR("com.apple.Spotlight"), 1uLL);
  if (result == kCFCompareEqualTo)
  {
    v5 = 7;
    goto LABEL_15;
  }
  result = CFStringCompare(theString1, CFSTR("com.apple.NLP"), 1uLL);
  if (result)
  {
    v5 = 8;
LABEL_15:
    *((_DWORD *)this + 8) = v5;
    return result;
  }
  *((_DWORD *)this + 8) = 0;
  return result;
}

void localeChangeCallback(__CFNotificationCenter *a1, NL::ParserResources *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  const __CFLocale *v6;

  if (a2)
  {
    v6 = copyCurrentLocale();
    NL::ParserResources::updateLocale(a2, v6);
    if (v6)
      CFRelease(v6);
  }
}

void sub_1A18AC17C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2NL15ParserResourcesC2EPK14__CFDictionary_block_invoke(uint64_t a1)
{
  NL::ParserResources *v1;
  const __CFLocale *v2;

  v1 = *(NL::ParserResources **)(a1 + 32);
  v2 = (const __CFLocale *)*((_QWORD *)v1 + 1);
  if (v2)
    NL::ParserResources::updateLockedResources(v1, v2);
}

void NL::ParserResources::updateLockedResources(NL::ParserResources *this, const __CFLocale *a2)
{
  NL::SearchGrammar **v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  const void **v8;
  void *v9;
  CFTypeRef Value;
  const __CFString *v11;
  const __CFAllocator *v12;
  CFLocaleRef v13;
  void *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFURL *v17;
  CFLocaleIdentifier LocaleIdentifierFromComponents;
  CFLocaleRef v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  const __CFURL *v34;
  CFMutableDictionaryRef DictionaryWithContentsOfURL;
  const __CFDictionary *v36;
  const __CFArray *v37;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v39;
  _BOOL4 v40;
  int v41;
  const __CFDictionary *v42;
  const __CFNumber *v43;
  const __CFDictionary *v44;
  CFDictionaryRef Copy;
  CFStringRef v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  CFStringRef v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  _BOOL4 v76;
  const void **v77;
  uint64_t v78;
  _BOOL4 LanguageResources;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  const __CFURL *v92;
  CFTypeRef v93;
  CFTypeRef v94;
  CFTypeRef cf;
  NL::AssetResource *v96[2];
  NL::AssetResource *v97[2];
  NL::AssetResource *v98[2];
  __int128 values;
  void *keys[2];
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v98[0] = 0;
  v98[1] = 0;
  v97[0] = 0;
  v97[1] = 0;
  v96[0] = 0;
  v96[1] = 0;
  cf = 0;
  keys[0] = 0;
  keys[1] = 0;
  v4 = (NL::SearchGrammar **)((char *)this + 64);
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)this + 64, (__int128 *)keys);
  v5 = (std::__shared_weak_count *)keys[1];
  if (keys[1])
  {
    v6 = (unint64_t *)((char *)keys[1] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (const void **)*((_QWORD *)this + 7);
  if (v8)
  {
    NLEntityDetectorRelease(v8);
    *((_QWORD *)this + 7) = 0;
  }
  v9 = (void *)*MEMORY[0x1E0C9B088];
  Value = CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  v11 = (const __CFString *)CFRetain(Value);
  v94 = v11;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v11);
  v93 = v13;
  if (v13)
  {
    if (CFStringsAreEqual(v11, CFSTR("zh")))
    {
      v14 = (void *)*MEMORY[0x1E0C9B090];
      v15 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
      if (v15)
      {
LABEL_15:
        keys[0] = v9;
        keys[1] = v14;
        *(_QWORD *)&values = v11;
        *((_QWORD *)&values + 1) = v15;
        v17 = CFDictionaryCreate(v12, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v92 = v17;
        LocaleIdentifierFromComponents = CFLocaleCreateLocaleIdentifierFromComponents(v12, v17);
        if (v11)
          CFRelease(v11);
        v94 = LocaleIdentifierFromComponents;
        v19 = CFLocaleCreate(v12, LocaleIdentifierFromComponents);
        CFRelease(v13);
        v93 = v19;
        if (v17)
          CFRelease(v17);
LABEL_20:
        if (*((_QWORD *)this + 5))
        {
          *(_QWORD *)&values = CFStringCreateWithFormat(v12, 0, CFSTR("%@/%@-search.plist"), LocaleIdentifierFromComponents, LocaleIdentifierFromComponents);
          NL::AssetResourceManager::createAssetResourceFromPathWithName(v19, *((CFURLRef *)this + 5), (CFStringRef)values, keys);
          v20 = *(_OWORD *)keys;
          keys[0] = 0;
          keys[1] = 0;
          v21 = (std::__shared_weak_count *)v96[1];
          *(_OWORD *)v96 = v20;
          if (v21)
          {
            p_shared_owners = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          v24 = (std::__shared_weak_count *)keys[1];
          if (keys[1])
          {
            v25 = (unint64_t *)((char *)keys[1] + 8);
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          if ((_QWORD)values)
            CFRelease((CFTypeRef)values);
        }
        else
        {
          NL::AssetResourceManager::createAssetResourceOfType(keys);
          v27 = *(_OWORD *)keys;
          keys[0] = 0;
          keys[1] = 0;
          v28 = (std::__shared_weak_count *)v96[1];
          *(_OWORD *)v96 = v27;
          if (v28)
          {
            v29 = (unint64_t *)&v28->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          v31 = (std::__shared_weak_count *)keys[1];
          if (keys[1])
          {
            v32 = (unint64_t *)((char *)keys[1] + 8);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
        }
        if (!v96[0] || !NL::AssetResource::exists((const __CFURL **)v96[0]))
          goto LABEL_123;
        v34 = (const __CFURL *)NL::AssetResource::URL(v96[0]);
        DictionaryWithContentsOfURL = createDictionaryWithContentsOfURL(v34, 0);
        v36 = DictionaryWithContentsOfURL;
        keys[0] = DictionaryWithContentsOfURL;
        if (DictionaryWithContentsOfURL)
        {
          if (CFDictionaryContainsKey(DictionaryWithContentsOfURL, CFSTR("Contents"))
            && (v37 = (const __CFArray *)CFDictionaryGetValue(v36, CFSTR("Contents")), CFArrayGetCount(v37) == 2))
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v37, 0);
            if (CFDictionaryContainsKey(ValueAtIndex, CFSTR("Version")))
            {
              v39 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Version"));
              *(_QWORD *)&values = CFNumberCreate(v12, kCFNumberIntType, &NLPARSER_MIN_CACHE_VERSION);
              v40 = CFNumberCompare(v39, (CFNumberRef)values, 0) >= kCFCompareEqualTo;
              nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)&values, 0);
            }
            else
            {
              v40 = 0;
            }
            v42 = (const __CFDictionary *)CFArrayGetValueAtIndex(v37, 1);
            if (CFDictionaryContainsKey(v42, CFSTR("Version")))
            {
              v43 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Version"));
              *(_QWORD *)&values = CFNumberCreate(v12, kCFNumberIntType, &NLPARSER_MIN_CFG_VERSION);
              v41 = CFNumberCompare(v43, (CFNumberRef)values, 0) >= kCFCompareEqualTo && v40;
              nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)&values, 0);
            }
            else
            {
              v41 = 0;
            }
          }
          else
          {
            v41 = 1;
          }
          if (CFDictionaryContainsKey(v36, CFSTR("CanonicalRegions")))
          {
            v44 = (const __CFDictionary *)CFDictionaryGetValue(v36, CFSTR("CanonicalRegions"));
            Copy = CFDictionaryCreateCopy(v12, v44);
            nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 3, Copy);
          }
          CFRelease(v36);
          if (!v41)
            goto LABEL_123;
        }
        if (*((_QWORD *)this + 5))
        {
          v46 = CFStringCreateWithFormat(v12, 0, CFSTR("%@/%@-search.cache"), v94, v94);
          if (cf)
            CFRelease(cf);
          cf = v46;
          NL::AssetResourceManager::createAssetResourceFromPathWithName((NL::AssetResourceManager *)v93, *((CFURLRef *)this + 5), v46, keys);
          v47 = *(_OWORD *)keys;
          keys[0] = 0;
          keys[1] = 0;
          v48 = (std::__shared_weak_count *)v97[1];
          *(_OWORD *)v97 = v47;
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v51 = (std::__shared_weak_count *)keys[1];
          if (keys[1])
          {
            v52 = (unint64_t *)((char *)keys[1] + 8);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v54 = CFStringCreateWithFormat(v12, 0, CFSTR("%@/%@-search.cfg"), v94, v94, v92);
          if (cf)
            CFRelease(cf);
          cf = v54;
          NL::AssetResourceManager::createAssetResourceFromPathWithName((NL::AssetResourceManager *)v93, *((CFURLRef *)this + 5), v54, keys);
          v55 = *(_OWORD *)keys;
          keys[0] = 0;
          keys[1] = 0;
          v56 = (std::__shared_weak_count *)v98[1];
          *(_OWORD *)v98 = v55;
          if (v56)
          {
            v57 = (unint64_t *)&v56->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v59 = (std::__shared_weak_count *)keys[1];
          if (keys[1])
          {
            v60 = (unint64_t *)((char *)keys[1] + 8);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            goto LABEL_103;
          }
        }
        else
        {
          NL::AssetResourceManager::createAssetResourceOfType(keys);
          v62 = *(_OWORD *)keys;
          keys[0] = 0;
          keys[1] = 0;
          v63 = (std::__shared_weak_count *)v97[1];
          *(_OWORD *)v97 = v62;
          if (v63)
          {
            v64 = (unint64_t *)&v63->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          v66 = (std::__shared_weak_count *)keys[1];
          if (keys[1])
          {
            v67 = (unint64_t *)((char *)keys[1] + 8);
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          NL::AssetResourceManager::createAssetResourceOfType(keys);
          v69 = *(_OWORD *)keys;
          keys[0] = 0;
          keys[1] = 0;
          v70 = (std::__shared_weak_count *)v98[1];
          *(_OWORD *)v98 = v69;
          if (v70)
          {
            v71 = (unint64_t *)&v70->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          v59 = (std::__shared_weak_count *)keys[1];
          if (keys[1])
          {
            v73 = (unint64_t *)((char *)keys[1] + 8);
            do
              v61 = __ldaxr(v73);
            while (__stlxr(v61 - 1, v73));
LABEL_103:
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
        }
        NL::AssetResourceManager::createAssetResourceFromBundle(0, CFSTR("root"), CFSTR("cache"), 0, keys);
        if (keys[0])
        {
          v74 = NL::AssetResource::URL((NL::AssetResource *)keys[0]);
          v75 = NLEntityDetectorCreate(v74);
          *((_QWORD *)this + 7) = v75;
          if (!v75)
            goto LABEL_118;
        }
        else if (!*((_QWORD *)this + 7))
        {
          goto LABEL_118;
        }
        if (!v97[0])
          goto LABEL_146;
        v76 = NL::AssetResource::exists((const __CFURL **)v97[0]);
        v77 = (const void **)*((_QWORD *)this + 7);
        if (v76)
        {
          v78 = NL::AssetResource::URL(v97[0]);
          LanguageResources = NLEntityDetectorLoadLanguageResources((uint64_t)v77, v78);
          v77 = (const void **)*((_QWORD *)this + 7);
          if (!LanguageResources)
            goto LABEL_117;
        }
        if (v77)
        {
LABEL_146:
          if (v98[0])
          {
            if (NL::AssetResource::exists((const __CFURL **)v98[0]))
            {
              v92 = (const __CFURL *)NL::AssetResource::URL(v98[0]);
              std::allocate_shared[abi:ne180100]<NL::SearchGrammar,std::allocator<NL::SearchGrammar>,__CFURL const*,void>(&v92, &values);
              std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v4, &values);
              std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&values);
              if (!NL::SearchGrammar::hasResources(*v4))
              {
                values = 0uLL;
                std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v4, &values);
                std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&values);
                v77 = (const void **)*((_QWORD *)this + 7);
LABEL_117:
                NLEntityDetectorRelease(v77);
                *((_QWORD *)this + 7) = 0;
              }
            }
          }
        }
LABEL_118:
        v80 = (std::__shared_weak_count *)keys[1];
        if (keys[1])
        {
          v81 = (unint64_t *)((char *)keys[1] + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
LABEL_123:
        if (v93)
          CFRelease(v93);
        goto LABEL_125;
      }
      v16 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
      if (v16)
      {
        if (CFStringsAreEqual(v16, CFSTR("CN")))
          v15 = CFSTR("Hans");
        else
          v15 = CFSTR("Hant");
        goto LABEL_15;
      }
    }
    v19 = v13;
    LocaleIdentifierFromComponents = v11;
    goto LABEL_20;
  }
LABEL_125:
  if (v94)
    CFRelease(v94);
  if (cf)
    CFRelease(cf);
  v83 = (std::__shared_weak_count *)v96[1];
  if (v96[1])
  {
    v84 = (unint64_t *)((char *)v96[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = (std::__shared_weak_count *)v97[1];
  if (v97[1])
  {
    v87 = (unint64_t *)((char *)v97[1] + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = (std::__shared_weak_count *)v98[1];
  if (v98[1])
  {
    v90 = (unint64_t *)((char *)v98[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
}

void sub_1A18ACB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  const void *v6;
  va_list va;
  const void *v8;
  va_list va1;
  const void *v10;
  va_list va2;
  uint64_t v12;
  va_list va3;
  uint64_t v14;
  uint64_t v15;
  va_list va4;
  uint64_t v17;
  uint64_t v18;
  va_list va5;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va6;

  va_start(va6, a4);
  va_start(va5, a4);
  va_start(va4, a4);
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v8 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v10 = va_arg(va3, const void *);
  va_copy(va4, va3);
  v12 = va_arg(va4, _QWORD);
  v14 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v15 = va_arg(va5, _QWORD);
  v17 = va_arg(va5, _QWORD);
  va_copy(va6, va5);
  v18 = va_arg(va6, _QWORD);
  v20 = va_arg(va6, _QWORD);
  v21 = va_arg(va6, _QWORD);
  v22 = va_arg(va6, _QWORD);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va6, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v4 - 96), 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va2, 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va4);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va5);
  _Unwind_Resume(a1);
}

void NL::ParserResources::~ParserResources(NL::ParserResources *this)
{
  const void **v2;

  v2 = (const void **)*((_QWORD *)this + 7);
  if (v2)
    NLEntityDetectorRelease(v2);
  NL::AssetResourceManager::~AssetResourceManager((NL::ParserResources *)((char *)this + 80));
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)this + 5, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 3, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 2, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this + 1, 0);
  nlp::CFScopedPtr<__CFDate const*>::reset((const void **)this, 0);
}

uint64_t NL::ParserResources::copyEntityDetector(NL::ParserResources *this)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  if (getParserResourcesQueue(void)::resourcesOnceToken != -1)
    dispatch_once(&getParserResourcesQueue(void)::resourcesOnceToken, &__block_literal_global_6);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN2NL15ParserResources18copyEntityDetectorEv_block_invoke;
  v4[3] = &unk_1E45D0280;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync((dispatch_queue_t)getParserResourcesQueue(void)::resourcesQueue, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void NL::ParserResources::getSearchGrammar(NL::ParserResources *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD block[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __n128 (*v14)(uint64_t, uint64_t);
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  std::__shared_weak_count *v17;

  v11 = 0;
  v12 = &v11;
  v13 = 0x3802000000;
  v14 = __Block_byref_object_copy__16;
  v15 = __Block_byref_object_dispose__16;
  v16 = 0;
  v17 = 0;
  if (getParserResourcesQueue(void)::resourcesOnceToken != -1)
    dispatch_once(&getParserResourcesQueue(void)::resourcesOnceToken, &__block_literal_global_6);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN2NL15ParserResources16getSearchGrammarEv_block_invoke;
  block[3] = &unk_1E45D02A8;
  block[4] = &v11;
  block[5] = this;
  dispatch_sync((dispatch_queue_t)getParserResourcesQueue(void)::resourcesQueue, block);
  v4 = v12[6];
  *a2 = v12[5];
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  _Block_object_dispose(&v11, 8);
  v7 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void NL::ParserResources::setLocale(NL::ParserResources *this, const __CFLocale *a2)
{
  __CFNotificationCenter *LocalCenter;
  _QWORD v5[6];

  *((_BYTE *)this + 48) = 0;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, this, (CFNotificationName)*MEMORY[0x1E0C9B070], 0);
  if (getParserResourcesQueue(void)::resourcesOnceToken != -1)
    dispatch_once(&getParserResourcesQueue(void)::resourcesOnceToken, &__block_literal_global_6);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN2NL15ParserResources9setLocaleEPK10__CFLocale_block_invoke;
  v5[3] = &__block_descriptor_tmp_10;
  v5[4] = this;
  v5[5] = a2;
  dispatch_sync((dispatch_queue_t)getParserResourcesQueue(void)::resourcesQueue, v5);
}

void ___ZN2NL15ParserResources9setLocaleEPK10__CFLocale_block_invoke(uint64_t a1)
{
  const void **v2;
  const void *v3;
  CFTypeRef v4;

  v2 = *(const void ***)(a1 + 32);
  nlp::CFScopedPtr<__CFLocale const*>::reset(v2 + 1, 0);
  v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    v4 = CFRetain(v3);
    nlp::CFScopedPtr<__CFLocale const*>::reset(v2 + 1, v4);
    NL::ParserResources::updateLockedResources((NL::ParserResources *)v2, (const __CFLocale *)v2[1]);
  }
}

void NL::ParserResources::updateLocale(NL::ParserResources *this, const __CFLocale *a2)
{
  const __CFLocale *v4;
  const __CFString *v5;
  const __CFString *Value;
  const __CFString *v7;
  BOOL v8;
  _QWORD block[7];

  if (a2)
  {
    v4 = (const __CFLocale *)NL::ParserResources::copyLocale(this);
    block[6] = v4;
    if (v4)
    {
      if ((NL::AssetResourceManager::checkHasUpdatedAssetsAndReset((NL::ParserResources *)((char *)this + 80)) & 1) == 0)
      {
        v5 = (const __CFString *)*MEMORY[0x1E0C9B088];
        Value = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
        v7 = (const __CFString *)CFLocaleGetValue(v4, v5);
        v8 = !Value || v7 == 0;
        if (v8 || CFStringHasPrefix(v7, Value))
          goto LABEL_13;
      }
    }
    if (getParserResourcesQueue(void)::resourcesOnceToken != -1)
      dispatch_once(&getParserResourcesQueue(void)::resourcesOnceToken, &__block_literal_global_6);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN2NL15ParserResources12updateLocaleEPK10__CFLocale_block_invoke;
    block[3] = &__block_descriptor_tmp_11_1;
    block[4] = this;
    block[5] = a2;
    dispatch_sync((dispatch_queue_t)getParserResourcesQueue(void)::resourcesQueue, block);
    if (v4)
LABEL_13:
      CFRelease(v4);
  }
}

void sub_1A18AD12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::ParserResources::copyLocale(NL::ParserResources *this)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  if (getParserResourcesQueue(void)::resourcesOnceToken != -1)
    dispatch_once(&getParserResourcesQueue(void)::resourcesOnceToken, &__block_literal_global_6);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN2NL15ParserResources10copyLocaleEv_block_invoke;
  v4[3] = &unk_1E45D0258;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync((dispatch_queue_t)getParserResourcesQueue(void)::resourcesQueue, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void ___ZN2NL15ParserResources12updateLocaleEPK10__CFLocale_block_invoke(uint64_t a1)
{
  const void **v2;
  const void *v3;
  CFTypeRef v4;

  v2 = *(const void ***)(a1 + 32);
  nlp::CFScopedPtr<__CFLocale const*>::reset(v2 + 1, 0);
  v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    v4 = CFRetain(v3);
    nlp::CFScopedPtr<__CFLocale const*>::reset(v2 + 1, v4);
    NL::ParserResources::updateLockedResources((NL::ParserResources *)v2, (const __CFLocale *)v2[1]);
  }
}

uint64_t ___ZN2NL15ParserResources10copyLocaleEv_block_invoke(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(*(_QWORD *)(result + 40) + 8))
  {
    v1 = result;
    result = MEMORY[0x1A1B0D624](*MEMORY[0x1E0C9AE00]);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t ___ZN2NL15ParserResources18copyEntityDetectorEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
  if (result)
  {
    result = NLEntityDetectorRetain(result);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

__n128 __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__16(uint64_t a1)
{
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 40);
}

NL::AssetResource *NL::ParserResources::copyReferenceDatesPath(NL::ParserResources *this)
{
  NL::AssetResourceManager *v2;
  NL::AssetResourceManager *v3;
  const __CFURL *v4;
  NL::AssetResource *v5;
  std::__shared_weak_count *v6;
  const void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const __CFURL **v11;
  std::__shared_weak_count *v12;
  NL::AssetResourceManager *v13;
  const __CFURL **v14;
  std::__shared_weak_count *v15;

  v14 = 0;
  v15 = 0;
  v2 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("root"));
  v3 = v2;
  v13 = v2;
  if (!v2)
    return 0;
  v4 = (const __CFURL *)*((_QWORD *)this + 5);
  if (v4)
    NL::AssetResourceManager::createAssetResourceFromPathWithName(v2, v4, CFSTR("root/dates.plist"), &v11);
  else
    NL::AssetResourceManager::createAssetResourceOfType(&v11);
  v5 = (NL::AssetResource *)v11;
  v6 = v12;
  v14 = v11;
  v15 = v12;
  if (v11)
  {
    if (NL::AssetResource::exists(v11))
    {
      v7 = (const void *)NL::AssetResource::URL(v5);
      v5 = (NL::AssetResource *)CFRetain(v7);
    }
    else
    {
      v5 = 0;
    }
  }
  CFRelease(v3);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1A18AD430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void *v5;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, const void *);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)va, 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void NL::ParserResources::setCustomResourcePath(const void **this, const __CFURL *a2)
{
  const void **v4;
  CFURLRef v5;
  _QWORD block[5];

  v4 = this + 5;
  nlp::CFScopedPtr<__CFURL const*>::reset(this + 5, 0);
  if (a2)
  {
    v5 = CFURLCopyAbsoluteURL(a2);
    nlp::CFScopedPtr<__CFURL const*>::reset(v4, v5);
  }
  if (getParserResourcesQueue(void)::resourcesOnceToken != -1)
    dispatch_once(&getParserResourcesQueue(void)::resourcesOnceToken, &__block_literal_global_6);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN2NL15ParserResources21setCustomResourcePathEPK7__CFURL_block_invoke;
  block[3] = &__block_descriptor_tmp_43;
  block[4] = this;
  dispatch_sync((dispatch_queue_t)getParserResourcesQueue(void)::resourcesQueue, block);
}

void ___ZN2NL15ParserResources21setCustomResourcePathEPK7__CFURL_block_invoke(uint64_t a1)
{
  NL::ParserResources::updateLockedResources(*(NL::ParserResources **)(a1 + 32), *(const __CFLocale **)(*(_QWORD *)(a1 + 32) + 8));
}

void NL::ParserResources::reset(NL::ParserResources *this)
{
  const __CFLocale *v2;

  if (!*((_QWORD *)this + 8) || !*((_QWORD *)this + 7))
  {
    v2 = (const __CFLocale *)NL::ParserResources::copyLocale(this);
    NL::ParserResources::updateLocale(this, v2);
    if (v2)
      CFRelease(v2);
  }
}

void sub_1A18AD590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<NL::SearchGrammar,std::allocator<NL::SearchGrammar>,__CFURL const*,void>@<X0>(const __CFURL **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<NL::SearchGrammar>::__shared_ptr_emplace[abi:ne180100]<__CFURL const*,std::allocator<NL::SearchGrammar>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1A18AD5EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<NL::SearchGrammar>::__shared_ptr_emplace[abi:ne180100]<__CFURL const*,std::allocator<NL::SearchGrammar>,0>(_QWORD *a1, const __CFURL **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E45CEEE8;
  NL::SearchGrammar::SearchGrammar((NL::SearchGrammar *)(a1 + 3), *a2);
  return a1;
}

void sub_1A18AD63C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NL::SearchGrammar>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEEE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::SearchGrammar>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEEE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

void std::__shared_ptr_emplace<NL::SearchGrammar>::__on_zero_shared(uint64_t a1)
{
  NL::SearchGrammar::~SearchGrammar((NL::SearchGrammar *)(a1 + 24));
}

void NLHindiTransliterator::NLHindiTransliterator(NLHindiTransliterator *this, const __CFDictionary *a2)
{
  char *v4;
  NLAbstractTransMappings *v5;
  NLHindiWordLanguageModeler *v6;
  NLRomanHindiWordLanguageModeler *v7;
  NLEnglishWordLanguageModeler *v8;
  NLHindiCharLanguageModeler *v9;
  NLDevanagariOrthographyChecker *v10;
  NLEnglishHindiDictionaryLookup *v11;
  NLHindiCanonicalizedMappings *v12;
  NLDevanagariNasalOrthographyConverter *v13;
  uint64_t v14[5];

  *((_OWORD *)this + 5) = 0u;
  v4 = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = xmmword_1A18D4870;
  *((_DWORD *)this + 34) = 2;
  *((_QWORD *)this + 18) = 0xC03E000000000000;
  *((_QWORD *)this + 19) = 0x3E800000005;
  *((_DWORD *)this + 40) = 3;
  *((_QWORD *)this + 21) = 0x3FF3333333333333;
  *(_QWORD *)this = &off_1E45CD5B8;
  *((_QWORD *)this + 22) = 0x1F40000000ALL;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 184), "[\",,;.\"'?!:{}<>*\\-]",
    0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 248), "([bcdfghjklmnpqrstvwxyzi])([ywv])(a)$", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)this + 13, "(tr|dr)(a)$", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 376), "(r)([iu])", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 440), "aa[a]+", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)this + 21, "([bcdfghjklmnpqrstvwxyz]|^)(eh|ehe)", 0);
  v5 = (NLAbstractTransMappings *)operator new();
  NLAbstractTransMappings::NLAbstractTransMappings(v5, a2);
  *((_QWORD *)this + 1) = v5;
  (*(void (**)(uint64_t *__return_ptr, NLHindiTransliterator *))(*(_QWORD *)this + 120))(v14, this);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)v4, v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v14);
  v6 = (NLHindiWordLanguageModeler *)operator new();
  NLHindiWordLanguageModeler::NLHindiWordLanguageModeler(v6, a2);
  *((_QWORD *)this + 2) = v6;
  v7 = (NLRomanHindiWordLanguageModeler *)operator new();
  NLRomanHindiWordLanguageModeler::NLRomanHindiWordLanguageModeler(v7, a2);
  *((_QWORD *)this + 3) = v7;
  v8 = (NLEnglishWordLanguageModeler *)operator new();
  NLEnglishWordLanguageModeler::NLEnglishWordLanguageModeler(v8, a2);
  *((_QWORD *)this + 4) = v8;
  v9 = (NLHindiCharLanguageModeler *)operator new();
  NLHindiCharLanguageModeler::NLHindiCharLanguageModeler(v9, a2);
  *((_QWORD *)this + 5) = v9;
  v10 = (NLDevanagariOrthographyChecker *)operator new();
  NLDevanagariOrthographyChecker::NLDevanagariOrthographyChecker(v10);
  *((_QWORD *)this + 6) = v10;
  v11 = (NLEnglishHindiDictionaryLookup *)operator new();
  NLEnglishHindiDictionaryLookup::NLEnglishHindiDictionaryLookup(v11);
  *((_QWORD *)this + 7) = v11;
  v12 = (NLHindiCanonicalizedMappings *)operator new();
  NLHindiCanonicalizedMappings::NLHindiCanonicalizedMappings(v12);
  *((_QWORD *)this + 8) = v12;
  v13 = (NLDevanagariNasalOrthographyConverter *)operator new();
  NLDevanagariNasalOrthographyConverter::NLDevanagariNasalOrthographyConverter(v13);
  *((_QWORD *)this + 9) = v13;
}

void sub_1A18AD96C(_Unwind_Exception *a1)
{
  NLGenericTransliterator *v1;
  std::locale *v2;
  std::locale *v3;
  std::locale *v4;
  std::locale *v5;
  std::locale *v6;
  std::locale *v7;
  uint64_t v8;

  MEMORY[0x1A1B0E068](v8, 0x10E1C4025DEE3AFLL);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 544);
  std::locale::~locale(v7);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 480);
  std::locale::~locale(v6);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 416);
  std::locale::~locale(v5);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 352);
  std::locale::~locale(v4);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 288);
  std::locale::~locale(v3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 224);
  std::locale::~locale(v2);
  NLGenericTransliterator::~NLGenericTransliterator(v1);
  _Unwind_Resume(a1);
}

uint64_t NLHindiTransliterator::shouldProcessForPhonetics(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::vector<std::ssub_match> v10[2];
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  std::match_results<const char *> __p;

  v2 = a2;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  memset(v10, 0, 41);
  v3 = a1 + 504;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 32);
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v4 & 0x80u) != 0)
  {
    a2 = *(_QWORD *)a2;
    v4 = v5;
  }
  *(std::pair<const char *, const char *> *)((char *)&__p.__unmatched_.std::pair<const char *, const char *> + 1) = 0uLL;
  v6 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v3, (char *)a2, (char *)(a2 + v4), &__p, 0);
  v7 = *(unsigned __int8 *)(v2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = v2;
  else
    v8 = *(_QWORD *)v2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(v2 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v10, v8, (std::sub_match<std::__wrap_iter<const char *>> *)(v8 + v7), (uint64_t *)&__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (v10[0].__begin_)
  {
    v10[0].__end_ = v10[0].__begin_;
    operator delete(v10[0].__begin_);
  }
  return v6;
}

void sub_1A18ADB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void NLHindiTransliterator::addSpecialElements(_QWORD **a1, char *a2, int *a3, unsigned int *a4, unsigned int *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::string __str;
  std::string v16;
  std::string *p_str;

  std::string::basic_string[abi:ne180100]<0>(&__str, a2);
  std::string::basic_string(&v16, &__str, *a3, 2uLL, (std::allocator<char> *)&p_str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  (*(void (**)(std::string *__return_ptr, _QWORD *, std::string *))(*a1[1] + 32))(&__str, a1[1], &v16);
  ((void (*)(_QWORD **, std::string *, _QWORD, _QWORD, char *, uint64_t *))(*a1)[18])(a1, &__str, *a4, *a5, a2, a6);
  v12 = *a6;
  if (a6[1] != *a6)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      NLExtendedString::setJoin(v12 + v13, 1);
      ++v14;
      v12 = *a6;
      v13 += 48;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 4) > v14);
  }
  p_str = &__str;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1A18ADCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t *a22)
{
  a22 = &a10;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double NLHindiTransliterator::getEnglishCandidateSequenceScore(uint64_t a1, uint64_t *a2)
{
  double v2;
  int *v3;
  int v4;
  double v5;
  int *v8;
  int *v9;

  stringToUTF32Characters(a2, &v8);
  v2 = 0.0;
  if (v8 != v9)
  {
    v3 = v8;
    do
    {
      v4 = *v3;
      v5 = -0.75;
      if (*v3 != 2381)
      {
        v5 = 1.0;
        if ((v4 - 2325) >= 0x25 && (v4 & 0xFFFFFFF8) != 0x958)
        {
          if ((v4 & 0xFFFFFFFE) != 0x960 && (v4 - 2309) >= 0x10)
            v5 = 0.3;
          else
            v5 = 0.5;
        }
      }
      v2 = v2 + v5;
      ++v3;
    }
    while (v3 != v9);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  return v2;
}

void NLHindiTransliterator::preProcessForRomanSuffixes(uint64_t a1@<X0>, std::__wrap_iter<const char *> a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::__wrap_iter<const char *> v8;
  uint64_t v9;
  std::__wrap_iter<const char *> v10;
  std::__wrap_iter<const char *> v11;
  std::string v12;

  v5 = *((unsigned __int8 *)a2.__i_ + 23);
  if (a2.__i_[23] < 0)
  {
    v7 = *((_QWORD *)a2.__i_ + 1);
    if (v7 < 4)
    {
      std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2.__i_, v7);
      return;
    }
    goto LABEL_7;
  }
  if (v5 >= 4)
  {
    v7 = *((_QWORD *)a2.__i_ + 1);
LABEL_7:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if ((v5 & 0x80u) != 0)
    {
      a2.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a2.__i_;
      v5 = v7;
    }
    v8.__i_ = &a2.__i_[v5];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)a3, a2, v8, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)(a1 + 248), "$1$2", 0);
    memset(&v12, 0, sizeof(v12));
    v9 = *(unsigned __int8 *)(a3 + 23);
    if ((v9 & 0x80u) == 0)
      v10.__i_ = (std::__wrap_iter<const char *>::iterator_type)a3;
    else
      v10.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a3;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a3 + 8);
    v11.__i_ = &v10.__i_[v9];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v12, v10, v11, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)(a1 + 312), "$1", 0);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v6 = v12.__r_.__value_.__r.__words[2];
    goto LABEL_17;
  }
  *(_OWORD *)a3 = *(_OWORD *)a2.__i_;
  v6 = *((_QWORD *)a2.__i_ + 2);
LABEL_17:
  *(_QWORD *)(a3 + 16) = v6;
}

void sub_1A18ADEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void NLHindiTransliterator::addDynamicMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  void *v19;
  char *v20;
  _BOOL4 v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38[2];
  char v39;
  std::string v40;
  std::string __p[2];
  std::vector<std::ssub_match> v42[2];
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  std::match_results<const char *> v51;

  v2 = a2;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  memset(v42, 0, 41);
  v4 = a1 + 376;
  memset(&v51.__prefix_, 0, 17);
  memset(&v51.__suffix_, 0, 17);
  v51.__ready_ = 0;
  v51.__position_start_ = 0;
  memset(&v51, 0, 32);
  v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = *(_QWORD *)(a2 + 8);
  if ((v5 & 0x80u) != 0)
  {
    a2 = *(_QWORD *)a2;
    v5 = v6;
  }
  *(std::pair<const char *, const char *> *)((char *)&v51.__unmatched_.std::pair<const char *, const char *> + 1) = 0uLL;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v4, (char *)a2, (char *)(a2 + v5), &v51, 0);
  v8 = *(unsigned __int8 *)(v2 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = v2;
  else
    v9 = *(_QWORD *)v2;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(v2 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v42, v9, (std::sub_match<std::__wrap_iter<const char *>> *)(v9 + v8), (uint64_t *)&v51, 0);
  if (v51.__matches_.__begin_)
  {
    v51.__matches_.__end_ = v51.__matches_.__begin_;
    operator delete(v51.__matches_.__begin_);
  }
  v10 = *(unsigned __int8 *)(v2 + 23);
  if (v7)
  {
    if ((v10 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(v2 + 23);
    else
      v11 = *(_QWORD *)(v2 + 8);
    if ((v10 & 0x80u) == 0)
      v12 = (char *)v2;
    else
      v12 = *(char **)v2;
    v13 = &v12[v11];
    v14 = &v12[v11];
    if (v11 > 4)
    {
      v15 = v11;
      v16 = v12;
      do
      {
        v17 = (char *)memchr(v16, 112, v15 - 4);
        if (!v17)
          break;
        v14 = v17;
        if (*(_DWORD *)v17 == 1953067632 && v17[4] == 104)
          goto LABEL_26;
        v16 = v17 + 1;
        v15 = v13 - (v14 + 1);
      }
      while (v15 > 4);
      v14 = &v12[v11];
    }
LABEL_26:
    if (v11 >= 4)
    {
      v19 = v12;
      do
      {
        v20 = (char *)memchr(v19, 103, v11 - 3);
        if (!v20)
          break;
        if (*(_DWORD *)v20 == 1751741031)
          goto LABEL_32;
        v19 = v20 + 1;
        v11 = v13 - (_BYTE *)v19;
      }
      while (v13 - (_BYTE *)v19 > 3);
    }
    v20 = v13;
LABEL_32:
    v22 = v20 != v13 && v20 - v12 != -1;
    v23 = v14 - v12 == -1 || v14 == v13;
    if (!v23 || v22)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      NLExtendedString::NLExtendedString((std::string *)&v51, (__int128 *)__p, 2, 2, 1.0);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      NLExtendedString::NLExtendedString((std::string *)&v51, (__int128 *)__p, 2, 2, 0.005);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    v24 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "i");
    (*(void (**)(uint64_t, std::string *, std::match_results<const char *> *))(*(_QWORD *)v24 + 16))(v24, __p, &v51);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__matches_.__end_cap_.__value_) < 0)
      operator delete(v51.__matches_.__begin_);
    v10 = *(unsigned __int8 *)(v2 + 23);
    v25 = *(_QWORD *)(v2 + 8);
    if ((v10 & 0x80u) != 0)
    {
      v26 = *(char **)v2;
    }
    else
    {
      v25 = *(unsigned __int8 *)(v2 + 23);
      v26 = (char *)v2;
    }
    if (v25 >= 2)
    {
      v27 = &v26[v25];
      v28 = v26;
      do
      {
        v29 = (char *)memchr(v28, 114, v25 - 1);
        if (!v29)
          break;
        if (*(_WORD *)v29 == 30066)
        {
          if (v29 != v27 && v29 - v26 != -1)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            NLExtendedString::NLExtendedString((std::string *)&v51, (__int128 *)__p, 2, 2, 0.005);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
            v30 = *(_QWORD *)(a1 + 8);
            std::string::basic_string[abi:ne180100]<0>(__p, "u");
            (*(void (**)(uint64_t, std::string *, std::match_results<const char *> *))(*(_QWORD *)v30 + 16))(v30, __p, &v51);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
            if (SHIBYTE(v51.__matches_.__end_cap_.__value_) < 0)
              operator delete(v51.__matches_.__begin_);
            v10 = *(unsigned __int8 *)(v2 + 23);
          }
          break;
        }
        v28 = v29 + 1;
        v25 = v27 - (_BYTE *)v28;
      }
      while (v27 - (_BYTE *)v28 >= 2);
    }
  }
  if ((v10 & 0x80) != 0)
  {
    if (*(_QWORD *)(v2 + 8) != 1)
      goto LABEL_121;
    v31 = *(_BYTE **)v2;
  }
  else
  {
    v31 = (_BYTE *)v2;
    if (v10 != 1)
      goto LABEL_85;
  }
  if (*v31 == 111)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ऑ");
    NLExtendedString::NLExtendedString((std::string *)&v51, (__int128 *)__p, 1, 3, 1.0);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v32 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "o");
    (*(void (**)(uint64_t, std::string *, std::match_results<const char *> *))(*(_QWORD *)v32 + 16))(v32, __p, &v51);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__matches_.__end_cap_.__value_) < 0)
      operator delete(v51.__matches_.__begin_);
    v10 = *(unsigned __int8 *)(v2 + 23);
  }
  if ((v10 & 0x80) != 0)
  {
    if (*(_QWORD *)(v2 + 8) != 1)
      goto LABEL_121;
    v33 = *(_BYTE **)v2;
    goto LABEL_89;
  }
LABEL_85:
  if (v10 != 1)
    goto LABEL_110;
  v10 = 1;
  v33 = (_BYTE *)v2;
LABEL_89:
  if (*v33 == 110)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ण");
    NLExtendedString::NLExtendedString((std::string *)&v51, (__int128 *)__p, 1, 3, 0.00001);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v34 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "n");
    (*(void (**)(uint64_t, std::string *, std::match_results<const char *> *))(*(_QWORD *)v34 + 16))(v34, __p, &v51);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v40, "ञ");
    NLExtendedString::NLExtendedString(__p, (__int128 *)&v40, 1, 3, 0.00001);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    v35 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(&v40, "n");
    (*(void (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v35 + 16))(v35, &v40, __p);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(v38, "ङ");
    NLExtendedString::NLExtendedString(&v40, (__int128 *)v38, 1, 3, 0.00001);
    if (v39 < 0)
      operator delete(v38[0]);
    v36 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v38, "n");
    (*(void (**)(uint64_t, void **, std::string *))(*(_QWORD *)v36 + 16))(v36, v38, &v40);
    if (v39 < 0)
      operator delete(v38[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__matches_.__end_cap_.__value_) < 0)
      operator delete(v51.__matches_.__begin_);
    v10 = *(unsigned __int8 *)(v2 + 23);
  }
  if ((v10 & 0x80) == 0)
  {
LABEL_110:
    if (v10 != 1)
      goto LABEL_121;
    goto LABEL_114;
  }
  if (*(_QWORD *)(v2 + 8) != 1)
    goto LABEL_121;
  v2 = *(_QWORD *)v2;
LABEL_114:
  if (*(_BYTE *)v2 == 114)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ऋ");
    NLExtendedString::NLExtendedString((std::string *)&v51, (__int128 *)__p, 1, 3, 0.00001);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v37 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "r");
    (*(void (**)(uint64_t, std::string *, std::match_results<const char *> *))(*(_QWORD *)v37 + 16))(v37, __p, &v51);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__matches_.__end_cap_.__value_) < 0)
      operator delete(v51.__matches_.__begin_);
  }
LABEL_121:
  if (v42[0].__begin_)
  {
    v42[0].__end_ = v42[0].__begin_;
    operator delete(v42[0].__begin_);
  }
}

void sub_1A18AE634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  uint64_t v35;

  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v35 - 185) < 0)
    operator delete(*(void **)(v35 - 208));
  if (a34)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void NLHindiTransliterator::postProcessForNewOrthography(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  size_t v8;
  const void *v9;
  size_t v10;
  const std::string::value_type *v11;
  size_t v12;
  size_t v13;
  void *__p[2];
  char v15;
  void *v16;
  size_t v17;
  unsigned __int8 v18;

  std::string::basic_string[abi:ne180100]<0>(&v16, "यें");
  std::string::basic_string[abi:ne180100]<0>(__p, "एँ");
  LODWORD(v4) = *(char *)(a1 + 23);
  if ((v4 & 0x80000000) == 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
LABEL_4:
    v4 = v4;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  LODWORD(v4) = *(char *)(a1 + 23);
  if ((v4 & 0x80000000) == 0)
    goto LABEL_4;
  v4 = *(_QWORD *)(a1 + 8);
LABEL_5:
  v5 = v18;
  if ((v18 & 0x80u) != 0)
    v5 = v17;
  if (v4 > v5)
    replaceAll((std::string *)a2, (char *)&v16, (uint64_t)__p);
  MEMORY[0x1A1B0DE04](&v16, "ये");
  MEMORY[0x1A1B0DE04](__p, "ए");
  v6 = *(char *)(a1 + 23);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  if (v7 >= 0)
    v9 = (const void *)a2;
  else
    v9 = *(const void **)a2;
  if (v6 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 23);
  else
    v10 = *(_QWORD *)(a1 + 8);
  if (v6 >= 0)
    v11 = (const std::string::value_type *)a1;
  else
    v11 = *(const std::string::value_type **)a1;
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  if (!memcmp(v9, v11, v12) && v10 == v8)
  {
    v13 = v18;
    if ((v18 & 0x80u) != 0)
      v13 = v17;
    if (v8 > v13)
      replaceAll((std::string *)a2, (char *)&v16, (uint64_t)__p);
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if ((char)v18 < 0)
    operator delete(v16);
}

void sub_1A18AE8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void NLHindiTransliterator::postProcessForExaggeration(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  __int128 v15;
  double Weight;
  unint64_t v17;
  unint64_t i;
  unint64_t v19;
  std::string __p;
  _QWORD v21[3];
  char v22;

  v10 = a1[1];
  std::string::basic_string(&__p, (const std::string *)a2, 0, 2uLL, (std::allocator<char> *)&v22);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v10 + 32))(v21, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_DWORD *)(a2 + 8);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t, _QWORD, uint64_t, uint64_t *))(*a1 + 144))(a1, v21, a4, (v11 + a4), a3, a5);
  v12 = *a5;
  if (a5[1] != *a5)
  {
    v13 = 0;
    do
    {
      NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(v12 + 48 * v13));
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
      }
      else
      {
        v15 = *v14;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 4) <= v13)
        goto LABEL_24;
      Weight = NLExtendedString::getWeight((NLExtendedString *)(*a5 + 48 * v13));
      v17 = *(unsigned __int8 *)(a2 + 23);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(a2 + 8);
      if (v17 >= 3)
      {
        for (i = 2; i < v19; ++i)
        {
          std::string::append(&__p, "ऽ");
          Weight = Weight + Weight;
          v19 = *(unsigned __int8 *)(a2 + 23);
          if ((v19 & 0x80u) != 0)
            v19 = *(_QWORD *)(a2 + 8);
        }
      }
      if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 4) <= v13
        || (NLExtendedString::setString((std::string *)(*a5 + 48 * v13), &__p),
            0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 4) <= v13))
      {
LABEL_24:
        std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
      }
      NLExtendedString::setWeight(*a5 + 48 * v13, Weight);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v13;
      v12 = *a5;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 4) > v13);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1A18AEB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a16;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void NLHindiTransliterator::postProcessForPhonetics(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v4;
  __int128 v5;
  std::string::size_type size;
  std::string *p_str;
  std::string::size_type v8;
  std::string *v9;
  size_t v10;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  size_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  size_t v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  std::string::size_type v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  size_t v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  std::string v45;
  std::string __str;
  void *__p[2];
  char v48;
  void *v49[2];
  char v50;

  std::string::basic_string[abi:ne180100]<0>(v49, "एहे");
  std::string::basic_string[abi:ne180100]<0>(__p, "अह");
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __str = *(std::string *)a1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v45, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v45 = __str;
  replaceAll(&v45, (char *)v49, (uint64_t)__p);
  v4 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
  v5 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v8 = v45.__r_.__value_.__l.__size_;
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v45;
  else
    v9 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if (v8 >= size)
    v10 = size;
  else
    v10 = v8;
  if (memcmp(p_str, v9, v10) || v8 != size)
  {
    v12 = a2[1];
    if (v12 >= a2[2])
    {
      v14 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&v45);
    }
    else
    {
      if (v4 < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2[1], (const std::string::value_type *)v5, *((std::string::size_type *)&v5 + 1));
      }
      else
      {
        v13 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
        *(_QWORD *)(v12 + 16) = *((_QWORD *)&v45.__r_.__value_.__l + 2);
        *(_OWORD *)v12 = v13;
      }
      v14 = v12 + 24;
      a2[1] = v12 + 24;
    }
    a2[1] = v14;
  }
  MEMORY[0x1A1B0DE04](v49, "ेहे");
  MEMORY[0x1A1B0DE04](__p, "ह");
  std::string::operator=(&__str, &v45);
  std::string::operator=(&v45, &__str);
  replaceAll(&v45, (char *)v49, (uint64_t)__p);
  v15 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
  v16 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v17 = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &__str;
  else
    v18 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v19 = v45.__r_.__value_.__l.__size_;
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v45;
  else
    v20 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if (v19 >= v17)
    v21 = v17;
  else
    v21 = v19;
  if (memcmp(v18, v20, v21) || v19 != v17)
  {
    v22 = a2[1];
    if (v22 >= a2[2])
    {
      v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&v45);
    }
    else
    {
      if (v15 < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2[1], (const std::string::value_type *)v16, *((std::string::size_type *)&v16 + 1));
      }
      else
      {
        v23 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
        *(_QWORD *)(v22 + 16) = *((_QWORD *)&v45.__r_.__value_.__l + 2);
        *(_OWORD *)v22 = v23;
      }
      v24 = v22 + 24;
      a2[1] = v22 + 24;
    }
    a2[1] = v24;
  }
  MEMORY[0x1A1B0DE04](v49, "एह");
  MEMORY[0x1A1B0DE04](__p, "अह");
  std::string::operator=(&__str, &v45);
  std::string::operator=(&v45, &__str);
  replaceAll(&v45, (char *)v49, (uint64_t)__p);
  v25 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
  v26 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v27 = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &__str;
  else
    v28 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v29 = v45.__r_.__value_.__l.__size_;
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v45;
  else
    v30 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if (v29 >= v27)
    v31 = v27;
  else
    v31 = v29;
  if (memcmp(v28, v30, v31) || v29 != v27)
  {
    v32 = a2[1];
    if (v32 >= a2[2])
    {
      v34 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&v45);
    }
    else
    {
      if (v25 < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2[1], (const std::string::value_type *)v26, *((std::string::size_type *)&v26 + 1));
      }
      else
      {
        v33 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
        *(_QWORD *)(v32 + 16) = *((_QWORD *)&v45.__r_.__value_.__l + 2);
        *(_OWORD *)v32 = v33;
      }
      v34 = v32 + 24;
      a2[1] = v32 + 24;
    }
    a2[1] = v34;
  }
  MEMORY[0x1A1B0DE04](v49, "ेह");
  MEMORY[0x1A1B0DE04](__p, "ह");
  std::string::operator=(&__str, &v45);
  std::string::operator=(&v45, &__str);
  replaceAll(&v45, (char *)v49, (uint64_t)__p);
  v35 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
  v36 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v37 = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &__str;
  else
    v38 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v39 = v45.__r_.__value_.__l.__size_;
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v45;
  else
    v40 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if (v39 >= v37)
    v41 = v37;
  else
    v41 = v39;
  if (!memcmp(v38, v40, v41) && v39 == v37)
  {
    if ((v35 & 0x80) == 0)
      goto LABEL_99;
    goto LABEL_113;
  }
  v42 = a2[1];
  if (v42 >= a2[2])
  {
    v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&v45);
  }
  else
  {
    if (v35 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a2[1], (const std::string::value_type *)v36, *((std::string::size_type *)&v36 + 1));
    }
    else
    {
      v43 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
      *(_QWORD *)(v42 + 16) = *((_QWORD *)&v45.__r_.__value_.__l + 2);
      *(_OWORD *)v42 = v43;
    }
    v44 = v42 + 24;
    a2[1] = v42 + 24;
  }
  a2[1] = v44;
  if ((*((_BYTE *)&v45.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_113:
    operator delete(v45.__r_.__value_.__l.__data_);
LABEL_99:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v48 < 0)
    operator delete(__p[0]);
  if (v50 < 0)
    operator delete(v49[0]);
}

void sub_1A18AF010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  _QWORD *v34;
  uint64_t v35;

  v34[1] = v35;
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  a16 = v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

uint64_t NLHindiTransliterator::pruneLattice(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 **v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  int64_t size;
  char v21;
  std::string *v22;
  unsigned __int16 *v23;
  std::string *v24;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int MaximumLayerSize;
  int v51;
  std::string v52;
  std::string v53;
  __int128 v54;
  char v55;
  char v56;

  MaximumLayerSize = NLTransliteratorUtils::getMaximumLayerSize(a2);
  v4 = *a3;
  v5 = a3[1];
  if (v5 != *a3)
  {
    v6 = 0;
    LODWORD(v7) = 1;
    while (1)
    {
      v8 = (__int128 **)(v4 + 24 * v6);
      v9 = *v8;
      if (v8[1] == *v8)
        std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
      v51 = v7;
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
        v4 = *a3;
        v5 = a3[1];
      }
      else
      {
        v10 = *v9;
        v53.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v10;
      }
      v11 = *(__int128 *)((char *)v9 + 24);
      v55 = *((_BYTE *)v9 + 40);
      v54 = v11;
      if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) <= v6)
        goto LABEL_61;
      v12 = (uint64_t *)(v4 + 24 * v6);
      v13 = v12 + 1;
      v14 = v12[1];
      v15 = *v12;
      if (v14 != *v12)
        break;
LABEL_40:
      if (v15 == v14)
      {
        if (v14 >= *(_QWORD *)(v4 + 24 * v6 + 16))
        {
          v34 = std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>(v12, (__int128 *)&v53);
        }
        else
        {
          std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)v12, (__int128 *)&v53);
          v34 = v14 + 48;
        }
        *v13 = v34;
        v4 = *a3;
        v5 = a3[1];
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) <= v6)
        goto LABEL_62;
      v35 = v4 + 24 * v6;
      v36 = *(uint64_t **)v35;
      v37 = *(_QWORD *)(v35 + 8);
      v38 = v37 - *(_QWORD *)v35;
      v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 4);
      if (v38 < 1)
      {
        v40 = 0;
        v42 = 0;
      }
      else
      {
        v40 = (__int128 *)std::get_temporary_buffer[abi:ne180100]<NLExtendedString>(0xAAAAAAAAAAAAAAABLL * (v38 >> 4));
        v42 = v41;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(v36, v37, (uint64_t)&v52, v39, v40, v42);
      if (v40)
        operator delete(v40);
      if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v6)
        goto LABEL_62;
      v43 = (uint64_t *)(*a3 + 24 * v6);
      v44 = -1431655765 * ((unint64_t)(v43[1] - *v43) >> 4);
      if (MaximumLayerSize < v44)
        v44 = MaximumLayerSize;
      std::vector<NLExtendedString>::resize(v43, v44);
      v4 = *a3;
      v5 = a3[1];
      v45 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a3) >> 3);
      if (v45 <= v6)
LABEL_62:
        std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
      v46 = (uint64_t *)(v4 + 24 * v6);
      v48 = *v46;
      v47 = v46[1];
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v53.__r_.__value_.__l.__data_);
        v4 = *a3;
        v5 = a3[1];
        v45 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a3) >> 3);
      }
      v7 = -1431655765 * ((unint64_t)(v47 - v48) >> 4) * v51;
      if (v45 <= ++v6)
        return v7;
    }
    v16 = 0;
    v17 = 0;
    while (1)
    {
      NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(v15 + 48 * v17));
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
      }
      else
      {
        v19 = *v18;
        v52.__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v19;
      }
      size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      v21 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v22 = &v52;
      }
      else
      {
        size = v52.__r_.__value_.__l.__size_;
        v22 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      if (size >= 3)
      {
        v23 = (unsigned __int16 *)((char *)v22 + size);
        v24 = v22;
        do
        {
          v25 = (char *)memchr(v24, -32, size - 2);
          if (!v25)
            break;
          if (*(unsigned __int16 *)v25 == 42208 && v25[2] == 188)
          {
            if (v25 == (char *)v23 || v25 - (char *)v22 == -1)
              break;
            if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v6)
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            v27 = (_QWORD *)(*a3 + 24 * v6);
            v28 = *v27 + 48 * v17;
            v30 = (__int128 *)v27[1];
            v29 = v27 + 1;
            std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<NLExtendedString *,NLExtendedString *,NLExtendedString *>((uint64_t)&v56, (__int128 *)(v28 + 48), v30, v28);
            v32 = v31;
            for (i = *v29; i != v32; i -= 48)
            {
              if (*(char *)(i - 25) < 0)
                operator delete(*(void **)(i - 48));
            }
            *v29 = v32;
            --v16;
            if ((*((_BYTE *)&v52.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_35;
            goto LABEL_34;
          }
          v24 = (std::string *)(v25 + 1);
          size = (char *)v23 - (char *)v24;
        }
        while ((char *)v23 - (char *)v24 >= 3);
      }
      if (v21 < 0)
LABEL_34:
        operator delete(v52.__r_.__value_.__l.__data_);
LABEL_35:
      v4 = *a3;
      v5 = a3[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v5 - *a3) >> 3) <= v6)
        break;
      ++v16;
      v12 = (uint64_t *)(v4 + 24 * v6);
      v13 = v12 + 1;
      v14 = v12[1];
      v17 = v16;
      v15 = *v12;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v12) >> 4) <= v16)
        goto LABEL_40;
    }
LABEL_61:
    std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
  }
  return 1;
}

void sub_1A18AF4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NLHindiTransliterator::addSpecialCandidates(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5;
  _WORD *v6;
  _WORD *v7;
  uint64_t result;
  std::string *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  std::string *v16;
  char *v17;
  char *v18;
  std::string **v19;
  char *v20;
  char *v21;
  char *v22;
  std::string *v23;
  std::string *v24;
  std::string **v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  std::string **v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  std::string *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  std::string **v40;
  char *v41;
  char *v42;
  char *v43;
  std::string *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  std::string *v50;
  std::string *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  std::string **v58;
  char *v59;
  char *v60;
  char *v61;
  std::string *v62;
  unint64_t v63;
  uint64_t v64;
  _WORD *v65;
  std::string *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  std::string **v73;
  char *v74;
  char *v75;
  char *v76;
  std::string *v77;
  std::string *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  std::string **v85;
  char *v86;
  char *v87;
  char *v88;
  std::string *v89;
  std::string *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  std::string **v97;
  char *v98;
  char *v99;
  char *v100;
  std::string *v101;
  unint64_t v102;
  uint64_t v103;
  void *v104[2];
  char v105;
  void *__p;
  char *v107;
  unint64_t v108;

  v5 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8) != 2)
    {
      result = 0;
      goto LABEL_111;
    }
    v6 = *(_WORD **)a2;
    if (**(_WORD **)a2 == 26994)
      goto LABEL_12;
  }
  else
  {
    if (v5 != 2)
    {
      result = 0;
      goto LABEL_109;
    }
    v6 = (_WORD *)a2;
    if (*(_WORD *)a2 == 26994)
    {
      __p = 0;
      v107 = 0;
      v7 = (_WORD *)a2;
      v108 = 0;
      goto LABEL_17;
    }
  }
  if (*v6 != 30066)
  {
    result = 0;
    if ((v5 & 0x80) == 0)
      goto LABEL_109;
    goto LABEL_111;
  }
LABEL_12:
  __p = 0;
  v107 = 0;
  v108 = 0;
  if ((v5 & 0x80) != 0)
  {
    if (*(_QWORD *)(a2 + 8) != 2)
      goto LABEL_18;
    v7 = *(_WORD **)a2;
  }
  else
  {
    v7 = (_WORD *)a2;
    if (v5 != 2)
      goto LABEL_18;
  }
LABEL_17:
  if (*v7 == 26994)
  {
    v16 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v104, "रि");
    NLTransliterationCandidate::NLTransliterationCandidate(v16, (__int128 *)a2, (__int128 *)v104, 0, 0, 1.0);
    v17 = v107;
    if ((unint64_t)v107 >= v108)
    {
      v36 = (v107 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v36 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v37 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
      if (v37 <= v36 + 1)
        v37 = v36 + 1;
      if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      if (v38)
        v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v38);
      else
        v39 = 0;
      v40 = (std::string **)&v39[8 * v36];
      v41 = &v39[8 * v38];
      *v40 = v16;
      v18 = (char *)(v40 + 1);
      v43 = (char *)__p;
      v42 = v107;
      if (v107 != __p)
      {
        do
        {
          v44 = (std::string *)*((_QWORD *)v42 - 1);
          v42 -= 8;
          *--v40 = v44;
        }
        while (v42 != v43);
        v42 = (char *)__p;
      }
      __p = v40;
      v107 = v18;
      v108 = (unint64_t)v41;
      if (v42)
        operator delete(v42);
    }
    else
    {
      *(_QWORD *)v107 = v16;
      v18 = v17 + 8;
    }
    v107 = v18;
    if (v105 < 0)
      operator delete(v104[0]);
    v24 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v104, "री");
    NLTransliterationCandidate::NLTransliterationCandidate(v24, (__int128 *)a2, (__int128 *)v104, 0, 0, 1.0);
    v25 = (std::string **)v107;
    if ((unint64_t)v107 >= v108)
    {
      v45 = (v107 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v45 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v46 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
      if (v46 <= v45 + 1)
        v46 = v45 + 1;
      if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v47 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v47 = v46;
      if (v47)
        v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v47);
      else
        v48 = 0;
      v30 = (std::string **)&v48[8 * v45];
      v31 = &v48[8 * v47];
      *v30 = v24;
      v32 = (char *)(v30 + 1);
      v49 = (char *)__p;
      v33 = v107;
      if (v107 == __p)
        goto LABEL_81;
      do
      {
        v50 = (std::string *)*((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v30 = v50;
      }
      while (v33 != v49);
      goto LABEL_80;
    }
LABEL_68:
    *v25 = v24;
    v32 = (char *)(v25 + 1);
    goto LABEL_83;
  }
LABEL_18:
  v9 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(v104, "रु");
  NLTransliterationCandidate::NLTransliterationCandidate(v9, (__int128 *)a2, (__int128 *)v104, 0, 0, 1.0);
  v10 = v107;
  if ((unint64_t)v107 >= v108)
  {
    v12 = (v107 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v13 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
    if (v13 <= v12 + 1)
      v13 = v12 + 1;
    if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v14);
    else
      v15 = 0;
    v19 = (std::string **)&v15[8 * v12];
    v20 = &v15[8 * v14];
    *v19 = v9;
    v11 = (char *)(v19 + 1);
    v22 = (char *)__p;
    v21 = v107;
    if (v107 != __p)
    {
      do
      {
        v23 = (std::string *)*((_QWORD *)v21 - 1);
        v21 -= 8;
        *--v19 = v23;
      }
      while (v21 != v22);
      v21 = (char *)__p;
    }
    __p = v19;
    v107 = v11;
    v108 = (unint64_t)v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *(_QWORD *)v107 = v9;
    v11 = v10 + 8;
  }
  v107 = v11;
  if (v105 < 0)
    operator delete(v104[0]);
  v24 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(v104, "रू");
  NLTransliterationCandidate::NLTransliterationCandidate(v24, (__int128 *)a2, (__int128 *)v104, 0, 0, 1.0);
  v25 = (std::string **)v107;
  if ((unint64_t)v107 < v108)
    goto LABEL_68;
  v26 = (v107 - (_BYTE *)__p) >> 3;
  if ((unint64_t)(v26 + 1) >> 61)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  v27 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
  if (v27 <= v26 + 1)
    v27 = v26 + 1;
  if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
    v28 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v28 = v27;
  if (v28)
    v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v28);
  else
    v29 = 0;
  v30 = (std::string **)&v29[8 * v26];
  v31 = &v29[8 * v28];
  *v30 = v24;
  v32 = (char *)(v30 + 1);
  v34 = (char *)__p;
  v33 = v107;
  if (v107 == __p)
    goto LABEL_81;
  do
  {
    v35 = (std::string *)*((_QWORD *)v33 - 1);
    v33 -= 8;
    *--v30 = v35;
  }
  while (v33 != v34);
LABEL_80:
  v33 = (char *)__p;
LABEL_81:
  __p = v30;
  v107 = v32;
  v108 = (unint64_t)v31;
  if (v33)
    operator delete(v33);
LABEL_83:
  v107 = v32;
  if (v105 < 0)
    operator delete(v104[0]);
  v51 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(v104, "ऋ");
  NLTransliterationCandidate::NLTransliterationCandidate(v51, (__int128 *)a2, (__int128 *)v104, 0, 0, 1.0);
  v52 = v107;
  if ((unint64_t)v107 >= v108)
  {
    v54 = (v107 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v54 + 1) >> 61)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v55 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
    if (v55 <= v54 + 1)
      v55 = v54 + 1;
    if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v56 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v56 = v55;
    if (v56)
      v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v56);
    else
      v57 = 0;
    v58 = (std::string **)&v57[8 * v54];
    v59 = &v57[8 * v56];
    *v58 = v51;
    v53 = (char *)(v58 + 1);
    v61 = (char *)__p;
    v60 = v107;
    if (v107 != __p)
    {
      do
      {
        v62 = (std::string *)*((_QWORD *)v60 - 1);
        v60 -= 8;
        *--v58 = v62;
      }
      while (v60 != v61);
      v60 = (char *)__p;
    }
    __p = v58;
    v107 = v53;
    v108 = (unint64_t)v59;
    if (v60)
      operator delete(v60);
  }
  else
  {
    *(_QWORD *)v107 = v51;
    v53 = v52 + 8;
  }
  v107 = v53;
  if (v105 < 0)
    operator delete(v104[0]);
  v63 = a3[1];
  if (v63 >= a3[2])
  {
    v64 = std::vector<std::vector<NLTransliterationCandidate *>>::__push_back_slow_path<std::vector<NLTransliterationCandidate *> const&>(a3, (uint64_t)&__p);
  }
  else
  {
    std::vector<std::vector<NLTransliterationCandidate *>>::__construct_one_at_end[abi:ne180100]<std::vector<NLTransliterationCandidate *> const&>((uint64_t)a3, (uint64_t)&__p);
    v64 = v63 + 24;
  }
  a3[1] = v64;
  if (__p)
  {
    v107 = (char *)__p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 23);
  result = 1;
  if ((v5 & 0x80) == 0)
  {
LABEL_109:
    v65 = (_WORD *)a2;
    if (v5 != 2)
      return result;
    goto LABEL_113;
  }
LABEL_111:
  if (*(_QWORD *)(a2 + 8) != 2)
    return result;
  v65 = *(_WORD **)a2;
LABEL_113:
  if (*v65 == 28015)
  {
    __p = 0;
    v107 = 0;
    v108 = 0;
    v66 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v104, "ओम्");
    NLTransliterationCandidate::NLTransliterationCandidate(v66, (__int128 *)a2, (__int128 *)v104, 0, 0, 2.0);
    v67 = v107;
    if ((unint64_t)v107 >= v108)
    {
      v69 = (v107 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v69 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v70 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
      if (v70 <= v69 + 1)
        v70 = v69 + 1;
      if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v71 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v71 = v70;
      if (v71)
        v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v71);
      else
        v72 = 0;
      v73 = (std::string **)&v72[8 * v69];
      v74 = &v72[8 * v71];
      *v73 = v66;
      v68 = (char *)(v73 + 1);
      v76 = (char *)__p;
      v75 = v107;
      if (v107 != __p)
      {
        do
        {
          v77 = (std::string *)*((_QWORD *)v75 - 1);
          v75 -= 8;
          *--v73 = v77;
        }
        while (v75 != v76);
        v75 = (char *)__p;
      }
      __p = v73;
      v107 = v68;
      v108 = (unint64_t)v74;
      if (v75)
        operator delete(v75);
    }
    else
    {
      *(_QWORD *)v107 = v66;
      v68 = v67 + 8;
    }
    v107 = v68;
    if (v105 < 0)
      operator delete(v104[0]);
    v78 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v104, "ओं");
    NLTransliterationCandidate::NLTransliterationCandidate(v78, (__int128 *)a2, (__int128 *)v104, 0, 0, 1.5);
    v79 = v107;
    if ((unint64_t)v107 >= v108)
    {
      v81 = (v107 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v81 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v82 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
      if (v82 <= v81 + 1)
        v82 = v81 + 1;
      if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v83 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v83 = v82;
      if (v83)
        v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v83);
      else
        v84 = 0;
      v85 = (std::string **)&v84[8 * v81];
      v86 = &v84[8 * v83];
      *v85 = v78;
      v80 = (char *)(v85 + 1);
      v88 = (char *)__p;
      v87 = v107;
      if (v107 != __p)
      {
        do
        {
          v89 = (std::string *)*((_QWORD *)v87 - 1);
          v87 -= 8;
          *--v85 = v89;
        }
        while (v87 != v88);
        v87 = (char *)__p;
      }
      __p = v85;
      v107 = v80;
      v108 = (unint64_t)v86;
      if (v87)
        operator delete(v87);
    }
    else
    {
      *(_QWORD *)v107 = v78;
      v80 = v79 + 8;
    }
    v107 = v80;
    if (v105 < 0)
      operator delete(v104[0]);
    v90 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v104, "ॐ");
    NLTransliterationCandidate::NLTransliterationCandidate(v90, (__int128 *)a2, (__int128 *)v104, 0, 0, 1.0);
    v91 = v107;
    if ((unint64_t)v107 >= v108)
    {
      v93 = (v107 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v93 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v94 = (uint64_t)(v108 - (_QWORD)__p) >> 2;
      if (v94 <= v93 + 1)
        v94 = v93 + 1;
      if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v95 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v95 = v94;
      if (v95)
        v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v108, v95);
      else
        v96 = 0;
      v97 = (std::string **)&v96[8 * v93];
      v98 = &v96[8 * v95];
      *v97 = v90;
      v92 = (char *)(v97 + 1);
      v100 = (char *)__p;
      v99 = v107;
      if (v107 != __p)
      {
        do
        {
          v101 = (std::string *)*((_QWORD *)v99 - 1);
          v99 -= 8;
          *--v97 = v101;
        }
        while (v99 != v100);
        v99 = (char *)__p;
      }
      __p = v97;
      v107 = v92;
      v108 = (unint64_t)v98;
      if (v99)
        operator delete(v99);
    }
    else
    {
      *(_QWORD *)v107 = v90;
      v92 = v91 + 8;
    }
    v107 = v92;
    if (v105 < 0)
      operator delete(v104[0]);
    v102 = a3[1];
    if (v102 >= a3[2])
    {
      v103 = std::vector<std::vector<NLTransliterationCandidate *>>::__push_back_slow_path<std::vector<NLTransliterationCandidate *> const&>(a3, (uint64_t)&__p);
    }
    else
    {
      std::vector<std::vector<NLTransliterationCandidate *>>::__construct_one_at_end[abi:ne180100]<std::vector<NLTransliterationCandidate *> const&>((uint64_t)a3, (uint64_t)&__p);
      v103 = v102 + 24;
    }
    a3[1] = v103;
    if (__p)
    {
      v107 = (char *)__p;
      operator delete(__p);
    }
    return 1;
  }
  return result;
}

void sub_1A18AFF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  MEMORY[0x1A1B0E068](v16, 0x1012C40B0087DDBLL);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL NLHindiTransliterator::shouldHandleNasalizationException(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  _WORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  void *v17;
  unsigned __int16 *v18;
  _BOOL8 result;
  void *v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  uint64_t v25;
  void *v26;
  _WORD *v27;
  size_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v41;
  char *v42;

  v5 = *(_BYTE *)(a2 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v5 >= 0)
    v7 = a2;
  else
    v7 = *(_QWORD *)a2;
  v8 = (char *)(v7 + v6);
  if (v6 <= 1)
  {
LABEL_48:
    if (v6 >= 1)
    {
LABEL_49:
      v28 = v6;
      v29 = (void *)v7;
      do
      {
        v30 = (char *)memchr(v29, 110, v28);
        if (!v30)
          break;
        if (*v30 == 110)
        {
          if (v30 == v8 || &v30[-v7] == (char *)-1)
            return 0;
          if (v6 >= 3)
          {
            v31 = v6;
            v32 = (void *)v7;
            do
            {
              v33 = (char *)memchr(v32, 110, v31 - 2);
              if (!v33)
                break;
              if (*(_WORD *)v33 == 26734 && v33[2] == 101)
              {
                if (v33 != v8 && &v33[-v7] != (char *)-1)
                  return 0;
                break;
              }
              v32 = v33 + 1;
              v31 = v8 - (_BYTE *)v32;
            }
            while (v8 - (_BYTE *)v32 >= 3);
            v37 = v6;
            v38 = (void *)v7;
            do
            {
              v39 = (char *)memchr(v38, 110, v37 - 2);
              if (!v39)
                break;
              if (*(_WORD *)v39 == 26734 && v39[2] == 111)
              {
                if (v39 != v8 && &v39[-v7] != (char *)-1)
                  return 0;
                break;
              }
              v38 = v39 + 1;
              v37 = v8 - (_BYTE *)v38;
            }
            while (v8 - (_BYTE *)v38 >= 3);
            v41 = (void *)v7;
            do
            {
              v42 = (char *)memchr(v41, 110, v6 - 2);
              if (!v42)
                break;
              if (*(_WORD *)v42 == 24942 && v42[2] == 104)
              {
                if (v42 != v8 && &v42[-v7] != (char *)-1)
                  return 0;
                break;
              }
              v41 = v42 + 1;
              v6 = v8 - (_BYTE *)v41;
            }
            while (v8 - (_BYTE *)v41 >= 3);
          }
          return std::string::find[abi:ne180100]((uint64_t *)a2, "ain", 0) == -1
              && std::string::find[abi:ne180100]((uint64_t *)a2, "nu", 0) == -1
              && (std::string::find[abi:ne180100]((uint64_t *)a3, "ं", 0) == -1
               || std::string::find[abi:ne180100]((uint64_t *)a3, "ँ", 0) == -1
               || std::string::find[abi:ne180100]((uint64_t *)a3, "न", 0) == -1
               || std::string::find[abi:ne180100]((uint64_t *)a3, "ण", 0) == -1);
        }
        v29 = v30 + 1;
        v28 = v8 - (_BYTE *)v29;
      }
      while (v8 - (_BYTE *)v29 >= 1);
    }
    return 0;
  }
  else
  {
    v9 = v6;
    v10 = (void *)v7;
    while (1)
    {
      v11 = memchr(v10, 110, v9 - 1);
      if (!v11)
        goto LABEL_44;
      if (*v11 == 24942)
        break;
      v10 = (char *)v11 + 1;
      v9 = v8 - (_BYTE *)v10;
      if (v8 - (_BYTE *)v10 < 2)
        goto LABEL_44;
    }
    if (v11 == (_WORD *)v8 || (_WORD *)((char *)v11 - v7) == (_WORD *)-1)
    {
LABEL_44:
      v25 = v6;
      v26 = (void *)v7;
      while (1)
      {
        v27 = memchr(v26, 110, v25 - 1);
        if (!v27)
          goto LABEL_48;
        if (*v27 == 24942)
        {
          if ((_WORD *)((char *)v27 - v7) != (_WORD *)-1 && v27 != (_WORD *)v8 || v6 < 1)
            return 0;
          goto LABEL_49;
        }
        v26 = (char *)v27 + 1;
        v25 = v8 - (_BYTE *)v26;
        if (v8 - (_BYTE *)v26 <= 1)
          goto LABEL_48;
      }
    }
    v12 = *(_BYTE *)(a3 + 23);
    if (v12 >= 0)
      v13 = *(unsigned __int8 *)(a3 + 23);
    else
      v13 = *(_QWORD *)(a3 + 8);
    if (v12 >= 0)
      v14 = a3;
    else
      v14 = *(_QWORD *)a3;
    if (v13 >= 3)
    {
      v15 = (unsigned __int16 *)(v14 + v13);
      v16 = v13;
      v17 = (void *)v14;
      do
      {
        v18 = (unsigned __int16 *)memchr(v17, -32, v16 - 2);
        if (!v18)
          break;
        if (*v18 == 42208 && *((unsigned __int8 *)v18 + 2) == 168)
        {
          if (v18 != v15 && (unsigned __int16 *)((char *)v18 - v14) != (unsigned __int16 *)-1)
            goto LABEL_44;
          break;
        }
        v17 = (char *)v18 + 1;
        v16 = (char *)v15 - (_BYTE *)v17;
      }
      while ((char *)v15 - (_BYTE *)v17 >= 3);
      v21 = (void *)v14;
      while (1)
      {
        v22 = (unsigned __int16 *)memchr(v21, -32, v13 - 2);
        if (!v22)
          break;
        v23 = v22;
        if (*v22 == 42208 && *((unsigned __int8 *)v22 + 2) == 163)
        {
          result = 1;
          if (v23 == v15 || (unsigned __int16 *)((char *)v23 - v14) == (unsigned __int16 *)-1)
            return result;
          goto LABEL_44;
        }
        v21 = (char *)v22 + 1;
        v13 = (char *)v15 - (_BYTE *)v21;
        result = 1;
        if ((char *)v15 - (_BYTE *)v21 < 3)
          return result;
      }
    }
    return 1;
  }
}

_QWORD *NLHindiTransliterator::getHalantCharacter@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "्");
}

_QWORD *NLHindiTransliterator::getFirstLetter@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "अ");
}

_QWORD *NLHindiTransliterator::getLastLetter@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "ह");
}

_QWORD *NLHindiTransliterator::getAnyConsonant@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "ब");
}

BOOL NLHindiTransliterator::isSpecialCharSeq(int a1, int a2, char *__s, int a4)
{
  uint64_t v5;
  size_t v6;
  int v7;

  if (a2 != 2)
    return 0;
  v5 = a4;
  v6 = a4 + 1;
  if (strlen(__s) <= v6 || __s[v5] != 114)
    return 0;
  v7 = __s[v6];
  return v7 == 105 || v7 == 117;
}

uint64_t NLHindiTransliterator::shouldHandleExaggeration(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *__p[2];
  _BYTE v7[25];
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = (char *)a2;
  else
    v3 = *(char **)a2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  *(_OWORD *)__p = 0u;
  memset(v7, 0, sizeof(v7));
  v4 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v3, &v3[v2], (uint64_t)__p, a1 + 440, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1A18B05A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NLHindiTransliterator::~NLHindiTransliterator(std::locale *this)
{
  std::locale *v2;
  std::locale *v3;

  this->__locale_ = (std::locale::__imp *)&off_1E45CD5B8;
  v2 = this + 28;
  v3 = this + 63;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[68]);
  std::locale::~locale(v3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[60]);
  std::locale::~locale(this + 55);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[52]);
  std::locale::~locale(this + 47);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[44]);
  std::locale::~locale(this + 39);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[36]);
  std::locale::~locale(this + 31);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::locale::~locale(this + 23);
  NLGenericTransliterator::~NLGenericTransliterator((NLGenericTransliterator *)this);
}

{
  std::locale *v2;
  std::locale *v3;

  this->__locale_ = (std::locale::__imp *)&off_1E45CD5B8;
  v2 = this + 28;
  v3 = this + 63;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[68]);
  std::locale::~locale(v3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[60]);
  std::locale::~locale(this + 55);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[52]);
  std::locale::~locale(this + 47);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[44]);
  std::locale::~locale(this + 39);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[36]);
  std::locale::~locale(this + 31);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::locale::~locale(this + 23);
  NLGenericTransliterator::~NLGenericTransliterator((NLGenericTransliterator *)this);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(char *__f, char *__l, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5;
  int v9;
  uint64_t result;
  std::match_results<const char *> __p;

  v5 = a5;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, __f, __l, &__p, a5 | 0x1040u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)a3, (uint64_t)__f, (std::sub_match<std::__wrap_iter<const char *>> *)__l, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (!v9)
    return 0;
  if (!*(_BYTE *)(a3 + 88))
    return 1;
  result = 0;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  return result;
}

void sub_1A18B0810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NLArabicTransliterator::NLArabicTransliterator(NLArabicTransliterator *this, const __CFDictionary *a2)
{
  char *v4;
  NLAbstractTransMappings *v5;
  __CFDictionary *Mutable;
  NLArabicWordLanguageModeler *v7;
  _QWORD *v8;
  NLAbstractDictionaryLookup *v9;
  NLAbstractDictionaryLookup *v10;
  _QWORD *v11;
  uint64_t v12[5];

  *((_OWORD *)this + 5) = 0u;
  v4 = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = xmmword_1A18D4870;
  *((_DWORD *)this + 34) = 2;
  *((_QWORD *)this + 18) = 0xC03E000000000000;
  *((_QWORD *)this + 19) = 0x3E800000005;
  *((_DWORD *)this + 40) = 3;
  *((_QWORD *)this + 21) = 0x3FF3333333333333;
  *(_QWORD *)this = &off_1E45CD7B0;
  *((_QWORD *)this + 22) = 0x1F40000000ALL;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 184), "[\",,;.\"'?!:{}<>*\\-]",
    0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 248), "([bcdfghjklmnpqrstvwxyzi])([ywv])(a)$", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)this + 13, "(tr|dr)(a)$", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 376), "(r)([iu])", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 440), "aa[a]+", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)this + 21, "([bcdfghjklmnpqrstvwxyz]|^)(eh|ehe)", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 568), "(an|in|un)", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 632), "ah", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)this + 29, "(aw|ow)", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 760), "(el|eh)", 0);
  v5 = (NLAbstractTransMappings *)operator new();
  NLAbstractTransMappings::NLAbstractTransMappings(v5, a2);
  *((_QWORD *)this + 1) = v5;
  (*(void (**)(uint64_t *__return_ptr, NLArabicTransliterator *))(*(_QWORD *)this + 120))(v12, this);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)v4, v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
  Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
  CFDictionarySetValue(Mutable, CFSTR("useLanguageModel"), (const void *)*MEMORY[0x1E0C9AE40]);
  v7 = (NLArabicWordLanguageModeler *)operator new();
  NLArabicWordLanguageModeler::NLArabicWordLanguageModeler(v7, Mutable);
  *((_QWORD *)this + 2) = v7;
  CFRelease(Mutable);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  v8 = (_QWORD *)operator new();
  *v8 = &unk_1E45CE0A0;
  *((_QWORD *)this + 6) = v8;
  v9 = (NLAbstractDictionaryLookup *)operator new();
  NLAbstractDictionaryLookup::NLAbstractDictionaryLookup(v9);
  *((_QWORD *)this + 7) = v9;
  v10 = (NLAbstractDictionaryLookup *)operator new();
  NLAbstractDictionaryLookup::NLAbstractDictionaryLookup(v10);
  *((_QWORD *)this + 8) = v10;
  v11 = (_QWORD *)operator new();
  *v11 = &unk_1E45CE388;
  *((_QWORD *)this + 9) = v11;
}

void sub_1A18B0B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, std::locale *a10, std::locale *a11, std::locale *a12, std::locale *a13)
{
  NLGenericTransliterator *v13;
  std::locale *v14;
  uint64_t v15;
  std::locale *v16;
  std::locale *v17;
  std::locale *v18;
  std::locale *v19;
  std::locale *v20;

  MEMORY[0x1A1B0E068](v15, 0xE1C40D30581F4);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v13 + 800);
  std::locale::~locale(v14);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v13 + 736);
  std::locale::~locale(v20);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v13 + 672);
  std::locale::~locale(v19);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v13 + 608);
  std::locale::~locale(v18);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v13 + 544);
  std::locale::~locale(v17);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v13 + 480);
  std::locale::~locale(v16);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v13 + 416);
  std::locale::~locale(a10);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v13 + 352);
  std::locale::~locale(a11);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v13 + 288);
  std::locale::~locale(a12);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v13 + 224);
  std::locale::~locale(a13);
  NLGenericTransliterator::~NLGenericTransliterator(v13);
  _Unwind_Resume(a1);
}

_QWORD *NLArabicTransliterator::getTargetDigit@<X0>(unsigned int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  if (a1 > 9)
    v3 = "";
  else
    v3 = off_1E45D02E8[a1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void NLArabicTransliterator::addDynamicMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33[2];
  char v34;
  std::string __p[2];
  std::vector<std::ssub_match> v36[2];
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  std::match_results<const char *> v45;

  v2 = a2;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  memset(v36, 0, 41);
  v4 = a1 + 568;
  memset(&v45.__prefix_, 0, 17);
  memset(&v45.__suffix_, 0, 17);
  v45.__ready_ = 0;
  v45.__position_start_ = 0;
  memset(&v45, 0, 32);
  v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = *(_QWORD *)(a2 + 8);
  if ((v5 & 0x80u) != 0)
  {
    a2 = *(_QWORD *)a2;
    v5 = v6;
  }
  *(std::pair<const char *, const char *> *)((char *)&v45.__unmatched_.std::pair<const char *, const char *> + 1) = 0uLL;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v4, (char *)a2, (char *)(a2 + v5), &v45, 0);
  v8 = *(unsigned __int8 *)(v2 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = v2;
  else
    v9 = *(_QWORD *)v2;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(v2 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v36, v9, (std::sub_match<std::__wrap_iter<const char *>> *)(v9 + v8), (uint64_t *)&v45, 0);
  if (v45.__matches_.__begin_)
  {
    v45.__matches_.__end_ = v45.__matches_.__begin_;
    operator delete(v45.__matches_.__begin_);
  }
  if (v7)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    NLExtendedString::NLExtendedString((std::string *)&v45, (__int128 *)__p, 2, 2, 0.1);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v10 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "n");
    (*(void (**)(uint64_t, std::string *, std::match_results<const char *> *))(*(_QWORD *)v10 + 16))(v10, __p, &v45);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(v33, "");
    NLExtendedString::NLExtendedString(__p, (__int128 *)v33, 3, 2, 0.1);
    if (v34 < 0)
      operator delete(v33[0]);
    v11 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v33, "n");
    (*(void (**)(uint64_t, void **, std::string *))(*(_QWORD *)v11 + 16))(v11, v33, __p);
    if (v34 < 0)
      operator delete(v33[0]);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__matches_.__end_cap_.__value_) < 0)
      operator delete(v45.__matches_.__begin_);
  }
  memset(&v45.__prefix_, 0, 17);
  memset(&v45.__suffix_, 0, 17);
  v45.__ready_ = 0;
  v45.__position_start_ = 0;
  memset(&v45, 0, 41);
  v12 = *(unsigned __int8 *)(v2 + 23);
  if ((v12 & 0x80u) == 0)
    v13 = (char *)v2;
  else
    v13 = *(char **)v2;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(v2 + 8);
  v14 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 632, v13, &v13[v12], &v45, 0);
  v15 = *(unsigned __int8 *)(v2 + 23);
  if ((v15 & 0x80u) == 0)
    v16 = v2;
  else
    v16 = *(_QWORD *)v2;
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(v2 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v36, v16, (std::sub_match<std::__wrap_iter<const char *>> *)(v16 + v15), (uint64_t *)&v45, 0);
  if (v45.__matches_.__begin_)
  {
    v45.__matches_.__end_ = v45.__matches_.__begin_;
    operator delete(v45.__matches_.__begin_);
  }
  if (v14)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    NLExtendedString::NLExtendedString((std::string *)&v45, (__int128 *)__p, 2, 2, 0.1);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v17 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "h");
    (*(void (**)(uint64_t, std::string *, std::match_results<const char *> *))(*(_QWORD *)v17 + 16))(v17, __p, &v45);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(v33, "");
    NLExtendedString::NLExtendedString(__p, (__int128 *)v33, 3, 2, 0.1);
    if (v34 < 0)
      operator delete(v33[0]);
    v18 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v33, "h");
    (*(void (**)(uint64_t, void **, std::string *))(*(_QWORD *)v18 + 16))(v18, v33, __p);
    if (v34 < 0)
      operator delete(v33[0]);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__matches_.__end_cap_.__value_) < 0)
      operator delete(v45.__matches_.__begin_);
  }
  memset(&v45.__prefix_, 0, 17);
  memset(&v45.__suffix_, 0, 17);
  v45.__ready_ = 0;
  v45.__position_start_ = 0;
  memset(&v45, 0, 41);
  v19 = *(unsigned __int8 *)(v2 + 23);
  if ((v19 & 0x80u) == 0)
    v20 = (char *)v2;
  else
    v20 = *(char **)v2;
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(v2 + 8);
  v21 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 696, v20, &v20[v19], &v45, 0);
  v22 = *(unsigned __int8 *)(v2 + 23);
  if ((v22 & 0x80u) == 0)
    v23 = v2;
  else
    v23 = *(_QWORD *)v2;
  if ((v22 & 0x80u) != 0)
    v22 = *(_QWORD *)(v2 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v36, v23, (std::sub_match<std::__wrap_iter<const char *>> *)(v23 + v22), (uint64_t *)&v45, 0);
  if (v45.__matches_.__begin_)
  {
    v45.__matches_.__end_ = v45.__matches_.__begin_;
    operator delete(v45.__matches_.__begin_);
  }
  if (v21)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    NLExtendedString::NLExtendedString((std::string *)&v45, (__int128 *)__p, 2, 2, 0.1);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v24 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "w");
    (*(void (**)(uint64_t, std::string *, std::match_results<const char *> *))(*(_QWORD *)v24 + 16))(v24, __p, &v45);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(v33, "");
    NLExtendedString::NLExtendedString(__p, (__int128 *)v33, 3, 2, 0.1);
    if (v34 < 0)
      operator delete(v33[0]);
    v25 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v33, "w");
    (*(void (**)(uint64_t, void **, std::string *))(*(_QWORD *)v25 + 16))(v25, v33, __p);
    if (v34 < 0)
      operator delete(v33[0]);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__matches_.__end_cap_.__value_) < 0)
      operator delete(v45.__matches_.__begin_);
  }
  memset(&v45.__prefix_, 0, 17);
  memset(&v45.__suffix_, 0, 17);
  v45.__ready_ = 0;
  v45.__position_start_ = 0;
  memset(&v45, 0, 41);
  v26 = *(unsigned __int8 *)(v2 + 23);
  if ((v26 & 0x80u) == 0)
    v27 = (char *)v2;
  else
    v27 = *(char **)v2;
  if ((v26 & 0x80u) != 0)
    v26 = *(_QWORD *)(v2 + 8);
  v28 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 760, v27, &v27[v26], &v45, 0);
  v29 = *(unsigned __int8 *)(v2 + 23);
  if ((v29 & 0x80u) == 0)
    v30 = v2;
  else
    v30 = *(_QWORD *)v2;
  if ((v29 & 0x80u) != 0)
    v29 = *(_QWORD *)(v2 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v36, v30, (std::sub_match<std::__wrap_iter<const char *>> *)(v30 + v29), (uint64_t *)&v45, 0);
  if (v45.__matches_.__begin_)
  {
    v45.__matches_.__end_ = v45.__matches_.__begin_;
    operator delete(v45.__matches_.__begin_);
  }
  if (v28)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    NLExtendedString::NLExtendedString((std::string *)&v45, (__int128 *)__p, 3, 2, 0.1);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v31 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "l");
    (*(void (**)(uint64_t, std::string *, std::match_results<const char *> *))(*(_QWORD *)v31 + 16))(v31, __p, &v45);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(v33, "");
    NLExtendedString::NLExtendedString(__p, (__int128 *)v33, 3, 2, 0.1);
    if (v34 < 0)
      operator delete(v33[0]);
    v32 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v33, "h");
    (*(void (**)(uint64_t, void **, std::string *))(*(_QWORD *)v32 + 16))(v32, v33, __p);
    if (v34 < 0)
      operator delete(v33[0]);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__matches_.__end_cap_.__value_) < 0)
      operator delete(v45.__matches_.__begin_);
  }
  if (v36[0].__begin_)
  {
    v36[0].__end_ = v36[0].__begin_;
    operator delete(v36[0].__begin_);
  }
}

void sub_1A18B13C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v26 - 153) < 0)
    operator delete(*(void **)(v26 - 176));
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

BOOL NLArabicTransliterator::isSpecialCharSeq(int a1, int a2, char *__s, int a4)
{
  uint64_t v5;
  size_t v6;
  _BOOL8 result;
  BOOL v8;

  if (a2 != 1)
    return 0;
  v5 = a4;
  v6 = a4 + 1;
  if (strlen(__s) <= v6)
    return 0;
  result = 0;
  switch(((__s[v5] - 97) >> 1) | ((__s[v5] - 97) << 7))
  {
    case 0:
      if ((__s[v6] - 104) >= 0x10u)
        return 0;
      return (0x8041u >> (__s[v6] - 104)) & 1;
    case 2:
      v8 = (__s[v6] & 0xFB) == 104;
      goto LABEL_12;
    case 4:
      if (__s[v6] != 110)
        return 0;
      goto LABEL_7;
    case 7:
      if (__s[v6] != 119)
        return 0;
LABEL_7:
      result = 1;
      break;
    case 10:
      v8 = __s[v6] == 110;
LABEL_12:
      result = v8;
      break;
    default:
      return result;
  }
  return result;
}

void NLArabicTransliterator::addSpecialElements(_QWORD **a1, char *a2, int *a3, unsigned int *a4, unsigned int *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::string __str;
  std::string v16;
  std::string *p_str;

  std::string::basic_string[abi:ne180100]<0>(&__str, a2);
  std::string::basic_string(&v16, &__str, *a3, 2uLL, (std::allocator<char> *)&p_str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  (*(void (**)(std::string *__return_ptr, _QWORD *, std::string *))(*a1[1] + 32))(&__str, a1[1], &v16);
  ((void (*)(_QWORD **, std::string *, _QWORD, _QWORD, char *, uint64_t *))(*a1)[18])(a1, &__str, *a4, *a5, a2, a6);
  v12 = *a6;
  if (a6[1] != *a6)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      NLExtendedString::setJoin(v12 + v13, 1);
      ++v14;
      v12 = *a6;
      v13 += 48;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 4) > v14);
  }
  p_str = &__str;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1A18B16DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t *a22)
{
  a22 = &a10;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void NLArabicTransliterator::~NLArabicTransliterator(std::locale *this)
{
  NLArabicTransliterator::~NLArabicTransliterator(this);
  JUMPOUT(0x1A1B0E068);
}

{
  std::locale *v2;
  std::locale *v3;

  this->__locale_ = (std::locale::__imp *)&off_1E45CD7B0;
  v2 = this + 28;
  v3 = this + 95;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[100]);
  std::locale::~locale(v3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[92]);
  std::locale::~locale(this + 87);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[84]);
  std::locale::~locale(this + 79);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[76]);
  std::locale::~locale(this + 71);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[68]);
  std::locale::~locale(this + 63);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[60]);
  std::locale::~locale(this + 55);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[52]);
  std::locale::~locale(this + 47);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[44]);
  std::locale::~locale(this + 39);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&this[36]);
  std::locale::~locale(this + 31);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::locale::~locale(this + 23);
  NLGenericTransliterator::~NLGenericTransliterator((NLGenericTransliterator *)this);
}

void NLUrduCharLanguageModeler::NLUrduCharLanguageModeler(NLUrduCharLanguageModeler *this, CFDictionaryRef theDict)
{
  uint64_t *v2;
  __CFDictionary *MutableCopy;
  __CFDictionary *v4;
  __CFBundle *BundleWithIdentifier;
  __CFBundle *v6;
  uint64_t v7;

  *((_QWORD *)this + 1) = 0;
  v2 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = &off_1E45CDCD8;
  *((_QWORD *)this + 2) = 0;
  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0D434C8], CFSTR("ur"));
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.NLP"));
  if (v4)
  {
    if (BundleWithIdentifier)
    {
      BundleWithIdentifier = CFBundleCopyResourcesDirectoryURL(BundleWithIdentifier);
      v6 = BundleWithIdentifier;
      if (BundleWithIdentifier)
      {
        CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43478], BundleWithIdentifier);
        *v2 = LMLanguageModelCreate();
        CFRelease(v6);
      }
    }
  }
  if (!*v2)
  {
    v7 = NL::CFLogger::sharedInstance(BundleWithIdentifier);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v7 + 16))(v7, 3, "Could not locate Urdu character language model");
  }
  if (v4)
    CFRelease(v4);
}

void sub_1A18B1958(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler *v1;

  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

double NLUrduCharLanguageModeler::logProbability(uint64_t a1)
{
  double result;

  if (!*(_QWORD *)(a1 + 8))
    return -INFINITY;
  LMLanguageModelJointProbability();
  return result;
}

double NLUrduCharLanguageModeler::logProbability(uint64_t a1, uint64_t *a2)
{
  double v3;
  double v4;
  void *__p[3];

  stringToUTF32Characters(a2, (int **)__p);
  if (*(_QWORD *)(a1 + 8))
  {
    LMLanguageModelJointProbability();
    v4 = v3;
  }
  else
  {
    v4 = -INFINITY;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1A18B1A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NLUrduCharLanguageModeler::~NLUrduCharLanguageModeler(NLUrduCharLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);
  JUMPOUT(0x1A1B0E068);
}

_QWORD *NL::NumericConverter::locale@<X0>(NL::NumericConverter *this@<X0>, _QWORD *a2@<X8>)
{
  const __CFLocale *v3;
  const __CFString *Value;

  v3 = *(const __CFLocale **)(*(_QWORD *)this + 8);
  if (!v3)
    return std::string::basic_string[abi:ne180100]<0>(a2, "en");
  Value = (const __CFString *)CFLocaleGetValue(v3, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  return getUTF8StringFromCFString(Value, a2);
}

void NL::NumericConverter::numericValueForTypeWithValues(NL::ParserContext **this@<X0>, const __CFString *a2@<X1>, CFDictionaryRef theDict@<X2>, _QWORD *a4@<X8>)
{
  const __CFString *v8;
  const __CFString *Value;
  const __CFString *v10;
  CFMutableStringRef MutableCopy;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  const __CFString *v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  CFTypeRef cf;
  CFTypeRef v19;
  void *keys[2];
  char v21;
  uint64_t v22;
  CFRange v23;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a2 || !theDict)
  {
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  v19 = 0;
  if (CFDictionaryContainsKey(theDict, CFSTR("DIGITS")))
  {
    v8 = CFSTR("DIGITS");
  }
  else if (CFDictionaryContainsKey(theDict, CFSTR("NUMBERS")))
  {
    if (NL::ParserContext::languageIsCJ(*this))
    {
      Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("SPELLED"));
      v10 = copyTranslatedRomanNumberFromChineseNumberString(Value);
      v19 = v10;
      if (v10)
        goto LABEL_8;
      goto LABEL_6;
    }
    v8 = CFSTR("NUMBERS");
  }
  else
  {
    if (!CFDictionaryContainsKey(theDict, CFSTR("DECIMAL")))
    {
      v10 = 0;
      goto LABEL_8;
    }
    v8 = CFSTR("DECIMAL");
  }
  Value = (const __CFString *)CFDictionaryGetValue(theDict, v8);
  v10 = 0;
LABEL_6:
  if (Value)
  {
    v10 = (const __CFString *)CFRetain(Value);
    v19 = v10;
  }
LABEL_8:
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
  cf = MutableCopy;
  if (MutableCopy)
  {
    v23.length = CFStringGetLength(a2);
    v23.location = 0;
    CFStringFindAndReplace(MutableCopy, CFSTR("Value"), CFSTR("Unit"), v23, 0);
    if (!CFDictionaryContainsKey(theDict, MutableCopy))
      goto LABEL_19;
    v12 = (const __CFDictionary *)CFDictionaryGetValue(theDict, MutableCopy);
    v13 = v12;
    if (!v12)
    {
      *a4 = 0;
      a4[1] = 0;
LABEL_30:
      if (cf)
        CFRelease(cf);
      goto LABEL_32;
    }
    if (CFDictionaryGetCount(v12) == 1)
    {
      keys[0] = 0;
      CFDictionaryGetKeysAndValues(v13, (const void **)keys, 0);
      v14 = (const __CFString *)keys[0];
    }
    else
    {
LABEL_19:
      v14 = 0;
    }
    v15 = 0;
    while (!CFStringHasPrefix(a2, NL::NumericConverter::numericValueForTypeWithValues(__CFString const*,__CFDictionary const*)const::intTypes[v15]))
    {
      if (++v15 == 5)
      {
        getUTF8StringFromCFString(v14, keys);
        getUTF8StringFromCFString(v10, __p);
        NL::NumericConverter::numericDoubleForType((NL::NumericConverter *)this, (uint64_t)keys, a4);
        goto LABEL_25;
      }
    }
    getUTF8StringFromCFString(v14, keys);
    getUTF8StringFromCFString(v10, __p);
    NL::NumericConverter::numericIntForType((uint64_t)__p, a4);
LABEL_25:
    if (v17 < 0)
      operator delete(__p[0]);
    if (v21 < 0)
      operator delete(keys[0]);
    goto LABEL_30;
  }
  *a4 = 0;
  a4[1] = 0;
LABEL_32:
  if (v19)
    CFRelease(v19);
}

void sub_1A18B1D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, const void *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  nlp::CFScopedPtr<__CFString *>::reset(&a16, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a17, 0);
  _Unwind_Resume(a1);
}

void NL::NumericConverter::numericIntForType(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  std::string::size_type size;
  std::string *p_str;
  unsigned __int8 *v5;
  char *v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  int v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  std::string __str;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __str = *(std::string *)a1;
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  v5 = std::remove_if[abi:ne180100]<std::__wrap_iter<char *>,ValidNumChars>((unsigned __int8 *)p_str, (unsigned __int8 *)p_str + size, ", ");
  v6 = (char *)&__str + HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v7 = &__str;
  }
  else
  {
    v6 = (char *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__l.__size_);
    v7 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  std::string::erase(&__str, v5 - (unsigned __int8 *)v7, v6 - (char *)v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = __str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v9 = (std::string *)__str.__r_.__value_.__r.__words[0];
      goto LABEL_17;
    }
  }
  else
  {
    v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
    {
      v9 = &__str;
LABEL_17:
      while ((v9->__r_.__value_.__s.__data_[0] & 0x80000000) == 0
           && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v9->__r_.__value_.__s.__data_[0] + 60) & 0x400) != 0)
      {
        v9 = (std::string *)((char *)v9 + 1);
        if (!--v8)
        {
          v10 = std::stoi(&__str, 0, 10);
          goto LABEL_22;
        }
      }
    }
  }
  v10 = 0;
LABEL_22:
  v11 = operator new(0x28uLL);
  v11[2] = 0;
  *v11 = &unk_1E45CF000;
  v11[1] = 0;
  *((_DWORD *)v11 + 6) = v10;
  *((_DWORD *)v11 + 7) = v10 / 10 + v10;
  *((_DWORD *)v11 + 8) = v10 - v10 / 10;
  v15 = v11 + 3;
  v16 = (std::__shared_weak_count *)v11;
  std::allocate_shared[abi:ne180100]<NL::NumericValue,std::allocator<NL::NumericValue>,std::shared_ptr<NL::NumericInterval<int>> &,void>((uint64_t *)&v15, a2);
  v12 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void NL::NumericConverter::numericDoubleForType(NL::NumericConverter *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int32_t v6;
  uint64_t v7;
  uint64_t v8;
  UChar *v9;
  int v10;
  const char *v11;
  int32_t v12;
  uint64_t v13;
  double v14;
  double v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  double v23;
  void *v24;
  char *v25;
  double *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  char v34;
  UErrorCode pErrorCode[2];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)pErrorCode = 0;
  MEMORY[0x1E0C80A78]();
  v9 = (UChar *)((char *)&v32 - v8);
  v10 = *(char *)(v7 + 23);
  if (v10 >= 0)
    v11 = (const char *)v7;
  else
    v11 = *(const char **)v7;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v7 + 23);
  else
    v12 = *(_DWORD *)(v7 + 8);
  u_strFromUTF8(v9, v6, (int32_t *)pErrorCode, v11, v12, &pErrorCode[1]);
  v9[pErrorCode[0]] = 0;
  NL::NumericConverter::locale(a1, &v32);
  v13 = unum_open();
  if (v34 < 0)
    operator delete(v32);
  if (pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (v13)
      unum_close();
    goto LABEL_13;
  }
  unum_parseDouble();
  v15 = v14;
  unum_close();
  if (pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_13:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v16 = *(_BYTE *)(a2 + 23);
  if (v16 >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  if (v16 >= 0)
    v18 = a2;
  else
    v18 = *(_QWORD *)a2;
  if (v17 >= 4)
  {
    v19 = (char *)(v18 + v17);
    v20 = v17;
    v21 = (void *)v18;
    do
    {
      v22 = (char *)memchr(v21, 70, v20 - 3);
      if (!v22)
        break;
      if (*(_DWORD *)v22 == 1952802118)
      {
        if (v22 != v19 && &v22[-v18] != (char *)-1)
        {
          v23 = 0.304800004;
          goto LABEL_45;
        }
        break;
      }
      v21 = v22 + 1;
      v20 = v19 - (_BYTE *)v21;
    }
    while (v19 - (_BYTE *)v21 >= 4);
    if (v17 >= 6)
    {
      v24 = (void *)v18;
      do
      {
        v25 = (char *)memchr(v24, 73, v17 - 5);
        if (!v25)
          break;
        if (*(_DWORD *)v25 == 1751346761 && *((_WORD *)v25 + 2) == 29541)
        {
          if (v25 != v19 && &v25[-v18] != (char *)-1)
          {
            v23 = 0.0253999997;
            goto LABEL_45;
          }
          break;
        }
        v24 = v25 + 1;
        v17 = v19 - (_BYTE *)v24;
      }
      while (v19 - (_BYTE *)v24 >= 6);
    }
  }
  if (std::string::find[abi:ne180100]((uint64_t *)a2, "Meters", 0) == -1)
  {
    if (std::string::find[abi:ne180100]((uint64_t *)a2, "Centimeters", 0) == -1)
    {
      if (std::string::find[abi:ne180100]((uint64_t *)a2, "Seconds", 0) != -1)
        goto LABEL_46;
      if (std::string::find[abi:ne180100]((uint64_t *)a2, "Minutes", 0) == -1)
      {
        if (std::string::find[abi:ne180100]((uint64_t *)a2, "Hours", 0) != -1)
        {
          v23 = 3600.0;
          goto LABEL_45;
        }
        if (std::string::find[abi:ne180100]((uint64_t *)a2, "Bytes", 0) != -1)
          goto LABEL_46;
        if (std::string::find[abi:ne180100]((uint64_t *)a2, "Kilobytes", 0) == -1)
        {
          if (std::string::find[abi:ne180100]((uint64_t *)a2, "Megabytes", 0) == -1)
          {
            if (std::string::find[abi:ne180100]((uint64_t *)a2, "Gigabytes", 0) != -1)
              v15 = v15 * 1073741820.0;
            goto LABEL_46;
          }
          *(double *)&v31 = 1048576.0;
        }
        else
        {
          *(double *)&v31 = 1024.0;
        }
      }
      else
      {
        *(double *)&v31 = 60.0;
      }
      v23 = *(double *)&v31;
    }
    else
    {
      v23 = 0.00999999978;
    }
LABEL_45:
    v15 = v15 * v23;
  }
LABEL_46:
  v27 = (double *)operator new(0x30uLL);
  *(_QWORD *)v27 = &unk_1E45CEFC8;
  v27[1] = 0.0;
  v27[3] = v15;
  v27[2] = 0.0;
  v27[4] = v15 + v15 / 10.0;
  v27[5] = v15 - v15 / 10.0;
  v32 = v27 + 3;
  v33 = (std::__shared_weak_count *)v27;
  std::allocate_shared[abi:ne180100]<NL::NumericValue,std::allocator<NL::NumericValue>,std::shared_ptr<NL::NumericInterval<double>> &,void>((uint64_t *)&v32, a3);
  v28 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1A18B2468(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::remove_if[abi:ne180100]<std::__wrap_iter<char *>,ValidNumChars>(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  unsigned __int8 *i;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;

  if (result == a2)
    return a2;
  while (1)
  {
    v3 = a3;
    do
    {
      v5 = *v3++;
      v4 = v5;
    }
    while (v5 != *result && v4 != 0);
    if (v4)
      break;
    if (++result == a2)
    {
      result = a2;
      break;
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      v8 = *i;
      v9 = a3;
      do
      {
        v11 = *v9++;
        v10 = v11;
      }
      while (v11 != v8 && v10 != 0);
      if (!v10)
        *result++ = v8;
    }
  }
  return result;
}

void std::__shared_ptr_emplace<NL::NumericInterval<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CF000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::NumericInterval<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CF000;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

_QWORD *std::allocate_shared[abi:ne180100]<NL::NumericValue,std::allocator<NL::NumericValue>,std::shared_ptr<NL::NumericInterval<int>> &,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x38uLL);
  result = std::__shared_ptr_emplace<NL::NumericValue>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<NL::NumericInterval<int>> &,std::allocator<NL::NumericValue>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1A18B25A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<NL::NumericValue>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<NL::NumericInterval<int>> &,std::allocator<NL::NumericValue>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E45CEE08;
  a1[1] = 0;
  std::allocator<NL::NumericValue>::construct[abi:ne180100]<NL::NumericValue,std::shared_ptr<NL::NumericInterval<int>> &>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_1A18B2608(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NL::NumericValue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEE08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::NumericValue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEE08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__shared_ptr_emplace<NL::NumericValue>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v1);
}

void std::allocator<NL::NumericValue>::construct[abi:ne180100]<NL::NumericValue,std::shared_ptr<NL::NumericInterval<int>> &>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a2 = v3;
    a2[1] = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    a2[2] = 0;
    a2[3] = 0;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a2 = v3;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 0;
  }
}

void std::__shared_ptr_emplace<NL::NumericInterval<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::NumericInterval<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

_QWORD *std::allocate_shared[abi:ne180100]<NL::NumericValue,std::allocator<NL::NumericValue>,std::shared_ptr<NL::NumericInterval<double>> &,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x38uLL);
  result = std::__shared_ptr_emplace<NL::NumericValue>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<NL::NumericInterval<double>> &,std::allocator<NL::NumericValue>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1A18B27AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<NL::NumericValue>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<NL::NumericInterval<double>> &,std::allocator<NL::NumericValue>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E45CEE08;
  a1[1] = 0;
  std::allocator<NL::NumericValue>::construct[abi:ne180100]<NL::NumericValue,std::shared_ptr<NL::NumericInterval<double>> &>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_1A18B280C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<NL::NumericValue>::construct[abi:ne180100]<NL::NumericValue,std::shared_ptr<NL::NumericInterval<double>> &>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a2 = 0;
    a2[1] = 0;
    a2[2] = v3;
    a2[3] = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = v3;
    a2[3] = 0;
  }
}

void SearchParseCandidate::~SearchParseCandidate(const void **this)
{
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 5, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 4, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 3, 0);
  nlp::CFScopedPtr<__CFArray const*>::reset(this + 2, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(this + 1, 0);
}

void SearchParseCandidate::setDescription(const void **this, const __CFString *a2)
{
  const void **v3;
  CFStringRef Copy;

  v3 = this + 1;
  nlp::CFScopedPtr<__CFString const*>::reset(this + 1, 0);
  if (a2)
  {
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    nlp::CFScopedPtr<__CFString const*>::reset(v3, Copy);
  }
}

void SearchParseCandidate::setRankingTerms(const void **this, const __CFDictionary *a2)
{
  const void **v3;
  CFDictionaryRef Copy;

  v3 = this + 3;
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 3, 0);
  if (a2)
  {
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    nlp::CFScopedPtr<__CFDictionary const*>::reset(v3, Copy);
  }
}

void SearchParseCandidate::setRankingCategories(const void **this, const __CFDictionary *a2)
{
  const void **v3;
  CFDictionaryRef Copy;

  v3 = this + 4;
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 4, 0);
  if (a2)
  {
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    nlp::CFScopedPtr<__CFDictionary const*>::reset(v3, Copy);
  }
}

void SearchParseCandidate::setResultModifier(const void **this, const __CFDictionary *a2)
{
  const void **v3;
  CFDictionaryRef Copy;

  v3 = this + 5;
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 5, 0);
  if (a2)
  {
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    nlp::CFScopedPtr<__CFDictionary const*>::reset(v3, Copy);
  }
}

void SearchParseCandidate::setAttributedInput(const void **this, const __CFArray *a2)
{
  const void **v3;
  CFArrayRef Copy;

  v3 = this + 2;
  nlp::CFScopedPtr<__CFArray const*>::reset(this + 2, 0);
  if (a2)
  {
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    nlp::CFScopedPtr<__CFArray const*>::reset(v3, Copy);
  }
}

void SearchParser::SearchParser(SearchParser *this, const __CFDictionary *a2)
{
  *(_OWORD *)((char *)this + 108) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 31) = 1;
  *((_WORD *)this + 64) = 1;
  SearchParser::init((NL::ParserResources **)this, a2);
}

void sub_1A18B2B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v10 + 112), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v10 + 104), 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v10 + 88);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v10 + 72);
  std::unique_ptr<NL::ParseBuilder>::reset[abi:ne180100]((NL::ParseBuilder **)(v10 + 64), 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v10 + 48);
  std::unique_ptr<NL::ParserResources>::reset[abi:ne180100]((NL::ParserResources **)(v10 + 40), 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v10 + 24);
  a10 = (void **)v10;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void SearchParser::init(NL::ParserResources **this, const __CFDictionary *a2)
{
  NL::ParserResources *v4;
  const __CFDate ***v5;
  const void ***v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  const void **v10;
  const __CFDate **v11;
  const __CFDate **v12;
  NL::AssetResource *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  NL::ParseBuilder *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NL::ParserResources *v31;
  std::__shared_weak_count *v32;
  NL::ParserResources *v33;
  std::__shared_weak_count *v34;
  CFTypeRef cf;
  CFTypeRef v36;
  __int128 v37;

  v4 = (NL::ParserResources *)operator new();
  NL::ParserResources::ParserResources(v4, a2);
  v5 = (const __CFDate ***)(this + 5);
  std::unique_ptr<NL::ParserResources>::reset[abi:ne180100](this + 5, v4);
  _ZNSt3__115allocate_sharedB8ne180100IN2NL13ParserContextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v37);
  v6 = (const void ***)(this + 3);
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)(this + 3), &v37);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  NL::ParserContext::setDate(*v6, **v5);
  NL::ParserContext::setUsername(*v6, (const __CFString *)(*v5)[2]);
  v10 = *v6;
  v11 = *v5;
  *((_DWORD *)v10 + 10) = *((_DWORD *)*v5 + 8);
  NL::ParserContext::setCanonicalRegions(v10, v11[3]);
  v12 = *v5;
  *((_BYTE *)*v6 + 66) = *((_BYTE *)*v5 + 49);
  v13 = NL::ParserResources::copyReferenceDatesPath((NL::ParserResources *)v12);
  v36 = v13;
  if (v13)
    NL::ParserContext::setReferenceDatesPath(*v6, v13);
  cf = (CFTypeRef)NL::ParserResources::copyLocale((NL::ParserResources *)*v5);
  NL::ParserContext::setLocale(*v6, (const __CFLocale *)cf);
  std::allocate_shared[abi:ne180100]<NL::QueryTokenizer,std::allocator<NL::QueryTokenizer>,std::shared_ptr<NL::ParserContext> &,void>((uint64_t *)this + 3, &v37);
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)(this + 6), &v37);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = operator new();
  v18 = (NL::ParseBuilder *)v17;
  v19 = (std::__shared_weak_count *)this[4];
  v33 = this[3];
  v34 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v22 = (std::__shared_weak_count *)this[7];
  v31 = this[6];
  v32 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  NL::ParseBuilder::ParseBuilder(v17, &v33, &v31);
  std::unique_ptr<NL::ParseBuilder>::reset[abi:ne180100](this + 8, v18);
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v34;
  if (v34)
  {
    v29 = (unint64_t *)&v34->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (cf)
    CFRelease(cf);
  if (v36)
    CFRelease(v36);
}

void sub_1A18B2E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void SearchParser::~SearchParser(SearchParser *this)
{
  void **v2;

  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 14, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 13, 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::unique_ptr<NL::ParseBuilder>::reset[abi:ne180100]((NL::ParseBuilder **)this + 8, 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::unique_ptr<NL::ParserResources>::reset[abi:ne180100]((NL::ParserResources **)this + 5, 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v2 = (void **)this;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

NL::ParserResources *std::unique_ptr<NL::ParserResources>::reset[abi:ne180100](NL::ParserResources **a1, NL::ParserResources *a2)
{
  NL::ParserResources *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::ParserResources::~ParserResources(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

NL::ParseBuilder *std::unique_ptr<NL::ParseBuilder>::reset[abi:ne180100](NL::ParseBuilder **a1, NL::ParseBuilder *a2)
{
  NL::ParseBuilder *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::ParseBuilder::~ParseBuilder(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

void SearchParser::setLocale(SearchParser *this, const __CFLocale *a2)
{
  NL::AssetResource *v3;
  NL::AssetResource *v4;

  NL::ParserResources::setLocale(*((NL::ParserResources **)this + 5), a2);
  NL::ParserContext::setCanonicalRegions(*((const void ***)this + 3), *(const __CFDictionary **)(*((_QWORD *)this + 5) + 24));
  v3 = NL::ParserResources::copyReferenceDatesPath(*((NL::ParserResources **)this + 5));
  if (v3)
  {
    v4 = v3;
    NL::ParserContext::setReferenceDatesPath(*((const void ***)this + 3), v3);
    CFRelease(v4);
  }
}

void sub_1A18B3024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL SearchParser::hasResources(NL::ParserResources **this)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  NL::ParserResources::getSearchGrammar(this[5], &v6);
  v2 = v6;
  v1 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  return v2 != 0;
}

void SearchParser::addInput(SearchParser *this, CFTypeRef cf)
{
  uint64_t v3;
  const __CFString *v4;
  const __CFString *v5;

  v3 = *((_QWORD *)this + 13);
  if (v3)
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@%@"), v3, cf);
  else
    v4 = (const __CFString *)CFRetain(cf);
  v5 = v4;
  SearchParser::setInput(this, v4);
  if (v5)
    CFRelease(v5);
}

void sub_1A18B3128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void SearchParser::setInput(SearchParser *this, const __CFString *a2)
{
  CFTypeRef v4;

  SearchParser::reset(this);
  if (a2)
    v4 = CFRetain(a2);
  else
    v4 = 0;
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 13, v4);
  NL::QueryTokenizer::setString(*((const void ***)this + 6), a2);
  NL::ParseBuilder::parse(*((NL::ParseBuilder **)this + 8));
}

void SearchParser::reset(SearchParser *this)
{
  uint64_t v2;
  uint64_t v3;
  NL::ParserContext *v4;
  NL::QueryTokenizer *v5;
  NL::ParseBuilder *v6;
  NL::ParserResources *v7;
  const void *v8;
  const void **v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  CFTypeRef v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)this;
  while (v2 != v3)
    v2 = std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v2 - 16);
  *((_QWORD *)this + 1) = v3;
  *((_WORD *)this + 64) = 1;
  *((_QWORD *)this + 15) = 0x100000000;
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 14, 0);
  v4 = (NL::ParserContext *)*((_QWORD *)this + 3);
  if (v4)
    NL::ParserContext::reset(v4);
  v5 = (NL::QueryTokenizer *)*((_QWORD *)this + 6);
  if (v5)
    NL::QueryTokenizer::reset(v5);
  v6 = (NL::ParseBuilder *)*((_QWORD *)this + 8);
  if (v6)
    NL::ParseBuilder::reset(v6);
  v7 = (NL::ParserResources *)*((_QWORD *)this + 5);
  if (v7)
    NL::ParserResources::reset(v7);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 13, 0);
  v8 = (const void *)NL::ParserResources::copyLocale(*((NL::ParserResources **)this + 5));
  v40 = v8;
  if (v8)
    NL::ParserContext::setLocale(*((const void ***)this + 3), (const __CFLocale *)v8);
  v9 = (const void **)NL::ParserResources::copyEntityDetector(*((NL::ParserResources **)this + 5));
  NL::QueryTokenizer::setEntityDetector(*((_QWORD *)this + 6), (uint64_t)v9);
  if (v9)
    NLEntityDetectorRelease(v9);
  NL::ParserResources::getSearchGrammar(*((NL::ParserResources **)this + 5), &v38);
  v10 = v38;
  if (v38)
  {
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    v36 = *((_QWORD *)this + 3);
    v37 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)(v10 + 32), &v36);
    v14 = v37;
    if (v37)
    {
      v15 = (unint64_t *)&v37->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v17 = *((_QWORD *)this + 8);
  v34 = v38;
  v35 = v39;
  if (v39)
  {
    v18 = (unint64_t *)&v39->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)(v17 + 48), &v34);
  v20 = v35;
  if (v35)
  {
    v21 = (unint64_t *)&v35->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *((_QWORD *)this + 6);
  v32 = v38;
  v33 = v39;
  if (v39)
  {
    v24 = (unint64_t *)&v39->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)(v23 + 16), &v32);
  v26 = v33;
  if (v33)
  {
    v27 = (unint64_t *)&v33->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v40)
    CFRelease(v40);
}

void sub_1A18B3404(_Unwind_Exception *a1)
{
  uint64_t v1;

  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)(v1 - 24), 0);
  _Unwind_Resume(a1);
}

_QWORD *SearchParser::getFormatter@<X0>(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  __int128 v10;

  *a3 = 0;
  a3[1] = 0;
  if ((a2 - 1) > 1)
  {
    v4 = a1 + 9;
    if (a1[9])
      return std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](a3, v4);
    std::allocate_shared[abi:ne180100]<NL::ParseFormatter,std::allocator<NL::ParseFormatter>,std::shared_ptr<NL::ParserContext> &,std::shared_ptr<NL::QueryTokenizer> &,void>(a1 + 3, a1 + 6, &v10);
    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v4, &v10);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (!*((_QWORD *)&v10 + 1))
      return std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](a3, v4);
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v7 = __ldaxr(v8);
    while (__stlxr(v7 - 1, v8));
  }
  else
  {
    v4 = a1 + 11;
    if (a1[11])
      return std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](a3, v4);
    std::allocate_shared[abi:ne180100]<NL::SpotlightParseFormatter,std::allocator<NL::SpotlightParseFormatter>,std::shared_ptr<NL::ParserContext> &,std::shared_ptr<NL::QueryTokenizer> &,void>(a1 + 3, a1 + 6, &v10);
    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v4, &v10);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (!*((_QWORD *)&v10 + 1))
      return std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](a3, v4);
    v6 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
  }
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](a3, v4);
}

void sub_1A18B3518(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SearchParser::parse(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const void *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  if (*(_DWORD *)(a1 + 120) == a2 && *(_DWORD *)(a1 + 124) == (_DWORD)a3 && !*(_BYTE *)(a1 + 128))
    return;
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(a1 + 112), 0);
  SearchParser::getFormatter((uint64_t *)a1, a2, &v29);
  if (v29)
  {
    if (SearchParser::hasResources((NL::ParserResources **)a1))
    {
      *(_DWORD *)(a1 + 120) = a2;
      *(_WORD *)(a1 + 128) = 256;
      v6 = *(uint64_t **)(a1 + 64);
      v7 = *v6;
      v8 = (std::__shared_weak_count *)v6[1];
      v27 = v7;
      v28 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        if (*(_QWORD *)(v7 + 16) != *(_QWORD *)(v7 + 8))
        {
          v11 = v29;
          v25 = v7;
          v26 = v8;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
LABEL_16:
          v14 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v11 + 16))(v11, &v25, a3);
          nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(a1 + 112), v14);
          v15 = v26;
          if (v26)
          {
            v16 = (unint64_t *)&v26->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          goto LABEL_22;
        }
      }
      else if (*(_QWORD *)(v7 + 16) != *(_QWORD *)(v7 + 8))
      {
        v11 = v29;
        v25 = v7;
        v26 = 0;
        goto LABEL_16;
      }
      v18 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 24))(v29, a3);
      nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(a1 + 112), v18);
LABEL_22:
      v19 = v28;
      if (v28)
      {
        v20 = (unint64_t *)&v28->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      goto LABEL_27;
    }
    v13 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 24))(v29, a3);
    nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(a1 + 112), v13);
  }
LABEL_27:
  v22 = v30;
  if (v30)
  {
    v23 = (unint64_t *)&v30->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1A18B3734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void SearchParser::enumerateDateRangeDisplaySuggestions(uint64_t a1, CFDictionaryRef theDict, uint64_t a3)
{
  const __CFString *Value;
  const __CFNumber *v7;
  const __CFString *v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  __CFBundle *v11;
  BOOL v12;
  BOOL v13;
  _BOOL4 v14;
  CFStringRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _BYTE v19[8];
  std::__shared_weak_count *v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef cf;
  CFTypeRef v24;
  int v25;
  int valuePtr;
  char v27;

  if (!theDict)
    return;
  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("startDateQuery"));
  v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("startDateModifier"));
  v8 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("endDateQuery"));
  v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("endDateModifier"));
  if (!Value || !v8)
    return;
  v10 = v9;
  v27 = 0;
  valuePtr = 0;
  if (v7)
    CFNumberGetValue(v7, kCFNumberSInt32Type, &valuePtr);
  v25 = 0;
  if (v10)
    CFNumberGetValue(v10, kCFNumberSInt32Type, &v25);
  v24 = copyCurrentCalendar(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8));
  NL::DateFormatter::DateFormatter(v19);
  v11 = NL::DateFormatter::copyDisplayStringWithStartAndEndDateForRange((NL::DateFormatter *)v19, Value, valuePtr, v8, v25);
  if (v11)
    (*(void (**)(uint64_t, __CFBundle *, char *))(a3 + 16))(a3, v11, &v27);
  if (valuePtr)
    v12 = valuePtr == 3;
  else
    v12 = 1;
  v13 = v25 == 3 && v12;
  if (v25)
    v14 = 0;
  else
    v14 = valuePtr == 3;
  if (v13 || v14)
  {
    v15 = NL::DateFormatter::copyDisplayStringForDates((NL::DateFormatter *)v19, Value, v8);
    if (v11)
      CFRelease(v11);
    if (!v15)
      goto LABEL_28;
    (*(void (**)(uint64_t, CFStringRef, char *))(a3 + 16))(a3, v15, &v27);
  }
  else
  {
    v15 = (CFStringRef)v11;
    if (!v11)
      goto LABEL_28;
  }
  CFRelease(v15);
LABEL_28:
  if (cf)
    CFRelease(cf);
  cf = 0;
  if (v22)
    CFRelease(v22);
  v22 = 0;
  if (v21)
    CFRelease(v21);
  v21 = 0;
  v16 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v24)
    CFRelease(v24);
}

void sub_1A18B398C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  NL::DateFormatter::~DateFormatter((const void **)va);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void NL::DateFormatter::~DateFormatter(const void **this)
{
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 4, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 3, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 2, 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void SearchParser::enumerateDateDisplaySuggestions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  NL::DatePeriod *v11;
  NL::DatePeriod *v12;
  const void **v13;
  __CFDateFormatter **v14;
  uint64_t v15;
  const __CFAllocator *v16;
  const CFDictionaryKeyCallBacks *v17;
  const CFDictionaryValueCallBacks *v18;
  uint64_t v19;
  const __CFString *v20;
  NL::DatePeriod *v21;
  const void **v22;
  __CFDateFormatter **v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NL::DatePeriod *v30;
  CFTypeRef v31;
  void *values;
  void *keys;
  char v34;
  CFTypeRef cf;
  NL::DatePeriod *v36;
  __CFDateFormatter *v37;
  std::__shared_weak_count *v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  const __CFDate **v44;
  std::__shared_weak_count *v45;

  v4 = *(std::__shared_weak_count **)(a1 + 32);
  v42 = *(_QWORD *)(a1 + 24);
  v43 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  NL::DateConverter::DateConverter(&v44, &v42);
  v7 = v43;
  if (v43)
  {
    v8 = (unint64_t *)&v43->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  NL::DateFormatter::DateFormatter(&v37);
  v10 = 0;
  v11 = 0;
  cf = 0;
  v36 = 0;
  v34 = 0;
  do
  {
    NL::DateConverter::datePeriodForRelativeDate(&v44, off_1E45D0360[v10], (NL::DatePeriod **)&keys);
    v12 = (NL::DatePeriod *)keys;
    keys = 0;
    v36 = v12;
    if (!v11)
    {
      v11 = v12;
      if (!v12)
        goto LABEL_20;
LABEL_16:
      v14 = NL::DateFormatter::copyDisplayForDate(&v37, v11, 0, 0);
      if (cf)
        CFRelease(cf);
      cf = v14;
      if (v14)
        (*(void (**)(uint64_t, __CFDateFormatter **, char *))(a3 + 16))(a3, v14, &v34);
      goto LABEL_20;
    }
    NL::DatePeriod::~DatePeriod((const void **)v11);
    MEMORY[0x1A1B0E068]();
    v13 = (const void **)keys;
    keys = 0;
    if (v13)
    {
      NL::DatePeriod::~DatePeriod(v13);
      MEMORY[0x1A1B0E068]();
    }
    v11 = v36;
    if (v36)
      goto LABEL_16;
LABEL_20:
    ++v10;
  }
  while (v10 != 8);
  v15 = 0;
  keys = CFSTR("DIGITS");
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v17 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v18 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  do
  {
    v19 = 1u;
    do
    {
      v20 = off_1E45D03A0[v19];
      values = (void *)CFStringCreateWithFormat(v16, 0, CFSTR("%ld"), v15);
      v31 = CFDictionaryCreate(v16, (const void **)&keys, (const void **)&values, 1, v17, v18);
      NL::DateConverter::datePeriodForValues((CFIndex)&v44, v20, (const __CFDictionary *)v31, (uint64_t *)&v30);
      v21 = v30;
      v30 = 0;
      v36 = v21;
      if (v11)
      {
        NL::DatePeriod::~DatePeriod((const void **)v11);
        MEMORY[0x1A1B0E068]();
        v22 = (const void **)v30;
        v30 = 0;
        if (v22)
        {
          NL::DatePeriod::~DatePeriod(v22);
          MEMORY[0x1A1B0E068]();
        }
      }
      v11 = v36;
      v23 = NL::DateFormatter::copyDisplayForDate(&v37, v36, 0, 0);
      if (cf)
        CFRelease(cf);
      cf = v23;
      (*(void (**)(uint64_t, __CFDateFormatter **, char *))(a3 + 16))(a3, v23, &v34);
      if (v31)
        CFRelease(v31);
      if (values)
        CFRelease(values);
      ++v19;
    }
    while (v19 != 4);
    ++v15;
  }
  while (v15 != 6);
  if (v23)
    CFRelease(v23);
  NL::DatePeriod::~DatePeriod((const void **)v11);
  MEMORY[0x1A1B0E068]();
  if (v41)
    CFRelease(v41);
  v41 = 0;
  if (v40)
    CFRelease(v40);
  v40 = 0;
  if (v39)
    CFRelease(v39);
  v39 = 0;
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v45;
  if (v45)
  {
    v28 = (unint64_t *)&v45->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1A18B3DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void SearchParser::enumerateSuggestions(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, uint64_t a4)
{
  _QWORD v7[5];
  _QWORD v8[5];

  if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8))
  {
    if (theDict
      && CFDictionaryContainsKey(theDict, CFSTR("startDateQuery"))
      && CFDictionaryContainsKey(theDict, CFSTR("endDateQuery")))
    {
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 0x40000000;
      v8[2] = ___ZN12SearchParser20enumerateSuggestionsEPK10__CFStringPK14__CFDictionaryU13block_pointerFvS2_PbE_block_invoke;
      v8[3] = &unk_1E45CF628;
      v8[4] = a4;
      SearchParser::enumerateDateRangeDisplaySuggestions(a1, theDict, (uint64_t)v8);
    }
    else
    {
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 0x40000000;
      v7[2] = ___ZN12SearchParser20enumerateSuggestionsEPK10__CFStringPK14__CFDictionaryU13block_pointerFvS2_PbE_block_invoke_2;
      v7[3] = &unk_1E45CF7E0;
      v7[4] = a4;
      SearchParser::enumerateDateDisplaySuggestions(a1, a2, (uint64_t)v7);
    }
  }
}

uint64_t ___ZN12SearchParser20enumerateSuggestionsEPK10__CFStringPK14__CFDictionaryU13block_pointerFvS2_PbE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN12SearchParser20enumerateSuggestionsEPK10__CFStringPK14__CFDictionaryU13block_pointerFvS2_PbE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

const void *SearchParser::currentParse(SearchParser *this)
{
  const __CFDictionary *v2;

  v2 = (const __CFDictionary *)*((_QWORD *)this + 14);
  if (v2 && CFDictionaryContainsKey(v2, CFSTR("Parse")))
    return CFDictionaryGetValue(*((CFDictionaryRef *)this + 14), CFSTR("Parse"));
  else
    return 0;
}

const __CFDictionary *SearchParser::currentConfidence(SearchParser *this)
{
  const __CFDictionary *result;
  const __CFNumber *Value;
  unsigned int valuePtr;

  valuePtr = 0;
  result = (const __CFDictionary *)*((_QWORD *)this + 14);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryContainsKey(result, CFSTR("Confidence"));
    if ((_DWORD)result)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 14), CFSTR("Confidence"));
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      return (const __CFDictionary *)valuePtr;
    }
  }
  return result;
}

const void *SearchParser::rankingTerms(SearchParser *this)
{
  const __CFDictionary *v2;

  v2 = (const __CFDictionary *)*((_QWORD *)this + 14);
  if (v2 && CFDictionaryContainsKey(v2, CFSTR("RankTerms")))
    return CFDictionaryGetValue(*((CFDictionaryRef *)this + 14), CFSTR("RankTerms"));
  else
    return 0;
}

const void *SearchParser::rankCategories(SearchParser *this)
{
  const __CFDictionary *v2;

  v2 = (const __CFDictionary *)*((_QWORD *)this + 14);
  if (v2 && CFDictionaryContainsKey(v2, CFSTR("RankCategories")))
    return CFDictionaryGetValue(*((CFDictionaryRef *)this + 14), CFSTR("RankCategories"));
  else
    return 0;
}

const void *SearchParser::resultModifier(SearchParser *this)
{
  const __CFDictionary *v2;

  v2 = (const __CFDictionary *)*((_QWORD *)this + 14);
  if (v2 && CFDictionaryContainsKey(v2, CFSTR("ResultModifier")))
    return CFDictionaryGetValue(*((CFDictionaryRef *)this + 14), CFSTR("ResultModifier"));
  else
    return 0;
}

const void *SearchParser::attributedInput(SearchParser *this)
{
  const __CFDictionary *v2;

  v2 = (const __CFDictionary *)*((_QWORD *)this + 14);
  if (v2 && CFDictionaryContainsKey(v2, CFSTR("AttributedInput")))
    return CFDictionaryGetValue(*((CFDictionaryRef *)this + 14), CFSTR("AttributedInput"));
  else
    return 0;
}

uint64_t _CFInit_SearchParserWrapper(uint64_t result)
{
  *(_QWORD *)(result + 16) = &unk_1E45CD390;
  return result;
}

uint64_t createSearchParserWrapper(SearchParser *a1)
{
  uint64_t result;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_SearchParserWrapper)
  {
    qword_1EDBB1CA8 = 0;
    unk_1EDBB1CB8 = 0u;
    unk_1EDBB1CC8 = 0u;
    g_CFTypeID_SearchParserWrapper = _CFRuntimeRegisterClass();
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

uint64_t _CFInit_SearchParseCandidateWrapper(uint64_t result)
{
  *(_QWORD *)(result + 16) = &unk_1E45CE010;
  return result;
}

uint64_t createSearchParseCandidateWrapper(SearchParseCandidate *a1)
{
  uint64_t result;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_SearchParseCandidateWrapper)
  {
    qword_1EDBB1C48 = 0;
    unk_1EDBB1C58 = 0u;
    unk_1EDBB1C68 = 0u;
    g_CFTypeID_SearchParseCandidateWrapper = _CFRuntimeRegisterClass();
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

CFArrayRef NLSearchParserCopyAvailableLanguages()
{
  return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&NLSearchParserCopyAvailableLanguages::languages, 10, MEMORY[0x1E0C9B378]);
}

uint64_t NLSearchParserCreate(const __CFDictionary *a1)
{
  SearchParser *v2;

  v2 = (SearchParser *)operator new();
  SearchParser::SearchParser(v2, a1);
  return createSearchParserWrapper(v2);
}

void sub_1A18B42B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1B0E068](v1, 0x1060C407CA3BCE5);
  _Unwind_Resume(a1);
}

void NLSearchParserSetLocale(uint64_t a1, const __CFLocale *a2)
{
  SearchParser *v2;

  if (a1 && a2)
  {
    v2 = *(SearchParser **)(a1 + 24);
    if (v2)
      SearchParser::setLocale(v2, a2);
  }
}

CFComparisonResult NLSearchParserSetContext(CFComparisonResult result, const __CFString *a2)
{
  uint64_t v2;

  if (result && a2)
  {
    v2 = *(_QWORD *)(result + 24);
    if (v2)
    {
      result = NL::ParserResources::setContext(*(NL::ParserResources **)(v2 + 40), a2);
      *(_DWORD *)(*(_QWORD *)(v2 + 24) + 40) = *(_DWORD *)(*(_QWORD *)(v2 + 40) + 32);
    }
  }
  return result;
}

uint64_t NLSearchParserSetIndex(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (result && a2)
  {
    v2 = *(_QWORD *)(result + 24);
    if (v2)
      *(_QWORD *)(*(_QWORD *)(v2 + 24) + 56) = a2;
  }
  return result;
}

uint64_t NLSearchParserSetFutureDates(uint64_t result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *(_QWORD *)(result + 24);
    if (v2)
      *(_BYTE *)(*(_QWORD *)(v2 + 24) + 66) = a2 != 0;
  }
  return result;
}

void NLSearchParserSetCustomResourceDirectory(uint64_t a1, const __CFURL *a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      NL::ParserResources::setCustomResourcePath(*(const void ***)(v2 + 40), a2);
  }
}

void NLSearchParserSetString(uint64_t a1, const __CFString *a2)
{
  SearchParser *v2;

  if (a1 && a2)
  {
    v2 = *(SearchParser **)(a1 + 24);
    if (v2)
      SearchParser::setInput(v2, a2);
  }
}

void NLSearchParserSetDate(uint64_t a1, CFTypeRef cf2)
{
  uint64_t v3;

  if (a1 && cf2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      NL::ParserResources::setDate(*(const void ***)(v3 + 40), cf2);
      NL::ParserContext::setDate(*(const void ***)(v3 + 24), (const __CFDate *)cf2);
    }
  }
}

void NLSearchParserAppendString(uint64_t a1, CFStringRef theString)
{
  SearchParser *v4;

  if (a1 && theString && CFStringGetLength(theString))
  {
    v4 = *(SearchParser **)(a1 + 24);
    if (v4)
      SearchParser::addInput(v4, theString);
  }
}

uint64_t NLSearchParserGetTokenCount(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(a1 + 24)) != 0)
    return *(_QWORD *)(*(_QWORD *)(v1 + 48) + 256);
  else
    return -1;
}

uint64_t NLSearchParserCopyParse(uint64_t a1, int a2)
{
  return NLSearchParserCopyParseWithOptions(a1, a2, 1);
}

uint64_t NLSearchParserCopyParseWithOptions(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  SearchParser *v7;
  const __CFString *v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  const __CFArray *v12;

  v6 = operator new();
  *(_DWORD *)v6 = a2;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_BYTE *)(v6 + 52) = 1;
  if (a1)
  {
    v7 = *(SearchParser **)(a1 + 24);
    if (v7)
    {
      SearchParser::parse((uint64_t)v7, a2, a3);
      *(_BYTE *)(v6 + 52) = *((_BYTE *)v7 + 129);
      v8 = (const __CFString *)SearchParser::currentParse(v7);
      SearchParseCandidate::setDescription((const void **)v6, v8);
      *(_DWORD *)(v6 + 48) = SearchParser::currentConfidence(v7);
      v9 = (const __CFDictionary *)SearchParser::rankingTerms(v7);
      if (v9)
        SearchParseCandidate::setRankingTerms((const void **)v6, v9);
      v10 = (const __CFDictionary *)SearchParser::rankCategories(v7);
      if (v10)
        SearchParseCandidate::setRankingCategories((const void **)v6, v10);
      v11 = (const __CFDictionary *)SearchParser::resultModifier(v7);
      if (v11)
        SearchParseCandidate::setResultModifier((const void **)v6, v11);
      v12 = (const __CFArray *)SearchParser::attributedInput(v7);
      if (v12)
        SearchParseCandidate::setAttributedInput((const void **)v6, v12);
    }
  }
  return createSearchParseCandidateWrapper((SearchParseCandidate *)v6);
}

void NLSearchParserEnumerateSuggestions(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v5[5];

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
    {
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 0x40000000;
      v5[2] = __NLSearchParserEnumerateSuggestions_block_invoke;
      v5[3] = &unk_1E45D03D8;
      v5[4] = a4;
      SearchParser::enumerateSuggestions(v4, a2, a3, (uint64_t)v5);
    }
  }
}

CFStringRef NLSearchParseCandidateCopyDescription(uint64_t a1)
{
  uint64_t v1;
  const __CFString *v2;

  if (a1 && (v1 = *(_QWORD *)(a1 + 24)) != 0 && (v2 = *(const __CFString **)(v1 + 8)) != 0)
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    return &stru_1E45D0A48;
}

__CFArray *NLSearchParseCandidateCopyRankingTerms(uint64_t a1)
{
  uint64_t v1;
  const __CFDictionary *v2;
  uint64_t Count;
  unint64_t v4;
  const void **v5;
  size_t v6;
  __CFArray *Mutable;
  CFIndex i;
  _QWORD v10[2];
  CFRange v11;

  v10[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return 0;
  v2 = *(const __CFDictionary **)(v1 + 24);
  if (!v2)
    return 0;
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v1 + 24));
  MEMORY[0x1E0C80A78]();
  v5 = (const void **)((char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v4 >= 0x200)
    v6 = 512;
  else
    v6 = v4;
  bzero((char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  CFDictionaryGetKeysAndValues(v2, v5, 0);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
      CFArrayInsertValueAtIndex(Mutable, i, v5[i]);
  }
  v11.location = 0;
  v11.length = Count;
  CFArraySortValues(Mutable, v11, (CFComparatorFunction)compareRankTerms, v2);
  return Mutable;
}

CFComparisonResult compareRankTerms(const void *key, const void *a2, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  const __CFNumber *v6;

  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
  v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, a2);
  return CFNumberCompare(Value, v6, 0);
}

CFDictionaryRef NLSearchParseCandidateCopyRankTerms(uint64_t a1)
{
  uint64_t v1;
  const __CFDictionary *v2;

  if (a1 && (v1 = *(_QWORD *)(a1 + 24)) != 0 && (v2 = *(const __CFDictionary **)(v1 + 24)) != 0)
    return CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    return 0;
}

CFArrayRef NLSearchParseCandidateCopyAttributedInput(uint64_t a1)
{
  uint64_t v1;
  const __CFArray *v2;

  if (a1 && (v1 = *(_QWORD *)(a1 + 24)) != 0 && (v2 = *(const __CFArray **)(v1 + 16)) != 0)
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    return 0;
}

CFDictionaryRef NLSearchParseCandidateCopyRankCategories(uint64_t a1)
{
  uint64_t v1;
  const __CFDictionary *v2;

  if (a1 && (v1 = *(_QWORD *)(a1 + 24)) != 0 && (v2 = *(const __CFDictionary **)(v1 + 32)) != 0)
    return CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    return 0;
}

CFDictionaryRef NLSearchParseCandidateCopyResultModifier(uint64_t a1)
{
  uint64_t v1;
  const __CFDictionary *v2;

  if (a1 && (v1 = *(_QWORD *)(a1 + 24)) != 0 && (v2 = *(const __CFDictionary **)(v1 + 40)) != 0)
    return CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    return 0;
}

uint64_t NLSearchParseGetConfidence(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    if (v1)
      return *(unsigned int *)(v1 + 48);
    else
      return 0;
  }
  return result;
}

BOOL NLSearchParseLanguageIsSupported(_BOOL8 result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    return v1 && *(unsigned __int8 *)(v1 + 52) != 0;
  }
  return result;
}

void SearchParserWrapper::~SearchParserWrapper(SearchParserWrapper *this)
{
  SearchParserWrapper::~SearchParserWrapper(this);
  JUMPOUT(0x1A1B0E068);
}

{
  SearchParser *v2;

  *(_QWORD *)this = &unk_1E45CD390;
  v2 = (SearchParser *)*((_QWORD *)this + 1);
  if (v2)
  {
    SearchParser::~SearchParser(v2);
    MEMORY[0x1A1B0E068]();
  }
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

void SearchParseCandidateWrapper::~SearchParseCandidateWrapper(SearchParseCandidateWrapper *this)
{
  SearchParseCandidateWrapper::~SearchParseCandidateWrapper(this);
  JUMPOUT(0x1A1B0E068);
}

{
  const void **v2;

  *(_QWORD *)this = &unk_1E45CE010;
  v2 = (const void **)*((_QWORD *)this + 1);
  if (v2)
  {
    SearchParseCandidate::~SearchParseCandidate(v2);
    MEMORY[0x1A1B0E068]();
  }
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN2NL13ParserContextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x90uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN2NL13ParserContextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1A18B49A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN2NL13ParserContextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E45CEEB0;
  a1[1] = 0;
  NL::ParserContext::ParserContext((NL::ParserContext *)(a1 + 3));
  return a1;
}

void sub_1A18B49F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NL::ParserContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEEB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::ParserContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEEB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

void std::__shared_ptr_emplace<NL::ParserContext>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<NL::ParserContext>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<NL::ParserContext>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__tree<std::string>::destroy(a2 + 96, *(char **)(a2 + 104));
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy(a2 + 72, *(_QWORD **)(a2 + 80));
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(a2 + 32), 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(a2 + 24), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(a2 + 16), 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)(a2 + 8), 0);
  nlp::CFScopedPtr<__CFDate const*>::reset((const void **)a2, 0);
}

_QWORD *std::allocate_shared[abi:ne180100]<NL::QueryTokenizer,std::allocator<NL::QueryTokenizer>,std::shared_ptr<NL::ParserContext> &,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x120uLL);
  result = std::__shared_ptr_emplace<NL::QueryTokenizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<NL::ParserContext> &,std::allocator<NL::QueryTokenizer>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1A18B4B24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<NL::QueryTokenizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<NL::ParserContext> &,std::allocator<NL::QueryTokenizer>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E45CEF90;
  a1[1] = 0;
  std::allocator<NL::QueryTokenizer>::construct[abi:ne180100]<NL::QueryTokenizer,std::shared_ptr<NL::ParserContext> &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1A18B4B84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NL::QueryTokenizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEF90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::QueryTokenizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEF90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

void std::__shared_ptr_emplace<NL::QueryTokenizer>::__on_zero_shared(uint64_t a1)
{
  NL::QueryTokenizer::~QueryTokenizer((NL::QueryTokenizer *)(a1 + 24));
}

void std::allocator<NL::QueryTokenizer>::construct[abi:ne180100]<NL::QueryTokenizer,std::shared_ptr<NL::ParserContext> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = (std::__shared_weak_count *)a3[1];
  v9 = *a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  NL::QueryTokenizer::QueryTokenizer(a2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A18B4C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<NL::SpotlightParseFormatter,std::allocator<NL::SpotlightParseFormatter>,std::shared_ptr<NL::ParserContext> &,std::shared_ptr<NL::QueryTokenizer> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x150uLL);
  result = std::__shared_ptr_emplace<NL::SpotlightParseFormatter>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<NL::ParserContext> &,std::shared_ptr<NL::QueryTokenizer> &,std::allocator<NL::SpotlightParseFormatter>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1A18B4CD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<NL::SpotlightParseFormatter>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<NL::ParserContext> &,std::shared_ptr<NL::QueryTokenizer> &,std::allocator<NL::SpotlightParseFormatter>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E45CF070;
  a1[1] = 0;
  std::allocator<NL::SpotlightParseFormatter>::construct[abi:ne180100]<NL::SpotlightParseFormatter,std::shared_ptr<NL::ParserContext> &,std::shared_ptr<NL::QueryTokenizer> &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1A18B4D34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NL::SpotlightParseFormatter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CF070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::SpotlightParseFormatter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CF070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__shared_ptr_emplace<NL::SpotlightParseFormatter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<NL::SpotlightParseFormatter>::construct[abi:ne180100]<NL::SpotlightParseFormatter,std::shared_ptr<NL::ParserContext> &,std::shared_ptr<NL::QueryTokenizer> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = (std::__shared_weak_count *)a3[1];
  v18 = *a3;
  v19 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a4[1];
  v16 = *a4;
  v17 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  NL::SpotlightParseFormatter::SpotlightParseFormatter(a2, &v18, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1A18B4E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<NL::ParseFormatter,std::allocator<NL::ParseFormatter>,std::shared_ptr<NL::ParserContext> &,std::shared_ptr<NL::QueryTokenizer> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<NL::ParseFormatter>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<NL::ParserContext> &,std::shared_ptr<NL::QueryTokenizer> &,std::allocator<NL::ParseFormatter>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1A18B4EE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<NL::ParseFormatter>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<NL::ParserContext> &,std::shared_ptr<NL::QueryTokenizer> &,std::allocator<NL::ParseFormatter>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E45CEF58;
  a1[1] = 0;
  std::allocator<NL::ParseFormatter>::construct[abi:ne180100]<NL::ParseFormatter,std::shared_ptr<NL::ParserContext> &,std::shared_ptr<NL::QueryTokenizer> &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1A18B4F4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NL::ParseFormatter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEF58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::ParseFormatter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEF58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__shared_ptr_emplace<NL::ParseFormatter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<NL::ParseFormatter>::construct[abi:ne180100]<NL::ParseFormatter,std::shared_ptr<NL::ParserContext> &,std::shared_ptr<NL::QueryTokenizer> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = (std::__shared_weak_count *)a3[1];
  v18 = *a3;
  v19 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a4[1];
  v16 = *a4;
  v17 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  NL::ParseFormatter::ParseFormatter(a2, &v18, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1A18B5098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

id dateComponentsForDate(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  int v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v2 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = (void *)objc_msgSend(a1, "allKeys", 0);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        v9 = objc_msgSend((id)objc_msgSend(a1, "objectForKey:", v8), "intValue");
        if (objc_msgSend(v8, "isEqualToString:", CFSTR("d")))
        {
          objc_msgSend(v2, "setDay:", v9);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("E")))
        {
          objc_msgSend(v2, "setWeekday:", v9);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("F")))
        {
          objc_msgSend(v2, "setWeekdayOrdinal:", v9);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("M")))
        {
          objc_msgSend(v2, "setMonth:", v9);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("y")))
        {
          objc_msgSend(v2, "setYear:", v9);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("W")))
        {
          objc_msgSend(v2, "setWeekOfMonth:", v9);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("w")))
        {
          objc_msgSend(v2, "setWeekOfYear:", v9);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("Y")))
        {
          objc_msgSend(v2, "setYearForWeekOfYear:", v9);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("H")))
        {
          objc_msgSend(v2, "setHour:", v9);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("m")))
        {
          objc_msgSend(v2, "setMinute:", v9);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("s")))
        {
          objc_msgSend(v2, "setSecond:", v9);
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }
  return v2;
}

void sub_1A18B561C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A18B5714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_1A18B585C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A18B5CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A18B60E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void **NL::DateFormatter::DateFormatter(const void **a1, const void **a2)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  const __CFAllocator *v6;
  CFDateFormatterRef ISO8601Formatter;
  const __CFLocale *v8;
  CFDateFormatterRef v9;
  CFDateFormatterRef v10;

  v3 = (unint64_t *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = v3 + 1;
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ISO8601Formatter = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x333uLL);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(a1 + 2, ISO8601Formatter);
  v8 = (const __CFLocale *)*((_QWORD *)*a1 + 1);
  if (v8)
  {
    v9 = CFDateFormatterCreate(v6, v8, kCFDateFormatterShortStyle, kCFDateFormatterShortStyle);
    nlp::CFScopedPtr<__CFDateFormatter *>::reset(a1 + 4, v9);
    v10 = CFDateFormatterCreate(v6, *((CFLocaleRef *)*a1 + 1), kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    nlp::CFScopedPtr<__CFDateFormatter *>::reset(a1 + 3, v10);
  }
  return a1;
}

void sub_1A18B626C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;
  const void **v3;
  const void **v4;

  nlp::CFScopedPtr<__CFDateFormatter *>::reset(v4, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(v3, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(v2, 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

__CFBundle *NL::DateFormatter::copyDisplayStringForStartAndEndDateComponents(__CFDateFormatter **this, __CFCalendar *a2, const __CFLocale *a3, const __CFDate *a4, const NL::DateComponents *a5, const NL::DateComponents *a6)
{
  __CFBundle *BundleWithIdentifier;
  CFStringRef v13;
  CFStringRef v15;
  CFStringRef v16;
  const __CFString *v17;
  std::string v18;
  CFStringRef v19;
  std::string __p;
  double v21;

  BundleWithIdentifier = 0;
  if (!a2)
    return BundleWithIdentifier;
  if (!a3)
    return BundleWithIdentifier;
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.NLP"));
  if (!BundleWithIdentifier)
    return BundleWithIdentifier;
  v21 = 0.0;
  if (!NL::DateComponents::isEmpty(a5))
  {
    if (NL::DateComponents::isEmpty(a6))
    {
      NL::DateComponents::getFullFormat(a5, a2, a4, &v21, &__p);
      v13 = copyDisplayDateForDateComponents(this[3], a2, a3, a4, a5, (uint64_t)&__p);
      goto LABEL_8;
    }
    NL::DateComponents::getShortFormat(a5, a2, a4, &v21, &__p);
    v15 = copyDisplayDateForDateComponents(this[4], a2, a3, a4, a5, (uint64_t)&__p);
    v19 = v15;
    NL::DateComponents::getShortFormat(a6, a2, a4, &v21, &v18);
    v16 = copyDisplayDateForDateComponents(this[4], a2, a3, a4, a6, (uint64_t)&v18);
    v17 = CFBundleCopyLocalizedString(BundleWithIdentifier, CFSTR("FROM_DATE_TO_DATE"), CFSTR("FROM_DATE_TO_DATE"), CFSTR("Localizable"));
    if (v17)
    {
      BundleWithIdentifier = (__CFBundle *)NLPCreateStringWithValidatedFormat(CFSTR("%1@%2@"), v17, v15, v16, v17, v16);
      CFRelease(v17);
      if (!v16)
        goto LABEL_17;
    }
    else
    {
      BundleWithIdentifier = 0;
      if (!v16)
      {
LABEL_17:
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        if (v15)
          CFRelease(v15);
        goto LABEL_9;
      }
    }
    CFRelease(v16);
    goto LABEL_17;
  }
  NL::DateComponents::getFullFormat(a6, a2, a4, &v21, &__p);
  v13 = copyDisplayDateForDateComponents(this[3], a2, a3, a4, a6, (uint64_t)&__p);
LABEL_8:
  BundleWithIdentifier = (__CFBundle *)v13;
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return BundleWithIdentifier;
}

void sub_1A18B64B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, const void *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a11, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a12, 0);
  if (a18 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFString const*>::reset(&a19, 0);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

CFStringRef copyDisplayDateForDateComponents(__CFDateFormatter *a1, __CFCalendar *a2, const __CFLocale *a3, const __CFDate *a4, NL::DateComponents *this, uint64_t a6)
{
  CFStringRef StringWithDate;
  CFAbsoluteTime AbsoluteTime;
  const __CFString *CFStringFromString;
  const __CFString *DateFormatFromTemplate;
  const __CFAllocator *v16;
  const __CFDate *v17;

  StringWithDate = 0;
  if (!a1 || !a2 || !a3)
    return StringWithDate;
  if (NL::DateComponents::isEmpty(this))
    return 0;
  AbsoluteTime = NL::DateComponents::getAbsoluteTime(this, a2, a4);
  CFStringFromString = createCFStringFromString(a6);
  DateFormatFromTemplate = CFDateFormatterCreateDateFormatFromTemplate(0, CFStringFromString, 0, a3);
  CFDateFormatterSetFormat(a1, DateFormatFromTemplate);
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v17 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], AbsoluteTime);
  if (!v17)
  {
    StringWithDate = 0;
    if (!DateFormatFromTemplate)
      goto LABEL_11;
    goto LABEL_10;
  }
  StringWithDate = CFDateFormatterCreateStringWithDate(v16, a1, v17);
  CFRelease(v17);
  if (DateFormatFromTemplate)
LABEL_10:
    CFRelease(DateFormatFromTemplate);
LABEL_11:
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  return StringWithDate;
}

void sub_1A18B6668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  const void *v5;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v5 = va_arg(va2, const void *);
  nlp::CFScopedPtr<__CFDate const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va2, 0);
  _Unwind_Resume(a1);
}

__CFBundle *NL::DateFormatter::copyDisplayStringForStartAndEndDateAndFreqComponents(NL::DateFormatter *this, __CFCalendar *a2, const __CFLocale *a3, const __CFDate *a4, const NL::DateComponents *a5, const NL::DateComponents *a6, const __CFString *a7)
{
  __CFBundle *BundleWithIdentifier;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFString *v16;
  const __CFString *ValueAtIndex;
  __int128 v18;
  __int128 v19;
  const __CFString *v20;
  __int128 v21;
  __int128 v22;
  const __CFString *v23;
  const void *v24;
  const __CFString *v25;
  CFStringRef v26;
  const void *v28[3];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  const __CFArray *v33;

  BundleWithIdentifier = 0;
  if (a2)
  {
    if (a3)
    {
      if (a7)
      {
        BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.NLP"));
        if (BundleWithIdentifier)
        {
          ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, a7, CFSTR("::"));
          v33 = ArrayBySeparatingStrings;
          if (CFArrayGetCount(ArrayBySeparatingStrings) != 2)
          {
            BundleWithIdentifier = 0;
            if (!ArrayBySeparatingStrings)
              return BundleWithIdentifier;
            goto LABEL_20;
          }
          NL::DatePeriod::DatePeriod((NL::DatePeriod *)v28);
          NL::DatePeriod::setLocale(v28, a3);
          NL::DatePeriod::setCurrentDate(v28, a4);
          v16 = (const __CFString *)MEMORY[0x1A1B0D42C](a2);
          NL::DatePeriod::setCalendarWithIdentifier(v28, v16);
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
          NL::DatePeriod::setDisplayKey(v28, ValueAtIndex);
          v18 = *((_OWORD *)a5 + 1);
          v29 = *(_OWORD *)a5;
          v30 = v18;
          v19 = *((_OWORD *)a5 + 3);
          v31 = *((_OWORD *)a5 + 2);
          v32 = v19;
          v20 = (const __CFString *)NL::DateFormatter::copyDisplayForDate(this, (const NL::DatePeriod *)v28, 0, 0);
          v21 = *((_OWORD *)a6 + 1);
          v29 = *(_OWORD *)a6;
          v30 = v21;
          v22 = *((_OWORD *)a6 + 3);
          v31 = *((_OWORD *)a6 + 2);
          v32 = v22;
          v23 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 1);
          NL::DatePeriod::setDisplayKey(v28, v23);
          v24 = (const void *)NL::DateFormatter::copyDisplayForDate(this, (const NL::DatePeriod *)v28, 0, 0);
          v25 = CFBundleCopyLocalizedString(BundleWithIdentifier, CFSTR("EVERY_DATE_TO_DATE"), CFSTR("EVERY_DATE_TO_DATE"), CFSTR("Localizable"));
          if (v25)
          {
            if (CFStringHasPrefix(v20, CFSTR("Every")))
            {
              BundleWithIdentifier = (__CFBundle *)NLPCreateStringWithValidatedFormat(CFSTR("%1@%2@"), v25, v20, v24);
            }
            else
            {
              v26 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Every %@"), v20);
              BundleWithIdentifier = (__CFBundle *)NLPCreateStringWithValidatedFormat(CFSTR("%1@%2@"), v25, v26, v24, v26, v25, v24, v20);
              if (v26)
                CFRelease(v26);
            }
            CFRelease(v25);
          }
          else
          {
            BundleWithIdentifier = 0;
          }
          if (v24)
            CFRelease(v24);
          if (v20)
            CFRelease(v20);
          NL::DatePeriod::~DatePeriod(v28);
          if (ArrayBySeparatingStrings)
LABEL_20:
            CFRelease(ArrayBySeparatingStrings);
        }
      }
    }
  }
  return BundleWithIdentifier;
}

void sub_1A18B6914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  const void *v5;
  va_list va;
  const void *v7;
  va_list va1;
  const void *v9;
  va_list va2;
  const void *v11;
  va_list va3;
  va_list va4;

  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v7 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v9 = va_arg(va3, const void *);
  va_copy(va4, va3);
  v11 = va_arg(va4, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va2, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va3, 0);
  NL::DatePeriod::~DatePeriod((const void **)va4);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)(v3 - 88), 0);
  _Unwind_Resume(a1);
}

__CFDateFormatter **NL::DateFormatter::copyDisplayForDate(__CFDateFormatter **this, const NL::DatePeriod *a2, unsigned int a3, int a4)
{
  BOOL v4;
  CFBundleRef BundleWithIdentifier;
  __CFBundle *v10;
  __CFCalendar *v11;
  const __CFLocale *v12;
  const __CFDate *v13;
  const __CFString *v14;
  NL::DateFormatter *v15;
  BOOL isEmpty;
  const __CFAllocator *v18;
  const __CFArray *ArrayBySeparatingStrings;
  const void *ValueAtIndex;
  CFTypeRef v21;
  const __CFString *v22;
  uint64_t IntValue;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  CFStringRef v27;
  BOOL v28;
  char v29;
  CFStringRef v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  CFStringRef v34;
  const void *v35;
  const __CFString *v36;
  CFTypeRef v37;
  const __CFArray *v38;
  NL::DateFormatter *v39;
  const __CFString *v40;
  std::string __p;
  CFArrayRef theArray[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  double v46;
  _OWORD v47[4];
  _OWORD v48[4];
  const __CFString *v49;
  const void *v50;
  CFRange v51;

  if (*((_QWORD *)a2 + 1))
    v4 = *(_QWORD *)a2 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  if (!*((_QWORD *)a2 + 2))
    return 0;
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.NLP"));
  if (!BundleWithIdentifier)
    return 0;
  v10 = BundleWithIdentifier;
  v49 = 0;
  v50 = 0;
  memset(v48, 0, sizeof(v48));
  memset(v47, 0, sizeof(v47));
  NL::DatePeriod::resolveDateComponents(a2, (NL::DateComponents *)v48, (NL::DateComponents *)v47, a3, a4);
  if (CFStringFind((CFStringRef)*(_QWORD *)a2, CFSTR("::"), 0).location != -1)
  {
    v11 = (__CFCalendar *)*((_QWORD *)a2 + 1);
    v12 = (const __CFLocale *)*((_QWORD *)a2 + 2);
    v13 = (const __CFDate *)*((_QWORD *)a2 + 28);
    v14 = *(const __CFString **)a2;
    goto LABEL_9;
  }
  if (CFStringFind((CFStringRef)*(_QWORD *)a2, CFSTR(":"), 0).location != -1)
  {
    isEmpty = NL::DateComponents::isEmpty((NL::DateComponents *)v47);
    v11 = (__CFCalendar *)*((_QWORD *)a2 + 1);
    v12 = (const __CFLocale *)*((_QWORD *)a2 + 2);
    v13 = (const __CFDate *)*((_QWORD *)a2 + 28);
    v14 = *(const __CFString **)a2;
    if (isEmpty)
    {
      v15 = NL::DateFormatter::copyDisplayStringForEveryOrdinalISODateComponents((NL::DateFormatter *)this, v11, v12, v13, (const NL::DateComponents *)v48, *(const __CFString **)a2);
      goto LABEL_10;
    }
LABEL_9:
    v15 = NL::DateFormatter::copyDisplayStringForStartAndEndDateAndFreqComponents((NL::DateFormatter *)this, v11, v12, v13, (const NL::DateComponents *)v48, (const NL::DateComponents *)v47, v14);
LABEL_10:
    this = (__CFDateFormatter **)v15;
    goto LABEL_11;
  }
  if (CFStringHasPrefix(*(CFStringRef *)a2, CFSTR("VAL")))
  {
    v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)a2, CFSTR("-"));
    theArray[0] = ArrayBySeparatingStrings;
    if (ArrayBySeparatingStrings && CFArrayGetCount(ArrayBySeparatingStrings) == 2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], 1);
      v21 = CFRetain(ValueAtIndex);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v49, v21);
      v22 = (const __CFString *)CFArrayGetValueAtIndex(theArray[0], 0);
      v51.length = CFStringGetLength(v22) - 4;
      v51.location = 4;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithSubstring(v18, v22, v51);
      IntValue = CFStringGetIntValue((CFStringRef)__p.__r_.__value_.__l.__data_);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&__p.__r_.__value_.__l.__data_, 0);
    }
    else
    {
      IntValue = 0;
    }
    nlp::CFScopedPtr<__CFArray const*>::reset((const void **)theArray, 0);
  }
  else
  {
    if (CFStringsAreEqual(*(const __CFString **)a2, CFSTR("FORMATTED"))
      || CFStringHasSuffix(*(CFStringRef *)a2, CFSTR("HOLIDAY")))
    {
      if (!NL::DateComponents::isEmpty((NL::DateComponents *)v48)
        && !NL::DateComponents::isEmpty((NL::DateComponents *)v47))
      {
        v15 = NL::DateFormatter::copyDisplayStringForStartAndEndDateComponents(this, *((__CFCalendar **)a2 + 1), *((const __CFLocale **)a2 + 2), *((const __CFDate **)a2 + 28), (const NL::DateComponents *)v48, (const NL::DateComponents *)v47);
        goto LABEL_10;
      }
      v46 = 0.0;
      v24 = (_OWORD *)((char *)a2 + 28);
      if (a4)
        v24 = v48;
      v25 = v24[1];
      *(_OWORD *)theArray = *v24;
      v43 = v25;
      v26 = v24[3];
      v44 = v24[2];
      v45 = v26;
      NL::DateComponents::getFullFormat((NL::DateComponents *)theArray, *((__CFCalendar **)a2 + 1), *((const __CFDate **)a2 + 28), &v46, &__p);
      v27 = copyDisplayDateForDateComponents(this[3], *((__CFCalendar **)a2 + 1), *((const __CFLocale **)a2 + 2), *((const __CFDate **)a2 + 28), (NL::DateComponents *)theArray, (uint64_t)&__p);
      nlp::CFScopedPtr<__CFString const*>::reset(&v50, v27);
      v28 = a3 >= 4 || v50 == 0;
      v29 = !v28;
      if (!v28)
        this = (__CFDateFormatter **)CFRetain(v50);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v29 & 1) != 0)
        goto LABEL_11;
    }
    else if (CFStringHasPrefix(*(CFStringRef *)a2, CFSTR("EVERY"))
           && !NL::DateComponents::isEmpty((NL::DateComponents *)v48)
           && NL::DateComponents::isEmpty((NL::DateComponents *)v47))
    {
      v46 = 0.0;
      NL::DateComponents::getFullFormat((const NL::DatePeriod *)((char *)a2 + 28), *((__CFCalendar **)a2 + 1), *((const __CFDate **)a2 + 28), &v46, &__p);
      v31 = v48;
      if (!a4)
        v31 = (_OWORD *)((char *)a2 + 28);
      v32 = v31[1];
      *(_OWORD *)theArray = *v31;
      v43 = v32;
      v33 = v31[3];
      v44 = v31[2];
      v45 = v33;
      v34 = copyDisplayDateForDateComponents(this[3], *((__CFCalendar **)a2 + 1), *((const __CFLocale **)a2 + 2), *((const __CFDate **)a2 + 28), (NL::DateComponents *)theArray, (uint64_t)&__p);
      nlp::CFScopedPtr<__CFString const*>::reset(&v50, v34);
      v35 = v50;
      if (v50)
      {
        v40 = CFBundleCopyLocalizedString(v10, *(CFStringRef *)a2, *(CFStringRef *)a2, CFSTR("Localizable"));
        this = (__CFDateFormatter **)NLPCreateStringWithValidatedFormat(CFSTR("%@"), v40, v50);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v40, 0);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v35)
        goto LABEL_11;
    }
    IntValue = 0;
  }
  switch(a3)
  {
    case 4u:
      if (v49)
      {
        v30 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("BEFORE_%@"), v49);
        break;
      }
      if (!v50)
        goto LABEL_72;
      v30 = CFSTR("BEFORE_DATE");
      break;
    case 5u:
      if (v49)
      {
        v30 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("AFTER_%@"), v49);
        break;
      }
      if (!v50)
        goto LABEL_70;
      v30 = CFSTR("AFTER_DATE");
      break;
    case 6u:
      if (v49)
      {
        v30 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SINCE_%@"), v49);
      }
      else if (v50)
      {
        v30 = CFSTR("SINCE_DATE");
      }
      else
      {
LABEL_70:
        v30 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("AFTER_%@"), *(_QWORD *)a2);
      }
      break;
    case 7u:
      if (v49)
      {
        v30 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("TO_%@"), v49);
      }
      else if (v50)
      {
        v30 = CFSTR("TO_DATE");
      }
      else
      {
LABEL_72:
        v30 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("BEFORE_%@"), *(_QWORD *)a2);
      }
      break;
    default:
      goto LABEL_74;
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v49, v30);
LABEL_74:
  v36 = v49;
  if (v49
    || (v37 = CFRetain(*(CFTypeRef *)a2),
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v49, v37),
        (v36 = v49) != 0))
  {
    v38 = (const __CFArray *)CFBundleCopyLocalizedString(v10, v36, v36, CFSTR("Localizable"));
    theArray[0] = v38;
    if (v38)
    {
      if ((_DWORD)IntValue)
        v39 = (NL::DateFormatter *)NLPCreateStringWithValidatedFormat(CFSTR("%d"), (CFStringRef)v38, IntValue);
      else
        v39 = (NL::DateFormatter *)NLPCreateStringWithValidatedFormat(CFSTR("%@"), (CFStringRef)v38, v50);
      this = (__CFDateFormatter **)v39;
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)theArray, 0);
    }
    else
    {
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)theArray, 0);
      this = 0;
    }
LABEL_11:
    if (v49)
      CFRelease(v49);
    goto LABEL_13;
  }
  this = 0;
LABEL_13:
  if (v50)
    CFRelease(v50);
  return this;
}

void sub_1A18B701C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  nlp::CFScopedPtr<__CFString const*>::reset(&a11, 0);
  if (a17 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v18 - 80), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v18 - 72), 0);
  _Unwind_Resume(a1);
}

__CFBundle *NL::DateFormatter::copyDisplayStringForEveryOrdinalISODateComponents(NL::DateFormatter *this, __CFCalendar *a2, const __CFLocale *a3, const __CFDate *a4, const NL::DateComponents *a5, const __CFString *a6)
{
  __CFBundle *BundleWithIdentifier;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFString *v14;
  const void *ValueAtIndex;
  const void *v16;
  const __CFAllocator *v17;
  const __CFString *v18;
  __int128 v19;
  __int128 v20;
  const void *v21;
  const __CFString *v22;
  const void *v23;
  const __CFString *v24;
  const __CFString *v25;
  __int128 v26;
  __int128 v27;
  const __CFString *v28;
  const void *v29;
  const __CFString *v30;
  const void *v32[3];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  const __CFArray *v37;

  BundleWithIdentifier = 0;
  if (a2)
  {
    if (a3)
    {
      if (a6)
      {
        BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.NLP"));
        if (BundleWithIdentifier)
        {
          ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, a6, CFSTR(":"));
          v37 = ArrayBySeparatingStrings;
          if (CFArrayGetCount(ArrayBySeparatingStrings) == 3)
          {
            NL::DatePeriod::DatePeriod((NL::DatePeriod *)v32);
            NL::DatePeriod::setLocale(v32, a3);
            NL::DatePeriod::setCurrentDate(v32, a4);
            v14 = (const __CFString *)MEMORY[0x1A1B0D42C](a2);
            NL::DatePeriod::setCalendarWithIdentifier(v32, v14);
            ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
            v16 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 1);
            v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@ %@"), ValueAtIndex, v16);
            NL::DatePeriod::setDisplayKey(v32, v18);
            v19 = *((_OWORD *)a5 + 1);
            v33 = *(_OWORD *)a5;
            v34 = v19;
            v20 = *((_OWORD *)a5 + 3);
            v35 = *((_OWORD *)a5 + 2);
            v36 = v20;
            v21 = (const void *)NL::DateFormatter::copyDisplayForDate(this, (const NL::DatePeriod *)v32, 0, 0);
            v22 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2);
            NL::DatePeriod::setDisplayKey(v32, v22);
            v23 = (const void *)NL::DateFormatter::copyDisplayForDate(this, (const NL::DatePeriod *)v32, 0, 0);
            BundleWithIdentifier = (__CFBundle *)CFStringCreateWithFormat(v17, 0, CFSTR("%@ %@"), v21, v23);
            if (v23)
              CFRelease(v23);
            if (v21)
LABEL_19:
              CFRelease(v21);
LABEL_20:
            NL::DatePeriod::~DatePeriod(v32);
            if (!ArrayBySeparatingStrings)
              return BundleWithIdentifier;
            goto LABEL_23;
          }
          if (CFArrayGetCount(ArrayBySeparatingStrings) == 2)
          {
            NL::DatePeriod::DatePeriod((NL::DatePeriod *)v32);
            NL::DatePeriod::setLocale(v32, a3);
            NL::DatePeriod::setCurrentDate(v32, a4);
            v24 = (const __CFString *)MEMORY[0x1A1B0D42C](a2);
            NL::DatePeriod::setCalendarWithIdentifier(v32, v24);
            v25 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 1);
            NL::DatePeriod::setDisplayKey(v32, v25);
            v26 = *((_OWORD *)a5 + 1);
            v33 = *(_OWORD *)a5;
            v34 = v26;
            v27 = *((_OWORD *)a5 + 3);
            v35 = *((_OWORD *)a5 + 2);
            v36 = v27;
            v21 = (const void *)NL::DateFormatter::copyDisplayForDate(this, (const NL::DatePeriod *)v32, 0, 0);
            v28 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
            NL::DatePeriod::setDisplayKey(v32, v28);
            v29 = (const void *)NL::DateFormatter::copyDisplayForDate(this, (const NL::DatePeriod *)v32, 0, 0);
            v30 = CFBundleCopyLocalizedString(BundleWithIdentifier, CFSTR("EVERY_ORDINAL_FORMATTED_DATE"), CFSTR("EVERY_ORDINAL_FORMATTED_DATE"), CFSTR("Localizable"));
            BundleWithIdentifier = 0;
            if (v30)
            {
              if (v29 && v21)
                BundleWithIdentifier = (__CFBundle *)NLPCreateStringWithValidatedFormat(CFSTR("%1@%2@"), v30, v29, v21);
              CFRelease(v30);
            }
            if (v29)
              CFRelease(v29);
            if (v21)
              goto LABEL_19;
            goto LABEL_20;
          }
          BundleWithIdentifier = 0;
          if (ArrayBySeparatingStrings)
LABEL_23:
            CFRelease(ArrayBySeparatingStrings);
        }
      }
    }
  }
  return BundleWithIdentifier;
}

void sub_1A18B73E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  const void *v6;
  va_list va;
  const void *v8;
  va_list va1;
  const void *v10;
  va_list va2;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v8 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v10 = va_arg(va3, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va2, 0);
  NL::DatePeriod::~DatePeriod((const void **)va3);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)(v4 - 72), 0);
  _Unwind_Resume(a1);
}

CFStringRef NL::DateFormatter::copyISODisplayForDateComponents(NL::DateFormatter *this, __CFCalendar *a2, const NL::DateComponents *a3)
{
  const __CFAllocator *v6;
  const __CFDate *v7;
  const __CFDate *v8;
  CFStringRef StringWithDate;
  std::string __p;
  CFAbsoluteTime at;

  if (NL::DateComponents::isEmpty(a3))
    return 0;
  at = 0.0;
  NL::DateComponents::getShortFormat(a3, a2, **(const __CFDate ***)this, &at, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], at);
  if (!v7)
    return 0;
  v8 = v7;
  StringWithDate = CFDateFormatterCreateStringWithDate(v6, *((CFDateFormatterRef *)this + 2), v7);
  CFRelease(v8);
  return StringWithDate;
}

void sub_1A18B7548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFDate const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFBundle *NL::DateFormatter::copyDisplayStringWithStartAndEndDateForRange(NL::DateFormatter *this, const __CFString *a2, int a3, const __CFString *a4, int a5)
{
  __CFBundle *Copy;
  __CFBundle *BundleWithIdentifier;
  const __CFString *v11;
  const __CFString *v12;
  CFTypeRef v13;
  const __CFString *v14;
  CFStringRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  const __CFString *v18;
  CFStringRef v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFAllocator *v23;
  const __CFString *MutableCopy;
  __CFString *v25;
  const __CFString *v26;
  const __CFString *theString;
  const __CFString *v29;
  const __CFString *v30;
  CFTypeRef cf;
  CFRange v32;
  CFRange v33;

  Copy = 0;
  if (!a2)
    return Copy;
  if (!a4)
    return Copy;
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.NLP"));
  Copy = BundleWithIdentifier;
  if (!BundleWithIdentifier)
    return Copy;
  v30 = 0;
  cf = 0;
  if (a3 == 1)
  {
    v12 = (const __CFString *)CFRetain(a2);
    v30 = v12;
  }
  else if (a3 == 3)
  {
    if (!a5)
    {
      v18 = CFBundleCopyLocalizedString(BundleWithIdentifier, CFSTR("TO_DATE"), CFSTR("TO_DATE"), CFSTR("Localizable"));
      if (v18)
      {
        v19 = NLPCreateStringWithValidatedFormat(CFSTR("%@"), v18, a2);
        nlp::CFScopedPtr<__CFString const*>::reset(&cf, v19);
        CFRelease(v18);
      }
      goto LABEL_28;
    }
    v11 = CFBundleCopyLocalizedString(BundleWithIdentifier, CFSTR("FROM_DATE"), CFSTR("FROM_DATE"), CFSTR("Localizable"));
    if (v11)
    {
      cf = NLPCreateStringWithValidatedFormat(CFSTR("%@"), v11, a2);
      CFRelease(v11);
    }
    v12 = 0;
  }
  else
  {
    v13 = CFRetain(a2);
    v12 = 0;
    cf = v13;
  }
  if (a5 == 1)
  {
    if (v12)
    {
      v16 = CFRetain(a4);
      v17 = cf;
      if (cf)
        goto LABEL_24;
      goto LABEL_25;
    }
    v20 = (const __CFString *)CFRetain(a4);
LABEL_32:
    v12 = v20;
    v30 = v20;
    goto LABEL_33;
  }
  if (a5 == 3)
  {
    if (v12)
    {
      v14 = CFBundleCopyLocalizedString(Copy, CFSTR("FROM_DATE"), CFSTR("FROM_DATE"), CFSTR("Localizable"));
      if (v14)
      {
        v15 = NLPCreateStringWithValidatedFormat(CFSTR("%@"), v14, a4);
        if (cf)
          CFRelease(cf);
        cf = v15;
        CFRelease(v14);
      }
    }
    else
    {
      v21 = CFBundleCopyLocalizedString(Copy, CFSTR("TO_DATE"), CFSTR("TO_DATE"), CFSTR("Localizable"));
      if (v21)
      {
        v12 = NLPCreateStringWithValidatedFormat(CFSTR("%@"), v21, a4);
        v30 = v12;
        CFRelease(v21);
      }
      else
      {
        v12 = 0;
      }
    }
    goto LABEL_33;
  }
  if (!v12)
  {
LABEL_28:
    v20 = (const __CFString *)CFRetain(a4);
    goto LABEL_32;
  }
  v16 = CFRetain(a4);
  v17 = cf;
  if (cf)
LABEL_24:
    CFRelease(v17);
LABEL_25:
  cf = v16;
LABEL_33:
  v22 = CFBundleCopyLocalizedString(Copy, CFSTR("DATE1_DATE2"), CFSTR("DATE1_DATE2"), CFSTR("Localizable"));
  v29 = v22;
  if (v22)
  {
    v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v22);
    v25 = (__CFString *)MutableCopy;
    theString = MutableCopy;
    if (MutableCopy)
    {
      v26 = (const __CFString *)cf;
      v32.length = CFStringGetLength(MutableCopy);
      v32.location = 0;
      CFStringFindAndReplace(v25, CFSTR("%@1"), v26, v32, 0);
      v33.length = CFStringGetLength(v25);
      v33.location = 0;
      CFStringFindAndReplace(v25, CFSTR("%@2"), v12, v33, 0);
      Copy = (__CFBundle *)CFStringCreateCopy(v23, theString);
      CFRelease(theString);
    }
    else
    {
      Copy = 0;
    }
    if (v29)
      CFRelease(v29);
  }
  else
  {
    Copy = 0;
  }
  if (v30)
    CFRelease(v30);
  if (cf)
    CFRelease(cf);
  return Copy;
}

void sub_1A18B78E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void *v5;
  va_list va;
  const void *v7;
  va_list va1;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v7 = va_arg(va2, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va2, 0);
  _Unwind_Resume(a1);
}

CFStringRef NL::DateFormatter::copyDisplayStringForDates(NL::DateFormatter *this, const __CFString *a2, const __CFString *a3)
{
  CFStringRef Copy;
  __CFBundle *BundleWithIdentifier;
  const __CFString *v7;
  const __CFString *v8;
  const __CFAllocator *v9;
  const __CFString *MutableCopy;
  __CFString *v11;
  CFRange v13;
  CFRange v14;

  Copy = 0;
  if (a2 && a3)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.NLP"));
    if (BundleWithIdentifier
      && (v7 = CFBundleCopyLocalizedString(BundleWithIdentifier, CFSTR("DATE1_DATE2"), CFSTR("DATE1_DATE2"), CFSTR("Localizable"))) != 0)
    {
      v8 = v7;
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v7);
      v11 = (__CFString *)MutableCopy;
      if (MutableCopy)
      {
        v13.length = CFStringGetLength(MutableCopy);
        v13.location = 0;
        CFStringFindAndReplace(v11, CFSTR("%@1"), a2, v13, 0);
        v14.length = CFStringGetLength(v11);
        v14.location = 0;
        CFStringFindAndReplace(v11, CFSTR("%@2"), a3, v14, 0);
        Copy = CFStringCreateCopy(v9, v11);
        CFRelease(v11);
      }
      else
      {
        Copy = 0;
      }
      CFRelease(v8);
    }
    else
    {
      return 0;
    }
  }
  return Copy;
}

void sub_1A18B7AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFDictionary *NL::DateFormatter::copyComponentsForDateComponents(NL::DateFormatter *this, const NL::DateComponents *a2)
{
  __CFDictionary *Mutable;
  const __CFAllocator *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  char *v15;
  int v16;
  CFNumberRef v17;

  if (NL::DateComponents::isEmpty(a2))
    return 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*(_DWORD *)a2)
  {
    v5 = CFNumberCreate(v4, kCFNumberIntType, a2);
    CFDictionarySetValue(Mutable, CFSTR("d"), v5);
    if (v5)
      CFRelease(v5);
  }
  if (*((_DWORD *)a2 + 9))
  {
    v6 = CFNumberCreate(v4, kCFNumberIntType, (char *)a2 + 36);
    CFDictionarySetValue(Mutable, CFSTR("E"), v6);
    if (v6)
      CFRelease(v6);
  }
  if (*((_DWORD *)a2 + 10))
  {
    v7 = CFNumberCreate(v4, kCFNumberIntType, (char *)a2 + 40);
    CFDictionarySetValue(Mutable, CFSTR("F"), v7);
    if (v7)
      CFRelease(v7);
  }
  if (*((_DWORD *)a2 + 1))
  {
    v8 = CFNumberCreate(v4, kCFNumberIntType, (char *)a2 + 4);
    CFDictionarySetValue(Mutable, CFSTR("M"), v8);
    if (v8)
      CFRelease(v8);
  }
  if (*((_DWORD *)a2 + 2))
  {
    v9 = CFNumberCreate(v4, kCFNumberIntType, (char *)a2 + 8);
    CFDictionarySetValue(Mutable, CFSTR("y"), v9);
    if (v9)
      CFRelease(v9);
  }
  if (*((_DWORD *)a2 + 11))
  {
    v10 = CFNumberCreate(v4, kCFNumberIntType, (char *)a2 + 44);
    CFDictionarySetValue(Mutable, CFSTR("W"), v10);
    if (v10)
      CFRelease(v10);
  }
  if (*((_DWORD *)a2 + 12))
  {
    v11 = CFNumberCreate(v4, kCFNumberIntType, (char *)a2 + 48);
    CFDictionarySetValue(Mutable, CFSTR("w"), v11);
    if (v11)
      CFRelease(v11);
  }
  if (*((_DWORD *)a2 + 13))
  {
    v12 = CFNumberCreate(v4, kCFNumberIntType, (char *)a2 + 52);
    CFDictionarySetValue(Mutable, CFSTR("Y"), v12);
    if (v12)
      CFRelease(v12);
  }
  if (*((_DWORD *)a2 + 6))
  {
    v13 = CFNumberCreate(v4, kCFNumberIntType, (char *)a2 + 24);
    CFDictionarySetValue(Mutable, CFSTR("H"), v13);
    if (v13)
      CFRelease(v13);
  }
  if (*((_DWORD *)a2 + 7))
  {
    v14 = CFNumberCreate(v4, kCFNumberIntType, (char *)a2 + 28);
    CFDictionarySetValue(Mutable, CFSTR("m"), v14);
    if (v14)
      CFRelease(v14);
  }
  v16 = *((_DWORD *)a2 + 8);
  v15 = (char *)a2 + 32;
  if (v16)
  {
    v17 = CFNumberCreate(v4, kCFNumberIntType, v15);
    CFDictionarySetValue(Mutable, CFSTR("s"), v17);
    if (v17)
      CFRelease(v17);
  }
  return Mutable;
}

void sub_1A18B7E00(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

CFArrayRef *NLBranchGetRoot(CFArrayRef *result)
{
  CFArrayRef *v1;
  unsigned int valuePtr;

  if (result)
  {
    v1 = result;
    valuePtr = 0;
    result = (CFArrayRef *)CFArrayGetCount(*result);
    if (result)
    {
      result = (CFArrayRef *)CFArrayGetValueAtIndex(*v1, 0);
      if (result)
      {
        CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, &valuePtr);
        return (CFArrayRef *)valuePtr;
      }
    }
  }
  return result;
}

CFArrayRef *NLBranchGetLeaf(CFArrayRef *result)
{
  CFArrayRef *v1;
  CFIndex Count;
  const __CFNumber *ValueAtIndex;
  unsigned int valuePtr;

  if (result)
  {
    v1 = result;
    valuePtr = 0;
    Count = CFArrayGetCount(*result);
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*v1, Count - 1);
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    return (CFArrayRef *)valuePtr;
  }
  return result;
}

uint64_t NLBranchGetLocation(uint64_t a1)
{
  if (a1)
    return *(__int16 *)(a1 + 18);
  else
    return -1;
}

uint64_t NLBranchGetTokenSpan(uint64_t a1)
{
  if (a1)
    return *(__int16 *)(a1 + 14);
  else
    return -1;
}

uint64_t NLBranchGetScore(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 8);
  return result;
}

_DWORD *branchRetain(const __CFAllocator *a1, _DWORD *a2)
{
  _DWORD *result;

  result = a2;
  if (a2)
    ++a2[6];
  return result;
}

void branchRelease(const __CFAllocator *a1, CFTypeRef *a2)
{
  int v3;

  if (a2)
  {
    v3 = *((_DWORD *)a2 + 6) - 1;
    *((_DWORD *)a2 + 6) = v3;
    if (!v3)
    {
      CFRelease(*a2);
      free(a2);
    }
  }
}

BOOL NLBranchIsEqual(CFArrayRef *a1, CFArrayRef *a2)
{
  CFIndex Count;
  CFIndex v5;
  unsigned int Root;
  unsigned int Leaf;
  int v8;
  int v9;

  if (!a1)
  {
    Count = 0;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  Count = CFArrayGetCount(*a1);
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v5 = CFArrayGetCount(*a2);
LABEL_6:
  if (Count != v5)
    return 0;
  Root = NLBranchGetRoot(a1);
  if (Root != NLBranchGetRoot(a2))
    return 0;
  Leaf = NLBranchGetLeaf(a1);
  if (Leaf != NLBranchGetLeaf(a2))
    return 0;
  if (a1)
  {
    v8 = *((unsigned __int16 *)a1 + 6);
    if (a2)
    {
LABEL_11:
      v9 = *((unsigned __int16 *)a2 + 6);
      return v8 == v9;
    }
  }
  else
  {
    v8 = 0xFFFF;
    if (a2)
      goto LABEL_11;
  }
  v9 = 0xFFFF;
  return v8 == v9;
}

void NLBranchRelease(const __CFAllocator *a1)
{
  branchRelease(a1, (CFTypeRef *)a1);
}

uint64_t NLBranchRetain(uint64_t result)
{
  if (result)
    ++*(_DWORD *)(result + 24);
  return result;
}

_DWORD *parseRetain(const __CFAllocator *a1, _DWORD *a2)
{
  _DWORD *result;

  result = a2;
  if (a2)
    ++a2[4];
  return result;
}

void parseRelease(const __CFAllocator *a1, CFTypeRef *a2)
{
  int v3;

  if (a2)
  {
    v3 = *((_DWORD *)a2 + 4) - 1;
    *((_DWORD *)a2 + 4) = v3;
    if (!v3)
    {
      CFRelease(*a2);
      free(a2);
    }
  }
}

_QWORD *NLParseCreate(CFIndex a1)
{
  _QWORD *v2;
  CFArrayCallBacks callBacks;

  v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200405AF6BDC9uLL);
  if (v2)
  {
    callBacks.retain = (CFArrayRetainCallBack)branchRetain;
    callBacks.release = (CFArrayReleaseCallBack)branchRelease;
    *v2 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, &callBacks);
    v2[1] = 0xFFFFFFFF00000000;
    *((_DWORD *)v2 + 4) = 1;
  }
  return v2;
}

void NLParseAddBranch(uint64_t a1, __int16 *value)
{
  int v4;
  int v5;
  int v6;
  int v7;
  __int16 v8;

  if (a1 && value)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)a1, value);
    v4 = *(__int16 *)(a1 + 12);
    v5 = value[7];
    if (v4 < 0)
      LOWORD(v4) = value[7];
    *(_WORD *)(a1 + 12) = v4;
    v6 = *(__int16 *)(a1 + 14) + (__int16)v4;
    v7 = value[8] + v5;
    v8 = v7 - v4;
    if (v6 >= v7)
      v8 = *(_WORD *)(a1 + 14);
    *(_WORD *)(a1 + 14) = v8;
    *(_DWORD *)(a1 + 8) += *((_DWORD *)value + 2);
  }
}

uint64_t NLParseGetTokenCount(uint64_t result)
{
  if (result)
    return *(__int16 *)(result + 14) - (uint64_t)*(__int16 *)(result + 12);
  return result;
}

void NLParseEnumerateBranches(CFArrayRef *a1, uint64_t a2)
{
  uint64_t Count;
  CFIndex v5;
  CFArrayRef *v6;
  CFArrayRef *ValueAtIndex;
  int context;
  char v9;
  CFRange v10;

  if (a1)
  {
    if (a2)
    {
      v9 = 0;
      Count = CFArrayGetCount(*a1);
      context = 0;
      v10.location = 0;
      v10.length = Count;
      CFArraySortValues(*a1, v10, (CFComparatorFunction)NLBranchCompare, &context);
      if (Count >= 1)
      {
        v5 = 0;
        v6 = 0;
        do
        {
          ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(*a1, v5);
          if (!v6 || !NLBranchIsEqual(v6, ValueAtIndex))
          {
            (*(void (**)(uint64_t, CFArrayRef *, char *))(a2 + 16))(a2, ValueAtIndex, &v9);
            v6 = ValueAtIndex;
            if (v9)
              break;
          }
          ++v5;
        }
        while (Count != v5);
      }
    }
  }
}

uint64_t NLBranchCompare(__int16 *a1, __int16 *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  if (!a1)
  {
    v4 = 0;
    v3 = -1;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v6 = 0;
    v5 = -1;
    goto LABEL_6;
  }
  v3 = a1[7];
  v4 = a1[8];
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v5 = a2[7];
  v6 = a2[8];
LABEL_6:
  if (v3 == v5 && v4 == v6)
  {
    if (a1)
    {
      v7 = (unsigned __int16)a1[6];
      if (a2)
      {
LABEL_10:
        v8 = (unsigned __int16)a2[6];
        goto LABEL_22;
      }
    }
    else
    {
      v7 = 0xFFFF;
      if (a2)
        goto LABEL_10;
    }
    v8 = 0xFFFF;
LABEL_22:
    if (v7 == v8)
    {
      if (a1)
      {
        v12 = *((_DWORD *)a1 + 2);
        if (a2)
        {
LABEL_25:
          v13 = *((_DWORD *)a2 + 2);
          goto LABEL_31;
        }
      }
      else
      {
        v12 = 0;
        if (a2)
          goto LABEL_25;
      }
      v13 = 0;
LABEL_31:
      if (v12 == v13)
        return 0;
      if (a1)
      {
        v16 = *((_DWORD *)a1 + 2);
        if (a2)
        {
LABEL_35:
          v17 = *((_DWORD *)a2 + 2);
          goto LABEL_43;
        }
      }
      else
      {
        v16 = 0;
        if (a2)
          goto LABEL_35;
      }
      v17 = 0;
LABEL_43:
      if (v16 > v17)
        return -1;
      else
        return 1;
    }
    if (a1)
    {
      v14 = *((_DWORD *)a1 + 2);
      if (a2)
      {
LABEL_28:
        v15 = *((_DWORD *)a2 + 2);
        goto LABEL_38;
      }
    }
    else
    {
      v14 = 0;
      if (a2)
        goto LABEL_28;
    }
    v15 = 0;
LABEL_38:
    if (v14 < v15)
      return -1;
    else
      return 1;
  }
  if (v3 < v5)
    v9 = -1;
  else
    v9 = 1;
  if (v4 > v6)
    v10 = -1;
  else
    v10 = 1;
  if (v3 == v5)
    return v10;
  else
    return v9;
}

_QWORD *NLGraphStructureStackCreate(void)
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v7;

  v0 = malloc_type_calloc(1uLL, 0x78uLL, 0x10300403A992469uLL);
  v1 = v0;
  if (v0)
  {
    *v0 = 0x4000000000;
    v0[1] = malloc_type_calloc(0x40uLL, 0x1CuLL, 0x1000040028C9EA4uLL);
    v1[2] = 0;
    *((_DWORD *)v1 + 6) = 128;
    v1[4] = malloc_type_calloc(0x80uLL, 4uLL, 0x100004052888210uLL);
    *((_DWORD *)v1 + 10) = 0x40000;
    v1[6] = malloc_type_calloc(4uLL, 4uLL, 0x100004052888210uLL);
    *((_DWORD *)v1 + 14) = 0x40000;
    v2 = malloc_type_calloc(4uLL, 4uLL, 0x100004052888210uLL);
    v1[10] = 0;
    v1[8] = v2;
    v1[11] = 0;
    *((_BYTE *)v1 + 72) = 0;
    v7 = 0uLL;
    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)(v1 + 10), &v7);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v1[13] = 0;
    *((_DWORD *)v1 + 28) = 1;
  }
  return v1;
}

uint64_t NLGraphStructureSetGrammar(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v2 = result;
    std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)(result + 80), a2);
    result = *(_QWORD *)(v2 + 80);
    if (result)
    {
      if (!*(_DWORD *)(v2 + 16))
      {
        v4 = 0;
        v5 = &v4;
        v6 = 0x2000000000;
        v7 = 0;
        v3[0] = MEMORY[0x1E0C809B0];
        v3[1] = 0x40000000;
        v3[2] = ___Z26NLGraphStructureSetGrammarP22_NLGraphStructureStackNSt3__110shared_ptrIN2NL13SearchGrammarEEE_block_invoke;
        v3[3] = &unk_1E45CF650;
        v3[4] = &v4;
        NL::SearchGrammar::termIDs(result, (uint64_t)v3);
        *(_DWORD *)(v2 + 20) = *((_DWORD *)v5 + 6);
        _Block_object_dispose(&v4, 8);
      }
      return NLGraphStructureUpdate(v2);
    }
  }
  return result;
}

void sub_1A18B86A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z26NLGraphStructureSetGrammarP22_NLGraphStructureStackNSt3__110shared_ptrIN2NL13SearchGrammarEEE_block_invoke(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  if (*(_DWORD *)(v2 + 24) < a2)
    *(_DWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t NLGraphStructureUpdate(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    result = NL::SearchGrammar::hasResources(*(NL::SearchGrammar **)(result + 80));
    if ((_DWORD)result)
      result = NL::SearchGrammar::tokenDelayed(*(NL::SearchGrammar **)(v1 + 80));
    *(_DWORD *)(v1 + 96) = result;
  }
  return result;
}

void NLGraphStructureStackAdd(uint64_t a1, int a2, int a3, __int16 a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  int v13;
  uint64_t v14;
  BOOL isCombinable;
  unint64_t v16;
  unsigned int v17;
  void (*v18)(uint64_t, uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void *v23;
  uint64_t v24;
  char v25;

  if (a1)
  {
    gssSetNode(a1, a3, a4, 0, 0, 1, 0);
    if (a2)
    {
      v8 = gssSetNodeWithNode(a1, a2, v7, 1, 0, 0);
      if (NL::SearchGrammar::isInferred(*(NL::SearchGrammar **)(a1 + 80), a2)
        && (v8 & 0x80000000) == 0
        && *(_DWORD *)a1 > v8)
      {
        v9 = *(_QWORD *)(a1 + 8);
        if (v9)
          *(_BYTE *)(v9 + 28 * v8) |= 8u;
      }
      if (*(_WORD *)(a1 + 56))
      {
        v10 = *(unsigned __int8 *)(a1 + 72);
        if (v10 + 1 >= a3)
        {
          isCombinable = NL::SearchGrammar::isCombinable(*(NL::SearchGrammar **)(a1 + 80), a2);
          v11 = isCombinable;
          if (v10 < a3 && !isCombinable && *(_WORD *)(a1 + 56))
          {
            v16 = 0;
            do
            {
              if (*(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v16) >= *(_DWORD *)a1)
                v17 = -1;
              else
                v17 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v16);
              gssCombinableShift(a1, v17, v8);
              ++v16;
            }
            while (v16 < *(unsigned __int16 *)(a1 + 56));
          }
        }
        else
        {
          v11 = NL::SearchGrammar::isCombinable(*(NL::SearchGrammar **)(a1 + 80), a2);
          gssPopStack(a1);
        }
        if (v11)
          goto LABEL_28;
      }
      else if (NL::SearchGrammar::isCombinable(*(NL::SearchGrammar **)(a1 + 80), a2))
      {
LABEL_28:
        *(_BYTE *)(a1 + 72) = a3;
        v20 = MEMORY[0x1E0C809B0];
        v21 = 0x40000000;
        v18 = (void (*)(uint64_t, uint64_t))___ZL6gssAddP22_NLGraphStructureStackjll_block_invoke;
        v19 = &__block_descriptor_tmp_13_1;
LABEL_32:
        v22 = v18;
        v23 = v19;
        v24 = a1;
LABEL_34:
        gssShift(a1, v8, (uint64_t)&v20);
        return;
      }
      v12 = 0;
      v13 = *(unsigned __int16 *)(a1 + 56);
      if (a3 && *(_WORD *)(a1 + 40))
      {
        if (*(_WORD *)(a1 + 56))
        {
          v14 = *(unsigned __int8 *)(a1 + 72);
          if (v14 != a3)
          {
            v12 = 0;
            goto LABEL_30;
          }
        }
        gssCombine(a1, v8, 0);
        v13 = *(unsigned __int16 *)(a1 + 56);
        v12 = 1;
      }
      if (!v13)
        goto LABEL_33;
      v14 = *(unsigned __int8 *)(a1 + 72);
LABEL_30:
      if (v14 < a3)
      {
        v20 = MEMORY[0x1E0C809B0];
        v21 = 0x40000000;
        v18 = (void (*)(uint64_t, uint64_t))___ZL6gssAddP22_NLGraphStructureStackjll_block_invoke_2;
        v19 = &__block_descriptor_tmp_14_0;
        goto LABEL_32;
      }
LABEL_33:
      v20 = MEMORY[0x1E0C809B0];
      v21 = 0x40000000;
      v22 = ___ZL6gssAddP22_NLGraphStructureStackjll_block_invoke_3;
      v23 = &__block_descriptor_tmp_15;
      v24 = a1;
      v25 = v12;
      goto LABEL_34;
    }
  }
}

__CFArray *NLGraphStructureStackCopyParsesWithCallback(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, CFArrayRef *, CFArrayRef *, _QWORD))
{
  CFIndex v6;
  __CFArray *v7;
  unint64_t i;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  __int16 v12;
  char *v13;
  const __CFAllocator *v14;
  const __CFAllocator *v15;
  CFArrayCallBacks callBacks;
  CFRange v18;

  if (!a1)
    return 0;
  gssPopStack(a1);
  v6 = *(unsigned __int16 *)(a1 + 40);
  if (!*(_WORD *)(a1 + 40))
    return 0;
  callBacks.retain = (CFArrayRetainCallBack)parseRetain;
  callBacks.release = (CFArrayReleaseCallBack)parseRelease;
  v7 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, &callBacks);
  if (*(_WORD *)(a1 + 40))
  {
    for (i = 0; i < *(unsigned __int16 *)(a1 + 40); ++i)
    {
      v9 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * i);
      if (v9 >= *(_DWORD *)a1)
      {
        v11 = NLParseCreate(0);
        v10 = 0;
        v12 = -1;
        v9 = -1;
      }
      else
      {
        if ((v9 & 0x80000000) != 0)
        {
          v11 = NLParseCreate(0);
          v10 = 0;
        }
        else
        {
          v10 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 28 * v9 + 8);
          v11 = NLParseCreate(0);
          if (*(_DWORD *)a1 > v9)
          {
            v12 = *(_WORD *)(*(_QWORD *)(a1 + 8) + 28 * v9 + 2);
            goto LABEL_12;
          }
        }
        v12 = -1;
      }
LABEL_12:
      v13 = NLBranchCreate(v12, 0);
      NLBranchAddNode((uint64_t)v13, v10, 0);
      *(_OWORD *)&callBacks.version = xmmword_1A18D3A50;
      gssVisitState(a1, v9, (uint64_t)v11, (uint64_t)v13, &callBacks.version, 0, a2, a3);
      branchRelease(v14, (CFTypeRef *)v13);
      if (v11 && v11[2])
        CFArrayAppendValue(v7, v11);
      parseRelease(v15, (CFTypeRef *)v11);
    }
  }
  if (!CFArrayGetCount(v7))
  {
    CFRelease(v7);
    return 0;
  }
  v18.length = CFArrayGetCount(v7);
  v18.location = 0;
  CFArraySortValues(v7, v18, (CFComparatorFunction)NLParseCompare, 0);
  return v7;
}

void NLGraphStructureStackReset(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 4))
    {
      v2 = 0;
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(a1 + 8) + v2;
        *(_QWORD *)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        *(_QWORD *)(v4 + 16) = 0;
        ++v3;
        v2 += 28;
      }
      while (v3 < *(unsigned int *)(a1 + 4));
    }
    *(_DWORD *)a1 = 0;
    bzero(*(void **)(a1 + 32), *(unsigned int *)(a1 + 24));
    bzero(*(void **)(a1 + 48), *(unsigned __int16 *)(a1 + 42));
    bzero(*(void **)(a1 + 64), *(unsigned __int16 *)(a1 + 58));
    *(_DWORD *)(a1 + 16) = 0;
    *(_WORD *)(a1 + 56) = 0;
    *(_WORD *)(a1 + 40) = 0;
  }
}

void NLGraphStructureStackRelease(uint64_t a1)
{
  int v2;

  if (a1)
  {
    v2 = *(_DWORD *)(a1 + 112) - 1;
    *(_DWORD *)(a1 + 112) = v2;
    if (!v2)
    {
      NLGraphStructureStackReset(a1);
      std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 80);
      free(*(void **)(a1 + 8));
      free(*(void **)(a1 + 32));
      free(*(void **)(a1 + 64));
      free(*(void **)(a1 + 48));
      free((void *)a1);
    }
  }
}

uint64_t gssGetRHSAtIndex(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t result;

  if ((a2 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 <= a2)
    return 0xFFFFFFFFLL;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(unsigned __int16 *)(v4 + 28 * a2 + 12) <= a3)
    return 0xFFFFFFFFLL;
  v5 = *(_DWORD *)(v4 + 28 * a2 + 16) + a3;
  if (v5 >= *(_DWORD *)(a1 + 16))
    return 0xFFFFFFFFLL;
  result = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v5);
  if (result >= v3 || (result & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  return result;
}

double gssSetNode(uint64_t a1, __int16 a2, __int16 a3, int a4, int a5, int a6, int a7)
{
  unsigned int v14;
  unsigned int v15;
  void *v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  double result;

  if (a1)
  {
    v14 = *(_DWORD *)(a1 + 4);
    if (*(_DWORD *)a1 + 1 >= v14)
    {
      v15 = 2 * v14;
      *(_DWORD *)(a1 + 4) = v15;
      v16 = malloc_type_realloc(*(void **)(a1 + 8), 28 * v15, 0x1000040028C9EA4uLL);
      if (v16)
        *(_QWORD *)(a1 + 8) = v16;
    }
  }
  v17 = (*(_DWORD *)a1)++;
  v18 = (unsigned __int16)v17;
  v19 = *(_QWORD *)(a1 + 8) + 28 * (unsigned __int16)v17;
  if (a6)
    v20 = 5;
  else
    v20 = 1;
  if (a7)
    v20 |= 2u;
  *(_BYTE *)v19 = v20;
  *(_DWORD *)(v19 + 24) = v18;
  *(_WORD *)(v19 + 2) = a2;
  *(_WORD *)(v19 + 4) = a3;
  result = NAN;
  *(_QWORD *)(v19 + 16) = -1;
  *(_DWORD *)(v19 + 8) = a4;
  *(_DWORD *)(v19 + 12) = a5;
  return result;
}

uint64_t gssSetNodeWithNode(uint64_t a1, int a2, unsigned int a3, int a4, unsigned int a5, int *a6)
{
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  if ((a3 & 0x80000000) != 0 || *(_DWORD *)a1 <= a3)
  {
    v11 = -1;
    v12 = -1;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8) + 28 * a3;
    v11 = *(_WORD *)(v10 + 2);
    v12 = *(_WORD *)(v10 + 4);
  }
  gssSetNode(a1, v11, v12, a2, (__int16)a5, 0, a4);
  v13 = *(_QWORD *)(a1 + 8);
  v15 = v14;
  *(_DWORD *)(v13 + 28 * v14 + 20) = a3;
  if (a5)
  {
    gssRefsResize((void *)a1, a5);
    *(_DWORD *)(v13 + 28 * v15 + 16) = *(_DWORD *)(a1 + 16);
    v16 = *(_QWORD *)(a1 + 32);
    v17 = a5;
    do
    {
      v18 = *a6++;
      v19 = *(unsigned int *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v19 + 1;
      *(_DWORD *)(v16 + 4 * v19) = v18 + 100000;
      --v17;
    }
    while (v17);
  }
  return *(unsigned int *)(v13 + 28 * v15 + 24);
}

void gssPopStack(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD v10[5];
  char v11;
  _QWORD v12[6];
  _QWORD v13[3];
  BOOL v14;

  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2000000000;
  v2 = *(unsigned __int16 *)(a1 + 40);
  v14 = *(_WORD *)(a1 + 40) != 0;
  v3 = *(unsigned __int16 *)(a1 + 56);
  if (!v2)
  {
    if (!*(_WORD *)(a1 + 56))
      goto LABEL_25;
    v7 = 0;
    v8 = MEMORY[0x1E0C809B0];
    while (1)
    {
      v9 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v7);
      if (v9 >= *(_DWORD *)a1)
        break;
      if ((v9 & 0x80000000) != 0 || *(_DWORD *)(*(_QWORD *)(a1 + 8) + 28 * v9 + 20))
        goto LABEL_22;
LABEL_24:
      if (++v7 >= (unint64_t)v3)
        goto LABEL_25;
    }
    v9 = -1;
LABEL_22:
    if (gssNodeHasRHS(a1, v9))
    {
      v12[0] = v8;
      v12[1] = 0x40000000;
      v12[2] = ___ZL11gssPopStackP22_NLGraphStructureStack_block_invoke;
      v12[3] = &unk_1E45D05C8;
      v12[4] = v13;
      v12[5] = a1;
      gssShift(a1, v9, (uint64_t)v12);
      v3 = *(unsigned __int16 *)(a1 + 56);
    }
    goto LABEL_24;
  }
  if (*(_WORD *)(a1 + 56))
  {
    v4 = 0;
    v5 = MEMORY[0x1E0C809B0];
    while (1)
    {
      v6 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v4);
      if (v6 >= *(_DWORD *)a1)
        break;
      if ((v6 & 0x80000000) != 0 || *(_DWORD *)(*(_QWORD *)(a1 + 8) + 28 * v6 + 20))
        goto LABEL_9;
LABEL_13:
      if (++v4 >= (unint64_t)v3)
        goto LABEL_25;
    }
    v6 = 0xFFFFFFFFLL;
LABEL_9:
    if (gssNodeHasRHS(a1, v6))
    {
      v11 = 0;
      gssCombine(a1, v6, &v11);
      if (!v11)
      {
        v10[0] = v5;
        v10[1] = 0x40000000;
        v10[2] = ___ZL11gssPopStackP22_NLGraphStructureStack_block_invoke_2;
        v10[3] = &__block_descriptor_tmp_17_0;
        v10[4] = a1;
        gssShift(a1, v6, (uint64_t)v10);
      }
      v3 = *(unsigned __int16 *)(a1 + 56);
    }
    goto LABEL_13;
  }
LABEL_25:
  *(_WORD *)(a1 + 56) = 0;
  _Block_object_dispose(v13, 8);
}

void sub_1A18B906C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL gssCombinableShift(uint64_t a1, unsigned int a2, uint64_t a3)
{
  BOOL v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  _BOOL8 v14;
  _QWORD v16[6];
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  unsigned __int8 v23;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  if (a1)
    v6 = (int)a3 < 0;
  else
    v6 = 1;
  v7 = v6;
  v8 = a3;
  do
  {
    if ((v7 & 1) != 0 || *(_DWORD *)a1 <= a3)
      v9 = 0;
    else
      v9 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 28 * v8 + 8);
    v23 = 0;
    __gssNodeReduce(a1, a2, a3, &v22, &v23);
    v10 = v23;
    *((_BYTE *)v19 + 24) = v23;
    if (v10 || !NL::SearchGrammar::hasExpansions(*(NL::SearchGrammar **)(a1 + 80), v9))
    {
      v11 = 0;
    }
    else
    {
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 0x40000000;
      v16[2] = ___ZL18gssCombinableShiftP22_NLGraphStructureStackii_block_invoke;
      v16[3] = &unk_1E45D0610;
      v16[4] = &v18;
      v16[5] = a1;
      v17 = a2;
      gssShift(a1, a3, (uint64_t)v16);
      v11 = 1;
    }
    v12 = NL::SearchGrammar::hasExpansions(*(NL::SearchGrammar **)(a1 + 80), v9);
    if (*((_BYTE *)v19 + 24))
      v13 = 1;
    else
      v13 = v11;
  }
  while (v12 && !v13);
  v14 = *((unsigned __int8 *)v19 + 24) != 0;
  _Block_object_dispose(&v18, 8);
  return v14;
}

void sub_1A18B91F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t gssCombine(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  __int16 v8;
  char v9;

  if (*(_WORD *)(result + 40))
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v6);
      v9 = 0;
      result = __gssNodeReduce(v5, v7, a2, &v8, &v9);
      if (a3)
      {
        if (v9)
          *a3 = v9;
      }
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(v5 + 40));
  }
  return result;
}

void gssShift(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD v5[7];
  unsigned int v6;
  _QWORD v7[3];
  char v8;

  v3 = 0;
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2000000000;
  v8 = 0;
  v4 = *(_QWORD *)(a1 + 80);
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)a1 <= a2)
      v3 = 0;
    else
      v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 28 * a2 + 8);
  }
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZL8gssShiftP22_NLGraphStructureStackiU13block_pointerFviPbE_block_invoke;
  v5[3] = &unk_1E45D0638;
  v5[5] = v7;
  v5[6] = a1;
  v6 = a2;
  v5[4] = a3;
  NL::SearchGrammar::expansions(v4, v3, (uint64_t)v5);
  _Block_object_dispose(v7, 8);
}

void sub_1A18B9350(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL6gssAddP22_NLGraphStructureStackjll_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unsigned int v6;

  result = *(_QWORD *)(a1 + 32);
  if (*(_WORD *)(result + 56))
  {
    v5 = 0;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)(result + 64) + 4 * v5) >= *(_DWORD *)result)
        v6 = -1;
      else
        v6 = *(_DWORD *)(*(_QWORD *)(result + 64) + 4 * v5);
      gssCombinableShift(result, v6, a2);
      ++v5;
      result = *(_QWORD *)(a1 + 32);
    }
    while (v5 < *(unsigned __int16 *)(result + 56));
  }
  return result;
}

void ___ZL6gssAddP22_NLGraphStructureStackjll_block_invoke_3(uint64_t a1, uint64_t a2)
{
  gssMerge(*(_QWORD *)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 40));
}

void gssMerge(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  unsigned int v4;
  char v6;

  v3 = a3;
  v4 = a2;
  v6 = 0;
  if (a3)
    gssCombine(a1, a2, &v6);
  gssExpand(a1, v4, &v6, 0, v3);
}

void *gssRefsResize(void *result, int a2)
{
  _QWORD *v2;
  unsigned int v3;
  unsigned int v4;

  if (result)
  {
    v2 = result;
    v3 = *((_DWORD *)result + 6);
    if (a2 + *((_DWORD *)result + 4) + 1 >= v3)
    {
      v4 = 2 * v3;
      *((_DWORD *)result + 6) = v4;
      result = malloc_type_realloc(*((void **)result + 4), 4 * v4, 0x100004052888210uLL);
      v2[4] = result;
    }
  }
  return result;
}

uint64_t gssNodeHasRHS(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int RHSAtIndex;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 <= a2)
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5 || (*(_DWORD *)(v5 + 28 * a2 + 20) & 0x80000000) != 0 && !*(_DWORD *)(v5 + 28 * a2 + 12))
    return 0;
  v6 = *(_DWORD *)(v5 + 28 * a2 + 12);
  if (!v6)
    return 0;
  v7 = 0;
  while (1)
  {
    RHSAtIndex = gssGetRHSAtIndex(a1, a2, v7);
    if ((RHSAtIndex & 0x80000000) == 0
      && (v4 <= RHSAtIndex
       || (*(_DWORD *)(v5 + 28 * RHSAtIndex + 20) & 0x80000000) == 0
       || *(_DWORD *)(v5 + 28 * RHSAtIndex + 12)))
    {
      break;
    }
    if (v6 == ++v7)
      return 0;
  }
  return 1;
}

void ___ZL11gssPopStackP22_NLGraphStructureStack_block_invoke(uint64_t a1, uint64_t a2)
{
  gssMerge(*(_QWORD *)(a1 + 40), a2, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

void ___ZL11gssPopStackP22_NLGraphStructureStack_block_invoke_2(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 0;
  gssExpand(v2, a2, &v3, 0, 0);
}

uint64_t ___ZL18gssCombinableShiftP22_NLGraphStructureStackii_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = gssCombinableShift(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), a2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *a3 = 1;
  return result;
}

uint64_t __gssNodeReduce(uint64_t result, unsigned int a2, uint64_t a3, __int16 *a4, _BYTE *a5)
{
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  __int16 v38;
  unsigned int v39;

  if (((a2 | a3) & 0x80000000) != 0)
    return result;
  v8 = a2;
  v9 = result;
  if (result)
    v10 = (int)a3 < 0;
  else
    v10 = 1;
  v11 = v10;
  v39 = a3;
  do
  {
    if ((v8 & 0x80000000) == 0 && *(_DWORD *)v9 > v8)
    {
      v12 = *(_QWORD *)(v9 + 8) + 28 * v8;
      v13 = *(unsigned __int16 *)(v12 + 12);
      if (*(_WORD *)(v12 + 12))
      {
        v14 = 0;
        v15 = v8;
        while (1)
        {
          result = gssGetRHSAtIndex(v9, v8, v14);
          if ((result & 0x80000000) != 0
            && *(_DWORD *)v9 > v8
            && (v16 = *(_QWORD *)(v9 + 8), *(unsigned __int16 *)(v16 + 28 * v8 + 12) > v14)
            && (v17 = *(int *)(v16 + 28 * v8 + 16), (v14 + v17) < *(_DWORD *)(v9 + 16)))
          {
            v18 = *(_DWORD *)(*(_QWORD *)(v9 + 32) + 4 * (v14 + v17));
            if (v18 <= *(_DWORD *)v9)
            {
              v19 = *(_DWORD *)(v16 + 28 * v18 + 8);
              if ((v11 & 1) != 0)
                goto LABEL_26;
            }
            else
            {
              v19 = v18 - 100000;
              if (v18 == 100000)
                v19 = -1;
              if ((v11 & 1) != 0)
                goto LABEL_26;
            }
          }
          else
          {
            v19 = -1;
            if ((v11 & 1) != 0)
              goto LABEL_26;
          }
          if (*(_DWORD *)v9 > a3)
          {
            v20 = *(_DWORD *)(*(_QWORD *)(v9 + 8) + 28 * v39 + 8);
            goto LABEL_27;
          }
LABEL_26:
          v20 = 0;
LABEL_27:
          if (v19 == v20)
          {
            if ((result & 0x80000000) != 0)
            {
              v33 = *(_DWORD *)v9;
              if (*(_DWORD *)v9 > v8 && v33 > a3)
              {
                v34 = *(_QWORD *)(v9 + 8);
                if (*(unsigned __int16 *)(v34 + 28 * v8 + 12) > v14)
                {
                  v35 = *(int *)(v34 + 28 * v8 + 16);
                  if ((v35 + v14) < *(_DWORD *)(v9 + 16))
                  {
                    v36 = *(_DWORD *)(v34 + 28 * v39 + 24);
                    if (v36 < v33)
                      *(_DWORD *)(*(_QWORD *)(v9 + 32) + 4 * (v35 + v14)) = v36;
                  }
                }
              }
              if ((a3 & 0x80000000) == 0 && *(_DWORD *)v9 > a3)
              {
                v37 = *(_QWORD *)(v9 + 8) + 28 * v39;
                goto LABEL_58;
              }
              v38 = -1;
LABEL_59:
              *a4 = v38;
            }
            else
            {
              result = gssNodesAreEqual(v9, result, a3);
              if ((result & 1) == 0)
              {
                v21 = *(_QWORD *)(v9 + 8);
                v22 = v21 + 28 * v15;
                v24 = *(_DWORD *)(v22 + 12);
                v23 = *(_DWORD *)(v22 + 16);
                v25 = (int *)(v22 + 12);
                v26 = *(_DWORD *)(v9 + 16);
                v25[1] = v26;
                if (v24)
                {
                  v27 = 0;
                  v28 = v23 + (int)v14;
                  do
                  {
                    result = (uint64_t)gssRefsResize((void *)v9, 1);
                    v29 = *(_QWORD *)(v9 + 32);
                    v30 = *(_DWORD *)(v29 + 4 * v28);
                    v31 = *(unsigned int *)(v9 + 16);
                    *(_DWORD *)(v9 + 16) = v31 + 1;
                    *(_DWORD *)(v29 + 4 * v31) = v30;
                    v26 = *(_DWORD *)(v9 + 16) + 1;
                    *(_DWORD *)(v9 + 16) = v26;
                    ++v27;
                  }
                  while (v27 < *v25);
                  v32 = *v25 + 1;
                }
                else
                {
                  v29 = *(_QWORD *)(v9 + 32);
                  v32 = 1;
                }
                *v25 = v32;
                *(_DWORD *)(v9 + 16) = v26 + 1;
                *(_DWORD *)(v29 + 4 * v26) = a3;
                v37 = v21 + 28 * v15;
LABEL_58:
                v38 = *(_WORD *)(v37 + 2);
                goto LABEL_59;
              }
            }
            *a5 = 1;
            return result;
          }
          if ((_DWORD)result)
            result = __gssNodeReduce(v9, result, a3, a4, a5);
          if (*a5)
            return result;
          if (v13 == (_DWORD)++v14)
            goto LABEL_34;
        }
      }
    }
    if (*a5)
      return result;
LABEL_34:
    if ((v8 & 0x80000000) == 0 && *(_DWORD *)v9 > v8)
    {
      v8 = *(_DWORD *)(*(_QWORD *)(v9 + 8) + 28 * v8 + 20);
      if ((v8 & 0x80000000) == 0)
        continue;
    }
    v8 = -1;
  }
  while (((v8 | a3) & 0x80000000) == 0);
  return result;
}

uint64_t gssNodesAreEqual(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t RHSAtIndex;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)a1 <= a2)
  {
    v6 = 0;
    if ((a3 & 0x80000000) != 0)
      goto LABEL_8;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 8) + 28 * a2;
    if ((a3 & 0x80000000) != 0)
      goto LABEL_8;
  }
  if (*(_DWORD *)a1 > a3)
  {
    v7 = *(_QWORD *)(a1 + 8) + 28 * a3;
    goto LABEL_9;
  }
LABEL_8:
  v7 = 0;
LABEL_9:
  if (!(v6 | v7))
    return 1;
  result = 0;
  if (v6 && v7)
  {
    if (*(_DWORD *)(v6 + 8) != *(_DWORD *)(v7 + 8))
      return 0;
    v9 = *(_DWORD *)(v6 + 12);
    if (v9 != *(_DWORD *)(v7 + 12) || *(_DWORD *)(v6 + 20) != *(_DWORD *)(v7 + 20))
      return 0;
    if ((a2 & 0x80000000) != 0
      || *(_DWORD *)a1 <= a2
      || (v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 28 * a2 + 20), (v10 & 0x80000000) != 0))
    {
      v10 = 0xFFFFFFFFLL;
    }
    if ((a3 & 0x80000000) != 0
      || *(_DWORD *)a1 <= a3
      || (v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 28 * a3 + 20), (v11 & 0x80000000) != 0))
    {
      v11 = 0xFFFFFFFFLL;
    }
    result = gssNodesAreEqual(a1, v10, v11);
    if ((_DWORD)result)
    {
      if (v9)
      {
        RHSAtIndex = gssGetRHSAtIndex(a1, a2, 0);
        v13 = gssGetRHSAtIndex(a1, a3, 0);
        v14 = gssNodesAreEqual(a1, RHSAtIndex, v13);
        result = 0;
        if (v14)
        {
          v15 = 1;
          do
          {
            v16 = v15;
            if (v9 == v15)
              break;
            v17 = gssGetRHSAtIndex(a1, a2, v15);
            v18 = gssGetRHSAtIndex(a1, a3, v16);
            v19 = gssNodesAreEqual(a1, v17, v18);
            v15 = v16 + 1;
          }
          while ((v19 & 1) != 0);
          return v16 >= v9;
        }
        return result;
      }
      return 1;
    }
  }
  return result;
}

uint64_t ___ZL8gssShiftP22_NLGraphStructureStackiU13block_pointerFviPbE_block_invoke(uint64_t a1, int a2, uint64_t a3, _BYTE *a4)
{
  unsigned int v6;
  __int32 v7;
  uint64_t v8;
  _BOOL4 v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;

  v6 = gssSetNodeWithNode(*(_QWORD *)(a1 + 48), a2, *(_DWORD *)(a1 + 56), 0, (unsigned __int16)((*(_DWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2), *(int **)a3);
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 48);
  if ((v6 & 0x80000000) == 0 && v8)
  {
    if (*(_DWORD *)v8 <= v6)
      v7 = 0;
    else
      v7 = *(_DWORD *)(*(_QWORD *)(v8 + 8) + 28 * v6 + 8);
  }
  v9 = NL::SearchGrammar::requiresComplement(*(NL::SearchGrammar **)(v8 + 80), v7);
  v10 = *(unsigned int **)(a1 + 48);
  if ((v6 & 0x80000000) == 0 && v9 && *v10 > v6)
  {
    v11 = *((_QWORD *)v10 + 1);
    if (v11)
    {
      *(_BYTE *)(v11 + 28 * v6) |= 0x20u;
      v10 = *(unsigned int **)(a1 + 48);
    }
  }
  v12 = *(_DWORD *)(a1 + 56);
  if ((v12 & 0x80000000) == 0)
  {
    v13 = *v10;
    if (*v10 > v12)
    {
      v14 = *((_QWORD *)v10 + 1);
      if (v14)
      {
        if ((*(_BYTE *)(v14 + 28 * v12) & 8) != 0 && v13 > v6 && (v6 & 0x80000000) == 0)
          *(_BYTE *)(v14 + 28 * v6) |= 8u;
      }
    }
  }
  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    *a4 = 1;
  return result;
}

void gssExpand(uint64_t a1, unsigned int a2, _BYTE *a3, char a4, char a5)
{
  unsigned int v10;
  _QWORD v11[6];
  char v12;
  char v13;

  v10 = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)a1 <= a2)
    {
      v10 = 0;
    }
    else
    {
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 28 * a2 + 8);
      if ((a4 & 1) == 0 && v10 == 1)
      {
        gssAddState(a1, a2);
        return;
      }
    }
  }
  if (*a3
    && (NL::SearchGrammar::hasExpansions(*(NL::SearchGrammar **)(a1 + 80), v10) & 1) == 0
    && v10 != 1
    && !*a3)
  {
    gssAddState(a1, a2);
  }
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZL9gssExpandP22_NLGraphStructureStackiPbbb_block_invoke;
  v11[3] = &__block_descriptor_tmp_21_0;
  v12 = a5;
  v11[4] = a1;
  v11[5] = a3;
  v13 = a4;
  gssShift(a1, a2, (uint64_t)v11);
}

_DWORD *gssAddState(uint64_t a1, int a2)
{
  int v4;
  unsigned int v5;
  _DWORD *result;

  v4 = *(unsigned __int16 *)(a1 + 40);
  v5 = *(unsigned __int16 *)(a1 + 42);
  if (v4 + 1 >= v5)
  {
    *(_WORD *)(a1 + 42) = 2 * v5;
    result = malloc_type_realloc(*(void **)(a1 + 48), 8 * (v5 & 0x7FFF), 0x100004052888210uLL);
    *(_QWORD *)(a1 + 48) = result;
    v4 = *(unsigned __int16 *)(a1 + 40);
  }
  else
  {
    result = *(_DWORD **)(a1 + 48);
  }
  *(_WORD *)(a1 + 40) = v4 + 1;
  result[v4] = a2;
  return result;
}

uint64_t ___ZL9gssExpandP22_NLGraphStructureStackiPbbb_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  v3 = result;
  if (*(_BYTE *)(result + 48))
    result = gssCombine(*(_QWORD *)(result + 32), a2, *(_BYTE **)(result + 40));
  if (!**(_BYTE **)(v3 + 40))
    return gssExpand(*(_QWORD *)(v3 + 32), a2);
  return result;
}

char *NLBranchCreate(__int16 a1, char a2)
{
  char *v4;
  int16x4_t v5;
  int16x4_t v6;

  v4 = (char *)malloc_type_calloc(1uLL, 0x20uLL, 0x102004086FE837DuLL);
  if (v4)
  {
    *(_QWORD *)v4 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v5 = (int16x4_t)-1;
    v5.i16[0] = a1;
    v6 = vzip1_s16(v5, v5);
    v6.i16[2] = a1;
    *(int16x4_t *)(v4 + 12) = v6;
    *((_DWORD *)v4 + 2) = 0;
    v4[20] = a2;
    *((_DWORD *)v4 + 6) = 1;
  }
  return v4;
}

void NLBranchAddNode(uint64_t a1, int a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a2;
  if (a1)
  {
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    CFArrayAppendValue(*(CFMutableArrayRef *)a1, v5);
    CFRelease(v5);
    *(_DWORD *)(a1 + 8) += a3;
  }
}

void gssVisitState(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned int a6, uint64_t a7, void (*a8)(uint64_t, CFArrayRef *, CFArrayRef *, _QWORD))
{
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  unsigned int Root;
  uint64_t v24;
  uint64_t v25;
  CFArrayRef *v26;
  CFArrayRef *Leaf;
  char *v28;
  int Score;
  const __CFAllocator *v30;
  char *v31;
  int v32;
  const __CFAllocator *v33;
  uint64_t v34;
  char *v35;
  int v36;
  const __CFAllocator *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t RHSAtIndex;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  char *v48;
  int v49;
  const __CFAllocator *v50;
  char *v51;
  int v52;
  const __CFAllocator *v53;
  __int16 v54;
  char *v55;
  int v56;
  CFTypeRef *v57;
  int v58;
  const __CFAllocator *v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v68;
  uint64_t v69;
  int v70;

  v9 = a2;
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)a1 <= a2)
  {
    v13 = -1;
    v14 = -1;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = v11 + 28 * a2;
    v13 = *(_WORD *)(v12 + 2);
    v14 = *(_WORD *)(v12 + 4);
    if (v11
      && (*(_BYTE *)(v11 + 28 * a2) & 0x20) != 0
      && (!gssNodeHasLHS(a1, a2) || !gssNodeHasRHS(a1, v9)))
    {
      return;
    }
  }
  if ((!a4 || !CFArrayGetCount(*(CFArrayRef *)a4) || CFArrayGetCount(*(CFArrayRef *)a4) <= 3) && (v9 & 0x80000000) == 0)
  {
    v15 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 <= v9)
      goto LABEL_41;
    v16 = *(_QWORD *)(a1 + 8);
    if (!v16 || (*(_BYTE *)(v16 + 28 * v9) & 4) == 0)
    {
      v17 = *(_QWORD *)(a1 + 8);
      v18 = *(unsigned int *)(v17 + 28 * v9 + 20);
      if ((v18 & 0x80000000) == 0)
      {
        if (v15 <= v18)
        {
          v20 = 0;
          v22 = -1;
          if ((a6 & 1) != 0)
            goto LABEL_36;
          v21 = -1;
LABEL_29:
          *a5 = v21;
          a5[1] = 1;
LABEL_30:
          if (v15 > v18 && (*(_BYTE *)(v17 + 28 * v18) & 0x20) != 0 && (a6 & 1) == 0)
          {
            if (gssNodeHasRHS(a1, v18))
            {
              v28 = NLBranchCreate(v22, 1);
              Score = gssNodeGetScore(a1, v18);
              NLBranchAddNode((uint64_t)v28, v20, Score);
              v70 = 0;
              gssNodeGetMaxIndex(a1, v18, &v70);
              v68 = v22;
              v69 = v70 - v22 + 1;
              v30 = (const __CFAllocator *)gssVisitState(a1, v18, a3, v28, &v68, 1, a7, a8);
              branchRelease(v30, (CFTypeRef *)v28);
            }
            LOBYTE(a6) = 0;
            goto LABEL_41;
          }
LABEL_36:
          v31 = NLBranchCopy(a4);
          v32 = gssNodeGetScore(a1, v18);
          NLBranchAddNode((uint64_t)v31, v20, v32);
          v33 = (const __CFAllocator *)gssVisitState(a1, v18, a3, v31, a5, a6, a7, a8);
          branchRelease(v33, (CFTypeRef *)v31);
          if (*(_DWORD *)a1 <= v18
            || (v34 = *(_QWORD *)(a1 + 8)) == 0
            || (*(_BYTE *)(v34 + 28 * v18) & 2) == 0)
          {
            v35 = NLBranchCreate(v22, 0);
            v36 = gssNodeGetScore(a1, v18);
            NLBranchAddNode((uint64_t)v35, v20, v36);
            v37 = (const __CFAllocator *)gssVisitState(a1, v18, a3, v35, a5, a6, a7, a8);
            branchRelease(v37, (CFTypeRef *)v35);
          }
          goto LABEL_41;
        }
        v19 = v17 + 28 * v18;
        if ((*(_BYTE *)v19 & 4) == 0)
        {
          v20 = *(_DWORD *)(v19 + 8);
          v21 = *(__int16 *)(v19 + 2);
          v22 = v21;
          if ((a6 & 1) != 0)
            goto LABEL_30;
          goto LABEL_29;
        }
        gssVisitState(a1, v18, a3, a4, a5, a6, a7, a8);
      }
LABEL_41:
      if (*(_DWORD *)a1 <= v9)
        return;
      v38 = *(_QWORD *)(a1 + 8) + 28 * v9;
      v39 = *(unsigned __int16 *)(v38 + 12);
      if (!*(_WORD *)(v38 + 12))
        return;
      v40 = 0;
      v62 = v9;
      v61 = a4;
      v60 = *(unsigned __int16 *)(v38 + 12);
      while (1)
      {
        RHSAtIndex = gssGetRHSAtIndex(a1, v9, v40);
        if ((RHSAtIndex & 0x80000000) == 0)
        {
          v42 = RHSAtIndex;
          v43 = *(_DWORD *)a1;
          if (*(_DWORD *)a1 <= RHSAtIndex)
          {
            v44 = 0;
          }
          else
          {
            v44 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 28 * RHSAtIndex + 8);
            if (v44 == 2)
              goto LABEL_60;
          }
          if (v43 <= RHSAtIndex)
          {
            v46 = -1;
            goto LABEL_54;
          }
          v45 = *(_QWORD *)(a1 + 8);
          if (!v45
            || (*(_BYTE *)(v45 + 28 * RHSAtIndex) & 0x20) == 0
            || gssNodeHasLHS(a1, RHSAtIndex) && gssNodeHasRHS(a1, v42))
          {
            v46 = *(_WORD *)(*(_QWORD *)(a1 + 8) + 28 * v42 + 2);
LABEL_54:
            if ((a6 & 1) == 0)
            {
              *a5 = v46;
              a5[1] = 1;
            }
            if (v43 > v42
              && (v47 = *(_QWORD *)(a1 + 8)) != 0
              && !(((*(_BYTE *)(v47 + 28 * v42) & 0x20) == 0) | a6 & 1))
            {
              LOWORD(a6) = v46;
              v54 = v46;
              v55 = NLBranchCreate(v46, 1);
              v56 = v44;
              v57 = (CFTypeRef *)v55;
              v58 = gssNodeGetScore(a1, v42);
              NLBranchAddNode((uint64_t)v57, v56, v58);
              v70 = 0;
              gssNodeGetMaxIndex(a1, v42, &v70);
              v68 = (__int16)a6;
              v69 = v70 - v54 + 1;
              v59 = (const __CFAllocator *)gssVisitState(a1, v42, a3, v57, &v68, 1, a7, a8);
              branchRelease(v59, v57);
              LOBYTE(a6) = 0;
            }
            else
            {
              v48 = NLBranchCopy(a4);
              v49 = gssNodeGetScore(a1, v42);
              NLBranchAddNode((uint64_t)v48, v44, v49);
              v50 = (const __CFAllocator *)gssVisitState(a1, v42, a3, v48, a5, a6 & 1, a7, a8);
              branchRelease(v50, (CFTypeRef *)v48);
              v51 = NLBranchCreate(v46, 0);
              v52 = gssNodeGetScore(a1, v42);
              NLBranchAddNode((uint64_t)v51, v44, v52);
              v39 = v60;
              a4 = v61;
              v9 = v62;
              v53 = (const __CFAllocator *)gssVisitState(a1, v42, a3, v51, a5, a6 & 1, a7, a8);
              branchRelease(v53, (CFTypeRef *)v51);
            }
          }
        }
LABEL_60:
        if (v39 == ++v40)
          return;
      }
    }
    Root = NLBranchGetRoot((CFArrayRef *)a4);
    if (a4)
    {
      if (Root != 1 && CFArrayGetCount(*(CFArrayRef *)a4) >= 3 && CFArrayGetCount(*(CFArrayRef *)a4) <= 4)
      {
        *(_WORD *)(a4 + 12) = v13;
        v24 = a5[1];
        *(_WORD *)(a4 + 14) = *a5;
        *(_WORD *)(a4 + 16) = v24;
        *(_WORD *)(a4 + 18) = v14;
        NLParseAddBranch(a3, (__int16 *)a4);
        if (a8)
        {
          v25 = a4;
          v26 = NLBranchGetRoot((CFArrayRef *)a4);
          Leaf = NLBranchGetLeaf((CFArrayRef *)v25);
          a8(a7, v26, Leaf, *(__int16 *)(v25 + 12));
        }
      }
    }
  }
}

uint64_t NLParseCompare(_DWORD *a1, _DWORD *a2, void *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;

  v3 = *((unsigned __int16 *)a1 + 6);
  v4 = *((unsigned __int16 *)a2 + 6);
  if (v3 == v4)
  {
    v5 = *((unsigned __int16 *)a1 + 7);
    v6 = *((unsigned __int16 *)a2 + 7);
    if (v5 == v6)
    {
      v7 = a1[2];
      v8 = a2[2];
      v9 = v7 == v8;
      v10 = v7 > v8;
      v11 = -1;
      if (!v10)
        v11 = 1;
      if (v9)
        return 0;
      else
        return v11;
    }
    else if ((__int16)v5 > (__int16)v6)
    {
      return -1;
    }
    else
    {
      return 1;
    }
  }
  else if ((__int16)v3 < (__int16)v4)
  {
    return -1;
  }
  else
  {
    return 1;
  }
}

BOOL gssNodeHasLHS(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  int v5;
  unsigned int v6;
  _BOOL8 result;

  result = 0;
  if ((a2 & 0x80000000) == 0 && *(_DWORD *)a1 > a2)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = v2 + 28 * a2;
      v5 = *(_DWORD *)(v3 + 20);
      v4 = (unsigned int *)(v3 + 20);
      if ((v5 & 0x80000000) == 0 || *(_DWORD *)(v2 + 28 * a2 + 12))
      {
        v6 = *v4;
        if ((v6 & 0x80000000) != 0
          || *(_DWORD *)a1 <= v6
          || (*(_DWORD *)(v2 + 28 * v6 + 20) & 0x80000000) == 0
          || *(_DWORD *)(v2 + 28 * v6 + 12))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t gssNodeGetScore(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int Score;
  int v14;
  uint64_t RHSAtIndex;
  uint64_t v16;
  unsigned int v17;
  int v19;

  if ((a2 & 0x80000000) == 0)
  {
    v2 = a2;
    v4 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 > a2)
    {
      v5 = 0;
      while (1)
      {
        v6 = *(_QWORD *)(a1 + 8);
        if (!v6)
          return v5;
        v7 = *(_DWORD *)(v6 + 28 * v2 + 20);
        if ((v7 & 0x80000000) != 0)
          return v5;
        if (v4 <= v7)
          v8 = 0;
        else
          v8 = *(_DWORD *)(v6 + 28 * v7 + 8);
        v9 = *(_DWORD *)(v6 + 28 * v2 + 8);
        v10 = v6 + 28 * v2;
        v11 = *(unsigned __int16 *)(v10 + 12);
        if (*(_WORD *)(v10 + 12))
        {
          v19 = v5;
          v12 = 0;
          Score = 0;
          v14 = 0;
          do
          {
            RHSAtIndex = gssGetRHSAtIndex(a1, v2, v12);
            if ((RHSAtIndex & 0x80000000) == 0)
            {
              v16 = RHSAtIndex;
              if (*(_DWORD *)a1 <= RHSAtIndex)
                v17 = 0;
              else
                v17 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 28 * RHSAtIndex + 8);
              Score += NL::SearchGrammar::getScore(*(NL::SearchGrammar **)(a1 + 80), v9, v8, v17);
              v14 += gssNodeGetScore(a1, v16);
            }
            ++v12;
          }
          while (v11 != v12);
          LODWORD(v5) = v19;
          if (Score)
            goto LABEL_21;
        }
        else
        {
          v14 = 0;
        }
        Score = NL::SearchGrammar::getScore(*(NL::SearchGrammar **)(a1 + 80), v9, v8, 2u);
LABEL_21:
        v5 = v14 + (_DWORD)v5 + Score;
        v4 = *(_DWORD *)a1;
        v2 = v7;
        if (*(_DWORD *)a1 <= v7)
          return v5;
      }
    }
  }
  return 0;
}

uint64_t gssNodeGetMaxIndex(uint64_t result, unsigned int a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  int v12;
  unsigned int v13;
  uint64_t RHSAtIndex;

  if ((a2 & 0x80000000) == 0)
  {
    v4 = result;
    if (*(_DWORD *)result > a2)
    {
      v5 = *(_QWORD *)(result + 8);
      if (v5)
      {
        v8 = *(unsigned __int16 *)(v5 + 28 * a2 + 2);
        if (*a3 > v8)
          v8 = *a3;
        *a3 = v8;
        if (*(_DWORD *)result <= a2 || (v9 = *(unsigned int *)(v5 + 28 * a2 + 20), (v9 & 0x80000000) != 0))
          v9 = 0xFFFFFFFFLL;
        result = gssNodeGetMaxIndex(result, v9, a3);
        v10 = v5 + 28 * a2;
        v12 = *(_DWORD *)(v10 + 12);
        v11 = (unsigned int *)(v10 + 12);
        if (v12)
        {
          v13 = 0;
          do
          {
            RHSAtIndex = gssGetRHSAtIndex(v4, a2, v13);
            result = gssNodeGetMaxIndex(v4, RHSAtIndex, a3);
            ++v13;
          }
          while (v13 < *v11);
        }
      }
    }
  }
  return result;
}

char *NLBranchCopy(uint64_t a1)
{
  char *v2;
  __CFArray *Mutable;
  const __CFArray *v4;
  CFRange v6;

  v2 = (char *)malloc_type_calloc(1uLL, 0x20uLL, 0x102004086FE837DuLL);
  if (v2)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)v2 = Mutable;
    v4 = *(const __CFArray **)a1;
    v6.length = CFArrayGetCount(*(CFArrayRef *)a1);
    v6.location = 0;
    CFArrayAppendArray(Mutable, v4, v6);
    *(_QWORD *)(v2 + 12) = *(_QWORD *)(a1 + 12);
    *((_DWORD *)v2 + 2) = *(_DWORD *)(a1 + 8);
    v2[20] = *(_BYTE *)(a1 + 20);
    *((_DWORD *)v2 + 6) = 1;
  }
  return v2;
}

void NLCompositeTransliterator::NLCompositeTransliterator(NLCompositeTransliterator *this, const __CFLocale *a2, const __CFURL *a3)
{
  const void ***v6;
  NL::StringMap ***v7;
  NLCompositeTransliteratorSeq2Seq *v8;
  NLCompositeTransliteratorException *v9;
  NLCompositeTransliteratorLexicon *v10;
  const __CFString *Value;
  CFComparisonResult v12;
  NLDevanagariOrthographyChecker *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  CFDictionaryRef v17;
  NLBengaliOrthographyChecker *v18;
  uint64_t v19;
  NLHindiWordLanguageModeler *v20;
  uint64_t v21;
  const __CFURL *v22;
  const __CFURL *v23;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  *((_OWORD *)this + 1) = 0u;
  v6 = (const void ***)((char *)this + 16);
  v7 = (NL::StringMap ***)((char *)this + 8);
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  v8 = (NLCompositeTransliteratorSeq2Seq *)operator new();
  NLCompositeTransliteratorSeq2Seq::NLCompositeTransliteratorSeq2Seq(v8, a2, a3);
  std::unique_ptr<NLCompositeTransliteratorSeq2Seq>::reset[abi:ne180100]((NLCompositeTransliteratorSeq2Seq **)this, v8);
  v9 = (NLCompositeTransliteratorException *)operator new();
  NLCompositeTransliteratorException::NLCompositeTransliteratorException(v9, a2, a3);
  std::unique_ptr<NLCompositeTransliteratorException>::reset[abi:ne180100](v7, (NL::StringMap **)v9);
  v10 = (NLCompositeTransliteratorLexicon *)operator new();
  NLCompositeTransliteratorLexicon::NLCompositeTransliteratorLexicon(v10, a2);
  std::unique_ptr<NLCompositeTransliteratorLexicon>::reset[abi:ne180100](v6, (const void **)v10);
  Value = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  v12 = CFStringCompare(Value, CFSTR("hi"), 0);
  if (v12 == kCFCompareEqualTo || CFStringCompare(Value, CFSTR("mr"), 0) == kCFCompareEqualTo)
  {
    v13 = (NLDevanagariOrthographyChecker *)operator new();
    NLDevanagariOrthographyChecker::NLDevanagariOrthographyChecker(v13);
    v14 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v13;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v23 = 0;
  if (a3)
  {
    v15 = (void *)*MEMORY[0x1E0D43458];
    keys[0] = *(void **)MEMORY[0x1E0D43478];
    keys[1] = v15;
    v16 = (void *)*MEMORY[0x1E0C9AE50];
    values[0] = a3;
    values[1] = v16;
    v17 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v22, v17);
    a3 = v22;
    v23 = v22;
  }
  if (CFStringCompare(Value, CFSTR("bn"), 0) == kCFCompareEqualTo)
  {
    v18 = (NLBengaliOrthographyChecker *)operator new();
    NLBengaliOrthographyChecker::NLBengaliOrthographyChecker(v18);
    v19 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  if (v12 == kCFCompareEqualTo)
  {
    v20 = (NLHindiWordLanguageModeler *)operator new();
    NLHindiWordLanguageModeler::NLHindiWordLanguageModeler(v20, a3);
    v21 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v20;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  if (a3)
    CFRelease(a3);
}

void sub_1A18BACAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  NL::StringMap ***v4;
  const void ***v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a3);
  MEMORY[0x1A1B0E068](v6, 0xE1C409BBF8FE8);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  nlp::CFScopedPtr<__EmojiLocaleDataWrapper const*>::reset((const void **)(v3 + 40), 0);
  v8 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::unique_ptr<NLCompositeTransliteratorLexicon>::reset[abi:ne180100](v5, 0);
  std::unique_ptr<NLCompositeTransliteratorException>::reset[abi:ne180100](v4, 0);
  std::unique_ptr<NLCompositeTransliteratorSeq2Seq>::reset[abi:ne180100]((NLCompositeTransliteratorSeq2Seq **)v3, 0);
  _Unwind_Resume(a1);
}

NLCompositeTransliteratorSeq2Seq *std::unique_ptr<NLCompositeTransliteratorSeq2Seq>::reset[abi:ne180100](NLCompositeTransliteratorSeq2Seq **a1, NLCompositeTransliteratorSeq2Seq *a2)
{
  NLCompositeTransliteratorSeq2Seq *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NLCompositeTransliteratorSeq2Seq::~NLCompositeTransliteratorSeq2Seq(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

NL::StringMap **std::unique_ptr<NLCompositeTransliteratorException>::reset[abi:ne180100](NL::StringMap ***a1, NL::StringMap **a2)
{
  NL::StringMap **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NLCompositeTransliteratorException::~NLCompositeTransliteratorException(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

const void **std::unique_ptr<NLCompositeTransliteratorLexicon>::reset[abi:ne180100](const void ***a1, const void **a2)
{
  const void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NLCompositeTransliteratorLexicon::~NLCompositeTransliteratorLexicon(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void NLCompositeTransliterator::~NLCompositeTransliterator(NLCompositeTransliterator *this)
{
  uint64_t v2;
  uint64_t v3;

  nlp::CFScopedPtr<__EmojiLocaleDataWrapper const*>::reset((const void **)this + 5, 0);
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<NLCompositeTransliteratorLexicon>::reset[abi:ne180100]((const void ***)this + 2, 0);
  std::unique_ptr<NLCompositeTransliteratorException>::reset[abi:ne180100]((NL::StringMap ***)this + 1, 0);
  std::unique_ptr<NLCompositeTransliteratorSeq2Seq>::reset[abi:ne180100]((NLCompositeTransliteratorSeq2Seq **)this, 0);
}

BOOL NLCompositeTransliterator::isTransliteratedWordInLexiconForCandidate(NLCompositeTransliterator *this, NLTransliterationCandidate *a2)
{
  uint64_t TransliteratedWord;
  __int128 v4;
  std::string::size_type size;
  _BOOL8 isMemberOfTheNativeLexicon;
  std::string __p;

  TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord(a2);
  if (*(char *)(TransliteratedWord + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)TransliteratedWord, *(_QWORD *)(TransliteratedWord + 8));
  }
  else
  {
    v4 = *(_OWORD *)TransliteratedWord;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(TransliteratedWord + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (!size)
  {
    isMemberOfTheNativeLexicon = 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      return isMemberOfTheNativeLexicon;
    goto LABEL_8;
  }
  isMemberOfTheNativeLexicon = NLCompositeTransliteratorLexicon::isMemberOfTheNativeLexicon(*((_QWORD *)this + 2), (uint64_t)&__p);
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
  return isMemberOfTheNativeLexicon;
}

void sub_1A18BAFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t NLCompositeTransliterator::updateCandidatesWithEmojiCandidates(uint64_t a1, uint64_t a2)
{
  __int128 *v3;
  __int128 v4;
  unint64_t v5;
  NLTransliterationCandidate **i;
  uint64_t TransliteratedWord;
  CFStringRef CFStringFromString;
  const void *EmojiTokensForString;
  CFIndex j;
  const __CFString *String;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  uint64_t v17;
  const void *v18;
  const void *v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  std::string::value_type v26;
  std::string *v28;
  char *v29;
  void *v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  std::string **v35;
  char *v36;
  char *v37;
  std::string *v38;
  void *__p[2];
  char *v41;
  CFTypeRef cf;
  CFTypeRef v43;
  const void **v44;
  std::string *v45;
  unint64_t v46;
  std::string v47;

  if (!*(_QWORD *)(a1 + 40) || *(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    return 0;
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(**(NLAbstractOrthographyConvertor ***)a2);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    v47.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v4;
  }
  v44 = 0;
  v45 = 0;
  v46 = 0;
  for (i = *(NLTransliterationCandidate ***)a2; i != *(NLTransliterationCandidate ***)(a2 + 8); ++i)
  {
    TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord(*i);
    CFStringFromString = createCFStringFromString(TransliteratedWord);
    v43 = CFStringFromString;
    EmojiTokensForString = (const void *)CEMEmojiLocaleDataCreateEmojiTokensForString();
    cf = EmojiTokensForString;
    if (EmojiTokensForString)
    {
      for (j = 0; j < CFArrayGetCount((CFArrayRef)EmojiTokensForString); ++j)
      {
        CFArrayGetValueAtIndex((CFArrayRef)EmojiTokensForString, j);
        String = (const __CFString *)CEMEmojiTokenGetString();
        getUTF8StringFromCFString(String, __p);
        v12 = v45;
        if ((unint64_t)v45 >= v46)
        {
          v14 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v44, (__int128 *)__p);
        }
        else
        {
          if (SHIBYTE(v41) < 0)
          {
            std::string::__init_copy_ctor_external(v45, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v13 = *(_OWORD *)__p;
            v45->__r_.__value_.__r.__words[2] = (std::string::size_type)v41;
            *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
          }
          v14 = v12 + 1;
        }
        v45 = v14;
        if (SHIBYTE(v41) < 0)
          operator delete(__p[0]);
      }
      v15 = (uint64_t)v44;
      v16 = v45;
      if (v44 != (const void **)v45)
      {
        __p[0] = 0;
        __p[1] = 0;
        v41 = 0;
        do
        {
          v17 = *(unsigned __int8 *)(v15 + 23);
          if ((v17 & 0x80u) == 0)
            v18 = (const void *)*(unsigned __int8 *)(v15 + 23);
          else
            v18 = *(const void **)(v15 + 8);
          v19 = (const void *)*((unsigned __int8 *)v44 + 23);
          v20 = (char)v19;
          if ((char)v19 < 0)
            v19 = v44[1];
          if (v18 == v19)
          {
            if (v20 >= 0)
              v21 = (unsigned __int8 *)v44;
            else
              v21 = (unsigned __int8 *)*v44;
            if ((v17 & 0x80) != 0)
            {
              v26 = memcmp(*(const void **)v15, v21, *(_QWORD *)(v15 + 8)) != 0;
            }
            else if (*(_BYTE *)(v15 + 23))
            {
              v22 = 0;
              v23 = v17 - 1;
              do
              {
                v24 = *(unsigned __int8 *)(v15 + v22);
                v25 = v21[v22];
                v26 = v24 != v25;
              }
              while (v24 == v25 && v23 != v22++);
            }
            else
            {
              v26 = 0;
            }
          }
          else
          {
            v26 = 1;
          }
          v28 = (std::string *)operator new();
          NLTransliterationCandidate::NLTransliterationCandidate(v28, (__int128 *)&v47, (__int128 *)v15, 7, v26, 0.0);
          v29 = (char *)__p[1];
          if (__p[1] >= v41)
          {
            v31 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            if ((unint64_t)(v31 + 1) >> 61)
              std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
            v32 = (v41 - (char *)__p[0]) >> 2;
            if (v32 <= v31 + 1)
              v32 = v31 + 1;
            if ((unint64_t)(v41 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v32;
            if (v33)
              v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v41, v33);
            else
              v34 = 0;
            v35 = (std::string **)&v34[8 * v31];
            *v35 = v28;
            v30 = v35 + 1;
            v37 = (char *)__p[0];
            v36 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                v38 = (std::string *)*((_QWORD *)v36 - 1);
                v36 -= 8;
                *--v35 = v38;
              }
              while (v36 != v37);
              v36 = (char *)__p[0];
            }
            __p[0] = v35;
            __p[1] = v30;
            v41 = &v34[8 * v33];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *(_QWORD *)__p[1] = v28;
            v30 = v29 + 8;
          }
          __p[1] = v30;
          v15 += 24;
        }
        while ((std::string *)v15 != v16);
        std::vector<NLTransliterationCandidate *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<NLTransliterationCandidate **>,std::__wrap_iter<NLTransliterationCandidate **>>(a2, (uint64_t)(i + 1), (char *)__p[0], (char *)v30, (int64_t)((uint64_t)v30 - (unint64_t)__p[0]) >> 3);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (cf)
          CFRelease(cf);
        if (v43)
          CFRelease(v43);
        break;
      }
      CFRelease(EmojiTokensForString);
    }
    if (CFStringFromString)
      CFRelease(CFStringFromString);
  }
  v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)v45 - (char *)v44) >> 3);
  __p[0] = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1A18BB3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 *__p, __int16 *a10, int a11, __int16 a12, char a13, char a14, const void *a15, const void *a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFArray const*>::reset(&a15, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a16, 0);
  __p = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void NLCompositeTransliterator::trimCandidatesToSize(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v6 = *a2;
  v5 = a2[1];
  v7 = (v5 - *a2) >> 3;
  if (v7 > a3)
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v6 + 8 * v8);
      if (v9)
      {
        if (*(char *)(v9 + 47) < 0)
          operator delete(*(void **)(v9 + 24));
        if (*(char *)(v9 + 23) < 0)
          operator delete(*(void **)v9);
        MEMORY[0x1A1B0E068](v9, 0x1012C40B0087DDBLL);
        v6 = *a2;
        v5 = a2[1];
      }
      ++v8;
    }
    while (v8 < (v5 - v6) >> 3);
    v7 = (v5 - v6) >> 3;
  }
  if (v7 > a3)
    std::vector<NLTransliterationCandidate *>::resize((uint64_t)a2, a3);
}

void std::vector<NLTransliterationCandidate *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<NLTransliterationCandidate *>::__append((void **)a1, a2 - v2);
  }
}

uint64_t NLCompositeTransliterator::setIsInVocabularyforCandidates(uint64_t result, NLTransliterationCandidate ***a2)
{
  NLTransliterationCandidate **v2;
  NLTransliterationCandidate **v3;
  NLCompositeTransliterator *v4;
  NLTransliterationCandidate *v5;
  int Type;
  BOOL v7;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (NLCompositeTransliterator *)result;
    do
    {
      v5 = *v2;
      Type = NLTransliterationCandidate::getType(*v2);
      if (Type)
        v7 = Type == 5;
      else
        v7 = 1;
      if (v7 || (result = NLCompositeTransliterator::isTransliteratedWordInLexiconForCandidate(v4, v5), (_DWORD)result))
        result = NLTransliterationCandidate::setIsInVocabulary((uint64_t)v5, 1);
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void NLCompositeTransliterator::assignLanguageModelScoreToCandidates(uint64_t a1, NLTransliterationCandidate ***a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  const UInt8 *v8;
  CFIndex v9;
  CFStringRef v10;
  int TokenIDForString;
  NLTransliterationCandidate **v12;
  NLTransliterationCandidate **v13;
  NLTransliterationCandidate *v14;
  uint64_t v15;
  uint64_t TransliteratedWord;
  double v17;
  NLTransliterationCandidate **v18;
  NLTransliterationCandidate **v19;
  uint64_t v20;
  uint64_t v21;
  std::runtime_error *exception;
  void *__p;
  void *v24;
  uint64_t v25;
  void **p_p;
  CFTypeRef cf;

  if (*(_QWORD *)(a1 + 24))
  {
    __p = 0;
    v24 = 0;
    v5 = *a3;
    v6 = a3[1];
    v25 = 0;
    p_p = &__p;
    while (v5 != v6)
    {
      v7 = *(char *)(v5 + 23);
      if (v7 >= 0)
        v8 = (const UInt8 *)v5;
      else
        v8 = *(const UInt8 **)v5;
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(v5 + 23);
      else
        v9 = *(_QWORD *)(v5 + 8);
      v10 = CFStringCreateWithBytes(0, v8, v9, 0x8000100u, 0);
      if (!v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v10);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
      TokenIDForString = LMLanguageModelGetTokenIDForString();
      if (cf)
        CFRelease(cf);
      LODWORD(cf) = TokenIDForString;
      std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100]((uint64_t *)&p_p, &cf);
      v5 += 24;
    }
    v12 = *a2;
    v13 = a2[1];
    if (*a2 == v13)
    {
      v18 = *a2;
    }
    else
    {
      do
      {
        v14 = *v12;
        v15 = *(_QWORD *)(a1 + 24);
        TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord(*v12);
        v17 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 24))(v15, TransliteratedWord);
        NLTransliterationCandidate::setLMScore((uint64_t)v14, v17);
        ++v12;
      }
      while (v12 != v13);
      v18 = *a2;
      v12 = a2[1];
    }
    if ((char *)v12 - (char *)v18 < 1025)
    {
      v19 = 0;
      v21 = 0;
    }
    else
    {
      v19 = (NLTransliterationCandidate **)std::get_temporary_buffer[abi:ne180100]<NLTransliterationCandidate *>(v12 - v18);
      v21 = v20;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,NLCompositeTransliterator::assignLanguageModelScoreToCandidates(std::vector<NLTransliterationCandidate *> &,std::vector<std::string> const&)::$_2 &,std::__wrap_iter<NLTransliterationCandidate **>>(v18, v12, v12 - v18, v19, v21);
    if (v19)
      operator delete(v19);
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
  }
}

void sub_1A18BB7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  void *v14;

  if (v14)
    operator delete(v14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NLCompositeTransliterator::getTransliterationCandidates(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  char v10;
  std::string *v11;
  std::string *v12;
  char *v13;
  uint64_t v14;
  NLTransliterationCandidate **v15;
  NLTransliterationCandidate **v16;
  NLTransliterationCandidate *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  NLTransliterationCandidate **v26;
  std::string::pointer v27;
  std::string::pointer v28;
  NLTransliterationCandidate *v29;
  NLTransliterationCandidate **v30;
  NLTransliterationCandidate **v31;
  NLTransliterationCandidate *v32;
  unint64_t v33;
  _QWORD *size;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  NLTransliterationCandidate **v41;
  std::string::pointer v42;
  std::string::pointer v43;
  NLTransliterationCandidate *v44;
  NLTransliterationCandidate **v45;
  uint64_t TransliteratedWord;
  CFStringRef CFStringFromString;
  NLTransliterationCandidate *v48;
  NLTransliterationCandidate **v49;
  int64_t v50;
  unint64_t updated;
  unint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  std::locale::id *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  const std::locale::facet *v60;
  NSObject *v61;
  void *v62;
  void *v63;
  void *v64;
  NLTransliterationCandidate **v65;
  std::string v66;
  os_signpost_id_t v67;
  std::locale v68;
  std::string v69;
  void *__p;
  char v71;
  uint64_t v72;
  uint8_t buf[32];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  NLOSSignPostgetTransliterationCandidates::NLOSSignPostgetTransliterationCandidates((NLOSSignPostgetTransliterationCandidates *)&v67);
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v66 = *(std::string *)a3;
  v10 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = (std::string *)((char *)&v66 + HIBYTE(v66.__r_.__value_.__r.__words[2]));
  else
    v11 = (std::string *)(v66.__r_.__value_.__r.__words[0] + v66.__r_.__value_.__l.__size_);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v66;
  else
    v12 = (std::string *)v66.__r_.__value_.__r.__words[0];
  if (v12 != v11)
  {
    do
    {
      v12->__r_.__value_.__s.__data_[0] = __tolower(v12->__r_.__value_.__s.__data_[0]);
      v12 = (std::string *)((char *)v12 + 1);
    }
    while (v12 != v11);
    v10 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  }
  if (v10 < 0)
  {
    std::string::__init_copy_ctor_external(&v69, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
  }
  else
  {
    v69 = v66;
  }
  v66 = v69;
  NLCompositeTransliteratorSeq2Seq::seq2SeqCandidatesForInput(*(uint64_t **)a1, (uint64_t **)&v66, &v64);
  NLCompositeTransliteratorException::exceptionCandidatesForInput(*(uint64_t ***)(a1 + 8), a3, &v62);
  v13 = (char *)v62;
  v14 = (uint64_t)v63;
  if (v62 == v63)
  {
    NLCompositeTransliteratorException::exceptionCandidatesForInput(*(uint64_t ***)(a1 + 8), (uint64_t)&v66, (void **)&v69.__r_.__value_.__l.__data_);
    std::vector<NLTextSlot *>::__assign_with_size[abi:ne180100]<NLTextSlot **,NLTextSlot **>((char *)&v62, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_, (uint64_t)(v69.__r_.__value_.__l.__size_ - v69.__r_.__value_.__r.__words[0]) >> 3);
    if (v69.__r_.__value_.__r.__words[0])
    {
      v69.__r_.__value_.__l.__size_ = v69.__r_.__value_.__r.__words[0];
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    v13 = (char *)v62;
    v14 = (uint64_t)v63;
  }
  if (v13 == (char *)v14)
  {
    NLCompositeTransliteratorLexicon::lexiconCandidatesForInput(*(uint64_t **)(a1 + 16), (uint64_t)&v66, (void **)&v69.__r_.__value_.__l.__data_);
    if (v69.__r_.__value_.__l.__size_ == v69.__r_.__value_.__r.__words[0])
    {
      if (&v64 != (void **)a5)
        std::vector<NLTextSlot *>::__assign_with_size[abi:ne180100]<NLTextSlot **,NLTextSlot **>((char *)a5, (char *)v64, (uint64_t)v65, ((char *)v65 - (_BYTE *)v64) >> 3);
    }
    else
    {
      if (&v69 != a5)
        std::vector<NLTextSlot *>::__assign_with_size[abi:ne180100]<NLTextSlot **,NLTextSlot **>((char *)a5, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_, (uint64_t)(v69.__r_.__value_.__l.__size_ - v69.__r_.__value_.__r.__words[0]) >> 3);
      v30 = (NLTransliterationCandidate **)v64;
      v31 = v65;
      if (v64 != v65)
      {
        do
        {
          if ((candidateSurfaceFormPresentInVector(*v30, (NLTransliterationCandidate ***)a5) & 1) != 0)
          {
            v32 = *v30;
            if (*v30)
            {
              if (*((char *)v32 + 47) < 0)
                operator delete(*((void **)v32 + 3));
              if (*((char *)v32 + 23) < 0)
                operator delete(*(void **)v32);
              MEMORY[0x1A1B0E068](v32, 0x1012C40B0087DDBLL);
            }
          }
          else
          {
            size = (_QWORD *)a5->__r_.__value_.__l.__size_;
            v33 = a5->__r_.__value_.__r.__words[2];
            if ((unint64_t)size >= v33)
            {
              v36 = (uint64_t)((uint64_t)size - a5->__r_.__value_.__r.__words[0]) >> 3;
              if ((unint64_t)(v36 + 1) >> 61)
                std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
              v37 = v33 - a5->__r_.__value_.__r.__words[0];
              v38 = v37 >> 2;
              if (v37 >> 2 <= (unint64_t)(v36 + 1))
                v38 = v36 + 1;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
                v39 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v39 = v38;
              if (v39)
                v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&a5->__r_.__value_.__r.__words[2], v39);
              else
                v40 = 0;
              v41 = (NLTransliterationCandidate **)&v40[8 * v36];
              *v41 = *v30;
              v35 = v41 + 1;
              v43 = (std::string::pointer)a5->__r_.__value_.__r.__words[0];
              v42 = (std::string::pointer)a5->__r_.__value_.__l.__size_;
              if (v42 != a5->__r_.__value_.__l.__data_)
              {
                do
                {
                  v44 = (NLTransliterationCandidate *)*((_QWORD *)v42 - 1);
                  v42 -= 8;
                  *--v41 = v44;
                }
                while (v42 != v43);
                v42 = (std::string::pointer)a5->__r_.__value_.__r.__words[0];
              }
              a5->__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
              a5->__r_.__value_.__l.__size_ = (std::string::size_type)v35;
              a5->__r_.__value_.__r.__words[2] = (std::string::size_type)&v40[8 * v39];
              if (v42)
                operator delete(v42);
            }
            else
            {
              *size = *v30;
              v35 = size + 1;
            }
            a5->__r_.__value_.__l.__size_ = (std::string::size_type)v35;
          }
          ++v30;
        }
        while (v30 != v31);
      }
    }
    NLCompositeTransliterator::assignLanguageModelScoreToCandidates(a1, (NLTransliterationCandidate ***)a5, a2);
    if (v69.__r_.__value_.__r.__words[0])
    {
      v69.__r_.__value_.__l.__size_ = v69.__r_.__value_.__r.__words[0];
      operator delete(v69.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (&v62 != (void **)a5)
      std::vector<NLTextSlot *>::__assign_with_size[abi:ne180100]<NLTextSlot **,NLTextSlot **>((char *)a5, v13, v14, (v14 - (uint64_t)v13) >> 3);
    NLCompositeTransliterator::assignLanguageModelScoreToCandidates(a1, (NLTransliterationCandidate ***)&v64, a2);
    v15 = (NLTransliterationCandidate **)v64;
    v16 = v65;
    if (v64 != v65)
    {
      do
      {
        if ((candidateSurfaceFormPresentInVector(*v15, (NLTransliterationCandidate ***)a5) & 1) != 0)
        {
          v17 = *v15;
          if (*v15)
          {
            if (*((char *)v17 + 47) < 0)
              operator delete(*((void **)v17 + 3));
            if (*((char *)v17 + 23) < 0)
              operator delete(*(void **)v17);
            MEMORY[0x1A1B0E068](v17, 0x1012C40B0087DDBLL);
          }
        }
        else
        {
          v19 = (_QWORD *)a5->__r_.__value_.__l.__size_;
          v18 = a5->__r_.__value_.__r.__words[2];
          if ((unint64_t)v19 >= v18)
          {
            v21 = (uint64_t)((uint64_t)v19 - a5->__r_.__value_.__r.__words[0]) >> 3;
            if ((unint64_t)(v21 + 1) >> 61)
              std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
            v22 = v18 - a5->__r_.__value_.__r.__words[0];
            v23 = v22 >> 2;
            if (v22 >> 2 <= (unint64_t)(v21 + 1))
              v23 = v21 + 1;
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v24 = v23;
            if (v24)
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&a5->__r_.__value_.__r.__words[2], v24);
            else
              v25 = 0;
            v26 = (NLTransliterationCandidate **)&v25[8 * v21];
            *v26 = *v15;
            v20 = v26 + 1;
            v28 = (std::string::pointer)a5->__r_.__value_.__r.__words[0];
            v27 = (std::string::pointer)a5->__r_.__value_.__l.__size_;
            if (v27 != a5->__r_.__value_.__l.__data_)
            {
              do
              {
                v29 = (NLTransliterationCandidate *)*((_QWORD *)v27 - 1);
                v27 -= 8;
                *--v26 = v29;
              }
              while (v27 != v28);
              v27 = (std::string::pointer)a5->__r_.__value_.__r.__words[0];
            }
            a5->__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
            a5->__r_.__value_.__l.__size_ = (std::string::size_type)v20;
            a5->__r_.__value_.__r.__words[2] = (std::string::size_type)&v25[8 * v24];
            if (v27)
              operator delete(v27);
          }
          else
          {
            *v19 = *v15;
            v20 = v19 + 1;
          }
          a5->__r_.__value_.__l.__size_ = (std::string::size_type)v20;
        }
        ++v15;
      }
      while (v15 != v16);
    }
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v45 = (NLTransliterationCandidate **)a5->__r_.__value_.__r.__words[0];
    while (1)
    {
      while (1)
      {
        if (v45 == (NLTransliterationCandidate **)a5->__r_.__value_.__l.__size_)
          goto LABEL_101;
        TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord(*v45);
        CFStringFromString = createCFStringFromString(TransliteratedWord);
        v69.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringFromString;
        if (((*(uint64_t (**)(_QWORD, CFStringRef, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), CFStringFromString, 0, 0) & 1) == 0)break;
        ++v45;
        if (CFStringFromString)
          goto LABEL_100;
      }
      v48 = *v45;
      if (*v45)
      {
        if (*((char *)v48 + 47) < 0)
          operator delete(*((void **)v48 + 3));
        if (*((char *)v48 + 23) < 0)
          operator delete(*(void **)v48);
        MEMORY[0x1A1B0E068](v48, 0x1012C40B0087DDBLL);
      }
      v49 = (NLTransliterationCandidate **)a5->__r_.__value_.__l.__size_;
      v50 = (char *)v49 - (char *)(v45 + 1);
      if (v49 != v45 + 1)
        memmove(v45, v45 + 1, (char *)v49 - (char *)(v45 + 1));
      a5->__r_.__value_.__l.__size_ = (std::string::size_type)v45 + v50;
      if (CFStringFromString)
LABEL_100:
        CFRelease(CFStringFromString);
    }
  }
LABEL_101:
  updated = NLCompositeTransliterator::updateCandidatesWithEmojiCandidates(a1, (uint64_t)a5);
  if (updated + 5 >= updated + a4)
    v52 = updated + a4;
  else
    v52 = updated + 5;
  NLCompositeTransliterator::trimCandidatesToSize(updated, (uint64_t *)a5, v52);
  NLCompositeTransliterator::setIsInVocabularyforCandidates(a1, (NLTransliterationCandidate ***)a5);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v69);
  v53 = (uint64_t *)a5->__r_.__value_.__r.__words[0];
  v54 = (uint64_t *)a5->__r_.__value_.__l.__size_;
  if ((uint64_t *)a5->__r_.__value_.__l.__data_ != v54)
  {
    v55 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v56 = *v53;
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"<", 1);
      v58 = operator<<(v57, v56);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)">", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(_QWORD *)(*v59 - 24)));
      v60 = std::locale::use_facet(&v68, v55);
      ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
      std::locale::~locale(&v68);
      std::ostream::put();
      std::ostream::flush();
      ++v53;
    }
    while (v53 != v54);
  }
  v61 = _nlpDefaultLog();
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    NLCompositeTransliterator::getTransliterationCandidates((char *)&v68, buf, v61);
  }
  v69.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
  *(std::string::size_type *)((char *)v69.__r_.__value_.__r.__words + *(_QWORD *)(v69.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v69.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
  if (v71 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1B0DFFC](&v72);
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v64)
  {
    v65 = (NLTransliterationCandidate **)v64;
    operator delete(v64);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  NLOSSignPostgetTransliterationCandidates::~NLOSSignPostgetTransliterationCandidates(&v67);
}

void sub_1A18BBF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,os_signpost_id_t a22,std::locale a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a9)
    operator delete(a9);
  if (a12)
    operator delete(a12);
  if (a20 < 0)
    operator delete(a15);
  v29 = *(void **)v27;
  if (*(_QWORD *)v27)
  {
    *(_QWORD *)(v27 + 8) = v29;
    operator delete(v29);
  }
  NLOSSignPostgetTransliterationCandidates::~NLOSSignPostgetTransliterationCandidates(&a22);
  _Unwind_Resume(a1);
}

uint64_t candidateSurfaceFormPresentInVector(NLTransliterationCandidate *a1, NLTransliterationCandidate ***a2)
{
  NLTransliterationCandidate **v2;
  NLTransliterationCandidate **v3;
  unsigned __int8 *TransliteratedWord;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  while (1)
  {
    TransliteratedWord = (unsigned __int8 *)NLTransliterationCandidate::getTransliteratedWord(*v2);
    v6 = NLTransliterationCandidate::getTransliteratedWord(a1);
    v7 = TransliteratedWord[23];
    if ((v7 & 0x80u) == 0)
      v8 = TransliteratedWord[23];
    else
      v8 = *((_QWORD *)TransliteratedWord + 1);
    v9 = *(unsigned __int8 *)(v6 + 23);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(v6 + 8);
    if (v8 != v9)
      goto LABEL_17;
    v11 = v10 >= 0 ? (unsigned __int8 *)v6 : *(unsigned __int8 **)v6;
    if ((v7 & 0x80) != 0)
      break;
    if (!TransliteratedWord[23])
      return 1;
    while (*TransliteratedWord == *v11)
    {
      ++TransliteratedWord;
      ++v11;
      if (!--v7)
        return 1;
    }
LABEL_17:
    if (++v2 == v3)
      return 0;
  }
  if (memcmp(*(const void **)TransliteratedWord, v11, *((_QWORD *)TransliteratedWord + 1)))
    goto LABEL_17;
  return 1;
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::DictionaryRef(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_1A18BC190(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

void NLOSSignPostgetTransliterationCandidates::NLOSSignPostgetTransliterationCandidates(NLOSSignPostgetTransliterationCandidates *this)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  NSObject *v5;
  uint8_t v6[16];

  v2 = _nlpSignpostLog();
  *(_QWORD *)this = os_signpost_id_make_with_pointer(v2, this);
  v3 = _nlpSignpostLog();
  v4 = *(_QWORD *)this;
  if ((unint64_t)(*(_QWORD *)this - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = v3;
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)v6 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1802000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "getTransliterationCandidates", (const char *)&unk_1A18F08CD, v6, 2u);
    }
  }
}

void NLOSSignPostgetTransliterationCandidates::~NLOSSignPostgetTransliterationCandidates(os_signpost_id_t *this)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = _nlpSignpostLog();
  v3 = *this;
  if (*this - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1802000, v4, OS_SIGNPOST_INTERVAL_END, v3, "getTransliterationCandidates", (const char *)&unk_1A18F08CD, v5, 2u);
    }
  }
}

void nlp::CFScopedPtr<__EmojiLocaleDataWrapper const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

char *std::vector<NLTransliterationCandidate *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<NLTransliterationCandidate **>,std::__wrap_iter<NLTransliterationCandidate **>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<NLTransliterationCandidate *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1A18BC4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<NLTransliterationCandidate *>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void std::vector<NLTransliterationCandidate *>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t *std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

void std::__stable_sort<std::_ClassicAlgPolicy,NLCompositeTransliterator::assignLanguageModelScoreToCandidates(std::vector<NLTransliterationCandidate *> &,std::vector<std::string> const&)::$_2 &,std::__wrap_iter<NLTransliterationCandidate **>>(NLTransliterationCandidate **a1, NLTransliterationCandidate **a2, unint64_t a3, NLTransliterationCandidate **a4, uint64_t a5)
{
  NLTransliterationCandidate **v6;
  NLTransliterationCandidate *v7;
  double TotalScore;
  NLTransliterationCandidate *v9;
  NLTransliterationCandidate **v11;
  uint64_t v12;
  NLTransliterationCandidate **v13;
  NLTransliterationCandidate *v14;
  double v15;
  NLTransliterationCandidate *v16;
  uint64_t v17;
  NLTransliterationCandidate *v18;
  double v19;
  NLTransliterationCandidate **v20;
  NLTransliterationCandidate **v22;
  unint64_t v23;
  NLTransliterationCandidate **v24;
  unint64_t v25;
  NLTransliterationCandidate **v26;
  NLTransliterationCandidate **v27;
  NLTransliterationCandidate **v28;
  NLTransliterationCandidate **v29;
  NLTransliterationCandidate *v30;
  double v31;
  double v32;
  NLTransliterationCandidate **v33;
  uint64_t v34;
  char v35;
  NLTransliterationCandidate **v36;
  uint64_t v37;

  if (a3 >= 2)
  {
    v6 = a1;
    if (a3 == 2)
    {
      v7 = *a1;
      TotalScore = NLTransliterationCandidate::getTotalScore(*(a2 - 1));
      if (TotalScore > NLTransliterationCandidate::getTotalScore(v7))
      {
        v9 = *v6;
        *v6 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v22 = a4;
      v23 = a3 >> 1;
      v24 = &a1[a3 >> 1];
      v25 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,NLCompositeTransliterator::assignLanguageModelScoreToCandidates(std::vector<NLTransliterationCandidate *> &,std::vector<std::string> const&)::$_2 &,std::__wrap_iter<NLTransliterationCandidate **>>(a1, v24, v25, a4);
        v26 = &v22[v23];
        std::__stable_sort_move<std::_ClassicAlgPolicy,NLCompositeTransliterator::assignLanguageModelScoreToCandidates(std::vector<NLTransliterationCandidate *> &,std::vector<std::string> const&)::$_2 &,std::__wrap_iter<NLTransliterationCandidate **>>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v26);
        v27 = &v22[a3];
        v28 = v26;
        while (v28 != v27)
        {
          v29 = v28;
          v30 = *v22;
          v31 = NLTransliterationCandidate::getTotalScore(*v28);
          v32 = NLTransliterationCandidate::getTotalScore(v30);
          if (v31 > v32)
            v33 = v29;
          else
            v33 = v22;
          v22 += v31 <= v32;
          v28 = &v29[v31 > v32];
          *v6++ = *v33;
          if (v22 == v26)
          {
            if (v28 != v27)
            {
              v34 = 0;
              if (v31 > v32)
                v35 = 1;
              else
                v35 = 2;
              v36 = &v29[v35 & 1];
              do
              {
                v6[v34] = v36[v34];
                ++v34;
              }
              while (&v36[v34] != v27);
            }
            return;
          }
        }
        if (v22 != v26)
        {
          v37 = 0;
          do
          {
            v6[v37] = v22[v37];
            ++v37;
          }
          while (&v22[v37] != v26);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,NLCompositeTransliterator::assignLanguageModelScoreToCandidates(std::vector<NLTransliterationCandidate *> &,std::vector<std::string> const&)::$_2 &,std::__wrap_iter<NLTransliterationCandidate **>>(a1, v24, v25, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,NLCompositeTransliterator::assignLanguageModelScoreToCandidates(std::vector<NLTransliterationCandidate *> &,std::vector<std::string> const&)::$_2 &,std::__wrap_iter<NLTransliterationCandidate **>>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v22, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,NLCompositeTransliterator::assignLanguageModelScoreToCandidates(std::vector<NLTransliterationCandidate *> &,std::vector<std::string> const&)::$_2 &,std::__wrap_iter<NLTransliterationCandidate **>>(v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v22, a5);
      }
    }
    else if (a1 != a2)
    {
      v11 = a1 + 1;
      if (a1 + 1 != a2)
      {
        v12 = 0;
        v13 = a1;
        do
        {
          v14 = *v13;
          v13 = v11;
          v15 = NLTransliterationCandidate::getTotalScore(*v11);
          if (v15 > NLTransliterationCandidate::getTotalScore(v14))
          {
            v16 = *v13;
            v17 = v12;
            while (1)
            {
              *(NLTransliterationCandidate **)((char *)v6 + v17 + 8) = *(NLTransliterationCandidate **)((char *)v6 + v17);
              if (!v17)
                break;
              v18 = *(NLTransliterationCandidate **)((char *)v6 + v17 - 8);
              v19 = NLTransliterationCandidate::getTotalScore(v16);
              v17 -= 8;
              if (v19 <= NLTransliterationCandidate::getTotalScore(v18))
              {
                v20 = (NLTransliterationCandidate **)((char *)v6 + v17 + 8);
                goto LABEL_15;
              }
            }
            v20 = v6;
LABEL_15:
            *v20 = v16;
          }
          v11 = v13 + 1;
          v12 += 8;
        }
        while (v13 + 1 != a2);
      }
    }
  }
}

void std::__stable_sort_move<std::_ClassicAlgPolicy,NLCompositeTransliterator::assignLanguageModelScoreToCandidates(std::vector<NLTransliterationCandidate *> &,std::vector<std::string> const&)::$_2 &,std::__wrap_iter<NLTransliterationCandidate **>>(NLTransliterationCandidate **a1, NLTransliterationCandidate **a2, unint64_t a3, NLTransliterationCandidate **a4)
{
  NLTransliterationCandidate **v4;
  NLTransliterationCandidate **v6;
  NLTransliterationCandidate **v8;
  NLTransliterationCandidate *v9;
  double TotalScore;
  double v11;
  NLTransliterationCandidate **v12;
  NLTransliterationCandidate **v13;
  uint64_t v14;
  NLTransliterationCandidate **v15;
  NLTransliterationCandidate **v16;
  NLTransliterationCandidate *v17;
  double v18;
  NLTransliterationCandidate **v19;
  uint64_t v20;
  NLTransliterationCandidate *v21;
  double v22;
  NLTransliterationCandidate *v23;
  NLTransliterationCandidate **v24;
  NLTransliterationCandidate **v25;
  NLTransliterationCandidate **v26;
  NLTransliterationCandidate *v27;
  double v28;
  double v29;
  NLTransliterationCandidate **v30;
  uint64_t v31;
  NLTransliterationCandidate **v32;
  uint64_t v33;

  if (a3)
  {
    v4 = a4;
    v6 = a1;
    if (a3 == 1)
    {
LABEL_9:
      *v4 = *v6;
      return;
    }
    if (a3 == 2)
    {
      v8 = a2 - 1;
      v9 = *a1;
      TotalScore = NLTransliterationCandidate::getTotalScore(*(a2 - 1));
      v11 = NLTransliterationCandidate::getTotalScore(v9);
      if (TotalScore <= v11)
        v12 = v6;
      else
        v12 = v8;
      *v4++ = *v12;
      if (TotalScore <= v11)
        v6 = v8;
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      v24 = &a1[a3 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,NLCompositeTransliterator::assignLanguageModelScoreToCandidates(std::vector<NLTransliterationCandidate *> &,std::vector<std::string> const&)::$_2 &,std::__wrap_iter<NLTransliterationCandidate **>>(a1, v24, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,NLCompositeTransliterator::assignLanguageModelScoreToCandidates(std::vector<NLTransliterationCandidate *> &,std::vector<std::string> const&)::$_2 &,std::__wrap_iter<NLTransliterationCandidate **>>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v25 = &v6[a3 >> 1];
      while (v25 != a2)
      {
        v26 = v25;
        v27 = *v6;
        v28 = NLTransliterationCandidate::getTotalScore(*v25);
        v29 = NLTransliterationCandidate::getTotalScore(v27);
        if (v28 <= v29)
          v30 = v6;
        else
          v30 = v26;
        v25 = &v26[v28 > v29];
        v6 += v28 <= v29;
        *v4++ = *v30;
        if (v6 == v24)
        {
          if (v25 != a2)
          {
            v31 = 0;
            v32 = &v26[v28 > v29];
            do
            {
              v4[v31] = v32[v31];
              ++v31;
            }
            while (&v32[v31] != a2);
          }
          return;
        }
      }
      if (v6 != v24)
      {
        v33 = 0;
        do
        {
          v4[v33] = v6[v33];
          ++v33;
        }
        while (&v6[v33] != v24);
      }
    }
    else if (a1 != a2)
    {
      v13 = a1 + 1;
      *a4 = *a1;
      if (a1 + 1 != a2)
      {
        v14 = 0;
        v15 = a4;
        do
        {
          v16 = v15;
          v17 = *v15++;
          v18 = NLTransliterationCandidate::getTotalScore(*v13);
          v19 = v15;
          if (v18 > NLTransliterationCandidate::getTotalScore(v17))
          {
            v16[1] = *v16;
            v19 = v4;
            if (v16 != v4)
            {
              v20 = v14;
              while (1)
              {
                v19 = (NLTransliterationCandidate **)((char *)v4 + v20);
                v21 = *(NLTransliterationCandidate **)((char *)v4 + v20 - 8);
                v22 = NLTransliterationCandidate::getTotalScore(*v13);
                if (v22 <= NLTransliterationCandidate::getTotalScore(v21))
                  break;
                *v19 = *(v19 - 1);
                v20 -= 8;
                if (!v20)
                {
                  v19 = v4;
                  break;
                }
              }
            }
          }
          v23 = *v13++;
          *v19 = v23;
          v14 += 8;
        }
        while (v13 != a2);
      }
    }
  }
}

void std::__inplace_merge<std::_ClassicAlgPolicy,NLCompositeTransliterator::assignLanguageModelScoreToCandidates(std::vector<NLTransliterationCandidate *> &,std::vector<std::string> const&)::$_2 &,std::__wrap_iter<NLTransliterationCandidate **>>(NLTransliterationCandidate **a1, NLTransliterationCandidate **a2, NLTransliterationCandidate **a3, uint64_t a4, uint64_t a5, NLTransliterationCandidate **a6, uint64_t a7)
{
  unint64_t v13;
  uint64_t v14;
  NLTransliterationCandidate *v15;
  double TotalScore;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NLTransliterationCandidate **v22;
  char *v23;
  unint64_t v24;
  NLTransliterationCandidate **v25;
  char *v26;
  NLTransliterationCandidate *v27;
  double v28;
  uint64_t v29;
  NLTransliterationCandidate **v30;
  unint64_t v31;
  NLTransliterationCandidate **v32;
  NLTransliterationCandidate **v33;
  NLTransliterationCandidate *v34;
  NLTransliterationCandidate *v35;
  double v36;
  double v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  NLTransliterationCandidate **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NLTransliterationCandidate **v51;
  NLTransliterationCandidate **v52;
  NLTransliterationCandidate *v53;
  double v54;
  double v55;
  NLTransliterationCandidate **v56;
  uint64_t v57;
  NLTransliterationCandidate **v58;
  NLTransliterationCandidate *v59;
  double v60;
  double v61;
  NLTransliterationCandidate **v62;
  NLTransliterationCandidate *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  NLTransliterationCandidate **v69;
  NLTransliterationCandidate **v70;
  uint64_t v71;

  v71 = a5;
  if (a5)
  {
    while (v71 > a7 && a4 > a7)
    {
      if (!a4)
        return;
      v13 = 0;
      v14 = -a4;
      while (1)
      {
        v15 = a1[v13 / 8];
        TotalScore = NLTransliterationCandidate::getTotalScore(*a2);
        if (TotalScore > NLTransliterationCandidate::getTotalScore(v15))
          break;
        v13 += 8;
        if (__CFADD__(v14++, 1))
          return;
      }
      v18 = -v14;
      v19 = v71;
      v69 = a6;
      v70 = a3;
      v67 = (char *)&a1[v13 / 8];
      v68 = a7;
      if (-v14 >= v71)
      {
        if (v14 == -1)
        {
          v63 = a1[v13 / 8];
          a1[v13 / 8] = *a2;
          *a2 = v63;
          return;
        }
        if (v14 > 0)
          v18 = 1 - v14;
        v29 = v18 >> 1;
        v30 = a3;
        v23 = (char *)&a1[v18 >> 1] + v13;
        v22 = a2;
        if (a2 != v30)
        {
          v66 = v18 >> 1;
          v31 = v70 - a2;
          v22 = a2;
          do
          {
            v32 = &v22[v31 >> 1];
            v34 = *v32;
            v33 = v32 + 1;
            v35 = *(NLTransliterationCandidate **)v23;
            v36 = NLTransliterationCandidate::getTotalScore(v34);
            v37 = NLTransliterationCandidate::getTotalScore(v35);
            if (v36 <= v37)
              v31 >>= 1;
            else
              v31 += ~(v31 >> 1);
            if (v36 > v37)
              v22 = v33;
          }
          while (v31);
          v19 = v71;
          v29 = v66;
        }
        v21 = v22 - a2;
      }
      else
      {
        if (v71 >= 0)
          v20 = v71;
        else
          v20 = v71 + 1;
        v21 = v20 >> 1;
        v22 = &a2[v20 >> 1];
        v23 = (char *)a2;
        if ((char *)a2 - (char *)a1 != v13)
        {
          v65 = v20 >> 1;
          v24 = (uint64_t)((char *)a2 - (char *)a1 - v13) >> 3;
          v23 = (char *)&a1[v13 / 8];
          do
          {
            v25 = (NLTransliterationCandidate **)&v23[8 * (v24 >> 1)];
            v27 = *v25;
            v26 = (char *)(v25 + 1);
            v28 = NLTransliterationCandidate::getTotalScore(*v22);
            if (v28 > NLTransliterationCandidate::getTotalScore(v27))
            {
              v24 >>= 1;
            }
            else
            {
              v23 = v26;
              v24 += ~(v24 >> 1);
            }
          }
          while (v24);
          v19 = v71;
          v21 = v65;
        }
        v29 = (uint64_t)(v23 - (char *)a1 - v13) >> 3;
      }
      a4 = -(v29 + v14);
      v38 = v19 - v21;
      v39 = (char *)a2;
      v40 = v19;
      v41 = v29;
      v42 = v21;
      v43 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<NLTransliterationCandidate **>,std::__wrap_iter<NLTransliterationCandidate **>>(v23, v39, (char *)v22);
      v44 = v41;
      v45 = v43;
      if (v44 + v42 >= v40 - (v44 + v42) - v14)
      {
        v47 = v22;
        a6 = v69;
        v48 = v44;
        v49 = v42;
        a7 = v68;
        std::__inplace_merge<std::_ClassicAlgPolicy,NLCompositeTransliterator::assignLanguageModelScoreToCandidates(std::vector<NLTransliterationCandidate *> &,std::vector<std::string> const&)::$_2 &,std::__wrap_iter<NLTransliterationCandidate **>>(v43, v47, v70, a4, v38, v69, v68);
        a2 = (NLTransliterationCandidate **)v23;
        v38 = v49;
        a4 = v48;
        a3 = (NLTransliterationCandidate **)v45;
        v45 = v67;
      }
      else
      {
        v46 = v42;
        a7 = v68;
        std::__inplace_merge<std::_ClassicAlgPolicy,NLCompositeTransliterator::assignLanguageModelScoreToCandidates(std::vector<NLTransliterationCandidate *> &,std::vector<std::string> const&)::$_2 &,std::__wrap_iter<NLTransliterationCandidate **>>(&a1[v13 / 8], v23, v43, v44, v46, v69, v68);
        a2 = v22;
        a6 = v69;
        a3 = v70;
      }
      v71 = v38;
      a1 = (NLTransliterationCandidate **)v45;
      if (!v38)
        return;
    }
    if (a4 <= v71)
    {
      if (a1 != a2)
      {
        v57 = 0;
        do
        {
          a6[v57] = a1[v57];
          ++v57;
        }
        while (&a1[v57] != a2);
        if (v57 * 8)
        {
          v58 = a6;
          while (a2 != a3)
          {
            v59 = *v58;
            v60 = NLTransliterationCandidate::getTotalScore(*a2);
            v61 = NLTransliterationCandidate::getTotalScore(v59);
            if (v60 <= v61)
              v62 = v58;
            else
              v62 = a2;
            a2 += v60 > v61;
            v58 += v60 <= v61;
            *a1++ = *v62;
            if (&a6[v57] == v58)
              return;
          }
          memmove(a1, v58, (char *)a6 - (char *)v58 + v57 * 8);
        }
      }
    }
    else if (a3 != a2)
    {
      v50 = 0;
      do
      {
        a6[v50] = a2[v50];
        ++v50;
      }
      while (&a2[v50] != a3);
      if (v50 * 8)
      {
        v51 = &a6[v50];
        v52 = a3 - 1;
        while (a2 != a1)
        {
          v53 = *(a2 - 1);
          v54 = NLTransliterationCandidate::getTotalScore(*(v51 - 1));
          v55 = NLTransliterationCandidate::getTotalScore(v53);
          if (v54 <= v55)
            v56 = v51;
          else
            v56 = a2;
          if (v54 <= v55)
            --v51;
          else
            --a2;
          *v52-- = *(v56 - 1);
          if (v51 == a6)
            return;
        }
        v64 = 0;
        do
        {
          v52[v64] = v51[v64 - 1];
          --v64;
        }
        while (&v51[v64] != a6);
      }
    }
  }
}

uint64_t NL::ParseIntent::ParseIntent(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = this + 24;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  return this;
}

uint64_t NL::ParseIntent::confidence(NL::ParseIntent *this)
{
  float v1;

  v1 = *(float *)this;
  if (*(float *)this >= 20.0)
    return 3;
  if (v1 >= 15.0)
    return 2;
  return v1 > 8.0;
}

void NL::ParseIntent::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v5;
  char **v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  v2 = *a2;
  if (*a2)
  {
    v5 = operator new(0x30uLL);
    v5[2] = 0;
    *v5 = &unk_1E45CF038;
    v5[1] = 0;
    v5[4] = 0;
    v5[5] = 0;
    *((_QWORD *)&v17 + 1) = v5;
    v5[3] = 0;
    v6 = (char **)(v5 + 3);
    v7 = a2[1];
    *(_QWORD *)&v16 = v2;
    *((_QWORD *)&v16 + 1) = v7;
    *(_QWORD *)&v17 = v6;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100](v6, &v16);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100]((char **)(a1 + 40), &v17);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_1A18BD1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void NL::ParseIntent::append(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  char **v5;
  char **v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  char **v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v2 = *a2;
  if (*a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = (char **)(a1 + 40);
    if (v4 == *(_QWORD *)(a1 + 40))
    {
      v13 = operator new(0x30uLL);
      v13[2] = 0;
      *v13 = &unk_1E45CF038;
      v13[1] = 0;
      v13[4] = 0;
      v13[5] = 0;
      *((_QWORD *)&v23 + 1) = v13;
      v13[3] = 0;
      v14 = (char **)(v13 + 3);
      v15 = a2[1];
      *(_QWORD *)&v22 = v2;
      *((_QWORD *)&v22 + 1) = v15;
      *(_QWORD *)&v23 = v14;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100](v14, &v22);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
      if (*((_QWORD *)&v22 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100](v5, &v23);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      if (*((_QWORD *)&v23 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v12 = __ldaxr(v21);
        while (__stlxr(v12 - 1, v21));
        goto LABEL_21;
      }
    }
    else
    {
      v6 = *(char ***)(v4 - 16);
      v7 = a2[1];
      *(_QWORD *)&v24 = *a2;
      *((_QWORD *)&v24 + 1) = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100](v6, &v24);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
LABEL_21:
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
}

void sub_1A18BD36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NL::ParseAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CF038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::ParseAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CF038;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

void std::__shared_ptr_emplace<NL::ParseAttributes>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void NL::SharedCFType::Wrapper::~Wrapper(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

_QWORD *NL::SharedCFType::SharedCFType(NL::SharedCFType *this, const void *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = a2;
  return std::shared_ptr<NL::SharedCFType::Wrapper>::shared_ptr[abi:ne180100]<NL::SharedCFType::Wrapper,void>(this, (uint64_t)v4);
}

uint64_t NL::SharedCFType::get(NL::SharedCFType *this)
{
  return **(_QWORD **)this;
}

_QWORD *std::shared_ptr<NL::SharedCFType::Wrapper>::shared_ptr[abi:ne180100]<NL::SharedCFType::Wrapper,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E45CF188;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1A18BD4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<NL::SharedCFType::Wrapper>::reset[abi:ne180100]((const void ***)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<NL::SharedCFType::Wrapper *,std::shared_ptr<NL::SharedCFType::Wrapper>::__shared_ptr_default_delete<NL::SharedCFType::Wrapper,NL::SharedCFType::Wrapper>,std::allocator<NL::SharedCFType::Wrapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

const void **std::__shared_ptr_pointer<NL::SharedCFType::Wrapper *,std::shared_ptr<NL::SharedCFType::Wrapper>::__shared_ptr_default_delete<NL::SharedCFType::Wrapper,NL::SharedCFType::Wrapper>,std::allocator<NL::SharedCFType::Wrapper>>::__on_zero_shared(uint64_t a1)
{
  const void **result;

  result = *(const void ***)(a1 + 24);
  if (result)
  {
    NL::SharedCFType::Wrapper::~Wrapper(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<NL::SharedCFType::Wrapper *,std::shared_ptr<NL::SharedCFType::Wrapper>::__shared_ptr_default_delete<NL::SharedCFType::Wrapper,NL::SharedCFType::Wrapper>,std::allocator<NL::SharedCFType::Wrapper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

const void **std::unique_ptr<NL::SharedCFType::Wrapper>::reset[abi:ne180100](const void ***a1, const void **a2)
{
  const void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::SharedCFType::Wrapper::~Wrapper(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

void NLArabicWordLanguageModeler::NLArabicWordLanguageModeler(NLArabicWordLanguageModeler *this, const __CFDictionary *a2)
{
  _QWORD *v4;

  NLAbstractLanguageModeler::NLAbstractLanguageModeler(this, CFSTR("ar"));
  *v4 = &unk_1E45CDF78;
  if (CFDictionaryGetValue(a2, CFSTR("useLanguageModel")) == (const void *)*MEMORY[0x1E0C9AE50])
    NLArabicWordLanguageModeler::loadLanguageModel(this, a2);
}

void sub_1A18BD658(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler *v1;

  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

void NLArabicWordLanguageModeler::loadLanguageModel(NLArabicWordLanguageModeler *this, CFDictionaryRef theDict)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  NL::CFLogger *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t valuePtr;

  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0D43450], (const void *)*MEMORY[0x1E0C9AE50]);
  valuePtr = 0x3FD0000000000000;
  v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43488], v5);
  CFRelease(v5);
  v9 = 1;
  v6 = CFNumberCreate(0, kCFNumberLongType, &v9);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43490], v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D434A0], v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43498], v6);
  CFRelease(v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D434C8], CFSTR("ar"));
  *((_QWORD *)this + 1) = LMLanguageModelCreate();
  CFRelease(v4);
  if (!*((_QWORD *)this + 1))
  {
    v8 = NL::CFLogger::sharedInstance(v7);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v8 + 16))(v8, 3, "Could not locate Arabic language model");
  }
}

void NLArabicWordLanguageModeler::~NLArabicWordLanguageModeler(NLArabicWordLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);
  JUMPOUT(0x1A1B0E068);
}

NL::SearchGrammar *NL::SearchGrammar::SearchGrammar(NL::SearchGrammar *this, const __CFURL *a2)
{
  _QWORD *v4;
  NL::SearchRules **v5;
  const __CFURL *v6;
  NL::SearchRules *v7;

  v4 = std::string::basic_string[abi:ne180100]<0>(this, "None");
  v4[3] = 0;
  v4[4] = 0;
  v5 = (NL::SearchRules **)(v4 + 3);
  v4[5] = 0;
  v7 = NL::SearchRules::createFromPath(a2, v6);
  std::unique_ptr<NL::SearchRules>::reset[abi:ne180100](v5, v7);
  return this;
}

void sub_1A18BD868(_Unwind_Exception *a1)
{
  uint64_t v1;
  NL::SearchRules **v2;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v1 + 32);
  std::unique_ptr<NL::SearchRules>::reset[abi:ne180100](v2, 0);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

NL::SearchRules *std::unique_ptr<NL::SearchRules>::reset[abi:ne180100](NL::SearchRules **a1, NL::SearchRules *a2)
{
  NL::SearchRules *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::SearchRules::~SearchRules(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

void NL::SearchGrammar::~SearchGrammar(NL::SearchRules **this)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  std::unique_ptr<NL::SearchRules>::reset[abi:ne180100](this + 3, 0);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

BOOL NL::SearchGrammar::hasResources(NL::SearchGrammar *this)
{
  return *((_QWORD *)this + 3) != 0;
}

NL::SearchRules *NL::SearchGrammar::hasExpansions(NL::SearchGrammar *this, unsigned int a2)
{
  NL::SearchRules *result;

  result = (NL::SearchRules *)*((_QWORD *)this + 3);
  if (result)
    return (NL::SearchRules *)NL::SearchRules::hasExpansions(result, a2);
  return result;
}

void NL::SearchGrammar::expansions(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v4[6];
  _QWORD v5[3];
  char v6;

  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2000000000;
  v6 = 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 0x40000000;
    v4[2] = ___ZNK2NL13SearchGrammar10expansionsEjU13block_pointerFvjRKNSt3__16vectorIjNS1_9allocatorIjEEEEPbE_block_invoke;
    v4[3] = &unk_1E45CF678;
    v4[4] = a3;
    v4[5] = v5;
    NL::SearchRules::expansions(v3, a2, (uint64_t)v4);
  }
  _Block_object_dispose(v5, 8);
}

void sub_1A18BD9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK2NL13SearchGrammar10expansionsEjU13block_pointerFvjRKNSt3__16vectorIjNS1_9allocatorIjEEEEPbE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    *a4 = 1;
  return result;
}

uint64_t NL::SearchGrammar::termIDs(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD v3[5];

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = ___ZNK2NL13SearchGrammar7termIDsEU13block_pointerFvjPbE_block_invoke;
    v3[3] = &unk_1E45D0680;
    v3[4] = a2;
    return NL::SearchRules::termIDs(result, (uint64_t)v3);
  }
  return result;
}

uint64_t ___ZNK2NL13SearchGrammar7termIDsEU13block_pointerFvjPbE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void NL::SearchGrammar::getValidTypeName(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  _BOOL4 v6;
  _BOOL4 v7;
  char *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;

  if (!*(_QWORD *)(a1 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AmbiguousCalendarDate");
  v6 = endswith((uint64_t *)a2, (uint64_t *)__p);
  v7 = v6;
  if (v17 < 0)
  {
    operator delete(__p[0]);
    if (v7)
      goto LABEL_4;
  }
  else if (v6)
  {
LABEL_4:
    v8 = "AmbiguousCalendarDate";
LABEL_27:
    std::string::basic_string[abi:ne180100]<0>(a3, v8);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Date");
  v9 = endswith((uint64_t *)a2, (uint64_t *)__p);
  v10 = v9;
  if (v17 < 0)
  {
    operator delete(__p[0]);
    if (v10)
      goto LABEL_9;
  }
  else if (v9)
  {
LABEL_9:
    v8 = "CalendarDate";
    goto LABEL_27;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AmbiguousCalendarTime");
  if (endswith((uint64_t *)a2, (uint64_t *)__p))
  {
    v11 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "RelativeNowTime");
    v11 = endswith((uint64_t *)a2, (uint64_t *)v14);
    if (v15 < 0)
      operator delete(v14[0]);
  }
  if (v17 < 0)
  {
    operator delete(__p[0]);
    if (v11)
      goto LABEL_17;
  }
  else if (v11)
  {
LABEL_17:
    v8 = "AmbiguousCalendarTime";
    goto LABEL_27;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "CalendarTime");
  if (endswith((uint64_t *)a2, (uint64_t *)__p))
  {
    v12 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "FormattedTime");
    v12 = endswith((uint64_t *)a2, (uint64_t *)v14);
    if (v15 < 0)
      operator delete(v14[0]);
  }
  if (v17 < 0)
    operator delete(__p[0]);
  if (v12)
  {
    v8 = "CalendarTime";
    goto LABEL_27;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Status");
  v13 = endswith((uint64_t *)a2, (uint64_t *)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v13)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Status");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    replaceAll(a3, (char *)__p, (uint64_t)v14);
    if (v15 < 0)
      operator delete(v14[0]);
    if (v17 < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (!NL::SearchRules::termID(*(_QWORD *)(a1 + 24), a2))
    {
      v8 = "";
      goto LABEL_27;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
}

void sub_1A18BDD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void NL::SearchGrammar::getValidRootName(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t size;
  char *v6;
  uint64_t v7;
  std::string *v8;
  char *v9;
  std::string *v10;
  char *v11;
  uint64_t v12;
  std::string *v13;
  char *v14;
  std::string *v15;
  char *v16;
  uint64_t v18;
  std::string *v19;
  char *v20;
  std::string *v21;
  char *v22;
  void *__p[2];
  char v25;
  void *v26[2];
  char v27;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v4 = v3;
  v6 = (char *)a2->__r_.__value_.__r.__words[0];
  size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80u) == 0)
    v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v7 = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80u) == 0)
    v8 = a2;
  else
    v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (v7 >= 4)
  {
    v9 = (char *)v8 + v7;
    v10 = v8;
    do
    {
      v11 = (char *)memchr(v10, 75, v7 - 3);
      if (!v11)
        break;
      if (*(_DWORD *)v11 == 1145981259)
      {
        if (v11 != v9 && v11 - (char *)v8 != -1)
        {
          MEMORY[0x1A1B0DE04](a2, "KIND");
          v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          v6 = (char *)a2->__r_.__value_.__r.__words[0];
          size = a2->__r_.__value_.__l.__size_;
          v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        }
        break;
      }
      v10 = (std::string *)(v11 + 1);
      v7 = v9 - (char *)v10;
    }
    while (v9 - (char *)v10 >= 4);
  }
  if (v4 >= 0)
    v12 = v3;
  else
    v12 = size;
  if (v4 >= 0)
    v13 = a2;
  else
    v13 = (std::string *)v6;
  if (v12 > 4)
  {
    v14 = (char *)v13 + v12;
    v15 = v13;
    do
    {
      v16 = (char *)memchr(v15, 81, v12 - 4);
      if (!v16)
        break;
      if (*(_DWORD *)v16 == 1414485329 && v16[4] == 69)
      {
        if (v16 != v14 && v16 - (char *)v13 != -1)
        {
          MEMORY[0x1A1B0DE04](a2, "QUOTED");
          v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          v6 = (char *)a2->__r_.__value_.__r.__words[0];
          size = a2->__r_.__value_.__l.__size_;
          v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        }
        break;
      }
      v15 = (std::string *)(v16 + 1);
      v12 = v14 - (char *)v15;
    }
    while (v14 - (char *)v15 >= 5);
  }
  if (v4 >= 0)
    v18 = v3;
  else
    v18 = size;
  if (v4 >= 0)
    v19 = a2;
  else
    v19 = (std::string *)v6;
  if (v18 >= 12)
  {
    v20 = (char *)v19 + v18;
    v21 = v19;
    do
    {
      v22 = (char *)memchr(v21, 70, v18 - 11);
      if (!v22)
        break;
      if (*(_QWORD *)v22 == 0x41545441454C4946 && *((_DWORD *)v22 + 2) == 1145391171)
      {
        if (v22 != v20 && v22 - (char *)v19 != -1)
          MEMORY[0x1A1B0DE04](a2, "ATTACHMOD");
        break;
      }
      v21 = (std::string *)(v22 + 1);
      v18 = v20 - (char *)v21;
    }
    while (v20 - (char *)v21 >= 12);
  }
  std::string::basic_string[abi:ne180100]<0>(v26, "1");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a2, (char *)v26, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if (v27 < 0)
    operator delete(v26[0]);
  std::string::basic_string[abi:ne180100]<0>(v26, "3");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a2, (char *)v26, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if (v27 < 0)
    operator delete(v26[0]);
}

void sub_1A18BE0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void NL::SearchGrammar::getValidLeafName(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  _BOOL4 v3;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "Text");
  if (endswith((uint64_t *)a2, (uint64_t *)v6))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Quote");
    v3 = !startswith((unsigned __int8 *)a2, (unsigned __int8 *)__p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v3 = 0;
  }
  if (v7 < 0)
  {
    operator delete(v6[0]);
    if (!v3)
      return;
    goto LABEL_12;
  }
  if (v3)
LABEL_12:
    MEMORY[0x1A1B0DE04](a2, "Text");
}

void sub_1A18BE1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

BOOL NL::SearchGrammar::isTypeValidForTopic(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  _BOOL4 v12;
  void *__p[2];
  char v14;

  if ((char)a2[23] < 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    if (v4 == 3 && **(_WORD **)a2 == 24916 && *(_BYTE *)(*(_QWORD *)a2 + 2) == 103)
      return 0;
    if (v4 != 4)
      goto LABEL_18;
    v3 = *(unsigned __int8 **)a2;
  }
  else
  {
    if (a2[23] == 3)
    {
      if (*(_WORD *)a2 == 24916 && a2[2] == 103)
        return 0;
      goto LABEL_18;
    }
    v3 = a2;
    if (a2[23] != 4)
      goto LABEL_18;
  }
  if (*(_DWORD *)v3 == 1734437958)
    return 0;
LABEL_18:
  std::string::basic_string[abi:ne180100]<0>(__p, "Has");
  v7 = startswith(a2, (unsigned __int8 *)__p);
  v8 = v7;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v8)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "As");
  v9 = startswith(a2, (unsigned __int8 *)__p);
  v10 = v9;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v10)
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Contains");
  v12 = endswith((uint64_t *)a2, (uint64_t *)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  return !v12;
}

void sub_1A18BE3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL NL::SearchGrammar::isTypeSubsumed(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v11;
  unsigned __int8 *i;

  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v4 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = a3[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a3 + 1);
  if (v6 != v7)
    return 1;
  if (v8 >= 0)
    v11 = a3;
  else
    v11 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v11, v5))
      return 1;
  }
  else if ((_DWORD)v4)
  {
    for (i = (unsigned __int8 *)a2; *i == *v11; ++i)
    {
      ++v11;
      if (!--v4)
        return NL::SearchGrammar::getSymbolID(a1, a2) != 21;
    }
    return 1;
  }
  return NL::SearchGrammar::getSymbolID(a1, a2) != 21;
}

uint64_t NL::SearchGrammar::getSymbolID(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 && NL::SearchRules::termID(v3, a2))
    return NL::SearchRules::termID(*(_QWORD *)(a1 + 24), a2);
  else
    return 0;
}

BOOL NL::SearchGrammar::isTypeMultivalued(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  int v9;

  if (*((char *)a2 + 23) < 0)
  {
    v5 = a2[1];
    if (v5 == 12)
    {
      v6 = (_QWORD *)*a2;
      if (*(_QWORD *)*a2 == 0x7261646E656C6143 && *(_DWORD *)(*a2 + 8) == 1702125892)
        return 1;
      v8 = *v6;
      v9 = *((_DWORD *)v6 + 2);
      if (v8 == 0x7261646E656C6143 && v9 == 1701669204)
        return 1;
      v5 = a2[1];
    }
    if (v5 == 21)
    {
      if (*(_QWORD *)*a2 == 0x756F756769626D41
        && *(_QWORD *)(*a2 + 8) == 0x61646E656C614373
        && *(_QWORD *)(*a2 + 13) == 0x656D69547261646ELL)
      {
        return 1;
      }
      if (a2[1] == 21)
      {
        a2 = (_QWORD *)*a2;
        return *a2 == 0x756F756769626D41
            && a2[1] == 0x61646E656C614373
            && *(_QWORD *)((char *)a2 + 13) == 0x657461447261646ELL;
      }
    }
    return 0;
  }
  v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 != 12)
  {
    if (v2 == 21)
    {
      if (*a2 != 0x756F756769626D41
        || a2[1] != 0x61646E656C614373
        || *(_QWORD *)((char *)a2 + 13) != 0x656D69547261646ELL)
      {
        return *a2 == 0x756F756769626D41
            && a2[1] == 0x61646E656C614373
            && *(_QWORD *)((char *)a2 + 13) == 0x657461447261646ELL;
      }
      return 1;
    }
    return 0;
  }
  if (*a2 == 0x7261646E656C6143 && *((_DWORD *)a2 + 2) == 1702125892)
    return 1;
  return *a2 == 0x7261646E656C6143 && *((_DWORD *)a2 + 2) == 1701669204;
}

BOOL NL::SearchGrammar::isInferred(NL::SearchGrammar *this, __int32 a2)
{
  uint64_t v2;
  __int32 *v3;
  __int32 *v4;
  __int32 *v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = *(__int32 **)(v2 + 112);
  v4 = wmemchr(*(__int32 **)(v2 + 104), a2, ((uint64_t)v3 - *(_QWORD *)(v2 + 104)) >> 2);
  if (v4)
    v5 = v4;
  else
    v5 = v3;
  return v5 != *(__int32 **)(v2 + 112);
}

BOOL NL::SearchGrammar::isCombinable(NL::SearchGrammar *this, __int32 a2)
{
  uint64_t v2;
  __int32 *v3;
  __int32 *v4;
  __int32 *v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = *(__int32 **)(v2 + 136);
  v4 = wmemchr(*(__int32 **)(v2 + 128), a2, ((uint64_t)v3 - *(_QWORD *)(v2 + 128)) >> 2);
  if (v4)
    v5 = v4;
  else
    v5 = v3;
  return v5 != *(__int32 **)(v2 + 136);
}

BOOL NL::SearchGrammar::isEquivalent(NL::SearchGrammar *this, unsigned int a2, unsigned int a3)
{
  NL::SearchRules *v4;

  if (a2 == a3)
    return 1;
  v4 = (NL::SearchRules *)*((_QWORD *)this + 3);
  return v4 && NL::SearchRules::isEquivalent(v4, a2, a3);
}

BOOL NL::SearchGrammar::isFunction(NL::SearchGrammar *this, __int32 a2)
{
  uint64_t v2;
  __int32 *v3;
  __int32 *v4;
  __int32 *v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = *(__int32 **)(v2 + 160);
  v4 = wmemchr(*(__int32 **)(v2 + 152), a2, ((uint64_t)v3 - *(_QWORD *)(v2 + 152)) >> 2);
  if (v4)
    v5 = v4;
  else
    v5 = v3;
  return v5 != *(__int32 **)(v2 + 160);
}

BOOL NL::SearchGrammar::requiresComplement(NL::SearchGrammar *this, __int32 a2)
{
  uint64_t v2;
  __int32 *v3;
  __int32 *v4;
  __int32 *v5;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = *(__int32 **)(v2 + 184);
  v4 = wmemchr(*(__int32 **)(v2 + 176), a2, ((uint64_t)v3 - *(_QWORD *)(v2 + 176)) >> 2);
  if (v4)
    v5 = v4;
  else
    v5 = v3;
  return v5 != *(__int32 **)(v2 + 184);
}

BOOL NL::SearchGrammar::tokenOrderReversed(NL::SearchGrammar *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 3);
  return v1 && *v1 != 0;
}

BOOL NL::SearchGrammar::tokenDelayed(NL::SearchGrammar *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  return v1 && *(_BYTE *)(v1 + 1) != 0;
}

uint64_t NL::SearchGrammar::updateParseContext(NL::SearchGrammar *this, unsigned int a2, unsigned int a3, __int16 a4)
{
  NL::SearchRules *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  NL::SearchRules *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  NL::SearchRules *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  NL::SearchRules *v29;
  uint64_t *v30;
  BOOL v31;
  NL::SearchRules *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  NL::SearchRules *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  NL::SearchRules *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v55;
  int v56;
  char *v58;
  int v59;
  char *v61;
  int v62;
  NL::SearchRules *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  NL::SearchRules *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  NL::SearchRules *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  int v88;
  NL::SearchRules *v90;
  unsigned __int8 *v91;
  _BOOL4 v92;
  _BOOL4 v93;
  NL::SearchRules *v94;
  unsigned __int8 *v95;
  _BOOL4 v96;
  _BOOL4 v97;
  NL::SearchRules *v98;
  unsigned __int8 *v99;
  NL::SearchRules *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  _DWORD *v106;
  BOOL v109;
  NL::SearchRules *v110;
  unsigned __int8 *v111;
  NL::SearchRules *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  _DWORD *v118;
  BOOL v121;
  NL::SearchRules *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  NL::SearchRules *v129;
  uint64_t *v130;
  _BOOL4 v131;
  _BOOL4 v132;
  NL::SearchRules *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t result;
  NL::SearchRules *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  NL::SearchRules *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  NL::SearchRules *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  void *__p[2];
  char v172;

  switch(a2)
  {
    case 0x16u:
    case 0x19u:
      NL::ParserContext::setActionSentTo(*((_QWORD *)this + 4));
      break;
    case 0x17u:
    case 0x1Au:
      NL::ParserContext::setActionSentFrom(*((_QWORD *)this + 4));
      break;
    case 0x18u:
      NL::ParserContext::setActionFromTo(*((_QWORD *)this + 4));
      break;
    case 0x1Bu:
      NL::ParserContext::setActionWith(*((_QWORD *)this + 4));
      break;
    case 0x1Du:
      NL::ParserContext::setActionAuthored(*((_QWORD *)this + 4));
      break;
    case 0x21u:
      NL::ParserContext::setAttributeBeforeDate(*((_QWORD *)this + 4));
      break;
    case 0x22u:
      NL::ParserContext::setAttributeAfterDate(*((_QWORD *)this + 4));
      break;
    case 0x2Fu:
      NL::ParserContext::setActionSent(*((_QWORD *)this + 4));
      break;
    case 0x30u:
      NL::ParserContext::setActionReceived(*((_QWORD *)this + 4));
      break;
    case 0x37u:
      NL::ParserContext::setActionCreated(*((_QWORD *)this + 4));
      break;
    case 0x38u:
      NL::ParserContext::setActionModified(*((_QWORD *)this + 4));
      break;
    case 0x39u:
      NL::ParserContext::setActionDownloaded(*((_QWORD *)this + 4));
      break;
    case 0x3Au:
      NL::ParserContext::setActionPrinted(*((_QWORD *)this + 4));
      break;
    case 0x3Bu:
      NL::ParserContext::setActionViewed(*((_QWORD *)this + 4));
      break;
    case 0x3Cu:
      NL::ParserContext::setActionAdded(*((_QWORD *)this + 4));
      break;
    case 0x3Du:
      NL::ParserContext::setActionAirdropped(*((_QWORD *)this + 4));
      break;
    case 0x3Eu:
      NL::ParserContext::setActionMessaged(*((_QWORD *)this + 4));
      break;
    case 0x3Fu:
      NL::ParserContext::setActionMailed(*((_QWORD *)this + 4));
      break;
    default:
      break;
  }
  v8 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v9 = (char *)this;
  if (v8)
    v9 = NL::SearchRules::term(v8, a2);
  if (v9[23] < 0)
  {
    v11 = v9;
    v9 = *(char **)v9;
    v10 = *((_QWORD *)v11 + 1);
  }
  else
  {
    v10 = v9[23];
  }
  if (v10 >= 4)
  {
    v12 = &v9[v10];
    v13 = v9;
    do
    {
      v14 = (char *)memchr(v13, 75, v10 - 3);
      if (!v14)
        break;
      if (*(_DWORD *)v14 == 1145981259)
      {
        if (v14 != v12 && v14 - v9 != -1)
          NL::ParserContext::setAttributeKind(*((_QWORD *)this + 4));
        break;
      }
      v13 = v14 + 1;
      v10 = v12 - v13;
    }
    while (v12 - v13 >= 4);
  }
  v15 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v16 = (char *)this;
  if (v15)
    v16 = NL::SearchRules::term(v15, a3);
  if (v16[23] < 0)
  {
    v18 = v16;
    v16 = *(char **)v16;
    v17 = *((_QWORD *)v18 + 1);
  }
  else
  {
    v17 = v16[23];
  }
  if (v17 >= 4)
  {
    v19 = &v16[v17];
    v20 = v16;
    do
    {
      v21 = (char *)memchr(v20, 68, v17 - 3);
      if (!v21)
        break;
      if (*(_DWORD *)v21 == 1702125892)
      {
        if (v21 != v19 && v21 - v16 != -1)
          NL::ParserContext::setAttributeDate(*((_QWORD *)this + 4));
        break;
      }
      v20 = v21 + 1;
      v17 = v19 - v20;
    }
    while (v19 - v20 >= 4);
  }
  v22 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v23 = (char *)this;
  if (v22)
    v23 = NL::SearchRules::term(v22, a3);
  if (v23[23] < 0)
  {
    v25 = v23;
    v23 = *(char **)v23;
    v24 = *((_QWORD *)v25 + 1);
  }
  else
  {
    v24 = v23[23];
  }
  if (v24 >= 4)
  {
    v26 = &v23[v24];
    v27 = v23;
    do
    {
      v28 = (char *)memchr(v27, 85, v24 - 3);
      if (!v28)
        break;
      if (*(_DWORD *)v28 == 1919251285)
      {
        if (v28 != v26 && v28 - v23 != -1)
        {
          v29 = (NL::SearchRules *)*((_QWORD *)this + 3);
          v30 = (uint64_t *)this;
          if (v29)
            v30 = (uint64_t *)NL::SearchRules::term(v29, a3);
          std::string::basic_string[abi:ne180100]<0>(__p, "Received");
          v31 = endswith(v30, (uint64_t *)__p);
          if (v172 < 0)
            operator delete(__p[0]);
          if (!v31)
            NL::ParserContext::setActionUserAction(*((_QWORD *)this + 4));
        }
        break;
      }
      v27 = v28 + 1;
      v24 = v26 - v27;
    }
    while (v26 - v27 >= 4);
  }
  v32 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v33 = (char *)this;
  if (v32)
    v33 = NL::SearchRules::term(v32, a3);
  if (v33[23] < 0)
  {
    v35 = v33;
    v33 = *(char **)v33;
    v34 = *((_QWORD *)v35 + 1);
  }
  else
  {
    v34 = v33[23];
  }
  if (v34 >= 8)
  {
    v36 = &v33[v34];
    v37 = v33;
    do
    {
      v38 = (char *)memchr(v37, 85, v34 - 7);
      if (!v38)
        break;
      if (*(_QWORD *)v38 == 0x746E655372657355)
      {
        if (v38 != v36 && v38 - v33 != -1)
          NL::ParserContext::setActionUserSent(*((_QWORD *)this + 4));
        break;
      }
      v37 = v38 + 1;
      v34 = v36 - v37;
    }
    while (v36 - v37 >= 8);
  }
  v39 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v40 = (char *)this;
  if (v39)
    v40 = NL::SearchRules::term(v39, a3);
  if (v40[23] < 0)
  {
    v42 = v40;
    v40 = *(char **)v40;
    v41 = *((_QWORD *)v42 + 1);
  }
  else
  {
    v41 = v40[23];
  }
  if (v41 >= 12)
  {
    v43 = &v40[v41];
    v44 = v40;
    do
    {
      v45 = (char *)memchr(v44, 85, v41 - 11);
      if (!v45)
        break;
      if (*(_QWORD *)v45 == 0x6563655272657355 && *((_DWORD *)v45 + 2) == 1684371049)
      {
        if (v45 != v43 && v45 - v40 != -1)
          NL::ParserContext::setActionUserReceived(*((_QWORD *)this + 4));
        break;
      }
      v44 = v45 + 1;
      v41 = v43 - v44;
    }
    while (v43 - v44 >= 12);
  }
  v47 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v48 = (char *)this;
  if (v47)
    v48 = NL::SearchRules::term(v47, a3);
  if (v48[23] < 0)
  {
    v50 = v48;
    v48 = *(char **)v48;
    v49 = *((_QWORD *)v50 + 1);
  }
  else
  {
    v49 = v48[23];
  }
  if (v49 >= 10)
  {
    v51 = &v48[v49];
    v52 = v48;
    do
    {
      v53 = (char *)memchr(v52, 85, v49 - 9);
      if (!v53)
        break;
      if (*(_QWORD *)v53 == 0x7261685372657355 && *((_WORD *)v53 + 4) == 25701)
      {
        if (v53 != v51 && v53 - v48 != -1)
        {
          NL::ParserContext::setActionUserAction(*((_QWORD *)this + 4));
          NL::ParserContext::setActionShared(*((_QWORD *)this + 4));
        }
        break;
      }
      v52 = v53 + 1;
      v49 = v51 - v52;
    }
    while (v51 - v52 >= 10);
  }
  v55 = (char *)this;
  if (*((_QWORD *)this + 3))
    v55 = NL::SearchRules::term(*((NL::SearchRules **)this + 3), a2);
  v56 = v55[23];
  if (v56 < 0)
  {
    if (*((_QWORD *)v55 + 1) != 11)
      goto LABEL_128;
    v55 = *(char **)v55;
  }
  else if (v56 != 11)
  {
    goto LABEL_128;
  }
  if (*(_QWORD *)v55 == 0x4145524352455355 && *(_QWORD *)(v55 + 3) == 0x4445544145524352)
  {
    NL::ParserContext::setActionUserAction(*((_QWORD *)this + 4));
    NL::ParserContext::setActionCreated(*((_QWORD *)this + 4));
  }
LABEL_128:
  v58 = (char *)this;
  if (*((_QWORD *)this + 3))
    v58 = NL::SearchRules::term(*((NL::SearchRules **)this + 3), a2);
  v59 = v58[23];
  if (v59 < 0)
  {
    if (*((_QWORD *)v58 + 1) != 12)
      goto LABEL_141;
    v58 = *(char **)v58;
  }
  else if (v59 != 12)
  {
    goto LABEL_141;
  }
  if (*(_QWORD *)v58 == 0x49444F4D52455355 && *((_DWORD *)v58 + 2) == 1145391430)
  {
    NL::ParserContext::setActionUserAction(*((_QWORD *)this + 4));
    NL::ParserContext::setActionModified(*((_QWORD *)this + 4));
  }
LABEL_141:
  v61 = (char *)this;
  if (*((_QWORD *)this + 3))
    v61 = NL::SearchRules::term(*((NL::SearchRules **)this + 3), a2);
  v62 = v61[23];
  if (v62 < 0)
  {
    if (*((_QWORD *)v61 + 1) != 11)
      goto LABEL_154;
    v61 = *(char **)v61;
  }
  else if (v62 != 11)
  {
    goto LABEL_154;
  }
  if (*(_QWORD *)v61 == 0x4E49525052455355 && *(_QWORD *)(v61 + 3) == 0x4445544E49525052)
  {
    NL::ParserContext::setActionUserAction(*((_QWORD *)this + 4));
    NL::ParserContext::setActionPrinted(*((_QWORD *)this + 4));
  }
LABEL_154:
  v64 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v65 = (char *)this;
  if (v64)
    v65 = NL::SearchRules::term(v64, a2);
  if (v65[23] < 0)
  {
    v67 = v65;
    v65 = *(char **)v65;
    v66 = *((_QWORD *)v67 + 1);
  }
  else
  {
    v66 = v65[23];
  }
  if (v66 >= 10)
  {
    v68 = &v65[v66];
    v69 = v65;
    do
    {
      v70 = (char *)memchr(v69, 85, v66 - 9);
      if (!v70)
        break;
      if (*(_QWORD *)v70 == 0x54534F5052455355 && *((_WORD *)v70 + 4) == 17477)
      {
        if (v70 != v68 && v70 - v65 != -1)
        {
          NL::ParserContext::setActionUserAction(*((_QWORD *)this + 4));
          NL::ParserContext::setTransportSharesheet(*((_QWORD *)this + 4));
          NL::ParserContext::setActionPosted(*((_QWORD *)this + 4));
        }
        break;
      }
      v69 = v70 + 1;
      v66 = v68 - v69;
    }
    while (v68 - v69 >= 10);
  }
  v72 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v73 = (char *)this;
  if (v72)
    v73 = NL::SearchRules::term(v72, a2);
  if (v73[23] < 0)
  {
    v75 = v73;
    v73 = *(char **)v73;
    v74 = *((_QWORD *)v75 + 1);
  }
  else
  {
    v74 = v73[23];
  }
  if (v74 >= 12)
  {
    v76 = &v73[v74];
    v77 = v73;
    do
    {
      v78 = (char *)memchr(v77, 85, v74 - 11);
      if (!v78)
        break;
      if (*(_QWORD *)v78 == 0x4543455252455355 && *((_DWORD *)v78 + 2) == 1145394761)
      {
        if (v78 != v76 && v78 - v73 != -1)
        {
          NL::ParserContext::setActionReceived(*((_QWORD *)this + 4));
          NL::ParserContext::setActionUserReceived(*((_QWORD *)this + 4));
        }
        break;
      }
      v77 = v78 + 1;
      v74 = v76 - v77;
    }
    while (v76 - v77 >= 12);
  }
  v80 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v81 = (char *)this;
  if (v80)
    v81 = NL::SearchRules::term(v80, a2);
  if (v81[23] < 0)
  {
    v83 = v81;
    v81 = *(char **)v81;
    v82 = *((_QWORD *)v83 + 1);
  }
  else
  {
    v82 = v81[23];
  }
  if (v82 >= 8)
  {
    v84 = &v81[v82];
    v85 = v81;
    do
    {
      v86 = (char *)memchr(v85, 85, v82 - 7);
      if (!v86)
        break;
      if (*(_QWORD *)v86 == 0x544E455352455355)
      {
        if (v86 != v84 && v86 - v81 != -1)
        {
          NL::ParserContext::setActionUserAction(*((_QWORD *)this + 4));
          NL::ParserContext::setActionSent(*((_QWORD *)this + 4));
          NL::ParserContext::setActionUserSent(*((_QWORD *)this + 4));
        }
        break;
      }
      v85 = v86 + 1;
      v82 = v84 - v85;
    }
    while (v84 - v85 >= 8);
  }
  v87 = (char *)this;
  if (*((_QWORD *)this + 3))
    v87 = NL::SearchRules::term(*((NL::SearchRules **)this + 3), a2);
  v88 = v87[23];
  if (v88 < 0)
  {
    if (*((_QWORD *)v87 + 1) != 10)
      goto LABEL_215;
    v87 = *(char **)v87;
  }
  else if (v88 != 10)
  {
    goto LABEL_215;
  }
  if (*(_QWORD *)v87 == 0x4957444552414853 && *((_WORD *)v87 + 4) == 18516)
    NL::ParserContext::setActionShared(*((_QWORD *)this + 4));
LABEL_215:
  if (a3 - 17 <= 1)
    NL::ParserContext::setParticipant(*((uint64_t ***)this + 4), a4);
  v90 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v91 = (unsigned __int8 *)this;
  if (v90)
    v91 = (unsigned __int8 *)NL::SearchRules::term(v90, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "POSTED");
  v92 = startswith(v91, (unsigned __int8 *)__p);
  v93 = v92;
  if ((v172 & 0x80000000) == 0)
  {
    if (!v92)
      goto LABEL_222;
    goto LABEL_221;
  }
  operator delete(__p[0]);
  if (v93)
LABEL_221:
    NL::ParserContext::setActionPosted(*((_QWORD *)this + 4));
LABEL_222:
  v94 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v95 = (unsigned __int8 *)this;
  if (v94)
    v95 = (unsigned __int8 *)NL::SearchRules::term(v94, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "SHARED");
  v96 = startswith(v95, (unsigned __int8 *)__p);
  v97 = v96;
  if ((v172 & 0x80000000) == 0)
  {
    if (!v96)
      goto LABEL_227;
    goto LABEL_226;
  }
  operator delete(__p[0]);
  if (v97)
LABEL_226:
    NL::ParserContext::setActionShared(*((_QWORD *)this + 4));
LABEL_227:
  v98 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v99 = (unsigned __int8 *)this;
  if (v98)
    v99 = (unsigned __int8 *)NL::SearchRules::term(v98, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "AIRDROPPED");
  if (startswith(v99, (unsigned __int8 *)__p))
  {
    v100 = (NL::SearchRules *)*((_QWORD *)this + 3);
    v101 = (char *)this;
    if (v100)
      v101 = NL::SearchRules::term(v100, a3);
    if (v101[23] < 0)
    {
      v103 = v101;
      v101 = *(char **)v101;
      v102 = *((_QWORD *)v103 + 1);
    }
    else
    {
      v102 = v101[23];
    }
    v104 = &v101[v102];
    if (v102 >= 7)
    {
      v105 = v101;
      do
      {
        v106 = memchr(v105, 65, v102 - 6);
        if (!v106)
          break;
        if (*v106 == 1685219649 && *(_DWORD *)((char *)v106 + 3) == 1886351972)
          goto LABEL_250;
        v105 = (char *)v106 + 1;
        v102 = v104 - v105;
      }
      while (v104 - v105 > 6);
    }
    v106 = v104;
LABEL_250:
    v109 = v106 == (_DWORD *)v104 || (char *)v106 - v101 == -1;
    if ((v172 & 0x80000000) == 0)
    {
      if (v109)
        goto LABEL_259;
      goto LABEL_258;
    }
    operator delete(__p[0]);
    if (!v109)
LABEL_258:
      NL::ParserContext::setTransportAirdrop(*((_QWORD *)this + 4));
  }
  else if (v172 < 0)
  {
    operator delete(__p[0]);
  }
LABEL_259:
  v110 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v111 = (unsigned __int8 *)this;
  if (v110)
    v111 = (unsigned __int8 *)NL::SearchRules::term(v110, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGED");
  if (startswith(v111, (unsigned __int8 *)__p))
  {
    v112 = (NL::SearchRules *)*((_QWORD *)this + 3);
    v113 = (char *)this;
    if (v112)
      v113 = NL::SearchRules::term(v112, a3);
    if (v113[23] < 0)
    {
      v115 = v113;
      v113 = *(char **)v113;
      v114 = *((_QWORD *)v115 + 1);
    }
    else
    {
      v114 = v113[23];
    }
    v116 = &v113[v114];
    if (v114 >= 7)
    {
      v117 = v113;
      do
      {
        v118 = memchr(v117, 77, v114 - 6);
        if (!v118)
          break;
        if (*v118 == 1936942413 && *(_DWORD *)((char *)v118 + 3) == 1701273971)
          goto LABEL_280;
        v117 = (char *)v118 + 1;
        v114 = v116 - v117;
      }
      while (v116 - v117 > 6);
    }
    v118 = v116;
LABEL_280:
    v121 = v118 == (_DWORD *)v116 || (char *)v118 - v113 == -1;
    if (v172 < 0)
    {
      operator delete(__p[0]);
      if (v121)
        goto LABEL_289;
      goto LABEL_288;
    }
    if (!v121)
LABEL_288:
      NL::ParserContext::setTransportMessages(*((_QWORD *)this + 4));
  }
  else if (v172 < 0)
  {
    operator delete(__p[0]);
  }
LABEL_289:
  if (a2 == 63)
  {
    v122 = (NL::SearchRules *)*((_QWORD *)this + 3);
    v123 = (char *)this;
    if (v122)
      v123 = NL::SearchRules::term(v122, a3);
    if (v123[23] < 0)
    {
      v125 = v123;
      v123 = *(char **)v123;
      v124 = *((_QWORD *)v125 + 1);
    }
    else
    {
      v124 = v123[23];
    }
    if (v124 >= 4)
    {
      v126 = &v123[v124];
      v127 = v123;
      do
      {
        v128 = (char *)memchr(v127, 77, v124 - 3);
        if (!v128)
          break;
        if (*(_DWORD *)v128 == 1818845517)
        {
          if (v128 != v126 && v128 - v123 != -1)
            NL::ParserContext::setTransportMail(*((_QWORD *)this + 4));
          break;
        }
        v127 = v128 + 1;
        v124 = v126 - v127;
      }
      while (v126 - v127 >= 4);
    }
  }
  v129 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v130 = (uint64_t *)this;
  if (v129)
    v130 = (uint64_t *)NL::SearchRules::term(v129, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER");
  v131 = endswith(v130, (uint64_t *)__p);
  v132 = v131;
  if ((v172 & 0x80000000) == 0)
  {
    if (!v131)
      goto LABEL_311;
    goto LABEL_310;
  }
  operator delete(__p[0]);
  if (v132)
  {
LABEL_310:
    NL::ParserContext::setActionMailed(*((_QWORD *)this + 4));
    NL::ParserContext::setAttributeMail(*((_QWORD *)this + 4));
    NL::ParserContext::setActionSentFrom(*((_QWORD *)this + 4));
  }
LABEL_311:
  switch(a3)
  {
    case 'R':
      goto LABEL_316;
    case 'S':
      NL::ParserContext::setAttributeMail(*((_QWORD *)this + 4));
      goto LABEL_316;
    case 'T':
      NL::ParserContext::setAttributeChat(*((_QWORD *)this + 4));
LABEL_316:
      NL::ParserContext::setAttributeMessage(*((_QWORD *)this + 4));
      goto LABEL_318;
    case 'U':
      NL::ParserContext::setAttributeWebsite(*((_QWORD *)this + 4));
      goto LABEL_318;
    case '[':
      result = NL::ParserContext::setAttributeApplication(*((_QWORD *)this + 4));
      goto LABEL_402;
    default:
LABEL_318:
      v133 = (NL::SearchRules *)*((_QWORD *)this + 3);
      v134 = (char *)this;
      if (v133)
        v134 = NL::SearchRules::term(v133, a3);
      if (v134[23] < 0)
      {
        v136 = v134;
        v134 = *(char **)v134;
        v135 = *((_QWORD *)v136 + 1);
      }
      else
      {
        v135 = v134[23];
      }
      if (v135 < 5)
        goto LABEL_336;
      v137 = &v134[v135];
      v138 = v134;
      break;
  }
  do
  {
    v139 = (char *)memchr(v138, 65, v135 - 4);
    if (!v139)
      break;
    if (*(_DWORD *)v139 == 1768191297 && v139[4] == 111)
    {
      if (v139 != v137 && v139 - v134 != -1)
      {
        result = NL::ParserContext::setAttributeAudio(*((_QWORD *)this + 4));
        goto LABEL_402;
      }
      break;
    }
    v138 = v139 + 1;
    v135 = v137 - v138;
  }
  while (v137 - v138 >= 5);
LABEL_336:
  v142 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v143 = (char *)this;
  if (v142)
    v143 = NL::SearchRules::term(v142, a3);
  if (v143[23] < 0)
  {
    v145 = v143;
    v143 = *(char **)v143;
    v144 = *((_QWORD *)v145 + 1);
  }
  else
  {
    v144 = v143[23];
  }
  if (v144 >= 5)
  {
    v146 = &v143[v144];
    v147 = v143;
    do
    {
      v148 = (char *)memchr(v147, 73, v144 - 4);
      if (!v148)
        break;
      if (*(_DWORD *)v148 == 1734438217 && v148[4] == 101)
      {
        if (v148 != v146 && v148 - v143 != -1)
        {
          result = NL::ParserContext::setAttributeImage(*((_QWORD *)this + 4));
          goto LABEL_402;
        }
        break;
      }
      v147 = v148 + 1;
      v144 = v146 - v147;
    }
    while (v146 - v147 >= 5);
  }
  v150 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v151 = (char *)this;
  if (v150)
    v151 = NL::SearchRules::term(v150, a3);
  if (v151[23] < 0)
  {
    v153 = v151;
    v151 = *(char **)v151;
    v152 = *((_QWORD *)v153 + 1);
  }
  else
  {
    v152 = v151[23];
  }
  if (v152 >= 5)
  {
    v154 = &v151[v152];
    v155 = v151;
    do
    {
      v156 = (char *)memchr(v155, 86, v152 - 4);
      if (!v156)
        break;
      if (*(_DWORD *)v156 == 1701079382 && v156[4] == 111)
      {
        if (v156 != v154 && v156 - v151 != -1)
        {
          result = NL::ParserContext::setAttributeVideo(*((_QWORD *)this + 4));
          goto LABEL_402;
        }
        break;
      }
      v155 = v156 + 1;
      v152 = v154 - v155;
    }
    while (v154 - v155 >= 5);
  }
  v158 = (NL::SearchRules *)*((_QWORD *)this + 3);
  v159 = (char *)this;
  if (v158)
    v159 = NL::SearchRules::term(v158, a3);
  if (v159[23] < 0)
  {
    v161 = v159;
    v159 = *(char **)v159;
    v160 = *((_QWORD *)v161 + 1);
  }
  else
  {
    v160 = v159[23];
  }
  if (v160 >= 12)
  {
    v162 = &v159[v160];
    v163 = v159;
    do
    {
      v164 = (char *)memchr(v163, 80, v160 - 11);
      if (!v164)
        break;
      if (*(_QWORD *)v164 == 0x61746E6573657250 && *((_DWORD *)v164 + 2) == 1852795252)
      {
        if (v164 != v162 && v164 - v159 != -1)
        {
          result = NL::ParserContext::setAttributePresentation(*((_QWORD *)this + 4));
          goto LABEL_402;
        }
        break;
      }
      v163 = v164 + 1;
      v160 = v162 - v163;
    }
    while (v162 - v163 >= 12);
  }
  v166 = (uint64_t *)this;
  if (*((_QWORD *)this + 3))
    v166 = (uint64_t *)NL::SearchRules::term(*((NL::SearchRules **)this + 3), a3);
  if (std::string::find[abi:ne180100](v166, "Spreadsheet", 0) == -1)
  {
    v167 = (uint64_t *)this;
    if (*((_QWORD *)this + 3))
      v167 = (uint64_t *)NL::SearchRules::term(*((NL::SearchRules **)this + 3), a3);
    if (std::string::find[abi:ne180100](v167, "Pdf", 0) == -1)
    {
      v168 = (uint64_t *)this;
      if (*((_QWORD *)this + 3))
        v168 = (uint64_t *)NL::SearchRules::term(*((NL::SearchRules **)this + 3), a3);
      if (std::string::find[abi:ne180100](v168, "Document", 0) != -1)
        goto LABEL_401;
      v169 = (uint64_t *)this;
      if (*((_QWORD *)this + 3))
        v169 = (uint64_t *)NL::SearchRules::term(*((NL::SearchRules **)this + 3), a3);
      if (std::string::find[abi:ne180100](v169, "File", 0) != -1)
        goto LABEL_401;
      v170 = (uint64_t *)this;
      if (*((_QWORD *)this + 3))
        v170 = (uint64_t *)NL::SearchRules::term(*((NL::SearchRules **)this + 3), a3);
      result = std::string::find[abi:ne180100](v170, "TextFormat", 0);
      if (a3 - 97 < 2 || result != -1)
LABEL_401:
        result = NL::ParserContext::setAttributeDocument(*((_QWORD *)this + 4));
    }
    else
    {
      result = NL::ParserContext::setAttributePdf(*((_QWORD *)this + 4));
    }
  }
  else
  {
    result = NL::ParserContext::setAttributeSpreadsheet(*((_QWORD *)this + 4));
  }
LABEL_402:
  if (a2 - 69 <= 1)
    return NL::ParserContext::setAttributeAttachment(*((_QWORD *)this + 4));
  return result;
}

void sub_1A18BF960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *NL::SearchGrammar::getSymbol(NL::SearchGrammar *this, unsigned int a2)
{
  NL::SearchRules *v3;

  v3 = (NL::SearchRules *)*((_QWORD *)this + 3);
  if (v3)
    return NL::SearchRules::term(v3, a2);
  else
    return (char *)this;
}

NL::SearchRules *NL::SearchGrammar::getScore(NL::SearchGrammar *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  NL::SearchRules *result;

  result = (NL::SearchRules *)*((_QWORD *)this + 3);
  if (result)
    return (NL::SearchRules *)NL::SearchRules::score(result, a2, a3, a4);
  return result;
}

void NL::SearchRules::~SearchRules(NL::SearchRules *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy((uint64_t)this + 200, *((_QWORD **)this + 26));
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void **)((char *)this + 80);
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::__tree<std::string>::destroy((uint64_t)this + 32, *((char **)this + 5));
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

_QWORD *NLEntityDetectorCreate(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = malloc_type_malloc(0x18uLL, 0x1020040EDCEB4C7uLL);
  *v2 = 0;
  v2[1] = 0;
  *((_DWORD *)v2 + 4) = 0;
  if (a1 && (v3 = DDScannerCreateWithCacheFile(), (*v2 = v3) != 0))
  {
    DDScannerSetOptions();
    *((_DWORD *)v2 + 4) = 1;
  }
  else
  {
    destroyNLEntityDetector((const void **)v2);
    return 0;
  }
  return v2;
}

void destroyNLEntityDetector(const void **a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    v3 = a1[1];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

BOOL NLEntityDetectorLoadLanguageResources(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  const void *v4;
  uint64_t v5;

  v2 = 0;
  if (a1 && a2)
  {
    v4 = *(const void **)(a1 + 8);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 8) = 0;
    }
    v5 = DDScannerCreateWithCacheFile();
    *(_QWORD *)(a1 + 8) = v5;
    v2 = v5 != 0;
    if (v5)
      DDScannerSetOptions();
  }
  return v2;
}

void NLEntityDetectorEnumerateEntities(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  const __CFAllocator *v6;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  const __CFArray *MutableCopy;
  __CFArray *v11;
  const CFSetCallBacks *v12;
  CFIndex v13;
  CFIndex v14;
  CFIndex v15;
  uint64_t v16;
  uint64_t v17;
  const void *ValueAtIndex;
  uint64_t Range;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  BOOL v27;
  const void *Type;
  const void *SubResults;
  const __CFString *MatchedString;
  __CFSet *v31;
  __CFSet *theSet;
  _QWORD v33[2];
  void (*v34)(uint64_t, uint64_t, char *);
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD v38[3];
  char v39;
  _QWORD block[7];
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  CFMutableArrayRef Mutable;
  char v45[9];
  CFRange v46;

  if (a2 && *a1 && a1[1])
  {
    v41 = 0;
    v42 = &v41;
    v43 = 0x2000000000;
    Mutable = 0;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (v42[3])
    {
      if (getDataDetectorsQueue_onceToken != -1)
        dispatch_once(&getDataDetectorsQueue_onceToken, &__block_literal_global_8);
      v7 = MEMORY[0x1E0C809B0];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __NLEntityDetectorEnumerateEntities_block_invoke;
      block[3] = &unk_1E45CF6A0;
      block[5] = a1;
      block[6] = a2;
      block[4] = &v41;
      dispatch_sync((dispatch_queue_t)getDataDetectorsQueue_dataDetectorsQueue, block);
      v38[0] = 0;
      v38[1] = v38;
      v38[2] = 0x2000000000;
      v39 = 0;
      v8 = (const __CFArray *)v42[3];
      v33[0] = v7;
      v33[1] = 0x40000000;
      v34 = __NLEntityDetectorEnumerateEntities_block_invoke_2;
      v35 = &unk_1E45D06A8;
      v36 = a3;
      v37 = v38;
      if (v8)
      {
        Count = CFArrayGetCount(v8);
        MutableCopy = CFArrayCreateMutableCopy(v6, Count, v8);
        if (MutableCopy)
        {
          v11 = MutableCopy;
          v46.length = CFArrayGetCount(MutableCopy);
          v46.location = 0;
          CFArraySortValues(v11, v46, (CFComparatorFunction)EntityCompare, 0);
          v12 = (const CFSetCallBacks *)MEMORY[0x1E0C9B3B0];
          v31 = CFSetCreateMutable(v6, 0, MEMORY[0x1E0C9B3B0]);
          theSet = CFSetCreateMutable(v6, 0, v12);
          v45[0] = 0;
          v13 = CFArrayGetCount(v11);
          if (v13 >= 1)
          {
            v14 = v13;
            v15 = 0;
            v16 = 0;
            v17 = -1;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v11, v15);
              Range = DDResultGetRange();
              v21 = Range;
              v22 = v20;
              if (v17 == -1
                || ((v23 = v17 + v16, v24 = Range + v20, v17 >= Range) || v23 < v24)
                && (v17 < Range ? (v25 = Range < v23) : (v25 = 0),
                    !v25 ? (v26 = 0) : (v26 = 1),
                    v23 > v24 ? (v27 = v17 <= Range) : (v27 = 0),
                    !v27 && (v26 & 1) == 0))
              {
                Type = (const void *)DDResultGetType();
                SubResults = (const void *)DDResultGetSubResults();
                if (v21 != v17 || v22 != v16)
                {
                  CFSetRemoveAllValues(theSet);
                  CFSetRemoveAllValues(v31);
LABEL_32:
                  MatchedString = (const __CFString *)DDResultGetMatchedString();
                  if (!CFStringHasSuffix(MatchedString, CFSTR(" ")))
                  {
                    v34((uint64_t)v33, (uint64_t)ValueAtIndex, v45);
                    if (v45[0])
                      break;
                    CFSetAddValue(theSet, Type);
                    if (SubResults)
                      CFSetAddValue(v31, SubResults);
                    v17 = v21;
                    v16 = v22;
                  }
                  goto LABEL_37;
                }
                if (!CFSetContainsValue(theSet, Type) || !SubResults || !CFSetContainsValue(v31, SubResults))
                  goto LABEL_32;
              }
LABEL_37:
              ++v15;
            }
            while (v14 != v15);
          }
          CFRelease(v11);
          CFRelease(theSet);
          CFRelease(v31);
        }
      }
      CFRelease((CFTypeRef)v42[3]);
      _Block_object_dispose(v38, 8);
    }
    _Block_object_dispose(&v41, 8);
  }
}

uint64_t NLEntityDetectorRetain(uint64_t result)
{
  if (result)
    ++*(_DWORD *)(result + 16);
  return result;
}

void NLEntityDetectorRelease(const void **a1)
{
  int v1;

  if (a1)
  {
    v1 = *((_DWORD *)a1 + 4) - 1;
    *((_DWORD *)a1 + 4) = v1;
    if (!v1)
      destroyNLEntityDetector(a1);
  }
}

dispatch_queue_t __getDataDetectorsQueue_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.NLP.DataDetectors", 0);
  getDataDetectorsQueue_dataDetectorsQueue = (uint64_t)result;
  return result;
}

uint64_t EntityCompare()
{
  uint64_t Range;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  const __CFArray *SubResults;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v11;

  Range = DDResultGetRange();
  v2 = v1;
  v3 = DDResultGetRange();
  if (Range == v3)
  {
    v5 = v2 <= v4;
    if (v2 != v4)
    {
LABEL_14:
      if (v5)
        return 1;
      else
        return -1;
    }
    SubResults = (const __CFArray *)DDResultGetSubResults();
    v7 = DDResultGetSubResults();
    if (SubResults)
    {
      v8 = (const __CFArray *)v7;
      if (v7)
      {
        Count = CFArrayGetCount(SubResults);
        if (Count == CFArrayGetCount(v8))
          return 0;
        v11 = CFArrayGetCount(SubResults);
        v5 = v11 <= CFArrayGetCount(v8);
        goto LABEL_14;
      }
    }
    if (SubResults)
      return -1;
    else
      return 1;
  }
  else if (Range < v3)
  {
    return -1;
  }
  else
  {
    return 1;
  }
}

CFStringRef createCFStringFromString(uint64_t a1)
{
  const UInt8 *v1;
  CFIndex v2;

  v1 = (const UInt8 *)a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v2 = *(unsigned __int8 *)(a1 + 23);
    if (!*(_BYTE *)(a1 + 23))
      return &stru_1E45D0A48;
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, v2, 0x8000100u, 0);
  }
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v1 = *(const UInt8 **)a1;
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, v2, 0x8000100u, 0);
  }
  return &stru_1E45D0A48;
}

_QWORD *getUTF8StringFromCFString@<X0>(const __CFString *a1@<X0>, _QWORD *a2@<X8>)
{
  CFIndex Length;
  CFIndex v5;
  char *v6;

  if (a1)
  {
    Length = CFStringGetLength(a1);
    v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v6 = (char *)operator new[]();
    CFStringGetCString(a1, v6, v5, 0x8000100u);
    std::string::basic_string[abi:ne180100]<0>(a2, v6);
    JUMPOUT(0x1A1B0E050);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

void sub_1A18C0414(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1B0E050](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void getFileSystemRepresentationFromCFURL(const __CFURL *a1@<X0>, _QWORD *a2@<X8>)
{
  UInt8 *v4;

  v4 = (UInt8 *)operator new[]();
  CFURLGetFileSystemRepresentation(a1, 1u, v4, 1024);
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)v4);
  JUMPOUT(0x1A1B0E050);
}

void sub_1A18C04B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1B0E050](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

const __CFURL *getPathForResource@<X0>(const __CFString *a1@<X0>, _QWORD *a2@<X8>)
{
  __CFBundle *BundleWithIdentifier;
  const __CFURL *result;
  __int128 v6;

  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.NLP"));
  result = CFBundleCopyResourceURL(BundleWithIdentifier, a1, 0, 0);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (result)
    getFileSystemRepresentationFromCFURL(result, &v6);
  return result;
}

void sub_1A18C0548(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t getParsecLogHandle()
{
  if (getParsecLogHandle::onceToken != -1)
    dispatch_once(&getParsecLogHandle::onceToken, &__block_literal_global_9);
  return getParsecLogHandle::logHandle;
}

os_log_t __getParsecLogHandle_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.NLP", "NLParsecDataManager");
  getParsecLogHandle::logHandle = (uint64_t)result;
  return result;
}

CFURLRef createCFURLFromPathRepresentation(const __CFString *a1)
{
  CFTypeID v2;
  CFTypeID v4;

  v2 = CFGetTypeID(a1);
  if (v2 == CFStringGetTypeID())
    return CFURLCreateWithFileSystemPath(0, a1, kCFURLPOSIXPathStyle, 1u);
  v4 = CFGetTypeID(a1);
  if (v4 == CFURLGetTypeID())
    return CFURLCopyAbsoluteURL((CFURLRef)a1);
  else
    return 0;
}

CFMutableDictionaryRef createDictionaryWithContentsOfURL(CFURLRef fileURL, int a2)
{
  __CFReadStream *v3;
  __CFReadStream *v4;
  CFOptionFlags v5;
  CFPropertyListRef v6;
  CFTypeID v7;
  _QWORD *exception;
  __int128 v10;

  v3 = CFReadStreamCreateWithFile(0, fileURL);
  if (!v3)
    return CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = v3;
  if (!CFReadStreamOpen(v3))
  {
    CFRelease(v4);
    return CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  if (a2)
    v5 = 2;
  else
    v5 = 0;
  v6 = CFPropertyListCreateWithStream(0, v4, 0, v5, 0, 0);
  CFReadStreamClose(v4);
  CFRelease(v4);
  if (!v6)
    return CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = CFGetTypeID(v6);
  if (v7 != CFDictionaryGetTypeID())
  {
    CFRelease(v6);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v10, "unexpected info dictionary format");
    NL::ResourceCreationException::ResourceCreationException(exception, &v10);
  }
  return (CFMutableDictionaryRef)v6;
}

void sub_1A18C0770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

BOOL CFStringsAreEqual(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0) == kCFCompareEqualTo;
}

void splitWithChar(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v6;
  std::string::size_type v7;
  std::string::value_type *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::string *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  std::string::size_type v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  std::string *v32;
  std::string *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  std::string __p;
  std::string v38;
  std::__split_buffer<std::string> __v;

  std::string::basic_string[abi:ne180100]<0>(&v38, "");
  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = 0;
    while (*(unsigned __int8 *)std::string::at((const std::string *)a1, v7) != a2)
    {
      v8 = (std::string::value_type *)std::string::at((const std::string *)a1, v7);
      std::string::push_back(&v38, *v8);
LABEL_34:
      ++v7;
      v24 = *(unsigned __int8 *)(a1 + 23);
      if ((v24 & 0x80u) != 0)
        v24 = *(_QWORD *)(a1 + 8);
      if (v24 <= v7)
        goto LABEL_37;
    }
    if (v7)
    {
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
      else
        __p = v38;
      v10 = *(_QWORD *)(a3 + 8);
      v16 = *(_QWORD *)(a3 + 16);
      if (v10 < v16)
        goto LABEL_21;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(_QWORD *)a3) >> 3);
      v18 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)a3) >> 3);
      if (2 * v19 > v18)
        v18 = 2 * v19;
      if (v19 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v18;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
      if (!v14)
      {
        v15 = 0;
        goto LABEL_31;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      v10 = *(_QWORD *)(a3 + 8);
      v9 = *(_QWORD *)(a3 + 16);
      if (v10 < v9)
      {
LABEL_21:
        v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v10 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v10 = v17;
        *(_QWORD *)(a3 + 8) = v10 + 24;
LABEL_33:
        MEMORY[0x1A1B0DE04](&v38, "");
        goto LABEL_34;
      }
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(_QWORD *)a3) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *(_QWORD *)a3) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
      if (!v14)
      {
        v15 = 0;
LABEL_31:
        v20 = v15 + v11;
        __v.__first_ = v15;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v15[v14];
        v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v20->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v20 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        v22 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a3 + 8) = v22;
        if (v23 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_33;
      }
    }
    v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v14);
    goto LABEL_31;
  }
LABEL_37:
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    __p = v38;
  v25 = *(_QWORD *)(a3 + 16);
  v26 = *(_QWORD *)(a3 + 8);
  if (v26 >= v25)
  {
    v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(_QWORD *)a3) >> 3);
    v29 = v28 + 1;
    if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *(_QWORD *)a3) >> 3);
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0x555555555555555)
      v31 = 0xAAAAAAAAAAAAAAALL;
    else
      v31 = v29;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
    if (v31)
      v32 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v31);
    else
      v32 = 0;
    v33 = v32 + v28;
    __v.__first_ = v32;
    __v.__begin_ = v33;
    __v.__end_cap_.__value_ = &v32[v31];
    v34 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v33->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
    memset(&__p, 0, sizeof(__p));
    __v.__end_ = v33 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
    v35 = *(_QWORD *)(a3 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v36 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a3 + 8) = v35;
    if (v36 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v26 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v26 = v27;
    *(_QWORD *)(a3 + 8) = v26 + 24;
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_1A18C0BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::__split_buffer<std::string> *a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t trim@<X0>(unint64_t result@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  char *v13;
  char *v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;

  v2 = result;
  v4 = *(unsigned __int8 *)(result + 23);
  v5 = v4;
  v6 = *(char **)result;
  v7 = *(_QWORD *)(result + 8);
  if ((v4 & 0x80u) == 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if ((v4 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(result + 23);
  else
    v9 = *(_QWORD *)(result + 8);
  v10 = MEMORY[0x1E0C80978];
  if (v9)
  {
    v11 = &v8[v9];
    do
    {
      v12 = *v8;
      if ((v12 & 0x80000000) != 0)
      {
        result = __maskrune(v12, 0x4000uLL);
        if (!(_DWORD)result)
          goto LABEL_15;
      }
      else
      {
        result = *(_DWORD *)(v10 + 4 * v12 + 60) & 0x4000;
        if (!(_DWORD)result)
          goto LABEL_15;
      }
      ++v8;
      --v9;
    }
    while (v9);
    v8 = v11;
LABEL_15:
    v4 = *(unsigned __int8 *)(v2 + 23);
    v6 = *(char **)v2;
    v7 = *(_QWORD *)(v2 + 8);
    v5 = *(_BYTE *)(v2 + 23);
  }
  v13 = &v6[v7];
  v14 = (char *)(v2 + v4);
  if (v5 >= 0)
    v15 = v14;
  else
    v15 = v13;
  if (v5 < 0)
    v2 = (unint64_t)v6;
  while (v15 != (char *)v2)
  {
    v17 = *--v15;
    v16 = v17;
    if ((v17 & 0x80000000) != 0)
    {
      result = __maskrune(v16, 0x4000uLL);
      if (!(_DWORD)result)
      {
LABEL_26:
        v2 = (unint64_t)(v15 + 1);
        break;
      }
    }
    else
    {
      result = *(_DWORD *)(v10 + 4 * v16 + 60) & 0x4000;
      if (!(_DWORD)result)
        goto LABEL_26;
    }
  }
  if ((unint64_t)v8 < v2)
    return (unint64_t)std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a2, v8, (char *)v2, v2 - (_QWORD)v8);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void join(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  uint64_t v20[3];

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  if (v5 == 1)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
    }
    else
    {
      v6 = *(_OWORD *)v4;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
    }
  }
  else if (v5)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
    if (*(char *)(a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::ostream_iterator<std::string,char,std::char_traits<char>>,0>(*a1, a1[1] - 24, (uint64_t)v17, v9, v20);
    v10 = a1[1];
    v13 = *(_QWORD *)(v10 - 24);
    v11 = v10 - 24;
    v12 = v13;
    v14 = *(char *)(v11 + 23);
    if (v14 >= 0)
      v15 = v11;
    else
      v15 = v12;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(v11 + 23);
    else
      v16 = *(_QWORD *)(v11 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v15, v16);
    std::stringbuf::str();
    v17[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v17[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v18 < 0)
      operator delete((void *)v17[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1B0DFFC](&v19);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

void sub_1A18C0EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL startswith(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v2 = (char)a2[23];
  v3 = v2 < 0;
  if (v2 >= 0)
    v4 = a2;
  else
    v4 = *(unsigned __int8 **)a2;
  if (v3)
    v5 = *((_QWORD *)a2 + 1);
  else
    v5 = a2[23];
  v6 = &v4[v5];
  if (v5)
  {
    if ((a1[23] & 0x80u) == 0)
      v7 = a1;
    else
      v7 = *(unsigned __int8 **)a1;
    while (*v4 == *v7)
    {
      ++v4;
      ++v7;
      if (!--v5)
      {
        v4 = v6;
        return v4 == v6;
      }
    }
  }
  return v4 == v6;
}

BOOL endswith(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  _BOOL8 result;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;

  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = a2[1];
  v4 = *((unsigned __int8 *)a1 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = a1[1];
  if (v3 > v4)
    return 0;
  v7 = (char)v2;
  v8 = (uint64_t *)((char *)a2 + v2);
  if (v7 >= 0)
  {
    v9 = a2;
  }
  else
  {
    v8 = (uint64_t *)(*a2 + a2[1]);
    v9 = (uint64_t *)*a2;
  }
  if (v5 >= 0)
    v10 = a1;
  else
    v10 = (uint64_t *)*a1;
  v11 = (unsigned __int8 *)v10 + v4 - 1;
  do
  {
    result = v8 == v9;
    if (v8 == v9)
      break;
    v13 = *((unsigned __int8 *)v8 - 1);
    v8 = (uint64_t *)((char *)v8 - 1);
    v12 = v13;
    v14 = *v11--;
  }
  while (v12 == v14);
  return result;
}

std::string *replaceAll(std::string *this, char *a2, uint64_t a3)
{
  int v3;
  std::string::size_type v4;
  std::string::size_type v5;
  int64_t v6;
  std::string *v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string *v11;
  char *v12;
  std::string *v13;
  int64_t v14;
  int v15;
  int64_t v16;
  std::string *v17;
  std::string::size_type v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  uint64_t v22;
  int v23;
  BOOL v25;

  v3 = a2[23];
  v25 = v3 < 0;
  v4 = *((_QWORD *)a2 + 1);
  v5 = a2[23];
  if (v3 >= 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  if (v6)
  {
    v8 = this;
    v9 = 0;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v11 = this;
    else
      v11 = (std::string *)this->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = this->__r_.__value_.__l.__size_;
    if ((v5 & 0x80u) == 0)
      v12 = a2;
    else
      v12 = *(char **)a2;
    while (!v6)
    {
LABEL_23:
      if (v9 != -1)
      {
        if (v25)
          v18 = v4;
        else
          v18 = v5;
        v19 = *(char *)(a3 + 23);
        if (v19 >= 0)
          v20 = (const std::string::value_type *)a3;
        else
          v20 = *(const std::string::value_type **)a3;
        if (v19 >= 0)
          v21 = *(unsigned __int8 *)(a3 + 23);
        else
          v21 = *(_QWORD *)(a3 + 8);
        this = std::string::replace(v8, v9, v18, v20, v21);
        v22 = *(unsigned __int8 *)(a3 + 23);
        if ((v22 & 0x80u) != 0)
          v22 = *(_QWORD *)(a3 + 8);
        v9 += v22;
        size = HIBYTE(v8->__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) == 0)
          v11 = v8;
        else
          v11 = (std::string *)v8->__r_.__value_.__r.__words[0];
        if ((size & 0x80u) != 0)
          size = v8->__r_.__value_.__l.__size_;
        v23 = a2[23];
        v25 = v23 < 0;
        v4 = *((_QWORD *)a2 + 1);
        v5 = a2[23];
        v12 = v23 >= 0 ? a2 : *(char **)a2;
        v6 = v23 >= 0 ? a2[23] : *((_QWORD *)a2 + 1);
        if (size >= v9)
          continue;
      }
      return this;
    }
    this = (std::string *)((char *)v11 + v9);
    v13 = (std::string *)((char *)v11 + size);
    v14 = size - v9;
    if (v14 >= v6)
    {
      v15 = *v12;
      do
      {
        v16 = v14 - v6;
        if (v16 == -1)
          break;
        this = (std::string *)memchr(this, v15, v16 + 1);
        if (!this)
          break;
        v17 = this;
        this = (std::string *)memcmp(this, v12, v6);
        if (!(_DWORD)this)
        {
          if (v17 == v13)
            return this;
          v9 = (char *)v17 - (char *)v11;
          goto LABEL_23;
        }
        this = (std::string *)((char *)&v17->__r_.__value_.__l.__data_ + 1);
        v14 = (char *)v13 - ((char *)&v17->__r_.__value_.__l.__data_ + 1);
      }
      while (v14 >= v6);
    }
  }
  return this;
}

void stringToUTF32Characters(uint64_t *a1@<X0>, int **a2@<X8>)
{
  int v3;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  int *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unsigned int v22;
  int *v23;
  int v24;
  unint64_t v25;

  if (*((char *)a1 + 23) >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = *((_DWORD *)a1 + 2);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3 >= 1)
  {
    v5 = 0;
    LODWORD(v6) = 0;
    v7 = a2 + 2;
    do
    {
      if (*((char *)a1 + 23) >= 0)
        v8 = a1;
      else
        v8 = (uint64_t *)*a1;
      v9 = (int)v6;
      v10 = *((char *)v8 + (int)v6);
      v6 = (int)v6 + 1;
      v11 = v10;
      if ((v10 & 0x80000000) == 0)
        goto LABEL_10;
      if ((_DWORD)v6 == v3)
        return;
      if (v10 < 0xE0u)
      {
        if (v10 < 0xC2u)
          continue;
        v15 = v10 & 0x1F;
      }
      else
      {
        if (v10 > 0xEFu)
        {
          if (v10 > 0xF4u)
            continue;
          v25 = *((unsigned __int8 *)v8 + v6);
          if (((byte_1A18D5233[v25 >> 4] >> (v10 + 16)) & 1) == 0)
            continue;
          v6 = v9 + 2;
          if ((_DWORD)v9 + 2 == v3)
            return;
          v14 = *((unsigned __int8 *)v8 + v6) ^ 0x80;
          if (v14 > 0x3F)
            continue;
          LODWORD(v13) = v25 & 0x3F | ((v11 - 240) << 6);
        }
        else
        {
          v13 = v10 & 0xF;
          if (((a00000000000000[v13] >> (*((_BYTE *)v8 + v6) >> 5)) & 1) == 0)
            continue;
          v14 = *((_BYTE *)v8 + v6) & 0x3F;
        }
        LODWORD(v6) = v6 + 1;
        if ((_DWORD)v6 == v3)
          return;
        v15 = v14 | ((_DWORD)v13 << 6);
      }
      v22 = *((unsigned __int8 *)v8 + (int)v6) ^ 0x80;
      if (v22 <= 0x3F)
      {
        v11 = v22 | (v15 << 6);
        LODWORD(v6) = v6 + 1;
LABEL_10:
        if ((unint64_t)v5 >= *v7)
        {
          v16 = *a2;
          v17 = v5 - *a2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v19 = *v7 - (_QWORD)v16;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)(a2 + 2), v20);
            v16 = *a2;
            v5 = a2[1];
          }
          else
          {
            v21 = 0;
          }
          v23 = (int *)&v21[4 * v17];
          *v23 = v11;
          v12 = v23 + 1;
          while (v5 != v16)
          {
            v24 = *--v5;
            *--v23 = v24;
          }
          *a2 = v23;
          a2[1] = v12;
          a2[2] = (int *)&v21[4 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v5 = v11;
          v12 = v5 + 1;
        }
        a2[1] = v12;
        v5 = v12;
      }
    }
    while ((int)v6 < v3);
  }
}

void sub_1A18C137C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFIndex enumerateCharactersInCFString(CFIndex theString, CFIndex theIndex, uint64_t a3, uint64_t a4)
{
  CFIndex v5;
  const __CFString *v6;
  CFIndex v7;
  CFRange RangeOfComposedCharactersAtIndex;
  char v9;

  v5 = theIndex;
  v6 = (const __CFString *)theString;
  v9 = 0;
  v7 = theIndex + a3;
  do
  {
    if (v5 >= v7)
      break;
    RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(v6, v5);
    theString = RangeOfComposedCharactersAtIndex.location;
    if (RangeOfComposedCharactersAtIndex.location == -1)
      break;
    theString = (*(uint64_t (**)(uint64_t, CFIndex, CFIndex, char *))(a4 + 16))(a4, RangeOfComposedCharactersAtIndex.location, RangeOfComposedCharactersAtIndex.length, &v9);
    v5 += RangeOfComposedCharactersAtIndex.length;
  }
  while (!v9);
  return theString;
}

uint64_t newCharacterSetWithPattern(const __CFString *a1)
{
  CFIndex Length;
  uint64_t v2;
  UniChar *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  CFRange v7;

  v6 = *MEMORY[0x1E0C80C00];
  HIDWORD(v5) = 0;
  Length = CFStringGetLength(CFSTR("[[:Hani:][:Katakana:][:Hiragana:][:Katakana_Or_Hiragana:][\\u30FC]]"));
  MEMORY[0x1E0C80A78]();
  v3 = (UniChar *)((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!CFStringGetCharactersPtr(CFSTR("[[:Hani:][:Katakana:][:Hiragana:][:Katakana_Or_Hiragana:][\\u30FC]]")))
  {
    v7.location = 0;
    v7.length = Length;
    CFStringGetCharacters(CFSTR("[[:Hani:][:Katakana:][:Hiragana:][:Katakana_Or_Hiragana:][\\u30FC]]"), v7, v3);
  }
  result = uset_openPattern();
  if (SHIDWORD(v5) >= 1)
  {
    if (result)
    {
      uset_close();
      return 0;
    }
  }
  return result;
}

uint64_t copyStringInsertingSpacesBetweenIdeographCharacters(CFIndex a1, CFIndex a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[9];
  _QWORD v9[3];
  char v10;
  _QWORD v11[3];
  char v12;
  _QWORD v13[3];
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  CFMutableStringRef Mutable;

  if (__onceCSetToken != -1)
    dispatch_once(&__onceCSetToken, &__block_literal_global_36);
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  Mutable = 0;
  Mutable = CFStringCreateMutable(0, 0);
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2000000000;
  v14 = 0;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2000000000;
  v12 = 0;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v10 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __copyStringInsertingSpacesBetweenIdeographCharacters_block_invoke_2;
  v8[3] = &unk_1E45CF758;
  v8[7] = &v15;
  v8[8] = a1;
  v8[4] = v13;
  v8[5] = v11;
  v8[6] = v9;
  enumerateCharactersInCFString(a1, a2, a3, (uint64_t)v8);
  v6 = v16[3];
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(v13, 8);
  _Block_object_dispose(&v15, 8);
  return v6;
}

void sub_1A18C165C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __copyStringInsertingSpacesBetweenIdeographCharacters_block_invoke(const __CFString *a1)
{
  uint64_t result;

  result = newCharacterSetWithPattern(a1);
  __CSet = result;
  return result;
}

void __copyStringInsertingSpacesBetweenIdeographCharacters_block_invoke_2(uint64_t a1, CFRange a2)
{
  CFIndex length;
  UniChar *v4;
  int isWhitespace;
  int v6;
  int v7;
  BOOL v8;
  BOOL v9;
  _QWORD v10[2];

  length = a2.length;
  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = (UniChar *)((char *)v10 - ((2 * a2.length + 17) & 0xFFFFFFFFFFFFFFF0));
  CFStringGetCharacters(*(CFStringRef *)(a1 + 64), a2, v4);
  isWhitespace = u_isWhitespace(*v4);
  v6 = uset_containsAllCodePoints();
  v7 = v6;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v8 = !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) || v6 == 0;
    if (!v8 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) ? (v9 = isWhitespace == 0) : (v9 = 0), v9))
      CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), CFSTR(" "));
  }
  CFStringAppendCharacters(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), v4, length);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = isWhitespace == 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v7 != 0;
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

CFStringRef copyTranslatedRomanNumberFromChineseNumberString(const __CFString *a1)
{
  const __CFAllocator *v2;
  const __CFDictionary *v3;
  const __CFArray *v4;
  CFIndex Length;
  CFIndex v6;
  int v7;
  int v8;
  int v9;
  CFIndex i;
  const __CFString *v11;
  SInt32 IntValue;
  int v13;
  int HasPrefix;
  int v15;
  int v16;
  uint64_t v17;
  void *value;
  CFStringRef prefix[2];
  const __CFString *v21;
  void *keys[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const __CFString *v28;
  _OWORD values[6];
  const __CFString *v30;
  uint64_t v31;
  CFRange v32;
  CFRange v33;

  v31 = *MEMORY[0x1E0C80C00];
  values[4] = xmmword_1E45D0748;
  values[5] = *(_OWORD *)&off_1E45D0758;
  v30 = CFSTR("9");
  values[0] = xmmword_1E45D0708;
  values[1] = *(_OWORD *)&off_1E45D0718;
  values[2] = xmmword_1E45D0728;
  values[3] = *(_OWORD *)&off_1E45D0738;
  v26 = xmmword_1E45D07B0;
  v27 = *(_OWORD *)&off_1E45D07C0;
  v28 = CFSTR("九");
  *(_OWORD *)keys = xmmword_1E45D0770;
  v23 = *(_OWORD *)&off_1E45D0780;
  v24 = xmmword_1E45D0790;
  v25 = *(_OWORD *)&off_1E45D07A0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 13, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_OWORD *)prefix = xmmword_1E45D07D8;
  v21 = CFSTR("千");
  v4 = CFArrayCreate(v2, (const void **)prefix, 3, MEMORY[0x1E0C9B378]);
  Length = CFStringGetLength(a1);
  if (Length < 1)
  {
    v17 = 0;
  }
  else
  {
    v6 = Length;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    for (i = 0; i != v6; ++i)
    {
      v33.location = i;
      v33.length = 1;
      v11 = CFStringCreateWithSubstring(v2, a1, v33);
      value = 0;
      if (CFDictionaryGetValueIfPresent(v3, v11, (const void **)&value))
      {
        IntValue = CFStringGetIntValue((CFStringRef)value);
        v13 = 10 * v9;
        if (!v7)
          v13 = v9;
        v9 = IntValue + v13;
        ++v7;
      }
      else
      {
        v32.length = CFArrayGetCount(v4);
        v32.location = 0;
        if (CFArrayContainsValue(v4, v32, v11))
        {
          HasPrefix = CFStringHasPrefix(v11, prefix[0]);
          if (v9)
          {
            if (HasPrefix)
            {
              v15 = 10 * v9;
            }
            else
            {
              v16 = CFStringHasPrefix(v11, prefix[1]);
              v15 = 1000 * v9;
              if (v16)
                v15 = 100 * v9;
            }
          }
          else if (HasPrefix)
          {
            v15 = 10;
          }
          else if (CFStringHasPrefix(v11, prefix[1]))
          {
            v15 = 100;
          }
          else
          {
            v15 = 1000;
          }
          v9 = 0;
          v7 = 0;
          v8 += v15;
        }
      }
      CFRelease(v11);
    }
    v17 = (v8 + v9);
  }
  CFRelease(v3);
  CFRelease(v4);
  return CFStringCreateWithFormat(v2, 0, CFSTR("%d"), v17);
}

uint64_t intFromSpelledNumber(const __CFString *a1, uint64_t a2)
{
  uint64_t IntValue;
  const __CFString *v4;
  const __CFAllocator *v5;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;

  IntValue = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    v4 = (const __CFString *)MEMORY[0x1A1B0D63C](a2);
    if ((CFStringHasPrefix(v4, CFSTR("zh")) || CFStringHasPrefix(v4, CFSTR("ja")))
      && (v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
          (ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, CFSTR(" "))) != 0))
    {
      v7 = ArrayBySeparatingStrings;
      v8 = CFStringCreateByCombiningStrings(v5, ArrayBySeparatingStrings, &stru_1E45D0A48);
      if (v8)
      {
        v9 = v8;
        v10 = copyTranslatedRomanNumberFromChineseNumberString(v8);
        if (v10)
        {
          v11 = v10;
          IntValue = CFStringGetIntValue(v10);
          CFRelease(v11);
        }
        else
        {
          IntValue = 0xFFFFFFFFLL;
        }
        CFRelease(v9);
      }
      else
      {
        IntValue = 0xFFFFFFFFLL;
      }
      CFRelease(v7);
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return IntValue;
}

CFLocaleRef copyCurrentLocale()
{
  const __CFArray *v0;
  const __CFArray *v1;
  const __CFString *ValueAtIndex;
  uint64_t v3;
  const __CFLocale *v4;
  const __CFLocale *v5;
  CFLocaleRef v6;
  CFLocaleRef v7;

  v0 = CFLocaleCopyPreferredLanguages();
  if (!v0)
    return CFLocaleCopyCurrent();
  v1 = v0;
  if (CFArrayGetCount(v0)
    && (ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v1, 0),
        v3 = *MEMORY[0x1E0C9AE00],
        (v4 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], ValueAtIndex)) != 0))
  {
    v5 = v4;
    if (CFLocaleGetValue(v4, (CFLocaleKey)*MEMORY[0x1E0C9B060]))
      v6 = (CFLocaleRef)MEMORY[0x1A1B0D624](v3, v5);
    else
      v6 = CFLocaleCopyCurrent();
    v7 = v6;
    CFRelease(v5);
  }
  else
  {
    v7 = CFLocaleCopyCurrent();
  }
  CFRelease(v1);
  return v7;
}

__CFCalendar *copyCurrentCalendar(uint64_t a1)
{
  const __CFString *v1;
  __CFCalendar *v2;
  const __CFTimeZone *v3;
  const __CFTimeZone *v4;

  if (!a1)
    return 0;
  v1 = (const __CFString *)MEMORY[0x1A1B0D63C]();
  v2 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
  if (v2 || (v2 = CFCalendarCopyCurrent()) != 0)
  {
    v3 = CFTimeZoneCopySystem();
    if (v3)
    {
      v4 = v3;
      CFCalendarSetTimeZone(v2, v3);
      CFRelease(v4);
    }
    CFCalendarSetFirstWeekday(v2, 1);
  }
  return v2;
}

double getCurrentTime(uint64_t a1)
{
  if (a1)
    JUMPOUT(0x1A1B0D51CLL);
  return CFAbsoluteTimeGetCurrent();
}

void *convertToCString(const __CFString *a1)
{
  CFIndex Length;
  CFIndex v3;
  void *v4;

  if (!a1)
    return 0;
  Length = CFStringGetLength(a1);
  v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v4 = malloc_type_malloc(v3, 0xD5CEEA62uLL);
  if (!CFStringGetCString(a1, (char *)v4, v3, 0x8000100u))
  {
    free(v4);
    return 0;
  }
  return v4;
}

uint64_t createLexicon(const __CFString *a1)
{
  __CFDictionary *Mutable;
  uint64_t v3;
  void *exception;
  _BYTE v6[16];
  const void *v7;
  _QWORD v8[3];
  const void *v9;
  __CFDictionary *v10;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = Mutable;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D437B8], a1);
  v9 = 0;
  v3 = LXLexiconCreate();
  if (!v3)
  {
    getUTF8StringFromCFString(a1, v8);
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    NL::SharedCFType::SharedCFType((NL::SharedCFType *)v6, v9);
    NL::ResourceCreationException::ResourceCreationException((uint64_t)exception, &v7, (NL::SharedCFType *)v6);
  }
  if (Mutable)
    CFRelease(Mutable);
  return v3;
}

void sub_1A18C1E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;
  uint64_t v24;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      if (a22 < 0)
        operator delete(a17);
      nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v24 - 40), 0);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

void composeErrorMessageForLocale(CFLocaleRef locale@<X1>, const void **a2@<X0>, uint64_t a3@<X8>)
{
  const __CFString *Value;
  char *v6;
  void *__p[2];
  char v8;

  Value = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  v6 = (char *)convertToCString(Value);
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  free(v6);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (const void **)__p, a3);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1A18C1F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef NLPCreateStringWithValidatedFormat(CFStringRef validFormatSpecifiers, CFStringRef format, ...)
{
  CFStringRef StringWithValidatedFormatAndArguments;
  CFStringRef v4;
  NSObject *v5;
  CFErrorRef errorPtr[2];
  va_list va;

  va_start(va, format);
  errorPtr[0] = 0;
  va_copy((va_list)&errorPtr[1], va);
  StringWithValidatedFormatAndArguments = CFStringCreateStringWithValidatedFormatAndArguments((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, validFormatSpecifiers, format, va, errorPtr);
  if (errorPtr[0])
  {
    v4 = CFErrorCopyDescription(errorPtr[0]);
    v5 = _nlpDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      NLPCreateStringWithValidatedFormat((uint64_t)format, (uint64_t)v4, v5);
    CFRelease(errorPtr[0]);
    if (v4)
      CFRelease(v4);
  }
  return StringWithValidatedFormatAndArguments;
}

void sub_1A18C2020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::ResourceCreationException::ResourceCreationException(uint64_t a1, const void **a2, NL::SharedCFType *this)
{
  void **v5;
  void *v6;
  CFTypeID v7;
  const __CFString *v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  uint64_t v17;
  void *__p[2];
  unsigned __int8 v20;
  std::string v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &unk_1E45CE578;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (void *)NL::SharedCFType::get(this);
  v7 = CFGetTypeID(v6);
  if (v7 == CFErrorGetTypeID())
  {
    v8 = CFErrorCopyDescription((CFErrorRef)v6);
    if (*((char *)a2 + 23) >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    v10 = &v21;
    std::string::basic_string[abi:ne180100]((uint64_t)&v21, v9 + 2);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v21.__r_.__value_.__r.__words[0];
    if (v9)
    {
      if (*((char *)a2 + 23) >= 0)
        v11 = a2;
      else
        v11 = *a2;
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, ": ");
    getUTF8StringFromCFString(v8, __p);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    v14 = std::string::append(&v21, (const std::string::value_type *)v12, v13);
    v15 = v14->__r_.__value_.__r.__words[0];
    v22[0] = v14->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 31) < 0)
      operator delete(*v5);
    v17 = v22[0];
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v17;
    *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v22 + 7);
    *(_BYTE *)(a1 + 31) = v16;
    if ((char)v20 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    CFRelease(v8);
  }
  return a1;
}

void sub_1A18C21EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void **v22;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 + 31) < 0)
    operator delete(*v22);
  std::exception::~exception((std::exception *)v21);
  _Unwind_Resume(a1);
}

void NLDevanagariOrthographyChecker::NLDevanagariOrthographyChecker(NLDevanagariOrthographyChecker *this)
{
  CFMutableStringRef Mutable;
  CFMutableStringRef v3;
  CFMutableStringRef v4;
  CFMutableStringRef v5;
  CFMutableStringRef v6;
  CFMutableStringRef v7;
  CFMutableStringRef v8;
  CFMutableStringRef v9;
  CFMutableStringRef v10;
  CFMutableStringRef v11;
  const __CFCharacterSet *v12;
  __CFCharacterSet *MutableCopy;

  *(_QWORD *)this = &off_1E45CE3B8;
  *((_QWORD *)this + 1) = CFSTR("‍");
  *((_QWORD *)this + 2) = CFSTR("़");
  *((_QWORD *)this + 3) = CFSTR("्");
  *((_QWORD *)this + 4) = CFSTR("ः");
  *((_QWORD *)this + 5) = CFSTR("ं");
  *((_QWORD *)this + 6) = CFSTR("ँ");
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, *((CFStringRef *)this + 2));
  CFStringAppend(Mutable, *((CFStringRef *)this + 3));
  CFStringAppend(Mutable, *((CFStringRef *)this + 4));
  CFStringAppend(Mutable, *((CFStringRef *)this + 5));
  CFStringAppend(Mutable, *((CFStringRef *)this + 6));
  CFStringAppend(Mutable, CFSTR("ा"));
  CFStringAppend(Mutable, CFSTR("ि"));
  CFStringAppend(Mutable, CFSTR("ी"));
  CFStringAppend(Mutable, CFSTR("ु"));
  CFStringAppend(Mutable, CFSTR("ू"));
  CFStringAppend(Mutable, CFSTR("ृ"));
  CFStringAppend(Mutable, CFSTR("ॄ"));
  CFStringAppend(Mutable, CFSTR("ॅ"));
  CFStringAppend(Mutable, CFSTR("े"));
  CFStringAppend(Mutable, CFSTR("ै"));
  CFStringAppend(Mutable, CFSTR("ॉ"));
  CFStringAppend(Mutable, CFSTR("ो"));
  CFStringAppend(Mutable, CFSTR("ौ"));
  *((_QWORD *)this + 7) = CFCharacterSetCreateWithCharactersInString(0, Mutable);
  CFRelease(Mutable);
  v3 = CFStringCreateMutable(0, 0);
  CFStringAppend(v3, CFSTR("ऋ"));
  CFStringAppend(v3, CFSTR("क"));
  CFStringAppend(v3, CFSTR("ख"));
  CFStringAppend(v3, CFSTR("ग"));
  CFStringAppend(v3, CFSTR("घ"));
  CFStringAppend(v3, CFSTR("ङ"));
  CFStringAppend(v3, CFSTR("च"));
  CFStringAppend(v3, CFSTR("छ"));
  CFStringAppend(v3, CFSTR("ज"));
  CFStringAppend(v3, CFSTR("झ"));
  CFStringAppend(v3, CFSTR("ञ"));
  CFStringAppend(v3, CFSTR("ट"));
  CFStringAppend(v3, CFSTR("ठ"));
  CFStringAppend(v3, CFSTR("ड"));
  CFStringAppend(v3, CFSTR("ढ"));
  CFStringAppend(v3, CFSTR("ण"));
  CFStringAppend(v3, CFSTR("त"));
  CFStringAppend(v3, CFSTR("थ"));
  CFStringAppend(v3, CFSTR("द"));
  CFStringAppend(v3, CFSTR("ध"));
  CFStringAppend(v3, CFSTR("न"));
  CFStringAppend(v3, CFSTR("प"));
  CFStringAppend(v3, CFSTR("फ"));
  CFStringAppend(v3, CFSTR("ब"));
  CFStringAppend(v3, CFSTR("भ"));
  CFStringAppend(v3, CFSTR("म"));
  CFStringAppend(v3, CFSTR("य"));
  CFStringAppend(v3, CFSTR("र"));
  CFStringAppend(v3, CFSTR("ऱ"));
  CFStringAppend(v3, CFSTR("ल"));
  CFStringAppend(v3, CFSTR("ळ"));
  CFStringAppend(v3, CFSTR("व"));
  CFStringAppend(v3, CFSTR("श"));
  CFStringAppend(v3, CFSTR("ष"));
  CFStringAppend(v3, CFSTR("स"));
  CFStringAppend(v3, CFSTR("ह"));
  CFStringAppend(v3, CFSTR("क़"));
  CFStringAppend(v3, CFSTR("ख़"));
  CFStringAppend(v3, CFSTR("ग़"));
  CFStringAppend(v3, CFSTR("ज़"));
  CFStringAppend(v3, CFSTR("ड़"));
  CFStringAppend(v3, CFSTR("ढ़"));
  CFStringAppend(v3, CFSTR("फ़"));
  CFStringAppend(v3, CFSTR("ॹ"));
  *((_QWORD *)this + 8) = CFCharacterSetCreateWithCharactersInString(0, v3);
  CFRelease(v3);
  v4 = CFStringCreateMutable(0, 0);
  CFStringAppend(v4, CFSTR("ङ"));
  CFStringAppend(v4, CFSTR("ञ"));
  CFStringAppend(v4, CFSTR("ण"));
  CFStringAppend(v4, CFSTR("न"));
  CFStringAppend(v4, CFSTR("म"));
  *((_QWORD *)this + 9) = CFCharacterSetCreateWithCharactersInString(0, v4);
  CFRelease(v4);
  v5 = CFStringCreateMutable(0, 0);
  CFStringAppend(v5, CFSTR("क"));
  CFStringAppend(v5, CFSTR("ख"));
  CFStringAppend(v5, CFSTR("ग"));
  CFStringAppend(v5, CFSTR("घ"));
  CFStringAppend(v5, CFSTR("ङ"));
  *((_QWORD *)this + 10) = CFCharacterSetCreateWithCharactersInString(0, v5);
  CFRelease(v5);
  v6 = CFStringCreateMutable(0, 0);
  CFStringAppend(v6, CFSTR("च"));
  CFStringAppend(v6, CFSTR("छ"));
  CFStringAppend(v6, CFSTR("ज"));
  CFStringAppend(v6, CFSTR("झ"));
  CFStringAppend(v6, CFSTR("ञ"));
  *((_QWORD *)this + 11) = CFCharacterSetCreateWithCharactersInString(0, v6);
  CFRelease(v6);
  v7 = CFStringCreateMutable(0, 0);
  CFStringAppend(v7, CFSTR("ट"));
  CFStringAppend(v7, CFSTR("ठ"));
  CFStringAppend(v7, CFSTR("ड"));
  CFStringAppend(v7, CFSTR("ढ"));
  CFStringAppend(v7, CFSTR("ण"));
  *((_QWORD *)this + 12) = CFCharacterSetCreateWithCharactersInString(0, v7);
  CFRelease(v7);
  v8 = CFStringCreateMutable(0, 0);
  CFStringAppend(v8, CFSTR("ट"));
  CFStringAppend(v8, CFSTR("ठ"));
  CFStringAppend(v8, CFSTR("ड"));
  CFStringAppend(v8, CFSTR("ढ"));
  CFStringAppend(v8, CFSTR("ण"));
  CFStringAppend(v8, CFSTR("य"));
  CFStringAppend(v8, CFSTR("व"));
  CFStringAppend(v8, CFSTR("श"));
  CFStringAppend(v8, CFSTR("ष"));
  CFStringAppend(v8, CFSTR("स"));
  CFStringAppend(v8, CFSTR("ह"));
  *((_QWORD *)this + 13) = CFCharacterSetCreateWithCharactersInString(0, v8);
  CFRelease(v8);
  v9 = CFStringCreateMutable(0, 0);
  CFStringAppend(v9, CFSTR("क़"));
  CFStringAppend(v9, CFSTR("ख़"));
  CFStringAppend(v9, CFSTR("ग़"));
  CFStringAppend(v9, CFSTR("ज़"));
  CFStringAppend(v9, CFSTR("ड़"));
  CFStringAppend(v9, CFSTR("ढ़"));
  CFStringAppend(v9, CFSTR("फ़"));
  CFStringAppend(v9, CFSTR("ॹ"));
  *((_QWORD *)this + 14) = CFCharacterSetCreateWithCharactersInString(0, v9);
  CFRelease(v9);
  v10 = CFStringCreateMutable(0, 0);
  CFStringAppend(v10, CFSTR("अ"));
  CFStringAppend(v10, CFSTR("आ"));
  CFStringAppend(v10, CFSTR("इ"));
  CFStringAppend(v10, CFSTR("ई"));
  CFStringAppend(v10, CFSTR("उ"));
  CFStringAppend(v10, CFSTR("ऊ"));
  CFStringAppend(v10, CFSTR("ऋ"));
  CFStringAppend(v10, CFSTR("ऍ"));
  CFStringAppend(v10, CFSTR("ए"));
  CFStringAppend(v10, CFSTR("ऐ"));
  CFStringAppend(v10, CFSTR("ऑ"));
  CFStringAppend(v10, CFSTR("ओ"));
  CFStringAppend(v10, CFSTR("औ"));
  *((_QWORD *)this + 15) = CFCharacterSetCreateWithCharactersInString(0, v10);
  CFRelease(v10);
  v11 = CFStringCreateMutable(0, 0);
  CFStringAppend(v11, CFSTR("०"));
  CFStringAppend(v11, CFSTR("१"));
  CFStringAppend(v11, CFSTR("२"));
  CFStringAppend(v11, CFSTR("३"));
  CFStringAppend(v11, CFSTR("४"));
  CFStringAppend(v11, CFSTR("५"));
  CFStringAppend(v11, CFSTR("६"));
  CFStringAppend(v11, CFSTR("७"));
  CFStringAppend(v11, CFSTR("८"));
  CFStringAppend(v11, CFSTR("९"));
  CFStringAppend(v11, CFSTR("‍"));
  v12 = CFCharacterSetCreateWithCharactersInString(0, v11);
  CFRelease(v11);
  MutableCopy = CFCharacterSetCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *((CFCharacterSetRef *)this + 15));
  CFCharacterSetUnion(MutableCopy, *((CFCharacterSetRef *)this + 8));
  CFCharacterSetUnion(MutableCopy, *((CFCharacterSetRef *)this + 7));
  CFCharacterSetUnion(MutableCopy, v12);
  CFRelease(v12);
  *((_QWORD *)this + 16) = CFCharacterSetCreateInvertedSet(0, MutableCopy);
  CFRelease(MutableCopy);
}

void sub_1A18C2D5C(_Unwind_Exception *a1)
{
  NLAbstractOrthographyConvertor *v1;

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(v1);
  _Unwind_Resume(a1);
}

void NLDevanagariOrthographyChecker::~NLDevanagariOrthographyChecker(CFTypeRef *this)
{
  *this = &off_1E45CE3B8;
  CFRelease(this[7]);
  CFRelease(this[8]);
  CFRelease(this[9]);
  CFRelease(this[10]);
  CFRelease(this[11]);
  CFRelease(this[12]);
  CFRelease(this[13]);
  CFRelease(this[14]);
  CFRelease(this[15]);
  CFRelease(this[16]);
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)this);
}

{
  NLDevanagariOrthographyChecker::~NLDevanagariOrthographyChecker(this);
  JUMPOUT(0x1A1B0E068);
}

BOOL NLDevanagariOrthographyChecker::isVowelSign(NLDevanagariOrthographyChecker *this, const __CFString *a2)
{
  CFMutableStringRef Mutable;
  const __CFCharacterSet *v4;
  const __CFCharacterSet *InvertedSet;
  _BOOL8 v6;
  CFRange v8;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, CFSTR("ऽ"));
  CFStringAppend(Mutable, CFSTR("ा"));
  CFStringAppend(Mutable, CFSTR("ि"));
  CFStringAppend(Mutable, CFSTR("ी"));
  CFStringAppend(Mutable, CFSTR("ु"));
  CFStringAppend(Mutable, CFSTR("ू"));
  CFStringAppend(Mutable, CFSTR("ृ"));
  CFStringAppend(Mutable, CFSTR("ॄ"));
  CFStringAppend(Mutable, CFSTR("ॅ"));
  CFStringAppend(Mutable, CFSTR("े"));
  CFStringAppend(Mutable, CFSTR("ै"));
  CFStringAppend(Mutable, CFSTR("ॉ"));
  CFStringAppend(Mutable, CFSTR("ो"));
  CFStringAppend(Mutable, CFSTR("ौ"));
  v4 = CFCharacterSetCreateWithCharactersInString(0, Mutable);
  InvertedSet = CFCharacterSetCreateInvertedSet(0, v4);
  CFRelease(Mutable);
  CFRelease(v4);
  v8.length = CFStringGetLength(a2);
  v8.location = 0;
  v6 = CFStringFindCharacterFromSet(a2, InvertedSet, v8, 0, 0) == 0;
  CFRelease(InvertedSet);
  return v6;
}

BOOL NLDevanagariOrthographyChecker::canCandrabinduFollowVowelSign(NLDevanagariOrthographyChecker *this, CFStringRef theString1)
{
  return CFStringCompare(theString1, CFSTR("ा"), 0) == kCFCompareEqualTo
      || CFStringCompare(theString1, CFSTR("ु"), 0) == kCFCompareEqualTo
      || CFStringCompare(theString1, CFSTR("ू"), 0) == kCFCompareEqualTo;
}

BOOL NLDevanagariOrthographyChecker::canNuktaFollowLetter(NLDevanagariOrthographyChecker *this, const __CFString *a2)
{
  const __CFCharacterSet *v3;
  const __CFCharacterSet *InvertedSet;
  _BOOL8 v5;
  CFRange v7;

  v3 = CFCharacterSetCreateWithCharactersInString(0, CFSTR("कखगजडढफ"));
  InvertedSet = CFCharacterSetCreateInvertedSet(0, v3);
  CFRelease(CFSTR("कखगजडढफ"));
  CFRelease(v3);
  v7.length = CFStringGetLength(a2);
  v7.location = 0;
  v5 = CFStringFindCharacterFromSet(a2, InvertedSet, v7, 0, 0) == 0;
  CFRelease(InvertedSet);
  return v5;
}

BOOL NLDevanagariOrthographyChecker::canViramaFollowLetter(CFStringRef *this, CFStringRef theString1)
{
  const __CFCharacterSet *v4;
  UniChar CharacterAtIndex;

  if (CFStringCompare(theString1, this[2], 0) == kCFCompareEqualTo)
    return 1;
  v4 = (const __CFCharacterSet *)this[8];
  CharacterAtIndex = CFStringGetCharacterAtIndex(theString1, 0);
  return CFCharacterSetIsCharacterMember(v4, CharacterAtIndex) != 0;
}

CFMutableStringRef NLDevanagariOrthographyChecker::stringByCorrectingIllegalVowelLetters(NLDevanagariOrthographyChecker *this, const __CFString *a2)
{
  CFIndex Length;
  CFMutableStringRef MutableCopy;
  uint64_t *v5;
  const __CFString *v6;
  CFRange v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  const __CFString *v12;
  uint64_t *v13;
  _QWORD *v14[2];
  const __CFString **v15;

  v14[0] = 0;
  v14[1] = 0;
  v12 = CFSTR("अा");
  v13 = (uint64_t *)v14;
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("आ");
  v12 = CFSTR("अो");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ओ");
  v12 = CFSTR("अाे");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ओ");
  v12 = CFSTR("आे");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ओ");
  v12 = CFSTR("अौ");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("औ");
  v12 = CFSTR("अाै");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("औ");
  v12 = CFSTR("आै");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("औ");
  v12 = CFSTR("एॅ");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ऍ");
  v12 = CFSTR("अॉ");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ऑ");
  v12 = CFSTR("अाॅ");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ऑ");
  v12 = CFSTR("आॅ");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ऑ");
  v12 = CFSTR("अॅ");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ॲ");
  Length = CFStringGetLength(a2);
  MutableCopy = CFStringCreateMutableCopy(0, Length, a2);
  v5 = v13;
  if (v13 != (uint64_t *)v14)
  {
    do
    {
      v6 = (const __CFString *)v5[5];
      v7 = CFStringFind(MutableCopy, (CFStringRef)v5[4], 0);
      if (v7.length >= 1)
        CFStringReplace(MutableCopy, v7, v6);
      v8 = (uint64_t *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != (uint64_t *)v14);
  }
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy((uint64_t)&v13, v14[0]);
  return MutableCopy;
}

void sub_1A18C3488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

BOOL NLDevanagariOrthographyChecker::checkSpelling(NLDevanagariOrthographyChecker *this, CFStringRef theString, __CFString **a3, const __CFString **a4)
{
  CFIndex Length;
  CFIndex v9;
  CFIndex location;
  CFStringRef v11;
  CFStringRef v12;
  const __CFString *v13;
  const __CFString *v14;
  CFRange v15;
  __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  CFRange v19;
  CFStringRef v20;
  CFStringRef v21;
  char v22;
  const __CFArray *Mutable;
  _BOOL8 v24;
  CFStringRef v25;
  CFIndex v26;
  char v27;
  int CharacterAtIndex;
  UniChar v29;
  BOOL v30;
  const __CFCharacterSet *v31;
  CFNumberRef v32;
  CFNumberRef v33;
  const __CFString *v34;
  const __CFString **v35;
  CFDictionaryRef v36;
  CFDictionaryRef v37;
  CFStringRef v38;
  CFIndex Count;
  unint64_t v40;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *Value;
  const __CFNumber *v43;
  const __CFString *v44;
  CFRange v45;
  const __CFCharacterSet *Copy;
  const __CFCharacterSet *v47;
  const __CFCharacterSet *v48;
  CFIndex v49;
  const __CFString *v50;
  const __CFString **v51;
  UniChar v52;
  NLDevanagariOrthographyChecker *IsCharacterMember;
  int v54;
  const __CFString *v55;
  CFIndex v56;
  CFMutableStringRef MutableCopy;
  CFRange v58;
  CFComparisonResult v59;
  CFComparisonResult v60;
  const __CFString *v62;
  const __CFString *v63;
  int HasSuffix;
  int CharacterFromSet;
  CFStringRef v66;
  CFIndex v67;
  CFMutableStringRef v68;
  CFRange v69;
  char v70;
  const __CFString *v71;
  const __CFString **v72;
  __CFString *theStringa;
  __CFArray *theArray;
  CFIndex valuePtr;
  uint64_t v76;
  CFRange range;
  void *values[3];
  CFRange result;
  const __CFString *v80;
  uint64_t v81;
  CFRange v82;
  CFRange v83;
  CFRange v84;
  CFRange v85;
  CFRange v86;
  CFRange v87;
  CFRange v88;
  CFRange v89;
  CFRange v90;
  CFRange v91;
  CFRange v92;
  CFRange v93;
  CFRange v94;
  CFRange v95;

  v81 = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(theString);
  result = (CFRange)xmmword_1A18D3A60;
  v82.location = 0;
  v82.length = Length;
  if (CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 7), v82, 0, &result))
  {
    v9 = 0;
    location = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      if (!result.location)
        goto LABEL_51;
      if (location != 0x7FFFFFFFFFFFFFFFLL && result.location == v9 + location)
      {
        v83.location = location;
        v83.length = v9;
        v11 = CFStringCreateWithSubstring(0, theString, v83);
        v12 = CFStringCreateWithSubstring(0, theString, result);
        if ((CFStringCompare(v11, *((CFStringRef *)this + 2), 0)
           || CFStringCompare(v12, *((CFStringRef *)this + 2), 0) == kCFCompareEqualTo)
          && (CFStringCompare(v12, *((CFStringRef *)this + 5), 0)
           || !NLDevanagariOrthographyChecker::isVowelSign(0, v11))
          && (CFStringCompare(v12, *((CFStringRef *)this + 6), 0)
           || !NLDevanagariOrthographyChecker::canCandrabinduFollowVowelSign(0, v11))
          && (CFStringCompare(v12, *((CFStringRef *)this + 4), 0)
           || !NLDevanagariOrthographyChecker::isVowelSign(0, v11)))
        {
          if (v11)
            CFRelease(v11);
          if (v12)
            CFRelease(v12);
LABEL_51:
          v24 = 0;
          v25 = CFSTR("illegal diacritic placement");
          goto LABEL_131;
        }
        if (v11)
          CFRelease(v11);
        if (v12)
          CFRelease(v12);
      }
      location = result.location;
      v9 = result.length;
      v84.location = result.length + result.location;
      v84.length = Length - (result.length + result.location);
    }
    while (CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 7), v84, 0, &result));
  }
  result = (CFRange)xmmword_1A18D3A60;
  v13 = (const __CFString *)*((_QWORD *)this + 2);
  v14 = theString;
  v15.location = 0;
  v15.length = Length;
  while (CFStringFindWithOptions(v14, v13, v15, 0, &result))
  {
    if (!result.location)
      goto LABEL_46;
    v85.location = result.location - 1;
    v85.length = 1;
    v16 = (__CFString *)CFStringCreateWithSubstring(0, theString, v85);
    if (!NLDevanagariOrthographyChecker::canNuktaFollowLetter((NLDevanagariOrthographyChecker *)v16, v16))
    {
      if (v16)
        CFRelease(v16);
LABEL_46:
      v24 = 0;
      v25 = CFSTR("illegal nukta placement");
      goto LABEL_131;
    }
    if (v16)
      CFRelease(v16);
    v15.location = result.length + result.location;
    v15.length = Length - (result.length + result.location);
    v13 = (const __CFString *)*((_QWORD *)this + 2);
    v14 = theString;
  }
  result = (CFRange)xmmword_1A18D3A60;
  v17 = (const __CFString *)*((_QWORD *)this + 3);
  v18 = theString;
  v19.location = 0;
  v19.length = Length;
  while (CFStringFindWithOptions(v18, v17, v19, 0, &result))
  {
    if (!result.location)
      goto LABEL_56;
    v86.location = result.location - 1;
    v86.length = 1;
    v20 = CFStringCreateWithSubstring(0, theString, v86);
    if (result.location + 1 >= Length)
    {
      v21 = 0;
      if (!NLDevanagariOrthographyChecker::canViramaFollowLetter((CFStringRef *)this, v20))
      {
LABEL_52:
        if (v20)
          CFRelease(v20);
        if (v21)
          CFRelease(v21);
LABEL_56:
        v24 = 0;
        v25 = CFSTR("illegal virama placement");
        goto LABEL_131;
      }
LABEL_37:
      v22 = 1;
      if (!v20)
        goto LABEL_39;
LABEL_38:
      CFRelease(v20);
      goto LABEL_39;
    }
    v87.length = 1;
    v87.location = result.location + 1;
    v21 = CFStringCreateWithSubstring(0, theString, v87);
    if (!NLDevanagariOrthographyChecker::canViramaFollowLetter((CFStringRef *)this, v20))
      goto LABEL_52;
    if (!v21)
      goto LABEL_37;
    if (!NLBengaliOrthographyChecker::canViramaPrecedeLetter(this, v21))
      goto LABEL_52;
    v22 = 0;
    if (v20)
      goto LABEL_38;
LABEL_39:
    if ((v22 & 1) == 0)
      CFRelease(v21);
    v19.location = result.length + result.location;
    v19.length = Length - (result.length + result.location);
    v17 = (const __CFString *)*((_QWORD *)this + 3);
    v18 = theString;
  }
  if (a3)
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  else
    Mutable = 0;
  v26 = CFStringGetLength(theString);
  v88.location = 0;
  v88.length = v26;
  v72 = (const __CFString **)a3;
  theArray = Mutable;
  v25 = 0;
  if (!CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 9), v88, 0, &range))
  {
    if (!Mutable)
      goto LABEL_110;
    v27 = 1;
LABEL_100:
    if (CFArrayGetCount(Mutable) >= 1)
    {
      v70 = v27;
      v71 = v25;
      theStringa = CFStringCreateMutableCopy(0, 0, theString);
      Count = CFArrayGetCount(Mutable);
      if (Count >= 1)
      {
        v40 = Count + 1;
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v40 - 2);
          Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("range.location"));
          v43 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("range.length"));
          result = (CFRange)xmmword_1A18D3A50;
          CFNumberGetValue(Value, kCFNumberCFIndexType, &result);
          CFNumberGetValue(v43, kCFNumberCFIndexType, &result.length);
          v44 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("replacement"));
          v45.location = result.location;
          if (result.location != -1)
          {
            v45.length = result.length;
            if (result.length >= 1)
            {
              if (v44)
                CFStringReplace(theStringa, v45, v44);
            }
          }
          --v40;
          Mutable = theArray;
        }
        while (v40 > 1);
      }
      *a3 = theStringa;
      v25 = v71;
      v27 = v70;
    }
    CFRelease(Mutable);
    if ((v27 & 1) != 0)
      goto LABEL_110;
LABEL_130:
    v24 = 0;
    goto LABEL_131;
  }
  v27 = 1;
  while (2)
  {
    if (range.location + 2 >= v26 || CFStringGetCharacterAtIndex(theString, range.location + 1) != 2381)
      goto LABEL_93;
    CharacterAtIndex = CFStringGetCharacterAtIndex(theString, range.location);
    v29 = CFStringGetCharacterAtIndex(theString, range.location + 2);
    if (CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 14), v29))
      v30 = 1;
    else
      v30 = range.location + 3 < v26 && CFStringGetCharacterAtIndex(theString, range.location + 3) == 2364;
    if (CharacterAtIndex > 2338)
    {
      if (CharacterAtIndex != 2339)
      {
        if (CharacterAtIndex == 2344
          && (CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 10), v29)
           || CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 11), v29)
           || CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 12), v29))
          && (range.location < 1 || CFStringGetCharacterAtIndex(theString, range.location) != 2381))
        {
          if (Mutable)
          {
            result = (CFRange)xmmword_1E45D07F0;
            v80 = CFSTR("replacement");
            valuePtr = range.location;
            v76 = 2;
            v32 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
            v33 = CFNumberCreate(0, kCFNumberCFIndexType, &v76);
            values[0] = v32;
            values[1] = v33;
            values[2] = CFSTR("ं");
            v34 = v25;
            v35 = a4;
            v36 = CFDictionaryCreate(0, (const void **)&result, (const void **)values, 3, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
            CFRelease(v32);
            CFRelease(v33);
            CFArrayAppendValue(theArray, v36);
            v37 = v36;
            a4 = v35;
            v25 = v34;
            Mutable = theArray;
            CFRelease(v37);
          }
          goto LABEL_89;
        }
        goto LABEL_79;
      }
      if (v30)
        goto LABEL_89;
      v31 = (const __CFCharacterSet *)*((_QWORD *)this + 13);
LABEL_85:
      if (((CFCharacterSetIsCharacterMember(v31, v29) != 0) & v27) == 0)
        goto LABEL_89;
LABEL_86:
      v27 = 1;
      goto LABEL_93;
    }
    if (CharacterAtIndex == 2329)
    {
      if (v30)
        goto LABEL_89;
      v31 = (const __CFCharacterSet *)*((_QWORD *)this + 10);
      goto LABEL_85;
    }
    if (CharacterAtIndex != 2334)
    {
LABEL_79:
      if ((v27 & 1) == 0)
        goto LABEL_89;
      goto LABEL_86;
    }
    if (!v30)
    {
      v31 = (const __CFCharacterSet *)*((_QWORD *)this + 11);
      goto LABEL_85;
    }
LABEL_89:
    if (!v25)
    {
      v89.location = range.location;
      v89.length = 3;
      v38 = CFStringCreateWithSubstring(0, theString, v89);
      v25 = CFStringCreateWithFormat(0, 0, CFSTR("invalid nasal combination '%@'"), v38);
      CFRelease(v38);
    }
    if (!Mutable)
      goto LABEL_130;
    v27 = 0;
LABEL_93:
    if (v26 > range.location + 1)
    {
      v90.location = range.location + 1;
      v90.length = v26 - (range.location + 1);
      if (CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 9), v90, 0, &range))
        continue;
    }
    break;
  }
  if (Mutable)
    goto LABEL_100;
  if ((v27 & 1) == 0)
    goto LABEL_130;
LABEL_110:
  Copy = CFCharacterSetCreateCopy(0, *((CFCharacterSetRef *)this + 15));
  v47 = CFCharacterSetCreateCopy(0, *((CFCharacterSetRef *)this + 7));
  v48 = CFCharacterSetCreateWithCharactersInString(0, CFSTR("ँं"));
  v49 = CFStringGetLength(theString);
  v91.location = 0;
  v91.length = v49;
  if (CFStringFindCharacterFromSet(theString, Copy, v91, 0, &result))
  {
    v50 = v25;
    v51 = a4;
    while (1)
    {
      if (result.location + 1 < v49)
      {
        v52 = CFStringGetCharacterAtIndex(theString, result.location + 1);
        if (CFCharacterSetIsCharacterMember(v47, v52))
        {
          IsCharacterMember = (NLDevanagariOrthographyChecker *)CFCharacterSetIsCharacterMember(v48, v52);
          if (!(_DWORD)IsCharacterMember)
            break;
        }
      }
      v92.location = result.length + result.location;
      v92.length = v49 - (result.length + result.location);
      if (!CFStringFindCharacterFromSet(theString, Copy, v92, 0, &result))
      {
        v54 = 1;
        a4 = v51;
        v25 = v50;
        goto LABEL_121;
      }
    }
    v54 = 0;
    if (v72)
      *v72 = NLDevanagariOrthographyChecker::stringByCorrectingIllegalVowelLetters(IsCharacterMember, theString);
    a4 = v51;
    v25 = CFSTR("illegal diacritic after vowel letter");
  }
  else
  {
    v54 = 1;
  }
LABEL_121:
  CFRelease(Copy);
  CFRelease(v47);
  CFRelease(v48);
  if (!v54)
    goto LABEL_130;
  v55 = v25;
  v56 = CFStringGetLength(theString);
  MutableCopy = CFStringCreateMutableCopy(0, v56, theString);
  v58 = CFStringFind(MutableCopy, CFSTR("‌"), 0);
  if (v58.length >= 1)
    CFStringReplace(MutableCopy, v58, &stru_1E45D0A48);
  v59 = CFStringCompare(MutableCopy, theString, 0);
  v60 = v59;
  if (v72 && v59)
    *v72 = MutableCopy;
  if (!MutableCopy)
  {
    if (v59 == kCFCompareEqualTo)
      goto LABEL_139;
LABEL_129:
    v24 = 0;
    v25 = CFSTR("invalid: ZWNJ present");
    goto LABEL_131;
  }
  CFRelease(MutableCopy);
  if (v60)
    goto LABEL_129;
LABEL_139:
  v62 = (const __CFString *)*((_QWORD *)this + 1);
  v93.length = CFStringGetLength(theString);
  v93.location = 0;
  if (!CFStringFindWithOptions(theString, v62, v93, 0, &result))
  {
LABEL_146:
    v25 = v55;
    v95.length = CFStringGetLength(theString);
    v95.location = 0;
    CharacterFromSet = CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 16), v95, 0, &result);
    v24 = CharacterFromSet == 0;
    if (CharacterFromSet)
    {
      v66 = CFStringCreateWithSubstring(0, theString, result);
      v25 = CFStringCreateWithFormat(0, 0, CFSTR("invalid letter '%@'"), v66);
      CFRelease(v66);
    }
    goto LABEL_131;
  }
  if (!result.location)
  {
    if (!v72)
    {
      v24 = 0;
      v25 = CFSTR("invalid sequence with ZWJ");
      goto LABEL_131;
    }
    v55 = CFSTR("invalid sequence with ZWJ");
LABEL_150:
    v67 = CFStringGetLength(theString);
    v68 = CFStringCreateMutableCopy(0, v67, theString);
    v69 = CFStringFind(v68, (CFStringRef)*((_QWORD *)this + 1), 0);
    if (v69.length >= 1)
      CFStringReplace(v68, v69, &stru_1E45D0A48);
    v24 = 0;
    *v72 = v68;
    goto LABEL_153;
  }
  v94.length = result.location - 1;
  v94.location = 0;
  v63 = CFStringCreateWithSubstring(0, theString, v94);
  HasSuffix = CFStringHasSuffix(v63, CFSTR("र्"));
  if (!HasSuffix)
    v55 = CFSTR("invalid sequence with ZWJ");
  CFRelease(v63);
  if (v72 && !HasSuffix)
    goto LABEL_150;
  if (HasSuffix)
    goto LABEL_146;
  v24 = 0;
LABEL_153:
  v25 = v55;
LABEL_131:
  if (!a4 || v24)
  {
    if (!a4 && v25)
      CFRelease(v25);
  }
  else
  {
    *a4 = v25;
  }
  return v24;
}

uint64_t NLMessageConversation::NLMessageConversation(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::shared_ptr<NLMessageConversationTurn>>::__init_with_size[abi:ne180100]<std::shared_ptr<NLMessageConversationTurn>*,std::shared_ptr<NLMessageConversationTurn>*>((char *)a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 24, a3);
  return a1;
}

void sub_1A18C4048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

char *NLMessageConversation::getConversationTurns@<X0>(NLMessageConversation *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<std::shared_ptr<NLMessageConversationTurn>>::__init_with_size[abi:ne180100]<std::shared_ptr<NLMessageConversationTurn>*,std::shared_ptr<NLMessageConversationTurn>*>((char *)a2, *(_QWORD **)this, *((_QWORD **)this + 1), (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
}

void NLMessageConversation::updateMetadata(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 24);
  if (v3 != (_QWORD *)a2)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(v3, *(uint64_t **)(a2 + 16), 0);
  }
}

uint64_t NL::CFFinalize(NL *this, const void *a2)
{
  return (**((uint64_t (***)(char *))this + 2))((char *)this + 16);
}

void NLMessageIntentRecognizer::NLMessageIntentRecognizer(NLMessageIntentRecognizer *this, CFDictionaryRef theDict)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  const __CFString *Value;
  const __CFString *v9;
  std::string v10;
  void *__p[2];
  uint64_t v12;
  uint64_t v13[5];
  uint64_t v14[5];
  uint64_t v15[5];

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *((_OWORD *)this + 4) = 0u;
  v4 = (char *)this + 64;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 104) = 0u;
  v5 = (char *)this + 104;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 34) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *(_OWORD *)((char *)this + 184) = 0u;
  v6 = (char *)this + 184;
  v7 = (char *)this + 208;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  Value = (const __CFString *)CFDictionaryGetValue(theDict, kNLMessageIntentRecognizerLocaleKey);
  v9 = (const __CFString *)CFDictionaryGetValue(theDict, kNLMessageIntentRecognizerCustomModelPathKey);
  getUTF8StringFromCFString(Value, __p);
  if (*((char *)this + 231) < 0)
    operator delete(*(void **)v7);
  *(_OWORD *)v7 = *(_OWORD *)__p;
  *((_QWORD *)v7 + 2) = v12;
  if (v9)
  {
    getUTF8StringFromCFString(v9, __p);
    if (*((char *)this + 207) < 0)
      operator delete(*(void **)v6);
    *(_OWORD *)v6 = *(_OWORD *)__p;
    *((_QWORD *)v6 + 2) = v12;
  }
  else
  {
    MEMORY[0x1A1B0DE04](v6, "");
  }
  if (*((char *)this + 231) < 0)
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)this + 26), *((_QWORD *)this + 27));
  else
    v10 = *(std::string *)v7;
  NLMessageIntentDomainDetector::NLMessageIntentDomainDetector(__p, &v10);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
  *(_OWORD *)this = *(_OWORD *)__p;
  *((_QWORD *)this + 2) = v12;
  HIBYTE(v12) = 0;
  LOBYTE(__p[0]) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__move_assign((uint64_t)this + 24, v13);
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__move_assign((uint64_t)v4, v14);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__move_assign((uint64_t)v5, v15);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::~__hash_table((uint64_t)v15);
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::~__hash_table((uint64_t)v14);
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::~__hash_table((uint64_t)v13);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_1A18C42C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;

  if (*(char *)(v14 + 231) < 0)
    operator delete(*v17);
  if (*(char *)(v14 + 207) < 0)
    operator delete(*v16);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::~__hash_table(v15);
  NLMessageIntentDomainDetector::~NLMessageIntentDomainDetector((void **)v14);
  _Unwind_Resume(a1);
}

void NLMessageIntentDomainDetector::~NLMessageIntentDomainDetector(void **this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::~__hash_table((uint64_t)(this + 13));
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::~__hash_table((uint64_t)(this + 8));
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::~__hash_table((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

_QWORD *NLMessageIntentRecognizer::getIntentTypeString@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 - 1) > 6)
    v2 = "none";
  else
    v2 = off_1E45D0808[a1 - 1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void NLMessageIntentRecognizer::getCandidateIntentTypes(std::string *a1@<X0>, NLMessageConversation **a2@<X1>, char **a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *i;
  int MessageIntentType;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;
  void **v23;
  _BYTE v24[40];
  _DWORD *v25;
  _DWORD *v26;
  std::string v27;
  void *__p;
  char v29;
  char *v30;
  char *v31;

  NLMessageConversation::getConversationTurns(*a2, (uint64_t)&v30);
  if ((unint64_t)(v31 - v30) >= 0x11)
  {
    v23 = (void **)descending_timestamp;
    v6 = 126 - 2 * __clz((v31 - v30) >> 4);
    if (v31 == v30)
      v7 = 0;
    else
      v7 = v6;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*,false>((uint64_t *)v30, (__int128 *)v31, (uint64_t (**)(uint64_t *, uint64_t *))&v23, v7, 1);
  }
  NLTransliterationCandidate::getTransliteratedWord(*a2);
  NLMessageIntentRecognizer::extractMessageAndContext((uint64_t)&v30, &v27);
  NLMessageIntentDomainDetector::getCandidateIntentTypes(a1, (uint64_t)&v27, (const void **)&__p, (uint64_t *)&v25);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v8 = v25;
  for (i = v26; v8 != i; v8 += 12)
  {
    LODWORD(v23) = *v8;
    std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v24, (uint64_t)(v8 + 2));
    MessageIntentType = NLMessageIntentCandidate::getMessageIntentType((NLMessageIntentCandidate *)&v23);
    v11 = MessageIntentType;
    v13 = a3[1];
    v12 = (unint64_t)a3[2];
    if ((unint64_t)v13 >= v12)
    {
      v15 = *a3;
      v16 = (v13 - *a3) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)(a3 + 2), v19);
        v15 = *a3;
        v13 = a3[1];
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      *(_DWORD *)v21 = v11;
      v14 = v21 + 4;
      while (v13 != v15)
      {
        v22 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v21 - 1) = v22;
        v21 -= 4;
      }
      *a3 = v21;
      a3[1] = v14;
      a3[2] = &v20[4 * v19];
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = MessageIntentType;
      v14 = v13 + 4;
    }
    a3[1] = v14;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v24);
  }
  v23 = (void **)&v25;
  std::vector<NLMessageIntentTypeWithMetadata>::__destroy_vector::operator()[abi:ne180100](&v23);
  if (v29 < 0)
    operator delete(__p);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

void sub_1A18C45B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  a18 = (void **)(v18 - 104);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

BOOL descending_timestamp(NLMessageConversationTurn **a1, NLMessageConversationTurn **a2)
{
  uint64_t Timestamp;

  Timestamp = NLMessageConversationTurn::getTimestamp(*a1);
  return Timestamp > NLMessageConversationTurn::getTimestamp(*a2);
}

void NLMessageIntentRecognizer::extractMessageAndContext(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  std::string *v7;
  std::string::size_type size;
  std::string v9;
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    MEMORY[0x1A1B0DE04](&v11, "");
    MEMORY[0x1A1B0DE04](&__p, "");
  }
  else
  {
    MEMORY[0x1A1B0DE04](&v11, "");
    NLResult::getLemmaID(**(NLResult ***)a1, &v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v9;
    v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    v5 = (v4 >> 4) + 1;
    for (i = (v4 & 0xFFFFFFFFFFFFFFF0) - 16; --v5 > 1; i -= 16)
    {
      NLResult::getLemmaID(*(NLResult **)(*(_QWORD *)a1 + i), &v9);
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v9;
      else
        v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
      else
        size = v9.__r_.__value_.__l.__size_;
      std::string::append(&v11, (const std::string::value_type *)v7, size);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
      std::string::append(&v11, " ");
    }
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(a2, (__int128 *)&__p, (__int128 *)&v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1A18C47D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t NLMessageIntentRecognizer::getCandidateForIntentType@<X0>(uint64_t a1@<X0>, NLTransliterationCandidate **a2@<X1>, int a3@<W2>, __int128 ***a4@<X8>)
{
  int v9;
  _BYTE v10[40];
  _BYTE v11[40];
  int v12;
  _BYTE v13[40];
  _BYTE v14[32];
  int v15;

  memset(v14, 0, sizeof(v14));
  v15 = 1065353216;
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v11, (uint64_t)v14);
  NLMessageIntentTypeWithMetadata::NLMessageIntentTypeWithMetadata(&v12, a3, (uint64_t)v11);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v11);
  v9 = v12;
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v10, (uint64_t)v13);
  NLMessageIntentRecognizer::getCandidateForIntentType(a1, a2, (NLMessageIntentCandidate *)&v9, a4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v10);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v13);
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v14);
}

void sub_1A18C48FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v3 - 112);
  _Unwind_Resume(a1);
}

void NLMessageIntentRecognizer::getCandidateForIntentType(uint64_t a1@<X0>, NLTransliterationCandidate **a2@<X1>, NLMessageIntentCandidate *a3@<X2>, __int128 ***a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  size_t size;
  _BYTE *v11;
  std::string *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  void *v16;
  int v17;
  int MessageIntentType;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  void **v29;
  unint64_t v30;
  unsigned __int8 *v31;
  __int128 *v32;
  int v33;
  double Score;
  unint64_t v35;
  __int128 **v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  __int128 **v42;
  char *v43;
  __int128 **v44;
  __int128 **v45;
  __int128 **v46;
  __int128 *v47;
  int64x2_t v48;
  __int128 *v49;
  __int128 **v50;
  _BYTE v51[40];
  void *__p[2];
  char v53;
  void **v54;
  __int128 *v55;
  std::string __str;
  void *v57[2];
  char v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  char *v63;
  char *v64;
  __int128 *v65;
  _BYTE v66[32];
  _QWORD *v67;

  NLTransliterationCandidate::getTransliteratedWord(*a2);
  NLMessageConversation::getConversationTurns(*a2, (uint64_t)&v63);
  if ((unint64_t)(v64 - v63) >= 0x11)
  {
    *(_QWORD *)v66 = descending_timestamp;
    v8 = 126 - 2 * __clz((v64 - v63) >> 4);
    if (v64 == v63)
      v9 = 0;
    else
      v9 = v8;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*,false>((uint64_t *)v63, (__int128 *)v64, (uint64_t (**)(uint64_t *, uint64_t *))v66, v9, 1);
  }
  NLMessageIntentRecognizer::extractMessageAndContext((uint64_t)&v63, &v61);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v60, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v60 = v62;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v59, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  else
    v59 = v61;
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  else
    size = v60.__r_.__value_.__l.__size_;
  v11 = v66;
  std::string::basic_string[abi:ne180100]((uint64_t)v66, size + 1);
  if (v66[23] < 0)
    v11 = *(_BYTE **)v66;
  if (size)
  {
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v60;
    else
      v12 = (std::string *)v60.__r_.__value_.__r.__words[0];
    memmove(v11, v12, size);
  }
  *(_WORD *)&v11[size] = 32;
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v59;
  else
    v13 = (std::string *)v59.__r_.__value_.__r.__words[0];
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  else
    v14 = v59.__r_.__value_.__l.__size_;
  v15 = std::string::append((std::string *)v66, (const std::string::value_type *)v13, v14);
  v16 = (void *)v15->__r_.__value_.__r.__words[0];
  v17 = SHIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__r.__words[0] = 0;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  if ((v66[23] & 0x80000000) != 0)
    operator delete(*(void **)v66);
  MessageIntentType = NLMessageIntentCandidate::getMessageIntentType(a3);
  NLMessageIntentRecognizer::getIntentTypeString(MessageIntentType, v57);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>((_QWORD *)(a1 + 144), (unsigned __int8 *)v57))
  {
    memset(v66, 0, sizeof(v66));
    LODWORD(v67) = 1065353216;
    __p[0] = v57;
    v19 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 144, (unsigned __int8 *)v57, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::__move_assign((uint64_t)(v19 + 40), (uint64_t *)v66);
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::~__hash_table((uint64_t)v66);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (MessageIntentType == 1)
  {
    NLMessageIntentCandidate::getAttributes(a3, (uint64_t)v66);
    getUTF8StringFromCFString(kNLMessageIntentAttributeKeywordsKey, __p);
    v54 = __p;
    v20 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v66, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v54);
    if ((char)v20[63] < 0)
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v20 + 5), *((_QWORD *)v20 + 6));
    else
      __str = *(std::string *)(v20 + 40);
    if (v53 < 0)
      operator delete(__p[0]);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v66);
    *(_QWORD *)v66 = v57;
    v21 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 144, (unsigned __int8 *)v57, (uint64_t)&std::piecewise_construct, (__int128 **)v66);
    v22 = std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>((_QWORD *)v21 + 5, (unsigned __int8 *)(a1 + 208));
    *(_QWORD *)v66 = v57;
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 144, (unsigned __int8 *)v57, (uint64_t)&std::piecewise_construct, (__int128 **)v66);
    if (v22)
      goto LABEL_46;
    if (*(char *)(a1 + 207) < 0)
    {
      if (*(_QWORD *)(a1 + 192))
        goto LABEL_41;
    }
    else if (*(_BYTE *)(a1 + 207))
    {
LABEL_41:
      v23 = operator new();
      NLPhotoSharingIntentRecognizer::NLPhotoSharingIntentRecognizer(v23, a1 + 208, a1 + 184);
      goto LABEL_44;
    }
    v23 = operator new();
    NLPhotoSharingIntentRecognizer::NLPhotoSharingIntentRecognizer(v23, a1 + 208);
LABEL_44:
    *(_QWORD *)v66 = v57;
    v24 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 144, (unsigned __int8 *)v57, (uint64_t)&std::piecewise_construct, (__int128 **)v66);
    *(_QWORD *)v66 = a1 + 208;
    v25 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v24 + 40), (unsigned __int8 *)(a1 + 208), (uint64_t)&std::piecewise_construct, (__int128 **)v66);
    v26 = *((_QWORD *)v25 + 5);
    *((_QWORD *)v25 + 5) = v23;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
LABEL_46:
    *(_QWORD *)v66 = v57;
    v27 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 144, (unsigned __int8 *)v57, (uint64_t)&std::piecewise_construct, (__int128 **)v66);
    *(_QWORD *)v66 = a1 + 208;
    v28 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v27 + 40), (unsigned __int8 *)(a1 + 208), (uint64_t)&std::piecewise_construct, (__int128 **)v66);
    (*(void (**)(void ***__return_ptr, _QWORD, std::string *))(**((_QWORD **)v28 + 5) + 16))(&v54, *((_QWORD *)v28 + 5), &v59);
    v29 = v54;
    if (v55 != (__int128 *)v54)
    {
      v30 = 0;
      do
      {
        NLMessageIntentCandidate::getAttributes((NLMessageIntentCandidate *)v29[v30], (uint64_t)__p);
        getUTF8StringFromCFString(kNLMessageIntentAttributeKeywordsKey, v66);
        v65 = (__int128 *)v66;
        v31 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, v66, (uint64_t)&std::piecewise_construct, &v65);
        std::string::operator=((std::string *)(v31 + 40), &__str);
        if ((v66[23] & 0x80000000) != 0)
          operator delete(*(void **)v66);
        v32 = (__int128 *)operator new();
        v33 = NLMessageIntentCandidate::getMessageIntentType((NLMessageIntentCandidate *)v54[v30]);
        std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v51, (uint64_t)__p);
        Score = NLMessageIntentCandidate::getScore((NLMessageIntentCandidate *)v54[v30]);
        NLMessageIntentCandidate::NLMessageIntentCandidate((uint64_t)v32, v33, (uint64_t)v51, Score);
        v65 = v32;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v51);
        v36 = a4[1];
        v35 = (unint64_t)a4[2];
        if ((unint64_t)v36 >= v35)
        {
          v37 = v36 - *a4;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 61)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v39 = v35 - (_QWORD)*a4;
          if (v39 >> 2 > v38)
            v38 = v39 >> 2;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          v67 = a4 + 2;
          if (v40)
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(a4 + 2), v40);
          else
            v41 = 0;
          v42 = (__int128 **)&v41[8 * v37];
          v43 = &v41[8 * v40];
          *(_QWORD *)&v66[24] = v43;
          v65 = 0;
          *v42 = v32;
          v44 = v42 + 1;
          *(_QWORD *)&v66[16] = v42 + 1;
          v46 = *a4;
          v45 = a4[1];
          if (v45 == *a4)
          {
            v49 = 0;
            v48 = vdupq_n_s64((unint64_t)v45);
          }
          else
          {
            do
            {
              v47 = *--v45;
              *v45 = 0;
              *--v42 = v47;
            }
            while (v45 != v46);
            v48 = *(int64x2_t *)a4;
            v44 = *(__int128 ***)&v66[16];
            v43 = *(char **)&v66[24];
            v49 = v65;
          }
          *a4 = v42;
          a4[1] = v44;
          *(int64x2_t *)&v66[8] = v48;
          v50 = a4[2];
          a4[2] = (__int128 **)v43;
          *(_QWORD *)&v66[24] = v50;
          *(_QWORD *)v66 = v48.i64[0];
          std::__split_buffer<std::unique_ptr<NLMessageIntentCandidate>>::~__split_buffer((uint64_t)v66);
          a4[1] = v44;
          v65 = 0;
          if (v49)
          {
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v49 + 8);
            MEMORY[0x1A1B0E068](v49, 0x10A0C4042D94C91);
          }
        }
        else
        {
          *v36 = v32;
          a4[1] = v36 + 1;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
        ++v30;
        v29 = v54;
      }
      while (v30 < ((char *)v55 - (char *)v54) >> 3);
    }
    *(_QWORD *)v66 = &v54;
    std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v58 < 0)
  {
    operator delete(v57[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_72;
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(v16);
LABEL_72:
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
}

void sub_1A18C5028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, int a11, int a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54)
{
  uint64_t v54;
  uint64_t v55;

  MEMORY[0x1A1B0E068](v54, 0x10F3C400A978A76);
  if (a34 < 0)
    operator delete(__p);
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (a40 < 0)
    operator delete(a35);
  if (a12 < 0)
    operator delete(a10);
  if (a46 < 0)
    operator delete(a41);
  if (a53 < 0)
    operator delete(a48);
  std::pair<std::string,std::string>::~pair((uint64_t)&a54);
  a54 = v55 - 184;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  _Unwind_Resume(a1);
}

void NLMessageIntentRecognizer::getCandidates(std::string *a1@<X0>, NLMessageConversation **a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned __int8 *v7;
  __int128 **v8;
  unint64_t v9;
  unsigned __int8 *v10;
  __int128 *v11;
  int MessageIntentType;
  double Score;
  unint64_t v14;
  __int128 **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 **v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  __int128 *v26;
  int64x2_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _BYTE v37[40];
  void *__p[2];
  char v39;
  std::string __str;
  int v41;
  _BYTE v42[40];
  __int128 **v43;
  __int128 **v44;
  void **v45;
  _BYTE v46[40];
  _DWORD *v47;
  _DWORD *v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  char *v53;
  char *v54;
  void **v55;
  void **v56;
  int64x2_t v57;
  char *v58;
  _QWORD *v59;

  NLMessageConversation::getConversationTurns(*a2, (uint64_t)&v53);
  if ((unint64_t)(v54 - v53) >= 0x11)
  {
    v45 = (void **)descending_timestamp;
    v4 = 126 - 2 * __clz((v54 - v53) >> 4);
    if (v54 == v53)
      v5 = 0;
    else
      v5 = v4;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*,false>((uint64_t *)v53, (__int128 *)v54, (uint64_t (**)(uint64_t *, uint64_t *))&v45, v5, 1);
  }
  NLTransliterationCandidate::getTransliteratedWord(*a2);
  NLMessageIntentRecognizer::extractMessageAndContext((uint64_t)&v53, &v51);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v50, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
  else
    v50 = v52;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v49, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  else
    v49 = v51;
  NLMessageIntentDomainDetector::getCandidateIntentTypes(a1, (uint64_t)&v49, (const void **)&v50.__r_.__value_.__l.__data_, (uint64_t *)&v47);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = v47;
  v34 = v48;
  if (v47 == v48)
  {
    v30 = 0;
    v31 = 0;
  }
  else
  {
    do
    {
      LODWORD(v45) = *v6;
      std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v46, (uint64_t)(v6 + 2));
      v41 = (int)v45;
      std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v42, (uint64_t)v46);
      NLMessageIntentRecognizer::getCandidateForIntentType((uint64_t)a1, a2, (NLMessageIntentCandidate *)&v41, &v43);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v42);
      NLMessageIntentCandidate::getAttributes((NLMessageIntentCandidate *)&v45, (uint64_t)&v56);
      getUTF8StringFromCFString(kNLMessageIntentAttributeKeywordsKey, __p);
      v55 = __p;
      v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v56, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v55);
      if ((char)v7[63] < 0)
        std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v7 + 5), *((_QWORD *)v7 + 6));
      else
        __str = *(std::string *)(v7 + 40);
      if (v39 < 0)
        operator delete(__p[0]);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v56);
      v8 = v43;
      if (v44 != v43)
      {
        v9 = 0;
        do
        {
          NLMessageIntentCandidate::getAttributes((NLMessageIntentCandidate *)v8[v9], (uint64_t)__p);
          getUTF8StringFromCFString(kNLMessageIntentAttributeKeywordsKey, &v56);
          v55 = (void **)&v56;
          v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)&v56, (uint64_t)&std::piecewise_construct, (__int128 **)&v55);
          std::string::operator=((std::string *)(v10 + 40), &__str);
          if (v57.i8[15] < 0)
            operator delete(v56);
          v11 = (__int128 *)operator new();
          MessageIntentType = NLMessageIntentCandidate::getMessageIntentType((NLMessageIntentCandidate *)v43[v9]);
          std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v37, (uint64_t)__p);
          Score = NLMessageIntentCandidate::getScore((NLMessageIntentCandidate *)v43[v9]);
          NLMessageIntentCandidate::NLMessageIntentCandidate((uint64_t)v11, MessageIntentType, (uint64_t)v37, Score);
          v55 = (void **)v11;
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v37);
          v15 = (__int128 **)a3[1];
          v14 = a3[2];
          if ((unint64_t)v15 >= v14)
          {
            v16 = ((uint64_t)v15 - *a3) >> 3;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61)
              std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
            v18 = v14 - *a3;
            if (v18 >> 2 > v17)
              v17 = v18 >> 2;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v17;
            v59 = a3 + 2;
            if (v19)
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(a3 + 2), v19);
            else
              v20 = 0;
            v21 = (__int128 **)&v20[8 * v16];
            v22 = &v20[8 * v19];
            v58 = v22;
            v55 = 0;
            *v21 = v11;
            v23 = v21 + 1;
            v57.i64[1] = (uint64_t)(v21 + 1);
            v25 = (_QWORD *)*a3;
            v24 = (_QWORD *)a3[1];
            if (v24 == (_QWORD *)*a3)
            {
              v28 = 0;
              v27 = vdupq_n_s64((unint64_t)v24);
            }
            else
            {
              do
              {
                v26 = (__int128 *)*--v24;
                *v24 = 0;
                *--v21 = v26;
              }
              while (v24 != v25);
              v27 = *(int64x2_t *)a3;
              v23 = (_QWORD *)v57.i64[1];
              v22 = v58;
              v28 = (__int128 *)v55;
            }
            *a3 = (uint64_t)v21;
            a3[1] = (uint64_t)v23;
            v57 = v27;
            v29 = a3[2];
            a3[2] = (uint64_t)v22;
            v58 = (char *)v29;
            v56 = (void **)v27.i64[0];
            std::__split_buffer<std::unique_ptr<NLMessageIntentCandidate>>::~__split_buffer((uint64_t)&v56);
            a3[1] = (uint64_t)v23;
            v55 = 0;
            if (v28)
            {
              std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v28 + 8);
              MEMORY[0x1A1B0E068](v28, 0x10A0C4042D94C91);
            }
          }
          else
          {
            *v15 = v11;
            a3[1] = (uint64_t)(v15 + 1);
          }
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
          ++v9;
          v8 = v43;
        }
        while (v9 < v44 - v43);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v56 = (void **)&v43;
      std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100](&v56);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v46);
      v6 += 12;
    }
    while (v6 != v34);
    v30 = *a3;
    v31 = (uint64_t *)a3[1];
  }
  if ((unint64_t)v31 - v30 > 8)
  {
    v56 = (void **)greater_than_key;
    v32 = 126 - 2 * __clz(((uint64_t)v31 - v30) >> 3);
    if (v31 == (uint64_t *)v30)
      v33 = 0;
    else
      v33 = v32;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*,false>(v30, v31, (uint64_t (**)(uint64_t *, uint64_t *))&v56, v33, 1);
  }
  v45 = (void **)&v47;
  std::vector<NLMessageIntentTypeWithMetadata>::__destroy_vector::operator()[abi:ne180100](&v45);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
}

void sub_1A18C5720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (*(char *)(v58 - 217) < 0)
    operator delete(*(void **)(v58 - 240));
  std::pair<std::string,std::string>::~pair(v58 - 216);
  *(_QWORD *)(v58 - 216) = v58 - 168;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 216));
  _Unwind_Resume(a1);
}

BOOL greater_than_key(NLMessageIntentCandidate **a1, NLMessageIntentCandidate **a2)
{
  double Score;

  Score = NLMessageIntentCandidate::getScore(*a1);
  return Score > NLMessageIntentCandidate::getScore(*a2);
}

void std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*,false>(uint64_t *a1, __int128 *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, uint64_t))
{
  __int128 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;

  if (a1 != a2)
  {
    v5 = (__int128 *)(a1 + 16);
    if (a1 + 16 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v8;
        v8 = (uint64_t)v5;
        if ((*a3)(v5, v9))
        {
          v16 = *(_OWORD *)v8;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          v10 = v7;
          while (1)
          {
            std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](a1 + v10 + 16, (__int128 *)(a1 + v10));
            if (!v10)
              break;
            v11 = (*a3)(&v16, a1 + v10 - 16);
            v10 -= 16;
            if ((v11 & 1) == 0)
            {
              v12 = a1 + v10 + 16;
              goto LABEL_10;
            }
          }
          v12 = a1;
LABEL_10:
          std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v12, &v16);
          v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
          if (*((_QWORD *)&v16 + 1))
          {
            v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
        }
        v5 = (__int128 *)(v8 + 16);
        v7 += 16;
      }
      while (v8 + 16 != a2);
    }
  }
}

void sub_1A18C5E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 1;
    if (a1 + 1 != a2)
    {
      do
      {
        v7 = v5;
        if ((*a3)(v5, v4))
        {
          v11 = *v7;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0;
          do
          {
            std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)(v4 + 1), v4);
            --v4;
          }
          while (((*a3)(&v11, v4) & 1) != 0);
          std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)(v4 + 1), &v11);
          v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
          if (*((_QWORD *)&v11 + 1))
          {
            v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
        }
        v5 = v7 + 1;
        v4 = v7;
      }
      while (v7 + 1 != a2);
    }
  }
}

void sub_1A18C5F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      v11 = a3 + 1;
      result = 1;
      v12 = a1 + 1;
LABEL_9:
      v15 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    v17 = a1[1];
    a1[1] = a2[1];
    a2[1] = v17;
    if ((*a4)(a3, a2))
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v11 = a3 + 1;
      result = 2;
      v12 = a2 + 1;
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v15 = a2 + 1;
    v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    if ((*a4)(a2, a1))
    {
      v16 = *a1;
      *a1 = *a2;
      v12 = a1 + 1;
      *a2 = v16;
      result = 2;
LABEL_10:
      v19 = *v12;
      *v12 = *v15;
      *v15 = v19;
      return result;
    }
  }
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NLMessageConversationTurn> *,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v6;
  __int128 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;

  v4 = a2;
  v15 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (((*a3)(&v15, a2 - 1) & 1) != 0)
  {
    v6 = (__int128 *)a1;
    do
      ++v6;
    while (((*a3)(&v15, v6) & 1) == 0);
  }
  else
  {
    v7 = (__int128 *)(a1 + 16);
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v15, v7);
      v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while (((*a3)(&v15, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = *(_QWORD *)v4;
    *(_QWORD *)v4 = v9;
    v10 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = *((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = v10;
    do
      ++v6;
    while (!(*a3)(&v15, v6));
    do
      --v4;
    while (((*a3)(&v15, v4) & 1) != 0);
  }
  if (v6 - 1 != (__int128 *)a1)
    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](a1, v6 - 1);
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)(v6 - 1), &v15);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v6;
}

void sub_1A18C61F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NLMessageConversationTurn> *,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&)>(uint64_t a1, uint64_t *a2, uint64_t (**a3)(uint64_t, __int128 *))
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v18;

  v6 = 0;
  v18 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  do
  {
    v7 = (*a3)(a1 + v6 + 16, &v18);
    v6 += 16;
  }
  while ((v7 & 1) != 0);
  v8 = a1 + v6;
  if (v6 == 16)
  {
    do
    {
      if (v8 >= (unint64_t)a2)
        break;
      a2 -= 2;
    }
    while (((*a3)((uint64_t)a2, &v18) & 1) == 0);
  }
  else
  {
    do
      a2 -= 2;
    while (!(*a3)((uint64_t)a2, &v18));
  }
  if (v8 >= (unint64_t)a2)
  {
    v13 = (__int128 *)(v8 - 16);
  }
  else
  {
    v9 = (uint64_t *)(a1 + v6);
    v10 = a2;
    do
    {
      v11 = *v9;
      *v9 = *v10;
      *v10 = v11;
      v12 = v9[1];
      v9[1] = v10[1];
      v10[1] = v12;
      do
        v9 += 2;
      while (((*a3)((uint64_t)v9, &v18) & 1) != 0);
      do
        v10 -= 2;
      while (!(*a3)((uint64_t)v10, &v18));
    }
    while (v9 < v10);
    v13 = (__int128 *)(v9 - 2);
  }
  if (v13 != (__int128 *)a1)
    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](a1, v13);
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v13, &v18);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v13;
}

void sub_1A18C63A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(a1, a1 + 2, a1 + 4, a3);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v20 = *(_OWORD *)v11;
      *v11 = 0;
      v11[1] = 0;
      v14 = v12;
      while (1)
      {
        std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)a1 + v14 + 48, (__int128 *)((char *)a1 + v14 + 32));
        if (v14 == -32)
          break;
        v15 = (*a3)((uint64_t *)&v20, (uint64_t *)((char *)a1 + v14 + 16));
        v14 -= 16;
        if ((v15 & 1) == 0)
        {
          v16 = (uint64_t)a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v16, &v20);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

void sub_1A18C65D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
          v20 = a1[1];
          a1[1] = a2[1];
          a2[1] = v20;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*,std::shared_ptr<NLMessageConversationTurn>*>(char *a1, char *a2, __int128 *a3, uint64_t (**a4)(__int128 *, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[16 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((__int128 *)v6 != a3)
    {
      v14 = (__int128 *)v6;
      do
      {
        if ((*a4)(v14, (uint64_t)a1))
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          v16 = *((_QWORD *)v14 + 1);
          *((_QWORD *)v14 + 1) = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>((uint64_t)a1, a4, v9, (uint64_t)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>((uint64_t)a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return (__int128 *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(uint64_t a1, uint64_t (**a2)(__int128 *, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - a1) >> 4)
    {
      v10 = (a4 - a1) >> 3;
      v11 = v10 + 1;
      v12 = (__int128 *)(a1 + 16 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, (uint64_t)(v12 + 1)))
      {
        ++v12;
        v11 = v13;
      }
      if (((*a2)(v12, v5) & 1) == 0)
      {
        v19 = *(_OWORD *)v5;
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        do
        {
          v14 = (uint64_t)v12;
          std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v5, v12);
          if (v7 < v11)
            break;
          v15 = (2 * v11) | 1;
          v12 = (__int128 *)(a1 + 16 * v15);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v15;
          }
          else if ((*a2)((__int128 *)(a1 + 16 * v15), (uint64_t)(v12 + 1)))
          {
            ++v12;
          }
          else
          {
            v11 = v15;
          }
          v5 = v14;
        }
        while (!(*a2)(v12, (uint64_t)&v19));
        std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v14, &v19);
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
        if (*((_QWORD *)&v19 + 1))
        {
          v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
    }
  }
}

void sub_1A18C6A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v13 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(a1, a3, a4);
    v8 = v7;
    v9 = (__int128 *)(a2 - 16);
    if (v7 == v9)
    {
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v7, &v13);
    }
    else
    {
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v7, v9);
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v9, &v13);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(a1, (uint64_t)(v8 + 1), (uint64_t (**)(__int128 *, __int128 *))a3, ((uint64_t)v8 - a1 + 16) >> 4);
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1A18C6B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (__int128 *)(a1 + 16 * v6 + 16);
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 16 * v6 + 16, a1 + 16 * v6 + 32))
    {
      ++v9;
      v10 = v11;
    }
    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](a1, v9);
    a1 = (uint64_t)v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (__int128 *)(a1 + 16 * (v4 >> 1));
    v9 = a2 - 16;
    if ((*a3)(v8, (__int128 *)(a2 - 16)))
    {
      v14 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      do
      {
        v10 = (uint64_t)v8;
        std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v9, v8);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (__int128 *)(a1 + 16 * v7);
        v9 = v10;
      }
      while (((*a3)(v8, &v14) & 1) != 0);
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v10, &v14);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
      if (*((_QWORD *)&v14 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_1A18C6D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A18C6FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1A18C7060(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A18C7430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1A18C74CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<NLAbstractIntentRecognizer>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  BOOL v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(v10, a2, (uint64_t (**)(uint64_t *, uint64_t))a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(v10, a2, a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(v10, &v10[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(v10 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(v10 - 1, v10) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::unique_ptr<NLMessageIntentCandidate> *,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&)>(v10, a2, a3);
            v10 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::unique_ptr<NLMessageIntentCandidate> *,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&)>(v10, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(v10, v18, a3);
          v10 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*,false>(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*,std::unique_ptr<NLMessageIntentCandidate>*>(v10, (uint64_t)a2, a2, a3);
        return result;
    }
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t))
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v7 = 0;
      v8 = result;
      do
      {
        v9 = v8;
        v8 = v5;
        result = (uint64_t *)(*a3)(v5, (uint64_t)v9);
        if ((_DWORD)result)
        {
          v10 = *v8;
          *v8 = 0;
          v17 = v10;
          v11 = v7;
          while (1)
          {
            v12 = *(uint64_t *)((char *)v4 + v11);
            *(uint64_t *)((char *)v4 + v11) = 0;
            std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100]((uint64_t *)((char *)v4 + v11 + 8), v12);
            if (!v11)
              break;
            v13 = (*a3)(&v17, (uint64_t)v4 + v11 - 8);
            v11 -= 8;
            if ((v13 & 1) == 0)
            {
              v14 = (uint64_t *)((char *)v4 + v11 + 8);
              goto LABEL_10;
            }
          }
          v14 = v4;
LABEL_10:
          v15 = v17;
          v17 = 0;
          result = std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](v14, v15);
          v16 = v17;
          v17 = 0;
          if (v16)
          {
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v16 + 8);
            result = (uint64_t *)MEMORY[0x1A1B0E068](v16, 0x10A0C4042D94C91);
          }
        }
        v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

void sub_1A18C797C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v4 = result;
    for (i = result + 1; v4 + 1 != a2; i = v4 + 1)
    {
      v7 = v4;
      v4 = i;
      result = (uint64_t *)(*a3)(i, v7);
      if ((_DWORD)result)
      {
        v8 = *v4;
        *v4 = 0;
        v14 = v8;
        v9 = v4;
        do
        {
          v10 = *(v9 - 1);
          *(v9 - 1) = 0;
          std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](v9, v10);
          v11 = (*a3)(&v14, v9 - 2);
          --v9;
        }
        while ((v11 & 1) != 0);
        v12 = v14;
        v14 = 0;
        result = std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](v9, v12);
        v13 = v14;
        v14 = 0;
        if (v13)
        {
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v13 + 8);
          result = (uint64_t *)MEMORY[0x1A1B0E068](v13, 0x10A0C4042D94C91);
        }
      }
    }
  }
  return result;
}

void sub_1A18C7A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!(*a4)(a2, a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  v10 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(a3, a2))
      return 1;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::unique_ptr<NLMessageIntentCandidate> *,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = a2;
  v6 = *a1;
  *a1 = 0;
  v16 = v6;
  if (((*a3)(&v16, a2 - 1) & 1) != 0)
  {
    v7 = a1;
    do
      ++v7;
    while (((*a3)(&v16, v7) & 1) == 0);
  }
  else
  {
    v8 = a1 + 1;
    do
    {
      v7 = v8;
      if (v8 >= v4)
        break;
      v9 = (*a3)(&v16, v8);
      v8 = v7 + 1;
    }
    while (!v9);
  }
  if (v7 < v4)
  {
    do
      --v4;
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  while (v7 < v4)
  {
    v10 = *v7;
    *v7 = *v4;
    *v4 = v10;
    do
      ++v7;
    while (!(*a3)(&v16, v7));
    do
      --v4;
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  v11 = v7 - 1;
  if (v7 - 1 != a1)
  {
    v12 = *v11;
    *v11 = 0;
    std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](a1, v12);
  }
  v13 = v16;
  v16 = 0;
  std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](v7 - 1, v13);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v14 + 8);
    MEMORY[0x1A1B0E068](v14, 0x10A0C4042D94C91);
  }
  return v7;
}

void sub_1A18C7CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::unique_ptr<NLMessageIntentCandidate> *,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = 0;
  v7 = *a1;
  *a1 = 0;
  v18 = v7;
  do
    v8 = (*a3)(&a1[++v6], &v18);
  while ((v8 & 1) != 0);
  v9 = &a1[v6];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      --a2;
    }
    while (((*a3)(a2, &v18) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!(*a3)(a2, &v18));
  }
  if (v9 >= a2)
  {
    v13 = v9 - 1;
  }
  else
  {
    v10 = &a1[v6];
    v11 = a2;
    do
    {
      v12 = *v10;
      *v10 = *v11;
      *v11 = v12;
      do
        ++v10;
      while (((*a3)(v10, &v18) & 1) != 0);
      do
        --v11;
      while (!(*a3)(v11, &v18));
    }
    while (v10 < v11);
    v13 = v10 - 1;
  }
  if (v13 != a1)
  {
    v14 = *v13;
    *v13 = 0;
    std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](a1, v14);
  }
  v15 = v18;
  v18 = 0;
  std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](v13, v15);
  v16 = v18;
  v18 = 0;
  if (v16)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v16 + 8);
    MEMORY[0x1A1B0E068](v16, 0x10A0C4042D94C91);
  }
  return v13;
}

void sub_1A18C7E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v14 = *v11;
      *v11 = 0;
      v21 = v14;
      v15 = v12;
      while (1)
      {
        v16 = *(uint64_t *)((char *)a1 + v15 + 16);
        *(uint64_t *)((char *)a1 + v15 + 16) = 0;
        std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100]((uint64_t *)((char *)a1 + v15 + 24), v16);
        if (v15 == -16)
          break;
        v17 = (*a3)(&v21, (uint64_t *)((char *)a1 + v15 + 8));
        v15 -= 8;
        if ((v17 & 1) == 0)
        {
          v18 = (uint64_t *)((char *)a1 + v15 + 24);
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      v19 = v21;
      v21 = 0;
      std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](v18, v19);
      v20 = v21;
      v21 = 0;
      if (v20)
      {
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v20 + 8);
        MEMORY[0x1A1B0E068](v20, 0x10A0C4042D94C91);
      }
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

void sub_1A18C809C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*,std::unique_ptr<NLMessageIntentCandidate>*>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  if (a1 != (uint64_t *)a2)
  {
    v8 = (a2 - (uint64_t)a1) >> 3;
    if (a2 - (uint64_t)a1 >= 9)
    {
      v9 = (unint64_t)(v8 - 2) >> 1;
      v10 = v9 + 1;
      v11 = &a1[v9];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>((uint64_t)a1, a4, v8, v11--);
        --v10;
      }
      while (v10);
    }
    v12 = a2;
    if ((uint64_t *)a2 != a3)
    {
      v13 = (uint64_t *)a2;
      do
      {
        if ((*a4)(v13, a1))
        {
          v14 = *v13;
          *v13 = *a1;
          *a1 = v14;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>((uint64_t)a1, a4, v8, a1);
        }
        ++v13;
      }
      while (v13 != a3);
      v12 = (uint64_t)a3;
    }
    std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(a1, a2, (unsigned int (**)(uint64_t, uint64_t))a4);
    return (uint64_t *)v12;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(uint64_t result, uint64_t (**a2)(uint64_t *, uint64_t *), uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v10 = ((uint64_t)a4 - result) >> 2;
      v11 = v10 + 1;
      v12 = (uint64_t *)(result + 8 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, v12 + 1))
      {
        ++v12;
        v11 = v13;
      }
      result = (*a2)(v12, v5);
      if ((result & 1) == 0)
      {
        v14 = *v5;
        *v5 = 0;
        v20 = v14;
        do
        {
          v15 = v12;
          v16 = *v12;
          *v12 = 0;
          std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](v5, v16);
          if (v7 < v11)
            break;
          v17 = (2 * v11) | 1;
          v12 = (uint64_t *)(v6 + 8 * v17);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v17;
          }
          else if ((*a2)((uint64_t *)(v6 + 8 * v17), v12 + 1))
          {
            ++v12;
          }
          else
          {
            v11 = v17;
          }
          v5 = v15;
        }
        while (!(*a2)(v12, &v20));
        v18 = v20;
        v20 = 0;
        result = (uint64_t)std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](v15, v18);
        v19 = v20;
        v20 = 0;
        if (v19)
        {
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v19 + 8);
          return MEMORY[0x1A1B0E068](v19, 0x10A0C4042D94C91);
        }
      }
    }
  }
  return result;
}

void sub_1A18C84A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(uint64_t *result, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  if (a2 - (uint64_t)result >= 9)
  {
    v4 = result;
    v5 = (unint64_t)(a2 - (_QWORD)result) >> 3;
    v6 = (uint64_t *)(a2 - 8);
    do
    {
      v7 = *v4;
      *v4 = 0;
      v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(v4, a3, v5);
      v9 = v8;
      if (v6 == v8)
      {
        result = std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](v8, v7);
      }
      else
      {
        v10 = *v6;
        *v6 = 0;
        std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](v8, v10);
        std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](v6, v7);
        result = std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(v4, (uint64_t)(v9 + 1), (uint64_t (**)(uint64_t *, uint64_t))a3, v9 + 1 - v4);
      }
      --v6;
    }
    while (v5-- > 2);
  }
  return result;
}

void sub_1A18C8584(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(uint64_t *a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)((uint64_t)&a1[v6 + 1], (uint64_t)&a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    v12 = *v9;
    *v9 = 0;
    std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](a1, v12);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t *std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(uint64_t *result, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = &result[v4 >> 1];
    v9 = (uint64_t *)(a2 - 8);
    result = (uint64_t *)(*a3)(v8, a2 - 8);
    if ((_DWORD)result)
    {
      v10 = *v9;
      *v9 = 0;
      v15 = v10;
      do
      {
        v11 = v8;
        v12 = *v8;
        *v8 = 0;
        std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](v9, v12);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = &v6[v7];
        v9 = v11;
      }
      while (((*a3)(v8, (uint64_t)&v15) & 1) != 0);
      v13 = v15;
      v15 = 0;
      result = std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](v11, v13);
      v14 = v15;
      v15 = 0;
      if (v14)
      {
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v14 + 8);
        return (uint64_t *)MEMORY[0x1A1B0E068](v14, 0x10A0C4042D94C91);
      }
    }
  }
  return result;
}

void sub_1A18C8734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::ParseFormatter::ParseFormatter(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  const __CFAllocator *v10;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v12;
  CFMutableDictionaryRef v13;
  CFMutableDictionaryRef v14;
  CFMutableDictionaryRef v15;
  const void **v17;

  *(_QWORD *)a1 = &off_1E45CE518;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a3[1];
  *(_QWORD *)(a1 + 24) = *a3;
  *(_QWORD *)(a1 + 32) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v17 = (const void **)(a1 + 64);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  NL::DateFormatter::DateFormatter(a1 + 104);
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 56), Mutable);
  v12 = CFArrayCreateMutable(v10, 0, MEMORY[0x1E0C9B378]);
  nlp::CFScopedPtr<__CFArray *>::reset(v17, v12);
  v13 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(a1 + 72), v13);
  v14 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(a1 + 80), v14);
  v15 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(a1 + 88), v15);
  NL::ParseFormatter::reset((const void **)a1);
  return a1;
}

void sub_1A18C88F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void **a10)
{
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  const void **v13;
  const void **v14;
  const void **v15;
  const void **v16;

  nlp::CFScopedPtr<__CFDictionary *>::reset(v16, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset(v15, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset(v14, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(a10, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(v13, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v12, 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void NL::ParseFormatter::reset(const void **this)
{
  __CFArray *v2;
  __CFArray *v3;
  __CFDictionary *v4;
  __CFDictionary *v5;
  __CFDictionary *v6;

  nlp::CFScopedPtr<__CFString const*>::reset(this + 5, &stru_1E45D0A48);
  *((_DWORD *)this + 12) = 0;
  v2 = (__CFArray *)this[7];
  if (v2)
    CFArrayRemoveAllValues(v2);
  v3 = (__CFArray *)this[8];
  if (v3)
    CFArrayRemoveAllValues(v3);
  v4 = (__CFDictionary *)this[9];
  if (v4)
    CFDictionaryRemoveAllValues(v4);
  v5 = (__CFDictionary *)this[10];
  if (v5)
    CFDictionaryRemoveAllValues(v5);
  v6 = (__CFDictionary *)this[11];
  if (v6)
    CFDictionaryRemoveAllValues(v6);
  *((_DWORD *)this + 24) = *((_DWORD *)this[1] + 10);
}

void NL::ParseFormatter::~ParseFormatter(const void **this)
{
  *this = &off_1E45CE518;
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 17, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 16, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 15, 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)(this + 13));
  nlp::CFScopedPtr<__CFDictionary *>::reset(this + 11, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset(this + 10, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset(this + 9, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 8, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 7, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(this + 5, 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

{
  NL::ParseFormatter::~ParseFormatter(this);
  JUMPOUT(0x1A1B0E068);
}

__CFDictionary *NL::ParseFormatter::copyFormattedResult(NL::ParseFormatter *this, char a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  __CFString *v9;
  __CFString *CFStringFromString;
  NSObject *v11;
  const __CFDictionary *v12;
  CFNumberRef v13;
  const __CFArray *v14;
  CFAttributedStringRef v15;
  CFArrayRef Copy;
  const __CFDictionary *v17;
  void *v18;
  int v19;
  CFNumberRef v20;
  CFDictionaryRef v21;
  const __CFDictionary *v22;
  CFDictionaryRef v23;
  CFIndex Count;
  CFIndex i;
  const __CFString *ValueAtIndex;
  CFIndex valuePtr;
  std::string __p;
  void *key;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = Mutable;
  if (!Mutable)
    return v6;
  CFDictionarySetValue(Mutable, CFSTR("String"), *((const void **)this + 5));
  key = 0;
  v7 = (const __CFArray *)*((_QWORD *)this + 7);
  if (v7 && CFArrayGetCount(v7))
  {
    v8 = (const __CFArray *)*((_QWORD *)this + 7);
    if (v8 && CFArrayGetCount(*((CFArrayRef *)this + 7)))
    {
      if (CFArrayGetCount(v8) == 1)
      {
        v9 = (__CFString *)CFStringCreateByCombiningStrings(v4, v8, &stru_1E45D0A48);
      }
      else
      {
        v9 = CFStringCreateMutable(v4, 0);
        Count = CFArrayGetCount(v8);
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            if (CFStringGetLength(v9))
              CFStringAppend(v9, CFSTR(" || "));
            CFStringAppend(v9, CFSTR("("));
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, i);
            CFStringAppend(v9, ValueAtIndex);
            CFStringAppend(v9, CFSTR(")"));
          }
        }
      }
    }
    else
    {
      v9 = 0;
    }
    key = v9;
    if (v9)
      goto LABEL_10;
    goto LABEL_45;
  }
  NL::QueryTokenizer::description(*((NL::QueryTokenizer **)this + 3), &__p);
  CFStringFromString = (__CFString *)createCFStringFromString((uint64_t)&__p);
  v9 = CFStringFromString;
  key = CFStringFromString;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (CFStringFromString)
      goto LABEL_10;
    goto LABEL_45;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v9)
  {
LABEL_45:
    v9 = &stru_1E45D0A48;
    key = &stru_1E45D0A48;
  }
LABEL_10:
  if (CFPreferencesGetAppBooleanValue(CFSTR("NLSearchEnableLogging"), (CFStringRef)*MEMORY[0x1E0C9B228], 0))
  {
    v11 = _nlpDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      NL::ParseFormatter::copyFormattedResult((uint64_t)v9, v11);
  }
  CFDictionarySetValue(v6, CFSTR("Parse"), v9);
  v12 = (const __CFDictionary *)*((_QWORD *)this + 11);
  if (v12 && CFDictionaryGetCount(v12))
    CFDictionarySetValue(v6, CFSTR("ResultModifier"), *((const void **)this + 11));
  v13 = CFNumberCreate(v4, kCFNumberSInt32Type, (char *)this + 48);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  if (v13)
    CFDictionarySetValue(v6, CFSTR("Confidence"), v13);
  if ((a2 & 4) != 0)
  {
    v14 = (const __CFArray *)*((_QWORD *)this + 8);
    if (v14)
    {
      if (!CFArrayGetCount(v14))
      {
        v15 = CFAttributedStringCreate(v4, *((CFStringRef *)this + 5), 0);
        valuePtr = (CFIndex)v15;
        if (v15)
        {
          CFArrayAppendValue(*((CFMutableArrayRef *)this + 8), v15);
          CFRelease(v15);
        }
      }
      Copy = CFArrayCreateCopy(v4, *((CFArrayRef *)this + 8));
      valuePtr = (CFIndex)Copy;
      if (Copy)
      {
        CFDictionarySetValue(v6, CFSTR("AttributedInput"), Copy);
        CFRelease(Copy);
      }
    }
  }
  if ((a2 & 2) != 0)
  {
    v17 = (const __CFDictionary *)*((_QWORD *)this + 9);
    if (v17)
    {
      if (*((int *)this + 12) >= 1)
      {
        v18 = key;
        v19 = CFDictionaryContainsKey(*((CFDictionaryRef *)this + 9), key);
        v17 = (const __CFDictionary *)*((_QWORD *)this + 9);
        if (!v19)
        {
          valuePtr = CFDictionaryGetCount(v17) + 200;
          v20 = CFNumberCreate(v4, kCFNumberCFIndexType, &valuePtr);
          if (v20)
          {
            CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 9), v18, v20);
            CFRelease(v20);
          }
          v17 = (const __CFDictionary *)*((_QWORD *)this + 9);
        }
      }
      v21 = CFDictionaryCreateCopy(v4, v17);
      valuePtr = (CFIndex)v21;
      if (v21)
      {
        CFDictionarySetValue(v6, CFSTR("RankTerms"), v21);
        CFRelease(v21);
      }
    }
  }
  if ((a2 & 8) != 0)
  {
    v22 = (const __CFDictionary *)*((_QWORD *)this + 10);
    if (v22)
    {
      v23 = CFDictionaryCreateCopy(v4, v22);
      valuePtr = (CFIndex)v23;
      if (v23)
      {
        CFDictionarySetValue(v6, CFSTR("RankCategories"), v23);
        CFRelease(v23);
      }
    }
  }
  if (v13)
    CFRelease(v13);
  if (key)
    CFRelease(key);
  return v6;
}

void sub_1A18C8EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17)
{
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)&a9, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)&__p, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a17, 0);
  _Unwind_Resume(a1);
}

BOOL NL::ParseFormatter::updateAttributedParseForAttributeWithEntity(uint64_t a1, __CFAttributedString *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  _BOOL8 v6;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  _BOOL4 v19;
  CFNumberRef v20;
  NL::DateFormatter *v21;
  __CFDateFormatter **v22;
  __CFDictionary *v23;
  __CFDictionary *v24;
  __CFDictionary *v25;
  CFRange v26;
  const __CFAllocator *v27;
  CFNumberRef v28;
  CFNumberRef v29;
  unint64_t *v30;
  unint64_t v31;
  CFTypeRef value;
  void *__p[2];
  char v35;
  int valuePtr;
  int v37;
  _OWORD v38[4];
  _BYTE v39[64];
  _BYTE v40[64];
  uint64_t v41;
  std::__shared_weak_count *v42;

  v6 = 0;
  if (!a2 || *(_DWORD *)(a4 + 112) != 1)
    return v6;
  v12 = *(_QWORD *)(a4 + 128);
  v11 = *(std::__shared_weak_count **)(a4 + 136);
  v41 = v12;
  v42 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v6 = v12 != 0;
  if (v12)
  {
    memset(v40, 0, sizeof(v40));
    memset(v39, 0, sizeof(v39));
    v15 = *(_OWORD *)(v12 + 172);
    v38[0] = *(_OWORD *)(v12 + 156);
    v38[1] = v15;
    v16 = *(_OWORD *)(v12 + 204);
    v17 = *(_DWORD *)(a3 + 40);
    v38[2] = *(_OWORD *)(v12 + 188);
    v38[3] = v16;
    if ((v17 - 1) > 6)
      v18 = 0;
    else
      v18 = dword_1A18D52A4[v17 - 1];
    v37 = v18;
    valuePtr = *(_DWORD *)(v12 + 24);
    if (*(_BYTE *)(v12 + 240))
    {
      v19 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Ambiguous");
      v19 = startswith(a6, (unsigned __int8 *)__p);
      if (v35 < 0)
        operator delete(__p[0]);
      v17 = *(_DWORD *)(a3 + 40);
    }
    NL::DatePeriod::resolveDateComponents((NL::DatePeriod *)v12, (NL::DateComponents *)v40, (NL::DateComponents *)v39, v17, v19);
    if (*(_BYTE *)(a3 + 39))
    {
      valuePtr = 42;
      v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
      __p[0] = v20;
      if (v20)
      {
        CFAttributedStringSetAttribute(a2, *(CFRange *)(a3 + 16), CFSTR("kNLDateType"), v20);
        CFRelease(v20);
      }
      goto LABEL_45;
    }
    v21 = (NL::DateFormatter *)(a1 + 104);
    v22 = NL::DateFormatter::copyDisplayForDate((__CFDateFormatter **)(a1 + 104), (const NL::DatePeriod *)v12, *(_DWORD *)(a3 + 40), v19);
    __p[0] = v22;
    if (v22)
      CFAttributedStringSetAttribute(a2, *(CFRange *)(a3 + 16), CFSTR("kNLDisplayDate"), v22);
    value = NL::DateFormatter::copyComponentsForDateComponents(v21, (const NL::DateComponents *)v40);
    v23 = NL::DateFormatter::copyComponentsForDateComponents(v21, (const NL::DateComponents *)v38);
    if ((unint64_t)value | (unint64_t)v23)
    {
      v24 = NL::DateFormatter::copyComponentsForDateComponents(v21, (const NL::DateComponents *)v39);
    }
    else
    {
      v25 = NL::DateFormatter::copyComponentsForDateComponents(v21, (const NL::DateComponents *)v39);
      nlp::CFScopedPtr<__CFDictionary const*>::reset(&value, v25);
      v24 = 0;
    }
    if (value)
    {
      v26 = *(CFRange *)(a3 + 16);
      if (v24 && !v23)
      {
        CFAttributedStringSetAttribute(a2, v26, CFSTR("kNLStartDateComponents"), value);
LABEL_28:
        CFAttributedStringSetAttribute(a2, *(CFRange *)(a3 + 16), CFSTR("kNLEndDateComponents"), v24);
        goto LABEL_29;
      }
      CFAttributedStringSetAttribute(a2, v26, CFSTR("kNLDateComponents"), value);
      if (v24)
        goto LABEL_28;
    }
LABEL_29:
    if (v23)
      CFAttributedStringSetAttribute(a2, *(CFRange *)(a3 + 16), CFSTR("kNLFrequencyDateComponents"), v23);
    v27 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v28 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    if (v28)
      CFAttributedStringSetAttribute(a2, *(CFRange *)(a3 + 16), CFSTR("kNLDateType"), v28);
    v29 = CFNumberCreate(v27, kCFNumberIntType, &v37);
    if (v29)
    {
      CFAttributedStringSetAttribute(a2, *(CFRange *)(a3 + 16), CFSTR("kNLDateModifier"), v29);
      CFRelease(v29);
    }
    if (v28)
      CFRelease(v28);
    if (v23)
      CFRelease(v23);
    if (v24)
      CFRelease(v24);
    if (value)
      CFRelease(value);
    if (v22)
      CFRelease(v22);
  }
LABEL_45:
  if (v11)
  {
    v30 = (unint64_t *)&v11->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v6;
}

void sub_1A18C9348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, const void *a12, const void *a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  nlp::CFScopedPtr<__CFNumber const*>::reset(&a10, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset(&a11, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(&a12, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(&a13, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(&a14, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&__p, 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v20 - 96);
  _Unwind_Resume(a1);
}

const __CFArray *NL::ParseFormatter::updateCurrentParsesForAttributeWithEntity(NL::ParseFormatter *this, __CFArray *a2, const NL::ParseAttribute *a3, const NL::Entity *a4)
{
  const __CFArray *v4;
  const __CFAllocator *v8;
  const __CFArray *Mutable;
  CFIndex Count;
  CFIndex i;
  const __CFAttributedString *ValueAtIndex;
  _QWORD v14[9];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  CFTypeRef cf;
  const __CFArray *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  CFRange v26;
  CFRange v27;

  v4 = a2;
  if (a2)
  {
    v22 = 0;
    v23 = &v22;
    v24 = 0x2000000000;
    v25 = 0;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v21 = Mutable;
    Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        v15 = 0;
        v16 = &v15;
        v17 = 0x3002000000;
        v18 = __Block_byref_object_copy__18;
        v19 = __Block_byref_object_dispose__18;
        ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v4, i);
        cf = CFAttributedStringCreateMutableCopy(v8, 0, ValueAtIndex);
        v14[0] = MEMORY[0x1E0C809B0];
        v14[1] = 0x40000000;
        v14[2] = ___ZN2NL14ParseFormatter41updateCurrentParsesForAttributeWithEntityEP9__CFArrayRKNS_14ParseAttributeERKNS_6EntityE_block_invoke;
        v14[3] = &unk_1E45CF6E8;
        v14[4] = &v22;
        v14[5] = &v15;
        v14[6] = this;
        v14[7] = a3;
        v14[8] = a4;
        NL::ParseAttribute::enumerateParseNamesWithType((uint64_t)a3, (uint64_t)v14);
        v26.length = CFArrayGetCount(Mutable);
        v26.location = 0;
        if (!CFArrayContainsValue(Mutable, v26, (const void *)v16[5]))
          CFArrayAppendValue(Mutable, (const void *)v16[5]);
        _Block_object_dispose(&v15, 8);
        if (cf)
          CFRelease(cf);
      }
    }
    CFArrayRemoveAllValues(v4);
    v27.length = CFArrayGetCount(Mutable);
    v27.location = 0;
    CFArrayAppendArray(v4, Mutable, v27);
    v4 = (const __CFArray *)(*((_BYTE *)v23 + 24) != 0);
    if (Mutable)
      CFRelease(Mutable);
    _Block_object_dispose(&v22, 8);
  }
  return v4;
}

void sub_1A18C960C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  nlp::CFScopedPtr<__CFAttributedString *>::reset((const void **)(a1 + 40), 0);
}

BOOL ___ZN2NL14ParseFormatter41updateCurrentParsesForAttributeWithEntityEP9__CFArrayRKNS_14ParseAttributeERKNS_6EntityE_block_invoke(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;

  result = NL::ParseFormatter::updateAttributedParseForAttributeWithEntity(a1[6], *(__CFAttributedString **)(*(_QWORD *)(a1[5] + 8) + 40), a1[7], a1[8], a5, a3);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

uint64_t NL::ParseFormatter::copyParseResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v6;
  const __CFAllocator *v7;
  CFStringRef Copy;
  const CFArrayCallBacks *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFMutableAttributedStringRef v26;
  _QWORD *v27;
  __CFArray *v28;
  const __CFArray *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  __CFArray *v32;
  const __CFArray *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __CFDictionary *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[10];
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  CFTypeRef cf;
  _QWORD v51[5];
  CFTypeRef v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  void (*v57)(uint64_t);
  CFMutableArrayRef v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  void (*v63)(uint64_t);
  CFMutableArrayRef Mutable;
  CFRange v65;
  CFRange v66;
  CFRange v67;

  NL::ParseFormatter::reset((const void **)a1);
  v40 = a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 16) == *(_QWORD *)(*(_QWORD *)a2 + 8))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a3);
  v6 = *(const __CFString **)(*(_QWORD *)(a1 + 24) + 104);
  if (!v6)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a3);
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(a1 + 40), Copy);
  v59 = 0;
  v60 = &v59;
  v61 = 0x3002000000;
  v62 = __Block_byref_object_copy__33;
  v63 = __Block_byref_object_dispose__34;
  v9 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
  v53 = 0;
  v54 = &v53;
  v55 = 0x3002000000;
  v56 = __Block_byref_object_copy__33;
  v57 = __Block_byref_object_dispose__34;
  v58 = CFArrayCreateMutable(v7, 0, v9);
  v51[0] = 0;
  v51[1] = v51;
  v51[2] = 0x3002000000;
  v51[3] = __Block_byref_object_copy__33;
  v51[4] = __Block_byref_object_dispose__34;
  v52 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
  cf = 0;
  v46 = 0;
  v47 = &v46;
  v48 = 0x2000000000;
  v49 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)a2 + 16) - *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (v10 >= 1)
  {
    v11 = 0;
    v12 = (unint64_t)v10 >> 4;
    if (v12 <= 1)
      v12 = 1;
    v39 = v12;
    do
    {
      v41 = v11;
      v13 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)v40 + 8) + 16 * v11);
      v45 = v13;
      if (*((_QWORD *)&v13 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = *(_QWORD *)(v13 + 48) - *(_QWORD *)(v13 + 40);
      if (v16)
      {
        if (*((_BYTE *)v47 + 24))
        {
          v17 = 2;
        }
        else
        {
          if (v16 >= 1)
          {
            v18 = 0;
            v19 = v16 >> 4;
            if (v19 <= 1)
              v19 = 1;
            v42 = v19;
            do
            {
              v20 = *(_OWORD *)(*(_QWORD *)(v45 + 40) + 16 * v18);
              v44 = v20;
              v21 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
              if (*((_QWORD *)&v20 + 1))
              {
                v22 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
                do
                  v23 = __ldxr(v22);
                while (__stxr(v23 + 1, v22));
              }
              v25 = *(_QWORD *)v20;
              v24 = *(_QWORD *)(v20 + 8);
              while (v25 != v24)
              {
                if (*(_BYTE *)(*(_QWORD *)v25 + 36))
                {
                  if (!CFArrayGetCount((CFArrayRef)v60[5]))
                  {
                    v26 = CFAttributedStringCreateMutable(v7, 0);
                    if (cf)
                      CFRelease(cf);
                    cf = v26;
                    v65.length = CFAttributedStringGetLength(v26);
                    v65.location = 0;
                    CFAttributedStringReplaceString(v26, v65, *(CFStringRef *)(a1 + 40));
                    CFArrayAppendValue((CFMutableArrayRef)v60[5], v26);
                  }
                  v27 = *(_QWORD **)v25;
                  v43[0] = MEMORY[0x1E0C809B0];
                  v43[1] = 0x40000000;
                  v43[2] = ___ZN2NL14ParseFormatter15copyParseResultENSt3__110shared_ptrINS_12ParseIntentsEEEj_block_invoke;
                  v43[3] = &unk_1E45D0848;
                  v43[4] = v51;
                  v43[5] = &v59;
                  v43[8] = a1;
                  v43[9] = v25;
                  v43[6] = &v46;
                  v43[7] = &v53;
                  NL::ParseAttribute::enumerateEntities(v27, (uint64_t)v43);
                }
                v25 += 16;
              }
              if (CFArrayGetCount((CFArrayRef)v54[5]))
              {
                CFArrayRemoveAllValues((CFMutableArrayRef)v60[5]);
                v28 = (__CFArray *)v60[5];
                v29 = (const __CFArray *)v54[5];
                v66.length = CFArrayGetCount(v29);
                v66.location = 0;
                CFArrayAppendArray(v28, v29, v66);
                CFArrayRemoveAllValues((CFMutableArrayRef)v54[5]);
              }
              if (v21)
              {
                p_shared_owners = (unint64_t *)&v21->__shared_owners_;
                do
                  v31 = __ldaxr(p_shared_owners);
                while (__stlxr(v31 - 1, p_shared_owners));
                if (!v31)
                {
                  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                  std::__shared_weak_count::__release_weak(v21);
                }
              }
              ++v18;
            }
            while (v18 != v42);
          }
          if (CFArrayGetCount((CFArrayRef)v60[5]))
          {
            v32 = *(__CFArray **)(a1 + 64);
            if (v32)
            {
              v33 = (const __CFArray *)v60[5];
              v67.length = CFArrayGetCount(v33);
              v67.location = 0;
              CFArrayAppendArray(v32, v33, v67);
            }
          }
          v17 = 0;
        }
      }
      else
      {
        v17 = 4;
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
      if (*((_QWORD *)&v45 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if ((v17 | 4) != 4)
        break;
      v11 = v41 + 1;
    }
    while (v41 + 1 != v39);
  }
  v37 = NL::ParseFormatter::copyFormattedResult((NL::ParseFormatter *)a1, a3);
  _Block_object_dispose(&v46, 8);
  if (cf)
    CFRelease(cf);
  _Block_object_dispose(v51, 8);
  if (v52)
    CFRelease(v52);
  _Block_object_dispose(&v53, 8);
  if (v58)
    CFRelease(v58);
  _Block_object_dispose(&v59, 8);
  if (Mutable)
    CFRelease(Mutable);
  return (uint64_t)v37;
}

void sub_1A18C9BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,const void *a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,const void *a41)
{
  uint64_t v41;

  _Block_object_dispose(&a31, 8);
  nlp::CFScopedPtr<__CFAttributedString *>::reset(&a35, 0);
  _Block_object_dispose(&a36, 8);
  nlp::CFScopedPtr<__CFArray *>::reset(&a41, 0);
  _Block_object_dispose((const void *)(v41 - 200), 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v41 - 160), 0);
  _Block_object_dispose((const void *)(v41 - 152), 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v41 - 112), 0);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 40), 0);
}

void ___ZN2NL14ParseFormatter15copyParseResultENSt3__110shared_ptrINS_12ParseIntentsEEEj_block_invoke(uint64_t a1, const NL::Entity *a2)
{
  NL::ParseFormatter *v4;
  __CFArray *v5;
  const __CFArray *v6;
  __CFArray *v7;
  const __CFArray *v8;
  CFRange v9;
  CFRange v10;

  v4 = *(NL::ParseFormatter **)(a1 + 64);
  v5 = *(__CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v6 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v9.length = CFArrayGetCount(v6);
  v9.location = 0;
  CFArrayAppendArray(v5, v6, v9);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = NL::ParseFormatter::updateCurrentParsesForAttributeWithEntity(v4, *(__CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)+ 40), **(const NL::ParseAttribute ***)(a1 + 72), a2);
  *((_DWORD *)v4 + 12) = 3;
  v7 = *(__CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  v8 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v10.length = CFArrayGetCount(v8);
  v10.location = 0;
  CFArrayAppendArray(v7, v8, v10);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

__CFDictionary *NL::ParseFormatter::copyDefaultParseResult(const void **this, char a2)
{
  CFStringRef *v4;
  CFStringRef Copy;

  NL::ParseFormatter::reset(this);
  v4 = (CFStringRef *)this[3];
  if (v4)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4[13]);
  else
    Copy = &stru_1E45D0A48;
  nlp::CFScopedPtr<__CFString const*>::reset(this + 5, Copy);
  return NL::ParseFormatter::copyFormattedResult((NL::ParseFormatter *)this, a2);
}

void nlp::CFScopedPtr<__CFAttributedString const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void NLHindiCharLanguageModeler::NLHindiCharLanguageModeler(NLHindiCharLanguageModeler *this, CFDictionaryRef theDict)
{
  uint64_t *v2;
  __CFDictionary *MutableCopy;
  __CFDictionary *v4;
  __CFBundle *BundleWithIdentifier;
  __CFBundle *v6;
  uint64_t v7;

  *((_QWORD *)this + 1) = 0;
  v2 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = &off_1E45CDE50;
  *((_QWORD *)this + 2) = 0;
  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0D434C8], CFSTR("hi"));
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.NLP"));
  if (v4)
  {
    if (BundleWithIdentifier)
    {
      BundleWithIdentifier = CFBundleCopyResourcesDirectoryURL(BundleWithIdentifier);
      v6 = BundleWithIdentifier;
      if (BundleWithIdentifier)
      {
        CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43478], BundleWithIdentifier);
        *v2 = LMLanguageModelCreate();
        CFRelease(v6);
      }
    }
  }
  if (!*v2)
  {
    v7 = NL::CFLogger::sharedInstance(BundleWithIdentifier);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v7 + 16))(v7, 3, "Could not locate Hindi character language model");
  }
  if (v4)
    CFRelease(v4);
}

void sub_1A18C9F00(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler *v1;

  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

double NLHindiCharLanguageModeler::logProbability(uint64_t a1)
{
  double result;

  if (!*(_QWORD *)(a1 + 8))
    return -INFINITY;
  LMLanguageModelJointProbability();
  return result;
}

double NLHindiCharLanguageModeler::logProbability(uint64_t a1, uint64_t *a2)
{
  double v3;
  double v4;
  void *__p[3];

  stringToUTF32Characters(a2, (int **)__p);
  if (*(_QWORD *)(a1 + 8))
  {
    LMLanguageModelJointProbability();
    v4 = v3;
  }
  else
  {
    v4 = -INFINITY;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1A18C9FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NLHindiCharLanguageModeler::~NLHindiCharLanguageModeler(NLHindiCharLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);
  JUMPOUT(0x1A1B0E068);
}

BOOL nlp::BurstTrieAdd(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v5;
  int v6;
  int v7;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  const void *v18;
  unsigned int v19;
  size_t v20;
  unint64_t v21;
  int v22;
  unsigned __int16 *v23;

  if (*(_QWORD *)(a1 + 2080) || (*(_BYTE *)(a1 + 2064) & 1) != 0)
    return 0;
  v5 = 0;
  v22 = 0;
  v6 = a3 - 1;
  if ((a3 - 1) <= 0x3FE)
  {
    v7 = a4;
    if ((_DWORD)a4)
    {
      v9 = 0;
      v10 = (int *)a1;
      while (1)
      {
        v11 = *(_QWORD *)&v10[2 * *(unsigned __int8 *)(a2 + v9) + 1];
        if ((v11 & 3) != 1)
          break;
        v10 = (int *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (a3 == ++v9)
        {
          v12 = *v10;
          *v10 = a4;
          if (!v12)
            goto LABEL_17;
LABEL_18:
          v5 = 1;
          return v5 != 0;
        }
      }
      if ((v11 & 3) != 2)
      {
        v17 = (unsigned __int8 *)(a2 + v9);
        v18 = (const void *)(a2 + v9 + 1);
        v19 = v6 - v9;
        v20 = (v6 - v9);
        v21 = (unint64_t)malloc_type_calloc(1uLL, v20 + 15, 0xA9B8A391uLL);
        memcpy((void *)(v21 + 14), v18, v20);
        *(_BYTE *)(v21 + 14 + v19) = 0;
        *(_WORD *)(v21 + 12) = v19;
        *(_DWORD *)(v21 + 8) = v7;
        *(_QWORD *)v21 = 0;
        *(_QWORD *)&v10[2 * *v17 + 1] = v21 | 2;
        goto LABEL_17;
      }
      v23 = (unsigned __int16 *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      v14 = nlp::addListNode(a1, &v23, a2, a3, (int)v9 + 1, a4, &v22);
      v15 = (unint64_t)v23;
      if (v14 >= *(_DWORD *)(a1 + 2088))
      {
        v15 = (unint64_t)nlp::burstLevel(a1, v23, &v22);
        v16 = 1;
      }
      else
      {
        v16 = 2;
      }
      v5 = v22;
      *(_QWORD *)&v10[2 * *(unsigned __int8 *)(a2 + v9) + 1] = v16 | v15;
      if (v5 == 2)
      {
LABEL_17:
        ++*(_DWORD *)(a1 + 2060);
        goto LABEL_18;
      }
    }
  }
  return v5 != 0;
}

uint64_t nlp::TrieCompletionGetCompletion(uint64_t a1)
{
  if (a1)
    return a1 + 20;
  else
    return 0;
}

uint64_t nlp::TrieCompletionGetLength(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 16);
  return result;
}

BOOL nlp::BurstTrieAddWithScore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  _BOOL8 result;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 2080) || (*(_BYTE *)(a1 + 2064) & 1) == 0)
    return 0;
  result = 0;
  v18 = 0;
  if ((a3 - 1) <= 0x3FE && (_DWORD)a4)
  {
    v17 = 0;
    std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v19, a6);
    nlp::addLevelRanked((unsigned __int16 *)a1, a1, a2, a3, 0, a4, (float *)&v17, &v18, a7, a5, (uint64_t)v19);
    v14 = v20;
    if (v20 == v19)
    {
      v15 = 4;
      v14 = v19;
    }
    else
    {
      if (!v20)
      {
LABEL_12:
        v16 = v18;
        if (v18 == 2)
          ++*(_DWORD *)(a1 + 2060);
        return v16 != 0;
      }
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
    goto LABEL_12;
  }
  return result;
}

void sub_1A18CA300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

float nlp::TrieCompletionGetScore(uint64_t a1)
{
  if (a1)
    return *(float *)a1;
  else
    return 0.0;
}

double nlp::BurstTrieCreateMutable(nlp *this)
{
  return nlp::BurstTrieCreateMutableWithOptions(64, 0);
}

double nlp::BurstTrieCreateMutableWithOptions(int a1, int a2)
{
  char *v4;
  double result;

  v4 = (char *)malloc_type_calloc(1uLL, 0x838uLL, 0x105004014637929uLL);
  if (v4)
  {
    result = 0.0;
    *(_OWORD *)(v4 + 2060) = 0u;
    *((_DWORD *)v4 + 519) = 1;
    *((_QWORD *)v4 + 260) = 0;
    *(_QWORD *)(v4 + 2092) = 0x200000000;
    *((_DWORD *)v4 + 516) = a2;
    *((_DWORD *)v4 + 522) = a1;
  }
  return result;
}

char *nlp::burstTrieCreateWithBytes(char *this, const char *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  int v6;

  if (this)
  {
    v2 = this;
    if (*(_DWORD *)this == 12648430 || *(_DWORD *)this == -900339842)
    {
      v4 = (int)a2;
      this = (char *)malloc_type_calloc(1uLL, 0x838uLL, 0x105004014637929uLL);
      *((_QWORD *)this + 260) = v2;
      v5 = v2[3];
      *(_QWORD *)(this + 2068) = v2[2];
      *((_DWORD *)this + 515) = v5;
      v6 = v2[4];
      *((_DWORD *)this + 516) = v6;
      if (*v2 == -900339842)
        *((_DWORD *)this + 516) = v6 | 1;
      *((_DWORD *)this + 522) = v2[5];
      *((_DWORD *)this + 523) = v4;
      *((_DWORD *)this + 524) = 2;
      *((_DWORD *)this + 519) = 1;
    }
    else
    {
      return 0;
    }
  }
  return this;
}

void nlp::BurstTrieRelease(char *a1)
{
  int v2;
  void *v3;

  if (a1)
  {
    v2 = *((_DWORD *)a1 + 519) - 1;
    *((_DWORD *)a1 + 519) = v2;
    if (!v2)
    {
      v3 = (void *)*((_QWORD *)a1 + 260);
      if (v3)
      {
        if (*((_DWORD *)a1 + 523))
          munmap(v3, *(_QWORD *)(a1 + 2068));
      }
      else if ((a1[2064] & 1) != 0)
      {
        nlp::finishLevel<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>((uint64_t)a1);
      }
      else
      {
        nlp::finishLevel<nlp::_TrieLevel *,nlp::_ListNode *>((uint64_t)a1);
      }
      free(a1);
    }
  }
}

char *nlp::BurstTrieCreateWithBytes(nlp *this, const char *a2)
{
  return nlp::burstTrieCreateWithBytes((char *)this, 0);
}

uint64_t nlp::BurstTrieGetCount(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 2060);
  return result;
}

void nlp::BurstTrieSearch(nlp *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  nlp *CursorWithBytes;
  nlp *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if ((a6 & 0x80000000) == 0)
  {
    CursorWithBytes = (nlp *)nlp::BurstTrieCreateCursorWithBytes((uint64_t)a1, a2, a3);
    if (!CursorWithBytes)
      return;
    v12 = CursorWithBytes;
    v13 = operator new(0x20uLL);
    *v13 = &off_1E45CE780;
    v13[1] = a2;
    *((_DWORD *)v13 + 4) = a3;
    v13[3] = a5;
    v19 = v13;
    nlp::BurstTrieTraverseFromCursor(v12, 0, (uint64_t)v18, a6);
    v14 = v19;
    if (v19 == v18)
    {
      v15 = 4;
      v14 = v18;
    }
    else
    {
      if (!v19)
      {
LABEL_11:
        free(v12);
        return;
      }
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
    goto LABEL_11;
  }
  v20 = 0xFFFFFFFF00000003;
  v21 = 0;
  v22 = a4;
  v16 = v23;
  std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v23, a5);
  nlp::searchWithContext(a1, a2, a3, 0, (uint64_t)&v20);
  if (v24 == v23)
  {
    v17 = 4;
  }
  else
  {
    if (!v24)
      return;
    v17 = 5;
    v16 = v24;
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v17))(v16);
}

void sub_1A18CA690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;

  v20 = v19;
  if (a19 == v20)
  {
    v22 = v20;
    v23 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
    v22 = a19;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unsigned __int16 *nlp::addLevelRanked(unsigned __int16 *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, float *a7, int *a8, float a9, uint64_t a10, uint64_t a11)
{
  float v13;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int16 *v32;
  _BYTE v33[24];
  unsigned __int16 *v34;
  _BYTE v35[24];
  unsigned __int16 *v36;
  uint64_t v37;

  v13 = a9;
  v37 = *MEMORY[0x1E0C80C00];
  if (a5 >= a4)
  {
    *a8 = 2;
    if (*(_DWORD *)(a2 + 8))
    {
      *a8 = 1;
      if (*(_QWORD *)(a11 + 24))
      {
        result = (unsigned __int16 *)std::function<float ()(void *,float,float)>::operator()(a11, a10, *(float *)(a2 + 4), a9);
        v13 = v22;
      }
    }
    *(float *)(a2 + 4) = v13;
    *(_DWORD *)(a2 + 8) = a6;
    *a7 = v13;
    goto LABEL_24;
  }
  v19 = (uint64_t)result;
  v31 = (unsigned __int8 *)(a3 + a5);
  v20 = *(_QWORD *)(a2 + 8 * *v31 + 12);
  if ((v20 & 3) == 2)
  {
    v32 = (unsigned __int16 *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
    std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v33, a11);
    v23 = nlp::addListNodeRanked(v19, (uint64_t **)&v32, a3, a4, a5 + 1, a6, a7, a8, v13, a10, (uint64_t)v33);
    result = v34;
    if (v34 == (unsigned __int16 *)v33)
    {
      v24 = 4;
      result = (unsigned __int16 *)v33;
    }
    else
    {
      if (!v34)
      {
LABEL_19:
        v29 = v32;
        if (v23 >= *(_DWORD *)(v19 + 2088))
        {
          result = (unsigned __int16 *)nlp::burstLevelRanked(v19, v32, a7, a8);
          v29 = result;
          v30 = 1;
        }
        else
        {
          v30 = 2;
        }
        v28 = v30 | (unint64_t)v29;
        v25 = v31;
        goto LABEL_23;
      }
      v24 = 5;
    }
    result = (unsigned __int16 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v24))();
    goto LABEL_19;
  }
  if ((v20 & 3) != 1)
  {
    *a7 = a9;
    v25 = (unsigned __int8 *)(a3 + a5);
    v26 = ~a5 + a4;
    v27 = (unint64_t)malloc_type_calloc(1uLL, v26 + 23, 0x55E7E753uLL);
    result = (unsigned __int16 *)memcpy((void *)(v27 + 22), v31 + 1, v26);
    *(_BYTE *)(v27 + 22 + v26) = 0;
    *(_WORD *)(v27 + 20) = v26;
    *(_DWORD *)(v27 + 16) = a6;
    *(float *)(v27 + 8) = v13;
    *(float *)(v27 + 12) = v13;
    *(_QWORD *)v27 = 0;
    v28 = v27 | 2;
    *a8 = 2;
LABEL_23:
    *(_QWORD *)(a2 + 8 * *v25 + 12) = v28;
    goto LABEL_24;
  }
  std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v35, a11);
  nlp::addLevelRanked(v19, v20 & 0xFFFFFFFFFFFFFFFCLL, a3, a4, a5 + 1, a6, a7, a8, v13, a10, v35);
  result = v36;
  if (v36 == (unsigned __int16 *)v35)
  {
    v21 = 4;
    result = (unsigned __int16 *)v35;
  }
  else
  {
    if (!v36)
      goto LABEL_24;
    v21 = 5;
  }
  result = (unsigned __int16 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v21))();
LABEL_24:
  if (*a7 > *(float *)a2)
    *(float *)a2 = *a7;
  return result;
}

void sub_1A18CA9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v22;
  uint64_t v23;

  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t nlp::BurstTrieRemove(_DWORD *a1, char *a2, int a3)
{
  uint64_t result;
  char *v5;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  int v40;
  uint64_t *v41;
  size_t v42;
  uint64_t v43;
  uint64_t *v44;
  size_t v45;
  char *v46;
  int v47;
  uint64_t *v48;
  size_t v49;
  uint64_t v50;
  uint64_t *v51;
  size_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  nlp *v62;
  uint64_t (***v63)();
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  nlp *v69;
  uint64_t (***v70)();
  uint64_t v71;
  unint64_t v72;
  nlp *v73;
  uint64_t (***v74)();
  uint64_t v75;
  uint64_t v76;
  nlp *v77;
  uint64_t (***v78)();
  uint64_t v79;
  nlp *v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  size_t v89;
  const void *v90;
  uint64_t v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  nlp *v97;
  _BYTE *v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  size_t v106;
  const void *v107;
  uint64_t v108;
  float v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t *__p;
  char *v115;
  unint64_t *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  void **v122;
  _BYTE v123[24];
  _BYTE *v124;
  uint64_t (**v125)();
  uint64_t *v126;
  uint64_t (***v127)();
  uint64_t (**v128)();
  unsigned int *v129;
  uint64_t (***v130)();
  uint64_t v131;

  result = 0;
  v131 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return result;
  v5 = a2;
  if (!a2 || !a3)
    return result;
  if ((a1[516] & 1) != 0)
  {
    v23 = (unint64_t *)operator new(8uLL);
    v24 = 0;
    *v23 = (unint64_t)a1;
    v25 = v23 + 1;
    v117 = (char *)(v23 + 1);
    __p = v23;
    v116 = v23 + 1;
    v26 = (unint64_t)a1;
    while (1)
    {
      v27 = v26 + 8 * v5[v24];
      v30 = *(_QWORD *)(v27 + 12);
      v29 = (uint64_t *)(v27 + 12);
      v28 = v30;
      v31 = v30 & 3;
      if ((v30 & 3) == 0)
        goto LABEL_62;
      if (v31 == 2)
        break;
      v26 = v28 & 0xFFFFFFFFFFFFFFFCLL;
      if (v25 >= (unint64_t *)v117)
      {
        v32 = v25 - __p;
        if ((unint64_t)(v32 + 1) >> 61)
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        v33 = (v117 - (char *)__p) >> 2;
        if (v33 <= v32 + 1)
          v33 = v32 + 1;
        if ((unint64_t)(v117 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v33;
        if (v34)
          v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v117, v34);
        else
          v35 = 0;
        v36 = (unint64_t *)&v35[8 * v32];
        *v36 = v26;
        v25 = v36 + 1;
        v37 = v116;
        if (v116 != __p)
        {
          do
          {
            v38 = *--v37;
            *--v36 = v38;
          }
          while (v37 != __p);
          v37 = __p;
        }
        __p = v36;
        v117 = &v35[8 * v34];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *v25++ = v26;
      }
      v116 = v25;
      if (++v24 == a3)
      {
        if (!*(_DWORD *)(v26 + 8))
          goto LABEL_62;
        *(_DWORD *)(v26 + 8) = 0;
        goto LABEL_84;
      }
    }
    v46 = &v5[v24 + 1];
    v47 = ~(_DWORD)v24 + a3;
    v48 = (uint64_t *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
    v49 = *(unsigned __int16 *)((v28 & 0xFFFFFFFFFFFFFFFCLL) + 20);
    if (v47 == (_DWORD)v49 && !memcmp(v46, (char *)v48 + 22, v49))
    {
      v56 = *v48;
      free(v48);
      v57 = v56 | 2;
      if (!v56)
        v57 = 0;
      *v29 = v57;
    }
    else
    {
      v50 = *v48;
      if (!*v48)
        goto LABEL_62;
      while (1)
      {
        v51 = (uint64_t *)v50;
        v52 = *(unsigned __int16 *)(v50 + 20);
        if (v47 == (_DWORD)v52 && !memcmp(v46, (const void *)(v50 + 22), v52))
          break;
        v50 = *v51;
        v48 = v51;
        if (!*v51)
          goto LABEL_62;
      }
      *v48 = *v51;
      free(v51);
    }
LABEL_84:
    if ((unint64_t)((char *)v116 - (char *)__p) < 0x10)
      goto LABEL_159;
    v65 = v116 - __p;
    v121 = 0;
    v66 = v65 - 1;
    if (v65 == 1)
      goto LABEL_159;
    LOBYTE(v67) = 0;
    v68 = a1[522];
    while (1)
    {
      v69 = (nlp *)nlp::burstTrieCreateCursorWithTrieLevelRef<nlp::_RankedTrieLevel *>((uint64_t)a1, __p[v66]);
      v121 = 0;
      v128 = &off_1E45CE8E0;
      v129 = &v121;
      v130 = &v128;
      nlp::BurstTrieTraverseFromCursor(v69, 0, (uint64_t)&v128, -1);
      v70 = v130;
      if (v130 == &v128)
      {
        v70 = &v128;
        v71 = 4;
      }
      else
      {
        if (!v130)
          goto LABEL_92;
        v71 = 5;
      }
      (*v70)[v71]();
LABEL_92:
      if (v69)
        free(v69);
      if (v121 >= v68)
      {
        if ((v67 & 1) == 0)
          goto LABEL_159;
        v67 = v66 + 1;
LABEL_104:
        v118 = 0;
        v119 = 0;
        v120 = 0;
        std::vector<std::tuple<std::string,unsigned int,float>>::reserve(&v118, v68);
        v76 = __p[v67];
        v77 = (nlp *)nlp::burstTrieCreateCursorWithTrieLevelRef<nlp::_RankedTrieLevel *>((uint64_t)a1, v76);
        v125 = &off_1E45CE888;
        v126 = &v118;
        v127 = &v125;
        nlp::BurstTrieTraverseFromCursor(v77, 0, (uint64_t)&v125, -1);
        v78 = v127;
        if (v127 == &v125)
        {
          v79 = 4;
          v78 = &v125;
LABEL_134:
          (*v78)[v79]();
        }
        else if (v127)
        {
          v79 = 5;
          goto LABEL_134;
        }
        if (v68 <= (v119 - v118) >> 5)
          __assert_rtn("reverseBurst", "BurstTrie.cpp", 964, "items.size() < sizeThreshold");
        if (v77)
          free(v77);
        nlp::finishLevel<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(v76);
        a1[515] -= (unint64_t)(v119 - v118) >> 5;
        *(_QWORD *)(__p[v66] + 8 * v5[v66] + 12) = 0;
        if ((a3 + 1) < (unint64_t)(v116 - __p))
          __assert_rtn("reverseBurst", "BurstTrie.cpp", 973, "levels.size() <= keyLen + 1");
        v98 = nlp::sharedBuffer(v97);
        v99 = (uint64_t)v98;
        if (v67)
        {
          v100 = v98;
          v101 = v67;
          do
          {
            v102 = *v5++;
            *v100++ = v102;
            --v101;
          }
          while (v101);
        }
        v103 = v118;
        v104 = v119;
        if (v118 == v119)
          goto LABEL_158;
        v105 = a1[516];
        while (2)
        {
          if (*(char *)(v103 + 23) < 0)
          {
            v107 = *(const void **)v103;
            v106 = *(_QWORD *)(v103 + 8);
          }
          else
          {
            v106 = *(unsigned __int8 *)(v103 + 23);
            v107 = (const void *)v103;
          }
          v108 = *(unsigned int *)(v103 + 24);
          v109 = *(float *)(v103 + 28);
          memcpy((void *)(v99 + v67), v107, v106);
          if (*(char *)(v103 + 23) < 0)
            v110 = *(_QWORD *)(v103 + 8);
          else
            LODWORD(v110) = *(unsigned __int8 *)(v103 + 23);
          v111 = (v110 + v67);
          if ((v105 & 1) == 0)
          {
            nlp::BurstTrieAdd((uint64_t)a1, v99, v111, v108);
            goto LABEL_157;
          }
          v124 = 0;
          nlp::BurstTrieAddWithScore((uint64_t)a1, v99, v111, v108, 0, (uint64_t)v123, v109);
          v112 = v124;
          if (v124 == v123)
          {
            v112 = v123;
            v113 = 4;
LABEL_156:
            (*(void (**)(void))(*v112 + 8 * v113))();
          }
          else if (v124)
          {
            v113 = 5;
            goto LABEL_156;
          }
LABEL_157:
          v103 += 32;
          if (v103 == v104)
            goto LABEL_158;
          continue;
        }
      }
      v67 = 1;
      if (!--v66)
        goto LABEL_104;
    }
  }
  v7 = operator new(8uLL);
  v8 = 0;
  *v7 = a1;
  v9 = (char *)(v7 + 1);
  v117 = (char *)(v7 + 1);
  __p = v7;
  v115 = (char *)(v7 + 1);
  v10 = a1;
  do
  {
    v11 = &v10[2 * v5[v8]];
    v14 = *(_QWORD *)(v11 + 1);
    v13 = (uint64_t *)(v11 + 1);
    v12 = v14;
    v15 = v14 & 3;
    if ((v14 & 3) == 0)
      goto LABEL_62;
    if (v15 == 2)
    {
      v39 = &v5[v8 + 1];
      v40 = ~(_DWORD)v8 + a3;
      v41 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      v42 = *(unsigned __int16 *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 12);
      if (v40 == (_DWORD)v42 && !memcmp(v39, (char *)v41 + 14, v42))
      {
        v54 = *v41;
        free(v41);
        v55 = v54 | 2;
        if (!v54)
          v55 = 0;
        *v13 = v55;
      }
      else
      {
        v43 = *v41;
        if (!*v41)
          goto LABEL_62;
        while (1)
        {
          v44 = (uint64_t *)v43;
          v45 = *(unsigned __int16 *)(v43 + 12);
          if (v40 == (_DWORD)v45 && !memcmp(v39, (const void *)(v43 + 14), v45))
            break;
          v43 = *v44;
          v41 = v44;
          if (!*v44)
            goto LABEL_62;
        }
        *v41 = *v44;
        free(v44);
      }
LABEL_70:
      if ((unint64_t)(v115 - (char *)__p) < 0x10)
        goto LABEL_159;
      v58 = (v115 - (char *)__p) >> 3;
      v121 = 0;
      v59 = v58 - 1;
      if (v58 == 1)
        goto LABEL_159;
      LOBYTE(v60) = 0;
      v61 = a1[522];
      while (1)
      {
        v62 = (nlp *)nlp::burstTrieCreateCursorWithTrieLevelRef<nlp::_TrieLevel *>((uint64_t)a1, __p[v59]);
        v121 = 0;
        v128 = &off_1E45CE830;
        v129 = &v121;
        v130 = &v128;
        nlp::BurstTrieTraverseFromCursor(v62, 0, (uint64_t)&v128, -1);
        v63 = v130;
        if (v130 == &v128)
        {
          v63 = &v128;
          v64 = 4;
        }
        else
        {
          if (!v130)
            goto LABEL_78;
          v64 = 5;
        }
        (*v63)[v64]();
LABEL_78:
        if (v62)
          free(v62);
        if (v121 >= v61)
        {
          if ((v60 & 1) != 0)
          {
            v60 = v59 + 1;
LABEL_99:
            v118 = 0;
            v119 = 0;
            v120 = 0;
            std::vector<std::tuple<std::string,unsigned int,float>>::reserve(&v118, v61);
            v72 = __p[v60];
            v73 = (nlp *)nlp::burstTrieCreateCursorWithTrieLevelRef<nlp::_TrieLevel *>((uint64_t)a1, v72);
            v125 = &off_1E45CE7D8;
            v126 = &v118;
            v127 = &v125;
            nlp::BurstTrieTraverseFromCursor(v73, 0, (uint64_t)&v125, -1);
            v74 = v127;
            if (v127 == &v125)
            {
              v75 = 4;
              v74 = &v125;
LABEL_108:
              (*v74)[v75]();
            }
            else if (v127)
            {
              v75 = 5;
              goto LABEL_108;
            }
            if (v61 <= (v119 - v118) >> 5)
              __assert_rtn("reverseBurst", "BurstTrie.cpp", 964, "items.size() < sizeThreshold");
            if (v73)
              free(v73);
            nlp::finishLevel<nlp::_TrieLevel *,nlp::_ListNode *>(v72);
            a1[515] -= (unint64_t)(v119 - v118) >> 5;
            *(_QWORD *)(__p[v59] + 8 * v5[v59] + 4) = 0;
            if ((a3 + 1) < (unint64_t)((v115 - (char *)__p) >> 3))
              __assert_rtn("reverseBurst", "BurstTrie.cpp", 973, "levels.size() <= keyLen + 1");
            v81 = nlp::sharedBuffer(v80);
            v82 = (uint64_t)v81;
            if (v60)
            {
              v83 = v81;
              v84 = v60;
              do
              {
                v85 = *v5++;
                *v83++ = v85;
                --v84;
              }
              while (v84);
            }
            v86 = v118;
            v87 = v119;
            if (v118 != v119)
            {
              v88 = a1[516];
              do
              {
                if (*(char *)(v86 + 23) < 0)
                {
                  v90 = *(const void **)v86;
                  v89 = *(_QWORD *)(v86 + 8);
                }
                else
                {
                  v89 = *(unsigned __int8 *)(v86 + 23);
                  v90 = (const void *)v86;
                }
                v91 = *(unsigned int *)(v86 + 24);
                v92 = *(float *)(v86 + 28);
                memcpy((void *)(v82 + v60), v90, v89);
                if (*(char *)(v86 + 23) < 0)
                  v93 = *(_QWORD *)(v86 + 8);
                else
                  LODWORD(v93) = *(unsigned __int8 *)(v86 + 23);
                v94 = (v93 + v60);
                if ((v88 & 1) != 0)
                {
                  v124 = 0;
                  nlp::BurstTrieAddWithScore((uint64_t)a1, v82, v94, v91, 0, (uint64_t)v123, v92);
                  v95 = v124;
                  if (v124 == v123)
                  {
                    v95 = v123;
                    v96 = 4;
                    goto LABEL_130;
                  }
                  if (v124)
                  {
                    v96 = 5;
LABEL_130:
                    (*(void (**)(void))(*v95 + 8 * v96))();
                  }
                }
                else
                {
                  nlp::BurstTrieAdd((uint64_t)a1, v82, v94, v91);
                }
                v86 += 32;
              }
              while (v86 != v87);
            }
LABEL_158:
            v122 = (void **)&v118;
            std::vector<std::tuple<std::string,unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v122);
          }
LABEL_159:
          v53 = 1;
          goto LABEL_160;
        }
        v60 = 1;
        if (!--v59)
          goto LABEL_99;
      }
    }
    v10 = (_DWORD *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9 >= v117)
    {
      v16 = (v9 - (char *)__p) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v17 = (v117 - (char *)__p) >> 2;
      if (v17 <= v16 + 1)
        v17 = v16 + 1;
      if ((unint64_t)(v117 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v117, v18);
      else
        v19 = 0;
      v20 = &v19[8 * v16];
      *(_QWORD *)v20 = v10;
      v9 = v20 + 8;
      v21 = v115;
      if (v115 != (char *)__p)
      {
        do
        {
          v22 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v20 - 1) = v22;
          v20 -= 8;
        }
        while (v21 != (char *)__p);
        v21 = (char *)__p;
      }
      __p = (unint64_t *)v20;
      v117 = &v19[8 * v18];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v9 = v10;
      v9 += 8;
    }
    v115 = v9;
    ++v8;
  }
  while (v8 != a3);
  if (*v10)
  {
    *v10 = 0;
    goto LABEL_70;
  }
LABEL_62:
  v53 = 0;
LABEL_160:
  if (__p)
    operator delete(__p);
  if (!v53)
    return 0;
  --a1[515];
  return 1;
}

void sub_1A18CB418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  a16 = &a12;
  std::vector<std::tuple<std::string,unsigned int,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t nlp::BurstTrieContains(nlp *a1, const void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a3)
    return 0;
  v11 = 0xFFFFFFFF00000000;
  v12 = 0;
  v7 = v14;
  v13 = 0;
  v15 = 0;
  nlp::searchWithContext(a1, a2, a3, 1, (uint64_t)&v11);
  if ((v11 & 0x8000000000000000) != 0)
  {
    v8 = 0;
  }
  else
  {
    if (a4)
      *a4 = HIDWORD(v11);
    if (a5)
      *a5 = v12;
    v8 = 1;
  }
  if (v15 == v14)
  {
    v9 = 4;
    goto LABEL_14;
  }
  if (v15)
  {
    v9 = 5;
    v7 = v15;
LABEL_14:
    (*(void (**)(_QWORD *))(*v7 + 8 * v9))(v7);
  }
  return v8;
}

void sub_1A18CB608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  _QWORD *v15;
  uint64_t v17;

  if (a15 == v15)
  {
    v17 = 4;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
    v15 = a15;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v17))(v15);
LABEL_6:
  _Unwind_Resume(exception_object);
}

nlp *nlp::searchWithContext(nlp *result, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  nlp *v16;
  _QWORD v17[3];
  nlp *v18;
  _QWORD v19[3];
  nlp *v20;
  _QWORD v21[3];
  nlp *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a3 <= 0x3FF)
  {
    v9 = (uint64_t)result;
    v10 = nlp::sharedBuffer(result);
    memcpy(v10, a2, a3);
    *((_BYTE *)v10 + a3) = 0;
    v11 = *(_QWORD *)(v9 + 2080);
    v12 = *(_DWORD *)(v9 + 2064);
    if (v11)
    {
      v13 = (*(_DWORD *)(v11 + 4) & 0xFFFFFFFC) + v11;
      if ((v12 & 1) != 0)
      {
        v21[0] = &off_1E45CE6D0;
        v21[1] = nlp::containsKey;
        v22 = (nlp *)v21;
        nlp::searchDiskLevelRanked(v9, v13, (unsigned __int8 *)v10, a3, 0, a4, a5, (uint64_t)v21);
        result = v22;
        if (v22 == (nlp *)v21)
        {
          v14 = 4;
          result = (nlp *)v21;
          return (nlp *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v14))();
        }
      }
      else
      {
        v19[0] = &off_1E45CE6D0;
        v19[1] = nlp::containsKey;
        v20 = (nlp *)v19;
        nlp::searchDiskLevel(v9, v13, (unsigned __int8 *)v10, a3, 0, a4, a5, (uint64_t)v19);
        result = v20;
        if (v20 == (nlp *)v19)
        {
          v14 = 4;
          result = (nlp *)v19;
          return (nlp *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v14))();
        }
      }
    }
    else if ((v12 & 1) != 0)
    {
      v17[0] = &off_1E45CE6D0;
      v17[1] = nlp::containsKey;
      v18 = (nlp *)v17;
      nlp::searchLevelRanked(v9, (unsigned __int8 *)v10, a3, 0, a4, a5, (uint64_t)v17);
      result = v18;
      if (v18 == (nlp *)v17)
      {
        v14 = 4;
        result = (nlp *)v17;
        return (nlp *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v14))();
      }
    }
    else
    {
      v15[0] = &off_1E45CE6D0;
      v15[1] = nlp::containsKey;
      v16 = (nlp *)v15;
      nlp::searchLevel((int *)v9, (unsigned __int8 *)v10, a3, 0, a4, a5, (uint64_t)v15);
      result = v16;
      if (v16 == (nlp *)v15)
      {
        v14 = 4;
        result = (nlp *)v15;
        return (nlp *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v14))();
      }
    }
    if (!result)
      return result;
    v14 = 5;
    return (nlp *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v14))();
  }
  return result;
}

void sub_1A18CB858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *nlp::BurstTrieCreateCursorWithBytes(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  void *v6;
  int v7;

  v6 = malloc_type_calloc(0x28uLL, 1uLL, 0x82717553uLL);
  nlp::BurstTrieSetCursorWithBytes(a1, (uint64_t)v6, a2, a3);
  if (!v7 && v6)
  {
    free(v6);
    return 0;
  }
  return v6;
}

nlp *nlp::BurstTrieTraverseFromCursor(nlp *result, uint64_t a2, uint64_t a3, int a4)
{
  nlp *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  char v19;
  _BYTE v20[24];
  nlp *v21;
  _BYTE v22[24];
  nlp *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v7 = result;
    result = (nlp *)nlp::sharedBuffer(result);
    v8 = (uint64_t)result;
    v19 = 0;
    v9 = *((_DWORD *)v7 + 7);
    if (v9)
    {
      if (v9 != 1)
        return result;
      v16 = *(_OWORD *)v7;
      v17 = *((_QWORD *)v7 + 2);
      v10 = *((_QWORD *)v7 + 4);
      std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v22, a3);
      nlp::traverseFromCompactMapCursor(v10, (uint64_t)&v16);
      result = v23;
      if (v23 == (nlp *)v22)
      {
        v14 = 4;
        result = (nlp *)v22;
        return (nlp *)(*(uint64_t (**)(nlp *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 8 * v14))(result, v11, v12, v13);
      }
    }
    else
    {
      v16 = *(_OWORD *)v7;
      v17 = *((_QWORD *)v7 + 2);
      v18 = *((_DWORD *)v7 + 6);
      v15 = (_QWORD *)*((_QWORD *)v7 + 4);
      std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v20, a3);
      nlp::traverseFromMapCursor(v15, (uint64_t)&v16, v8, 0, &v19, a4, a2, (uint64_t)v20);
      result = v21;
      if (v21 == (nlp *)v20)
      {
        v14 = 4;
        result = (nlp *)v20;
        return (nlp *)(*(uint64_t (**)(nlp *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 8 * v14))(result, v11, v12, v13);
      }
    }
    if (!result)
      return result;
    v14 = 5;
    return (nlp *)(*(uint64_t (**)(nlp *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 8 * v14))(result, v11, v12, v13);
  }
  return result;
}

void sub_1A18CBACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v9;
  float v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a3;
  v14 = a2;
  v12 = a4;
  v11 = a5;
  v10 = a7;
  v9 = a6;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *, int *, float *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v14, &v13, &v12, &v11, &v10, &v9);
}

void nlp::traverseFromCompactMapCursor(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1A18CBBF0(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;

  if (a2 == *(_DWORD *)(*(_QWORD *)(v6 + 2080) + 4))
  {
    std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v11, a1);
    nlp::traverseFromCompactMapCursorMappedLevel((_BYTE *)v6, v4, v3, v7, v5, v2, v10, (uint64_t)v11);
    v8 = v12;
    if (v12 == v11)
    {
      v9 = 4;
      v8 = v11;
    }
    else
    {
      if (!v12)
        return;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
}

void sub_1A18CC35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a14;
  if (a14 == v26)
  {
    v29 = 4;
    v28 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_BYTE *nlp::traverseFromCompactMapCursorMappedLevel(_BYTE *result, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, _BYTE *a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v11 = result;
  v28 = *MEMORY[0x1E0C80C00];
  v12 = (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL) + *((_QWORD *)result + 260);
  if ((result[2064] & 1) == 0)
  {
    if (*(_DWORD *)(v12 + 1024))
    {
      *(_BYTE *)(a3 + a5) = 0;
      result = (_BYTE *)std::function<void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::operator()(a8, a7, a3, 0, *(_DWORD *)(v12 + 1024), (uint64_t)a6, 0.0);
      if (a5 >= a4 || *a6)
        return result;
    }
    else if (a5 >= a4)
    {
      return result;
    }
    v13 = 0;
    while (1)
    {
      *(_BYTE *)(a3 + a5) = v13;
      *(_QWORD *)a2 = *(unsigned int *)(v12 + 4 * v13);
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      if (v13)
        v14 = a5 + 1;
      else
        v14 = a5;
      std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v24, a8);
      nlp::traverseFromCompactMapCursor(v11, a2, a3, a4 - (v13 != 0), v14, a6, a7, v24);
      result = v25;
      if (v25 == v24)
      {
        result = v24;
        v15 = 4;
      }
      else
      {
        if (!v25)
          goto LABEL_20;
        v15 = 5;
      }
      result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v15))();
LABEL_20:
      if (!*a6)
      {
        v16 = v13++ == 255;
        if (!v16)
          continue;
      }
      return result;
    }
  }
  if (!*(_DWORD *)(v12 + 1024))
  {
    if (a5 >= a4)
      return result;
    goto LABEL_25;
  }
  *(_BYTE *)(a3 + a5) = 0;
  result = (_BYTE *)std::function<void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::operator()(a8, a7, a3, 0, *(_DWORD *)(v12 + 1024), (uint64_t)a6, *(float *)(v12 + 1032));
  if (a5 < a4 && !*a6)
  {
LABEL_25:
    v17 = 0;
    while (1)
    {
      *(_BYTE *)(a3 + a5) = v17;
      *(_QWORD *)a2 = *(unsigned int *)(v12 + 4 * v17);
      if (v17)
        v18 = a5 + 1;
      else
        v18 = a5;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v26, a8);
      nlp::traverseFromCompactMapCursor(v11, a2, a3, a4 - (v17 != 0), v18, a6, a7, v26);
      result = v27;
      if (v27 == v26)
      {
        result = v26;
        v19 = 4;
      }
      else
      {
        if (!v27)
          goto LABEL_34;
        v19 = 5;
      }
      result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v19))();
LABEL_34:
      if (!*a6)
      {
        v16 = v17++ == 255;
        if (!v16)
          continue;
      }
      return result;
    }
  }
  return result;
}

void sub_1A18CC710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void nlp::BurstTrieSetCursorWithBytes(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  __n128 v7;

  if (a1 && a2)
  {
    if (nlp::burstTrieSetCursor(a1, a2))
      nlp::BurstTrieCursorAdvanceWithBytes(a2, a3, a4, v7);
  }
}

uint64_t nlp::burstTrieSetCursor(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t result;
  uint64_t v4;

  if (!a2)
    return 0;
  *(_QWORD *)(a2 + 32) = a1;
  v2 = *(_DWORD **)(a1 + 2080);
  if (v2)
  {
    if (*v2 == -900339842 || *v2 == 12648430 && v2[7] == 2)
    {
      result = 1;
      *(_DWORD *)(a2 + 28) = 1;
      v4 = v2[1];
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = v4;
      return result;
    }
    return 0;
  }
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 8) = a1 | 1;
  *(_QWORD *)(a2 + 16) = 0;
  return 1;
}

void nlp::BurstTrieCursorAdvanceWithBytes(uint64_t a1, unsigned __int8 *a2, unsigned int a3, __n128 a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (a1)
  {
    v5 = *(_DWORD *)(a1 + 28);
    if (v5)
    {
      if (v5 == 1)
      {
        v6 = *(_QWORD *)a1;
        v7 = *(_QWORD *)(a1 + 8);
        v8 = *(_DWORD *)(a1 + 16);
        v9 = *(_DWORD *)(a1 + 20);
        nlp::advanceCompactMapCursor(*(_QWORD *)(a1 + 32), a1);
        if (!v10)
        {
          *(_QWORD *)a1 = v6;
          *(_QWORD *)(a1 + 8) = v7;
          *(_DWORD *)(a1 + 16) = v8;
          *(_DWORD *)(a1 + 20) = v9;
        }
      }
    }
    else
    {
      v12 = *(_QWORD *)a1;
      v11 = *(_QWORD *)(a1 + 8);
      v13 = *(_QWORD *)(a1 + 16);
      v14 = *(_DWORD *)(a1 + 24);
      if (!nlp::advanceMapCursor(*(_QWORD *)(a1 + 32), a1, a2, a3, a4))
      {
        *(_QWORD *)a1 = v12;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v13;
        *(_DWORD *)(a1 + 24) = v14;
      }
    }
  }
}

void nlp::advanceCompactMapCursor(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

BOOL sub_1A18CC954@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  unsigned __int8 *v3;
  uint64_t v4;

  return a1 == *(_DWORD *)(*(_QWORD *)(v4 + 2080) + 4)
      && nlp::advanceCompactMapCursorMappedLevel(v4, v1, v3, v2) != 0;
}

uint64_t nlp::advanceMapCursor(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, __n128 a5)
{
  uint64_t v9;
  _DWORD *v10;
  uint64_t *v11;
  int v12;

  v9 = *(_QWORD *)(a2 + 8);
  if ((v9 & 3) == 2)
  {
    v12 = nlp::advanceMapCursorTrieList(a1, a2, a3, a4, a5);
    return v12 != 0;
  }
  if ((v9 & 3) != 1)
    return 0;
  v10 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  if ((*(_BYTE *)(a1 + 2064) & 1) != 0)
  {
    if (a4)
    {
      v11 = (uint64_t *)&v10[2 * *a3 + 3];
      goto LABEL_10;
    }
    *(_DWORD *)(a2 + 20) = v10[2];
    *(_DWORD *)(a2 + 24) = v10[1];
  }
  else
  {
    if (a4)
    {
      v11 = (uint64_t *)&v10[2 * *a3 + 1];
LABEL_10:
      nlp::updateMapCursorPointer(a1, a2, *v11);
      v12 = nlp::advanceMapCursor(a1, a2, a3 + 1, a4 - 1);
      return v12 != 0;
    }
    *(_DWORD *)(a2 + 20) = *v10;
  }
  return 1;
}

void *nlp::sharedBuffer(nlp *this)
{
  unsigned __int8 v1;
  void *v2;
  pthread_key_t v4;

  {
    v4 = 0;
    pthread_key_create(&v4, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
    nlp::sharedBuffer(void)::key = v4;
  }
  v2 = pthread_getspecific(nlp::sharedBuffer(void)::key);
  if (!v2)
  {
    v2 = malloc_type_malloc(0x1000uLL, 0xCD357DB2uLL);
    pthread_setspecific(nlp::sharedBuffer(void)::key, v2);
  }
  return v2;
}

void sub_1A18CCF7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *nlp::traverseFromMapCursor(_QWORD *result, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5, int a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD v60[3];
  _QWORD *v61;
  _BYTE v62[24];
  _BYTE *v63;
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  _BYTE v68[24];
  _BYTE *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v13 = *((_DWORD *)result + 516);
  v14 = *(_QWORD *)(a2 + 8) & 3;
  if (v14 != 2)
  {
    if (v14 != 1)
      return result;
    v15 = (uint64_t)result;
    if ((v13 & 1) == 0)
    {
      std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v64, a8);
      v16 = (int *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL);
      if (*v16)
      {
        std::function<void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::operator()((uint64_t)v64, a7, a3, a4, *v16, (uint64_t)a5, *(float *)(a2 + 24));
        if (!a6 || *a5)
          goto LABEL_85;
      }
      else if (!a6)
      {
        goto LABEL_85;
      }
      v48 = 0;
      v49 = (a6 - 1);
      while (1)
      {
        *(_BYTE *)(a3 + a4) = v48;
        nlp::updateMapCursorPointer(v15, a2, *(_QWORD *)&v16[2 * v48 + 1]);
        v50 = (uint64_t)v65;
        if (!v65)
          goto LABEL_59;
        if (v65 != v64)
          break;
        v69 = v68;
        (*(void (**)(_QWORD *, _BYTE *))(v64[0] + 24))(v64, v68);
LABEL_61:
        nlp::traverseFromMapCursor(v15, a2, a3, a4 + 1, a5, v49, a7, v68);
        v51 = v69;
        if (v69 == v68)
        {
          v51 = v68;
          v52 = 4;
        }
        else
        {
          if (!v69)
            goto LABEL_66;
          v52 = 5;
        }
        (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_66:
        if (!*a5)
        {
          v53 = v48++ == 255;
          if (!v53)
            continue;
        }
        goto LABEL_85;
      }
      v50 = (*(uint64_t (**)(void))(*v65 + 16))();
LABEL_59:
      v69 = (_BYTE *)v50;
      goto LABEL_61;
    }
    std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v66, a8);
    v33 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL;
    v34 = *(_DWORD *)(v33 + 8);
    if (v34)
    {
      std::function<void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::operator()((uint64_t)v66, a7, a3, a4, v34, (uint64_t)a5, *(float *)(a2 + 24));
      if (!a6 || *a5)
      {
LABEL_85:
        if ((v13 & 1) != 0)
        {
          result = v67;
          if (v67 != v66)
            goto LABEL_89;
          v47 = 4;
          result = v66;
        }
        else
        {
          result = v65;
          if (v65 != v64)
            goto LABEL_89;
          v47 = 4;
          result = v64;
        }
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v47))();
      }
    }
    else if (!a6)
    {
      goto LABEL_85;
    }
    v54 = 0;
    v55 = (a6 - 1);
    while (1)
    {
      *(_BYTE *)(a3 + a4) = v54;
      nlp::updateMapCursorPointer(v15, a2, *(_QWORD *)(v33 + 12 + 8 * v54));
      v56 = (uint64_t)v67;
      if (!v67)
        goto LABEL_75;
      if (v67 != v66)
        break;
      v69 = v68;
      (*(void (**)(_QWORD *, _BYTE *))(v66[0] + 24))(v66, v68);
LABEL_77:
      nlp::traverseFromMapCursor(v15, a2, a3, a4 + 1, a5, v55, a7, v68);
      v57 = v69;
      if (v69 == v68)
      {
        v57 = v68;
        v58 = 4;
      }
      else
      {
        if (!v69)
          goto LABEL_82;
        v58 = 5;
      }
      (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_82:
      if (!*a5)
      {
        v53 = v54++ == 255;
        if (!v53)
          continue;
      }
      goto LABEL_85;
    }
    v56 = (*(uint64_t (**)(void))(*v67 + 16))();
LABEL_75:
    v69 = (_BYTE *)v56;
    goto LABEL_77;
  }
  if ((v13 & 1) != 0)
  {
    std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v62, a8);
    v35 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL;
    if (v35)
    {
      v36 = (unsigned __int8 *)(v35 + 22);
      v37 = *(unsigned int *)(a2 + 16);
      while (1)
      {
        v38 = *(unsigned __int16 *)(v35 + 20);
        if (v38 >= v37)
        {
          v39 = v38 - (int)v37;
          if (a6 < 0 || (int)v39 <= a6)
          {
            if ((_DWORD)v37)
            {
              v40 = (unsigned __int8 *)(v35 + 22);
              v41 = v36;
              v42 = v37;
              while (1)
              {
                v44 = *v40++;
                v43 = v44;
                v45 = *v41++;
                if (v43 != v45)
                  break;
                if (!--v42)
                  goto LABEL_47;
              }
            }
            else
            {
LABEL_47:
              v46 = v39 + a4;
              memcpy((void *)(a3 + a4), (const void *)(v35 + v37 + 22), v39);
              *(_BYTE *)(a3 + v46) = 0;
              std::function<void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::operator()((uint64_t)v62, a7, a3, v46, *(_DWORD *)(v35 + 16), (uint64_t)a5, *(float *)(v35 + 12));
            }
          }
        }
        v35 = *(_QWORD *)v35;
        if (!v35)
          goto LABEL_49;
      }
    }
    goto LABEL_52;
  }
  std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v60, a8);
  v17 = v13;
  v18 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = *(unsigned int *)(a2 + 16);
  if (v19 > *(unsigned __int16 *)(v18 + 12))
    __assert_rtn("traverseFromMapCursorTrieList", "BurstTrie.cpp", 1956, "cursor.prfxlen <= head->restlen");
  if (!v18)
    goto LABEL_33;
  v20 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  while (1)
  {
    if (v20 == v18)
    {
      v21 = *(unsigned __int16 *)(v18 + 12);
      goto LABEL_20;
    }
    v21 = *(unsigned __int16 *)(v20 + 12);
    if (v21 <= (unsigned __int16)v19)
      goto LABEL_33;
    if ((_DWORD)v19)
      break;
LABEL_20:
    v28 = v21 - v19;
    if ((a6 & 0x80000000) == 0 && v28 > a6)
      goto LABEL_32;
    v29 = v28 + a4;
    memcpy((void *)(a3 + a4), (const void *)(v20 + v19 + 14), v28);
    *(_BYTE *)(a3 + v29) = 0;
    v30 = (uint64_t)v61;
    if (!v61)
      goto LABEL_25;
    if (v61 != v60)
    {
      v30 = (*(uint64_t (**)(void))(*v61 + 16))();
LABEL_25:
      v69 = (_BYTE *)v30;
      goto LABEL_27;
    }
    v69 = v68;
    (*(void (**)(_QWORD *, _BYTE *))(v60[0] + 24))(v60, v68);
LABEL_27:
    std::function<void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::operator()((uint64_t)v68, a7, a3, v29, *(_DWORD *)(v20 + 8), (uint64_t)a5, 0.0);
    v31 = v69;
    if (v69 == v68)
    {
      v31 = v68;
      v32 = 4;
      goto LABEL_31;
    }
    if (v69)
    {
      v32 = 5;
LABEL_31:
      (*(void (**)(void))(*v31 + 8 * v32))();
    }
LABEL_32:
    v20 = *(_QWORD *)v20;
    if (!v20)
      goto LABEL_33;
  }
  v22 = (unsigned __int8 *)(v20 + 14);
  v23 = (unsigned __int8 *)(v18 + 14);
  v24 = v19;
  while (1)
  {
    v26 = *v22++;
    v25 = v26;
    v27 = *v23++;
    if (v25 != v27)
      break;
    if (!--v24)
      goto LABEL_20;
  }
LABEL_33:
  LOBYTE(v13) = v17;
LABEL_49:
  if ((v13 & 1) != 0)
  {
LABEL_52:
    result = v63;
    if (v63 != v62)
      goto LABEL_89;
    v47 = 4;
    result = v62;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v47))();
  }
  result = v61;
  if (v61 == v60)
  {
    v47 = 4;
    result = v60;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v47))();
  }
LABEL_89:
  if (result)
  {
    v47 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v47))();
  }
  return result;
}

void sub_1A18CD558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v29;
  uint64_t v30;

  v29 = a28;
  if (a28 == &a25)
  {
    v30 = 4;
    v29 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void nlp::finishLevel<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  for (i = 0; i != 256; ++i)
  {
    v3 = a1 + 8 * i;
    v6 = *(_QWORD *)(v3 + 12);
    v5 = (_QWORD *)(v3 + 12);
    v4 = v6;
    v7 = v6 & 3;
    if (v7 == 2)
    {
      v8 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    else if (v7 == 1)
    {
      nlp::finishLevel<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(v4 & 0xFFFFFFFFFFFFFFFCLL);
      free((void *)(*v5 & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
}

void nlp::finishLevel<nlp::_TrieLevel *,nlp::_ListNode *>(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  for (i = 0; i != 256; ++i)
  {
    v3 = a1 + 8 * i;
    v6 = *(_QWORD *)(v3 + 4);
    v5 = (_QWORD *)(v3 + 4);
    v4 = v6;
    v7 = v6 & 3;
    if (v7 == 2)
    {
      v8 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    else if (v7 == 1)
    {
      nlp::finishLevel<nlp::_TrieLevel *,nlp::_ListNode *>(v4 & 0xFFFFFFFFFFFFFFFCLL);
      free((void *)(*v5 & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
}

uint64_t nlp::addListNode(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6, int *a7)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  const void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  size_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v36;
  uint64_t v37;
  int *v38;

  v12 = a2;
  v13 = a1;
  v14 = (uint64_t *)*a2;
  v15 = malloc_type_calloc(8uLL, (*(_DWORD *)(a1 + 2088) + 1), 0x8E39A38EuLL);
  v16 = (const void *)(a3 + a5);
  if (v14)
  {
    v36 = v12;
    v37 = v13;
    v38 = a7;
    v17 = 0;
    v18 = 1;
LABEL_3:
    v19 = a6;
    v20 = 0;
    v21 = v17;
    v22 = &v15[v17];
    do
    {
      v23 = *((unsigned __int16 *)v14 + 6);
      if ((_DWORD)v23 + a5 == a4 && !memcmp(v16, (char *)v14 + 14, v23))
      {
        v18 = 0;
        a6 = v19;
        *((_DWORD *)v14 + 2) = v19;
        v17 = v21 + v20 + 1;
        v15[v21 + v20] = v14;
        v14 = (uint64_t *)*v14;
        if (v14)
          goto LABEL_3;
        v24 = (v21 + v20 + 1);
        v25 = 1;
        goto LABEL_15;
      }
      v22[v20] = v14;
      v14 = (uint64_t *)*v14;
      ++v20;
    }
    while (v14);
    v26 = v21 + v20;
    if ((v18 & 1) != 0)
    {
      v13 = v37;
      a7 = v38;
      LODWORD(a6) = v19;
      v12 = v36;
      goto LABEL_13;
    }
    v25 = 1;
    v24 = v26;
LABEL_15:
    v13 = v37;
    a7 = v38;
    v12 = v36;
  }
  else
  {
    LODWORD(v26) = 0;
LABEL_13:
    v27 = a4 - a5;
    v28 = (char *)malloc_type_calloc(1uLL, v27 + 15, 0xA9B8A391uLL);
    memcpy(v28 + 14, v16, v27);
    v28[v27 + 14] = 0;
    *((_WORD *)v28 + 6) = v27;
    *((_DWORD *)v28 + 2) = a6;
    v24 = (v26 + 1);
    v25 = 2;
    *(_QWORD *)v28 = 0;
    v15[v26] = v28;
  }
  qsort(v15, (int)v24, 8uLL, (int (__cdecl *)(const void *, const void *))nlp::nodeStringCompare);
  v29 = (_QWORD *)*v15;
  v30 = (_QWORD *)*v15;
  if ((int)v24 >= 2)
  {
    v31 = v15 + 1;
    v32 = v24 - 1;
    v33 = (_QWORD *)*v15;
    do
    {
      v34 = (_QWORD *)*v31++;
      v30 = v34;
      *v33 = v34;
      v33 = v34;
      --v32;
    }
    while (v32);
  }
  *v30 = 0;
  *v12 = v29;
  free(v15);
  *a7 = v25;
  if (v24 > *(_DWORD *)(v13 + 2088))
    nlp::addListNode();
  return v24;
}

_DWORD *nlp::burstLevel(uint64_t a1, unsigned __int16 *a2, int *a3)
{
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unint64_t v19;

  v6 = malloc_type_calloc(1uLL, 0x804uLL, 0x10000406A7154B6uLL);
  if (a2)
  {
    do
    {
      v7 = a2[6];
      v8 = *((unsigned int *)a2 + 2);
      if (a2[6])
      {
        v9 = *(_QWORD *)&v6[2 * *((unsigned __int8 *)a2 + 14) + 1];
        if (v9)
        {
          v19 = v9 & 0xFFFFFFFFFFFFFFFCLL;
          v10 = nlp::addListNode(a1, &v19, (uint64_t)(a2 + 7), v7, 1u, v8, a3);
          v11 = v19;
          if (v10 >= *(_DWORD *)(a1 + 2088))
          {
            v11 = nlp::burstLevel(a1, v19, a3);
            v12 = 1;
          }
          else
          {
            v12 = 2;
          }
          v15 = v12 | v11;
          v16 = *((unsigned __int8 *)a2 + 14);
        }
        else
        {
          v13 = (v7 - 1);
          v14 = (unint64_t)malloc_type_calloc(1uLL, v13 + 15, 0xA9B8A391uLL);
          memcpy((void *)(v14 + 14), (char *)a2 + 15, v13);
          *(_BYTE *)(v14 + 14 + v13) = 0;
          *(_WORD *)(v14 + 12) = v13;
          *(_DWORD *)(v14 + 8) = v8;
          *(_QWORD *)v14 = 0;
          v15 = v14 | 2;
          v16 = *((unsigned __int8 *)a2 + 14);
        }
        *(_QWORD *)&v6[2 * v16 + 1] = v15;
      }
      else
      {
        *v6 = v8;
      }
      v17 = *(unsigned __int16 **)a2;
      free(a2);
      a2 = v17;
    }
    while (v17);
  }
  return v6;
}

uint64_t nlp::nodeStringCompare(nlp *this, _QWORD *a2, const void *a3)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  size_t v10;
  uint64_t result;

  v3 = *(_QWORD *)this;
  v4 = *a2;
  v5 = (const void *)(*(_QWORD *)this + 14);
  v6 = (const void *)(*a2 + 14);
  v7 = *(unsigned __int16 *)(v3 + 12);
  v8 = *(unsigned __int16 *)(v4 + 12);
  v9 = v7 - v8;
  if ((int)v7 >= (int)v8)
    v10 = v8;
  else
    v10 = v7;
  LODWORD(result) = memcmp(v5, v6, v10);
  if ((_DWORD)result)
    return result;
  else
    return v9;
}

uint64_t nlp::addListNodeRanked(uint64_t a1, uint64_t **a2, uint64_t a3, int a4, unsigned int a5, int a6, float *a7, int *a8, float a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v17;
  uint64_t *v18;
  const void *v19;
  uint64_t v20;
  int v21;
  float v22;
  uint64_t v23;
  size_t v24;
  float v25;
  float v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;

  v17 = *a2;
  v18 = (uint64_t *)malloc_type_calloc(8uLL, (*(_DWORD *)(a1 + 2088) + 1), 0x861081D6uLL);
  v19 = (const void *)(a3 + a5);
  if (v17)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0.0;
    do
    {
      v23 = v20;
      v24 = *((unsigned __int16 *)v17 + 10);
      if ((_DWORD)v24 + a5 == a4 && !memcmp(v19, (char *)v17 + 22, v24))
      {
        *((_DWORD *)v17 + 4) = a6;
        v25 = *((float *)v17 + 3);
        if (*(_QWORD *)(a11 + 24))
          std::function<float ()(void *,float,float)>::operator()(a11, a10, v25, a9);
        else
          v26 = v25 + a9;
        *((float *)v17 + 3) = v26;
        v21 = 1;
      }
      if (*((float *)v17 + 2) > v22)
        v22 = *((float *)v17 + 2);
      ++v20;
      v18[v23] = (uint64_t)v17;
      v17 = (uint64_t *)*v17;
    }
    while (v17);
    if (v21)
    {
      v27 = 1;
      v28 = v23 + 1;
      v29 = a1;
      goto LABEL_18;
    }
  }
  else
  {
    LODWORD(v20) = 0;
    v22 = 0.0;
  }
  v29 = a1;
  if (v22 < a9)
    v22 = a9;
  v30 = a4 - a5;
  v31 = (char *)malloc_type_calloc(1uLL, v30 + 23, 0x55E7E753uLL);
  memcpy(v31 + 22, v19, v30);
  v31[v30 + 22] = 0;
  *((_WORD *)v31 + 10) = v30;
  *((_DWORD *)v31 + 4) = a6;
  *((float *)v31 + 2) = v22;
  *((float *)v31 + 3) = a9;
  v28 = (v20 + 1);
  v27 = 2;
  *(_QWORD *)v31 = 0;
  v18[v20] = (uint64_t)v31;
LABEL_18:
  qsort(v18, (int)v28, 8uLL, (int (__cdecl *)(const void *, const void *))nlp::nodeScoreCompare);
  v32 = (_QWORD *)*v18;
  *a7 = v22;
  v33 = v32;
  if ((int)v28 >= 2)
  {
    v34 = (v28 - 1);
    v35 = v18 + 1;
    v36 = v32;
    do
    {
      v37 = *v35++;
      v33 = (_QWORD *)v37;
      *v36 = v37;
      *(float *)(v37 + 8) = *a7;
      v36 = (_QWORD *)v37;
      --v34;
    }
    while (v34);
  }
  *v33 = 0;
  *a2 = v32;
  free(v18);
  *a8 = v27;
  if (v28 > *(_DWORD *)(v29 + 2088))
    nlp::addListNodeRanked();
  return v28;
}

float *nlp::burstLevelRanked(uint64_t a1, unsigned __int16 *a2, float *a3, int *a4)
{
  float *v8;
  int v9;
  int v10;
  float v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  float v24;
  unsigned __int16 *v25;
  float v26;
  float v28;
  uint64_t *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = (float *)malloc_type_calloc(1uLL, 0x80CuLL, 0x10000408B9410F9uLL);
  *a3 = 0.0;
  if (!a2)
  {
    v26 = 0.0;
    goto LABEL_26;
  }
  do
  {
    v28 = 0.0;
    v9 = a2[10];
    v10 = *((_DWORD *)a2 + 4);
    v11 = *((float *)a2 + 3);
    v31 = 0;
    if (!v9)
    {
      v8[1] = v11;
      *((_DWORD *)v8 + 2) = v10;
      v28 = v11;
      goto LABEL_16;
    }
    v12 = *(_QWORD *)&v8[2 * *((unsigned __int8 *)a2 + 22) + 3];
    if (v12)
    {
      v29 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      v33 = 0;
      v13 = nlp::addListNodeRanked(a1, &v29, (uint64_t)(a2 + 11), v9, 1u, v10, &v28, a4, v11, 0, (uint64_t)v32);
      v14 = v33;
      if (v33 == v32)
      {
        v14 = v32;
        v15 = 4;
      }
      else
      {
        if (!v33)
        {
LABEL_11:
          v20 = (uint64_t)v29;
          if (v13 >= *(_DWORD *)(a1 + 2088))
          {
            v20 = nlp::burstLevelRanked(a1, v29, &v28, a4);
            v21 = 1;
          }
          else
          {
            v21 = 2;
          }
          v18 = v21 | v20;
          v19 = *((unsigned __int8 *)a2 + 22);
          goto LABEL_15;
        }
        v15 = 5;
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
      goto LABEL_11;
    }
    v16 = (v9 - 1);
    v17 = (unint64_t)malloc_type_calloc(1uLL, v16 + 23, 0x55E7E753uLL);
    memcpy((void *)(v17 + 22), (char *)a2 + 23, v16);
    *(_BYTE *)(v17 + 22 + v16) = 0;
    *(_WORD *)(v17 + 20) = v16;
    *(_DWORD *)(v17 + 16) = v10;
    *(float *)(v17 + 8) = v11;
    *(float *)(v17 + 12) = v11;
    *(_QWORD *)v17 = 0;
    v28 = v11;
    v18 = v17 | 2;
    v19 = *((unsigned __int8 *)a2 + 22);
LABEL_15:
    *(_QWORD *)&v8[2 * v19 + 3] = v18;
LABEL_16:
    v22 = v31;
    if (v31 == v30)
    {
      v22 = v30;
      v23 = 4;
    }
    else
    {
      if (!v31)
        goto LABEL_21;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_21:
    v24 = v28;
    if (v28 <= *a3)
      v24 = *a3;
    *a3 = v24;
    v25 = *(unsigned __int16 **)a2;
    free(a2);
    a2 = v25;
  }
  while (v25);
  v26 = *a3;
LABEL_26:
  *v8 = v26;
  return v8;
}

void sub_1A18CDFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  v24 = a17;
  if (a17 == &a14)
  {
    v25 = 4;
    v24 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t std::function<float ()(void *,float,float)>::operator()(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v4;
  float v6;
  float v7;
  uint64_t v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, float *, float *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t nlp::nodeScoreCompare(nlp *this, const void *a2, const void *a3)
{
  float v3;
  float v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  v3 = *(float *)(*(_QWORD *)this + 12);
  v4 = *(float *)(*(_QWORD *)a2 + 12);
  if (v3 == v4)
  {
    v5 = *(_DWORD *)(*(_QWORD *)this + 16);
    v6 = *(_DWORD *)(*(_QWORD *)a2 + 16);
    v7 = v5 == v6;
    if (v5 > v6)
      v8 = -1;
    else
      v8 = 1;
    if (v7)
      return 0;
    else
      return v8;
  }
  else if ((float)(v3 - v4) <= 0.0)
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1A1B0E068);
}

uint64_t nlp::searchDiskLevelRanked(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  int v21;
  _DWORD *v22;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  _BYTE v43[24];
  _BYTE *v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  if (a5 >= a4)
  {
    v20 = *(_DWORD *)(a2 + 1024);
    if (v20)
    {
      v21 = *(_DWORD *)(a2 + 1032);
      v22 = malloc_type_malloc(a4 + 21, 0xF7573F27uLL);
      v22[4] = a4;
      *((_BYTE *)v22 + a4 + 20) = 0;
      memcpy(v22 + 5, a3, a4);
      v22[2] = v20;
      *v22 = v21;
      v22[3] = 1;
      std::function<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::operator()(a8, a7, (uint64_t)v22, 1, (uint64_t)&v38);
      if (v22[3]-- == 1)
        free(v22);
      if (v38)
        return 1;
    }
    if ((a6 & 1) != 0)
      return v38 != 0;
    v25 = 0;
    v26 = (a4 + 1);
    while (1)
    {
      v27 = *(_DWORD *)(a2 + 4 * v25);
      a3[a5] = v25;
      v28 = v27 & 3;
      switch(v28)
      {
        case 3:
          v32 = *(_QWORD *)(a1 + 2080);
          std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v41, a8);
          v30 = nlp::searchCompactDiskLevelRanked(a1, (int8x8_t *)((v27 & 0xFFFFFFFC) + v32), a3, v26, a5 + 1, 0, a7, (uint64_t)v41);
          v38 = v30;
          v31 = v42;
          if (v42 == v41)
          {
            v31 = v41;
LABEL_26:
            v34 = 4;
            goto LABEL_27;
          }
          break;
        case 2:
          v33 = *(_QWORD *)(a1 + 2080);
          std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v39, a8);
          v30 = nlp::searchDiskPageRanked((unsigned int *)((v27 & 0xFFFFFFFC) + v33), a3, v26, a5 + 1, 0, a7, (uint64_t)v39);
          v38 = v30;
          v31 = v40;
          if (v40 == v39)
          {
            v31 = v39;
            goto LABEL_26;
          }
          break;
        case 1:
          v29 = *(_QWORD *)(a1 + 2080);
          std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v43, a8);
          v30 = nlp::searchDiskLevelRanked(a1, (v27 & 0xFFFFFFFC) + v29, a3, v26, a5 + 1, 0, a7, v43);
          v38 = v30;
          v31 = v44;
          if (v44 == v43)
          {
            v31 = v43;
            goto LABEL_26;
          }
          break;
        default:
          goto LABEL_28;
      }
      if (v31)
      {
        v34 = 5;
LABEL_27:
        (*(void (**)(_BYTE *))(*(_QWORD *)v31 + 8 * v34))(v31);
LABEL_28:
        v30 = v38;
      }
      if (v30)
        return 1;
      if (++v25 == 256)
        return v38 != 0;
    }
  }
  v15 = *(_DWORD *)(a2 + 4 * a3[a5]);
  v16 = v15 & 3;
  switch(v16)
  {
    case 3:
      v35 = *(_QWORD *)(a1 + 2080);
      std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v47, a8);
      v38 = nlp::searchCompactDiskLevelRanked(a1, (int8x8_t *)((v15 & 0xFFFFFFFC) + v35), a3, a4, a5 + 1, a6, a7, (uint64_t)v47);
      v18 = v48;
      if (v48 == v47)
      {
        v19 = 4;
        v18 = v47;
        goto LABEL_38;
      }
      break;
    case 2:
      v36 = *(_QWORD *)(a1 + 2080);
      std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v45, a8);
      v38 = nlp::searchDiskPageRanked((unsigned int *)((v15 & 0xFFFFFFFC) + v36), a3, a4, a5 + 1, a6, a7, (uint64_t)v45);
      v18 = v46;
      if (v46 == v45)
      {
        v19 = 4;
        v18 = v45;
        goto LABEL_38;
      }
      break;
    case 1:
      v17 = *(_QWORD *)(a1 + 2080);
      std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v49, a8);
      v38 = nlp::searchDiskLevelRanked(a1, (v15 & 0xFFFFFFFC) + v17, a3, a4, a5 + 1, a6, a7, v49);
      v18 = v50;
      if (v50 == v49)
      {
        v19 = 4;
        v18 = v49;
LABEL_38:
        (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
        return v38 != 0;
      }
      break;
    default:
      return v38 != 0;
  }
  if (v18)
  {
    v19 = 5;
    goto LABEL_38;
  }
  return v38 != 0;
}

void sub_1A18CE4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;

  v31 = *(_QWORD **)(v28 + 56);
  if (v31 == v27)
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 144);
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t nlp::containsKey(uint64_t result, _DWORD *a2, int a3, _BYTE *a4)
{
  char v5;

  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
LABEL_5:
      *(_DWORD *)(result + 4) = a2[2];
      *(_DWORD *)(result + 8) = *a2;
LABEL_8:
      *a4 = 1;
      return result;
    }
    if (!*(_DWORD *)result)
    {
      if (!a3)
        return result;
      goto LABEL_5;
    }
    v5 = 0;
    if (*(_QWORD *)(result + 48))
    {
      result = std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>::operator()(result + 24, *(_QWORD *)(result + 16), (uint64_t)a2, (uint64_t)&v5);
      if (v5)
        goto LABEL_8;
    }
  }
  return result;
}

uint64_t nlp::searchDiskLevel(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v37;
  _BYTE v38[24];
  _BYTE *v39;
  _BYTE v40[24];
  _BYTE *v41;
  _BYTE v42[24];
  _BYTE *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  _BYTE v48[24];
  _BYTE *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v37 = 0;
  if (a5 >= a4)
  {
    v20 = *(_DWORD *)(a2 + 1024);
    if (v20)
    {
      v21 = malloc_type_malloc(a4 + 21, 0xF7573F27uLL);
      v21[4] = a4;
      *((_BYTE *)v21 + a4 + 20) = 0;
      memcpy(v21 + 5, a3, a4);
      v21[2] = v20;
      *v21 = 0;
      v21[3] = 1;
      std::function<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::operator()(a8, a7, (uint64_t)v21, 1, (uint64_t)&v37);
      if (v21[3]-- == 1)
        free(v21);
      if (v37)
        return 1;
    }
    if ((a6 & 1) != 0)
      return v37 != 0;
    v24 = 0;
    v25 = (a4 + 1);
    while (1)
    {
      v26 = *(_DWORD *)(a2 + 4 * v24);
      a3[a5] = v24;
      v27 = v26 & 3;
      switch(v27)
      {
        case 3:
          v31 = *(_QWORD *)(a1 + 2080);
          std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v40, a8);
          v29 = nlp::searchCompactDiskLevel(a1, (int8x8_t *)((v26 & 0xFFFFFFFC) + v31), a3, v25, a5 + 1, 0, a7, (uint64_t)v40);
          v37 = v29;
          v30 = v41;
          if (v41 == v40)
          {
            v30 = v40;
LABEL_26:
            v33 = 4;
            goto LABEL_27;
          }
          break;
        case 2:
          v32 = *(_QWORD *)(a1 + 2080);
          std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v38, a8);
          v29 = nlp::searchDiskPage(a1, (unsigned int *)((v26 & 0xFFFFFFFC) + v32), (char *)a3, v25, a5 + 1, 0, a7, (uint64_t)v38);
          v37 = v29;
          v30 = v39;
          if (v39 == v38)
          {
            v30 = v38;
            goto LABEL_26;
          }
          break;
        case 1:
          v28 = *(_QWORD *)(a1 + 2080);
          std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v42, a8);
          v29 = nlp::searchDiskLevel(a1, (v26 & 0xFFFFFFFC) + v28, a3, v25, a5 + 1, 0, a7, v42);
          v37 = v29;
          v30 = v43;
          if (v43 == v42)
          {
            v30 = v42;
            goto LABEL_26;
          }
          break;
        default:
          goto LABEL_28;
      }
      if (v30)
      {
        v33 = 5;
LABEL_27:
        (*(void (**)(void))(*(_QWORD *)v30 + 8 * v33))();
LABEL_28:
        v29 = v37;
      }
      if (v29)
        return 1;
      if (++v24 == 256)
        return v37 != 0;
    }
  }
  v15 = *(_DWORD *)(a2 + 4 * a3[a5]);
  v16 = v15 & 3;
  switch(v16)
  {
    case 3:
      v34 = *(_QWORD *)(a1 + 2080);
      std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v46, a8);
      v37 = nlp::searchCompactDiskLevel(a1, (int8x8_t *)((v15 & 0xFFFFFFFC) + v34), a3, a4, a5 + 1, a6, a7, (uint64_t)v46);
      v18 = v47;
      if (v47 == v46)
      {
        v19 = 4;
        v18 = v46;
        goto LABEL_38;
      }
      break;
    case 2:
      v35 = *(_QWORD *)(a1 + 2080);
      std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v44, a8);
      v37 = nlp::searchDiskPage(a1, (unsigned int *)((v15 & 0xFFFFFFFC) + v35), (char *)a3, a4, a5 + 1, a6, a7, (uint64_t)v44);
      v18 = v45;
      if (v45 == v44)
      {
        v19 = 4;
        v18 = v44;
        goto LABEL_38;
      }
      break;
    case 1:
      v17 = *(_QWORD *)(a1 + 2080);
      std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v48, a8);
      v37 = nlp::searchDiskLevel(a1, (v15 & 0xFFFFFFFC) + v17, a3, a4, a5 + 1, a6, a7, v48);
      v18 = v49;
      if (v49 == v48)
      {
        v19 = 4;
        v18 = v48;
LABEL_38:
        (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
        return v37 != 0;
      }
      break;
    default:
      return v37 != 0;
  }
  if (v18)
  {
    v19 = 5;
    goto LABEL_38;
  }
  return v37 != 0;
}

void sub_1A18CEA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;

  v31 = *(_QWORD **)(v28 + 56);
  if (v31 == v27)
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 128);
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t nlp::searchLevelRanked(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  int v19;
  _DWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned __int8 v30;
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  if (a4 >= a3)
  {
    v18 = *(_DWORD *)(a1 + 8);
    if (v18)
    {
      v19 = *(_DWORD *)(a1 + 4);
      v20 = malloc_type_malloc(a4 + 21, 0xF7573F27uLL);
      v20[4] = a4;
      *((_BYTE *)v20 + a4 + 20) = 0;
      memcpy(v20 + 5, a2, a4);
      v20[2] = v18;
      *v20 = v19;
      v20[3] = 1;
      std::function<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::operator()(a7, a6, (uint64_t)v20, 1, (uint64_t)&v30);
      v21 = v20[3]-- == 1;
      if (v21)
        free(v20);
      v15 = v30 != 0;
      if (v30 || (a5 & 1) != 0)
        return v15;
    }
    else if ((a5 & 1) != 0)
    {
      return 0;
    }
    v22 = 0;
    v23 = (a3 + 1);
    v24 = a1 + 12;
    while (1)
    {
      v25 = *(_QWORD *)(v24 + 8 * v22);
      a2[a4] = v22;
      if ((v25 & 3) == 2)
        break;
      if ((v25 & 3) == 1)
      {
        std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v33, a7);
        v26 = nlp::searchLevelRanked(v25 & 0xFFFFFFFFFFFFFFFCLL, a2, v23, a4 + 1, 0, a6, v33);
        v30 = v26;
        v27 = v34;
        if (v34 == v33)
        {
          v27 = v33;
          goto LABEL_24;
        }
LABEL_21:
        if (!v27)
          goto LABEL_27;
        v28 = 5;
        goto LABEL_25;
      }
LABEL_26:
      v26 = v30;
LABEL_27:
      v15 = v26 != 0;
      if (!v26)
      {
        v21 = v22++ == 255;
        if (!v21)
          continue;
      }
      return v15;
    }
    std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v31, a7);
    v26 = nlp::searchListRanked(v25 & 0xFFFFFFFFFFFFFFFCLL, a2, v23, a4 + 1, 0, a6, (uint64_t)v31);
    v30 = v26;
    v27 = v32;
    if (v32 != v31)
      goto LABEL_21;
    v27 = v31;
LABEL_24:
    v28 = 4;
LABEL_25:
    (*(void (**)(_BYTE *))(*(_QWORD *)v27 + 8 * v28))(v27);
    goto LABEL_26;
  }
  v14 = *(_QWORD *)(a1 + 8 * a2[a4] + 12);
  if ((v14 & 3) != 2)
  {
    if ((v14 & 3) == 1)
    {
      std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v37, a7);
      v15 = nlp::searchLevelRanked(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, v37);
      v16 = v38;
      if (v38 == v37)
      {
        v17 = 4;
        v16 = v37;
LABEL_35:
        (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
        return v15;
      }
      goto LABEL_32;
    }
    return 0;
  }
  std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v35, a7);
  v15 = nlp::searchListRanked(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, (uint64_t)v35);
  v16 = v36;
  if (v36 == v35)
  {
    v17 = 4;
    v16 = v35;
    goto LABEL_35;
  }
LABEL_32:
  if (v16)
  {
    v17 = 5;
    goto LABEL_35;
  }
  return v15;
}

void sub_1A18CEE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a22;
  if (a22 == v26)
  {
    v29 = 4;
    v28 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t nlp::searchLevel(int *a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned __int8 v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[24];
  _BYTE *v35;
  _BYTE v36[24];
  _BYTE *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  if (a4 >= a3)
  {
    v18 = *a1;
    if (*a1)
    {
      v19 = malloc_type_malloc(a4 + 21, 0xF7573F27uLL);
      v19[4] = a4;
      *((_BYTE *)v19 + a4 + 20) = 0;
      memcpy(v19 + 5, a2, a4);
      v19[2] = v18;
      *v19 = 0;
      v19[3] = 1;
      std::function<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::operator()(a7, a6, (uint64_t)v19, 1, (uint64_t)&v29);
      v20 = v19[3]-- == 1;
      if (v20)
        free(v19);
      v15 = v29 != 0;
      if (v29 || (a5 & 1) != 0)
        return v15;
    }
    else if ((a5 & 1) != 0)
    {
      return 0;
    }
    v21 = 0;
    v22 = (a3 + 1);
    v23 = a1 + 1;
    while (1)
    {
      v24 = *(_QWORD *)&v23[2 * v21];
      a2[a4] = v21;
      if ((v24 & 3) == 2)
        break;
      if ((v24 & 3) == 1)
      {
        std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v32, a7);
        v25 = nlp::searchLevel(v24 & 0xFFFFFFFFFFFFFFFCLL, a2, v22, a4 + 1, 0, a6, v32);
        v29 = v25;
        v26 = v33;
        if (v33 == v32)
        {
          v26 = v32;
          goto LABEL_24;
        }
LABEL_21:
        if (!v26)
          goto LABEL_27;
        v27 = 5;
        goto LABEL_25;
      }
LABEL_26:
      v25 = v29;
LABEL_27:
      v15 = v25 != 0;
      if (!v25)
      {
        v20 = v21++ == 255;
        if (!v20)
          continue;
      }
      return v15;
    }
    std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v30, a7);
    v25 = nlp::searchList(v24 & 0xFFFFFFFFFFFFFFFCLL, a2, v22, a4 + 1, 0, a6, (uint64_t)v30);
    v29 = v25;
    v26 = v31;
    if (v31 != v30)
      goto LABEL_21;
    v26 = v30;
LABEL_24:
    v27 = 4;
LABEL_25:
    (*(void (**)(_BYTE *))(*(_QWORD *)v26 + 8 * v27))(v26);
    goto LABEL_26;
  }
  v14 = *(_QWORD *)&a1[2 * a2[a4] + 1];
  if ((v14 & 3) != 2)
  {
    if ((v14 & 3) == 1)
    {
      std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v36, a7);
      v15 = nlp::searchLevel(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, v36);
      v16 = v37;
      if (v37 == v36)
      {
        v17 = 4;
        v16 = v36;
LABEL_35:
        (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
        return v15;
      }
      goto LABEL_32;
    }
    return 0;
  }
  std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v34, a7);
  v15 = nlp::searchList(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, (uint64_t)v34);
  v16 = v35;
  if (v35 == v34)
  {
    v17 = 4;
    v16 = v34;
    goto LABEL_35;
  }
LABEL_32:
  if (v16)
  {
    v17 = 5;
    goto LABEL_35;
  }
  return v15;
}

void sub_1A18CF1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a21;
  if (a21 == v25)
  {
    v28 = 4;
    v27 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t nlp::searchCompactDiskLevelRanked(uint64_t a1, int8x8_t *a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  int v19;
  __int32 v20;
  __int32 v21;
  _DWORD *v22;
  unint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  int v28;
  int8x8_t *v29;
  int8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  __int32 v33;
  int v34;
  uint64_t v35;
  int v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int8x8_t *v41;
  int8x8_t v42;
  uint8x8_t v43;
  uint8x8_t v44;
  __int32 v45;
  int v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 v54;
  _BYTE v55[24];
  _BYTE *v56;
  _BYTE v57[24];
  _BYTE *v58;
  _BYTE v59[24];
  _BYTE *v60;
  _BYTE v61[24];
  _BYTE *v62;
  _BYTE v63[24];
  _BYTE *v64;
  _BYTE v65[24];
  _BYTE *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v54 = 0;
  if (a5 >= a4)
  {
    v20 = a2[5].i32[0];
    if (v20)
    {
      v21 = a2[4].i32[1];
      v22 = malloc_type_malloc(a4 + 21, 0xF7573F27uLL);
      v22[4] = a4;
      *((_BYTE *)v22 + a4 + 20) = 0;
      memcpy(v22 + 5, a3, a4);
      v22[2] = v20;
      *v22 = v21;
      v22[3] = 1;
      std::function<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::operator()(a8, a7, (uint64_t)v22, 1, (uint64_t)&v54);
      if (v22[3]-- == 1)
        free(v22);
      if (v54)
        return 1;
    }
    if ((a6 & 1) != 0)
      return v54 != 0;
    v25 = 0;
    v52 = a4 + 1;
    while (1)
    {
      if (v25 >> 6 <= 1)
        v26 = 1;
      else
        v26 = v25 >> 6;
      v27 = a2[v25 >> 6];
      if ((*(_QWORD *)&v27 & (1 << v25)) == 0)
        goto LABEL_34;
      if (v25 >= 0x40)
      {
        v28 = 0;
        v29 = a2;
        do
        {
          v30 = *v29++;
          v31 = (uint8x8_t)vcnt_s8(v30);
          v31.i16[0] = vaddlv_u8(v31);
          v28 += v31.i32[0];
          --v26;
        }
        while (v26);
      }
      else
      {
        v28 = 0;
      }
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v27 & ((1 << v25) - 1)));
      v32.i16[0] = vaddlv_u8(v32);
      v33 = a2[5].i32[v28 + v32.i32[0] + 1];
      a3[a5] = v25;
      v34 = v33 & 3;
      switch(v34)
      {
        case 1:
          v38 = *(_QWORD *)(a1 + 2080);
          std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v59, a8);
          v36 = nlp::searchDiskLevelRanked(a1, v38 + (v33 & 0xFFFFFFFC), a3, v52, a5 + 1, 0, a7, v59);
          v54 = v36;
          v37 = v60;
          if (v60 == v59)
          {
            v37 = v59;
LABEL_32:
            v40 = 4;
            goto LABEL_33;
          }
          break;
        case 2:
          v39 = *(_QWORD *)(a1 + 2080);
          std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v55, a8);
          v36 = nlp::searchDiskPageRanked((unsigned int *)(v39 + (v33 & 0xFFFFFFFC)), a3, v52, a5 + 1, 0, a7, (uint64_t)v55);
          v54 = v36;
          v37 = v56;
          if (v56 == v55)
          {
            v37 = v55;
            goto LABEL_32;
          }
          break;
        case 3:
          v35 = *(_QWORD *)(a1 + 2080);
          std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v57, a8);
          v36 = nlp::searchCompactDiskLevelRanked(a1, v35 + (v33 & 0xFFFFFFFC), a3, v52, a5 + 1, 0, a7, v57);
          v54 = v36;
          v37 = v58;
          if (v58 == v57)
          {
            v37 = v57;
            goto LABEL_32;
          }
          break;
        default:
          goto LABEL_34;
      }
      if (v37)
      {
        v40 = 5;
LABEL_33:
        (*(void (**)(_BYTE *))(*(_QWORD *)v37 + 8 * v40))(v37);
LABEL_34:
        v36 = v54;
      }
      if (v36)
        return 1;
      if ((_DWORD)++v25 == 256)
        return v54 != 0;
    }
  }
  v15 = a3[a5];
  v16 = v15 >> 6;
  v17 = a2[v15 >> 6];
  v18 = 1 << v15;
  if (((1 << v15) & *(_QWORD *)&v17) != 0)
  {
    if (v15 >= 0x40)
    {
      v19 = 0;
      if (v16 <= 1)
        v16 = 1;
      else
        v16 = v16;
      v41 = a2;
      do
      {
        v42 = *v41++;
        v43 = (uint8x8_t)vcnt_s8(v42);
        v43.i16[0] = vaddlv_u8(v43);
        v19 += v43.i32[0];
        --v16;
      }
      while (v16);
    }
    else
    {
      v19 = 0;
    }
    v44 = (uint8x8_t)vcnt_s8((int8x8_t)((v18 - 1) & *(_QWORD *)&v17));
    v44.i16[0] = vaddlv_u8(v44);
    v45 = a2[5].i32[v19 + v44.i32[0] + 1];
    v46 = v45 & 3;
    switch(v46)
    {
      case 1:
        v50 = *(_QWORD *)(a1 + 2080);
        std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v65, a8);
        v54 = nlp::searchDiskLevelRanked(a1, (v45 & 0xFFFFFFFC) + v50, a3, a4, a5 + 1, a6, a7, v65);
        v48 = v66;
        if (v66 == v65)
        {
          v49 = 4;
          v48 = v65;
          goto LABEL_54;
        }
        break;
      case 2:
        v51 = *(_QWORD *)(a1 + 2080);
        std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v61, a8);
        v54 = nlp::searchDiskPageRanked((unsigned int *)((v45 & 0xFFFFFFFC) + v51), a3, a4, a5 + 1, a6, a7, (uint64_t)v61);
        v48 = v62;
        if (v62 == v61)
        {
          v49 = 4;
          v48 = v61;
          goto LABEL_54;
        }
        break;
      case 3:
        v47 = *(_QWORD *)(a1 + 2080);
        std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v63, a8);
        v54 = nlp::searchCompactDiskLevelRanked(a1, (v45 & 0xFFFFFFFC) + v47, a3, a4, a5 + 1, a6, a7, v63);
        v48 = v64;
        if (v64 == v63)
        {
          v49 = 4;
          v48 = v63;
LABEL_54:
          (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
          return v54 != 0;
        }
        break;
      default:
        return v54 != 0;
    }
    if (v48)
    {
      v49 = 5;
      goto LABEL_54;
    }
  }
  return v54 != 0;
}

void sub_1A18CF730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  char *v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;

  v32 = *(char **)(v30 + 24);
  if (v32 == v29)
  {
    v33 = 4;
    v32 = &a29;
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t nlp::searchDiskPageRanked(unsigned int *a1, _BYTE *a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v11;
  char *v12;
  int v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  size_t v19;
  size_t v20;
  size_t v21;
  int v22;
  int v23;
  _DWORD *v24;
  int v25;
  char *__dst;
  size_t v28;
  char *v29;
  size_t __n;
  char v37;

  v37 = 0;
  v7 = *a1;
  if (!*a1)
    return 0;
  v8 = a4;
  v9 = a3;
  v11 = 0;
  v12 = &a2[a4];
  v13 = a3 - a4;
  __n = (int)(a3 - a4);
  v29 = v12;
  __dst = &a2[a3];
  v28 = a3;
  while (1)
  {
    v14 = (char *)a1 + v11;
    v15 = *((unsigned __int16 *)v14 + 8);
    if (v13 > (int)v15)
      goto LABEL_14;
    v16 = v14 + 8;
    v17 = v14 + 18;
    if (memcmp(v14 + 18, v12, __n))
      goto LABEL_14;
    v18 = a5;
    if (v13 == (_DWORD)v15)
      v18 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_14;
    v19 = (v15 + v8);
    v20 = (v19 - v9);
    v21 = v28;
    if ((int)v20 >= 1)
    {
      memcpy(__dst, &v17[v15 - (int)v20], v20);
      v21 = v19;
      v9 = v19;
    }
    a2[v21] = 0;
    v22 = *((_DWORD *)v16 + 1);
    v23 = *(_DWORD *)v16;
    v24 = malloc_type_malloc(v21 + 21, 0xF7573F27uLL);
    v24[4] = v9;
    *((_BYTE *)v24 + v21 + 20) = 0;
    memcpy(v24 + 5, a2, v21);
    *v24 = v23;
    v24[2] = v22;
    v24[3] = 1;
    std::function<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::operator()(a7, a6, (uint64_t)v24, v13 == (_DWORD)v15, (uint64_t)&v37);
    v25 = v24[3] - 1;
    v24[3] = v25;
    if (!v25)
      free(v24);
    v9 = a3;
    v8 = a4;
    v12 = v29;
    if (v37)
      return 1;
    LODWORD(v15) = *((unsigned __int16 *)v16 + 4);
LABEL_14:
    v11 += v15 + 10;
    if (v11 >= v7)
      return 0;
  }
}

uint64_t std::function<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v9 = a3;
  v8 = a4;
  v7 = a5;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, char *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

uint64_t std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

void std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::~__func()
{
  JUMPOUT(0x1A1B0E068);
}

_QWORD *std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E45CE6D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E45CE6D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned __int8 *a4, _QWORD *a5)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4, *a5);
}

uint64_t std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::target_type()
{
}

uint64_t nlp::searchCompactDiskLevel(uint64_t a1, int8x8_t *a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  int v19;
  __int32 v20;
  _DWORD *v21;
  unint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  int v27;
  int8x8_t *v28;
  int8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  __int32 v32;
  int v33;
  uint64_t v34;
  int v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x8_t *v40;
  int8x8_t v41;
  uint8x8_t v42;
  uint8x8_t v43;
  __int32 v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned __int8 v53;
  _BYTE v54[24];
  _BYTE *v55;
  _BYTE v56[24];
  _BYTE *v57;
  _BYTE v58[24];
  _BYTE *v59;
  _BYTE v60[24];
  _BYTE *v61;
  _BYTE v62[24];
  _BYTE *v63;
  _BYTE v64[24];
  _BYTE *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v53 = 0;
  if (a5 >= a4)
  {
    v20 = a2[4].i32[0];
    if (v20)
    {
      v21 = malloc_type_malloc(a4 + 21, 0xF7573F27uLL);
      v21[4] = a4;
      *((_BYTE *)v21 + a4 + 20) = 0;
      memcpy(v21 + 5, a3, a4);
      v21[2] = v20;
      *v21 = 0;
      v21[3] = 1;
      std::function<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::operator()(a8, a7, (uint64_t)v21, 1, (uint64_t)&v53);
      if (v21[3]-- == 1)
        free(v21);
      if (v53)
        return 1;
    }
    if ((a6 & 1) != 0)
      return v53 != 0;
    v24 = 0;
    v51 = a4 + 1;
    while (1)
    {
      if (v24 >> 6 <= 1)
        v25 = 1;
      else
        v25 = v24 >> 6;
      v26 = a2[v24 >> 6];
      if ((*(_QWORD *)&v26 & (1 << v24)) == 0)
        goto LABEL_34;
      if (v24 >= 0x40)
      {
        v27 = 0;
        v28 = a2;
        do
        {
          v29 = *v28++;
          v30 = (uint8x8_t)vcnt_s8(v29);
          v30.i16[0] = vaddlv_u8(v30);
          v27 += v30.i32[0];
          --v25;
        }
        while (v25);
      }
      else
      {
        v27 = 0;
      }
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v26 & ((1 << v24) - 1)));
      v31.i16[0] = vaddlv_u8(v31);
      v32 = a2[4].i32[v27 + v31.i32[0] + 1];
      a3[a5] = v24;
      v33 = v32 & 3;
      switch(v33)
      {
        case 1:
          v37 = *(_QWORD *)(a1 + 2080);
          std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v58, a8);
          v35 = nlp::searchDiskLevel(a1, v37 + (v32 & 0xFFFFFFFC), a3, v51, a5 + 1, 0, a7, v58);
          v53 = v35;
          v36 = v59;
          if (v59 == v58)
          {
            v36 = v58;
LABEL_32:
            v39 = 4;
            goto LABEL_33;
          }
          break;
        case 2:
          v38 = *(_QWORD *)(a1 + 2080);
          std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v54, a8);
          v35 = nlp::searchDiskPage(a1, (unsigned int *)(v38 + (v32 & 0xFFFFFFFC)), (char *)a3, v51, a5 + 1, 0, a7, (uint64_t)v54);
          v53 = v35;
          v36 = v55;
          if (v55 == v54)
          {
            v36 = v54;
            goto LABEL_32;
          }
          break;
        case 3:
          v34 = *(_QWORD *)(a1 + 2080);
          std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v56, a8);
          v35 = nlp::searchCompactDiskLevel(a1, v34 + (v32 & 0xFFFFFFFC), a3, v51, a5 + 1, 0, a7, v56);
          v53 = v35;
          v36 = v57;
          if (v57 == v56)
          {
            v36 = v56;
            goto LABEL_32;
          }
          break;
        default:
          goto LABEL_34;
      }
      if (v36)
      {
        v39 = 5;
LABEL_33:
        (*(void (**)(void))(*(_QWORD *)v36 + 8 * v39))();
LABEL_34:
        v35 = v53;
      }
      if (v35)
        return 1;
      if ((_DWORD)++v24 == 256)
        return v53 != 0;
    }
  }
  v15 = a3[a5];
  v16 = v15 >> 6;
  v17 = a2[v15 >> 6];
  v18 = 1 << v15;
  if (((1 << v15) & *(_QWORD *)&v17) != 0)
  {
    if (v15 >= 0x40)
    {
      v19 = 0;
      if (v16 <= 1)
        v16 = 1;
      else
        v16 = v16;
      v40 = a2;
      do
      {
        v41 = *v40++;
        v42 = (uint8x8_t)vcnt_s8(v41);
        v42.i16[0] = vaddlv_u8(v42);
        v19 += v42.i32[0];
        --v16;
      }
      while (v16);
    }
    else
    {
      v19 = 0;
    }
    v43 = (uint8x8_t)vcnt_s8((int8x8_t)((v18 - 1) & *(_QWORD *)&v17));
    v43.i16[0] = vaddlv_u8(v43);
    v44 = a2[4].i32[v19 + v43.i32[0] + 1];
    v45 = v44 & 3;
    switch(v45)
    {
      case 1:
        v49 = *(_QWORD *)(a1 + 2080);
        std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v64, a8);
        v53 = nlp::searchDiskLevel(a1, (v44 & 0xFFFFFFFC) + v49, a3, a4, a5 + 1, a6, a7, v64);
        v47 = v65;
        if (v65 == v64)
        {
          v48 = 4;
          v47 = v64;
          goto LABEL_54;
        }
        break;
      case 2:
        v50 = *(_QWORD *)(a1 + 2080);
        std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v60, a8);
        v53 = nlp::searchDiskPage(a1, (unsigned int *)((v44 & 0xFFFFFFFC) + v50), (char *)a3, a4, a5 + 1, a6, a7, (uint64_t)v60);
        v47 = v61;
        if (v61 == v60)
        {
          v48 = 4;
          v47 = v60;
          goto LABEL_54;
        }
        break;
      case 3:
        v46 = *(_QWORD *)(a1 + 2080);
        std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v62, a8);
        v53 = nlp::searchCompactDiskLevel(a1, (v44 & 0xFFFFFFFC) + v46, a3, a4, a5 + 1, a6, a7, v62);
        v47 = v63;
        if (v63 == v62)
        {
          v48 = 4;
          v47 = v62;
LABEL_54:
          (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
          return v53 != 0;
        }
        break;
      default:
        return v53 != 0;
    }
    if (v47)
    {
      v48 = 5;
      goto LABEL_54;
    }
  }
  return v53 != 0;
}

void sub_1A18D004C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  char *v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;

  v32 = *(char **)(v30 + 24);
  if (v32 == v29)
  {
    v33 = 4;
    v32 = &a29;
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t nlp::searchDiskPage(uint64_t a1, unsigned int *a2, char *a3, unsigned int a4, int a5, char a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  int v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  size_t v21;
  int v22;
  size_t v23;
  size_t v24;
  int v25;
  _DWORD *v26;
  int v27;
  char *v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  size_t v37;
  char v38;
  unsigned int v39;
  unsigned int v40;
  size_t v41;
  int v42;
  int v43;
  _BYTE *v44;
  int v45;
  _DWORD *v46;
  int v47;
  char *__dst;
  size_t v50;
  char *v51;
  int v52;
  char *v53;
  char v54;
  char *__s2a;
  char v64;
  _OWORD __s1[16];
  uint64_t v66;

  v8 = a5;
  v9 = a4;
  v66 = *MEMORY[0x1E0C80C00];
  v64 = 0;
  v11 = a4 - a5;
  v12 = *a2;
  if ((*(_BYTE *)(a1 + 2064) & 4) != 0)
  {
    memset(__s1, 0, sizeof(__s1));
    if (v12)
    {
      v28 = 0;
      v29 = 0;
      v52 = a5 - a4;
      __s2a = &a3[a5];
      v51 = &a3[a4];
      do
      {
        v30 = (char *)a2 + v29;
        v31 = v30[10];
        if (v28)
        {
          v32 = v28[6];
          if (v31 > v32)
            memcpy((char *)__s1 + v32, v28 + 7, v31 - v32);
        }
        v28 = v30 + 4;
        v33 = *((unsigned __int16 *)v30 + 4);
        v34 = v33 + v31;
        if ((int)(v33 + v31) >= v11)
        {
          if (v9 == v8 || ((int)v31 >= v11 ? (v35 = v11) : (v35 = v31), !memcmp(__s1, __s2a, v35)))
          {
            v36 = v11 - v31;
            if (v11 - (int)v31 < 0
              || ((int)v33 >= (int)v36 ? (v37 = v36) : (v37 = v33), !memcmp(v28 + 7, &__s2a[v31], v37)))
            {
              v38 = a6;
              if (v11 == v34)
                v38 = 0;
              if ((v38 & 1) == 0)
              {
                v39 = v9;
                v40 = v31 + v8;
                v41 = (_DWORD)v31 + v8 - v39;
                if ((int)v41 < 1)
                {
                  v40 = v39;
                }
                else
                {
                  memcpy(v51, (char *)__s1 + v31 - (int)v41, v41);
                  v33 = *((unsigned __int16 *)v28 + 2);
                  LODWORD(v31) = v28[6];
                }
                v42 = v52 + v33 + v31;
                if (v42 < 1)
                {
                  v44 = a3;
                }
                else
                {
                  v43 = v42 - (v41 & ~((int)v41 >> 31));
                  v44 = a3;
                  memcpy(&a3[v40], &v28[v33 - v43 + 7], v43);
                  v40 += v43;
                }
                v54 = v11 == v34;
                v44[v40] = 0;
                v45 = *(_DWORD *)v28;
                v46 = malloc_type_malloc(v40 + 21, 0xF7573F27uLL);
                v46[4] = v40;
                *((_BYTE *)v46 + v40 + 20) = 0;
                memcpy(v46 + 5, v44, v40);
                *v46 = 0;
                v46[2] = v45;
                v46[3] = 1;
                std::function<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::operator()(a8, a7, (uint64_t)v46, v54, (uint64_t)&v64);
                v47 = v46[3] - 1;
                v46[3] = v47;
                if (!v47)
                  free(v46);
                v9 = a4;
                if (v64)
                  return 1;
                v33 = *((unsigned __int16 *)v28 + 2);
                v8 = a5;
              }
            }
          }
        }
        v29 += v33 + 7;
      }
      while (v29 < v12);
    }
  }
  else if (v12)
  {
    v13 = 0;
    v14 = &a3[a5];
    v15 = v11;
    __dst = &a3[a4];
    v50 = a4;
    v53 = v14;
    do
    {
      v16 = (char *)a2 + v13;
      v17 = *((unsigned __int16 *)v16 + 4);
      if (v11 <= (int)v17)
      {
        v18 = v16 + 4;
        v19 = v16 + 10;
        if (!memcmp(v16 + 10, v14, v15))
        {
          v20 = a6;
          if (v11 == (_DWORD)v17)
            v20 = 0;
          if ((v20 & 1) == 0)
          {
            v21 = (v17 + v8);
            v22 = a4;
            v23 = v21 - a4;
            v24 = v50;
            if ((int)v23 >= 1)
            {
              memcpy(__dst, &v19[v17 - (int)v23], v23);
              v24 = v21;
              v22 = v21;
            }
            a3[v24] = 0;
            v25 = *(_DWORD *)v18;
            v26 = malloc_type_malloc(v24 + 21, 0xF7573F27uLL);
            v26[4] = v22;
            *((_BYTE *)v26 + v24 + 20) = 0;
            memcpy(v26 + 5, a3, v24);
            *v26 = 0;
            v26[2] = v25;
            v26[3] = 1;
            std::function<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::operator()(a8, a7, (uint64_t)v26, v11 == (_DWORD)v17, (uint64_t)&v64);
            v27 = v26[3] - 1;
            v26[3] = v27;
            if (!v27)
              free(v26);
            v8 = a5;
            v15 = v11;
            v14 = v53;
            if (v64)
              return 1;
            LODWORD(v17) = *((unsigned __int16 *)v18 + 2);
          }
        }
      }
      v13 += v17 + 6;
    }
    while (v13 < v12);
  }
  return 0;
}

uint64_t nlp::searchListRanked(uint64_t result, _BYTE *a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v10;
  char *v11;
  size_t v12;
  char v13;
  uint64_t v14;
  char v15;
  size_t v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  int v21;
  _DWORD *v22;
  int v23;
  char *__dst;
  size_t v26;
  char v30;

  v30 = 0;
  if (result)
  {
    v7 = a4;
    v10 = result;
    v11 = &a2[a4];
    v12 = (int)(a3 - a4);
    v26 = a3;
    v13 = a5;
    __dst = &a2[a3];
    while (1)
    {
      v14 = *(unsigned __int16 *)(v10 + 20);
      if ((int)v12 <= (int)v14 && !memcmp((const void *)(v10 + 22), v11, v12))
      {
        v15 = (_DWORD)v12 == (_DWORD)v14 ? 0 : v13;
        if ((v15 & 1) == 0)
        {
          v16 = (v14 + v7);
          v17 = v16 - a3;
          v18 = v26;
          v19 = a3;
          if ((int)v17 >= 1)
          {
            memcpy(__dst, (const void *)(v10 + 22 + v14 - (int)v17), v17);
            v18 = v16;
            v19 = v16;
          }
          a2[v18] = 0;
          v20 = *(_DWORD *)(v10 + 16);
          v21 = *(_DWORD *)(v10 + 12);
          v22 = malloc_type_malloc(v18 + 21, 0xF7573F27uLL);
          v22[4] = v19;
          *((_BYTE *)v22 + v18 + 20) = 0;
          memcpy(v22 + 5, a2, v18);
          *v22 = v21;
          v22[2] = v20;
          v22[3] = 1;
          std::function<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::operator()(a7, a6, (uint64_t)v22, (_DWORD)v12 == (_DWORD)v14, (uint64_t)&v30);
          v23 = v22[3] - 1;
          v22[3] = v23;
          if (!v23)
            free(v22);
          v7 = a4;
          v13 = a5;
          if (v30)
            break;
        }
      }
      v10 = *(_QWORD *)v10;
      if (!v10)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t nlp::searchList(uint64_t result, _BYTE *a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v10;
  char *v11;
  size_t v12;
  char v13;
  uint64_t v14;
  char v15;
  size_t v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  _DWORD *v21;
  int v22;
  char *__dst;
  size_t v25;
  char v29;

  v29 = 0;
  if (result)
  {
    v7 = a4;
    v10 = result;
    v11 = &a2[a4];
    v12 = (int)(a3 - a4);
    v25 = a3;
    v13 = a5;
    __dst = &a2[a3];
    while (1)
    {
      v14 = *(unsigned __int16 *)(v10 + 12);
      if ((int)v12 <= (int)v14 && !memcmp((const void *)(v10 + 14), v11, v12))
      {
        v15 = (_DWORD)v12 == (_DWORD)v14 ? 0 : v13;
        if ((v15 & 1) == 0)
        {
          v16 = (v14 + v7);
          v17 = v16 - a3;
          v18 = v25;
          v19 = a3;
          if ((int)v17 >= 1)
          {
            memcpy(__dst, (const void *)(v10 + 14 + v14 - (int)v17), v17);
            v18 = v16;
            v19 = v16;
          }
          a2[v18] = 0;
          v20 = *(_DWORD *)(v10 + 8);
          v21 = malloc_type_malloc(v18 + 21, 0xF7573F27uLL);
          v21[4] = v19;
          *((_BYTE *)v21 + v18 + 20) = 0;
          memcpy(v21 + 5, a2, v18);
          *v21 = 0;
          v21[2] = v20;
          v21[3] = 1;
          std::function<void ()(void *,nlp::_TrieCompletion *,BOOL,BOOL *)>::operator()(a7, a6, (uint64_t)v21, (_DWORD)v12 == (_DWORD)v14, (uint64_t)&v29);
          v22 = v21[3] - 1;
          v21[3] = v22;
          if (!v22)
            free(v21);
          v7 = a4;
          v13 = a5;
          if (v29)
            break;
        }
      }
      v10 = *(_QWORD *)v10;
      if (!v10)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t nlp::advanceCompactMapCursorMappedLevel(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  unint64_t v8;

  v8 = (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL) + *(_QWORD *)(a1 + 2080);
  if ((*(_BYTE *)(a1 + 2064) & 1) != 0)
  {
    if (!a4)
    {
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v8 + 1024);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(v8 + 1032);
      return 1;
    }
LABEL_5:
    nlp::updateCompactMapCursorPointer(a1, (_QWORD *)a2, *(unsigned int *)(v8 + 4 * *a3));
    return nlp::advanceCompactMapCursor(a1, a2, a3 + 1, (a4 - 1));
  }
  if (a4)
    goto LABEL_5;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v8 + 1024);
  return 1;
}

uint64_t nlp::updateCompactMapCursorPointer(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;

  if (*a2 != a3)
    return ((uint64_t (*)(void))((char *)&loc_1A18D08F4 + 4 * byte_1A18D52E5[a3 & 3]))();
  return result;
}

uint64_t nlp::advanceMapCursorTrieList(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, __n128 a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  float v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  __n128 v30;
  double v31;
  int v32;
  int v34;
  _QWORD v35[2];
  size_t v36;
  int v37;
  __n128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 2064) & 1) == 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v10 = *(unsigned int *)(a2 + 16);
    if (v10 > *(unsigned __int16 *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 12))
      nlp::advanceMapCursorTrieList();
    if (!v9)
      return 0;
    v11 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    while (1)
    {
      v12 = *(unsigned __int16 *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 12);
      if (v11 != v9)
      {
        v12 = *(unsigned __int16 *)(v11 + 12);
        if (v10 >= v12)
          goto LABEL_19;
        if ((_DWORD)v10)
        {
          v13 = (unsigned __int8 *)(v11 + 14);
          v14 = *(unsigned int *)(a2 + 16);
          v15 = (unsigned __int8 *)(v9 + 14);
          do
          {
            v17 = *v13++;
            v16 = v17;
            v18 = *v15++;
            if (v16 != v18)
              goto LABEL_19;
          }
          while (--v14);
        }
      }
      LODWORD(v19) = 0;
      v20 = *(_DWORD *)(a2 + 16);
      if (v10 < v12 && a4)
      {
        v19 = 0;
        do
        {
          if (*(unsigned __int8 *)(v11 + v10 + 14 + v19) != a3[v19])
            break;
          if (++v19 + v10 >= v12)
            break;
        }
        while (v19 < a4);
        v20 = v10 + v19;
      }
      if ((_DWORD)v19 == a4)
      {
        *(_QWORD *)(a2 + 8) = v11 | 2;
        if (v20 == v12)
        {
          *(_DWORD *)(a2 + 16) = v12;
          *(_DWORD *)(a2 + 20) = *(_DWORD *)(v11 + 8);
        }
        else
        {
          *(_QWORD *)(a2 + 16) = v10 + a4;
        }
        return 1;
      }
LABEL_19:
      v11 = *(_QWORD *)v11;
      if (!v11)
        return 0;
    }
  }
  v35[1] = v35;
  v35[0] = *(_QWORD *)a2;
  a5.n128_u64[0] = *(_QWORD *)(a2 + 16);
  v22 = *(float *)(a2 + 24);
  v38 = a5;
  MEMORY[0x1E0C80A78]();
  v24 = (char *)v35 - v23;
  v26 = *(unsigned int *)(a2 + 16);
  memcpy((char *)v35 - v23, (const void *)(v25 + 22), v26);
  v27 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL;
  if (v27)
  {
    v37 = 0;
    v28 = v26 + a4;
    v36 = a4;
    do
    {
      v29 = *(unsigned __int16 *)(v27 + 20);
      if (v28 <= v29 && !memcmp((const void *)(v27 + 22), v24, v26) && !memcmp((const void *)(v27 + 22 + v26), a3, v36))
      {
        if (v28 == v29)
        {
          *(_QWORD *)(a2 + 8) = v27 | 2;
          v34 = *(_DWORD *)(v27 + 16);
          *(_DWORD *)(a2 + 24) = *(_DWORD *)(v27 + 12);
          *(_DWORD *)(a2 + 16) = v28;
          *(_DWORD *)(a2 + 20) = v34;
          return 1;
        }
        v30 = v38;
        HIDWORD(v31) = 0;
        v32 = v37;
        if (!v37)
        {
          v8 = v27 | 2;
          v22 = 0.0;
        }
        v37 = 1;
        if (!v32)
        {
          LODWORD(v31) = v38.n128_u32[0] + a4;
          v30.n128_f64[0] = v31;
        }
        v38 = v30;
      }
      v27 = *(_QWORD *)v27;
    }
    while (v27);
  }
  else
  {
    v37 = 0;
  }
  *(_QWORD *)a2 = v35[0];
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v38.n128_u64[0];
  *(float *)(a2 + 24) = v22;
  return v37;
}

uint64_t nlp::updateMapCursorPointer(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v4;
  int v5;
  unint64_t v6;

  if (*(_QWORD *)(a2 + 8) != a3)
  {
    v3 = a3 & 3;
    if ((a3 & 3) != 0)
    {
      if (v3 == 2)
      {
        v6 = a3 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_BYTE *)(result + 2064) & 1) == 0)
        {
          if (*(_WORD *)(v6 + 12))
            v5 = 0;
          else
            v5 = *(_DWORD *)(v6 + 8);
          goto LABEL_14;
        }
        *(_DWORD *)(a2 + 20) = *(_DWORD *)(v6 + 16);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(v6 + 12);
        *(_QWORD *)a2 = a3;
      }
      else if (v3 == 1)
      {
        v4 = (int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
        if ((*(_BYTE *)(result + 2064) & 1) == 0)
        {
          v5 = *v4;
LABEL_14:
          *(_DWORD *)(a2 + 20) = v5;
          goto LABEL_15;
        }
        *(_DWORD *)(a2 + 20) = v4[2];
        *(_DWORD *)(a2 + 24) = v4[1];
      }
    }
    else
    {
      *(_QWORD *)(a2 + 20) = 0;
    }
LABEL_15:
    *(_QWORD *)(a2 + 8) = a3;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

_QWORD *nlp::burstTrieCreateCursorWithTrieLevelRef<nlp::_RankedTrieLevel *>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = 0;
  if (a1 && a2)
  {
    if (*(_QWORD *)(a1 + 2080))
      nlp::burstTrieCreateCursorWithTrieLevelRef<nlp::_RankedTrieLevel *>();
    v2 = malloc_type_calloc(0x28uLL, 1uLL, 0xB23B27DBuLL);
    if (nlp::burstTrieSetCursor(a1, (uint64_t)v2))
    {
      v2[1] = a2 | 1;
      *((_DWORD *)v2 + 5) = *(_DWORD *)(a2 + 8);
      *((_DWORD *)v2 + 6) = *(_DWORD *)(a2 + 4);
    }
    else if (v2)
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

uint64_t std::vector<std::tuple<std::string,unsigned int,float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,float>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    std::vector<std::tuple<std::string,unsigned int,float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::tuple<std::string,unsigned int,float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1A18D0E24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,unsigned int,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1},std::allocator<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::~__func()
{
  JUMPOUT(0x1A1B0E068);
}

_QWORD *std::__function::__func<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1},std::allocator<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E45CE8E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1},std::allocator<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E45CE8E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1},std::allocator<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::operator()(uint64_t result)
{
  ++**(_DWORD **)(result + 8);
  return result;
}

uint64_t std::__function::__func<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1},std::allocator<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1},std::allocator<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::target_type()
{
}

uint64_t std::vector<std::tuple<std::string,unsigned int,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,float>>,std::reverse_iterator<std::tuple<std::string,unsigned int,float>*>,std::reverse_iterator<std::tuple<std::string,unsigned int,float>*>,std::reverse_iterator<std::tuple<std::string,unsigned int,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,float>>,std::reverse_iterator<std::tuple<std::string,unsigned int,float>*>,std::reverse_iterator<std::tuple<std::string,unsigned int,float>*>,std::reverse_iterator<std::tuple<std::string,unsigned int,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,unsigned int,float>>,std::reverse_iterator<std::tuple<std::string,unsigned int,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,unsigned int,float>>,std::reverse_iterator<std::tuple<std::string,unsigned int,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,unsigned int,float>>,std::reverse_iterator<std::tuple<std::string,unsigned int,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,unsigned int,float>>,std::reverse_iterator<std::tuple<std::string,unsigned int,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::tuple<std::string,unsigned int,float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::tuple<std::string,unsigned int,float>>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::tuple<std::string,unsigned int,float>>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__function::__func<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2},std::allocator<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::~__func()
{
  JUMPOUT(0x1A1B0E068);
}

_QWORD *std::__function::__func<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2},std::allocator<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E45CE888;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2},std::allocator<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E45CE888;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2},std::allocator<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::operator()(uint64_t a1, uint64_t a2, void **a3, unsigned int *a4, int *a5, int *a6)
{
  int v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  void *__p[2];
  uint64_t v22;
  _QWORD v23[5];

  v6 = *a5;
  v7 = *a6;
  v8 = *(uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100](__p, *a3, *a4);
  v9 = v8[1];
  v10 = v8[2];
  if (v9 >= v10)
  {
    v12 = (uint64_t)(v9 - *v8) >> 5;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v14 = v10 - *v8;
    if (v14 >> 4 > v13)
      v13 = v14 >> 4;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v23[4] = v8 + 2;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,float>>>((uint64_t)(v8 + 2), v15);
    else
      v16 = 0;
    v17 = &v16[32 * v12];
    v23[0] = v16;
    v23[1] = v17;
    v23[3] = &v16[32 * v15];
    v18 = *(_OWORD *)__p;
    *((_QWORD *)v17 + 2) = v22;
    *(_OWORD *)v17 = v18;
    __p[1] = 0;
    v22 = 0;
    __p[0] = 0;
    *((_DWORD *)v17 + 6) = v6;
    *((_DWORD *)v17 + 7) = v7;
    v23[2] = v17 + 32;
    std::vector<std::tuple<std::string,unsigned int,float>>::__swap_out_circular_buffer(v8, v23);
    v19 = v8[1];
    std::__split_buffer<std::tuple<std::string,unsigned int,float>>::~__split_buffer((uint64_t)v23);
    v20 = SHIBYTE(v22);
    v8[1] = v19;
    if (v20 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v11 = *(_OWORD *)__p;
    *(_QWORD *)(v9 + 16) = v22;
    *(_OWORD *)v9 = v11;
    *(_DWORD *)(v9 + 24) = v6;
    *(_DWORD *)(v9 + 28) = v7;
    v8[1] = v9 + 32;
  }
}

void sub_1A18D12F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::__split_buffer<std::tuple<std::string,unsigned int,float>>::~__split_buffer((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2},std::allocator<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2},std::allocator<void nlp::reverseBurst<nlp::_RankedTrieLevel *,nlp::_RankedListNode *>(nlp::_BurstTrie *,std::vector<nlp::_RankedTrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::target_type()
{
}

void std::vector<std::tuple<std::string,unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::tuple<std::string,unsigned int,float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::tuple<std::string,unsigned int,float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

_QWORD *nlp::burstTrieCreateCursorWithTrieLevelRef<nlp::_TrieLevel *>(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;

  v2 = 0;
  if (a1 && a2)
  {
    if (*(_QWORD *)(a1 + 2080))
      nlp::burstTrieCreateCursorWithTrieLevelRef<nlp::_RankedTrieLevel *>();
    v2 = malloc_type_calloc(0x28uLL, 1uLL, 0xB23B27DBuLL);
    if (nlp::burstTrieSetCursor(a1, (uint64_t)v2))
    {
      v2[1] = a2 | 1;
      *((_DWORD *)v2 + 5) = *(_DWORD *)a2;
    }
    else if (v2)
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

void std::__function::__func<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1},std::allocator<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::~__func()
{
  JUMPOUT(0x1A1B0E068);
}

_QWORD *std::__function::__func<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1},std::allocator<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E45CE830;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1},std::allocator<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E45CE830;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1},std::allocator<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::operator()(uint64_t result)
{
  ++**(_DWORD **)(result + 8);
  return result;
}

uint64_t std::__function::__func<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1},std::allocator<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1},std::allocator<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#1}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::target_type()
{
}

void std::__function::__func<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2},std::allocator<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::~__func()
{
  JUMPOUT(0x1A1B0E068);
}

_QWORD *std::__function::__func<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2},std::allocator<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E45CE7D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2},std::allocator<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E45CE7D8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2},std::allocator<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::operator()(uint64_t a1, uint64_t a2, void **a3, unsigned int *a4, int *a5, int *a6)
{
  int v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  void *__p[2];
  uint64_t v22;
  _QWORD v23[5];

  v6 = *a5;
  v7 = *a6;
  v8 = *(uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100](__p, *a3, *a4);
  v9 = v8[1];
  v10 = v8[2];
  if (v9 >= v10)
  {
    v12 = (uint64_t)(v9 - *v8) >> 5;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v14 = v10 - *v8;
    if (v14 >> 4 > v13)
      v13 = v14 >> 4;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v23[4] = v8 + 2;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,float>>>((uint64_t)(v8 + 2), v15);
    else
      v16 = 0;
    v17 = &v16[32 * v12];
    v23[0] = v16;
    v23[1] = v17;
    v23[3] = &v16[32 * v15];
    v18 = *(_OWORD *)__p;
    *((_QWORD *)v17 + 2) = v22;
    *(_OWORD *)v17 = v18;
    __p[1] = 0;
    v22 = 0;
    __p[0] = 0;
    *((_DWORD *)v17 + 6) = v6;
    *((_DWORD *)v17 + 7) = v7;
    v23[2] = v17 + 32;
    std::vector<std::tuple<std::string,unsigned int,float>>::__swap_out_circular_buffer(v8, v23);
    v19 = v8[1];
    std::__split_buffer<std::tuple<std::string,unsigned int,float>>::~__split_buffer((uint64_t)v23);
    v20 = SHIBYTE(v22);
    v8[1] = v19;
    if (v20 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v11 = *(_OWORD *)__p;
    *(_QWORD *)(v9 + 16) = v22;
    *(_OWORD *)v9 = v11;
    *(_DWORD *)(v9 + 24) = v6;
    *(_DWORD *)(v9 + 28) = v7;
    v8[1] = v9 + 32;
  }
}

void sub_1A18D16F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::__split_buffer<std::tuple<std::string,unsigned int,float>>::~__split_buffer((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2},std::allocator<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2},std::allocator<void nlp::reverseBurst<nlp::_TrieLevel *,nlp::_ListNode *>(nlp::_BurstTrie *,std::vector<nlp::_TrieLevel *> const&,unsigned char const*,unsigned int)::{lambda(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)#2}>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::target_type()
{
}

void std::__function::__func<nlp::BurstTrieSearch(nlp::_BurstTrie const*,unsigned char const*,unsigned int,void *,std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>,int)::$_0,std::allocator<nlp::BurstTrieSearch(nlp::_BurstTrie const*,unsigned char const*,unsigned int,void *,std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>,int)::$_0>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::~__func()
{
  JUMPOUT(0x1A1B0E068);
}

__n128 std::__function::__func<nlp::BurstTrieSearch(nlp::_BurstTrie const*,unsigned char const*,unsigned int,void *,std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>,int)::$_0,std::allocator<nlp::BurstTrieSearch(nlp::_BurstTrie const*,unsigned char const*,unsigned int,void *,std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>,int)::$_0>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E45CE780;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<nlp::BurstTrieSearch(nlp::_BurstTrie const*,unsigned char const*,unsigned int,void *,std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>,int)::$_0,std::allocator<nlp::BurstTrieSearch(nlp::_BurstTrie const*,unsigned char const*,unsigned int,void *,std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>,int)::$_0>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E45CE780;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<nlp::BurstTrieSearch(nlp::_BurstTrie const*,unsigned char const*,unsigned int,void *,std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>,int)::$_0,std::allocator<nlp::BurstTrieSearch(nlp::_BurstTrie const*,unsigned char const*,unsigned int,void *,std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>,int)::$_0>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::operator()(uint64_t a1, uint64_t a2, const void **a3, unsigned int *a4, int *a5, int *a6, uint64_t *a7)
{
  const void *v8;
  size_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  char *v14;
  size_t v15;
  size_t v16;
  _DWORD *v17;
  int v18;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  v12 = *a7;
  v13 = *(_DWORD *)(a1 + 16) + v9;
  v14 = (char *)operator new[]();
  v15 = *(unsigned int *)(a1 + 16);
  memcpy(v14, *(const void **)(a1 + 8), v15);
  memcpy(&v14[v15], v8, v9);
  v14[v13] = 0;
  v16 = (v15 + v9);
  v17 = malloc_type_malloc(v16 + 21, 0xF7573F27uLL);
  v17[4] = v16;
  *((_BYTE *)v17 + v16 + 20) = 0;
  memcpy(v17 + 5, v14, v16);
  *v17 = v11;
  v17[2] = v10;
  v17[3] = 1;
  std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>::operator()(*(_QWORD *)(a1 + 24), 0, (uint64_t)v17, v12);
  v18 = v17[3] - 1;
  v17[3] = v18;
  if (!v18)
    free(v17);
  JUMPOUT(0x1A1B0E050);
}

uint64_t std::__function::__func<nlp::BurstTrieSearch(nlp::_BurstTrie const*,unsigned char const*,unsigned int,void *,std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>,int)::$_0,std::allocator<nlp::BurstTrieSearch(nlp::_BurstTrie const*,unsigned char const*,unsigned int,void *,std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>,int)::$_0>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nlp::BurstTrieSearch(nlp::_BurstTrie const*,unsigned char const*,unsigned int,void *,std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>,int)::$_0,std::allocator<nlp::BurstTrieSearch(nlp::_BurstTrie const*,unsigned char const*,unsigned int,void *,std::function<void ()(void *,nlp::_TrieCompletion *,BOOL *)>,int)::$_0>,void ()(void *,unsigned char const*,unsigned int,unsigned int,float,BOOL *)>::target_type()
{
}

const __CFString *nlp::getUTF8StringFromCFString@<X0>(const __CFString *this@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  char *CStringPtr;
  CFIndex Length;
  CFIndex v7;
  char *v8;

  if (this)
  {
    v4 = this;
    CStringPtr = (char *)CFStringGetCStringPtr(this, 0x8000100u);
    if (!CStringPtr)
    {
      Length = CFStringGetLength(v4);
      v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
      v8 = (char *)operator new[]();
      CFStringGetCString(v4, v8, v7, 0x8000100u);
      std::string::basic_string[abi:ne180100]<0>(a2, v8);
      JUMPOUT(0x1A1B0E050);
    }
    return (const __CFString *)std::string::basic_string[abi:ne180100]<0>(a2, CStringPtr);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

void sub_1A18D1A1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1B0E050](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void ___ZNK26NLTransliterationCandidate13getTotalScoreEv_block_invoke_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 138412802;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  v7 = 2048;
  v8 = NLTransliterationCandidate::getTotalScore(void)const::lmDistributionModulatingFactor;
  _os_log_error_impl(&dword_1A1802000, log, OS_LOG_TYPE_ERROR, "Failed to create dictionary with contents of url %@:%@, using default value: %f", (uint8_t *)&v3, 0x20u);
}

void ___ZNK26NLTransliterationCandidate13getTotalScoreEv_block_invoke_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1A1802000, v0, v1, "LM distribution modulating factor is not in range [0, 1]: %@, using default value: %f", v2, v3, v4, v5, v6);
}

void ___ZNK26NLTransliterationCandidate13getTotalScoreEv_block_invoke_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1A1802000, v0, v1, "LM distribution modulating factor is not of number type: %@, using default value: %f", v2, v3, v4, v5, v6);
}

void NLHindiWordLanguageModeler::loadLanguageModel()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  uint64_t v3;

  OUTLINED_FUNCTION_0_1(*MEMORY[0x1E0C80C00]);
  v2 = 136315138;
  v3 = v0;
  _os_log_error_impl(&dword_1A1802000, v1, OS_LOG_TYPE_ERROR, "Failed to create language model for locale: %s", (uint8_t *)&v2, 0xCu);
  OUTLINED_FUNCTION_1_0();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_1_1(&dword_1A1802000, v0, v1, "Successfully created language model for locale: %s", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1_0();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_1_1(&dword_1A1802000, v0, v1, "Creating language model for locale: %s", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1_0();
}

void loadPlistFromFile(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_2(&dword_1A1802000, a1, a3, "can not load the property list from disk!", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0_2(&dword_1A1802000, a1, a3, "Can not fetch the language and keywords from the given plist!", a5, a6, a7, a8, 0);
}

void loadAlternteKeywordsPlistFromFile(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_2(&dword_1A1802000, a1, a3, "Could not extract the alternative keywords for each language in the given plist", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0_2(&dword_1A1802000, a1, a3, "Could not load the mappings from resource bundle", a5, a6, a7, a8, 0);
}

void lookslikeProperName_cold_1(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl(&dword_1A1802000, log, OS_LOG_TYPE_DEBUG, "Checking for names in CoreSpotlight index", v1, 2u);
}

void _CSSimpleQueryHasResultsForQuery()
{
  void **v0;
  void **v1;
  void **v2;
  _QWORD *v3;

  dlerror();
  v0 = (void **)abort_report_np();
  NL::SearchRules::SearchRules(v0, v1, v2, v3);
}

void NL::SearchRules::SearchRules(void **a1, void **a2, void **a3, _QWORD *a4)
{
  void *v7;
  void *v8;
  void *v9;

  v7 = *a1;
  if (v7)
  {
    a4[20] = v7;
    operator delete(v7);
  }
  v8 = *a2;
  if (*a2)
  {
    a4[17] = v8;
    operator delete(v8);
  }
  v9 = *a3;
  if (*a3)
  {
    a4[14] = v9;
    operator delete(v9);
  }
}

void NLCompositeTransliterator::getTransliterationCandidates(char *a1, uint8_t *buf, os_log_t log)
{
  char *v4;

  if (a1[23] >= 0)
    v4 = a1;
  else
    v4 = *(char **)a1;
  *(_DWORD *)buf = 136315394;
  *(_QWORD *)(buf + 4) = "Candidates";
  *((_WORD *)buf + 6) = 2080;
  *(_QWORD *)(buf + 14) = v4;
  _os_log_debug_impl(&dword_1A1802000, log, OS_LOG_TYPE_DEBUG, "%s:\n %s", buf, 0x16u);
  if (a1[23] < 0)
    operator delete(*(void **)a1);
}

void NLPCreateStringWithValidatedFormat(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl(&dword_1A1802000, log, OS_LOG_TYPE_ERROR, "Failed to create string with format %@:%@", (uint8_t *)&v3, 0x16u);
}

void std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<NLMessageIntentCandidate> const&,std::unique_ptr<NLMessageIntentCandidate> const&),std::unique_ptr<NLMessageIntentCandidate>*>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 8);
  JUMPOUT(0x1A1B0E068);
}

void NL::ParseFormatter::copyFormattedResult(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl(&dword_1A1802000, a2, OS_LOG_TYPE_DEBUG, "query: %@", (uint8_t *)&v2, 0xCu);
}

void nlp::addListNode()
{
  __assert_rtn("addListNode", "BurstTrie.cpp", 577, "listcount <= trie->reserved[ContainerSize]");
}

void nlp::addListNodeRanked()
{
  __assert_rtn("addListNodeRanked", "BurstTrie.cpp", 716, "listcount <= trie->reserved[ContainerSize]");
}

void nlp::advanceMapCursorTrieList()
{
  __assert_rtn("advanceMapCursorTrieList", "BurstTrie.cpp", 1854, "cursor->prfxlen <= head->restlen");
}

void nlp::burstTrieCreateCursorWithTrieLevelRef<nlp::_RankedTrieLevel *>()
{
  __assert_rtn("burstTrieCreateCursorWithTrieLevelRef", "BurstTrie.cpp", 2633, "nullptr == trie->mapbase");
}

uint64_t CEMEmojiLocaleDataCreateEmojiTokensForString()
{
  return MEMORY[0x1E0D15D10]();
}

uint64_t CEMEmojiTokenGetString()
{
  return MEMORY[0x1E0D15D90]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CC0]();
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
  MEMORY[0x1E0C97CE8](theArray, otherArray, otherRange.location, otherRange.length);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DB0](theArray, idx, value);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
  MEMORY[0x1E0C97DE0](theArray, range.location, range.length, comparator, context);
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x1E0C97DF0](alloc, str, attributes);
}

CFMutableAttributedStringRef CFAttributedStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableAttributedStringRef)MEMORY[0x1E0C97E00](alloc, maxLength);
}

CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFAttributedStringRef aStr)
{
  return (CFMutableAttributedStringRef)MEMORY[0x1E0C97E08](alloc, maxLength, aStr);
}

CFIndex CFAttributedStringGetLength(CFAttributedStringRef aStr)
{
  return MEMORY[0x1E0C97E48](aStr);
}

void CFAttributedStringReplaceString(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef replacement)
{
  MEMORY[0x1E0C97E70](aStr, range.location, range.length, replacement);
}

void CFAttributedStringSetAttribute(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef attrName, CFTypeRef value)
{
  MEMORY[0x1E0C97E78](aStr, range.location, range.length, attrName, value);
}

void CFAttributedStringSetAttributes(CFMutableAttributedStringRef aStr, CFRange range, CFDictionaryRef replacement, Boolean clearOtherAttributes)
{
  MEMORY[0x1E0C97E80](aStr, range.location, range.length, replacement, clearOtherAttributes);
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1E0C98050](bundle, key, value, tableName);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1E0C98080](bundle, resourceName, resourceType, subDirName);
}

CFURLRef CFBundleCopyResourcesDirectoryURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C980B0](bundle);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1E0C980E8](bundleID);
}

uint64_t CFBurstTrieCreateFromMapBytes()
{
  return MEMORY[0x1E0C981F0]();
}

uint64_t CFBurstTrieFindUTF8String()
{
  return MEMORY[0x1E0C981F8]();
}

uint64_t CFBurstTrieRelease()
{
  return MEMORY[0x1E0C98208]();
}

Boolean CFCalendarAddComponents(CFCalendarRef calendar, CFAbsoluteTime *at, CFOptionFlags options, const char *componentDesc, ...)
{
  return MEMORY[0x1E0C98220](calendar, at, options, componentDesc);
}

Boolean CFCalendarComposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...)
{
  return MEMORY[0x1E0C98228](calendar, at, componentDesc);
}

CFCalendarRef CFCalendarCopyCurrent(void)
{
  return (CFCalendarRef)MEMORY[0x1E0C98230]();
}

CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFCalendarIdentifier identifier)
{
  return (CFCalendarRef)MEMORY[0x1E0C98240](allocator, identifier);
}

Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, componentDesc);
  v3 = va_arg(va, _QWORD);
  return MEMORY[0x1E0C98248](calendar, v3, at);
}

CFCalendarIdentifier CFCalendarGetIdentifier(CFCalendarRef calendar)
{
  return (CFCalendarIdentifier)MEMORY[0x1E0C98258](calendar);
}

CFRange CFCalendarGetMaximumRangeOfUnit(CFCalendarRef calendar, CFCalendarUnit unit)
{
  CFIndex v2;
  CFIndex v3;
  CFRange result;

  v2 = MEMORY[0x1E0C98260](calendar, unit);
  result.length = v3;
  result.location = v2;
  return result;
}

CFRange CFCalendarGetRangeOfUnit(CFCalendarRef calendar, CFCalendarUnit smallerUnit, CFCalendarUnit biggerUnit, CFAbsoluteTime at)
{
  CFIndex v4;
  CFIndex v5;
  CFRange result;

  v4 = MEMORY[0x1E0C98270](calendar, smallerUnit, biggerUnit, at);
  result.length = v5;
  result.location = v4;
  return result;
}

void CFCalendarSetFirstWeekday(CFCalendarRef calendar, CFIndex wkdy)
{
  MEMORY[0x1E0C98280](calendar, wkdy);
}

void CFCalendarSetTimeZone(CFCalendarRef calendar, CFTimeZoneRef tz)
{
  MEMORY[0x1E0C98298](calendar, tz);
}

void CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange)
{
  MEMORY[0x1E0C982A0](theSet, theRange.location, theRange.length);
}

CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982B8](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982C0](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1E0C982C8](alloc);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1E0C982D0](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982E8](alloc, theString);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982F0](theSetIdentifier);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1E0C98320](theSet, theChar);
}

void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
  MEMORY[0x1E0C98348](theSet, theOtherSet);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1E0C98448](allocator, at);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1E0C98460](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateDateFormatFromTemplate(CFAllocatorRef allocator, CFStringRef tmplate, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringRef)MEMORY[0x1E0C98468](allocator, tmplate, options, locale);
}

CFDateFormatterRef CFDateFormatterCreateISO8601Formatter(CFAllocatorRef allocator, CFISO8601DateFormatOptions formatOptions)
{
  return (CFDateFormatterRef)MEMORY[0x1E0C98480](allocator, formatOptions);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return (CFStringRef)MEMORY[0x1E0C98490](allocator, formatter, date);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
  MEMORY[0x1E0C984C0](formatter, formatString);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C984D8](theDate);
  return result;
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985D8](theDict);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1E0C98630](err);
}

CFTypeID CFErrorGetTypeID(void)
{
  return MEMORY[0x1E0C98678]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C98770]();
}

CFArrayRef CFLocaleCopyPreferredLanguages(void)
{
  return (CFArrayRef)MEMORY[0x1E0C98790]();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1E0C98798](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987B0](allocator, localeIdentifier);
}

CFLocaleRef CFLocaleCreateCopy(CFAllocatorRef allocator, CFLocaleRef locale)
{
  return (CFLocaleRef)MEMORY[0x1E0C987C0](allocator, locale);
}

CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents(CFAllocatorRef allocator, CFDictionaryRef dictionary)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987C8](allocator, dictionary);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987D8](locale);
}

CFTypeID CFLocaleGetTypeID(void)
{
  return MEMORY[0x1E0C987F8]();
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x1E0C98800](locale, key);
}

uint64_t CFLog()
{
  return MEMORY[0x1E0C98808]();
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98858](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1E0C98910](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

CFPropertyListRef CFPropertyListCreateFromXMLData(CFAllocatorRef allocator, CFDataRef xmlData, CFOptionFlags mutabilityOption, CFStringRef *errorString)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AC8](allocator, xmlData, mutabilityOption, errorString);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD0](allocator, data, options, format, error);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AE0](allocator, stream, streamLength, options, format, error);
}

Boolean CFPropertyListIsValid(CFPropertyListRef plist, CFPropertyListFormat format)
{
  return MEMORY[0x1E0C98AF0](plist, format);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x1E0C98B10](stream);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1E0C98B48](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B80](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1E0C98DA8](theSet);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
  MEMORY[0x1E0C98DD0](theSet, values);
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
  MEMORY[0x1E0C98DD8](theSet);
}

void CFShow(CFTypeRef obj)
{
  MEMORY[0x1E0C98DF8](obj);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
  MEMORY[0x1E0C98EE8](theString, chars, numChars);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1E0C98F58](alloc, theString, separatorString);
}

CFArrayRef CFStringCreateArrayWithFindResults(CFAllocatorRef alloc, CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return (CFArrayRef)MEMORY[0x1E0C98F60](alloc, theString, stringToFind, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1E0C98F68](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateStringWithValidatedFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef validFormatSpecifiers, CFStringRef format, va_list arguments, CFErrorRef *errorPtr)
{
  return (CFStringRef)MEMORY[0x1E0C98FB0](alloc, formatOptions, validFormatSpecifiers, format, arguments, errorPtr);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1E0C98FE8](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
  MEMORY[0x1E0C99038](theString, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C99058](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99060](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99068](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

double CFStringGetDoubleValue(CFStringRef str)
{
  double result;

  MEMORY[0x1E0C990D0](str);
  return result;
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1E0C990F0](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex)
{
  CFIndex v2;
  CFIndex v3;
  CFRange result;

  v2 = MEMORY[0x1E0C99160](theString, theIndex);
  result.length = v3;
  result.location = v2;
  return result;
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1E0C99190](theString, suffix);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C991D0](theString, locale);
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
  MEMORY[0x1E0C991D8](theString, theForm);
}

void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement)
{
  MEMORY[0x1E0C991F0](theString, range.location, range.length, replacement);
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1E0C99208](tokenizer);
}

CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute(CFStringTokenizerRef tokenizer, CFOptionFlags attribute)
{
  return (CFTypeRef)MEMORY[0x1E0C99218](tokenizer, attribute);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1E0C99220](alloc, string, range.location, range.length, options, locale);
}

void CFStringTokenizerSetString(CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range)
{
  MEMORY[0x1E0C99240](tokenizer, string, range.location, range.length);
}

Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)
{
  return MEMORY[0x1E0C99248](string, range, transform, reverse);
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
  MEMORY[0x1E0C99258](theString);
}

void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C99260](theString, locale);
}

CFTimeZoneRef CFTimeZoneCopySystem(void)
{
  return (CFTimeZoneRef)MEMORY[0x1E0C99280]();
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1E0C992C8](relativeURL);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1E0C992F8](url);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99318](anURL);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99380](allocator, url, pathComponent, isDirectory);
}

Boolean CFURLCreateDataAndPropertiesFromResource(CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode)
{
  return MEMORY[0x1E0C993B0](alloc, url, resourceData, properties, desiredProperties, errorCode);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99448](allocator, URLString, baseURL);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C99490](url, resolveAgainstBase, buffer, maxBufLen);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1E0C994B8]();
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x1E0C994D0](url, error);
}

uint64_t DDResultCopyExtractedDateFromReferenceDateWithLocale()
{
  return MEMORY[0x1E0D1CC18]();
}

uint64_t DDResultGetCategory()
{
  return MEMORY[0x1E0D1CC90]();
}

uint64_t DDResultGetMatchedString()
{
  return MEMORY[0x1E0D1CCA0]();
}

uint64_t DDResultGetRange()
{
  return MEMORY[0x1E0D1CCD0]();
}

uint64_t DDResultGetSubResults()
{
  return MEMORY[0x1E0D1CCF0]();
}

uint64_t DDResultGetType()
{
  return MEMORY[0x1E0D1CD00]();
}

uint64_t DDResultGetValue()
{
  return MEMORY[0x1E0D1CD08]();
}

uint64_t DDResultHasType()
{
  return MEMORY[0x1E0D1CD18]();
}

uint64_t DDScannerCopyResultsWithOptions()
{
  return MEMORY[0x1E0D1CDA8]();
}

uint64_t DDScannerCreateWithCacheFile()
{
  return MEMORY[0x1E0D1CDB8]();
}

uint64_t DDScannerCreateWithLocale()
{
  return MEMORY[0x1E0D1CDC0]();
}

uint64_t DDScannerCreateWithType()
{
  return MEMORY[0x1E0D1CDC8]();
}

uint64_t DDScannerScanString()
{
  return MEMORY[0x1E0D1CDE8]();
}

uint64_t DDScannerSetOptions()
{
  return MEMORY[0x1E0D1CE08]();
}

uint64_t LDEnumerateAssetDataItems()
{
  return MEMORY[0x1E0D43820]();
}

uint64_t LMEnumerateAssetDataItems()
{
  return MEMORY[0x1E0D42C18]();
}

uint64_t LMLanguageModelAddTokenForString()
{
  return MEMORY[0x1E0D42C48]();
}

uint64_t LMLanguageModelConditionalProbability()
{
  return MEMORY[0x1E0D42C60]();
}

uint64_t LMLanguageModelCreate()
{
  return MEMORY[0x1E0D42C78]();
}

uint64_t LMLanguageModelCreatePredictionEnumerator()
{
  return MEMORY[0x1E0D42C80]();
}

uint64_t LMLanguageModelCreateStringForTokenID()
{
  return MEMORY[0x1E0D42C90]();
}

uint64_t LMLanguageModelFlushDynamicData()
{
  return MEMORY[0x1E0D42CB0]();
}

uint64_t LMLanguageModelGetTokenIDForString()
{
  return MEMORY[0x1E0D42CC0]();
}

uint64_t LMLanguageModelIncrementUsageCount()
{
  return MEMORY[0x1E0D42CD8]();
}

uint64_t LMLanguageModelJointProbability()
{
  return MEMORY[0x1E0D42CE0]();
}

uint64_t LMLanguageModelRelease()
{
  return MEMORY[0x1E0D42D00]();
}

uint64_t LMLanguageModelResetDynamicData()
{
  return MEMORY[0x1E0D42D18]();
}

uint64_t LMPredictionEnumeratorAdvance()
{
  return MEMORY[0x1E0D42DD8]();
}

uint64_t LMPredictionEnumeratorGetPrediction()
{
  return MEMORY[0x1E0D42DE0]();
}

uint64_t LMPredictionEnumeratorRelease()
{
  return MEMORY[0x1E0D42DE8]();
}

uint64_t LXCursorCreateByAdvancing()
{
  return MEMORY[0x1E0D43540]();
}

uint64_t LXCursorEnumerateEntries()
{
  return MEMORY[0x1E0D43558]();
}

uint64_t LXCursorHasEntries()
{
  return MEMORY[0x1E0D43578]();
}

uint64_t LXEntryCopyString()
{
  return MEMORY[0x1E0D435C8]();
}

uint64_t LXEntryGetProbability()
{
  return MEMORY[0x1E0D43618]();
}

uint64_t LXEntryGetTokenID()
{
  return MEMORY[0x1E0D43628]();
}

uint64_t LXLexiconCopyEntryForTokenID()
{
  return MEMORY[0x1E0D43678]();
}

uint64_t LXLexiconCreate()
{
  return MEMORY[0x1E0D43690]();
}

uint64_t LXLexiconCreateRootCursor()
{
  return MEMORY[0x1E0D436A0]();
}

uint64_t LXLexiconEnumerateEntriesForString()
{
  return MEMORY[0x1E0D436B8]();
}

uint64_t LXLexiconGetFirstTokenIDForString()
{
  return MEMORY[0x1E0D436C0]();
}

uint64_t MRLModelCreate()
{
  return MEMORY[0x1E0D50410]();
}

uint64_t MRLModelGetIOMappings()
{
  return MEMORY[0x1E0D50420]();
}

uint64_t MRLModelGetOutputSize()
{
  return MEMORY[0x1E0D50428]();
}

uint64_t MRLModelRecognize()
{
  return MEMORY[0x1E0D50438]();
}

uint64_t MRLModelRelease()
{
  return MEMORY[0x1E0D50440]();
}

uint64_t MRLModelReset()
{
  return MEMORY[0x1E0D50448]();
}

uint64_t MRLModelStateCreate()
{
  return MEMORY[0x1E0D50458]();
}

uint64_t MRLModelStateRelease()
{
  return MEMORY[0x1E0D50460]();
}

uint64_t NLTaggerCopyTagForCurrentToken()
{
  return MEMORY[0x1E0D17248]();
}

uint64_t NLTaggerCreate()
{
  return MEMORY[0x1E0D17250]();
}

uint64_t NLTaggerEnumerateTokens()
{
  return MEMORY[0x1E0D17258]();
}

uint64_t NLTaggerSetLocaleForRange()
{
  return MEMORY[0x1E0D17270]();
}

uint64_t NLTaggerSetString()
{
  return MEMORY[0x1E0D17278]();
}

uint64_t PBDataWriterWriteFloatField()
{
  return MEMORY[0x1E0D82C50]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1E0D82C98]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1E0D82D00]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1E0D82D28]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::string::const_reference std::string::at(const std::string *this, std::string::size_type __n)
{
  return (std::string::const_reference)MEMORY[0x1E0DE41B0](this, __n);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1E0DE41D8](this, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1E0DE41F0]();
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1E0DE4240](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1E0DE4320](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1E0DE43B0](this, *(_QWORD *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4408](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4420](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4440](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4468](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4488](this, __pos, __n1, __s);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1E0DE4490](this, __pos, __n1, __s, __n2);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x1E0DE44B0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE44E0](this, __c);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1E0DE4590]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1E0DE4598]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1E0DE4628]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1E0DE4640]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE4728]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1E0DE47C8](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1E0DE4910](retstr, __s);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4A78](__str, __idx, *(_QWORD *)&__base);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1E0DE4B88](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1E0DE4B90](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x1E0DE4BA0](this, a2);
}

void std::codecvt<char32_t,char,__mbstate_t>::~codecvt(std::codecvt<char32_t, char, mbstate_t> *this)
{
  MEMORY[0x1E0DE4BD8](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x1E0DE4D40](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D68](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E45CC238();
}

void operator delete(void *__p)
{
  off_1E45CC240(__p);
}

uint64_t operator delete()
{
  return off_1E45CC248();
}

uint64_t operator new[]()
{
  return off_1E45CC250();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E45CC258(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E45CC260(__sz, a2);
}

uint64_t operator new()
{
  return off_1E45CC268();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

uid_t getuid(void)
{
  return MEMORY[0x1E0C83828]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1E0C84DC0](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1E0C85530](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

UBool u_isWhitespace(UChar32 c)
{
  return MEMORY[0x1E0DE5A10](*(_QWORD *)&c);
}

UChar *__cdecl u_strFromUTF8(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (UChar *)MEMORY[0x1E0DE5AA0](dest, *(_QWORD *)&destCapacity, pDestLength, src, *(_QWORD *)&srcLength, pErrorCode);
}

uint64_t unum_close()
{
  return MEMORY[0x1E0DE6530]();
}

uint64_t unum_open()
{
  return MEMORY[0x1E0DE6598]();
}

uint64_t unum_parseDouble()
{
  return MEMORY[0x1E0DE65B0]();
}

uint64_t uset_close()
{
  return MEMORY[0x1E0DE6988]();
}

uint64_t uset_containsAllCodePoints()
{
  return MEMORY[0x1E0DE69A0]();
}

uint64_t uset_openPattern()
{
  return MEMORY[0x1E0DE69E0]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1E0C85CB8](__s, *(_QWORD *)&__c, __n);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

