void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_0_1(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E45CEB48;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x1A1B0E068](a1, 0x10F1C4061CF1F02);
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1B0E068);
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E45CEB48;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1A1B0E068);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x1A1B0E068);
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x1A1B0E068);
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x1A1B0E068);
}

_QWORD *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1A1803A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1A1803A90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(std::regex_iterator<std::__wrap_iter<const char *>, char> *this, std::__wrap_iter<const char *> __a, std::__wrap_iter<const char *> __b, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__re, std::regex_constants::match_flag_type __m)
{
  __int16 v5;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  std::match_results<const char *> __p;

  v5 = __m;
  this->__begin_ = __a;
  this->__end_ = __b;
  this->__pregex_ = __re;
  this->__flags_ = __m;
  *(_OWORD *)&this->__match_.__matches_.__begin_ = 0u;
  p_match = &this->__match_;
  this->__match_.__prefix_.first.__i_ = 0;
  this->__match_.__prefix_.second.__i_ = 0;
  this->__match_.__prefix_.matched = 0;
  this->__match_.__suffix_.first.__i_ = 0;
  this->__match_.__suffix_.second.__i_ = 0;
  this->__match_.__suffix_.matched = 0;
  this->__match_.__ready_ = 0;
  this->__match_.__position_start_.__i_ = 0;
  *(_OWORD *)&this->__match_.__matches_.__end_cap_.__value_ = 0u;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&this->__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                               + 1) = 0u;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)__re, (char *)__a.__i_, (char *)__b.__i_, &__p, __m);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)__a.__i_, (std::sub_match<std::__wrap_iter<const char *>> *)__b.__i_, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  return this;
}

void sub_1A1803BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  int v9;
  std::match_results<const char *>::value_type *p_unmatched;
  const char *first;
  const char *second;
  uint64_t result;
  int v14;
  const char *v15;
  int v16;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_)
      p_unmatched = &this->__unmatched_;
    else
      p_unmatched = this->__matches_.__begin_;
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    v14 = v9 | 0x80;
    v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        begin = this->__matches_.__begin_;
        end = this->__matches_.__end_;
        if (v16)
          break;
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l)
          goto LABEL_14;
      }
      if (end == begin)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
  }
  result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  _OWORD *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  const char *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t *v34;
  _BYTE v37[56];
  void *__p[2];
  _QWORD v39[4];
  std::vector<std::csub_match>::value_type __x;
  _OWORD *v41;
  _OWORD *v42;
  unint64_t v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v39, 0, 21);
    v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v37[32])
    {
      *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    v34 = a4;
    v11 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((_QWORD *)v11 - 11) = a2;
    *((_QWORD *)v11 - 10) = a2;
    *((_QWORD *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    v12 = v42;
    *((_QWORD *)v42 - 2) = v6;
    *((_DWORD *)v12 - 2) = a5;
    *((_BYTE *)v12 - 4) = a6;
    v13 = 1;
    while (2)
    {
      if ((v13 & 0xFFF) == 0 && (int)(v13 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v15 = v12 - 1;
      v14 = *((_QWORD *)v12 - 2);
      v16 = v12 - 6;
      if (v14)
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 16))(v14, v12 - 6);
      switch(*(_DWORD *)v16)
      {
        case 0xFFFFFC18:
          v17 = (const char *)*((_QWORD *)v12 - 10);
          if ((a5 & 0x20) != 0 && v17 == a2 || (a5 & 0x1000) != 0 && v17 != a3)
            goto LABEL_16;
          v25 = *v34;
          *(_QWORD *)v25 = a2;
          *(_QWORD *)(v25 + 8) = v17;
          *(_BYTE *)(v25 + 16) = 1;
          v26 = *((_QWORD *)v12 - 8);
          v27 = *((_QWORD *)v12 - 7) - v26;
          if (v27)
          {
            v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
            v29 = (_BYTE *)(v26 + 16);
            v30 = 1;
            do
            {
              v31 = v25 + 24 * v30;
              *(_OWORD *)v31 = *((_OWORD *)v29 - 1);
              v32 = *v29;
              v29 += 24;
              *(_BYTE *)(v31 + 16) = v32;
            }
            while (v28 > v30++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v18 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (_QWORD *)v42 - 12);
          v42 = v18;
          goto LABEL_23;
        case 0xFFFFFC20:
          v19 = *(v12 - 5);
          *(_OWORD *)v37 = *v16;
          *(_OWORD *)&v37[16] = v19;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v37[32], *((__int128 **)v12 - 8), *((__int128 **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v12 - 5), *((__int128 **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          v20 = *v15;
          *(_QWORD *)((char *)&v39[1] + 5) = *(_QWORD *)((char *)v12 - 11);
          v39[1] = v20;
          (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v15 + 24))(*v15, 1, v12 - 6);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v39[1] + 24))(v39[1], 0, v37);
          v21 = v42;
          if ((unint64_t)v42 >= v43)
          {
            v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v22 = *(_OWORD *)&v37[16];
            *v42 = *(_OWORD *)v37;
            v21[1] = v22;
            *((_QWORD *)v21 + 4) = 0;
            *((_QWORD *)v21 + 5) = 0;
            *((_QWORD *)v21 + 6) = 0;
            *((_QWORD *)v21 + 7) = 0;
            v21[2] = *(_OWORD *)&v37[32];
            *((_QWORD *)v21 + 6) = *(_QWORD *)&v37[48];
            memset(&v37[32], 0, 24);
            *((_QWORD *)v21 + 8) = 0;
            *((_QWORD *)v21 + 9) = 0;
            *(_OWORD *)((char *)v21 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v21 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            v23 = v39[1];
            *(_QWORD *)((char *)v21 + 85) = *(_QWORD *)((char *)&v39[1] + 5);
            *((_QWORD *)v21 + 10) = v23;
            v42 = v21 + 6;
          }
          if (*(_QWORD *)&v37[32])
          {
            *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          v12 = v42;
          ++v13;
          if (v41 != v42)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_1A1804170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  signed __int8 v6;
  signed __int8 v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  const void *p_p;
  uint64_t v21;
  BOOL v22;
  int v23;
  size_t size;
  std::vector<std::pair<std::string, std::string>>::pointer v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  size_t v30;
  std::string *data;
  size_t v32;
  int v33;
  BOOL v34;
  int v35;
  _BOOL4 negate;
  uint64_t v37;
  size_t v38;
  unsigned __int8 v39;
  std::vector<char>::pointer v40;
  unint64_t v41;
  int v42;
  std::regex_traits<char>::char_class_type v43;
  int v44;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v46;
  char *v47;
  std::vector<std::pair<std::string, std::string>>::pointer v48;
  std::vector<std::pair<std::string, std::string>>::pointer v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  const void *v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  size_t v58;
  std::vector<std::pair<std::string, std::string>>::pointer v59;
  size_t v60;
  int v61;
  _BOOL4 v62;
  int v63;
  size_t v64;
  std::string *v65;
  size_t v66;
  int v67;
  BOOL v68;
  std::vector<std::string>::pointer v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  size_t v75;
  size_t v76;
  uint64_t v77;
  BOOL v78;
  std::string *v79;
  std::string::size_type v80;
  int v81;
  std::string *v82;
  void **v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  std::regex_traits<char>::char_class_type v87;
  int v88;
  std::vector<std::string>::pointer v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  unint64_t v93;
  size_t v94;
  void *v95;
  size_t v96;
  uint64_t v97;
  BOOL v98;
  std::string *v99;
  std::string::size_type v100;
  int v101;
  std::string *v102;
  void **v103;
  uint64_t v104;
  int v105;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v108;
  std::regex_traits<char>::char_class_type neg_mask;
  int v110;
  std::__node<char> *first;
  int v112;
  char v113;
  char v114;
  uint64_t v115;
  _BOOL4 v116;
  _BOOL4 v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *__p;
  size_t v123;
  char v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  uint64_t v127;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v37 = 0;
    negate = this->__negate_;
    goto LABEL_221;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_58;
  v6 = *current;
  v125 = *current;
  v7 = current[1];
  v126 = v7;
  if (this->__icase_)
  {
    v125 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    v126 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124)
      goto LABEL_8;
LABEL_58:
    negate = 0;
    v37 = 1;
    goto LABEL_59;
  }
  v38 = v123;
  operator delete(__p);
  if (!v38)
    goto LABEL_58;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    do
    {
      if (v125 == *(p_second - 1) && v126 == *p_second)
        goto LABEL_218;
      p_second += 2;
      --v11;
    }
    while (v11);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127);
    v14 = this->__ranges_.__begin_;
    v15 = v124;
    v16 = (char *)this->__ranges_.__end_ - (char *)v14;
    if (v16)
    {
      v17 = 0;
      v18 = v16 / 48;
      v113 = v124;
      if (v124 >= 0)
        v19 = v124;
      else
        v19 = v123;
      if (v124 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v18 <= 1)
        v21 = 1;
      else
        v21 = v16 / 48;
      v22 = 1;
      while (1)
      {
        v23 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        if (v23 >= 0)
          size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        else
          size = v14->first.__r_.__value_.__l.__size_;
        if (v23 >= 0)
          v25 = v14;
        else
          v25 = (std::vector<std::pair<std::string, std::string>>::pointer)v14->first.__r_.__value_.__r.__words[0];
        if (size >= v19)
          v26 = v19;
        else
          v26 = size;
        v27 = memcmp(p_p, v25, v26);
        v28 = v19 >= size;
        if (v27)
          v28 = v27 >= 0;
        if (v28)
        {
          v29 = SHIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          if (v29 >= 0)
            v30 = HIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          else
            v30 = v14->second.__r_.__value_.__l.__size_;
          if (v29 >= 0)
            data = &v14->second;
          else
            data = (std::string *)v14->second.__r_.__value_.__l.__data_;
          if (v19 >= v30)
            v32 = v30;
          else
            v32 = v19;
          v33 = memcmp(data, p_p, v32);
          v34 = v30 >= v19;
          if (v33)
            v34 = v33 >= 0;
          if (v34)
            break;
        }
        v22 = ++v17 < v18;
        ++v14;
        if (v21 == v17)
        {
          v35 = 0;
          negate = 0;
          goto LABEL_162;
        }
      }
      negate = 1;
      v35 = 5;
LABEL_162:
      p_traits = &this->__traits_;
      v15 = v113;
    }
    else
    {
      v22 = 0;
      v35 = 0;
      negate = 0;
    }
    if (v15 < 0)
      operator delete(__p);
    if (v22)
      goto LABEL_195;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_200;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  v89 = this->__equivalences_.__begin_;
  v90 = v124;
  v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (v91)
  {
    v92 = 0;
    v93 = v91 / 24;
    v95 = __p;
    v94 = v123;
    if (v124 >= 0)
      v96 = v124;
    else
      v96 = v123;
    if (v93 <= 1)
      v97 = 1;
    else
      v97 = v91 / 24;
    v98 = 1;
    while (1)
    {
      v99 = &v89[v92];
      v100 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
      v101 = (char)v100;
      if ((v100 & 0x80u) != 0)
        v100 = v99->__r_.__value_.__l.__size_;
      if (v96 == v100)
      {
        if (v101 >= 0)
          v102 = &v89[v92];
        else
          v102 = (std::string *)v99->__r_.__value_.__r.__words[0];
        if ((v90 & 0x80) == 0)
        {
          if ((_DWORD)v90)
          {
            v103 = &__p;
            v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != v102->__r_.__value_.__s.__data_[0])
                goto LABEL_188;
              v103 = (void **)((char *)v103 + 1);
              v102 = (std::string *)((char *)v102 + 1);
              --v104;
            }
            while (v104);
            negate = 1;
            v35 = 5;
            goto LABEL_192;
          }
          negate = 1;
          if (v98)
            goto LABEL_220;
LABEL_200:
          if ((char)v125 < 0)
          {
            neg_mask = this->__neg_mask_;
            goto LABEL_213;
          }
          mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          v108 = tab[v125];
          if ((v108 & mask) == 0 && (v125 != 95 || (mask & 0x80) == 0)
            || (char)v126 < 0
            || (tab[v126] & mask) == 0 && ((mask & 0x80) == 0 || v126 != 95))
          {
            neg_mask = this->__neg_mask_;
            if ((v108 & neg_mask) != 0 || v125 == 95 && (neg_mask & 0x80) != 0)
            {
LABEL_217:
              v110 = negate;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((this->__traits_.__ct_->__tab_[v126] & neg_mask) != 0)
                goto LABEL_217;
              v110 = 1;
              if (v126 == 95 && (neg_mask & 0x80) != 0)
                goto LABEL_217;
LABEL_219:
              negate = v110;
LABEL_220:
              v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          v110 = 1;
          goto LABEL_219;
        }
        v118 = v93;
        v121 = v90;
        v105 = memcmp(v95, v102, v94);
        v93 = v118;
        v90 = v121;
        if (!v105)
          break;
      }
LABEL_188:
      v98 = ++v92 < v93;
      if (v92 == v97)
        goto LABEL_191;
    }
    v35 = 5;
    negate = 1;
    goto LABEL_193;
  }
  v98 = 0;
LABEL_191:
  v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0)
LABEL_193:
    operator delete(__p);
  if (!v98)
    goto LABEL_200;
LABEL_195:
  if (v35)
    goto LABEL_220;
  v37 = 2;
LABEL_59:
  v39 = *a2->__current_;
  v125 = v39;
  if (this->__icase_)
  {
    v39 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v39);
    v125 = v39;
  }
  v40 = this->__chars_.__begin_;
  v41 = this->__chars_.__end_ - v40;
  if (v41)
  {
    if (v41 <= 1)
      v41 = 1;
    while (1)
    {
      v42 = *v40++;
      if (v42 == v39)
        break;
      if (!--v41)
        goto LABEL_66;
    }
LABEL_77:
    negate = 1;
    goto LABEL_221;
  }
LABEL_66:
  v43 = this->__neg_mask_;
  if (v43 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v39 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v39] & v43) == 0)
      v44 = (v39 == 95) & (v43 >> 7);
    else
      LOBYTE(v44) = 1;
    end = this->__neg_chars_.__end_;
    v46 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v39, end - this->__neg_chars_.__begin_);
    v47 = v46 ? v46 : end;
    if ((v44 & 1) == 0 && v47 == end)
      goto LABEL_77;
  }
  v49 = this->__ranges_.__begin_;
  v48 = this->__ranges_.__end_;
  if (v49 != v48)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126);
      v49 = this->__ranges_.__begin_;
      v48 = this->__ranges_.__end_;
    }
    else
    {
      v124 = 1;
      LOWORD(__p) = v39;
    }
    v50 = (char *)v48 - (char *)v49;
    if (v50)
    {
      v119 = v37;
      v116 = negate;
      v51 = 0;
      v52 = v50 / 48;
      v114 = v124;
      if (v124 >= 0)
        v53 = v124;
      else
        v53 = v123;
      if (v124 >= 0)
        v54 = &__p;
      else
        v54 = __p;
      if (v52 <= 1)
        v55 = 1;
      else
        v55 = v50 / 48;
      v56 = 1;
      while (1)
      {
        v57 = SHIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        if (v57 >= 0)
          v58 = HIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        else
          v58 = v49->first.__r_.__value_.__l.__size_;
        if (v57 >= 0)
          v59 = v49;
        else
          v59 = (std::vector<std::pair<std::string, std::string>>::pointer)v49->first.__r_.__value_.__r.__words[0];
        if (v58 >= v53)
          v60 = v53;
        else
          v60 = v58;
        v61 = memcmp(v54, v59, v60);
        v62 = v53 >= v58;
        if (v61)
          v62 = v61 >= 0;
        if (v62)
        {
          v63 = SHIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          if (v63 >= 0)
            v64 = HIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          else
            v64 = v49->second.__r_.__value_.__l.__size_;
          if (v63 >= 0)
            v65 = &v49->second;
          else
            v65 = (std::string *)v49->second.__r_.__value_.__l.__data_;
          if (v53 >= v64)
            v66 = v64;
          else
            v66 = v53;
          v67 = memcmp(v65, v54, v66);
          v68 = v64 >= v53;
          if (v67)
            v68 = v67 >= 0;
          if (v68)
            break;
        }
        v56 = ++v51 < v52;
        ++v49;
        if (v55 == v51)
        {
          negate = v116;
          goto LABEL_123;
        }
      }
      negate = 1;
LABEL_123:
      v37 = v119;
      if ((v114 & 0x80) == 0)
        goto LABEL_125;
    }
    else
    {
      v56 = 0;
      if ((v124 & 0x80) == 0)
        goto LABEL_125;
    }
    operator delete(__p);
LABEL_125:
    if (v56)
      goto LABEL_221;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_154;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  v69 = this->__equivalences_.__begin_;
  v70 = v124;
  v71 = (char *)this->__equivalences_.__end_ - (char *)v69;
  if (v71)
  {
    v120 = v37;
    v72 = 0;
    v73 = v71 / 24;
    v74 = __p;
    v75 = v123;
    if (v124 >= 0)
      v76 = v124;
    else
      v76 = v123;
    if (v73 <= 1)
      v77 = 1;
    else
      v77 = v71 / 24;
    v78 = 1;
    while (1)
    {
      v79 = &v69[v72];
      v80 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
      v81 = (char)v80;
      if ((v80 & 0x80u) != 0)
        v80 = v79->__r_.__value_.__l.__size_;
      if (v76 == v80)
      {
        if (v81 >= 0)
          v82 = &v69[v72];
        else
          v82 = (std::string *)v79->__r_.__value_.__r.__words[0];
        if ((v70 & 0x80) != 0)
        {
          v117 = negate;
          v85 = v73;
          v115 = v77;
          v86 = memcmp(v74, v82, v75);
          v77 = v115;
          v73 = v85;
          negate = v117;
          if (!v86)
          {
            negate = 1;
            v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!(_DWORD)v70)
          {
            negate = 1;
            v37 = v120;
            if (!v78)
              goto LABEL_154;
            goto LABEL_221;
          }
          v83 = &__p;
          v84 = v70;
          while (*(unsigned __int8 *)v83 == v82->__r_.__value_.__s.__data_[0])
          {
            v83 = (void **)((char *)v83 + 1);
            v82 = (std::string *)((char *)v82 + 1);
            if (!--v84)
            {
              negate = 1;
              goto LABEL_149;
            }
          }
        }
      }
      v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        v37 = v120;
        if ((v70 & 0x80) == 0)
          goto LABEL_153;
        goto LABEL_152;
      }
    }
  }
  v78 = 0;
  if (v124 < 0)
LABEL_152:
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0)
      goto LABEL_221;
    v87 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v125] & v87) == 0)
    {
      v88 = (v87 >> 7) & 1;
      if (v125 != 95)
        v88 = 0;
      if (v88 != 1)
        goto LABEL_221;
    }
    goto LABEL_77;
  }
LABEL_221:
  if (negate == this->__negate_)
  {
    first = 0;
    v112 = -993;
  }
  else
  {
    a2->__current_ += v37;
    first = this->__first_;
    v112 = -995;
  }
  a2->__do_ = v112;
  a2->__node_ = first;
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

void **std::__split_buffer<std::__state<char>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::__state<char>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::size_type v3;
  BOOL v4;
  std::vector<std::csub_match>::size_type v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  v4 = __sz >= v3;
  v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a1 + 28))
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::__compressed_pair<std::pair<unsigned long, const char *> *, std::allocator<std::pair<unsigned long, const char *>>> *p_end_cap;
  std::pair<unsigned long, const char *> *v5;
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = (char *)v7 - (char *)this->__begin_;
    v9 = __n + (v8 >> 4);
    if (v9 >> 60)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)p_end_cap, v12);
    else
      v13 = 0;
    v14 = (std::pair<unsigned long, const char *> *)&v13[16 * v10];
    v15 = (std::pair<unsigned long, const char *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    v16 = &v14[__n];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::match_results<char const*>::__init(std::match_results<const char *> *this, unsigned int __s, const char *__f, const char *__l, BOOL __no_update_pos)
{
  std::match_results<const char *>::value_type *p_unmatched;

  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos)
    this->__position_start_ = __f;
  this->__ready_ = 1;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __sz)
{
  std::vector<std::ssub_match>::size_type v2;
  BOOL v3;
  std::vector<std::ssub_match>::size_type v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  v3 = __sz >= v2;
  v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  std::vector<std::ssub_match>::pointer v7;
  std::sub_match<std::__wrap_iter<const char *>> *v8;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *v9;
  BOOL v10;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  end = p_match->__matches_.__end_;
  v9 = &__x->__match_;
  v7 = __x->__match_.__matches_.__begin_;
  v8 = v9->__matches_.__end_;
  v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7)
    return this->__begin_.__i_ == __x->__begin_.__i_
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::string>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *applesauce::CF::details::CFString_get_value<false>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v7;
  CFIndex maxBufLen;
  CFRange v9;
  CFRange v10;

  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, CStringPtr);
  Length = CFStringGetLength(a1);
  maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a2, maxBufLen, 0);
  if (*(char *)(a2 + 23) >= 0)
    v7 = (UInt8 *)a2;
  else
    v7 = *(UInt8 **)a2;
  v10.location = 0;
  v10.length = Length;
  return (_QWORD *)CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 != (unsigned __int8 *)a3)
  {
    while (*v8 == 124)
    {
      v12 = a1->__end_;
      v13 = v8 + 1;
      v14 = v8 + 1;
      do
      {
        v8 = v14;
        v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v14, a3);
      }
      while (v14 != v8);
      if (v8 == v13)
      {
        v15 = (std::__node<char> *)operator new();
        v16 = a1->__end_;
        v17 = v16->__first_;
        v15[1].__vftable = (std::__node<char>_vtbl *)v17;
        v16->__first_ = v15;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
      if (v8 == (unsigned __int8 *)a3)
        return a3;
    }
    return (char *)v8;
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t *v7;
  char *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  std::string *v17;
  uint64_t v18;
  std::string::size_type size;
  char v20;
  uint64_t v22;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      v6 = v10;
      v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = (_BYTE *)v18;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_36;
LABEL_28:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    v20 = 1;
    v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = (_BYTE *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if ((_DWORD)v16 == 92)
    {
      if (v11)
        v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      else
        v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v20 & 1) != 0)
    return v4;
  return (_BYTE *)v6;
}

void sub_1A1805D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](this);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::pair<std::string, std::string> *v4;
  std::pair<std::string, std::string> *begin;
  std::pair<std::string, std::string> *end;
  std::pair<std::string, std::string> *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  std::__bracket_expression<char, std::regex_traits<char>> *v4;

  v4 = (std::__bracket_expression<char, std::regex_traits<char>> *)operator new();
  std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v4, (uint64_t)this, (uint64_t)this->__end_->__first_, __negate, this->__flags_ & 1, (this->__flags_ & 8) != 0);
  this->__end_->__first_ = v4;
  this->__end_ = v4;
  return v4;
}

void sub_1A1806184(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1B0E068](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &unk_1E45CF2F0;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&unk_1E45CEB78;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_1A18062C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&unk_1E45CE938;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&unk_1E45CF230;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  char *v3;
  int v6;
  char *v7;
  BOOL v8;
  char *v9;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v18;
  int v20;
  BOOL v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      v8 = v6 == 40;
      v7 = a2 + 1;
      v8 = !v8 || v7 == a3;
      if (!v8)
      {
        v8 = *v7 == 63;
        v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            marked_count = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            v13 = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_31:
            v3 = v12 + 1;
            std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&v23.__start_);
            std::locale::~locale(&v23.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
LABEL_21:
    *(_QWORD *)v14 = v18 + 16;
    *(_QWORD *)(v14 + 8) = first;
    *(_BYTE *)(v14 + 16) = v15;
    end->__first_ = (std::__node<char> *)v14;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    goto LABEL_21;
  }
  if (a2 + 1 != a3)
  {
    v20 = a2[1];
    if (v20 == 66)
    {
      v21 = 1;
    }
    else
    {
      if (v20 != 98)
        return v3;
      v21 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v21);
    v3 += 2;
  }
  return v3;
}

void sub_1A180664C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v6;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  int *p_open_count;
  unsigned __int8 *v12;
  unsigned int marked_count;
  unsigned __int8 *v14;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = (char)*a2;
  if (v6 > 62)
  {
    if (v6 > 91)
    {
      if (v6 == 92)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, a2, a3);
      if (v6 != 123)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    }
    else
    {
      if (v6 == 91)
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      if (v6 != 63)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    }
LABEL_29:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
  if (v6 == 40)
  {
    if (a2 + 1 == a3)
      goto LABEL_30;
    if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
    {
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
      if (v12 == a3)
        goto LABEL_30;
      v3 = v12;
      if (*v12 != 41)
        goto LABEL_30;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v14 == a3 || (v3 = v14, *v14 != 41))
LABEL_30:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
    }
    --*p_open_count;
    return ++v3;
  }
  if (v6 == 46)
  {
    v7 = (std::__node<char> *)operator new();
    end = this->__end_;
    first = end->__first_;
    v7->__vftable = (std::__node<char>_vtbl *)&unk_1E45CF260;
    v7[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v7;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if ((v6 - 42) < 2)
    goto LABEL_29;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E45CE968;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>((std::basic_regex<char> *)a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (char *)a3);
  }
}

void sub_1A18069D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  int v4;
  int v5;
  int v6;

  if (a2 != a3)
  {
    v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38)
            break;
          if (v5 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3)
            return a3;
        }
      }
    }
  }
  return a2;
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1A1B0DFA8]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E0DE4C08]);
  return this;
}

void sub_1A1806AD4(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;
  BOOL v5;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = (char)*a2;
    v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1A1806DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1A1806E90(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::CF::details::CFString_get_value<true>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v7;
  CFIndex maxBufLen;
  CFRange v9;
  CFRange v10;

  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, CStringPtr);
  Length = CFStringGetLength(a1);
  maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a2, maxBufLen, 0);
  if (*(char *)(a2 + 23) >= 0)
    v7 = (UInt8 *)a2;
  else
    v7 = *(UInt8 **)a2;
  v10.location = 0;
  v10.length = Length;
  return (_QWORD *)CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void sub_1A1806F8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t std::__split_buffer<std::vector<CFRange>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<CFRange>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t _nlpDefaultLog()
{
  if (_nlpDefaultLog::token != -1)
    dispatch_once(&_nlpDefaultLog::token, &__block_literal_global);
  return _nlpDefaultLog::log;
}

os_log_t ___nlpDefaultLog_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.NLP", "NLPDefaultLog");
  _nlpDefaultLog::log = (uint64_t)result;
  return result;
}

uint64_t _nlpSignpostLog()
{
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  return _nlpSignpostLog::log;
}

os_log_t ___nlpSignpostLog_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.NLP", "NLPSignposts");
  _nlpSignpostLog::log = (uint64_t)result;
  return result;
}

uint64_t _CFInit_TextSlotWrapper(uint64_t result)
{
  *(_QWORD *)(result + 16) = &unk_1E45CD348;
  return result;
}

uint64_t createTextSlotWrapper(NLTextSlot *a1)
{
  uint64_t result;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_TextSlotWrapper)
  {
    qword_1EDBB1A68 = 0;
    unk_1EDBB1A78 = 0u;
    unk_1EDBB1A88 = 0u;
    g_CFTypeID_TextSlotWrapper = _CFRuntimeRegisterClass();
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

uint64_t NLTextSlotGetRange(uint64_t a1)
{
  NLTextSlot *v1;

  v1 = *(NLTextSlot **)(a1 + 24);
  if (v1)
    return NLTextSlot::getRange(v1);
  else
    return -1;
}

NLTextSlot *NLTextSlotGetSlotID(uint64_t a1)
{
  NLTextSlot *result;

  result = *(NLTextSlot **)(a1 + 24);
  if (result)
    return (NLTextSlot *)NLTextSlot::getSlotID(result);
  return result;
}

NLTextSlot *NLTextSlotGetResolvedDate(uint64_t a1)
{
  NLTextSlot *result;

  result = *(NLTextSlot **)(a1 + 24);
  if (result)
    return (NLTextSlot *)NLTextSlot::getResolvedDate(result);
  return result;
}

NLTextSlot *NLTextSlotIsAllDayEvent(uint64_t a1)
{
  NLTextSlot *result;

  result = *(NLTextSlot **)(a1 + 24);
  if (result)
    return (NLTextSlot *)NLTextSlot::getAllDayEventFlag(result);
  return result;
}

uint64_t _CFInit_TextSlotRecurrentEventWrapper(uint64_t result)
{
  *(_QWORD *)(result + 16) = &unk_1E45CE2B0;
  return result;
}

uint64_t createTextSlotRecurrentEventWrapper(NLTextSlotRecurrentEvent *a1)
{
  uint64_t result;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_TextSlotRecurrentEventWrapper)
  {
    qword_1EDBB1A08 = 0;
    unk_1EDBB1A18 = 0u;
    unk_1EDBB1A28 = 0u;
    g_CFTypeID_TextSlotRecurrentEventWrapper = _CFRuntimeRegisterClass();
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

NL::AssetResource *NLTextSlotRecurrentEventGetEventStartDate(uint64_t a1)
{
  NL::AssetResource *result;

  result = *(NL::AssetResource **)(a1 + 24);
  if (result)
    return (NL::AssetResource *)NL::AssetResource::URL(result);
  return result;
}

NLTextSlotRecurrentEvent *NLTextSlotRecurrentEventGetEventEndDate(uint64_t a1)
{
  NLTextSlotRecurrentEvent *result;

  result = *(NLTextSlotRecurrentEvent **)(a1 + 24);
  if (result)
    return (NLTextSlotRecurrentEvent *)NLTextSlotRecurrentEvent::getEventEndDate(result);
  return result;
}

NL::Resource *NLTextSlotRecurrentEventGetEventFrequency(uint64_t a1)
{
  NL::Resource *result;

  result = *(NL::Resource **)(a1 + 24);
  if (result)
    return (NL::Resource *)NL::Resource::name(result);
  return result;
}

uint64_t NLTextSlotRecurrentEventGetEventRange(uint64_t a1)
{
  NLTextStructuredEvent *v1;

  v1 = *(NLTextStructuredEvent **)(a1 + 24);
  if (v1)
    return NLTextStructuredEvent::getActionPhraseRange(v1);
  else
    return -1;
}

NLTextSlotRecurrentEvent *NLTextSlotRecurrentEventIsAllDayEvent(uint64_t a1)
{
  NLTextSlotRecurrentEvent *result;

  result = *(NLTextSlotRecurrentEvent **)(a1 + 24);
  if (result)
    return (NLTextSlotRecurrentEvent *)NLTextSlotRecurrentEvent::getAllDayEventFlag(result);
  return result;
}

uint64_t _CFInit_TextStructuredEventWrapper(uint64_t result)
{
  *(_QWORD *)(result + 16) = &unk_1E45CDF30;
  return result;
}

uint64_t createTextStructuredEventWrapper(NLTextStructuredEvent *a1)
{
  uint64_t result;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_TextStructuredEventWrapper)
  {
    qword_1EDBB1BE8 = 0;
    unk_1EDBB1BF8 = 0u;
    unk_1EDBB1C08 = 0u;
    g_CFTypeID_TextStructuredEventWrapper = _CFRuntimeRegisterClass();
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

uint64_t NLTextStructuredEventGetEventDescriptorRange(uint64_t a1)
{
  NLTextSlot *v1;

  v1 = *(NLTextSlot **)(a1 + 24);
  if (v1)
    return NLTextSlot::getRange(v1);
  else
    return -1;
}

uint64_t NLTextStructuredEventGetActionPhraseRange(uint64_t a1)
{
  NLTextStructuredEvent *v1;

  v1 = *(NLTextStructuredEvent **)(a1 + 24);
  if (v1)
    return NLTextStructuredEvent::getActionPhraseRange(v1);
  else
    return -1;
}

NL::Resource *NLTextStructuredEventGetEventFixedDateSlot(uint64_t a1)
{
  NL::Resource *result;
  NLTextSlot *v2;

  result = *(NL::Resource **)(a1 + 24);
  if (result)
  {
    v2 = (NLTextSlot *)NL::Resource::name(result);
    return (NL::Resource *)createTextSlotWrapper(v2);
  }
  return result;
}

NLTextStructuredEvent *NLTextStructuredEventGetRecurrentEvent(uint64_t a1)
{
  NLTextStructuredEvent *result;
  NLTextSlotRecurrentEvent *RecurrentEvent;

  result = *(NLTextStructuredEvent **)(a1 + 24);
  if (result)
  {
    RecurrentEvent = (NLTextSlotRecurrentEvent *)NLTextStructuredEvent::getRecurrentEvent(result);
    return (NLTextStructuredEvent *)createTextSlotRecurrentEventWrapper(RecurrentEvent);
  }
  return result;
}

__CFArray *NLTextStructuredEventGetLocationRanges(uint64_t a1)
{
  __CFArray *Mutable;
  NLTextStructuredEvent *v3;
  NLTextSlot **v4;
  NLTextSlot **v5;
  const void *TextSlotWrapper;
  NLTextSlot **v8;
  NLTextSlot **v9;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = *(NLTextStructuredEvent **)(a1 + 24);
  if (v3)
  {
    NLTextStructuredEvent::getLocationRanges(v3, &v8);
    v4 = v8;
    v5 = v9;
    if (v8 != v9)
    {
      do
      {
        TextSlotWrapper = (const void *)createTextSlotWrapper(*v4);
        CFArrayAppendValue(Mutable, TextSlotWrapper);
        CFRelease(TextSlotWrapper);
        ++v4;
      }
      while (v4 != v5);
      v4 = v8;
    }
    if (v4)
    {
      v9 = v4;
      operator delete(v4);
    }
  }
  return Mutable;
}

void sub_1A180753C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *NLTextStructuredEventGetPeopleRanges(uint64_t a1)
{
  __CFArray *Mutable;
  NLTextStructuredEvent *v3;
  NLTextSlot **v4;
  NLTextSlot **v5;
  const void *TextSlotWrapper;
  NLTextSlot **v8;
  NLTextSlot **v9;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = *(NLTextStructuredEvent **)(a1 + 24);
  if (v3)
  {
    NLTextStructuredEvent::getPeopleRanges(v3, &v8);
    v4 = v8;
    v5 = v9;
    if (v8 != v9)
    {
      do
      {
        TextSlotWrapper = (const void *)createTextSlotWrapper(*v4);
        CFArrayAppendValue(Mutable, TextSlotWrapper);
        CFRelease(TextSlotWrapper);
        ++v4;
      }
      while (v4 != v5);
      v4 = v8;
    }
    if (v4)
    {
      v9 = v4;
      operator delete(v4);
    }
  }
  return Mutable;
}

void sub_1A1807604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _CFInit_TextSlotParserWrapper(uint64_t result)
{
  *(_QWORD *)(result + 16) = &unk_1E45CD720;
  return result;
}

uint64_t createTextSlotParserWrapper(NLTextSlotParser *a1)
{
  uint64_t result;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_TextSlotParserWrapper)
  {
    qword_1EDBB1B88 = 0;
    unk_1EDBB1B98 = 0u;
    unk_1EDBB1BA8 = 0u;
    g_CFTypeID_TextSlotParserWrapper = _CFRuntimeRegisterClass();
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

const __CFDictionary *NLTextSlotParserCreate(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  const __CFLocale *Value;
  NLTextSlotParser *v3;

  if (result)
  {
    v1 = result;
    Value = (const __CFLocale *)CFDictionaryGetValue(result, kNLTextSlotParserLocaleKey[0]);
    v3 = (NLTextSlotParser *)operator new();
    NLTextSlotParser::NLTextSlotParser(v3, Value, v1);
    return (const __CFDictionary *)createTextSlotParserWrapper(v3);
  }
  return result;
}

#error "1A1807788: call analysis failed (funcsize=29)"

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

NLTextSlotParser *NLTextSlotParserCreateStructuredEvent(uint64_t a1, const __CFString *a2, const __CFTimeZone *a3)
{
  NLTextSlotParser *result;
  NLTextStructuredEvent *StructuredEvent;

  result = *(NLTextSlotParser **)(a1 + 24);
  if (result)
  {
    StructuredEvent = (NLTextStructuredEvent *)NLTextSlotParser::createStructuredEvent(result, a2, a3);
    return (NLTextSlotParser *)createTextStructuredEventWrapper(StructuredEvent);
  }
  return result;
}

void TextSlotWrapper::~TextSlotWrapper(TextSlotWrapper *this)
{
  TextSlotWrapper::~TextSlotWrapper(this);
  JUMPOUT(0x1A1B0E068);
}

{
  NLTextSlot *v2;

  *(_QWORD *)this = &unk_1E45CD348;
  v2 = (NLTextSlot *)*((_QWORD *)this + 1);
  if (v2)
  {
    NLTextSlot::~NLTextSlot(v2);
    MEMORY[0x1A1B0E068]();
  }
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

uint64_t NL::CFType::Copy(NL::CFType *this, const __CFAllocator *a2)
{
  return 0;
}

uint64_t NL::CFType::Equal(NL::CFType *this, const NL::CFType *a2)
{
  return 0;
}

uint64_t NL::CFType::Hash(NL::CFType *this)
{
  return 0;
}

uint64_t NL::CFType::CopyFormattingDesc(NL::CFType *this, const __CFDictionary *a2)
{
  return 0;
}

uint64_t NL::CFType::CopyDebugDesc(NL::CFType *this)
{
  return 0;
}

void TextSlotRecurrentEventWrapper::~TextSlotRecurrentEventWrapper(TextSlotRecurrentEventWrapper *this)
{
  TextSlotRecurrentEventWrapper::~TextSlotRecurrentEventWrapper(this);
  JUMPOUT(0x1A1B0E068);
}

{
  NLTextSlotRecurrentEvent *v2;

  *(_QWORD *)this = &unk_1E45CE2B0;
  v2 = (NLTextSlotRecurrentEvent *)*((_QWORD *)this + 1);
  if (v2)
  {
    NLTextSlotRecurrentEvent::~NLTextSlotRecurrentEvent(v2);
    MEMORY[0x1A1B0E068]();
  }
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

void TextStructuredEventWrapper::~TextStructuredEventWrapper(TextStructuredEventWrapper *this)
{
  TextStructuredEventWrapper::~TextStructuredEventWrapper(this);
  JUMPOUT(0x1A1B0E068);
}

{
  NLTextStructuredEvent *v2;

  *(_QWORD *)this = &unk_1E45CDF30;
  v2 = (NLTextStructuredEvent *)*((_QWORD *)this + 1);
  if (v2)
  {
    NLTextStructuredEvent::~NLTextStructuredEvent(v2);
    MEMORY[0x1A1B0E068]();
  }
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

void TextSlotParserWrapper::~TextSlotParserWrapper(TextSlotParserWrapper *this)
{
  TextSlotParserWrapper::~TextSlotParserWrapper(this);
  JUMPOUT(0x1A1B0E068);
}

{
  NLTextSlotParser *v2;

  *(_QWORD *)this = &unk_1E45CD720;
  v2 = (NLTextSlotParser *)*((_QWORD *)this + 1);
  if (v2)
  {
    NLTextSlotParser::~NLTextSlotParser(v2);
    MEMORY[0x1A1B0E068]();
  }
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

uint64_t NL::SpotlightParseFormatter::SpotlightParseFormatter(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NL::SpotlightUserContext *v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = (std::__shared_weak_count *)a2[1];
  v20 = *a2;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a3[1];
  v18 = *a3;
  v19 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  NL::ParseFormatter::ParseFormatter(a1, &v20, &v18);
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)a1 = &off_1E45CE548;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = a1 + 296;
  v16 = (NL::SpotlightUserContext *)operator new();
  NL::SpotlightUserContext::SpotlightUserContext(v16);
  std::unique_ptr<NL::SpotlightUserContext>::reset[abi:ne180100]((const void ***)(a1 + 144), (const void **)v16);
  NL::SpotlightParseFormatter::loadDates((NL::SpotlightParseFormatter *)a1);
  NL::SpotlightParseFormatter::load(a1, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 40));
  return a1;
}

void sub_1A1807BB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void ***v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = v8;
  MEMORY[0x1A1B0E068](v9, 0x1020C405730B0C9);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1 + 288, *(_QWORD **)(v1 + 296));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1 + 264, *(_QWORD **)(v1 + 272));
  std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::destroy(v7, *(_QWORD **)(v1 + 248));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(v6, *(_QWORD **)(v1 + 224));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(v5, *(_QWORD **)(v1 + 200));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(v4, *(_QWORD **)(v1 + 176));
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v3);
  std::unique_ptr<NL::SpotlightUserContext>::reset[abi:ne180100](v2, 0);
  NL::ParseFormatter::~ParseFormatter((const void **)v1);
  _Unwind_Resume(a1);
}

const void **std::unique_ptr<NL::SpotlightUserContext>::reset[abi:ne180100](const void ***a1, const void **a2)
{
  const void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::SpotlightUserContext::~SpotlightUserContext(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

void NL::SpotlightParseFormatter::loadDates(NL::SpotlightParseFormatter *this)
{
  uint64_t **v1;
  _OWORD *v2;
  _OWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  void *__p[2];
  char v26;
  void **v27;

  v1 = (uint64_t **)((char *)this + 264);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
  v27 = __p;
  v2 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v2 + 56, "kMDItemUserSharedSentDate");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILSENT");
  v27 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v3 + 56, "com_apple_mail_dateSent");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
  v27 = __p;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v4 + 56, "kMDItemContentCreationDate");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGESENT");
  v27 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v5 + 56, "kMDItemContentCreationDate");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGESENT");
  v27 = __p;
  v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v6 + 56, "kMDItemContentCreationDate");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
  v27 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v7 + 56, "kMDItemUserSharedReceivedDate");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
  v27 = __p;
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v8 + 56, "com_apple_mail_dateReceived");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
  v27 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v9 + 56, "com_apple_mail_dateReceived");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGERECEIVED");
  v27 = __p;
  v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v10 + 56, "kMDItemDateAdded");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGERECEIVED");
  v27 = __p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v11 + 56, "kMDItemDateAdded");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "USERCREATED");
  v27 = __p;
  v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v12 + 56, "kMDItemUserCreatedDate");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "FILECREATED");
  v27 = __p;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v13 + 56, "kMDItemContentCreationDate");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "USERMODIFIED");
  v27 = __p;
  v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v14 + 56, "kMDItemUserModifiedDate");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILMODIFIED");
  v27 = __p;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v15 + 56, "kMDItemUsedDate");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "FILEMODIFIED");
  v27 = __p;
  v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v16 + 56, "kMDItemContentModificationDate");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "USERPRINTED");
  v27 = __p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v17 + 56, "kMDItemUserPrintedDate");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "USERWEBVIEWED");
  v27 = __p;
  v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v18 + 56, "kMDItemDateAdded");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "FILEVIEWED");
  v27 = __p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v19 + 56, "kMDItemLastUsedDate");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "WEBVIEWED");
  v27 = __p;
  v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v20 + 56, "kMDItemDateAdded");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILVIEWED");
  v27 = __p;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v21 + 56, "com_apple_mail_dateLastViewed");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILVIEWED");
  v27 = __p;
  v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v22 + 56, "com_apple_mail_dateLastViewed");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "FILEDOWNLOADED");
  v27 = __p;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v23 + 56, "kMDItemDownloadDate");
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "FILEADDED");
  v27 = __p;
  v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A1B0DE04]((char *)v24 + 56, "kMDItemDateAdded");
  if (v26 < 0)
    operator delete(__p[0]);
}

void sub_1A1808454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NL::SpotlightParseFormatter::load(uint64_t a1, int a2)
{
  uint64_t **v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t **v7;
  _OWORD *v8;
  uint64_t **v9;
  _OWORD *v10;
  uint64_t **v11;
  _OWORD *v12;
  uint64_t **v13;
  _OWORD *v14;
  uint64_t **v15;
  _OWORD *v16;
  uint64_t **v17;
  _OWORD *v18;
  uint64_t **v19;
  _OWORD *v20;
  uint64_t **v21;
  _OWORD *v22;
  uint64_t **v23;
  _OWORD *v24;
  uint64_t **v25;
  _OWORD *v26;
  uint64_t **v27;
  _OWORD *v28;
  uint64_t **v29;
  _OWORD *v30;
  uint64_t **v31;
  _OWORD *v32;
  uint64_t **v33;
  _OWORD *v34;
  void *__p[2];
  char v36;
  void *v37[2];
  char v38;
  void **v39;

  v4 = (uint64_t **)(a1 + 216);
  v5 = (_QWORD *)(a1 + 224);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1 + 216, *(_QWORD **)(a1 + 224));
  *(_QWORD *)(a1 + 216) = v5;
  *v5 = 0;
  v6 = *(_QWORD **)(a1 + 176);
  *(_QWORD *)(a1 + 232) = 0;
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1 + 168, v6);
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "TO");
  __p[0] = v37;
  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v39 = __p;
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A1B0DE04]((char *)v8 + 56, "kMDUserQueryRecipientKey");
  if (v36 < 0)
    operator delete(__p[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "TO");
  __p[0] = v37;
  v9 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v39 = __p;
  v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A1B0DE04]((char *)v10 + 56, "kMDUserQueryRecipientKey");
  if (v36 < 0)
    operator delete(__p[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "SENTO");
  __p[0] = v37;
  v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v39 = __p;
  v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v11 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A1B0DE04]((char *)v12 + 56, "kMDUserQueryRecipientKey");
  if (v36 < 0)
    operator delete(__p[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "SENTO");
  __p[0] = v37;
  v13 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v39 = __p;
  v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A1B0DE04]((char *)v14 + 56, "kMDUserQueryRecipientKey");
  if (v36 < 0)
    operator delete(__p[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "RECIPIENT");
  __p[0] = v37;
  v15 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v39 = __p;
  v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v15 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A1B0DE04]((char *)v16 + 56, "kMDUserQueryRecipientKey");
  if (v36 < 0)
    operator delete(__p[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "RECIPIENT");
  __p[0] = v37;
  v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v39 = __p;
  v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A1B0DE04]((char *)v18 + 56, "kMDUserQueryRecipientKey");
  if (v36 < 0)
    operator delete(__p[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "FROM");
  __p[0] = v37;
  v19 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v39 = __p;
  v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A1B0DE04]((char *)v20 + 56, "kMDUserQuerySenderKey");
  if (v36 < 0)
    operator delete(__p[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "FROM");
  __p[0] = v37;
  v21 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v39 = __p;
  v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v21 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A1B0DE04]((char *)v22 + 56, "kMDUserQuerySenderKey");
  if (v36 < 0)
    operator delete(__p[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "SENDER");
  __p[0] = v37;
  v23 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v39 = __p;
  v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v23 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A1B0DE04]((char *)v24 + 56, "kMDUserQuerySenderKey");
  if (v36 < 0)
    operator delete(__p[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "SENDER");
  __p[0] = v37;
  v25 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v39 = __p;
  v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v25 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A1B0DE04]((char *)v26 + 56, "kMDUserQuerySenderKey");
  if (v36 < 0)
    operator delete(__p[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "KIND");
  __p[0] = v37;
  v27 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailKind");
  v39 = __p;
  v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v27 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A1B0DE04]((char *)v28 + 56, "kMDUserQueryKindKey");
  if (v36 < 0)
    operator delete(__p[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "KIND");
  __p[0] = v37;
  v29 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MessageKind");
  v39 = __p;
  v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v29 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A1B0DE04]((char *)v30 + 56, "kMDUserQueryKindKey");
  if (v36 < 0)
    operator delete(__p[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "TITLED");
  __p[0] = v37;
  v31 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v39 = __p;
  v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v31 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A1B0DE04]((char *)v32 + 56, "kMDUserQueryTitleKey");
  if (v36 < 0)
    operator delete(__p[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "ABOUT");
  __p[0] = v37;
  v33 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v39 = __p;
  v34 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v33 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A1B0DE04]((char *)v34 + 56, "kMDUserQueryTopicKey");
  if (v36 < 0)
    operator delete(__p[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  if (a2 == 1)
  {
    NL::SpotlightParseFormatter::loadMailTranslations((NL::SpotlightParseFormatter *)a1);
  }
  else if (a2 == 3)
  {
    NL::SpotlightParseFormatter::loadNotesTranslations((NL::SpotlightParseFormatter *)a1);
  }
  else
  {
    NL::SpotlightParseFormatter::loadSpotlightTranslations((NL::SpotlightParseFormatter *)a1);
  }
  NL::SpotlightParseFormatter::loadUserQueries((NL::SpotlightParseFormatter *)a1);
}

void sub_1A1808DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NL::SpotlightParseFormatter::~SpotlightParseFormatter(NL::SpotlightParseFormatter *this)
{
  *(_QWORD *)this = &off_1E45CE548;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 288, *((_QWORD **)this + 37));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 264, *((_QWORD **)this + 34));
  std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::destroy((uint64_t)this + 240, *((_QWORD **)this + 31));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 216, *((_QWORD **)this + 28));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 192, *((_QWORD **)this + 25));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 168, *((_QWORD **)this + 22));
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 152);
  std::unique_ptr<NL::SpotlightUserContext>::reset[abi:ne180100]((const void ***)this + 18, 0);
  NL::ParseFormatter::~ParseFormatter((const void **)this);
}

{
  NL::SpotlightParseFormatter::~SpotlightParseFormatter(this);
  JUMPOUT(0x1A1B0E068);
}

__CFDictionary *NL::SpotlightParseFormatter::copyDefaultParseResult(CFStringRef *this, char a2)
{
  CFStringRef v4;
  CFAllocatorRef *v5;
  const __CFString *info;
  CFStringRef Copy;
  const void **v8;
  const __CFString *v9;
  _BOOL4 v10;
  CFIndex Length;
  uint64_t v12;
  int v13;
  CFRange v14;
  const __CFString *v15;
  const __CFString *v16;
  CFStringRef CFStringFromString;
  __CFArray *v18;
  __CFDictionary *v19;
  void *__p[2];
  char v22;
  std::string v23;
  std::string v24;
  const __CFString *v25;

  NL::SpotlightParseFormatter::reset((NL::SpotlightParseFormatter *)this);
  v4 = this[3];
  v5 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v4 && (info = (const __CFString *)v4[3].info) != 0)
  {
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], info);
    v8 = (const void **)(this + 5);
  }
  else
  {
    v8 = (const void **)(this + 5);
    Copy = &stru_1E45D0A48;
  }
  nlp::CFScopedPtr<__CFString const*>::reset(v8, Copy);
  v9 = this[5];
  if (!v9)
    goto LABEL_24;
  v10 = LOBYTE(this[1][2].isa) != 0;
  Length = CFStringGetLength(this[5]);
  v12 = 200;
  if (!v10 || Length <= 200)
    v12 = Length;
  v13 = v12 < 801 || v10;
  v14.length = v13 ? v12 : 800;
  v14.location = 0;
  v15 = CFStringCreateWithSubstring(*v5, v9, v14);
  v25 = v15;
  if (v15)
  {
    v16 = v15;
    getUTF8StringFromCFString(v15, &v24);
    escapeContent(&v24);
    std::string::basic_string[abi:ne180100]<0>(&v23, "(** = \"%@*\"cdwt)");
    std::string::basic_string[abi:ne180100]<0>(__p, "%@");
    replaceAll(&v23, (char *)__p, (uint64_t)&v24);
    if (v22 < 0)
      operator delete(__p[0]);
    CFStringFromString = createCFStringFromString((uint64_t)&v23);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    CFRelease(v16);
    if (CFStringFromString)
    {
      v18 = (__CFArray *)this[7];
      if (v18)
        CFArrayAppendValue(v18, CFStringFromString);
    }
  }
  else
  {
LABEL_24:
    CFStringFromString = 0;
  }
  v19 = NL::ParseFormatter::copyFormattedResult((NL::ParseFormatter *)this, a2);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  return v19;
}

void sub_1A1809124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v28 - 56), 0);
  _Unwind_Resume(a1);
}

void NL::SpotlightParseFormatter::reset(NL::SpotlightParseFormatter *this)
{
  int v2;

  v2 = *(_DWORD *)(*((_QWORD *)this + 1) + 40);
  if (*((_DWORD *)this + 24) != v2)
    NL::SpotlightParseFormatter::load((uint64_t)this, v2);
  NL::ParseFormatter::reset((const void **)this);
}

void nlp::CFScopedPtr<__CFString const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

CFStringRef NL::SpotlightParseFormatter::copyDateRangeTerm(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFStringRef v5;
  uint64_t v9;
  uint64_t v10;
  CFStringRef CFStringFromString;

  v5 = 0;
  if (a4 && a5)
  {
    v9 = a1 + 264;
    if (a1 + 272 == std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 264, a2))return 0;
    v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v9, a2);
    CFStringFromString = createCFStringFromString(v10 + 56);
    if (!CFStringFromString)
    {
      return 0;
    }
    else
    {
      v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("InRange(%@,%@,%@)"), CFStringFromString, a4, a5, CFStringFromString);
      CFRelease(CFStringFromString);
    }
  }
  return v5;
}

void sub_1A18092D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void *NL::SpotlightParseFormatter::copyTermForDate(uint64_t a1, uint64_t a2, _QWORD *a3, __CFCalendar **a4, unsigned int a5, __CFDictionary *a6, int a7)
{
  CFNumberRef v8;
  const __CFAllocator *v13;
  CFMutableArrayRef Mutable;
  const __CFArray *v15;
  CFStringRef v16;
  uint64_t v17;
  CFStringRef v18;
  CFStringRef v19;
  void *v20;
  CFStringRef v22;
  __CFDateFormatter **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  CFStringRef value;
  std::string v31;
  CFStringRef v32;
  CFStringRef v33;
  CFTypeRef cf;
  CFTypeRef v35;
  _OWORD valuePtr[4];
  _QWORD v37[12];
  CFRange v38;

  if (!a4)
    return 0;
  if (a7)
  {
    if (a6)
    {
      LODWORD(valuePtr[0]) = 42;
      v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
      v37[0] = v8;
      CFDictionarySetValue(a6, CFSTR("kMDUserQueryTypeKey"), v8);
      if (v8)
        CFRelease(v8);
    }
    return 0;
  }
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v37[9] = Mutable;
  if (!Mutable)
    return 0;
  v15 = Mutable;
  memset(v37, 0, 64);
  memset(valuePtr, 0, sizeof(valuePtr));
  NL::DatePeriod::resolveDateComponentsAsRange((NL::DatePeriod *)a4, (NL::DateComponents *)v37, (NL::DateComponents *)valuePtr, a5);
  v16 = NL::DateFormatter::copyISODisplayForDateComponents((NL::DateFormatter *)(a1 + 104), a4[1], (const NL::DateComponents *)v37);
  v35 = v16;
  v18 = NL::DateFormatter::copyISODisplayForDateComponents((NL::DateFormatter *)(a1 + 104), a4[1], (const NL::DateComponents *)valuePtr);
  cf = v18;
  if (v16)
    v19 = CFStringCreateWithFormat(v13, 0, CFSTR("$time.iso(%@)"), v16);
  else
    v19 = CFSTR("0");
  v33 = v19;
  if (v18)
    v22 = CFStringCreateWithFormat(v13, 0, CFSTR("$time.iso(%@)"), v18);
  else
    v22 = CFSTR("2147483647");
  v32 = v22;
  if (a6)
  {
    v23 = NL::DateFormatter::copyDisplayForDate((__CFDateFormatter **)(a1 + 104), (const NL::DatePeriod *)a4, a5, 0);
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    if (v23)
      CFDictionarySetValue(a6, CFSTR("kMDUserQueryDateKey"), v23);
    if (v19)
      CFDictionarySetValue(a6, CFSTR("kMDUserQueryDateStartKey"), v19);
    if (v22)
      CFDictionarySetValue(a6, CFSTR("kMDUserQueryDateEndKey"), v22);
    if (v23)
      CFRelease(v23);
  }
  v26 = (_QWORD *)*a3;
  v24 = a3 + 1;
  v25 = v26;
  if (v26 != v24)
  {
    do
    {
      if (*((char *)v25 + 55) < 0)
        std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)v25[4], v25[5]);
      else
        v31 = *(std::string *)(v25 + 4);
      value = NL::SpotlightParseFormatter::copyDateRangeTerm(a1, (const void **)&v31.__r_.__value_.__l.__data_, v17, (uint64_t)v19, (uint64_t)v22);
      if (value)
      {
        v38.length = CFArrayGetCount(v15);
        v38.location = 0;
        if (!CFArrayContainsValue(v15, v38, value))
          CFArrayAppendValue(v15, value);
        CFRelease(value);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      v27 = (_QWORD *)v25[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v25[2];
          v29 = *v28 == (_QWORD)v25;
          v25 = v28;
        }
        while (!v29);
      }
      v25 = v28;
    }
    while (v28 != v24);
  }
  v20 = copyDisplayTermForTerms(v15);
  if (v22)
    CFRelease(v22);
  if (v19)
    CFRelease(v19);
  if (cf)
    CFRelease(cf);
  if (v35)
    CFRelease(v35);
  CFRelease(v15);
  return v20;
}

void sub_1A180963C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, const void *a18, const void *a19, const void *a20,const void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  nlp::CFScopedPtr<__CFString const*>::reset(&a18, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a19, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a20, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a21, 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v30 - 104), 0);
  _Unwind_Resume(a1);
}

void *copyDisplayTermForTerms(const __CFArray *a1)
{
  const __CFAllocator *v2;
  CFStringRef v3;
  CFStringRef v4;
  void *v5;
  void *v6;
  CFStringRef v8;

  if (!a1)
    return 0;
  if (!CFArrayGetCount(a1))
    return 0;
  if (!CFArrayGetCount(a1))
    return 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFStringCreateByCombiningStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, CFSTR(" || "));
  v8 = v3;
  if (!v3)
    return 0;
  v4 = v3;
  if (CFArrayGetCount(a1) < 2)
    v5 = (void *)CFRetain(v4);
  else
    v5 = (void *)CFStringCreateWithFormat(v2, 0, CFSTR("(%@)"), v4, v8);
  v6 = v5;
  CFRelease(v4);
  return v6;
}

void sub_1A18097D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

NL::NumericValue *NL::SpotlightParseFormatter::copyTermForValue(uint64_t a1, const void **a2, const void **a3, NL::NumericValue *a4)
{
  NL::NumericValue *v4;
  const __CFAllocator *v8;
  CFMutableArrayRef Mutable;
  const __CFArray *v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  CFStringRef v14;
  uint64_t v16;
  _QWORD *v17;
  std::string v18;
  CFStringRef v19;
  const __CFArray *v20;
  std::string __p;
  void *v22[2];
  char v23;
  CFRange v24;

  v4 = a4;
  if (a4)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v20 = Mutable;
    if (Mutable)
    {
      v10 = Mutable;
      v19 = 0;
      memset(&v18, 0, sizeof(v18));
      if (a1 + 176 == std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 168, a2))
      {
        v14 = 0;
      }
      else
      {
        v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 168, a2);
        std::map<std::string,std::string>::map[abi:ne180100](&v16, (const void ***)(v11 + 56));
        if (&v17 == (_QWORD **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v16, a3))
        {
          v14 = 0;
        }
        else
        {
          v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v16, a3);
          std::string::operator=(&v18, (const std::string *)(v12 + 56));
          std::string::basic_string[abi:ne180100]<0>(v22, "%@v1");
          NL::NumericValue::upper(v4, &__p);
          replaceAll(&v18, (char *)v22, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v23 < 0)
            operator delete(v22[0]);
          std::string::basic_string[abi:ne180100]<0>(v22, "%@v2");
          NL::NumericValue::lower(v4, &__p);
          replaceAll(&v18, (char *)v22, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v23 < 0)
            operator delete(v22[0]);
          std::string::basic_string[abi:ne180100]<0>(v22, "%@v");
          NL::NumericValue::value((int **)v4, &__p);
          replaceAll(&v18, (char *)v22, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v23 < 0)
            operator delete(v22[0]);
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v13 = &v18;
          else
            v13 = (std::string *)v18.__r_.__value_.__r.__words[0];
          v14 = CFStringCreateWithCString(v8, (const char *)v13, 0x8000100u);
          v19 = v14;
          v24.length = CFArrayGetCount(v10);
          v24.location = 0;
          if (!CFArrayContainsValue(v10, v24, v14))
            CFArrayAppendValue(v10, v14);
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v16, v17);
      }
      v4 = (NL::NumericValue *)copyDisplayTermForTerms(v10);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v18.__r_.__value_.__l.__data_);
        if (!v14)
        {
LABEL_31:
          CFRelease(v10);
          return v4;
        }
      }
      else if (!v14)
      {
        goto LABEL_31;
      }
      CFRelease(v14);
      v10 = v20;
      if (v20)
        goto LABEL_31;
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_1A1809A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, const void *a18, const void *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  if (a17 < 0)
    operator delete(a12);
  nlp::CFScopedPtr<__CFString const*>::reset(&a18, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(&a19, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::SpotlightParseFormatter::copyTermForCount(uint64_t a1, const void **a2, const void **a3, int **a4, __CFDictionary *a5)
{
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  std::__shared_weak_count *v12;
  int *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  CFNumberRef v21;
  CFNumberRef v22;
  int v24;
  void *key;
  int valuePtr;
  uint64_t v27;
  char *v28;

  v9 = a1 + 240;
  if (a1 + 248 != std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 240, a2))
  {
    v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v9, a2);
    std::map<std::string,NLSearchParseResultModifier>::map[abi:ne180100](&v27, (const void ***)(v10 + 56));
    if (&v28 == (char **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v27, a3)|| (valuePtr = 0, valuePtr = *(_DWORD *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v27, a3)+ 56), v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00], (key = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr)) == 0))
    {
LABEL_28:
      std::__tree<std::string>::destroy((uint64_t)&v27, v28);
      return 0;
    }
    v24 = 0;
    if (a4)
    {
      v13 = *a4;
      v12 = (std::__shared_weak_count *)a4[1];
      if (!v12)
      {
        if (!v13)
          goto LABEL_21;
        goto LABEL_20;
      }
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v13)
      {
        v13 = *a4;
        v17 = (std::__shared_weak_count *)a4[1];
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v24 = *v13;
          do
            v20 = __ldaxr(v18);
          while (__stlxr(v20 - 1, v18));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          goto LABEL_21;
        }
LABEL_20:
        v24 = *v13;
      }
    }
LABEL_21:
    v21 = CFNumberCreate(v11, kCFNumberIntType, &v24);
    v22 = v21;
    if (a5 && v21)
    {
      CFDictionarySetValue(a5, key, v21);
    }
    else if (!v21)
    {
      goto LABEL_26;
    }
    CFRelease(v22);
LABEL_26:
    if (key)
      CFRelease(key);
    goto LABEL_28;
  }
  return 0;
}

void sub_1A1809CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, const void *a12, uint64_t a13, char a14, char *a15)
{
  nlp::CFScopedPtr<__CFNumber const*>::reset(&a10, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset(&a12, 0);
  std::__tree<std::string>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void *NL::SpotlightParseFormatter::copyTermForTranslation(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, __CFDictionary *a6)
{
  CFAllocatorRef *v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  const __CFAllocator *v15;
  _QWORD *v16;
  const __CFString *v17;
  const __CFString *v18;
  CFStringRef CFStringFromString;
  const __CFArray *Mutable;
  const __CFArray *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  CFStringRef v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  const __CFString *v32;
  uint64_t v33;
  size_t v34;
  std::string *v35;
  const void *v36;
  int v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  _QWORD **v42;
  size_t v43;
  std::string *v44;
  const void *v45;
  int v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  uint64_t v51;
  std::string *v52;
  CFStringRef v53;
  __CFArray *v54;
  uint64_t v55;
  size_t v56;
  std::string *v57;
  const void *v58;
  int v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  uint64_t v64;
  std::string *v65;
  __CFArray *v66;
  _QWORD *v67;
  _QWORD *v68;
  BOOL v69;
  uint64_t v71;
  const __CFAllocator *alloc;
  std::string v74;
  void *__p[2];
  std::string::size_type v76;
  uint64_t v77;
  _QWORD *v78;
  std::string v79;
  std::string v80;
  std::string v81;
  CFStringRef v82;
  CFArrayRef v83;
  std::string v84;
  CFRange v85;
  CFRange v86;
  CFRange v87;

  v10 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a6
    && a1 + 224 != std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 216, (const void **)a2))
  {
    v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 216, (const void **)a2);
    v13 = std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&v84, (const void ***)(v12 + 56));
    if (&v84.__r_.__value_.__r.__words[1] == (std::string::size_type *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)v13, (const void **)a3))goto LABEL_13;
    v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v84, (const void **)a3);
    v15 = *v10;
    v16 = (_QWORD *)(v14 + 56);
    if (*(char *)(v14 + 79) < 0)
      v16 = (_QWORD *)*v16;
    v17 = CFStringCreateWithFormat(v15, 0, CFSTR("%s"), v16);
    v18 = v17;
    v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    if (!v17)
      goto LABEL_13;
    if (CFStringHasPrefix(v17, CFSTR("kMDUserQueryKindKey")))
    {
      CFStringFromString = CFStringCreateWithFormat(v15, 0, CFSTR("%d"), *(unsigned int *)(*(_QWORD *)(a1 + 152) + 4));
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringFromString;
      if (CFStringFromString)
        goto LABEL_11;
    }
    else
    {
      CFStringFromString = createCFStringFromString(a5 + 24);
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringFromString;
      if (CFStringFromString)
      {
LABEL_11:
        CFDictionarySetValue(a6, v18, CFStringFromString);
        CFRelease(CFStringFromString);
      }
    }
    CFRelease(v18);
LABEL_13:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v84, (_QWORD *)v84.__r_.__value_.__l.__size_);
  }
  alloc = *v10;
  Mutable = CFArrayCreateMutable(*v10, 0, MEMORY[0x1E0C9B378]);
  v83 = Mutable;
  if (!Mutable)
    return 0;
  v21 = Mutable;
  v82 = 0;
  memset(&v84, 0, sizeof(v84));
  std::to_string(&v81, **(_QWORD **)(a1 + 144));
  if (*(char *)(a5 + 47) < 0)
    std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(a5 + 24), *(_QWORD *)(a5 + 32));
  else
    v80 = *(std::string *)(a5 + 24);
  escapeContent(&v80);
  v23 = a1 + 168;
  v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 168, (const void **)a2);
  if (a1 + 176 == v24)
  {
    v31 = (_QWORD *)*a4;
    v30 = a4 + 1;
    v29 = v31;
    if (v31 == v30)
    {
      v28 = 0;
    }
    else
    {
      v28 = 0;
      v32 = 0;
      v71 = a5 + 72;
      do
      {
        if (*((char *)v29 + 55) < 0)
          std::string::__init_copy_ctor_external(&v79, (const std::string::value_type *)v29[4], v29[5]);
        else
          v79 = *(std::string *)(v29 + 4);
        if (v24 != std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v23, (const void **)&v79.__r_.__value_.__l.__data_))
        {
          v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v23, (const void **)&v79.__r_.__value_.__l.__data_);
          std::map<std::string,std::string>::map[abi:ne180100](&v77, (const void ***)(v33 + 56));
          if (*(char *)(a2 + 23) >= 0)
            v34 = *(unsigned __int8 *)(a2 + 23);
          else
            v34 = *(_QWORD *)(a2 + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)&v74, v34 + 1);
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v35 = &v74;
          else
            v35 = (std::string *)v74.__r_.__value_.__r.__words[0];
          if (v34)
          {
            if (*(char *)(a2 + 23) >= 0)
              v36 = (const void *)a2;
            else
              v36 = *(const void **)a2;
            memmove(v35, v36, v34);
          }
          *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 46;
          v37 = *(char *)(a3 + 23);
          if (v37 >= 0)
            v38 = (const std::string::value_type *)a3;
          else
            v38 = *(const std::string::value_type **)a3;
          if (v37 >= 0)
            v39 = *(unsigned __int8 *)(a3 + 23);
          else
            v39 = *(_QWORD *)(a3 + 8);
          v40 = std::string::append(&v74, v38, v39);
          v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          v76 = v40->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          v42 = (_QWORD **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v77, (const void **)__p);
          if (SHIBYTE(v76) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v74.__r_.__value_.__l.__data_);
          if (&v78 == v42)
          {
            v53 = v32;
          }
          else
          {
            if (*(char *)(a2 + 23) >= 0)
              v43 = *(unsigned __int8 *)(a2 + 23);
            else
              v43 = *(_QWORD *)(a2 + 8);
            std::string::basic_string[abi:ne180100]((uint64_t)&v74, v43 + 1);
            if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v44 = &v74;
            else
              v44 = (std::string *)v74.__r_.__value_.__r.__words[0];
            if (v43)
            {
              if (*(char *)(a2 + 23) >= 0)
                v45 = (const void *)a2;
              else
                v45 = *(const void **)a2;
              memmove(v44, v45, v43);
            }
            *(_WORD *)((char *)&v44->__r_.__value_.__l.__data_ + v43) = 46;
            v46 = *(char *)(a3 + 23);
            if (v46 >= 0)
              v47 = (const std::string::value_type *)a3;
            else
              v47 = *(const std::string::value_type **)a3;
            if (v46 >= 0)
              v48 = *(unsigned __int8 *)(a3 + 23);
            else
              v48 = *(_QWORD *)(a3 + 8);
            v49 = std::string::append(&v74, v47, v48);
            v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
            v76 = v49->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v50;
            v49->__r_.__value_.__l.__size_ = 0;
            v49->__r_.__value_.__r.__words[2] = 0;
            v49->__r_.__value_.__r.__words[0] = 0;
            v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v77, (const void **)__p);
            std::string::operator=(&v84, (const std::string *)(v51 + 56));
            if (SHIBYTE(v76) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v74.__r_.__value_.__l.__data_);
            updateTranslation(&v84, (uint64_t)&v80, v71, (uint64_t)&v81);
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v52 = &v84;
            else
              v52 = (std::string *)v84.__r_.__value_.__r.__words[0];
            v53 = CFStringCreateWithCString(alloc, (const char *)v52, 0x8000100u);
            if (v32)
              CFRelease(v32);
            v82 = v53;
            if (v53)
            {
              v54 = v83;
              v86.length = CFArrayGetCount(v83);
              v86.location = 0;
              if (!CFArrayContainsValue(v54, v86, v53))
                CFArrayAppendValue(v54, v53);
            }
            v55 = *(unsigned __int8 *)(a5 + 71);
            if ((v55 & 0x80u) != 0)
              v55 = *(_QWORD *)(a5 + 56);
            if (v55)
            {
              if (*(char *)(a2 + 23) >= 0)
                v56 = *(unsigned __int8 *)(a2 + 23);
              else
                v56 = *(_QWORD *)(a2 + 8);
              std::string::basic_string[abi:ne180100]((uint64_t)&v74, v56 + 1);
              if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v57 = &v74;
              else
                v57 = (std::string *)v74.__r_.__value_.__r.__words[0];
              if (v56)
              {
                if (*(char *)(a2 + 23) >= 0)
                  v58 = (const void *)a2;
                else
                  v58 = *(const void **)a2;
                memmove(v57, v58, v56);
              }
              *(_WORD *)((char *)&v57->__r_.__value_.__l.__data_ + v56) = 46;
              v59 = *(char *)(a3 + 23);
              if (v59 >= 0)
                v60 = (const std::string::value_type *)a3;
              else
                v60 = *(const std::string::value_type **)a3;
              if (v59 >= 0)
                v61 = *(unsigned __int8 *)(a3 + 23);
              else
                v61 = *(_QWORD *)(a3 + 8);
              v62 = std::string::append(&v74, v60, v61);
              v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
              v76 = v62->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = v63;
              v62->__r_.__value_.__l.__size_ = 0;
              v62->__r_.__value_.__r.__words[2] = 0;
              v62->__r_.__value_.__r.__words[0] = 0;
              v64 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v77, (const void **)__p);
              std::string::operator=(&v84, (const std::string *)(v64 + 56));
              if (SHIBYTE(v76) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v74.__r_.__value_.__l.__data_);
              updateTranslation(&v84, a5 + 48, v71, (uint64_t)&v81);
              if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v65 = &v84;
              else
                v65 = (std::string *)v84.__r_.__value_.__r.__words[0];
              v28 = CFStringCreateWithCString(alloc, (const char *)v65, 0x8000100u);
              if (v53)
                CFRelease(v53);
              v82 = v28;
              if (v28)
              {
                v66 = v83;
                v87.length = CFArrayGetCount(v83);
                v87.location = 0;
                if (!CFArrayContainsValue(v66, v87, v28))
                  CFArrayAppendValue(v66, v28);
                v53 = v28;
              }
              else
              {
                v53 = 0;
              }
            }
            else
            {
              v28 = v53;
            }
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v77, v78);
          v32 = v53;
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
        v67 = (_QWORD *)v29[1];
        if (v67)
        {
          do
          {
            v68 = v67;
            v67 = (_QWORD *)*v67;
          }
          while (v67);
        }
        else
        {
          do
          {
            v68 = (_QWORD *)v29[2];
            v69 = *v68 == (_QWORD)v29;
            v29 = v68;
          }
          while (!v69);
        }
        v29 = v68;
      }
      while (v68 != v30);
      v21 = v83;
    }
  }
  else
  {
    v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 168, (const void **)a2);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&v79, (const void ***)(v25 + 56));
    if (&v79.__r_.__value_.__r.__words[1] == (std::string::size_type *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v79, (const void **)a3))
    {
      v28 = 0;
    }
    else
    {
      v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v79, (const void **)a3);
      std::string::operator=(&v84, (const std::string *)(v26 + 56));
      updateTranslation(&v84, (uint64_t)&v80, a5 + 72, (uint64_t)&v81);
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v84;
      else
        v27 = (std::string *)v84.__r_.__value_.__r.__words[0];
      v28 = CFStringCreateWithCString(alloc, (const char *)v27, 0x8000100u);
      v82 = v28;
      if (v28)
      {
        v85.length = CFArrayGetCount(v21);
        v85.location = 0;
        if (!CFArrayContainsValue(v21, v85, v28))
          CFArrayAppendValue(v21, v28);
      }
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v79, (_QWORD *)v79.__r_.__value_.__l.__size_);
  }
  v22 = copyDisplayTermForTerms(v21);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v84.__r_.__value_.__l.__data_);
    if (v28)
    {
LABEL_138:
      CFRelease(v28);
      v21 = v83;
      if (!v83)
        return v22;
      goto LABEL_142;
    }
  }
  else if (v28)
  {
    goto LABEL_138;
  }
  if (v21)
LABEL_142:
    CFRelease(v21);
  return v22;
}

void sub_1A180A558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&__p, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v43 - 160), 0);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v43 - 120, *(_QWORD **)(v43 - 112));
  _Unwind_Resume(a1);
}

void escapeContent(std::string *a1)
{
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(v4, "\"");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\\"");
  replaceAll(a1, (char *)v4, (uint64_t)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
  std::string::basic_string[abi:ne180100]<0>(v4, "'");
  std::string::basic_string[abi:ne180100]<0>(__p, "'");
  replaceAll(a1, (char *)v4, (uint64_t)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
  std::string::basic_string[abi:ne180100]<0>(v4, "$");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\$");
  replaceAll(a1, (char *)v4, (uint64_t)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
  std::string::basic_string[abi:ne180100]<0>(v4, "*");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\*");
  replaceAll(a1, (char *)v4, (uint64_t)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
  std::string::basic_string[abi:ne180100]<0>(v4, "+");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\+");
  replaceAll(a1, (char *)v4, (uint64_t)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
  std::string::basic_string[abi:ne180100]<0>(v4, "=");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\=");
  replaceAll(a1, (char *)v4, (uint64_t)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_1A180A8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void updateTranslation(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, "%@v");
  replaceAll(a1, (char *)__p, a3);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "%@c");
  replaceAll(a1, (char *)__p, a2);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "%@uid");
  replaceAll(a1, (char *)__p, a4);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_1A180A9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *NL::SpotlightParseFormatter::copyTermForEntityAndNameWithType(uint64_t a1, _QWORD *a2, unsigned int a3, const void **a4, unsigned __int8 *a5, _QWORD *a6, __CFDictionary *a7, __CFDictionary *a8, unsigned __int8 a9)
{
  _BOOL4 v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  uint64_t v26;
  _BOOL4 v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  _BOOL4 v35;
  _BOOL4 v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  void *__p[2];
  char v44;
  void *v45;
  std::__shared_weak_count *v46;
  char v47;

  std::string::basic_string[abi:ne180100]<0>(&v45, "Max");
  if (startswith(a5, (unsigned __int8 *)&v45))
  {
    v17 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Min");
    v17 = startswith(a5, (unsigned __int8 *)__p);
    if (v44 < 0)
      operator delete(__p[0]);
  }
  if (v47 < 0)
  {
    operator delete(v45);
    if (v17)
      goto LABEL_7;
  }
  else if (v17)
  {
LABEL_7:
    v18 = (void *)a2[18];
    v19 = (std::__shared_weak_count *)a2[19];
    v45 = v18;
    v46 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    NL::SpotlightParseFormatter::copyTermForCount(a1, a4, (const void **)a5, (int **)v18, a7);
    if (v19)
    {
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v45, "Date");
  if (endswith((uint64_t *)a5, (uint64_t *)&v45))
  {
    v27 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Time");
    v27 = endswith((uint64_t *)a5, (uint64_t *)__p);
    if (v44 < 0)
      operator delete(__p[0]);
  }
  if (v47 < 0)
  {
    operator delete(v45);
    if (v27)
    {
LABEL_24:
      v28 = (void *)a2[16];
      v29 = (std::__shared_weak_count *)a2[17];
      v45 = v28;
      v46 = v29;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v24 = NL::SpotlightParseFormatter::copyTermForDate(a1, v26, a6, (__CFCalendar **)v28, a3, a8, a9);
      if (v29)
      {
        v32 = (unint64_t *)&v29->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          v34 = v29;
LABEL_43:
          std::__shared_weak_count::__release_weak(v34);
          return v24;
        }
      }
      return v24;
    }
  }
  else if (v27)
  {
    goto LABEL_24;
  }
  std::string::basic_string[abi:ne180100]<0>(&v45, "Value");
  v35 = endswith((uint64_t *)a5, (uint64_t *)&v45);
  v36 = v35;
  if ((v47 & 0x80000000) == 0)
  {
    if (v35)
      goto LABEL_35;
    return NL::SpotlightParseFormatter::copyTermForTranslation(a1, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a2, a8);
  }
  operator delete(v45);
  if (!v36)
    return NL::SpotlightParseFormatter::copyTermForTranslation(a1, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a2, a8);
LABEL_35:
  v37 = (void *)a2[18];
  v38 = (std::__shared_weak_count *)a2[19];
  v45 = v37;
  v46 = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v24 = NL::SpotlightParseFormatter::copyTermForValue(a1, a4, (const void **)a5, (NL::NumericValue *)v37);
  if (v38)
  {
    v41 = (unint64_t *)&v38->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      v34 = v38;
      goto LABEL_43;
    }
  }
  return v24;
}

void sub_1A180ACF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void NL::SpotlightParseFormatter::updateTermsWithAttributeForEntityInFormat(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, char a8)
{
  uint64_t v9;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const __CFAllocator *v18;
  CFMutableArrayRef Mutable;
  const void **v20;
  CFMutableDictionaryRef v21;
  CFIndex Count;
  CFIndex i;
  const __CFAttributedString *ValueAtIndex;
  CFMutableAttributedStringRef MutableCopy;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  const __CFDictionary *v30;
  CFIndex v31;
  CFIndex v32;
  __CFArray *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  const __CFArray *v37;
  _QWORD v42[8];
  std::__shared_weak_count *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[9];
  std::__shared_weak_count *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  CFMutableAttributedStringRef v52;
  _QWORD v53[5];
  CFTypeRef v54;
  uint64_t v55;
  const void **v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  void (*v59)(uint64_t);
  CFTypeRef v60;
  const __CFArray *v61;
  CFRange v62;
  CFRange v63;
  CFRange v64;

  if (a2)
  {
    v9 = *a6;
    if (*a6)
    {
      v60 = 0;
      v61 = 0;
      v55 = 0;
      v56 = (const void **)&v55;
      v57 = 0x3002000000;
      v58 = __Block_byref_object_copy_;
      v59 = __Block_byref_object_dispose_;
      v53[0] = 0;
      v53[1] = v53;
      v53[2] = 0x3002000000;
      v53[3] = __Block_byref_object_copy__23;
      v53[4] = __Block_byref_object_dispose__24;
      v54 = 0;
      if ((a8 & 4) != 0)
      {
        v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        v20 = v56;
        v61 = Mutable;
        v21 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        nlp::CFScopedPtr<__CFDictionary *>::reset(v20 + 5, v21);
        Count = CFArrayGetCount(a3);
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(a3, i);
            MutableCopy = CFAttributedStringCreateMutableCopy(v18, 0, ValueAtIndex);
            v52 = MutableCopy;
            v47[0] = MEMORY[0x1E0C809B0];
            v47[1] = 1174405120;
            v47[2] = ___ZN2NL23SpotlightParseFormatter41updateTermsWithAttributeForEntityInFormatEP9__CFArrayS2_P14__CFDictionaryRKNSt3__13setINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_4lessISC_EENSA_ISC_EEEENS5_10shared_ptrINS_14ParseAttributeEEERKNS_6EntityEj_block_invoke;
            v47[3] = &unk_1E45CF338;
            v47[6] = a1;
            v47[7] = a7;
            v47[4] = v53;
            v26 = *a6;
            v27 = (std::__shared_weak_count *)a6[1];
            v47[8] = *a6;
            v48 = v27;
            if (v27)
            {
              p_shared_owners = (unint64_t *)&v27->__shared_owners_;
              do
                v29 = __ldxr(p_shared_owners);
              while (__stxr(v29 + 1, p_shared_owners));
            }
            v47[5] = &v55;
            v49 = a5;
            v50 = a4;
            v51 = a2;
            NL::ParseAttribute::enumerateParseNamesWithType(v26, (uint64_t)v47);
            if (MutableCopy)
            {
              v30 = (const __CFDictionary *)v56[5];
              if (v30)
              {
                v31 = *(_QWORD *)(*a6 + 16);
                v32 = *(_QWORD *)(*a6 + 24);
                if (CFDictionaryGetCount(v30))
                {
                  if (CFDictionaryGetCount(v30))
                  {
                    v62.location = v31;
                    v62.length = v32;
                    CFAttributedStringSetAttributes(MutableCopy, v62, v30, 0);
                  }
                }
              }
            }
            v33 = v61;
            v63.length = CFArrayGetCount(v61);
            v63.location = 0;
            if (!CFArrayContainsValue(v33, v63, MutableCopy))
              CFArrayAppendValue(v33, MutableCopy);
            v34 = v48;
            if (v48)
            {
              v35 = (unint64_t *)&v48->__shared_owners_;
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
            if (v52)
              CFRelease(v52);
          }
        }
        CFArrayRemoveAllValues(a3);
        v37 = v61;
        v64.length = CFArrayGetCount(v61);
        v64.location = 0;
        CFArrayAppendArray(a3, v37, v64);
      }
      else
      {
        v42[0] = MEMORY[0x1E0C809B0];
        v42[1] = 1174405120;
        v42[2] = ___ZN2NL23SpotlightParseFormatter41updateTermsWithAttributeForEntityInFormatEP9__CFArrayS2_P14__CFDictionaryRKNSt3__13setINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_4lessISC_EENSA_ISC_EEEENS5_10shared_ptrINS_14ParseAttributeEEERKNS_6EntityEj_block_invoke_26;
        v42[3] = &unk_1E45CFA00;
        v42[4] = v53;
        v42[5] = a1;
        v42[6] = a7;
        v42[7] = v9;
        v11 = (std::__shared_weak_count *)a6[1];
        v43 = v11;
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v44 = a5;
        v45 = a4;
        v46 = a2;
        NL::ParseAttribute::enumerateParseNamesWithType(v9, (uint64_t)v42);
        v14 = v43;
        if (v43)
        {
          v15 = (unint64_t *)&v43->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      _Block_object_dispose(v53, 8);
      if (v54)
        CFRelease(v54);
      _Block_object_dispose(&v55, 8);
      if (v60)
        CFRelease(v60);
      if (v61)
        CFRelease(v61);
    }
  }
}

void sub_1A180B11C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v1);
  _Block_object_dispose((const void *)(v2 - 208), 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v2 - 168), 0);
  _Block_object_dispose((const void *)(v2 - 160), 8);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v2 - 120), 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v2 - 112), 0);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(a1 + 40), 0);
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(a1 + 40), 0);
}

void nlp::CFScopedPtr<__CFArray *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFDictionary *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t NL::ParseAttribute::enumerateParseNamesWithType(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(result + 64);
  if (*(_QWORD *)(result + 72) != v2)
  {
    v4 = (_QWORD *)result;
    v5 = 0;
    v6 = 0;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(a2, v2 + v5, v4[11] + v5);
      ++v6;
      v2 = v4[8];
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v4[9] - v2) >> 3) > v6);
  }
  return result;
}

void ___ZN2NL23SpotlightParseFormatter41updateTermsWithAttributeForEntityInFormatEP9__CFArrayS2_P14__CFDictionaryRKNSt3__13setINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_4lessISC_EENSA_ISC_EEEENS5_10shared_ptrINS_14ParseAttributeEEERKNS_6EntityEj_block_invoke(uint64_t a1, const void **a2, unsigned __int8 *a3)
{
  const void **v4;
  void *v5;
  const __CFArray *v6;
  CFRange v7;

  v4 = (const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v5 = NL::SpotlightParseFormatter::copyTermForEntityAndNameWithType(*(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56), *(_DWORD *)(*(_QWORD *)(a1 + 64) + 40), a2, a3, *(_QWORD **)(a1 + 80), *(__CFDictionary **)(a1 + 88), *(__CFDictionary **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(_BYTE *)(*(_QWORD *)(a1 + 64) + 39));
  nlp::CFScopedPtr<__CFString const*>::reset(v4, v5);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    v6 = *(const __CFArray **)(a1 + 96);
    v7.length = CFArrayGetCount(v6);
    v7.location = 0;
    if (!CFArrayContainsValue(v6, v7, *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40)))
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 96), *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  }
}

uint64_t __copy_helper_block_e8_64c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 72) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_64c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t a1)
{
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 64);
}

void ___ZN2NL23SpotlightParseFormatter41updateTermsWithAttributeForEntityInFormatEP9__CFArrayS2_P14__CFDictionaryRKNSt3__13setINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_4lessISC_EENSA_ISC_EEEENS5_10shared_ptrINS_14ParseAttributeEEERKNS_6EntityEj_block_invoke_26(uint64_t a1, const void **a2, unsigned __int8 *a3)
{
  const void **v4;
  void *v5;
  const __CFArray *v6;
  CFRange v7;

  v4 = (const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v5 = NL::SpotlightParseFormatter::copyTermForEntityAndNameWithType(*(_QWORD *)(a1 + 40), *(_QWORD **)(a1 + 48), *(_DWORD *)(*(_QWORD *)(a1 + 56) + 40), a2, a3, *(_QWORD **)(a1 + 72), *(__CFDictionary **)(a1 + 80), 0, *(_BYTE *)(*(_QWORD *)(a1 + 56) + 39));
  nlp::CFScopedPtr<__CFString const*>::reset(v4, v5);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    v6 = *(const __CFArray **)(a1 + 88);
    v7.length = CFArrayGetCount(v6);
    v7.location = 0;
    if (!CFArrayContainsValue(v6, v7, *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40)))
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 88), *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  }
}

uint64_t __copy_helper_block_e8_56c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_56c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t a1)
{
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 56);
}

BOOL NL::SpotlightParseFormatter::updateParseResultForIntentAtIndex(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  const void **v7;
  CFMutableArrayRef v8;
  const void **v9;
  CFMutableArrayRef v10;
  const __CFAttributedString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  __CFArray *v20;
  const __CFArray *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  CFIndex Count;
  CFIndex i;
  const __CFString *ValueAtIndex;
  const __CFArray *v33;
  __CFArray *v34;
  const __CFString *v35;
  __CFArray *v36;
  std::__shared_weak_count *size;
  unint64_t *v38;
  unint64_t v39;
  CFIndex v40;
  CFStringRef v41;
  unsigned int v42;
  uint64_t v43;
  const __CFAllocator *v44;
  __CFDictionary *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  CFNumberRef v51;
  CFNumberRef v52;
  const __CFAllocator *v53;
  CFNumberRef v54;
  CFNumberRef v55;
  CFNumberRef v56;
  const __CFString *v57;
  int v58;
  CFIndex Length;
  _BOOL4 v60;
  uint64_t v61;
  CFRange v62;
  const __CFString *v63;
  const __CFString *v64;
  const __CFString *CFStringFromString;
  unint64_t *v66;
  unint64_t v67;
  CFIndex v68;
  CFIndex j;
  const void *v70;
  const __CFArray *v71;
  __CFArray *v73;
  const __CFAllocator *v74;
  uint64_t v75;
  CFStringRef cf;
  _QWORD v80[9];
  std::__shared_weak_count *v81;
  _QWORD **v82;
  int v83;
  char v84;
  CFArrayRef theArray;
  CFMutableArrayRef v86;
  uint64_t v87;
  const void **v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t);
  void (*v91)(uint64_t);
  CFTypeRef v92;
  uint64_t v93;
  const void **v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t);
  void (*v97)(uint64_t);
  CFTypeRef v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t);
  void (*v103)(uint64_t);
  CFTypeRef v104;
  const __CFArray *v105;
  const __CFString *v106;
  void *v107[2];
  char v108;
  std::string v109;
  std::string v110;
  void *v111;
  int v112;
  int valuePtr;
  _DWORD v114[3];
  CFRange v115;
  CFRange v116;
  CFRange v117;
  CFRange v118;
  CFRange v119;

  std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)(a1 + 152), a2);
  v106 = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v105 = Mutable;
  v99 = 0;
  v100 = &v99;
  v101 = 0x3002000000;
  v102 = __Block_byref_object_copy__28;
  v103 = __Block_byref_object_dispose__29;
  v104 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
  v93 = 0;
  v94 = (const void **)&v93;
  v95 = 0x3002000000;
  v96 = __Block_byref_object_copy__28;
  v97 = __Block_byref_object_dispose__29;
  v98 = 0;
  v87 = 0;
  v88 = (const void **)&v87;
  v89 = 0x3002000000;
  v90 = __Block_byref_object_copy__28;
  v91 = __Block_byref_object_dispose__29;
  v92 = 0;
  theArray = 0;
  v86 = 0;
  if ((a4 & 2) != 0)
  {
    v86 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
    theArray = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
  }
  if ((a4 & 4) != 0)
  {
    v7 = v88;
    v8 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
    nlp::CFScopedPtr<__CFArray *>::reset(v7 + 5, v8);
    v9 = v94;
    v10 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
    nlp::CFScopedPtr<__CFArray *>::reset(v9 + 5, v10);
    v11 = CFAttributedStringCreateMutable(v5, 0);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    v115.length = CFAttributedStringGetLength(v11);
    v115.location = 0;
    CFAttributedStringReplaceString(v11, v115, *(CFStringRef *)(a1 + 40));
    CFArrayAppendValue((CFMutableArrayRef)v94[5], v11);
    if (v11)
      CFRelease(v11);
  }
  v12 = *(_QWORD *)(*a2 + 48) - *(_QWORD *)(*a2 + 40);
  if (v12 < 1)
  {
    v75 = 0;
  }
  else
  {
    v13 = 0;
    v14 = (unint64_t)v12 >> 4;
    v74 = v5;
    if (v14 <= 1)
      v14 = 1;
    v75 = v14;
    do
    {
      v15 = *(_OWORD *)(*(_QWORD *)(*a2 + 40) + 16 * v13);
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v15;
      if (*((_QWORD *)&v15 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v19 = *(_QWORD ***)v15;
      v18 = *(_QWORD ***)(v15 + 8);
      while (v19 != v18)
      {
        if ((a4 & 4) != 0)
        {
          v20 = (__CFArray *)v88[5];
          v21 = (const __CFArray *)v94[5];
          v118.length = CFArrayGetCount(v21);
          v118.location = 0;
          CFArrayAppendArray(v20, v21, v118);
          CFArrayRemoveAllValues((CFMutableArrayRef)v94[5]);
        }
        v22 = *v19;
        v80[0] = MEMORY[0x1E0C809B0];
        v80[1] = 1174405120;
        v80[2] = ___ZN2NL23SpotlightParseFormatter33updateParseResultForIntentAtIndexENSt3__110shared_ptrINS_11ParseIntentEEElj_block_invoke;
        v80[3] = &unk_1E45CFA38;
        v80[4] = &v99;
        v80[5] = &v87;
        v24 = *a2;
        v23 = a2[1];
        v80[7] = a1;
        v80[8] = v24;
        v81 = (std::__shared_weak_count *)v23;
        if (v23)
        {
          v25 = (unint64_t *)(v23 + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v83 = a4;
        v84 = (a4 & 4) >> 2;
        v82 = v19;
        v80[6] = &v93;
        NL::ParseAttribute::enumerateEntities(v22, (uint64_t)v80);
        if ((a4 & 4) != 0 && CFArrayGetCount((CFArrayRef)v88[5]))
          CFArrayRemoveAllValues((CFMutableArrayRef)v88[5]);
        v27 = v81;
        if (v81)
        {
          p_shared_owners = (unint64_t *)&v81->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v19 += 2;
      }
      if ((a4 & 2) != 0)
      {
        Count = CFArrayGetCount((CFArrayRef)v100[5]);
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v100[5], i);
            if (ValueAtIndex)
              updateRankingTermsWithTerm(*(__CFDictionary **)(a1 + 72), v86, theArray, ValueAtIndex, a3, v13);
          }
        }
        v33 = theArray;
        if (CFArrayGetCount(theArray))
        {
          v34 = v86;
          CFArrayRemoveAllValues(v86);
          v119.length = CFArrayGetCount(v33);
          v119.location = 0;
          CFArrayAppendArray(v34, v33, v119);
          CFArrayRemoveAllValues(v33);
        }
      }
      if (CFArrayGetCount((CFArrayRef)v100[5]))
      {
        v35 = (const __CFString *)copyDisplayTermForTerms((const __CFArray *)v100[5]);
        if (v106)
          CFRelease(v106);
        v106 = v35;
        if (v35)
        {
          v36 = v105;
          v116.length = CFArrayGetCount(v105);
          v116.location = 0;
          if (!CFArrayContainsValue(v36, v116, v35))
            CFArrayAppendValue(v36, v35);
        }
        CFArrayRemoveAllValues((CFMutableArrayRef)v100[5]);
      }
      size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
      if (v110.__r_.__value_.__l.__size_)
      {
        v38 = (unint64_t *)(v110.__r_.__value_.__l.__size_ + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      ++v13;
    }
    while (v13 != v75);
    Mutable = v105;
    v5 = v74;
  }
  v40 = CFArrayGetCount(Mutable);
  if (v40)
  {
    v41 = CFStringCreateByCombiningStrings(v5, Mutable, CFSTR(" && "));
    cf = v41;
    if (v41)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v41);
      if ((a4 & 2) != 0)
      {
        updateRankingTermsWithTerm(*(__CFDictionary **)(a1 + 72), v86, theArray, 0, a3, v75);
        updateRankingTermsWithQuery(*(__CFDictionary **)(a1 + 72), v41, a3 + v75 + 101);
      }
      v42 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 40);
      if (!CFPreferencesGetAppBooleanValue(CFSTR("NLSearchDisableDefault"), (CFStringRef)*MEMORY[0x1E0C9B228], 0)
        && (v42 > 8 || ((1 << v42) & 0x188) == 0))
      {
        v57 = *(const __CFString **)(a1 + 40);
        if (!v57)
          goto LABEL_124;
        v58 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 64);
        Length = CFStringGetLength(*(CFStringRef *)(a1 + 40));
        v60 = v58 != 0;
        v61 = 200;
        if (!v60 || Length <= 200)
          v61 = Length;
        if (v61 < 801)
          v60 = 1;
        v62.length = v60 ? v61 : 800;
        v62.location = 0;
        v63 = CFStringCreateWithSubstring(v5, v57, v62);
        v64 = v63;
        v111 = (void *)v63;
        if (v63)
        {
          getUTF8StringFromCFString(v63, &v110);
          escapeContent(&v110);
          std::string::basic_string[abi:ne180100]<0>(&v109, "(kMDItemSubject=\"%@*\"cwd || kMDItemTitle=\"%@*\"cwd || kMDItemTopic=\"%@*\"cwd || kMDItemTextContent=\"%@*\"cd)");
          std::string::basic_string[abi:ne180100]<0>(v107, "%@");
          replaceAll(&v109, (char *)v107, (uint64_t)&v110);
          if (v108 < 0)
            operator delete(v107[0]);
          CFStringFromString = createCFStringFromString((uint64_t)&v109);
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v109.__r_.__value_.__l.__data_);
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
          CFRelease(v64);
        }
        else
        {
LABEL_124:
          CFStringFromString = 0;
        }
        if (v106)
          CFRelease(v106);
        v106 = CFStringFromString;
        if (CFStringFromString)
        {
          v73 = *(__CFArray **)(a1 + 56);
          if (v73)
            CFArrayAppendValue(v73, CFStringFromString);
          if ((a4 & 2) != 0)
            updateRankingTermsWithQuery(*(__CFDictionary **)(a1 + 72), v106, a3 + v75 + 1);
        }
      }
    }
    v43 = a1;
    if ((a4 & 8) == 0)
      goto LABEL_99;
    v44 = v5;
    v45 = *(__CFDictionary **)(a1 + 80);
    v46 = *(_QWORD *)(a1 + 152);
    v47 = *(std::__shared_weak_count **)(a1 + 160);
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    if (a3 || !v45)
    {
LABEL_95:
      v43 = a1;
      if (v47)
      {
        v66 = (unint64_t *)&v47->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
          if ((a4 & 4) != 0)
          {
LABEL_100:
            v68 = CFArrayGetCount((CFArrayRef)v94[5]);
            if (v68 >= 1)
            {
              for (j = 0; j != v68; ++j)
              {
                v70 = CFArrayGetValueAtIndex((CFArrayRef)v94[5], j);
                v71 = *(const __CFArray **)(v43 + 64);
                v117.length = CFArrayGetCount(v71);
                v117.location = 0;
                if (!CFArrayContainsValue(v71, v117, v70))
                  CFArrayAppendValue(*(CFMutableArrayRef *)(v43 + 64), v70);
              }
            }
          }
LABEL_105:
          if (cf)
            CFRelease(cf);
          goto LABEL_107;
        }
      }
LABEL_99:
      if ((a4 & 4) != 0)
        goto LABEL_100;
      goto LABEL_105;
    }
    v50 = *(_DWORD *)(v46 + 4);
    valuePtr = 1;
    v114[0] = v50;
    v51 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
    v52 = CFNumberCreate(v44, kCFNumberSInt32Type, v114);
    v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
    if (v52 && v51)
      CFDictionarySetValue(v45, v52, v51);
    if (*(_DWORD *)(v46 + 8))
    {
      v114[0] = *(_DWORD *)(v46 + 8);
      v112 = 2;
      v53 = v44;
      v54 = CFNumberCreate(v44, kCFNumberSInt32Type, v114);
      v107[0] = v54;
      v55 = CFNumberCreate(v53, kCFNumberSInt32Type, &v112);
      v56 = v55;
      v111 = v55;
      if (v54)
      {
        if (!v55)
        {
LABEL_90:
          CFRelease(v54);
          goto LABEL_91;
        }
        CFDictionaryAddValue(v45, v54, v55);
      }
      else if (!v55)
      {
        goto LABEL_91;
      }
      CFRelease(v56);
      if (v54)
        goto LABEL_90;
    }
LABEL_91:
    if (v52)
      CFRelease(v52);
    if (v51)
      CFRelease(v51);
    goto LABEL_95;
  }
LABEL_107:
  if (theArray)
    CFRelease(theArray);
  if (v86)
    CFRelease(v86);
  _Block_object_dispose(&v87, 8);
  if (v92)
    CFRelease(v92);
  _Block_object_dispose(&v93, 8);
  if (v98)
    CFRelease(v98);
  _Block_object_dispose(&v99, 8);
  if (v104)
    CFRelease(v104);
  if (v105)
    CFRelease(v105);
  if (v106)
    CFRelease(v106);
  return v40 != 0;
}

void sub_1A180BE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,const void *a31,const void *a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,const void *a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,const void *a50)
{
  uint64_t v50;

  if (*(char *)(v50 - 161) < 0)
    operator delete(*(void **)(v50 - 184));
  if (*(char *)(v50 - 137) < 0)
    operator delete(*(void **)(v50 - 160));
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v50 - 128), 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a18, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(&a31, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(&a32, 0);
  _Block_object_dispose(&a33, 8);
  nlp::CFScopedPtr<__CFArray *>::reset(&a38, 0);
  _Block_object_dispose(&a39, 8);
  nlp::CFScopedPtr<__CFArray *>::reset(&a44, 0);
  _Block_object_dispose(&a45, 8);
  nlp::CFScopedPtr<__CFArray *>::reset(&a50, 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v50 - 224), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v50 - 216), 0);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 40), 0);
}

uint64_t NL::ParseAttribute::enumerateEntities(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t (*v13)(uint64_t);
  void *v14;
  uint64_t v15;

  v4 = (uint64_t *)a1[14];
  v3 = (uint64_t *)a1[15];
  if (v3 == v4)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1[6]);
    v8 = a1[6];
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v13 = ___ZNK2NL14ParseAttribute17enumerateEntitiesEU13block_pointerFvRKNS_6EntityEE_block_invoke;
    v14 = &unk_1E45CFA70;
    v15 = a2;
    v9 = *(uint64_t **)(v8 + 160);
    v10 = *(uint64_t **)(v8 + 168);
    while (v9 != v10)
    {
      v11 = *v9;
      v9 += 2;
      result = ((uint64_t (*)(_QWORD *, uint64_t))v13)(v12, v11);
    }
  }
  else
  {
    do
    {
      v5 = *v4;
      v4 += 2;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v5);
    }
    while (v4 != v3);
  }
  return result;
}

void ___ZN2NL23SpotlightParseFormatter33updateParseResultForIntentAtIndexENSt3__110shared_ptrINS_11ParseIntentEEElj_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const __CFArray *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __CFArray *v15;
  const __CFArray *v16;
  uint64_t v17[2];
  uint64_t v18[3];
  CFRange v19;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v5 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 88);
  std::set<std::string>::set[abi:ne180100](v18, (const void ***)(*(_QWORD *)(a1 + 64) + 16));
  v8 = *(uint64_t **)(a1 + 80);
  v9 = (std::__shared_weak_count *)v8[1];
  v17[0] = *v8;
  v17[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  NL::SpotlightParseFormatter::updateTermsWithAttributeForEntityInFormat(v6, v4, v5, v7, (uint64_t)v18, v17, a2, *(_DWORD *)(a1 + 88));
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)v18, (char *)v18[1]);
  if (*(_BYTE *)(a1 + 92))
  {
    if (CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)))
    {
      v14 = *(_QWORD *)(a1 + 40);
      v15 = *(__CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v16 = *(const __CFArray **)(*(_QWORD *)(v14 + 8) + 40);
      v19.length = CFArrayGetCount(v16);
      v19.location = 0;
      CFArrayAppendArray(v15, v16, v19);
    }
  }
}

void sub_1A180C2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, char *a13)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::__tree<std::string>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_64c44_ZTSNSt3__110shared_ptrIN2NL11ParseIntentEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 72) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_64c44_ZTSNSt3__110shared_ptrIN2NL11ParseIntentEEE(uint64_t a1)
{
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 64);
}

void updateRankingTermsWithTerm(__CFDictionary *a1, CFArrayRef theArray, __CFArray *a3, const __CFString *a4, uint64_t a5, uint64_t a6)
{
  CFNumberRef v12;
  CFNumberRef v13;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFAllocator *v17;
  CFNumberRef v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex v21;
  const void *v22;
  CFStringRef v23;
  uint64_t valuePtr;

  if (a1 && theArray)
  {
    if (a6 >= 2)
    {
      if (CFArrayGetCount(theArray))
      {
        valuePtr = a6 + a5 + 100;
        v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, &valuePtr);
        if (v12)
        {
          v13 = v12;
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            for (i = 0; i != Count; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
              if (!CFDictionaryContainsKey(a1, ValueAtIndex))
                CFDictionarySetValue(a1, ValueAtIndex, v13);
            }
          }
          CFRelease(v13);
        }
      }
    }
    if (a4)
    {
      valuePtr = a6 + a5;
      v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, &valuePtr);
      if (!CFDictionaryContainsKey(a1, a4))
        CFDictionarySetValue(a1, a4, v18);
      v19 = CFArrayGetCount(theArray);
      v20 = v19;
      if (v19)
      {
        if (v19 >= 1)
        {
          v21 = 0;
          do
          {
            v22 = CFArrayGetValueAtIndex(theArray, v21);
            v23 = CFStringCreateWithFormat(v17, 0, CFSTR("%@ && %@"), v22, a4);
            if (v23)
            {
              CFArrayAppendValue(a3, v23);
              CFRelease(v23);
            }
            ++v21;
          }
          while (v20 != v21);
        }
      }
      else
      {
        CFArrayAppendValue(theArray, a4);
      }
      if (v18)
        CFRelease(v18);
    }
  }
}

void sub_1A180C4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void updateRankingTermsWithQuery(__CFDictionary *a1, const __CFString *a2, uint64_t a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  uint64_t valuePtr;

  valuePtr = a3;
  if (a1 && !CFDictionaryContainsKey(a1, a2))
  {
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, &valuePtr);
    if (v5)
    {
      v6 = v5;
      CFDictionarySetValue(a1, a2, v5);
      CFRelease(v6);
    }
  }
}

void sub_1A180C5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  nlp::CFScopedPtr<__CFNumber const*>::reset(&a9, 0);
  _Unwind_Resume(a1);
}

__CFDictionary *NL::SpotlightParseFormatter::copyParseResult(uint64_t a1, int **a2, uint64_t a3)
{
  const __CFString *v6;
  int v7;
  CFStringRef Copy;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  BOOL updated;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  NL::SpotlightParseFormatter::reset((NL::SpotlightParseFormatter *)a1);
  v6 = *(const __CFString **)(*(_QWORD *)(a1 + 24) + 104);
  if (!v6)
    return (__CFDictionary *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a3);
  v7 = **a2;
  if (v7 <= 0)
    return (__CFDictionary *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a3);
  *(_DWORD *)(a1 + 48) = v7;
  Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(a1 + 40), Copy);
  if (!CFStringGetLength(*(CFStringRef *)(a1 + 40)))
    return (__CFDictionary *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a3);
  v9 = *((_QWORD *)*a2 + 2) - *((_QWORD *)*a2 + 1);
  if (v9 < 1)
    return (__CFDictionary *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a3);
  v10 = 0;
  v11 = 0;
  v12 = (unint64_t)v9 >> 4;
  v13 = v12 <= 1 ? 1 : v12;
  do
  {
    v14 = *(_OWORD *)(*((_QWORD *)*a2 + 1) + 16 * v10);
    v29 = v14;
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v27 = v14;
    if ((int)NL::ParseIntent::confidence((NL::ParseIntent *)v14) >= 1)
    {
      v28 = v27;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      updated = NL::SpotlightParseFormatter::updateParseResultForIntentAtIndex(a1, (uint64_t *)&v28, v10, a3);
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v11 |= updated;
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    }
    if (v15)
    {
      v24 = (unint64_t *)&v15->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    ++v10;
  }
  while (v10 != v13);
  if ((v11 & 1) != 0)
    return NL::ParseFormatter::copyFormattedResult((NL::ParseFormatter *)a1, a3);
  else
    return (__CFDictionary *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a3);
}

void sub_1A180C7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void NL::SpotlightParseFormatter::loadUserQueries(NL::SpotlightParseFormatter *this)
{
  const __CFSet *v2;
  const __CFSet *v3;
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CFIndex Count;
  unint64_t v7;
  const void **v8;
  size_t v9;
  const void **v10;
  CFIndex v11;
  CFStringRef v12;
  const __CFString *v13;
  const __CFString *v14;
  std::string *v15;
  char v16;
  uint64_t **v17;
  void **v18;
  void **v19;
  void *v20;
  CFIndex v21;
  CFStringRef v22;
  const __CFString *v23;
  std::string *v24;
  std::string::size_type v25;
  char v26;
  uint64_t **v27;
  uint64_t **v28;
  void **v29;
  void **v30;
  void *v31;
  std::string *v32;
  std::string::size_type v33;
  char v34;
  uint64_t **v35;
  void **v36;
  void **v37;
  void *v38;
  uint64_t **v39;
  uint64_t **v40;
  _OWORD *v41;
  uint64_t **v42;
  _OWORD *v43;
  uint64_t v44;
  std::string::size_type v45;
  uint64_t *v46;
  _OWORD *v47[2];
  char v48;
  _OWORD *v49[2];
  char v50;
  std::string v51;
  std::string __str;
  const __CFString *v53;
  __CFArray *v54;
  const __CFSet *v55;
  _OWORD *v56;
  _QWORD v57[4];

  v57[2] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*((_QWORD *)this + 1) + 16))
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(*((NLAbstractOrthographyConvertor **)this + 18));
  v2 = (const __CFSet *)NL::SpotlightUserContext::copyUserNames(*((NL::SpotlightUserContext **)this + 18));
  v55 = v2;
  if (v2)
  {
    v3 = v2;
    if (CFSetGetCount(v2))
    {
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      v54 = Mutable;
      if (Mutable)
      {
        Count = CFSetGetCount(v3);
        v46 = &v44;
        MEMORY[0x1E0C80A78]();
        v8 = (const void **)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
        if (v7 >= 0x200)
          v9 = 512;
        else
          v9 = v7;
        bzero((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
        CFSetGetValues(v3, v8);
        if (Count >= 1)
        {
          v10 = v8;
          v11 = Count;
          do
          {
            v12 = CFStringCreateWithFormat(v4, 0, CFSTR("kMDItemAuthors=\"%@\"cwd"), *v10);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
            CFArrayAppendValue(Mutable, v12);
            if (v12)
              CFRelease(v12);
            ++v10;
            --v11;
          }
          while (v11);
        }
        v13 = CFStringCreateByCombiningStrings(v4, Mutable, CFSTR(" || "));
        v14 = v13;
        v53 = v13;
        if (v13)
        {
          getUTF8StringFromCFString(v13, &__str);
          std::operator+<char>();
          v15 = std::string::append(&v51, ")");
          v45 = v15->__r_.__value_.__r.__words[0];
          v57[0] = v15->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v57 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
          v16 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(v49, "MSGMESSAGESENT");
          v47[0] = v49;
          v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 21, (const void **)v49, (uint64_t)&std::piecewise_construct, v47);
          std::string::basic_string[abi:ne180100]<0>(v47, "SENDER.HasUserSent");
          v56 = v47;
          v18 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17 + 7, (const void **)v47, (uint64_t)&std::piecewise_construct, &v56);
          v19 = v18;
          if (*((char *)v18 + 79) < 0)
            operator delete(v18[7]);
          v20 = (void *)v57[0];
          v19[7] = (void *)v45;
          v19[8] = v20;
          *(void **)((char *)v19 + 71) = *(void **)((char *)v57 + 7);
          *((_BYTE *)v19 + 79) = v16;
          if (v48 < 0)
            operator delete(v47[0]);
          if (v50 < 0)
            operator delete(v49[0]);
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v51.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        CFArrayRemoveAllValues(Mutable);
        if (Count >= 1)
        {
          v21 = Count;
          do
          {
            v22 = CFStringCreateWithFormat(v4, 0, CFSTR("kMDItemUserSharedReceivedRecipient=\"%@\"cwd"), *v8);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
            CFArrayAppendValue(Mutable, v22);
            if (v22)
              CFRelease(v22);
            ++v8;
            --v21;
          }
          while (v21);
        }
        v23 = CFStringCreateByCombiningStrings(v4, Mutable, CFSTR(" || "));
        if (v14)
          CFRelease(v14);
        v53 = v23;
        if (v23)
        {
          getUTF8StringFromCFString(v23, &__str);
          if (Count < 2)
          {
            std::string::basic_string[abi:ne180100]<0>(&v51, "MAILRECEIVED");
            v39 = (uint64_t **)((char *)this + 168);
            v49[0] = &v51;
            v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39, (const void **)&v51.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v49);
            std::string::basic_string[abi:ne180100]<0>(v49, "RECIPIENT.HasUserReceived");
            v47[0] = v49;
            v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)v49, (uint64_t)&std::piecewise_construct, v47);
            std::string::operator=((std::string *)((char *)v41 + 56), &__str);
            if (v50 < 0)
              operator delete(v49[0]);
            if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v51.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&v51, "MESSAGERECEIVED");
            v49[0] = &v51;
            v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39, (const void **)&v51.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v49);
            std::string::basic_string[abi:ne180100]<0>(v49, "RECIPIENT.HasUserReceived");
            v47[0] = v49;
            v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)v49, (uint64_t)&std::piecewise_construct, v47);
            std::string::operator=((std::string *)((char *)v43 + 56), &__str);
          }
          else
          {
            std::operator+<char>();
            v24 = std::string::append(&v51, ")");
            v25 = v24->__r_.__value_.__r.__words[0];
            v57[0] = v24->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v57 + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
            v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(v49, "MAILRECEIVED");
            v27 = (uint64_t **)((char *)this + 168);
            v47[0] = v49;
            v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v27, (const void **)v49, (uint64_t)&std::piecewise_construct, v47);
            std::string::basic_string[abi:ne180100]<0>(v47, "RECIPIENT.HasUserReceived");
            v56 = v47;
            v29 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)v47, (uint64_t)&std::piecewise_construct, &v56);
            v30 = v29;
            if (*((char *)v29 + 79) < 0)
              operator delete(v29[7]);
            v31 = (void *)v57[0];
            v30[7] = (void *)v25;
            v30[8] = v31;
            *(void **)((char *)v30 + 71) = *(void **)((char *)v57 + 7);
            *((_BYTE *)v30 + 79) = v26;
            if (v48 < 0)
              operator delete(v47[0]);
            if (v50 < 0)
              operator delete(v49[0]);
            if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v51.__r_.__value_.__l.__data_);
            std::operator+<char>();
            v32 = std::string::append(&v51, ")");
            v33 = v32->__r_.__value_.__r.__words[0];
            v57[0] = v32->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v57 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
            v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
            v32->__r_.__value_.__l.__size_ = 0;
            v32->__r_.__value_.__r.__words[2] = 0;
            v32->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(v49, "MESSAGERECEIVED");
            v47[0] = v49;
            v35 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v27, (const void **)v49, (uint64_t)&std::piecewise_construct, v47);
            std::string::basic_string[abi:ne180100]<0>(v47, "RECIPIENT.HasUserReceived");
            v56 = v47;
            v36 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v35 + 7, (const void **)v47, (uint64_t)&std::piecewise_construct, &v56);
            v37 = v36;
            if (*((char *)v36 + 79) < 0)
              operator delete(v36[7]);
            v38 = (void *)v57[0];
            v37[7] = (void *)v33;
            v37[8] = v38;
            *(void **)((char *)v37 + 71) = *(void **)((char *)v57 + 7);
            *((_BYTE *)v37 + 79) = v34;
            if (v48 < 0)
              operator delete(v47[0]);
          }
          if (v50 < 0)
            operator delete(v49[0]);
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v51.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          CFRelease(v23);
        }
        CFRelease(Mutable);
      }
    }
    CFRelease(v3);
  }
}

void sub_1A180CED4(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  if (*(char *)(v3 - 225) < 0)
    operator delete(*(void **)(v3 - 248));
  if (*(char *)(v3 - 201) < 0)
    operator delete(*(void **)(v3 - 224));
  if (v2 < 0)
    operator delete(v1);
  if (*(char *)(v3 - 177) < 0)
    operator delete(*(void **)(v3 - 200));
  if (*(char *)(v3 - 153) < 0)
    operator delete(*(void **)(v3 - 176));
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v3 - 152), 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v3 - 144), 0);
  nlp::CFScopedPtr<__CFSet const*>::reset((const void **)(v3 - 136), 0);
  _Unwind_Resume(a1);
}

void NL::SpotlightParseFormatter::loadMailTranslations(NL::SpotlightParseFormatter *this)
{
  uint64_t **v2;
  uint64_t **v3;
  _OWORD *v4;
  uint64_t **v5;
  _OWORD *v6;
  uint64_t **v7;
  _OWORD *v8;
  uint64_t **v9;
  _OWORD *v10;
  uint64_t **v11;
  _OWORD *v12;
  uint64_t **v13;
  _OWORD *v14;
  uint64_t **v15;
  _OWORD *v16;
  uint64_t **v17;
  _OWORD *v18;
  uint64_t **v19;
  _OWORD *v20;
  uint64_t **v21;
  _OWORD *v22;
  uint64_t **v23;
  _OWORD *v24;
  uint64_t **v25;
  _OWORD *v26;
  uint64_t **v27;
  _OWORD *v28;
  uint64_t **v29;
  _OWORD *v30;
  uint64_t **v31;
  _OWORD *v32;
  uint64_t **v33;
  _OWORD *v34;
  uint64_t **v35;
  _OWORD *v36;
  uint64_t **v37;
  _OWORD *v38;
  uint64_t **v39;
  _OWORD *v40;
  uint64_t **v41;
  _OWORD *v42;
  uint64_t **v43;
  _OWORD *v44;
  uint64_t **v45;
  _OWORD *v46;
  uint64_t **v47;
  _OWORD *v48;
  uint64_t **v49;
  _OWORD *v50;
  uint64_t **v51;
  _OWORD *v52;
  uint64_t **v53;
  _OWORD *v54;
  uint64_t **v55;
  _OWORD *v56;
  uint64_t **v57;
  _OWORD *v58;
  uint64_t **v59;
  _OWORD *v60;
  uint64_t **v61;
  _OWORD *v62;
  uint64_t **v63;
  _OWORD *v64;
  uint64_t **v65;
  _OWORD *v66;
  uint64_t **v67;
  _OWORD *v68;
  uint64_t **v69;
  _OWORD *v70;
  void *__p[2];
  char v72;
  void *v73[2];
  char v74;
  void **v75;

  v2 = (uint64_t **)((char *)this + 168);
  updateNLPResultModifierTranslations((uint64_t **)this + 21, (uint64_t **)this + 30);
  updateNLPUserActionTranslations(v2);
  updateMailFileTypeTranslations(v2);
  updateMailAttachmentTranslations(v2);
  updateMailTransportTranslations(v2);
  updateNLPValueTranslations(v2);
  if (NL::ParserContext::languageIsCJ(*((NL::ParserContext **)this + 1)))
    updateSpotlightSenderReceiverTranslations_Tokenize(v2);
  else
    updateSpotlightSenderReceiverTranslations(v2);
  std::string::basic_string[abi:ne180100]<0>(v73, "CONTAINER");
  __p[0] = v73;
  v3 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ChatClient");
  v75 = __p;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v4 + 56, "kMDItemContentType=\"com.apple.ichat.transcript\"");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "CONTAINER");
  __p[0] = v73;
  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailClient");
  v75 = __p;
  v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v6 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "CONTAINER");
  __p[0] = v73;
  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MessageClient");
  v75 = __p;
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v8 + 56, "(_kMDItemGroupId=1 || kMDItemContentType=\"com.apple.ichat.transcript\")");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "FACEBOOKED");
  __p[0] = v73;
  v9 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FacebookImageKind");
  v75 = __p;
  v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v10 + 56, "kMDItemUserSharedSentTransport=\"facebook*\"cwd && _kMDItemGroupId=13");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "ABOUT");
  __p[0] = v73;
  v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v75 = __p;
  v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v11 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v12 + 56, "(kMDItemTextContent=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "ABOUT");
  __p[0] = v73;
  v13 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v75 = __p;
  v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v14 + 56, "(kMDItemTextContent=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "TOPICMOD");
  __p[0] = v73;
  v15 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v75 = __p;
  v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v15 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v16 + 56, "(kMDItemTextContent=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "TITLED");
  __p[0] = v73;
  v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v75 = __p;
  v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v18 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "TITLED");
  __p[0] = v73;
  v19 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v75 = __p;
  v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v20 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "TITLED");
  __p[0] = v73;
  v21 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v75 = __p;
  v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v21 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v22 + 56, "(kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "ENTITLED");
  __p[0] = v73;
  v23 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v75 = __p;
  v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v23 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v24 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "ENTITLED");
  __p[0] = v73;
  v25 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "OpenText");
  v75 = __p;
  v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v25 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v26 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "ENTITLED");
  __p[0] = v73;
  v27 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v75 = __p;
  v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v27 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v28 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "ENTITLED");
  __p[0] = v73;
  v29 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "NameText");
  v75 = __p;
  v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v29 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v30 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "ENTITLED");
  __p[0] = v73;
  v31 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DateText");
  v75 = __p;
  v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v31 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v32 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "ENTITLED");
  __p[0] = v73;
  v33 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v75 = __p;
  v34 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v33 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v34 + 56, "(kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "FILETITLED");
  __p[0] = v73;
  v35 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v75 = __p;
  v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v35 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v36 + 56, "(_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\")) && (kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "FILETITLED");
  __p[0] = v73;
  v37 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "OpenText");
  v75 = __p;
  v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v37 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v38 + 56, "(_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\")) && (kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "FILETITLED");
  __p[0] = v73;
  v39 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v75 = __p;
  v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v40 + 56, "(_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\")) && (kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "FILETITLED");
  __p[0] = v73;
  v41 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v75 = __p;
  v42 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v41 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v42 + 56, "(_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\")) && (kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "FILENAMED");
  __p[0] = v73;
  v43 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v75 = __p;
  v44 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v43 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v44 + 56, "(kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "READMOD");
  __p[0] = v73;
  v45 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Read");
  v75 = __p;
  v46 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v45 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v46 + 56, "com_apple_mail_read=%@v");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "REPLYMOD");
  __p[0] = v73;
  v47 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Reply");
  v75 = __p;
  v48 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v47 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v48 + 56, "com_apple_mail_repliedTo=%@v");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "REPLYMOD");
  __p[0] = v73;
  v49 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Replied");
  v75 = __p;
  v50 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v49 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v50 + 56, "com_apple_mail_repliedTo=%@v");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "REPLIED");
  __p[0] = v73;
  v51 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Reply");
  v75 = __p;
  v52 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v51 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v52 + 56, "com_apple_mail_repliedTo=%@v");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "REPLIED");
  __p[0] = v73;
  v53 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Replied");
  v75 = __p;
  v54 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v53 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v54 + 56, "com_apple_mail_repliedTo=%@v");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "IGNOREMOD");
  __p[0] = v73;
  v55 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasIgnored");
  v75 = __p;
  v56 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v55 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v56 + 56, "(com_apple_mail_repliedTo=0 || com_apple_mail_read=0)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "FLAGMOD");
  __p[0] = v73;
  v57 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FlagColor");
  v75 = __p;
  v58 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v57 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v58 + 56, "com_apple_mail_flagColor=%@v");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "FLAGGED");
  __p[0] = v73;
  v59 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FlagColor");
  v75 = __p;
  v60 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v59 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v60 + 56, "com_apple_mail_flagColor=%@v");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "FLAGMOD");
  __p[0] = v73;
  v61 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasFlagged");
  v75 = __p;
  v62 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v61 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v62 + 56, "com_apple_mail_flagged=%@v");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "FLAGMOD");
  __p[0] = v73;
  v63 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Flag");
  v75 = __p;
  v64 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v63 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v64 + 56, "com_apple_mail_flagged=%@v");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "FLAGGED");
  __p[0] = v73;
  v65 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Flag");
  v75 = __p;
  v66 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v65 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v66 + 56, "com_apple_mail_flagged=%@v");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "SUBJECTMOD");
  __p[0] = v73;
  v67 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Subject");
  v75 = __p;
  v68 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v67 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v68 + 56, "(kMDItemSubject!=\"*\"cwd || kMDItemSubject=\"\"cwd)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  std::string::basic_string[abi:ne180100]<0>(v73, "QUOTED");
  __p[0] = v73;
  v69 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v75 = __p;
  v70 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v69 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A1B0DE04]((char *)v70 + 56, "(** = \"%@c*\"cdw)");
  if (v72 < 0)
    operator delete(__p[0]);
  if (v74 < 0)
    operator delete(v73[0]);
}

void sub_1A180E5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NL::SpotlightParseFormatter::loadNotesTranslations(NL::SpotlightParseFormatter *this)
{
  uint64_t **v2;
  uint64_t **v3;
  _OWORD *v4;
  uint64_t **v5;
  _OWORD *v6;
  uint64_t **v7;
  _OWORD *v8;
  uint64_t **v9;
  _OWORD *v10;
  uint64_t **v11;
  _OWORD *v12;
  uint64_t **v13;
  _OWORD *v14;
  uint64_t **v15;
  _OWORD *v16;
  uint64_t **v17;
  _OWORD *v18;
  uint64_t **v19;
  _OWORD *v20;
  uint64_t **v21;
  _OWORD *v22;
  uint64_t **v23;
  _OWORD *v24;
  uint64_t **v25;
  _OWORD *v26;
  uint64_t **v27;
  _OWORD *v28;
  uint64_t **v29;
  _OWORD *v30;
  uint64_t **v31;
  _OWORD *v32;
  uint64_t **v33;
  _OWORD *v34;
  uint64_t **v35;
  _OWORD *v36;
  uint64_t **v37;
  _OWORD *v38;
  uint64_t **v39;
  _OWORD *v40;
  uint64_t **v41;
  _OWORD *v42;
  uint64_t **v43;
  _OWORD *v44;
  uint64_t **v45;
  _OWORD *v46;
  uint64_t **v47;
  _OWORD *v48;
  uint64_t **v49;
  _OWORD *v50;
  uint64_t **v51;
  _OWORD *v52;
  uint64_t **v53;
  _OWORD *v54;
  uint64_t **v55;
  _OWORD *v56;
  uint64_t **v57;
  _OWORD *v58;
  uint64_t **v59;
  _OWORD *v60;
  uint64_t **v61;
  _OWORD *v62;
  uint64_t **v63;
  _OWORD *v64;
  uint64_t **v65;
  _OWORD *v66;
  uint64_t **v67;
  _OWORD *v68;
  uint64_t **v69;
  _OWORD *v70;
  uint64_t **v71;
  _OWORD *v72;
  uint64_t **v73;
  _OWORD *v74;
  uint64_t **v75;
  _OWORD *v76;
  uint64_t **v77;
  _OWORD *v78;
  uint64_t **v79;
  _OWORD *v80;
  uint64_t **v81;
  _OWORD *v82;
  uint64_t **v83;
  _OWORD *v84;
  uint64_t **v85;
  _OWORD *v86;
  uint64_t **v87;
  _OWORD *v88;
  uint64_t **v89;
  _OWORD *v90;
  uint64_t **v91;
  _OWORD *v92;
  uint64_t **v93;
  _OWORD *v94;
  uint64_t **v95;
  _OWORD *v96;
  uint64_t **v97;
  _OWORD *v98;
  uint64_t **v99;
  _OWORD *v100;
  uint64_t **v101;
  _OWORD *v102;
  uint64_t **v103;
  _OWORD *v104;
  uint64_t **v105;
  _OWORD *v106;
  uint64_t **v107;
  _OWORD *v108;
  uint64_t **v109;
  _OWORD *v110;
  uint64_t **v111;
  _OWORD *v112;
  uint64_t **v113;
  _OWORD *v114;
  uint64_t **v115;
  _OWORD *v116;
  uint64_t **v117;
  _OWORD *v118;
  uint64_t **v119;
  _OWORD *v120;
  uint64_t **v121;
  _OWORD *v122;
  uint64_t **v123;
  _OWORD *v124;
  void *__p[2];
  char v126;
  void *v127[2];
  char v128;
  void **v129;

  v2 = (uint64_t **)((char *)this + 168);
  updateNLPValueTranslations((uint64_t **)this + 21);
  updateNLPResultModifierTranslations(v2, (uint64_t **)this + 30);
  updateNotesFileTypeTranslations(v2);
  updateNotesAttachmentTranslations(v2);
  updateSpotlightTransportTranslations(v2);
  std::string::basic_string[abi:ne180100]<0>(v127, "ABOUT");
  __p[0] = v127;
  v3 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v129 = __p;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v4 + 56, "(kMDItemDisplayName=\"%@c*\"cwd || kMDItemTextContent=\"%@c*\"cwd)");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "ABOUT");
  __p[0] = v127;
  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DateText");
  v129 = __p;
  v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v6 + 56, "(kMDItemDisplayName=\"%@c*\"cwd || kMDItemTextContent=\"%@c*\"cwd)");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "ABOUT");
  __p[0] = v127;
  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "NameText");
  v129 = __p;
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v8 + 56, "(kMDItemDisplayName=\"%@c*\"cwd || kMDItemTextContent=\"%@c*\"cwd)");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "ABOUT");
  __p[0] = v127;
  v9 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v129 = __p;
  v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v10 + 56, "(kMDItemDisplayName=\"%@c*\"cwd || kMDItemTextContent=\"%@c*\"cwd)");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "TOPICMOD");
  __p[0] = v127;
  v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v129 = __p;
  v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v11 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v12 + 56, "(kMDItemDisplayName=\"%@c*\"cwd || kMDItemTextContent=\"%@c*\"cwd)");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "TITLED");
  __p[0] = v127;
  v13 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v129 = __p;
  v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v14 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "TITLED");
  __p[0] = v127;
  v15 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "NameText");
  v129 = __p;
  v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v15 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v16 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "TITLED");
  __p[0] = v127;
  v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DateText");
  v129 = __p;
  v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v18 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "TITLED");
  __p[0] = v127;
  v19 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v129 = __p;
  v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v20 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "TITLED");
  __p[0] = v127;
  v21 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v129 = __p;
  v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v21 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v22 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "ENTITLED");
  __p[0] = v127;
  v23 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v129 = __p;
  v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v23 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v24 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "ENTITLED");
  __p[0] = v127;
  v25 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "NameText");
  v129 = __p;
  v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v25 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v26 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "ENTITLED");
  __p[0] = v127;
  v27 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DateText");
  v129 = __p;
  v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v27 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v28 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "ENTITLED");
  __p[0] = v127;
  v29 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v129 = __p;
  v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v29 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v30 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "ENTITLED");
  __p[0] = v127;
  v31 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v129 = __p;
  v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v31 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v32 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "FILETITLED");
  __p[0] = v127;
  v33 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v129 = __p;
  v34 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v33 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v34 + 56, "(kMDItemAttachmentTypes=\"*\"cwd && kMDItemDisplayName=\"%@c*\"cwd)");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "FILETITLED");
  __p[0] = v127;
  v35 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v129 = __p;
  v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v35 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v36 + 56, "(kMDItemAttachmentTypes=\"*\"cwd && kMDItemDisplayName=\"%@c*\"cwd)");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "FILETITLED");
  __p[0] = v127;
  v37 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v129 = __p;
  v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v37 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v38 + 56, "(kMDItemAttachmentTypes=\"*\"cwd && kMDItemDisplayName=\"%@c*\"cwd)");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "FILENAMED");
  __p[0] = v127;
  v39 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v129 = __p;
  v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v40 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "QUOTED");
  __p[0] = v127;
  v41 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v129 = __p;
  v42 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v41 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v42 + 56, "** = \"%@c*\"cdw");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "SHATED");
  __p[0] = v127;
  v43 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v129 = __p;
  v44 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v43 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v44 + 56, "kMDItemAuthors=\"*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
  __p[0] = v127;
  v45 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v129 = __p;
  v46 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v45 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v46 + 56, "kMDItemAuthors=\"*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
  __p[0] = v127;
  v47 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasShared");
  v129 = __p;
  v48 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v47 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v48 + 56, "kMDItemAuthors=\"*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "FILECREATED");
  __p[0] = v127;
  v49 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v129 = __p;
  v50 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v49 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v50 + 56, "kMDItemAuthors=\"%@c*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  std::string::basic_string[abi:ne180100]<0>(v127, "SHARED");
  __p[0] = v127;
  v51 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserShared");
  v129 = __p;
  v52 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v51 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v52 + 56, "kMDItemAuthors=\"*\"cwd");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  if (NL::ParserContext::languageIsCJ(*((NL::ParserContext **)this + 1)))
  {
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    v53 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
    v129 = __p;
    v54 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v53 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v54 + 56, "kMDItemAuthors=\"%@c*\"cwdt");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    v55 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
    v129 = __p;
    v56 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v55 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v56 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    v57 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
    v129 = __p;
    v58 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v57 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v58 + 56, "kMDItemAuthors=\"%@c*\"cwdt");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    v59 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
    v129 = __p;
    v60 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v59 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v60 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    v61 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
    v129 = __p;
    v62 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v61 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v62 + 56, "kMDItemAuthors=\"*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    v63 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
    v129 = __p;
    v64 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v63 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v64 + 56, "kMDItemAuthors=\"*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    v65 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
    v129 = __p;
    v66 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v65 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v66 + 56, "kMDItemAuthors=\"%@c*\"cwdt");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    v67 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
    v129 = __p;
    v68 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v67 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v68 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    v69 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
    v129 = __p;
    v70 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v69 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v70 + 56, "kMDItemAuthors=\"%@c*\"cwdt");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    v71 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
    v129 = __p;
    v72 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v71 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v72 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "SENTFROM");
    __p[0] = v127;
    v73 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
    v129 = __p;
    v74 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v73 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v74 + 56, "kMDItemAuthors=\"%@c*\"cwdt");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "SENTFROM");
    __p[0] = v127;
    v75 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
    v129 = __p;
    v76 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v75 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v76 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "FROMTO");
    __p[0] = v127;
    v77 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
    v129 = __p;
    v78 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v77 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v78 + 56, "kMDItemAuthors=\"%@c*\"cwdt");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "FROMTO");
    __p[0] = v127;
    v79 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
    v129 = __p;
    v80 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v79 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v80 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "AUTHORED");
    __p[0] = v127;
    v81 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
    v129 = __p;
    v82 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v81 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v82 + 56, "(kMDItemAuthors=\"%@c*\"cwdt || kMDItemAuthorEmailAddresses=\"%@c\")");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    v83 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
    v129 = __p;
    v84 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v83 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v84 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    v85 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
    v129 = __p;
    v86 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v85 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v86 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    v87 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
    v129 = __p;
    v88 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v87 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v88 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    v89 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
    v129 = __p;
    v90 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v89 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v90 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    v91 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
    v129 = __p;
    v92 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v91 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v92 + 56, "kMDItemAuthors=\"*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVEDFROM");
    __p[0] = v127;
    v93 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
    v129 = __p;
    v94 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v93 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v94 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVEDFROM");
    __p[0] = v127;
    v95 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
    v129 = __p;
    v96 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v95 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v96 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVEDFROM");
    __p[0] = v127;
    v97 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
    v129 = __p;
    v98 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v97 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v98 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVEDFROM");
    __p[0] = v127;
    v99 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
    v129 = __p;
    v100 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v100 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVEDFROM");
    __p[0] = v127;
    v101 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
    v129 = __p;
    v102 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v101 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v102 + 56, "kMDItemAuthors=\"*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    v103 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
    v129 = __p;
    v104 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v103 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v104 + 56, "kMDItemAuthors=\"*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    v105 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
    v129 = __p;
    v106 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v105 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v106 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    v107 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
    v129 = __p;
    v108 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v107 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v108 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    v109 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
    v129 = __p;
    v110 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v109 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v110 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    v111 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
    v129 = __p;
    v112 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v111 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v112 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "SENTFROM");
    __p[0] = v127;
    v113 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
    v129 = __p;
    v114 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v113 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v114 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "SENTFROM");
    __p[0] = v127;
    v115 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
    v129 = __p;
    v116 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v115 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v116 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "FROMTO");
    __p[0] = v127;
    v117 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
    v129 = __p;
    v118 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v117 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v118 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "FROMTO");
    __p[0] = v127;
    v119 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
    v129 = __p;
    v120 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v119 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v120 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "AUTHORED");
    __p[0] = v127;
    v121 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
    v129 = __p;
    v122 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v121 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A1B0DE04]((char *)v122 + 56, "(kMDItemAuthors=\"%@c*\"cwd || kMDItemAuthorEmailAddresses=\"%@c\")");
    if (v126 < 0)
      operator delete(__p[0]);
    if (v128 < 0)
      operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "AUTHORED");
  __p[0] = v127;
  v123 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v129 = __p;
  v124 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v123 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A1B0DE04]((char *)v124 + 56, "kMDItemAuthorEmailAddresses=\"%@c\"");
  if (v126 < 0)
    operator delete(__p[0]);
  if (v128 < 0)
    operator delete(v127[0]);
}

void sub_1A1810DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NL::SpotlightParseFormatter::loadSpotlightTranslations(NL::SpotlightParseFormatter *this)
{
  uint64_t **v2;
  uint64_t **v3;
  _OWORD *v4;
  uint64_t **v5;
  _OWORD *v6;
  uint64_t **v7;
  _OWORD *v8;
  uint64_t **v9;
  _OWORD *v10;
  uint64_t **v11;
  _OWORD *v12;
  uint64_t **v13;
  _OWORD *v14;
  uint64_t **v15;
  _OWORD *v16;
  uint64_t **v17;
  _OWORD *v18;
  uint64_t **v19;
  _OWORD *v20;
  uint64_t **v21;
  _OWORD *v22;
  uint64_t **v23;
  _OWORD *v24;
  uint64_t **v25;
  _OWORD *v26;
  uint64_t **v27;
  _OWORD *v28;
  uint64_t **v29;
  _OWORD *v30;
  uint64_t **v31;
  _OWORD *v32;
  uint64_t **v33;
  _OWORD *v34;
  uint64_t **v35;
  _OWORD *v36;
  uint64_t **v37;
  _OWORD *v38;
  uint64_t **v39;
  _OWORD *v40;
  uint64_t **v41;
  _OWORD *v42;
  uint64_t **v43;
  _OWORD *v44;
  uint64_t **v45;
  _OWORD *v46;
  uint64_t **v47;
  _OWORD *v48;
  uint64_t **v49;
  _OWORD *v50;
  uint64_t **v51;
  _OWORD *v52;
  uint64_t **v53;
  _OWORD *v54;
  uint64_t **v55;
  _OWORD *v56;
  uint64_t **v57;
  _OWORD *v58;
  uint64_t **v59;
  _OWORD *v60;
  uint64_t **v61;
  _OWORD *v62;
  uint64_t **v63;
  _OWORD *v64;
  uint64_t **v65;
  _OWORD *v66;
  uint64_t **v67;
  _OWORD *v68;
  uint64_t **v69;
  _OWORD *v70;
  uint64_t **v71;
  _OWORD *v72;
  uint64_t **v73;
  _OWORD *v74;
  uint64_t **v75;
  _OWORD *v76;
  uint64_t **v77;
  _OWORD *v78;
  uint64_t **v79;
  _OWORD *v80;
  uint64_t **v81;
  _OWORD *v82;
  uint64_t **v83;
  _OWORD *v84;
  uint64_t **v85;
  _OWORD *v86;
  void *__p[2];
  char v88;
  void *v89[2];
  char v90;
  void **v91;

  v2 = (uint64_t **)((char *)this + 168);
  updateNLPUserActionTranslations((uint64_t **)this + 21);
  updateNLPValueTranslations(v2);
  updateNLPResultModifierTranslations(v2, (uint64_t **)this + 30);
  updateSpotlightFileTypeTranslations(v2);
  updateSpotlightAttachmentTranslations(v2);
  updateSpotlightTransportTranslations(v2);
  if (NL::ParserContext::languageIsCJ(*((NL::ParserContext **)this + 1)))
    updateSpotlightSenderReceiverTranslations_Tokenize(v2);
  else
    updateSpotlightSenderReceiverTranslations(v2);
  std::string::basic_string[abi:ne180100]<0>(v89, "COMPANY");
  __p[0] = v89;
  v3 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Bundle");
  v91 = __p;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v4 + 56, "kMDItemCFBundleIdentifier=\"*%@c*\"cwd");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "COMPANYMOD");
  __p[0] = v89;
  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Bundle");
  v91 = __p;
  v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v6 + 56, "kMDItemCFBundleIdentifier=\"*%@c*\"cwd");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "CONTAINER");
  __p[0] = v89;
  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ChatClient");
  v91 = __p;
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v8 + 56, "kMDItemContentType=\"com.apple.ichat.transcript\"");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "CONTAINER");
  __p[0] = v89;
  v9 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailClient");
  v91 = __p;
  v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v10 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "CONTAINER");
  __p[0] = v89;
  v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MessageClient");
  v91 = __p;
  v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v11 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v12 + 56, "(_kMDItemGroupId=1 || kMDItemContentType=\"com.apple.ichat.transcript\")");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "FACEBOOKED");
  __p[0] = v89;
  v13 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FacebookImageKind");
  v91 = __p;
  v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v14 + 56, "kMDItemUserSharedSentTransport=\"facebook*\"cwd && _kMDItemGroupId=13");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "ABOUT");
  __p[0] = v89;
  v15 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v91 = __p;
  v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v15 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v16 + 56, "(kMDItemTextContent=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "ABOUT");
  __p[0] = v89;
  v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v91 = __p;
  v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v18 + 56, "(kMDItemTextContent=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "TOPICMOD");
  __p[0] = v89;
  v19 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v91 = __p;
  v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v20 + 56, "(kMDItemTextContent=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "ALBUM");
  __p[0] = v89;
  v21 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v91 = __p;
  v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v21 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v22 + 56, "(kMDItemAlbum=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "ALBUM");
  __p[0] = v89;
  v23 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v91 = __p;
  v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v23 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v24 + 56, "(kMDItemAlbum=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "IMAGEALBUM");
  __p[0] = v89;
  v25 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v91 = __p;
  v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v25 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v26 + 56, "(kMDItemAlbum=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd) && _kMDItemGroupId=13");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "ALBUM");
  __p[0] = v89;
  v27 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v91 = __p;
  v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v27 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v28 + 56, "_kMDItemGroupId=13");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "ALBUM");
  __p[0] = v89;
  v29 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAlbum");
  v91 = __p;
  v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v29 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v30 + 56, "_kMDItemGroupId=13");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "ALBUM");
  __p[0] = v89;
  v31 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAlbumKind");
  v91 = __p;
  v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v31 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v32 + 56, "_kMDItemGroupId=13");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "TITLEMOD");
  __p[0] = v89;
  v33 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v91 = __p;
  v34 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v33 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v34 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd || kMDItemAlbum=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "TITLED");
  __p[0] = v89;
  v35 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v91 = __p;
  v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v35 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v36 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "TITLED");
  __p[0] = v89;
  v37 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v91 = __p;
  v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v37 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v38 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "TITLED");
  __p[0] = v89;
  v39 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v91 = __p;
  v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v40 + 56, "(kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "ENTITLED");
  __p[0] = v89;
  v41 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v91 = __p;
  v42 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v41 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v42 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "ENTITLED");
  __p[0] = v89;
  v43 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v91 = __p;
  v44 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v43 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v44 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "ENTITLED");
  __p[0] = v89;
  v45 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v91 = __p;
  v46 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v45 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v46 + 56, "(kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "FILETITLED");
  __p[0] = v89;
  v47 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v91 = __p;
  v48 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v47 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v48 + 56, "(_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\")) && (kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "FILETITLED");
  __p[0] = v89;
  v49 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v91 = __p;
  v50 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v49 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v50 + 56, "(_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\")) && (kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "FILENAMED");
  __p[0] = v89;
  v51 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v91 = __p;
  v52 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v51 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v52 + 56, "(kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "IGNOREMOD");
  __p[0] = v89;
  v53 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasIgnored");
  v91 = __p;
  v54 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v53 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v54 + 56, "(com_apple_mail_repliedTo=0 || com_apple_mail_read=0)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "READMOD");
  __p[0] = v89;
  v55 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Read");
  v91 = __p;
  v56 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v55 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v56 + 56, "com_apple_mail_read=%@v");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "REPLYMOD");
  __p[0] = v89;
  v57 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Reply");
  v91 = __p;
  v58 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v57 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v58 + 56, "com_apple_mail_repliedTo=%@v");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "REPLYMOD");
  __p[0] = v89;
  v59 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Replied");
  v91 = __p;
  v60 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v59 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v60 + 56, "com_apple_mail_repliedTo=%@v");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "REPLIED");
  __p[0] = v89;
  v61 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Reply");
  v91 = __p;
  v62 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v61 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v62 + 56, "com_apple_mail_repliedTo=%@v");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "REPLIED");
  __p[0] = v89;
  v63 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Replied");
  v91 = __p;
  v64 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v63 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v64 + 56, "com_apple_mail_repliedTo=%@v");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "FLAGMOD");
  __p[0] = v89;
  v65 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FlagColor");
  v91 = __p;
  v66 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v65 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v66 + 56, "com_apple_mail_flagColor=%@v");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "FLAGGED");
  __p[0] = v89;
  v67 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FlagColor");
  v91 = __p;
  v68 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v67 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v68 + 56, "com_apple_mail_flagColor=%@v");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "FLAGMOD");
  __p[0] = v89;
  v69 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasFlagged");
  v91 = __p;
  v70 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v69 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v70 + 56, "com_apple_mail_flagged=%@v");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "FLAGGED");
  __p[0] = v89;
  v71 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Flag");
  v91 = __p;
  v72 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v71 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v72 + 56, "com_apple_mail_flagged=%@v");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "TAGMOD");
  __p[0] = v89;
  v73 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasTagged");
  v91 = __p;
  v74 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v73 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v74 + 56, "kMDItemUserTags=\"*\"cwd");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "TAGGED");
  __p[0] = v89;
  v75 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v91 = __p;
  v76 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v75 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v76 + 56, "kMDItemUserTags=\"%@c*\"cwd");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "TAGGED");
  __p[0] = v89;
  v77 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "OpenText");
  v91 = __p;
  v78 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v77 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v78 + 56, "kMDItemUserTags=\"%@c*\"cwd");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "TAGGED");
  __p[0] = v89;
  v79 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TagColor");
  v91 = __p;
  v80 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v79 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v80 + 56, "kMDItemUserTags=\"%@v*\"cwd");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "QUOTED");
  __p[0] = v89;
  v81 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v91 = __p;
  v82 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v81 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v82 + 56, "(** = \"%@c*\"cdw)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "ORIENTATION");
  __p[0] = v89;
  v83 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Orientation");
  v91 = __p;
  v84 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v83 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v84 + 56, "kMDItemOrientation=%@v");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  std::string::basic_string[abi:ne180100]<0>(v89, "SUBJECTMOD");
  __p[0] = v89;
  v85 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Subject");
  v91 = __p;
  v86 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v85 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A1B0DE04]((char *)v86 + 56, "(kMDItemSubject!=\"*\"cwd || kMDItemSubject=\"\"cwd)");
  if (v88 < 0)
    operator delete(__p[0]);
  if (v90 < 0)
    operator delete(v89[0]);
}

void sub_1A1812AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void updateNLPUserActionTranslations(uint64_t **a1)
{
  uint64_t **v2;
  _OWORD *v3;
  uint64_t **v4;
  _OWORD *v5;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t **v12;
  _OWORD *v13;
  uint64_t **v14;
  _OWORD *v15;
  uint64_t **v16;
  _OWORD *v17;
  uint64_t **v18;
  _OWORD *v19;
  uint64_t **v20;
  _OWORD *v21;
  uint64_t **v22;
  _OWORD *v23;
  uint64_t **v24;
  _OWORD *v25;
  uint64_t **v26;
  _OWORD *v27;
  uint64_t **v28;
  _OWORD *v29;
  uint64_t **v30;
  _OWORD *v31;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;
  void **v36;

  std::string::basic_string[abi:ne180100]<0>(v34, "USERPRINTED");
  __p[0] = v34;
  v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PRINTED.HasPrinted");
  v36 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v3 + 56, "kMDItemUserPrintedUserHandle=\"*\"");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, "USERPRINTED");
  __p[0] = v34;
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasUserPrinted");
  v36 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v5 + 56, "kMDItemUserPrintedUserHandle=\"%@uid\"");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, "USERCREATED");
  __p[0] = v34;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED.HasCreated");
  v36 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v7 + 56, "kMDItemUserCreatedUserHandle=\"*\"");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, "USERCREATED");
  __p[0] = v34;
  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasUserCreated");
  v36 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v9 + 56, "kMDItemUserCreatedUserHandle=\"%@uid\"");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, "MAILMODIFIED");
  __p[0] = v34;
  v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MODIFIED.HasModified");
  v36 = __p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v11 + 56, "kMDItemUserModifiedUserHandle=\"*\"");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, "FILEMODIFIED");
  __p[0] = v34;
  v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MODIFIED.HasModified");
  v36 = __p;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v13 + 56, "kMDItemUserModifiedUserHandle=\"*\"");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, "USERMODIFIED");
  __p[0] = v34;
  v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MODIFIED.HasModified");
  v36 = __p;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v15 + 56, "kMDItemUserModifiedUserHandle=\"*\"");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, "USERMODIFIED");
  __p[0] = v34;
  v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasUserModified");
  v36 = __p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v17 + 56, "kMDItemUserModifiedUserHandle=\"%@uid\"");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, "USERWEBVIEWED");
  __p[0] = v34;
  v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VIEWED.HasViewed");
  v36 = __p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v19 + 56, "InRange(kMDItemDateAdded,0,2147483647)");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, "USERWEBVIEWED");
  __p[0] = v34;
  v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VIEWED.HasUserViewed");
  v36 = __p;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v21 + 56, "InRange(kMDItemDateAdded,0,2147483647)");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, "USERWEBVIEWED");
  __p[0] = v34;
  v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VIEWED.HasDownloaded");
  v36 = __p;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v23 + 56, "InRange(kMDItemDateAdded,0,2147483647)");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, "USERWEBVIEWED");
  __p[0] = v34;
  v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DOWNLOADED.HasDownloaded");
  v36 = __p;
  v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v25 + 56, "InRange(kMDItemDateAdded,0,2147483647)");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, "USERMAILVIEWED");
  __p[0] = v34;
  v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VIEWED.HasViewed");
  v36 = __p;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v27 + 56, "InRange(com_apple_mail_dateLastViewed,0,2147483647)");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, "USERMAILVIEWED");
  __p[0] = v34;
  v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VIEWED.HasViewed");
  v36 = __p;
  v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v29 + 56, "InRange(com_apple_mail_dateLastViewed,0,2147483647)");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, "USERDOWNLOADED");
  __p[0] = v34;
  v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DOWNLOADED.HasDownloaded");
  v36 = __p;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A1B0DE04]((char *)v31 + 56, "InRange(kMDItemDownloadDate,0,2147483647)");
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
}

void sub_1A181365C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void updateNLPValueTranslations(uint64_t **a1)
{
  uint64_t **v2;
  _OWORD *v3;
  uint64_t **v4;
  _OWORD *v5;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t **v12;
  _OWORD *v13;
  uint64_t **v14;
  _OWORD *v15;
  uint64_t **v16;
  _OWORD *v17;
  uint64_t **v18;
  _OWORD *v19;
  uint64_t **v20;
  _OWORD *v21;
  uint64_t **v22;
  _OWORD *v23;
  uint64_t **v24;
  _OWORD *v25;
  uint64_t **v26;
  _OWORD *v27;
  uint64_t **v28;
  _OWORD *v29;
  uint64_t **v30;
  _OWORD *v31;
  uint64_t **v32;
  _OWORD *v33;
  uint64_t **v34;
  _OWORD *v35;
  uint64_t **v36;
  _OWORD *v37;
  uint64_t **v38;
  _OWORD *v39;
  uint64_t **v40;
  _OWORD *v41;
  uint64_t **v42;
  _OWORD *v43;
  uint64_t **v44;
  _OWORD *v45;
  uint64_t **v46;
  _OWORD *v47;
  uint64_t **v48;
  _OWORD *v49;
  uint64_t **v50;
  _OWORD *v51;
  uint64_t **v52;
  _OWORD *v53;
  uint64_t **v54;
  _OWORD *v55;
  uint64_t **v56;
  _OWORD *v57;
  uint64_t **v58;
  _OWORD *v59;
  uint64_t **v60;
  _OWORD *v61;
  void *__p[2];
  char v63;
  void *v64[2];
  char v65;
  void **v66;

  std::string::basic_string[abi:ne180100]<0>(v64, "PAGECOUNT");
  __p[0] = v64;
  v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagecountValue");
  v66 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v3 + 56, "kMDItemNumberOfPages=%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "EQUALTO");
  __p[0] = v64;
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagecountValue");
  v66 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v5 + 56, "kMDItemNumberOfPages=%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATEREQUAL");
  __p[0] = v64;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagecountValue");
  v66 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v7 + 56, "kMDItemNumberOfPages>=%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATER");
  __p[0] = v64;
  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagecountValue");
  v66 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v9 + 56, "kMDItemNumberOfPages>%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "LESSEQUAL");
  __p[0] = v64;
  v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagecountValue");
  v66 = __p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v11 + 56, "kMDItemNumberOfPages<=%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "LESS");
  __p[0] = v64;
  v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagecountValue");
  v66 = __p;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v13 + 56, "kMDItemNumberOfPages<%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "FILESIZE");
  __p[0] = v64;
  v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FilesizeValue");
  v66 = __p;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v15 + 56, "(kMDItemPhysicalSize>=%@v1 && kMDItemPhysicalSize<=%@v2)");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "EQUALTO");
  __p[0] = v64;
  v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FilesizeValue");
  v66 = __p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v17 + 56, "(kMDItemPhysicalSize>=%@v1 && kMDItemPhysicalSize<=%@v2)");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATEREQUAL");
  __p[0] = v64;
  v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FilesizeValue");
  v66 = __p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v19 + 56, "kMDItemPhysicalSize>=%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATER");
  __p[0] = v64;
  v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FilesizeValue");
  v66 = __p;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v21 + 56, "kMDItemPhysicalSize>%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "LESSEQUAL");
  __p[0] = v64;
  v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FilesizeValue");
  v66 = __p;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v23 + 56, "kMDItemPhysicalSize<=%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "LESS");
  __p[0] = v64;
  v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FilesizeValue");
  v66 = __p;
  v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v25 + 56, "kMDItemPhysicalSize<%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "LASTING");
  __p[0] = v64;
  v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DurationValue");
  v66 = __p;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v27 + 56, "(kMDItemDurationSeconds>=%@v1 && kMDItemDurationSeconds<=%@v2)");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "EQUALTO");
  __p[0] = v64;
  v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DurationValue");
  v66 = __p;
  v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v29 + 56, "(kMDItemDurationSeconds>=%@v1 && kMDItemDurationSeconds<=%@v2)");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATEREQUAL");
  __p[0] = v64;
  v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DurationValue");
  v66 = __p;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v31 + 56, "kMDItemDurationSeconds>=%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATER");
  __p[0] = v64;
  v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DurationValue");
  v66 = __p;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v33 + 56, "kMDItemDurationSeconds>%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "LESSEQUAL");
  __p[0] = v64;
  v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DurationValue");
  v66 = __p;
  v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v35 + 56, "kMDItemDurationSeconds<=%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "LESS");
  __p[0] = v64;
  v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DurationValue");
  v66 = __p;
  v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v37 + 56, "kMDItemDurationSeconds<%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "ALTITUDE");
  __p[0] = v64;
  v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AltitudeValue");
  v66 = __p;
  v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v39 + 56, "(kMDItemAltitude>=%@v1 && kMDItemAltitude<=%@v2)");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "EQUALTO");
  __p[0] = v64;
  v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AltitudeValue");
  v66 = __p;
  v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v41 + 56, "(kMDItemAltitude>=%@v1 && kMDItemAltitude<=%@v2)");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATEREQUAL");
  __p[0] = v64;
  v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AltitudeValue");
  v66 = __p;
  v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v43 + 56, "kMDItemAltitude>=%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATER");
  __p[0] = v64;
  v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AltitudeValue");
  v66 = __p;
  v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v45 + 56, "kMDItemAltitude>%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "LESSEQUAL");
  __p[0] = v64;
  v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AltitudeValue");
  v66 = __p;
  v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v47 + 56, "kMDItemAltitude<=%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "LESS");
  __p[0] = v64;
  v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AltitudeValue");
  v66 = __p;
  v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v49 + 56, "kMDItemAltitude<%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "PHOTOISO");
  __p[0] = v64;
  v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IsoValue");
  v66 = __p;
  v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v51 + 56, "kMDItemISOSpeed=%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "EQUALTO");
  __p[0] = v64;
  v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IsoValue");
  v66 = __p;
  v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v53 + 56, "kMDItemISOSpeed=%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATEREQUAL");
  __p[0] = v64;
  v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IsoValue");
  v66 = __p;
  v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v55 + 56, "kMDItemISOSpeed>=%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATER");
  __p[0] = v64;
  v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IsoValue");
  v66 = __p;
  v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v57 + 56, "kMDItemISOSpeed>%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "LESSEQUAL");
  __p[0] = v64;
  v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IsoValue");
  v66 = __p;
  v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v59 + 56, "kMDItemISOSpeed<=%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "LESS");
  __p[0] = v64;
  v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IsoValue");
  v66 = __p;
  v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A1B0DE04]((char *)v61 + 56, "kMDItemISOSpeed<%@v");
  if (v63 < 0)
    operator delete(__p[0]);
  if (v65 < 0)
    operator delete(v64[0]);
}

void sub_1A18149B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void updateNLPResultModifierTranslations(uint64_t **a1, uint64_t **a2)
{
  uint64_t **v4;
  _OWORD *v5;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t **v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  void **v20;

  std::string::basic_string[abi:ne180100]<0>(v18, "COUNT");
  __p[0] = v18;
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MaxCount");
  v20 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20);
  MEMORY[0x1A1B0DE04]((char *)v5 + 56, "");
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "COUNT");
  __p[0] = v18;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MinCount");
  v20 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20);
  MEMORY[0x1A1B0DE04]((char *)v7 + 56, "");
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "PERIOD");
  __p[0] = v18;
  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MaxTime");
  v20 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20);
  MEMORY[0x1A1B0DE04]((char *)v9 + 56, "");
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "PERIOD");
  __p[0] = v18;
  v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MinTime");
  v20 = __p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20);
  MEMORY[0x1A1B0DE04]((char *)v11 + 56, "");
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "COUNT");
  __p[0] = v18;
  v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MaxCount");
  v20 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20)+ 14) = 2;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "COUNT");
  __p[0] = v18;
  v13 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MinCount");
  v20 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20)+ 14) = 1;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "PERIOD");
  __p[0] = v18;
  v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MaxTime");
  v20 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20)+ 14) = 2;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "PERIOD");
  __p[0] = v18;
  v15 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MinTime");
  v20 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v15 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20)+ 14) = 1;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
}

void sub_1A1815034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void updateSpotlightFileTypeTranslations(uint64_t **a1)
{
  uint64_t **v2;
  _OWORD *v3;
  uint64_t **v4;
  _OWORD *v5;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t **v12;
  _OWORD *v13;
  uint64_t **v14;
  _OWORD *v15;
  uint64_t **v16;
  _OWORD *v17;
  uint64_t **v18;
  _OWORD *v19;
  uint64_t **v20;
  _OWORD *v21;
  uint64_t **v22;
  _OWORD *v23;
  uint64_t **v24;
  _OWORD *v25;
  uint64_t **v26;
  _OWORD *v27;
  uint64_t **v28;
  _OWORD *v29;
  uint64_t **v30;
  _OWORD *v31;
  uint64_t **v32;
  _OWORD *v33;
  uint64_t **v34;
  _OWORD *v35;
  uint64_t **v36;
  _OWORD *v37;
  uint64_t **v38;
  _OWORD *v39;
  uint64_t **v40;
  _OWORD *v41;
  uint64_t **v42;
  _OWORD *v43;
  uint64_t **v44;
  _OWORD *v45;
  uint64_t **v46;
  _OWORD *v47;
  uint64_t **v48;
  _OWORD *v49;
  uint64_t **v50;
  _OWORD *v51;
  uint64_t **v52;
  _OWORD *v53;
  uint64_t **v54;
  _OWORD *v55;
  uint64_t **v56;
  _OWORD *v57;
  uint64_t **v58;
  _OWORD *v59;
  uint64_t **v60;
  _OWORD *v61;
  uint64_t **v62;
  _OWORD *v63;
  uint64_t **v64;
  _OWORD *v65;
  uint64_t **v66;
  _OWORD *v67;
  uint64_t **v68;
  _OWORD *v69;
  uint64_t **v70;
  _OWORD *v71;
  uint64_t **v72;
  _OWORD *v73;
  uint64_t **v74;
  _OWORD *v75;
  uint64_t **v76;
  _OWORD *v77;
  uint64_t **v78;
  _OWORD *v79;
  uint64_t **v80;
  _OWORD *v81;
  uint64_t **v82;
  _OWORD *v83;
  uint64_t **v84;
  _OWORD *v85;
  uint64_t **v86;
  _OWORD *v87;
  uint64_t **v88;
  _OWORD *v89;
  uint64_t **v90;
  _OWORD *v91;
  uint64_t **v92;
  _OWORD *v93;
  uint64_t **v94;
  _OWORD *v95;
  uint64_t **v96;
  _OWORD *v97;
  uint64_t **v98;
  _OWORD *v99;
  uint64_t **v100;
  _OWORD *v101;
  uint64_t **v102;
  _OWORD *v103;
  uint64_t **v104;
  _OWORD *v105;
  uint64_t **v106;
  _OWORD *v107;
  uint64_t **v108;
  _OWORD *v109;
  uint64_t **v110;
  _OWORD *v111;
  uint64_t **v112;
  _OWORD *v113;
  uint64_t **v114;
  _OWORD *v115;
  uint64_t **v116;
  _OWORD *v117;
  uint64_t **v118;
  _OWORD *v119;
  uint64_t **v120;
  _OWORD *v121;
  uint64_t **v122;
  _OWORD *v123;
  uint64_t **v124;
  _OWORD *v125;
  uint64_t **v126;
  _OWORD *v127;
  uint64_t **v128;
  _OWORD *v129;
  uint64_t **v130;
  _OWORD *v131;
  uint64_t **v132;
  _OWORD *v133;
  uint64_t **v134;
  _OWORD *v135;
  uint64_t **v136;
  _OWORD *v137;
  uint64_t **v138;
  _OWORD *v139;
  uint64_t **v140;
  _OWORD *v141;
  uint64_t **v142;
  _OWORD *v143;
  uint64_t **v144;
  _OWORD *v145;
  uint64_t **v146;
  _OWORD *v147;
  void *__p[2];
  char v149;
  void *v150[2];
  char v151;
  void **v152;

  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ChatKind");
  v152 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v3 + 56, "kMDItemContentType=\"com.apple.ichat.transcript\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailKind");
  v152 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v5 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MessageKind");
  v152 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v7 + 56, "(_kMDItemGroupId=1 || kMDItemContentType=\"com.apple.ichat.transcript\")");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v152 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v9 + 56, "_kMDItemGroupId=13");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v152 = __p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v11 + 56, "(_kMDItemGroupId=13 && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v152 = __p;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v13 + 56, "kMDItemContentType=\"public.jpeg\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v152 = __p;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v15 + 56, "kMDItemContentType=\"public.png\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v152 = __p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v17 + 56, "kMDItemContentType=\"public.tiff\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v152 = __p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v19 + 56, "kMDItemContentType=\"com.compuserve.gif\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v152 = __p;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v21 + 56, "(kMDItemContentType=\"public.jpeg\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v152 = __p;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v23 + 56, "(kMDItemContentType=\"public.png\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v152 = __p;
  v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v25 + 56, "(kMDItemContentType=\"public.tiff\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v152 = __p;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v27 + 56, "(kMDItemContentType=\"com.compuserve.gif\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v152 = __p;
  v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v29 + 56, "_kMDItemGroupId=10");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v152 = __p;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v31 + 56, "(_kMDItemGroupId=10 && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v152 = __p;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v33 + 56, "kMDItemContentType=\"aif*\"cwd");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v152 = __p;
  v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v35 + 56, "kMDItemContentType=\"public.aac\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v152 = __p;
  v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v37 + 56, "kMDItemContentType=\"public.mp3\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v152 = __p;
  v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v39 + 56, "(kMDItemContentType=\"public.aac\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v152 = __p;
  v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v41 + 56, "(kMDItemContentType=\"aif*\"cwd && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v152 = __p;
  v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v43 + 56, "(kMDItemContentType=\"public.mp3\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v152 = __p;
  v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v45 + 56, "_kMDItemGroupId=7");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoFormatKind");
  v152 = __p;
  v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v47 + 56, "(kMDItemContentType=\"%@c*\"cwd || kMDItemFSName=\"*%@c\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v152 = __p;
  v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v49 + 56, "kMDItemContentType=\"com.apple.quicktime-movie\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v152 = __p;
  v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v51 + 56, "kMDItemContentType=\"com.apple.m4v-video\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v152 = __p;
  v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v53 + 56, "(_kMDItemGroupId=7 && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoFormatAttachment");
  v152 = __p;
  v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v55 + 56, "((kMDItemContentType=\"%@c*\"cwd || kMDItemFSName=\"*%@c\"cwd) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v152 = __p;
  v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v57 + 56, "(kMDItemContentType=\"com.apple.quicktime-movie\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v152 = __p;
  v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v59 + 56, "(kMDItemContentType=\"com.apple.m4v-video\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  v152 = __p;
  v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v61 + 56, "_kMDItemGroupId=12");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v152 = __p;
  v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v63 + 56, "(_kMDItemGroupId=12 && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v152 = __p;
  v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v65 + 56, "kMDItemContentType=\"com.apple.iwork.key*\"cwd");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v152 = __p;
  v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v67 + 56, "kMDItemContentType=\"com.microsoft.powerpoint.ppt*\"cwd");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v152 = __p;
  v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v69 + 56, "(kMDItemContentType=\"com.apple.iwork.key*\"cwd && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v152 = __p;
  v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v71 + 56, "(kMDItemContentType=\"com.microsoft.powerpoint.ppt*\"cwd && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v152 = __p;
  v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v73 + 56, "_kMDItemGroupId=16");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v152 = __p;
  v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v75 + 56, "(_kMDItemGroupId=16 && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v152 = __p;
  v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v77 + 56, "kMDItemContentType=\"com.microsoft.excel.xls\"cwd");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v152 = __p;
  v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v79 + 56, "(kMDItemContentType=\"com.microsoft.excel.xls\"cwd && && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v152 = __p;
  v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v81 + 56, "(_kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=14 || _kMDItemGroupId=15 || _kMDItemGroupId=16)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v152 = __p;
  v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v83 + 56, "((_kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=14 || _kMDItemGroupId=15 || _kMDItemGroupId=16) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v152 = __p;
  v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v85 + 56, "(kMDItemContentType=\"com.apple.iwork*\"cwd || kMDItemContentType=\"com.microsoft.*\"cwd || kMDItemContentType=\"org.openxmlformats*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v152 = __p;
  v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v87 + 56, "((kMDItemContentType=\"com.apple.iwork*\"cwd || kMDItemContentType=\"com.microsoft.*\"cwd || kMDItemContentType=\"org.openxmlformats*\"cwd) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v152 = __p;
  v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v89 + 56, "(kMDItemContentType=\"com.apple.iwork.pages.*\" || kMDItemContentType=\"com.microsoft.word.doc\" || kMDItemContentType=\"org.openxmlformats.word*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v152 = __p;
  v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v91 + 56, "(kMDItemContentType=\"com.microsoft.word.doc*\"cwd || kMDItemContentType=\"org.openxmlformats.word*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v152 = __p;
  v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v93 + 56, "((kMDItemContentType=\"com.apple.iwork.pages.*\" || kMDItemContentType=\"com.microsoft.word.doc\" || kMDItemContentType=\"org.openxmlformats.word*\"cwd) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v152 = __p;
  v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v95 + 56, "((kMDItemContentType=\"com.microsoft.word.doc*\"cwd || kMDItemContentType=\"org.openxmlformats.word*\"cwd) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v152 = __p;
  v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v97 + 56, "kMDItemContentType=\"public.rtf\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v152 = __p;
  v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v99 + 56, "(kMDItemContentType=\"public.plain-text\" || kMDItemFSName=\"*txt\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v152 = __p;
  v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v101 + 56, "(kMDItemContentType=\"public.rtf\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v152 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v103 + 56, "((kMDItemContentType=\"public.plain-text\" || kMDItemFSName=\"*txt\"cwd) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v152 = __p;
  v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v105 + 56, "(_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\"))");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v152 = __p;
  v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v107 + 56, "((_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\")) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v152 = __p;
  v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v109 + 56, "(kMDItemContentType=\"tar*\"cwd || kMDItemContentType=\"zip*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v152 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v111 + 56, "kMDItemContentType=\"com.sun.java-source\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v152 = __p;
  v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v113 + 56, "((kMDItemContentType=\"tar*\"cwd || kMDItemContentType=\"zip*\"cwd) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v152 = __p;
  v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v115 + 56, "(kMDItemContentType=\"com.sun.java-source\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v152 = __p;
  v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v117 + 56, "kMDItemContentType=\"public.calendar-event\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v152 = __p;
  v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v119 + 56, "kMDItemContentType=\"com.apple.ical.ics\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v152 = __p;
  v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v121 + 56, "(kMDItemContentType=\"public.calendar-event\" && && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v152 = __p;
  v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v123 + 56, "(kMDItemContentType=\"com.apple.ical.ics\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v152 = __p;
  v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v125 + 56, "kMDItemContentType=\"public.vcard\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v152 = __p;
  v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v127 + 56, "kMDItemContentType=\"public.vcard\"");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v152 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v129 + 56, "(kMDItemContentType=\"public.vcard\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v152 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v131 + 56, "(kMDItemContentType=\"public.vcard\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v152 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v133 + 56, "_kMDItemGroupId=11");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v152 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v135 + 56, "(_kMDItemGroupId=11 && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v152 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v137 + 56, "kMDItemContentType=\"com.apple.pkpass\"cwd");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v152 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v139 + 56, "(kMDItemContentType=\"com.apple.pkpass\"cwd && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v152 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v141 + 56, "kMDItemFSName=\"%@c*\"cwd");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v142 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "NotesKind");
  v152 = __p;
  v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v142 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v143 + 56, "(kMDItemContentType=\"com.apple.notes.*record\" || kMDItemKind=\"notes*\"cwdt)");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v144 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ApplicationKind");
  v152 = __p;
  v145 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v144 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v145 + 56, "_kMDItemGroupId=8");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v146 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "WebsiteKind");
  v152 = __p;
  v147 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v146 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A1B0DE04]((char *)v147 + 56, "(kMDItemContentType=\"com.apple.safari.history\" || kMDItemContentType=\"com.apple.safari.bookmark\")");
  if (v149 < 0)
    operator delete(__p[0]);
  if (v151 < 0)
    operator delete(v150[0]);
}

void sub_1A1817D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void updateSpotlightAttachmentTranslations(uint64_t **a1)
{
  uint64_t **v2;
  _OWORD *v3;
  uint64_t **v4;
  _OWORD *v5;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t **v12;
  _OWORD *v13;
  uint64_t **v14;
  _OWORD *v15;
  uint64_t **v16;
  _OWORD *v17;
  uint64_t **v18;
  _OWORD *v19;
  uint64_t **v20;
  _OWORD *v21;
  uint64_t **v22;
  _OWORD *v23;
  uint64_t **v24;
  _OWORD *v25;
  uint64_t **v26;
  _OWORD *v27;
  uint64_t **v28;
  _OWORD *v29;
  uint64_t **v30;
  _OWORD *v31;
  uint64_t **v32;
  _OWORD *v33;
  uint64_t **v34;
  _OWORD *v35;
  uint64_t **v36;
  _OWORD *v37;
  uint64_t **v38;
  _OWORD *v39;
  uint64_t **v40;
  _OWORD *v41;
  uint64_t **v42;
  _OWORD *v43;
  uint64_t **v44;
  _OWORD *v45;
  uint64_t **v46;
  _OWORD *v47;
  uint64_t **v48;
  _OWORD *v49;
  uint64_t **v50;
  _OWORD *v51;
  uint64_t **v52;
  _OWORD *v53;
  uint64_t **v54;
  _OWORD *v55;
  uint64_t **v56;
  _OWORD *v57;
  uint64_t **v58;
  _OWORD *v59;
  uint64_t **v60;
  _OWORD *v61;
  uint64_t **v62;
  _OWORD *v63;
  uint64_t **v64;
  _OWORD *v65;
  uint64_t **v66;
  _OWORD *v67;
  uint64_t **v68;
  _OWORD *v69;
  uint64_t **v70;
  _OWORD *v71;
  uint64_t **v72;
  _OWORD *v73;
  uint64_t **v74;
  _OWORD *v75;
  uint64_t **v76;
  _OWORD *v77;
  uint64_t **v78;
  _OWORD *v79;
  uint64_t **v80;
  _OWORD *v81;
  uint64_t **v82;
  _OWORD *v83;
  uint64_t **v84;
  _OWORD *v85;
  uint64_t **v86;
  _OWORD *v87;
  uint64_t **v88;
  _OWORD *v89;
  uint64_t **v90;
  _OWORD *v91;
  uint64_t **v92;
  _OWORD *v93;
  uint64_t **v94;
  _OWORD *v95;
  uint64_t **v96;
  _OWORD *v97;
  uint64_t **v98;
  _OWORD *v99;
  uint64_t **v100;
  _OWORD *v101;
  uint64_t **v102;
  _OWORD *v103;
  uint64_t **v104;
  _OWORD *v105;
  uint64_t **v106;
  _OWORD *v107;
  uint64_t **v108;
  _OWORD *v109;
  uint64_t **v110;
  _OWORD *v111;
  uint64_t **v112;
  _OWORD *v113;
  uint64_t **v114;
  _OWORD *v115;
  uint64_t **v116;
  _OWORD *v117;
  uint64_t **v118;
  _OWORD *v119;
  uint64_t **v120;
  _OWORD *v121;
  uint64_t **v122;
  _OWORD *v123;
  uint64_t **v124;
  _OWORD *v125;
  uint64_t **v126;
  _OWORD *v127;
  uint64_t **v128;
  _OWORD *v129;
  uint64_t **v130;
  _OWORD *v131;
  uint64_t **v132;
  _OWORD *v133;
  uint64_t **v134;
  _OWORD *v135;
  uint64_t **v136;
  _OWORD *v137;
  uint64_t **v138;
  _OWORD *v139;
  uint64_t **v140;
  _OWORD *v141;
  uint64_t **v142;
  _OWORD *v143;
  uint64_t **v144;
  _OWORD *v145;
  uint64_t **v146;
  _OWORD *v147;
  uint64_t **v148;
  _OWORD *v149;
  uint64_t **v150;
  _OWORD *v151;
  uint64_t **v152;
  _OWORD *v153;
  uint64_t **v154;
  _OWORD *v155;
  uint64_t **v156;
  _OWORD *v157;
  uint64_t **v158;
  _OWORD *v159;
  uint64_t **v160;
  _OWORD *v161;
  uint64_t **v162;
  _OWORD *v163;
  uint64_t **v164;
  _OWORD *v165;
  uint64_t **v166;
  _OWORD *v167;
  uint64_t **v168;
  _OWORD *v169;
  uint64_t **v170;
  _OWORD *v171;
  uint64_t **v172;
  _OWORD *v173;
  uint64_t **v174;
  _OWORD *v175;
  uint64_t **v176;
  _OWORD *v177;
  uint64_t **v178;
  _OWORD *v179;
  uint64_t **v180;
  _OWORD *v181;
  uint64_t **v182;
  _OWORD *v183;
  uint64_t **v184;
  _OWORD *v185;
  uint64_t **v186;
  _OWORD *v187;
  uint64_t **v188;
  _OWORD *v189;
  uint64_t **v190;
  _OWORD *v191;
  uint64_t **v192;
  _OWORD *v193;
  uint64_t **v194;
  _OWORD *v195;
  uint64_t **v196;
  _OWORD *v197;
  uint64_t **v198;
  _OWORD *v199;
  uint64_t **v200;
  _OWORD *v201;
  uint64_t **v202;
  _OWORD *v203;
  uint64_t **v204;
  _OWORD *v205;
  uint64_t **v206;
  _OWORD *v207;
  uint64_t **v208;
  _OWORD *v209;
  uint64_t **v210;
  _OWORD *v211;
  uint64_t **v212;
  _OWORD *v213;
  uint64_t **v214;
  _OWORD *v215;
  uint64_t **v216;
  _OWORD *v217;
  uint64_t **v218;
  _OWORD *v219;
  uint64_t **v220;
  _OWORD *v221;
  uint64_t **v222;
  _OWORD *v223;
  uint64_t **v224;
  _OWORD *v225;
  uint64_t **v226;
  _OWORD *v227;
  uint64_t **v228;
  _OWORD *v229;
  uint64_t **v230;
  _OWORD *v231;
  uint64_t **v232;
  _OWORD *v233;
  uint64_t **v234;
  _OWORD *v235;
  uint64_t **v236;
  _OWORD *v237;
  uint64_t **v238;
  _OWORD *v239;
  uint64_t **v240;
  _OWORD *v241;
  uint64_t **v242;
  _OWORD *v243;
  uint64_t **v244;
  _OWORD *v245;
  uint64_t **v246;
  _OWORD *v247;
  uint64_t **v248;
  _OWORD *v249;
  uint64_t **v250;
  _OWORD *v251;
  uint64_t **v252;
  _OWORD *v253;
  uint64_t **v254;
  _OWORD *v255;
  uint64_t **v256;
  _OWORD *v257;
  uint64_t **v258;
  _OWORD *v259;
  uint64_t **v260;
  _OWORD *v261;
  uint64_t **v262;
  _OWORD *v263;
  uint64_t **v264;
  _OWORD *v265;
  uint64_t **v266;
  _OWORD *v267;
  uint64_t **v268;
  _OWORD *v269;
  uint64_t **v270;
  _OWORD *v271;
  uint64_t **v272;
  _OWORD *v273;
  uint64_t **v274;
  _OWORD *v275;
  uint64_t **v276;
  _OWORD *v277;
  uint64_t **v278;
  _OWORD *v279;
  uint64_t **v280;
  _OWORD *v281;
  void *__p[2];
  char v283;
  void *v284[2];
  char v285;
  void **v286;

  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailClient");
  v286 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v3 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attachment");
  v286 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v5 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attachment");
  v286 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v7 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasAttached");
  v286 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v9 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasAttachment");
  v286 = __p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v11 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailAttachment");
  v286 = __p;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v13 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v286 = __p;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v15 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v286 = __p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v17 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v286 = __p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v19 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v286 = __p;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v21 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v286 = __p;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v23 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v286 = __p;
  v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v25 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v286 = __p;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v27 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v286 = __p;
  v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v29 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v286 = __p;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v31 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v286 = __p;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v33 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v286 = __p;
  v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v35 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v286 = __p;
  v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v37 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v286 = __p;
  v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v39 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v286 = __p;
  v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v41 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v286 = __p;
  v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v43 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v286 = __p;
  v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v45 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v286 = __p;
  v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v47 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v286 = __p;
  v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v49 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v286 = __p;
  v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v51 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v286 = __p;
  v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v53 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v286 = __p;
  v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v55 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v286 = __p;
  v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v57 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v286 = __p;
  v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v59 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v286 = __p;
  v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v61 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v286 = __p;
  v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v63 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v286 = __p;
  v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v65 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v286 = __p;
  v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v67 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v286 = __p;
  v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v69 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v286 = __p;
  v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v71 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v286 = __p;
  v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v73 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v286 = __p;
  v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v75 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v286 = __p;
  v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v77 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v286 = __p;
  v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v79 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v286 = __p;
  v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v81 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v286 = __p;
  v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v83 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v286 = __p;
  v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v85 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v286 = __p;
  v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v87 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v286 = __p;
  v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v89 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v286 = __p;
  v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v91 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v286 = __p;
  v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v93 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v286 = __p;
  v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v95 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v286 = __p;
  v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v97 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v286 = __p;
  v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v99 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v286 = __p;
  v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v101 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v286 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v103 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v286 = __p;
  v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v105 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v286 = __p;
  v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v107 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v286 = __p;
  v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v109 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  v286 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v111 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v286 = __p;
  v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v113 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v286 = __p;
  v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v115 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v286 = __p;
  v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v117 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v286 = __p;
  v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v119 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v286 = __p;
  v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v121 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  v286 = __p;
  v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v123 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v286 = __p;
  v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v125 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v286 = __p;
  v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v127 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v286 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v129 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v286 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v131 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v286 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v133 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v286 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v135 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v286 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v137 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v286 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v139 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v286 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v141 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v142 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v286 = __p;
  v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v142 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v143 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v144 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v286 = __p;
  v145 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v144 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v145 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v146 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v286 = __p;
  v147 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v146 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v147 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v148 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v286 = __p;
  v149 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v148 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v149 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v150 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v286 = __p;
  v151 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v150 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v151 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v152 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v286 = __p;
  v153 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v152 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v153 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v154 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v286 = __p;
  v155 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v154 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v155 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v156 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v286 = __p;
  v157 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v156 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v157 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v158 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v286 = __p;
  v159 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v158 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v159 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v160 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v286 = __p;
  v161 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v160 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v161 + 56, "(com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v162 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v286 = __p;
  v163 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v162 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v163 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v164 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v286 = __p;
  v165 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v164 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v165 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v166 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v286 = __p;
  v167 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v166 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v167 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v168 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v286 = __p;
  v169 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v168 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v169 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v170 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v286 = __p;
  v171 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v170 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v171 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v172 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v286 = __p;
  v173 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v172 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v173 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v174 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v286 = __p;
  v175 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v174 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v175 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v176 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v286 = __p;
  v177 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v176 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v177 + 56, "(com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\")");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v178 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v286 = __p;
  v179 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v178 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v179 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v180 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v286 = __p;
  v181 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v180 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v181 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v182 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v286 = __p;
  v183 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v182 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v183 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v184 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v286 = __p;
  v185 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v184 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v185 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v186 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v286 = __p;
  v187 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v186 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v187 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v188 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v286 = __p;
  v189 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v188 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v189 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v190 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v286 = __p;
  v191 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v190 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v191 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v192 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v286 = __p;
  v193 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v192 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v193 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v194 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v286 = __p;
  v195 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v194 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v195 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v196 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v286 = __p;
  v197 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v196 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v197 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v198 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v286 = __p;
  v199 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v198 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v199 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v200 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v286 = __p;
  v201 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v200 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v201 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v202 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v286 = __p;
  v203 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v202 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v203 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v204 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v286 = __p;
  v205 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v204 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v205 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v206 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v286 = __p;
  v207 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v206 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v207 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v208 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v286 = __p;
  v209 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v208 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v209 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v210 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v286 = __p;
  v211 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v210 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v211 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v212 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v286 = __p;
  v213 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v212 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v213 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v214 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v286 = __p;
  v215 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v214 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v215 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v216 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v286 = __p;
  v217 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v216 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v217 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v218 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v286 = __p;
  v219 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v218 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v219 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v220 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v286 = __p;
  v221 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v220 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v221 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v222 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v286 = __p;
  v223 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v222 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v223 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v224 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v286 = __p;
  v225 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v224 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v225 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v226 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v286 = __p;
  v227 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v226 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v227 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v228 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v286 = __p;
  v229 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v228 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v229 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v230 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v286 = __p;
  v231 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v230 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v231 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v232 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v286 = __p;
  v233 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v232 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v233 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v234 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v286 = __p;
  v235 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v234 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v235 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v236 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v286 = __p;
  v237 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v236 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v237 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v238 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v286 = __p;
  v239 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v238 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v239 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v240 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v286 = __p;
  v241 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v240 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v241 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v242 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v286 = __p;
  v243 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v242 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v243 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v244 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v286 = __p;
  v245 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v244 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v245 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v246 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v286 = __p;
  v247 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v246 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v247 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v248 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v286 = __p;
  v249 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v248 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v249 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v250 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v286 = __p;
  v251 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v250 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v251 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v252 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v286 = __p;
  v253 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v252 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v253 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v254 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v286 = __p;
  v255 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v254 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v255 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v256 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v286 = __p;
  v257 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v256 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v257 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v258 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v286 = __p;
  v259 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v258 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v259 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v260 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v286 = __p;
  v261 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v260 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v261 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v262 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v286 = __p;
  v263 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v262 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v263 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v264 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v286 = __p;
  v265 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v264 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v265 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v266 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v286 = __p;
  v267 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v266 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v267 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v268 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v286 = __p;
  v269 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v268 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v269 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v270 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v286 = __p;
  v271 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v270 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v271 + 56, "com_apple_mail_attachmentNames=\"%@c\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v272 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v286 = __p;
  v273 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v272 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v273 + 56, "com_apple_mail_attachmentNames=\"%@c\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v274 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v286 = __p;
  v275 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v274 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v275 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v276 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v286 = __p;
  v277 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v276 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v277 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v278 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v286 = __p;
  v279 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v278 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v279 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v280 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v286 = __p;
  v281 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v280 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A1B0DE04]((char *)v281 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v283 < 0)
    operator delete(__p[0]);
  if (v285 < 0)
    operator delete(v284[0]);
}

void sub_1A181D688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void updateSpotlightTransportTranslations(uint64_t **a1)
{
  uint64_t **v2;
  _OWORD *v3;
  uint64_t **v4;
  _OWORD *v5;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t **v12;
  _OWORD *v13;
  uint64_t **v14;
  _OWORD *v15;
  uint64_t **v16;
  _OWORD *v17;
  uint64_t **v18;
  _OWORD *v19;
  uint64_t **v20;
  _OWORD *v21;
  uint64_t **v22;
  _OWORD *v23;
  uint64_t **v24;
  _OWORD *v25;
  uint64_t **v26;
  _OWORD *v27;
  uint64_t **v28;
  _OWORD *v29;
  uint64_t **v30;
  _OWORD *v31;
  uint64_t **v32;
  _OWORD *v33;
  uint64_t **v34;
  _OWORD *v35;
  uint64_t **v36;
  _OWORD *v37;
  uint64_t **v38;
  _OWORD *v39;
  uint64_t **v40;
  _OWORD *v41;
  uint64_t **v42;
  _OWORD *v43;
  uint64_t **v44;
  _OWORD *v45;
  uint64_t **v46;
  _OWORD *v47;
  void *__p[2];
  char v49;
  void *v50[2];
  char v51;
  void **v52;

  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasMailed");
  v52 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v3 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasUserMailed");
  v52 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v5 + 56, "(kMDItemUserSharedSentTransport=\"com.apple.mail\" && ((kMDItemUserSharedSentSender=\"*\"cwd || kMDItemUserSharedSentSenderHandle=\"*\"cwd)))");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "RECEIVED");
  __p[0] = v50;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasMailed");
  v52 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v7 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.mail\"");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasMessaged");
  v52 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v9 + 56, "kMDItemUserSharedSentTransport=\"com.apple.messages\"");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasUserMessaged");
  v52 = __p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v11 + 56, "(kMDItemUserSharedSentTransport=\"com.apple.messages\" && ((kMDItemUserSharedSentSender=\"*\"cwd || kMDItemUserSharedSentSenderHandle=\"*\"cwd)))");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "RECEIVED");
  __p[0] = v50;
  v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasMessaged");
  v52 = __p;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v13 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.messages\"");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasAirdropped");
  v52 = __p;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v15 + 56, "kMDItemUserSharedSentTransport=\"com.apple.AirDrop\"");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasUserAirdropped");
  v52 = __p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v17 + 56, "(kMDItemUserSharedSentTransport=\"com.apple.AirDrop\" && ((kMDItemUserSharedSentSender=\"*\"cwd || kMDItemUserSharedSentSenderHandle=\"*\"cwd)))");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "RECEIVED");
  __p[0] = v50;
  v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasAirdropped");
  v52 = __p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v19 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.AirDrop\"");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasShared");
  v52 = __p;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v21 + 56, "kMDItemUserSharedSentTransport=\"*\"cwd");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasUserShared");
  v52 = __p;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v23 + 56, "kMDItemUserSharedSentTransport=\"*\"cwd");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Facebook");
  v52 = __p;
  v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v25 + 56, "kMDItemUserSharedSentTransport=\"facebook*\"cwd");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasFacebooked");
  v52 = __p;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v27 + 56, "kMDItemUserSharedSentTransport=\"facebook*\"cwd");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Twitter");
  v52 = __p;
  v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v29 + 56, "kMDItemUserSharedSentTransport=\"twitter*\"cwd");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasTwitter");
  v52 = __p;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v31 + 56, "kMDItemUserSharedSentTransport=\"twitter*\"cwd");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasTweeted");
  v52 = __p;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v33 + 56, "kMDItemUserSharedSentTransport=\"twitter*\"cwd");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Linkedin");
  v52 = __p;
  v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v35 + 56, "kMDItemUserSharedSentTransport=\"linkedin*\"cwd");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasLinkedin");
  v52 = __p;
  v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v37 + 56, "kMDItemUserSharedSentTransport=\"linkedin*\"cwd");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "MAILSENT");
  __p[0] = v50;
  v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasMailed");
  v52 = __p;
  v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v39 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "MAILSENT");
  __p[0] = v50;
  v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasUserMailed");
  v52 = __p;
  v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v41 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "MAILRECEIVED");
  __p[0] = v50;
  v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasMailed");
  v52 = __p;
  v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v43 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.mail\"");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "MAILMAILSENT");
  __p[0] = v50;
  v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasUserMailed");
  v52 = __p;
  v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v45 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "MAILMAILRECEIVED");
  __p[0] = v50;
  v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasMailed");
  v52 = __p;
  v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A1B0DE04]((char *)v47 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v49 < 0)
    operator delete(__p[0]);
  if (v51 < 0)
    operator delete(v50[0]);
}

void sub_1A181EDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void updateSpotlightSenderReceiverTranslations(uint64_t **a1)
{
  uint64_t **v2;
  _OWORD *v3;
  uint64_t **v4;
  _OWORD *v5;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t **v12;
  _OWORD *v13;
  uint64_t **v14;
  _OWORD *v15;
  uint64_t **v16;
  _OWORD *v17;
  uint64_t **v18;
  _OWORD *v19;
  uint64_t **v20;
  _OWORD *v21;
  uint64_t **v22;
  _OWORD *v23;
  uint64_t **v24;
  _OWORD *v25;
  uint64_t **v26;
  _OWORD *v27;
  uint64_t **v28;
  _OWORD *v29;
  uint64_t **v30;
  _OWORD *v31;
  uint64_t **v32;
  _OWORD *v33;
  uint64_t **v34;
  _OWORD *v35;
  uint64_t **v36;
  _OWORD *v37;
  uint64_t **v38;
  _OWORD *v39;
  uint64_t **v40;
  _OWORD *v41;
  uint64_t **v42;
  _OWORD *v43;
  uint64_t **v44;
  _OWORD *v45;
  uint64_t **v46;
  _OWORD *v47;
  uint64_t **v48;
  _OWORD *v49;
  uint64_t **v50;
  _OWORD *v51;
  uint64_t **v52;
  _OWORD *v53;
  uint64_t **v54;
  _OWORD *v55;
  uint64_t **v56;
  _OWORD *v57;
  uint64_t **v58;
  _OWORD *v59;
  uint64_t **v60;
  _OWORD *v61;
  uint64_t **v62;
  _OWORD *v63;
  uint64_t **v64;
  _OWORD *v65;
  uint64_t **v66;
  _OWORD *v67;
  uint64_t **v68;
  _OWORD *v69;
  uint64_t **v70;
  _OWORD *v71;
  uint64_t **v72;
  _OWORD *v73;
  uint64_t **v74;
  _OWORD *v75;
  uint64_t **v76;
  _OWORD *v77;
  uint64_t **v78;
  _OWORD *v79;
  uint64_t **v80;
  _OWORD *v81;
  uint64_t **v82;
  _OWORD *v83;
  uint64_t **v84;
  _OWORD *v85;
  uint64_t **v86;
  _OWORD *v87;
  uint64_t **v88;
  _OWORD *v89;
  uint64_t **v90;
  _OWORD *v91;
  uint64_t **v92;
  _OWORD *v93;
  uint64_t **v94;
  _OWORD *v95;
  uint64_t **v96;
  _OWORD *v97;
  uint64_t **v98;
  _OWORD *v99;
  uint64_t **v100;
  _OWORD *v101;
  uint64_t **v102;
  _OWORD *v103;
  uint64_t **v104;
  _OWORD *v105;
  uint64_t **v106;
  _OWORD *v107;
  uint64_t **v108;
  _OWORD *v109;
  uint64_t **v110;
  _OWORD *v111;
  uint64_t **v112;
  _OWORD *v113;
  uint64_t **v114;
  _OWORD *v115;
  uint64_t **v116;
  _OWORD *v117;
  uint64_t **v118;
  _OWORD *v119;
  uint64_t **v120;
  _OWORD *v121;
  uint64_t **v122;
  _OWORD *v123;
  uint64_t **v124;
  _OWORD *v125;
  uint64_t **v126;
  _OWORD *v127;
  uint64_t **v128;
  _OWORD *v129;
  uint64_t **v130;
  _OWORD *v131;
  uint64_t **v132;
  _OWORD *v133;
  uint64_t **v134;
  _OWORD *v135;
  uint64_t **v136;
  _OWORD *v137;
  uint64_t **v138;
  _OWORD *v139;
  uint64_t **v140;
  _OWORD *v141;
  uint64_t **v142;
  _OWORD *v143;
  void *__p[2];
  char v145;
  void *v146[2];
  char v147;
  void **v148;

  std::string::basic_string[abi:ne180100]<0>(v146, "FILECREATED");
  __p[0] = v146;
  v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v3 + 56, "(kMDItemComposer=\"%@c*\"cwd || kMDItemContributors=\"%@c*\"cwd || kMDItemAuthors=\"%@c*\"cwd || kMDItemLyricist=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v148 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v5 + 56, "kMDItemUserSharedSentTransport=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v7 + 56, "kMDItemUserSharedSentTransport=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v9 + 56, "(kMDItemUserSharedSentSender=\"%@c*\"cwd || kMDItemUserSharedSentSenderHandle=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v11 + 56, "kMDItemUserSharedSentSenderHandle=\"%@c\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v13 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwd || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v15 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v17 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwd || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v19 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasShared");
  v148 = __p;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v21 + 56, "kMDItemUserSharedReceivedTransport=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v23 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwd || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v25 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v27 + 56, "(kMDItemUserSharedReceivedRecipient=\"%@c*\"cwd || kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v29 + 56, "kMDItemUserSharedReceivedRecipientHandle=\"%@c\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v31 + 56, "(kMDItemUserSharedReceivedRecipient=\"*\"cwd || kMDItemUserSharedReceivedRecipientHandle=\"*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVEDFROM");
  __p[0] = v146;
  v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v33 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwd || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVEDFROM");
  __p[0] = v146;
  v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v35 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v148 = __p;
  v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v37 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v39 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v41 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwd || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v43 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v45 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwd || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v47 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwd");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasShared");
  v148 = __p;
  v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v49 + 56, "kMDItemUserSharedReceivedTransport=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v51 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwd || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v53 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v55 + 56, "(kMDItemUserSharedReceivedRecipient=\"%@c*\"cwd || kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v57 + 56, "kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwd");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v148 = __p;
  v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v59 + 56, "kMDItemUserSharedSentTransport=\"com.apple.messages\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v61 + 56, "kMDItemUserSharedSentTransport=\"com.apple.messages\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v63 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwd || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v65 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v67 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwd || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v69 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwd");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasShared");
  v148 = __p;
  v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v71 + 56, "kMDItemUserSharedReceivedTransport=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v73 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwd || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v75 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v77 + 56, "(kMDItemUserSharedReceivedRecipient=\"%@c*\"cwd || kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v79 + 56, "kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwd");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v81 + 56, "kMDItemDeliveryType=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v83 + 56, "(kMDItemAuthors=\"%@c*\"cwd || kMDItemAuthorAddresses=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v85 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v87 + 56, "(kMDItemRecipients=\"%@c*\"cwd || kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v89 + 56, "(kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v91 + 56, "kMDItemDeliveryType=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v93 + 56, "(kMDItemAuthors=\"%@c*\"cwd || kMDItemAuthorAddresses=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v95 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v97 + 56, "(kMDItemRecipients=\"%@c*\"cwd || kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v99 + 56, "(kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v101 + 56, "kMDItemDeliveryType=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTMOD.HasSent");
  v148 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v103 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTMOD.HasShared");
  v148 = __p;
  v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v105 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED.HasAuthored");
  v148 = __p;
  v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v107 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED.HasCreated");
  v148 = __p;
  v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v109 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v111 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v113 + 56, "(kMDItemAuthors=\"%@c*\"cwd || kMDItemEmailAddresses=\"%@c*\"cwd || kMDItemAuthorEmailAddresses=\"%@c*\"cwd || kMDItemOriginSenderDisplayName=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v115 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v117 + 56, "(kMDItemRecipients=\"%@c*\"cwd || kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemRecipientEmailAddresses=\"%@c*\"cwd || kMDItemDestinationRecipients=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v119 + 56, "(kMDItemRecipientAddresses=\"%@c\" || kMDItemRecipientEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SHARERECIPIENT.Contact");
  v148 = __p;
  v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v121 + 56, "(kMDItemRecipients=\"%@c*\"cwd || kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemRecipientEmailAddresses=\"%@c*\"cwd || kMDItemDestinationRecipients=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v123 + 56, "(kMDItemAuthors=\"%@c*\"cwd || kMDItemEmailAddresses=\"%@c*\"cwd || kMDItemAuthorEmailAddresses=\"%@c*\"cwd || kMDItemOriginSenderDisplayName=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v125 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v127 + 56, "(kMDItemRecipients=\"%@c*\"cwd || kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemRecipientEmailAddresses=\"%@c*\"cwd || kMDItemDestinationRecipients=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v129 + 56, "(kMDItemRecipientAddresses=\"%@c\" || kMDItemRecipientEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v131 + 56, "kMDItemMailboxes!=mailbox.sent");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENTFROM");
  __p[0] = v146;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v148 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v133 + 56, "(kMDItemAuthors=\"%@c*\"cwd || kMDItemEmailAddresses=\"%@c*\"cwd || kMDItemAuthorEmailAddresses=\"%@c*\"cwd || kMDItemOriginSenderDisplayName=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENTFROM");
  __p[0] = v146;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v148 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v135 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "FROMTO");
  __p[0] = v146;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v148 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v137 + 56, "((kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemRecipientEmailAddresses=\"%@c*\"cwd || kMDItemRecipients=\"%@c*\"cwd || kMDItemDestinationRecipients=\"%@c*\"cwd) || (kMDItemAuthors=\"%@c*\"cwd || kMDItemEmailAddresses=\"%@c*\"cwd || kMDItemAuthorEmailAddresses=\"%@c*\"cwd || kMDItemInstantMessageAddresses=\"%@c*\"cwd || kMDItemOriginSenderDisplayName=\"%@c*\"cwd))");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "FROMTO");
  __p[0] = v146;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v148 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v139 + 56, "((kMDItemRecipientAddresses=\"%@c\" || kMDItemRecipientEmailAddresses=\"%@c\") || (kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\" || kMDItemInstantMessageAddresses=\"%@c\" || kMDItemOriginSenderDisplayName=\"%@c\"cwd))");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "AUTHORED");
  __p[0] = v146;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v148 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v141 + 56, "(kMDItemComposer=\"%@c*\"cwd || kMDItemContributors=\"%@c*\"cwd || kMDItemAuthors=\"%@c*\"cwd || kMDItemLyricist=\"%@c*\"cwd)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "AUTHORED");
  __p[0] = v146;
  v142 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v148 = __p;
  v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v142 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v143 + 56, "(kMDItemAuthorAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
}

void sub_1A1821A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void updateSpotlightSenderReceiverTranslations_Tokenize(uint64_t **a1)
{
  uint64_t **v2;
  _OWORD *v3;
  uint64_t **v4;
  _OWORD *v5;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t **v12;
  _OWORD *v13;
  uint64_t **v14;
  _OWORD *v15;
  uint64_t **v16;
  _OWORD *v17;
  uint64_t **v18;
  _OWORD *v19;
  uint64_t **v20;
  _OWORD *v21;
  uint64_t **v22;
  _OWORD *v23;
  uint64_t **v24;
  _OWORD *v25;
  uint64_t **v26;
  _OWORD *v27;
  uint64_t **v28;
  _OWORD *v29;
  uint64_t **v30;
  _OWORD *v31;
  uint64_t **v32;
  _OWORD *v33;
  uint64_t **v34;
  _OWORD *v35;
  uint64_t **v36;
  _OWORD *v37;
  uint64_t **v38;
  _OWORD *v39;
  uint64_t **v40;
  _OWORD *v41;
  uint64_t **v42;
  _OWORD *v43;
  uint64_t **v44;
  _OWORD *v45;
  uint64_t **v46;
  _OWORD *v47;
  uint64_t **v48;
  _OWORD *v49;
  uint64_t **v50;
  _OWORD *v51;
  uint64_t **v52;
  _OWORD *v53;
  uint64_t **v54;
  _OWORD *v55;
  uint64_t **v56;
  _OWORD *v57;
  uint64_t **v58;
  _OWORD *v59;
  uint64_t **v60;
  _OWORD *v61;
  uint64_t **v62;
  _OWORD *v63;
  uint64_t **v64;
  _OWORD *v65;
  uint64_t **v66;
  _OWORD *v67;
  uint64_t **v68;
  _OWORD *v69;
  uint64_t **v70;
  _OWORD *v71;
  uint64_t **v72;
  _OWORD *v73;
  uint64_t **v74;
  _OWORD *v75;
  uint64_t **v76;
  _OWORD *v77;
  uint64_t **v78;
  _OWORD *v79;
  uint64_t **v80;
  _OWORD *v81;
  uint64_t **v82;
  _OWORD *v83;
  uint64_t **v84;
  _OWORD *v85;
  uint64_t **v86;
  _OWORD *v87;
  uint64_t **v88;
  _OWORD *v89;
  uint64_t **v90;
  _OWORD *v91;
  uint64_t **v92;
  _OWORD *v93;
  uint64_t **v94;
  _OWORD *v95;
  uint64_t **v96;
  _OWORD *v97;
  uint64_t **v98;
  _OWORD *v99;
  uint64_t **v100;
  _OWORD *v101;
  uint64_t **v102;
  _OWORD *v103;
  uint64_t **v104;
  _OWORD *v105;
  uint64_t **v106;
  _OWORD *v107;
  uint64_t **v108;
  _OWORD *v109;
  uint64_t **v110;
  _OWORD *v111;
  uint64_t **v112;
  _OWORD *v113;
  uint64_t **v114;
  _OWORD *v115;
  uint64_t **v116;
  _OWORD *v117;
  uint64_t **v118;
  _OWORD *v119;
  uint64_t **v120;
  _OWORD *v121;
  uint64_t **v122;
  _OWORD *v123;
  uint64_t **v124;
  _OWORD *v125;
  uint64_t **v126;
  _OWORD *v127;
  uint64_t **v128;
  _OWORD *v129;
  uint64_t **v130;
  _OWORD *v131;
  uint64_t **v132;
  _OWORD *v133;
  uint64_t **v134;
  _OWORD *v135;
  uint64_t **v136;
  _OWORD *v137;
  uint64_t **v138;
  _OWORD *v139;
  uint64_t **v140;
  _OWORD *v141;
  uint64_t **v142;
  _OWORD *v143;
  void *__p[2];
  char v145;
  void *v146[2];
  char v147;
  void **v148;

  std::string::basic_string[abi:ne180100]<0>(v146, "FILECREATED");
  __p[0] = v146;
  v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v3 + 56, "(kMDItemComposer=\"%@c*\"cwdt || kMDItemContributors=\"%@c*\"cwdt || kMDItemAuthors=\"%@c*\"cwdt || kMDItemLyricist=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v148 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v5 + 56, "kMDItemUserSharedSentTransport=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v7 + 56, "kMDItemUserSharedSentTransport=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v9 + 56, "(kMDItemUserSharedSentSender=\"%@c*\"cwdt || kMDItemUserSharedSentSenderHandle=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v11 + 56, "kMDItemUserSharedSentSenderHandle=\"%@c\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v13 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwdt || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v15 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v17 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwdt || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v19 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasShared");
  v148 = __p;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v21 + 56, "kMDItemUserSharedReceivedTransport=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v23 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwdt || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v25 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v27 + 56, "(kMDItemUserSharedReceivedRecipient=\"%@c*\"cwdt || kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v29 + 56, "kMDItemUserSharedReceivedRecipientHandle=\"%@c\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v31 + 56, "(kMDItemUserSharedReceivedRecipient=\"*\"cwdt || kMDItemUserSharedReceivedRecipientHandle=\"*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVEDFROM");
  __p[0] = v146;
  v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v33 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwdt || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVEDFROM");
  __p[0] = v146;
  v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v35 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v148 = __p;
  v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v37 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v39 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v41 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwdt || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v43 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v45 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwdt || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v47 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwdt");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasShared");
  v148 = __p;
  v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v49 + 56, "kMDItemUserSharedReceivedTransport=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v51 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwdt || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v53 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v55 + 56, "(kMDItemUserSharedReceivedRecipient=\"%@c*\"cwdt || kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v57 + 56, "kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwdt");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v148 = __p;
  v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v59 + 56, "kMDItemUserSharedSentTransport=\"com.apple.messages\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v61 + 56, "kMDItemUserSharedSentTransport=\"com.apple.messages\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v63 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwdt || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v65 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v67 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwdt || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v69 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwdt");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasShared");
  v148 = __p;
  v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v71 + 56, "kMDItemUserSharedReceivedTransport=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v73 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwdt || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v75 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v77 + 56, "(kMDItemUserSharedReceivedRecipient=\"%@c*\"cwdt || kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v79 + 56, "kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwdt");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v81 + 56, "kMDItemDeliveryType=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v83 + 56, "(kMDItemAuthors=\"%@c*\"cwdt || kMDItemAuthorAddresses=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v85 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v87 + 56, "(kMDItemRecipients=\"%@c*\"cwdt || kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v89 + 56, "(kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v91 + 56, "kMDItemDeliveryType=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v93 + 56, "(kMDItemAuthors=\"%@c*\"cwdt || kMDItemAuthorAddresses=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v95 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v97 + 56, "(kMDItemRecipients=\"%@c*\"cwdt || kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v99 + 56, "(kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v101 + 56, "kMDItemDeliveryType=\"*\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTMOD.HasSent");
  v148 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v103 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTMOD.HasShared");
  v148 = __p;
  v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v105 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED.HasAuthored");
  v148 = __p;
  v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v107 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED.HasCreated");
  v148 = __p;
  v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v109 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v111 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v113 + 56, "(kMDItemAuthors=\"%@c*\"cwdt || kMDItemEmailAddresses=\"%@c*\"cwdt || kMDItemAuthorEmailAddresses=\"%@c*\"cwdt || kMDItemOriginSenderDisplayName=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v115 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v117 + 56, "(kMDItemRecipients=\"%@c*\"cwdt || kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemRecipientEmailAddresses=\"%@c*\"cwdt || kMDItemDestinationRecipients=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v119 + 56, "(kMDItemRecipientAddresses=\"%@c\" || kMDItemRecipientEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SHARERECIPIENT.Contact");
  v148 = __p;
  v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v121 + 56, "(kMDItemRecipients=\"%@c*\"cwdt || kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemRecipientEmailAddresses=\"%@c*\"cwdt || kMDItemDestinationRecipients=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v123 + 56, "(kMDItemAuthors=\"%@c*\"cwdt || kMDItemEmailAddresses=\"%@c*\"cwdt || kMDItemAuthorEmailAddresses=\"%@c*\"cwdt || kMDItemOriginSenderDisplayName=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v125 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v127 + 56, "(kMDItemRecipients=\"%@c*\"cwdt || kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemRecipientEmailAddresses=\"%@c*\"cwdt || kMDItemDestinationRecipients=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v129 + 56, "(kMDItemRecipientAddresses=\"%@c\" || kMDItemRecipientEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v131 + 56, "kMDItemMailboxes!=mailbox.sent");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENTFROM");
  __p[0] = v146;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v148 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v133 + 56, "(kMDItemAuthors=\"%@c*\"cwdt || kMDItemEmailAddresses=\"%@c*\"cwdt || kMDItemAuthorEmailAddresses=\"%@c*\"cwdt || kMDItemOriginSenderDisplayName=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "SENTFROM");
  __p[0] = v146;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v148 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v135 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "FROMTO");
  __p[0] = v146;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v148 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v137 + 56, "((kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemRecipientEmailAddresses=\"%@c*\"cwdt || kMDItemRecipients=\"%@c*\"cwdt || kMDItemDestinationRecipients=\"%@c*\"cwdt) || (kMDItemAuthors=\"%@c*\"cwdt || kMDItemEmailAddresses=\"%@c*\"cwdt || kMDItemAuthorEmailAddresses=\"%@c*\"cwdt || kMDItemInstantMessageAddresses=\"%@c*\"cwdt || kMDItemOriginSenderDisplayName=\"%@c*\"cwdt))");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "FROMTO");
  __p[0] = v146;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v148 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v139 + 56, "((kMDItemRecipientAddresses=\"%@c\" || kMDItemRecipientEmailAddresses=\"%@c\") || (kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\" || kMDItemInstantMessageAddresses=\"%@c\" || kMDItemOriginSenderDisplayName=\"%@c\"cwdt))");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "AUTHORED");
  __p[0] = v146;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v148 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v141 + 56, "(kMDItemComposer=\"%@c*\"cwdt || kMDItemContributors=\"%@c*\"cwdt || kMDItemAuthors=\"%@c*\"cwdt || kMDItemLyricist=\"%@c*\"cwdt)");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
  std::string::basic_string[abi:ne180100]<0>(v146, "AUTHORED");
  __p[0] = v146;
  v142 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v148 = __p;
  v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v142 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A1B0DE04]((char *)v143 + 56, "(kMDItemAuthorAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0)
    operator delete(__p[0]);
  if (v147 < 0)
    operator delete(v146[0]);
}

void sub_1A1824978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL NL::ParserContext::languageIsCJ(NL::ParserContext *this)
{
  const __CFString *v1;
  const __CFString *v2;
  _BOOL8 result;

  result = 0;
  if (*((_QWORD *)this + 1))
  {
    v1 = (const __CFString *)MEMORY[0x1A1B0D63C]();
    if (v1)
    {
      v2 = v1;
      if (CFStringHasPrefix(v1, CFSTR("zh")) || CFStringHasPrefix(v2, CFSTR("ja")))
        return 1;
    }
  }
  return result;
}

void updateMailFileTypeTranslations(uint64_t **a1)
{
  uint64_t **v2;
  _OWORD *v3;
  uint64_t **v4;
  _OWORD *v5;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t **v12;
  _OWORD *v13;
  uint64_t **v14;
  _OWORD *v15;
  uint64_t **v16;
  _OWORD *v17;
  uint64_t **v18;
  _OWORD *v19;
  uint64_t **v20;
  _OWORD *v21;
  uint64_t **v22;
  _OWORD *v23;
  uint64_t **v24;
  _OWORD *v25;
  uint64_t **v26;
  _OWORD *v27;
  uint64_t **v28;
  _OWORD *v29;
  uint64_t **v30;
  _OWORD *v31;
  uint64_t **v32;
  _OWORD *v33;
  uint64_t **v34;
  _OWORD *v35;
  uint64_t **v36;
  _OWORD *v37;
  uint64_t **v38;
  _OWORD *v39;
  uint64_t **v40;
  _OWORD *v41;
  uint64_t **v42;
  _OWORD *v43;
  uint64_t **v44;
  _OWORD *v45;
  uint64_t **v46;
  _OWORD *v47;
  uint64_t **v48;
  _OWORD *v49;
  uint64_t **v50;
  _OWORD *v51;
  uint64_t **v52;
  _OWORD *v53;
  uint64_t **v54;
  _OWORD *v55;
  uint64_t **v56;
  _OWORD *v57;
  uint64_t **v58;
  _OWORD *v59;
  uint64_t **v60;
  _OWORD *v61;
  uint64_t **v62;
  _OWORD *v63;
  uint64_t **v64;
  _OWORD *v65;
  uint64_t **v66;
  _OWORD *v67;
  uint64_t **v68;
  _OWORD *v69;
  uint64_t **v70;
  _OWORD *v71;
  uint64_t **v72;
  _OWORD *v73;
  uint64_t **v74;
  _OWORD *v75;
  uint64_t **v76;
  _OWORD *v77;
  uint64_t **v78;
  _OWORD *v79;
  uint64_t **v80;
  _OWORD *v81;
  uint64_t **v82;
  _OWORD *v83;
  uint64_t **v84;
  _OWORD *v85;
  uint64_t **v86;
  _OWORD *v87;
  uint64_t **v88;
  _OWORD *v89;
  uint64_t **v90;
  _OWORD *v91;
  uint64_t **v92;
  _OWORD *v93;
  uint64_t **v94;
  _OWORD *v95;
  uint64_t **v96;
  _OWORD *v97;
  uint64_t **v98;
  _OWORD *v99;
  uint64_t **v100;
  _OWORD *v101;
  uint64_t **v102;
  _OWORD *v103;
  uint64_t **v104;
  _OWORD *v105;
  uint64_t **v106;
  _OWORD *v107;
  uint64_t **v108;
  _OWORD *v109;
  uint64_t **v110;
  _OWORD *v111;
  uint64_t **v112;
  _OWORD *v113;
  uint64_t **v114;
  _OWORD *v115;
  uint64_t **v116;
  _OWORD *v117;
  uint64_t **v118;
  _OWORD *v119;
  uint64_t **v120;
  _OWORD *v121;
  uint64_t **v122;
  _OWORD *v123;
  uint64_t **v124;
  _OWORD *v125;
  uint64_t **v126;
  _OWORD *v127;
  uint64_t **v128;
  _OWORD *v129;
  uint64_t **v130;
  _OWORD *v131;
  uint64_t **v132;
  _OWORD *v133;
  uint64_t **v134;
  _OWORD *v135;
  uint64_t **v136;
  _OWORD *v137;
  uint64_t **v138;
  _OWORD *v139;
  uint64_t **v140;
  _OWORD *v141;
  uint64_t **v142;
  _OWORD *v143;
  uint64_t **v144;
  _OWORD *v145;
  void *__p[2];
  char v147;
  void *v148[2];
  char v149;
  void **v150;

  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ChatKind");
  v150 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v3 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailKind");
  v150 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v5 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MessageKind");
  v150 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v7 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v150 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v9 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v150 = __p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v11 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v150 = __p;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v13 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v150 = __p;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v15 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v150 = __p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v17 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v150 = __p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v19 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v150 = __p;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v21 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v150 = __p;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v23 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v150 = __p;
  v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v25 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v150 = __p;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v27 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v150 = __p;
  v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v29 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v150 = __p;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v31 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v150 = __p;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v33 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v150 = __p;
  v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v35 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v150 = __p;
  v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v37 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v150 = __p;
  v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v39 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v150 = __p;
  v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v41 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v150 = __p;
  v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v43 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v150 = __p;
  v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v45 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v150 = __p;
  v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v47 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v150 = __p;
  v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v49 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v150 = __p;
  v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v51 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v150 = __p;
  v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v53 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v150 = __p;
  v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v55 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  v150 = __p;
  v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v57 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v150 = __p;
  v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v59 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v150 = __p;
  v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v61 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v150 = __p;
  v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v63 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v150 = __p;
  v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v65 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v150 = __p;
  v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v67 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Spreadsheet");
  v150 = __p;
  v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v69 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v150 = __p;
  v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v71 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v150 = __p;
  v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v73 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v150 = __p;
  v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v75 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v150 = __p;
  v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v77 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v150 = __p;
  v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v79 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v150 = __p;
  v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v81 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v150 = __p;
  v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v83 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v150 = __p;
  v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v85 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v150 = __p;
  v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v87 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v150 = __p;
  v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v89 + 56, "(com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v150 = __p;
  v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v91 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v150 = __p;
  v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v93 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v150 = __p;
  v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v95 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v150 = __p;
  v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v97 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v150 = __p;
  v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v99 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v150 = __p;
  v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v101 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v150 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v103 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v150 = __p;
  v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v105 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v150 = __p;
  v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v107 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v150 = __p;
  v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v109 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v150 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v111 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v150 = __p;
  v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v113 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v150 = __p;
  v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v115 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v150 = __p;
  v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v117 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v150 = __p;
  v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v119 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v150 = __p;
  v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v121 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v150 = __p;
  v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v123 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v150 = __p;
  v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v125 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v150 = __p;
  v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v127 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v150 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v129 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v150 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v131 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v150 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v133 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v150 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v135 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v150 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v137 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v150 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v139 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v150 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v141 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v142 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasAttachment");
  v150 = __p;
  v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v142 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v143 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v144 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attachment");
  v150 = __p;
  v145 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v144 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A1B0DE04]((char *)v145 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v147 < 0)
    operator delete(__p[0]);
  if (v149 < 0)
    operator delete(v148[0]);
}

void sub_1A1827960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void updateMailAttachmentTranslations(uint64_t **a1)
{
  uint64_t **v2;
  _OWORD *v3;
  uint64_t **v4;
  _OWORD *v5;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t **v12;
  _OWORD *v13;
  uint64_t **v14;
  _OWORD *v15;
  uint64_t **v16;
  _OWORD *v17;
  uint64_t **v18;
  _OWORD *v19;
  uint64_t **v20;
  _OWORD *v21;
  uint64_t **v22;
  _OWORD *v23;
  uint64_t **v24;
  _OWORD *v25;
  uint64_t **v26;
  _OWORD *v27;
  uint64_t **v28;
  _OWORD *v29;
  uint64_t **v30;
  _OWORD *v31;
  uint64_t **v32;
  _OWORD *v33;
  uint64_t **v34;
  _OWORD *v35;
  uint64_t **v36;
  _OWORD *v37;
  uint64_t **v38;
  _OWORD *v39;
  uint64_t **v40;
  _OWORD *v41;
  uint64_t **v42;
  _OWORD *v43;
  uint64_t **v44;
  _OWORD *v45;
  uint64_t **v46;
  _OWORD *v47;
  uint64_t **v48;
  _OWORD *v49;
  uint64_t **v50;
  _OWORD *v51;
  uint64_t **v52;
  _OWORD *v53;
  uint64_t **v54;
  _OWORD *v55;
  uint64_t **v56;
  _OWORD *v57;
  uint64_t **v58;
  _OWORD *v59;
  uint64_t **v60;
  _OWORD *v61;
  uint64_t **v62;
  _OWORD *v63;
  uint64_t **v64;
  _OWORD *v65;
  uint64_t **v66;
  _OWORD *v67;
  uint64_t **v68;
  _OWORD *v69;
  uint64_t **v70;
  _OWORD *v71;
  uint64_t **v72;
  _OWORD *v73;
  uint64_t **v74;
  _OWORD *v75;
  uint64_t **v76;
  _OWORD *v77;
  uint64_t **v78;
  _OWORD *v79;
  uint64_t **v80;
  _OWORD *v81;
  uint64_t **v82;
  _OWORD *v83;
  uint64_t **v84;
  _OWORD *v85;
  uint64_t **v86;
  _OWORD *v87;
  uint64_t **v88;
  _OWORD *v89;
  uint64_t **v90;
  _OWORD *v91;
  uint64_t **v92;
  _OWORD *v93;
  uint64_t **v94;
  _OWORD *v95;
  uint64_t **v96;
  _OWORD *v97;
  uint64_t **v98;
  _OWORD *v99;
  uint64_t **v100;
  _OWORD *v101;
  uint64_t **v102;
  _OWORD *v103;
  uint64_t **v104;
  _OWORD *v105;
  uint64_t **v106;
  _OWORD *v107;
  uint64_t **v108;
  _OWORD *v109;
  uint64_t **v110;
  _OWORD *v111;
  uint64_t **v112;
  _OWORD *v113;
  uint64_t **v114;
  _OWORD *v115;
  uint64_t **v116;
  _OWORD *v117;
  uint64_t **v118;
  _OWORD *v119;
  uint64_t **v120;
  _OWORD *v121;
  uint64_t **v122;
  _OWORD *v123;
  uint64_t **v124;
  _OWORD *v125;
  uint64_t **v126;
  _OWORD *v127;
  uint64_t **v128;
  _OWORD *v129;
  uint64_t **v130;
  _OWORD *v131;
  uint64_t **v132;
  _OWORD *v133;
  uint64_t **v134;
  _OWORD *v135;
  uint64_t **v136;
  _OWORD *v137;
  uint64_t **v138;
  _OWORD *v139;
  uint64_t **v140;
  _OWORD *v141;
  uint64_t **v142;
  _OWORD *v143;
  uint64_t **v144;
  _OWORD *v145;
  uint64_t **v146;
  _OWORD *v147;
  uint64_t **v148;
  _OWORD *v149;
  uint64_t **v150;
  _OWORD *v151;
  uint64_t **v152;
  _OWORD *v153;
  uint64_t **v154;
  _OWORD *v155;
  uint64_t **v156;
  _OWORD *v157;
  uint64_t **v158;
  _OWORD *v159;
  uint64_t **v160;
  _OWORD *v161;
  uint64_t **v162;
  _OWORD *v163;
  uint64_t **v164;
  _OWORD *v165;
  uint64_t **v166;
  _OWORD *v167;
  uint64_t **v168;
  _OWORD *v169;
  uint64_t **v170;
  _OWORD *v171;
  uint64_t **v172;
  _OWORD *v173;
  uint64_t **v174;
  _OWORD *v175;
  uint64_t **v176;
  _OWORD *v177;
  uint64_t **v178;
  _OWORD *v179;
  uint64_t **v180;
  _OWORD *v181;
  uint64_t **v182;
  _OWORD *v183;
  uint64_t **v184;
  _OWORD *v185;
  uint64_t **v186;
  _OWORD *v187;
  uint64_t **v188;
  _OWORD *v189;
  uint64_t **v190;
  _OWORD *v191;
  uint64_t **v192;
  _OWORD *v193;
  uint64_t **v194;
  _OWORD *v195;
  uint64_t **v196;
  _OWORD *v197;
  uint64_t **v198;
  _OWORD *v199;
  uint64_t **v200;
  _OWORD *v201;
  uint64_t **v202;
  _OWORD *v203;
  uint64_t **v204;
  _OWORD *v205;
  uint64_t **v206;
  _OWORD *v207;
  uint64_t **v208;
  _OWORD *v209;
  uint64_t **v210;
  _OWORD *v211;
  uint64_t **v212;
  _OWORD *v213;
  uint64_t **v214;
  _OWORD *v215;
  uint64_t **v216;
  _OWORD *v217;
  uint64_t **v218;
  _OWORD *v219;
  uint64_t **v220;
  _OWORD *v221;
  uint64_t **v222;
  _OWORD *v223;
  uint64_t **v224;
  _OWORD *v225;
  uint64_t **v226;
  _OWORD *v227;
  uint64_t **v228;
  _OWORD *v229;
  uint64_t **v230;
  _OWORD *v231;
  uint64_t **v232;
  _OWORD *v233;
  uint64_t **v234;
  _OWORD *v235;
  uint64_t **v236;
  _OWORD *v237;
  uint64_t **v238;
  _OWORD *v239;
  uint64_t **v240;
  _OWORD *v241;
  uint64_t **v242;
  _OWORD *v243;
  uint64_t **v244;
  _OWORD *v245;
  uint64_t **v246;
  _OWORD *v247;
  uint64_t **v248;
  _OWORD *v249;
  uint64_t **v250;
  _OWORD *v251;
  uint64_t **v252;
  _OWORD *v253;
  uint64_t **v254;
  _OWORD *v255;
  uint64_t **v256;
  _OWORD *v257;
  uint64_t **v258;
  _OWORD *v259;
  uint64_t **v260;
  _OWORD *v261;
  uint64_t **v262;
  _OWORD *v263;
  uint64_t **v264;
  _OWORD *v265;
  uint64_t **v266;
  _OWORD *v267;
  uint64_t **v268;
  _OWORD *v269;
  uint64_t **v270;
  _OWORD *v271;
  uint64_t **v272;
  _OWORD *v273;
  uint64_t **v274;
  _OWORD *v275;
  uint64_t **v276;
  _OWORD *v277;
  uint64_t **v278;
  _OWORD *v279;
  uint64_t **v280;
  _OWORD *v281;
  uint64_t **v282;
  _OWORD *v283;
  uint64_t **v284;
  _OWORD *v285;
  void *__p[2];
  char v287;
  void *v288[2];
  char v289;
  void **v290;

  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailClient");
  v290 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v3 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attachment");
  v290 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v5 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attachment");
  v290 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v7 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasAttached");
  v290 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v9 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasAttachment");
  v290 = __p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v11 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailAttachment");
  v290 = __p;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v13 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v290 = __p;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v15 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v290 = __p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v17 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v290 = __p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v19 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v290 = __p;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v21 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v290 = __p;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v23 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v290 = __p;
  v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v25 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v290 = __p;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v27 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v290 = __p;
  v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v29 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v290 = __p;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v31 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v290 = __p;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v33 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v290 = __p;
  v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v35 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v290 = __p;
  v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v37 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v290 = __p;
  v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v39 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v290 = __p;
  v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v41 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v290 = __p;
  v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v43 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v290 = __p;
  v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v45 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v290 = __p;
  v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v47 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v290 = __p;
  v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v49 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v290 = __p;
  v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v51 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v290 = __p;
  v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v53 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v290 = __p;
  v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v55 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v290 = __p;
  v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v57 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v290 = __p;
  v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v59 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v290 = __p;
  v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v61 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v290 = __p;
  v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v63 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v290 = __p;
  v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v65 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v290 = __p;
  v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v67 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v290 = __p;
  v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v69 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v290 = __p;
  v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v71 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v290 = __p;
  v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v73 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v290 = __p;
  v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v75 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v290 = __p;
  v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v77 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v290 = __p;
  v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v79 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v290 = __p;
  v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v81 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v290 = __p;
  v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v83 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v290 = __p;
  v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v85 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v290 = __p;
  v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v87 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v290 = __p;
  v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v89 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v290 = __p;
  v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v91 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v290 = __p;
  v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v93 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v290 = __p;
  v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v95 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v290 = __p;
  v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v97 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v290 = __p;
  v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v99 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v290 = __p;
  v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v101 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v290 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v103 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v290 = __p;
  v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v105 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v290 = __p;
  v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v107 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v290 = __p;
  v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v109 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  v290 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v111 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v290 = __p;
  v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v113 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v290 = __p;
  v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v115 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  v290 = __p;
  v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v117 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v290 = __p;
  v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v119 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v290 = __p;
  v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v121 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v290 = __p;
  v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v123 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v290 = __p;
  v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v125 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v290 = __p;
  v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v127 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v290 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v129 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v290 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v131 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v290 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v133 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Spreadsheet");
  v290 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v135 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v290 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v137 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v290 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v139 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Spreadsheet");
  v290 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v141 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v142 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v290 = __p;
  v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v142 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v143 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v144 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v290 = __p;
  v145 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v144 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v145 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v146 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v290 = __p;
  v147 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v146 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v147 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v148 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v290 = __p;
  v149 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v148 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v149 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v150 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v290 = __p;
  v151 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v150 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v151 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v152 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v290 = __p;
  v153 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v152 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v153 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v154 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v290 = __p;
  v155 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v154 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v155 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v156 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v290 = __p;
  v157 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v156 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v157 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v158 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v290 = __p;
  v159 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v158 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v159 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v160 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v290 = __p;
  v161 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v160 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v161 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v162 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v290 = __p;
  v163 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v162 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v163 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v164 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v290 = __p;
  v165 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v164 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v165 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v166 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v290 = __p;
  v167 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v166 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v167 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v168 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v290 = __p;
  v169 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v168 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v169 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v170 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v290 = __p;
  v171 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v170 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v171 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v172 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v290 = __p;
  v173 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v172 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v173 + 56, "(com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v174 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v290 = __p;
  v175 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v174 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v175 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v176 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v290 = __p;
  v177 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v176 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v177 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v178 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v290 = __p;
  v179 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v178 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v179 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v180 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v290 = __p;
  v181 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v180 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v181 + 56, "(com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v182 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v290 = __p;
  v183 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v182 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v183 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v184 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v290 = __p;
  v185 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v184 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v185 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v186 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v290 = __p;
  v187 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v186 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v187 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v188 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v290 = __p;
  v189 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v188 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v189 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v190 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v290 = __p;
  v191 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v190 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v191 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v192 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v290 = __p;
  v193 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v192 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v193 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v194 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v290 = __p;
  v195 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v194 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v195 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v196 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v290 = __p;
  v197 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v196 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v197 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v198 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v290 = __p;
  v199 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v198 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v199 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v200 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v290 = __p;
  v201 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v200 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v201 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v202 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v290 = __p;
  v203 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v202 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v203 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v204 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v290 = __p;
  v205 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v204 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v205 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v206 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v290 = __p;
  v207 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v206 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v207 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v208 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v290 = __p;
  v209 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v208 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v209 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v210 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v290 = __p;
  v211 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v210 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v211 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v212 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v290 = __p;
  v213 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v212 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v213 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v214 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v290 = __p;
  v215 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v214 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v215 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v216 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v290 = __p;
  v217 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v216 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v217 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v218 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v290 = __p;
  v219 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v218 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v219 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v220 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v290 = __p;
  v221 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v220 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v221 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v222 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v290 = __p;
  v223 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v222 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v223 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v224 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v290 = __p;
  v225 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v224 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v225 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v226 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v290 = __p;
  v227 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v226 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v227 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v228 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v290 = __p;
  v229 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v228 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v229 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v230 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v290 = __p;
  v231 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v230 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v231 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v232 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v290 = __p;
  v233 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v232 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v233 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v234 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v290 = __p;
  v235 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v234 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v235 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v236 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v290 = __p;
  v237 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v236 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v237 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v238 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v290 = __p;
  v239 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v238 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v239 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v240 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v290 = __p;
  v241 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v240 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v241 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v242 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v290 = __p;
  v243 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v242 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v243 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v244 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v290 = __p;
  v245 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v244 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v245 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v246 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v290 = __p;
  v247 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v246 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v247 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v248 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v290 = __p;
  v249 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v248 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v249 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v250 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v290 = __p;
  v251 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v250 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v251 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v252 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v290 = __p;
  v253 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v252 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v253 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v254 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v290 = __p;
  v255 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v254 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v255 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v256 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v290 = __p;
  v257 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v256 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v257 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v258 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v290 = __p;
  v259 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v258 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v259 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v260 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v290 = __p;
  v261 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v260 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v261 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v262 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v290 = __p;
  v263 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v262 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v263 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v264 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v290 = __p;
  v265 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v264 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v265 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v266 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v290 = __p;
  v267 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v266 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v267 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v268 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v290 = __p;
  v269 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v268 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v269 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v270 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v290 = __p;
  v271 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v270 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v271 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v272 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v290 = __p;
  v273 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v272 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v273 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v274 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v290 = __p;
  v275 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v274 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v275 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v276 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v290 = __p;
  v277 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v276 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v277 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v278 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v290 = __p;
  v279 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v278 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v279 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v280 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v290 = __p;
  v281 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v280 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v281 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v282 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v290 = __p;
  v283 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v282 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v283 + 56, "com_apple_mail_attachmentNames=\"%@c\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v284 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v290 = __p;
  v285 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v284 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A1B0DE04]((char *)v285 + 56, "com_apple_mail_attachmentNames=\"%@c\"");
  if (v287 < 0)
    operator delete(__p[0]);
  if (v289 < 0)
    operator delete(v288[0]);
}

void sub_1A182D3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void updateMailTransportTranslations(uint64_t **a1)
{
  uint64_t **v2;
  _OWORD *v3;
  uint64_t **v4;
  _OWORD *v5;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t **v12;
  _OWORD *v13;
  uint64_t **v14;
  _OWORD *v15;
  uint64_t **v16;
  _OWORD *v17;
  uint64_t **v18;
  _OWORD *v19;
  uint64_t **v20;
  _OWORD *v21;
  uint64_t **v22;
  _OWORD *v23;
  uint64_t **v24;
  _OWORD *v25;
  uint64_t **v26;
  _OWORD *v27;
  uint64_t **v28;
  _OWORD *v29;
  uint64_t **v30;
  _OWORD *v31;
  uint64_t **v32;
  _OWORD *v33;
  uint64_t **v34;
  _OWORD *v35;
  uint64_t **v36;
  _OWORD *v37;
  uint64_t **v38;
  _OWORD *v39;
  uint64_t **v40;
  _OWORD *v41;
  uint64_t **v42;
  _OWORD *v43;
  uint64_t **v44;
  _OWORD *v45;
  uint64_t **v46;
  _OWORD *v47;
  uint64_t **v48;
  _OWORD *v49;
  uint64_t **v50;
  _OWORD *v51;
  uint64_t **v52;
  _OWORD *v53;
  uint64_t **v54;
  _OWORD *v55;
  uint64_t **v56;
  _OWORD *v57;
  uint64_t **v58;
  _OWORD *v59;
  void *__p[2];
  char v61;
  void *v62[2];
  char v63;
  void **v64;

  std::string::basic_string[abi:ne180100]<0>(v62, "MAILMAILSENT");
  __p[0] = v62;
  v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTMOD.HasSent");
  v64 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v3 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILMAILSENT");
  __p[0] = v62;
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTMOD.SentEvent");
  v64 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v5 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILMAILSENT");
  __p[0] = v62;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED.HasAuthored");
  v64 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v7 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILMAILSENT");
  __p[0] = v62;
  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED.HasCreated");
  v64 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v9 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "RECEIVED");
  __p[0] = v62;
  v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Airdropped");
  v64 = __p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v11 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.AirDrop\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "RECEIVED");
  __p[0] = v62;
  v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Airdrop");
  v64 = __p;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v13 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.AirDrop\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Airdropped");
  v64 = __p;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v15 + 56, "kMDItemUserSharedSentTransport=\"com.apple.AirDrop\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Airdrop");
  v64 = __p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v17 + 56, "kMDItemUserSharedSentTransport=\"com.apple.AirDrop\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "RECEIVED");
  __p[0] = v62;
  v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Messaged");
  v64 = __p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v19 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.messages\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "RECEIVED");
  __p[0] = v62;
  v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.MessageClient");
  v64 = __p;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v21 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.messages\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Messaged");
  v64 = __p;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v23 + 56, "kMDItemUserSharedSentTransport=\"com.apple.messages\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.MessageClient");
  v64 = __p;
  v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v25 + 56, "kMDItemUserSharedSentTransport=\"com.apple.messages\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Shared");
  v64 = __p;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v27 + 56, "(kMDItemUserSharedSentTransport=\"facebook*\"cwd || kMDItemUserSharedSentTransport=\"twitter*\"cwd)");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Sharesheet");
  v64 = __p;
  v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v29 + 56, "(kMDItemUserSharedSentTransport=\"facebook*\"cwd || kMDItemUserSharedSentTransport=\"twitter*\"cwd)");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Facebook");
  v64 = __p;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v31 + 56, "kMDItemUserSharedSentTransport=\"facebook*\"cwd");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Facebooked");
  v64 = __p;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v33 + 56, "kMDItemUserSharedSentTransport=\"facebook*\"cwd");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Twitter");
  v64 = __p;
  v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v35 + 56, "kMDItemUserSharedSentTransport=\"twitter*\"cwd");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Tweeted");
  v64 = __p;
  v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v37 + 56, "kMDItemUserSharedSentTransport=\"twitter*\"cwd");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "RECEIVED");
  __p[0] = v62;
  v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Mail");
  v64 = __p;
  v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v39 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "RECEIVED");
  __p[0] = v62;
  v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Mailed");
  v64 = __p;
  v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v41 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.mail\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "RECEIVED");
  __p[0] = v62;
  v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.MailClient");
  v64 = __p;
  v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v43 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.mail\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Mailed");
  v64 = __p;
  v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v45 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.MailClient");
  v64 = __p;
  v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v47 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILRECEIVED");
  __p[0] = v62;
  v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Mail");
  v64 = __p;
  v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v49 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILRECEIVED");
  __p[0] = v62;
  v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Mailed");
  v64 = __p;
  v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v51 + 56, "(kMDItemMailboxes=\"*in*\"cwd || kMDItemWhereFroms=\"message*\"cwd)");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILRECEIVED");
  __p[0] = v62;
  v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.MailClient");
  v64 = __p;
  v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v53 + 56, "(kMDItemMailboxes=\"*in*\"cwd || kMDItemWhereFroms=\"message*\"cwd)");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILSENT");
  __p[0] = v62;
  v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Mailed");
  v64 = __p;
  v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v55 + 56, "(kMDItemMailboxes=\"mailbox.sent\" || kMDItemUserSharedSentTransport=\"com.apple.mail\")");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILSENT");
  __p[0] = v62;
  v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.MailClient");
  v64 = __p;
  v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v57 + 56, "(kMDItemMailboxes=\"mailbox.sent\" || kMDItemUserSharedSentTransport=\"com.apple.mail\")");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILMAILRECEIVED");
  __p[0] = v62;
  v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Mail");
  v64 = __p;
  v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A1B0DE04]((char *)v59 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
}

void sub_1A182EEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void updateNotesFileTypeTranslations(uint64_t **a1)
{
  uint64_t **v2;
  _OWORD *v3;
  uint64_t **v4;
  _OWORD *v5;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t **v12;
  _OWORD *v13;
  uint64_t **v14;
  _OWORD *v15;
  uint64_t **v16;
  _OWORD *v17;
  uint64_t **v18;
  _OWORD *v19;
  uint64_t **v20;
  _OWORD *v21;
  uint64_t **v22;
  _OWORD *v23;
  uint64_t **v24;
  _OWORD *v25;
  uint64_t **v26;
  _OWORD *v27;
  uint64_t **v28;
  _OWORD *v29;
  uint64_t **v30;
  _OWORD *v31;
  uint64_t **v32;
  _OWORD *v33;
  uint64_t **v34;
  _OWORD *v35;
  uint64_t **v36;
  _OWORD *v37;
  uint64_t **v38;
  _OWORD *v39;
  uint64_t **v40;
  _OWORD *v41;
  uint64_t **v42;
  _OWORD *v43;
  uint64_t **v44;
  _OWORD *v45;
  uint64_t **v46;
  _OWORD *v47;
  uint64_t **v48;
  _OWORD *v49;
  uint64_t **v50;
  _OWORD *v51;
  uint64_t **v52;
  _OWORD *v53;
  uint64_t **v54;
  _OWORD *v55;
  uint64_t **v56;
  _OWORD *v57;
  uint64_t **v58;
  _OWORD *v59;
  uint64_t **v60;
  _OWORD *v61;
  uint64_t **v62;
  _OWORD *v63;
  uint64_t **v64;
  _OWORD *v65;
  uint64_t **v66;
  _OWORD *v67;
  uint64_t **v68;
  _OWORD *v69;
  uint64_t **v70;
  _OWORD *v71;
  uint64_t **v72;
  _OWORD *v73;
  uint64_t **v74;
  _OWORD *v75;
  uint64_t **v76;
  _OWORD *v77;
  uint64_t **v78;
  _OWORD *v79;
  uint64_t **v80;
  _OWORD *v81;
  uint64_t **v82;
  _OWORD *v83;
  uint64_t **v84;
  _OWORD *v85;
  uint64_t **v86;
  _OWORD *v87;
  uint64_t **v88;
  _OWORD *v89;
  uint64_t **v90;
  _OWORD *v91;
  uint64_t **v92;
  _OWORD *v93;
  uint64_t **v94;
  _OWORD *v95;
  uint64_t **v96;
  _OWORD *v97;
  uint64_t **v98;
  _OWORD *v99;
  uint64_t **v100;
  _OWORD *v101;
  uint64_t **v102;
  _OWORD *v103;
  uint64_t **v104;
  _OWORD *v105;
  uint64_t **v106;
  _OWORD *v107;
  uint64_t **v108;
  _OWORD *v109;
  uint64_t **v110;
  _OWORD *v111;
  uint64_t **v112;
  _OWORD *v113;
  uint64_t **v114;
  _OWORD *v115;
  uint64_t **v116;
  _OWORD *v117;
  uint64_t **v118;
  _OWORD *v119;
  uint64_t **v120;
  _OWORD *v121;
  uint64_t **v122;
  _OWORD *v123;
  uint64_t **v124;
  _OWORD *v125;
  uint64_t **v126;
  _OWORD *v127;
  uint64_t **v128;
  _OWORD *v129;
  uint64_t **v130;
  _OWORD *v131;
  uint64_t **v132;
  _OWORD *v133;
  uint64_t **v134;
  _OWORD *v135;
  uint64_t **v136;
  _OWORD *v137;
  uint64_t **v138;
  _OWORD *v139;
  uint64_t **v140;
  _OWORD *v141;
  void *__p[2];
  char v143;
  void *v144[2];
  char v145;
  void **v146;

  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "NotesKind");
  v146 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v3 + 56, "kMDItemContentType=\"com.apple.notes.spotlightrecord\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DrawingKind");
  v146 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v5 + 56, "(kMDItemAttachmentTypes=\"com.apple.notes.pencilkitsketch\" || kMDItemAttachmentTypes=\"com.apple.notes.sketch\")");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MapKind");
  v146 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v7 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "WebsiteKind");
  v146 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v9 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v146 = __p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v11 + 56, "kMDItemAttachmentTypes=\"public.image\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v146 = __p;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v13 + 56, "kMDItemAttachmentTypes=\"com.compuserve.gif\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v146 = __p;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v15 + 56, "kMDItemAttachmentTypes=\"public.png\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v146 = __p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v17 + 56, "kMDItemAttachmentTypes=\"public.tiff\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v146 = __p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v19 + 56, "kMDItemAttachmentTypes=\"public.jpeg\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v146 = __p;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v21 + 56, "kMDItemAttachmentTypes=\"public.image\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v146 = __p;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v23 + 56, "kMDItemAttachmentTypes=\"com.compuserve.gif\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v146 = __p;
  v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v25 + 56, "kMDItemAttachmentTypes=\"public.png\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v146 = __p;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v27 + 56, "kMDItemAttachmentTypes=\"public.tiff\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v146 = __p;
  v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v29 + 56, "kMDItemAttachmentTypes=\"public.jpeg\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v146 = __p;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v31 + 56, "kMDItemAttachmentTypes=\"public.audio\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v146 = __p;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v33 + 56, "kMDItemAttachmentTypes=\"public.aac-audio\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v146 = __p;
  v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v35 + 56, "kMDItemAttachmentTypes=\"public.aif*\"cwd");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v146 = __p;
  v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v37 + 56, "kMDItemAttachmentTypes=\"public.mp3\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v146 = __p;
  v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v39 + 56, "kMDItemAttachmentTypes=\"public.audio\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v146 = __p;
  v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v41 + 56, "kMDItemAttachmentTypes=\"public.aac-audio\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v146 = __p;
  v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v43 + 56, "kMDItemAttachmentTypes=\"public.aif*\"cwd");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v146 = __p;
  v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v45 + 56, "kMDItemAttachmentTypes=\"public.mp3\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v146 = __p;
  v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v47 + 56, "kMDItemAttachmentTypes=\"public.movie\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v146 = __p;
  v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v49 + 56, "kMDItemAttachmentTypes=\"com.apple.quicktime-movie\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v146 = __p;
  v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v51 + 56, "kMDItemAttachmentTypes=\"com.apple.m4v-video\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v146 = __p;
  v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v53 + 56, "kMDItemAttachmentTypes=\"public.movie\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v146 = __p;
  v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v55 + 56, "kMDItemAttachmentTypes=\"com.apple.quicktime-movie\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v146 = __p;
  v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v57 + 56, "kMDItemAttachmentTypes=\"com.apple.m4v-video\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  v146 = __p;
  v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v59 + 56, "(kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\" || kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v146 = __p;
  v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v61 + 56, "kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v146 = __p;
  v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v63 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v146 = __p;
  v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v65 + 56, "(kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\" || kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v146 = __p;
  v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v67 + 56, "kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v146 = __p;
  v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v69 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v146 = __p;
  v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v71 + 56, "kMDItemAttachmentTypes=\"com.apple.notes.table\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v146 = __p;
  v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v73 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.excel.xls\" || kMDItemAttachmentTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v146 = __p;
  v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v75 + 56, "kMDItemAttachmentTypes=\"com.apple.notes.table\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v146 = __p;
  v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v77 + 56, "kMDItemAttachmentTypes=\"com.microsoft.excel.xls\" || kMDItemAttachmentTypes=\"org.openxmlformats.spreadsheetml.sheet\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v146 = __p;
  v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v79 + 56, "(kMDItemAttachmentTypes=\"com.adobe.pdf\" || kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"public.spreadsheet\" || kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.word*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd || kMDItemAttachmentTypes=\"public.plain-text\" || kMDItemAttachmentTypes=\"public.rtf\" || kMDItemAttachmentTypes=\"com.apple.notes.gallery\" || kMDItemAttachmentTypes=\"public.html\" || kMDItemAttachmentTypes=\"com.apple.rtfd\" || kMDItemAttachmentTypes=\"com.apple.flat-rtfd\" || kMDItemAttachmentTypes=\"com.apple.ibooks-container\" || kMDItemAttachmentTypes=\"com.apple.ibooks-folder\" || kMDItemAttachmentTypes=\"com.apple.ibooks\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgbook\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.book\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgtemplate\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.template\")");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v146 = __p;
  v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v81 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork.pages.*\" || kMDItemAttachmentTypes=\"com.microsoft.word.doc\" || kMDItemAttachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v146 = __p;
  v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v83 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v146 = __p;
  v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v85 + 56, "(kMDItemAttachmentTypes=\"microsoft.word.doc*\"cwd || kMDItemAttachmentTypes=\"openxmlformats.word*\"cwd)");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v146 = __p;
  v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v87 + 56, "(kMDItemAttachmentTypes=\"com.adobe.pdf\" || kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"public.spreadsheet\" || kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.word*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd || kMDItemAttachmentTypes=\"public.plain-text\" || kMDItemAttachmentTypes=\"public.rtf\" || kMDItemAttachmentTypes=\"com.apple.notes.gallery\" || kMDItemAttachmentTypes=\"public.html\" || kMDItemAttachmentTypes=\"com.apple.rtfd\" || kMDItemAttachmentTypes=\"com.apple.flat-rtfd\" || kMDItemAttachmentTypes=\"com.apple.ibooks-container\" || kMDItemAttachmentTypes=\"com.apple.ibooks-folder\" || kMDItemAttachmentTypes=\"com.apple.ibooks\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgbook\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.book\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgtemplate\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.template\")");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v146 = __p;
  v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v89 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.word.doc\" || kMDItemAttachmentTypes=\"com.apple.iwork.pages.*\" || kMDItemAttachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v146 = __p;
  v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v91 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v146 = __p;
  v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v93 + 56, "(kMDItemAttachmentTypes=\"microsoft.word.doc*\"cwd || kMDItemAttachmentTypes=\"openxmlformats.word*\"cwd)");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v146 = __p;
  v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v95 + 56, "kMDItemAttachmentTypes=\"public.plain-text\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v146 = __p;
  v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v97 + 56, "kMDItemAttachmentTypes=\"public.plain-text\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v146 = __p;
  v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v99 + 56, "kMDItemAttachmentTypes=\"rtf*\"cwd");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v146 = __p;
  v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v101 + 56, "kMDItemAttachmentTypes=\"rtf*\"cwd");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v146 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v103 + 56, "kMDItemAttachmentTypes=\"*\"cwd");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v146 = __p;
  v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v105 + 56, "(kMDItemAttachmentTypes=\"tar*\"cwd || kMDItemAttachmentTypes=\"zip*\"cwd)");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v146 = __p;
  v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v107 + 56, "kMDItemAttachmentTypes=\"java*\"cwd");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v146 = __p;
  v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v109 + 56, "kMDItemAttachmentTypes=\"*\"cwd");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v146 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v111 + 56, "(kMDItemAttachmentTypes=\"tar*\"cwd || kMDItemAttachmentTypes=\"zip*\"cwd)");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v146 = __p;
  v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v113 + 56, "kMDItemAttachmentTypes=\"java*\"cwd");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v146 = __p;
  v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v115 + 56, "kMDItemAttachmentTypes=\"public.calendar-event\"cwd");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v146 = __p;
  v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v117 + 56, "kMDItemAttachmentTypes=\"*ics*\"cwd");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v146 = __p;
  v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v119 + 56, "kMDItemAttachmentTypes=\"public.calendar-event\"cwd");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v146 = __p;
  v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v121 + 56, "kMDItemAttachmentTypes=\"*ics*\"cwd");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v146 = __p;
  v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v123 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v146 = __p;
  v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v125 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v146 = __p;
  v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v127 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v146 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v129 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v146 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v131 + 56, "kMDItemAttachmentTypes=\"com.apple.pkpass\"cwd");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v146 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v133 + 56, "kMDItemAttachmentTypes=\"com.apple.pkpass\"cwd");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v146 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v135 + 56, "kMDItemAttachmentTypes=\"com.adobe.pdf\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v146 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v137 + 56, "kMDItemAttachmentTypes=\"com.adobe.pdf\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v146 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v139 + 56, "kMDItemAttachmentTypes=\"org.idpf.epub-container\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v146 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A1B0DE04]((char *)v141 + 56, "kMDItemAttachmentTypes=\"org.idpf.epub-container\"");
  if (v143 < 0)
    operator delete(__p[0]);
  if (v145 < 0)
    operator delete(v144[0]);
}

void sub_1A1831B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void updateNotesAttachmentTranslations(uint64_t **a1)
{
  uint64_t **v2;
  _OWORD *v3;
  uint64_t **v4;
  _OWORD *v5;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t **v12;
  _OWORD *v13;
  uint64_t **v14;
  _OWORD *v15;
  uint64_t **v16;
  _OWORD *v17;
  uint64_t **v18;
  _OWORD *v19;
  uint64_t **v20;
  _OWORD *v21;
  uint64_t **v22;
  _OWORD *v23;
  uint64_t **v24;
  _OWORD *v25;
  uint64_t **v26;
  _OWORD *v27;
  uint64_t **v28;
  _OWORD *v29;
  uint64_t **v30;
  _OWORD *v31;
  uint64_t **v32;
  _OWORD *v33;
  uint64_t **v34;
  _OWORD *v35;
  uint64_t **v36;
  _OWORD *v37;
  uint64_t **v38;
  _OWORD *v39;
  uint64_t **v40;
  _OWORD *v41;
  uint64_t **v42;
  _OWORD *v43;
  uint64_t **v44;
  _OWORD *v45;
  uint64_t **v46;
  _OWORD *v47;
  uint64_t **v48;
  _OWORD *v49;
  uint64_t **v50;
  _OWORD *v51;
  uint64_t **v52;
  _OWORD *v53;
  uint64_t **v54;
  _OWORD *v55;
  uint64_t **v56;
  _OWORD *v57;
  uint64_t **v58;
  _OWORD *v59;
  uint64_t **v60;
  _OWORD *v61;
  uint64_t **v62;
  _OWORD *v63;
  uint64_t **v64;
  _OWORD *v65;
  uint64_t **v66;
  _OWORD *v67;
  uint64_t **v68;
  _OWORD *v69;
  uint64_t **v70;
  _OWORD *v71;
  uint64_t **v72;
  _OWORD *v73;
  uint64_t **v74;
  _OWORD *v75;
  uint64_t **v76;
  _OWORD *v77;
  uint64_t **v78;
  _OWORD *v79;
  uint64_t **v80;
  _OWORD *v81;
  uint64_t **v82;
  _OWORD *v83;
  uint64_t **v84;
  _OWORD *v85;
  uint64_t **v86;
  _OWORD *v87;
  uint64_t **v88;
  _OWORD *v89;
  uint64_t **v90;
  _OWORD *v91;
  uint64_t **v92;
  _OWORD *v93;
  uint64_t **v94;
  _OWORD *v95;
  uint64_t **v96;
  _OWORD *v97;
  uint64_t **v98;
  _OWORD *v99;
  uint64_t **v100;
  _OWORD *v101;
  uint64_t **v102;
  _OWORD *v103;
  uint64_t **v104;
  _OWORD *v105;
  uint64_t **v106;
  _OWORD *v107;
  uint64_t **v108;
  _OWORD *v109;
  uint64_t **v110;
  _OWORD *v111;
  uint64_t **v112;
  _OWORD *v113;
  uint64_t **v114;
  _OWORD *v115;
  uint64_t **v116;
  _OWORD *v117;
  uint64_t **v118;
  _OWORD *v119;
  uint64_t **v120;
  _OWORD *v121;
  uint64_t **v122;
  _OWORD *v123;
  uint64_t **v124;
  _OWORD *v125;
  uint64_t **v126;
  _OWORD *v127;
  uint64_t **v128;
  _OWORD *v129;
  uint64_t **v130;
  _OWORD *v131;
  uint64_t **v132;
  _OWORD *v133;
  uint64_t **v134;
  _OWORD *v135;
  uint64_t **v136;
  _OWORD *v137;
  uint64_t **v138;
  _OWORD *v139;
  uint64_t **v140;
  _OWORD *v141;
  uint64_t **v142;
  _OWORD *v143;
  uint64_t **v144;
  _OWORD *v145;
  uint64_t **v146;
  _OWORD *v147;
  uint64_t **v148;
  _OWORD *v149;
  uint64_t **v150;
  _OWORD *v151;
  uint64_t **v152;
  _OWORD *v153;
  uint64_t **v154;
  _OWORD *v155;
  uint64_t **v156;
  _OWORD *v157;
  uint64_t **v158;
  _OWORD *v159;
  uint64_t **v160;
  _OWORD *v161;
  uint64_t **v162;
  _OWORD *v163;
  uint64_t **v164;
  _OWORD *v165;
  uint64_t **v166;
  _OWORD *v167;
  uint64_t **v168;
  _OWORD *v169;
  uint64_t **v170;
  _OWORD *v171;
  uint64_t **v172;
  _OWORD *v173;
  uint64_t **v174;
  _OWORD *v175;
  uint64_t **v176;
  _OWORD *v177;
  uint64_t **v178;
  _OWORD *v179;
  uint64_t **v180;
  _OWORD *v181;
  uint64_t **v182;
  _OWORD *v183;
  uint64_t **v184;
  _OWORD *v185;
  uint64_t **v186;
  _OWORD *v187;
  uint64_t **v188;
  _OWORD *v189;
  uint64_t **v190;
  _OWORD *v191;
  uint64_t **v192;
  _OWORD *v193;
  uint64_t **v194;
  _OWORD *v195;
  uint64_t **v196;
  _OWORD *v197;
  uint64_t **v198;
  _OWORD *v199;
  uint64_t **v200;
  _OWORD *v201;
  uint64_t **v202;
  _OWORD *v203;
  uint64_t **v204;
  _OWORD *v205;
  uint64_t **v206;
  _OWORD *v207;
  uint64_t **v208;
  _OWORD *v209;
  uint64_t **v210;
  _OWORD *v211;
  uint64_t **v212;
  _OWORD *v213;
  uint64_t **v214;
  _OWORD *v215;
  uint64_t **v216;
  _OWORD *v217;
  uint64_t **v218;
  _OWORD *v219;
  uint64_t **v220;
  _OWORD *v221;
  uint64_t **v222;
  _OWORD *v223;
  uint64_t **v224;
  _OWORD *v225;
  uint64_t **v226;
  _OWORD *v227;
  uint64_t **v228;
  _OWORD *v229;
  uint64_t **v230;
  _OWORD *v231;
  uint64_t **v232;
  _OWORD *v233;
  uint64_t **v234;
  _OWORD *v235;
  uint64_t **v236;
  _OWORD *v237;
  uint64_t **v238;
  _OWORD *v239;
  uint64_t **v240;
  _OWORD *v241;
  uint64_t **v242;
  _OWORD *v243;
  uint64_t **v244;
  _OWORD *v245;
  uint64_t **v246;
  _OWORD *v247;
  uint64_t **v248;
  _OWORD *v249;
  uint64_t **v250;
  _OWORD *v251;
  uint64_t **v252;
  _OWORD *v253;
  uint64_t **v254;
  _OWORD *v255;
  uint64_t **v256;
  _OWORD *v257;
  uint64_t **v258;
  _OWORD *v259;
  uint64_t **v260;
  _OWORD *v261;
  uint64_t **v262;
  _OWORD *v263;
  uint64_t **v264;
  _OWORD *v265;
  uint64_t **v266;
  _OWORD *v267;
  uint64_t **v268;
  _OWORD *v269;
  uint64_t **v270;
  _OWORD *v271;
  uint64_t **v272;
  _OWORD *v273;
  uint64_t **v274;
  _OWORD *v275;
  uint64_t **v276;
  _OWORD *v277;
  uint64_t **v278;
  _OWORD *v279;
  uint64_t **v280;
  _OWORD *v281;
  uint64_t **v282;
  _OWORD *v283;
  uint64_t **v284;
  _OWORD *v285;
  uint64_t **v286;
  _OWORD *v287;
  uint64_t **v288;
  _OWORD *v289;
  uint64_t **v290;
  _OWORD *v291;
  uint64_t **v292;
  _OWORD *v293;
  uint64_t **v294;
  _OWORD *v295;
  uint64_t **v296;
  _OWORD *v297;
  uint64_t **v298;
  _OWORD *v299;
  uint64_t **v300;
  _OWORD *v301;
  uint64_t **v302;
  _OWORD *v303;
  uint64_t **v304;
  _OWORD *v305;
  uint64_t **v306;
  _OWORD *v307;
  uint64_t **v308;
  _OWORD *v309;
  void *__p[2];
  char v311;
  void *v312[2];
  char v313;
  void **v314;

  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attachment");
  v314 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v3 + 56, "(kMDItemAttachmentTypes=\"*\"cwd && kMDItemAttachmentTypes != \"com.apple.notes.pencilkitsketch\" && kMDItemAttachmentTypes != \"com.apple.notes.table\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attachment");
  v314 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v5 + 56, "(kMDItemAttachmentTypes=\"*\"cwd && kMDItemAttachmentTypes != \"com.apple.notes.pencilkitsketch\" && kMDItemAttachmentTypes != \"com.apple.notes.table\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasAttached");
  v314 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v7 + 56, "(kMDItemAttachmentTypes=\"*\"cwd && kMDItemAttachmentTypes != \"com.apple.notes.pencilkitsketch\" && kMDItemAttachmentTypes != \"com.apple.notes.table\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasAttachment");
  v314 = __p;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v9 + 56, "(kMDItemAttachmentTypes=\"*\"cwd && kMDItemAttachmentTypes != \"com.apple.notes.pencilkitsketch\" && kMDItemAttachmentTypes != \"com.apple.notes.table\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v314 = __p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v11 + 56, "kMDItemAttachmentTypes=\"public.image\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v314 = __p;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v13 + 56, "kMDItemAttachmentTypes=\"com.compuserve.gif\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v314 = __p;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v15 + 56, "kMDItemAttachmentTypes=\"public.png\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v314 = __p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v17 + 56, "kMDItemAttachmentTypes=\"public.tiff\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v314 = __p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v19 + 56, "kMDItemAttachmentTypes=\"public.jpeg\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v314 = __p;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v21 + 56, "kMDItemAttachmentTypes=\"public.image\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v314 = __p;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v23 + 56, "kMDItemAttachmentTypes=\"com.compuserve.gif\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v314 = __p;
  v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v25 + 56, "kMDItemAttachmentTypes=\"public.png\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v314 = __p;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v27 + 56, "kMDItemAttachmentTypes=\"public.tiff\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v314 = __p;
  v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v29 + 56, "kMDItemAttachmentTypes=\"public.jpeg\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v314 = __p;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v31 + 56, "kMDItemAttachmentTypes=\"public.image\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v314 = __p;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v33 + 56, "kMDItemAttachmentTypes=\"com.compuserve.gif\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v314 = __p;
  v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v35 + 56, "kMDItemAttachmentTypes=\"public.png\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v314 = __p;
  v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v37 + 56, "kMDItemAttachmentTypes=\"public.tiff\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v314 = __p;
  v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v39 + 56, "kMDItemAttachmentTypes=\"public.jpeg\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v314 = __p;
  v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v41 + 56, "kMDItemAttachmentTypes=\"public.image\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v314 = __p;
  v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v43 + 56, "kMDItemAttachmentTypes=\"com.compuserve.gif\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v314 = __p;
  v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v45 + 56, "kMDItemAttachmentTypes=\"public.png\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v314 = __p;
  v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v47 + 56, "kMDItemAttachmentTypes=\"public.tiff\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v314 = __p;
  v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v49 + 56, "kMDItemAttachmentTypes=\"public.jpeg\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v314 = __p;
  v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v51 + 56, "kMDItemAttachmentTypes=\"public.audio\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v314 = __p;
  v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v53 + 56, "kMDItemAttachmentTypes=\"public.aac-audio\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v314 = __p;
  v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v55 + 56, "kMDItemAttachmentTypes=\"public.aif*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v314 = __p;
  v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v57 + 56, "kMDItemAttachmentTypes=\"public.mp3\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v314 = __p;
  v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v59 + 56, "kMDItemAttachmentTypes=\"public.audio\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v314 = __p;
  v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v61 + 56, "kMDItemAttachmentTypes=\"public.aac-audio\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v314 = __p;
  v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v63 + 56, "kMDItemAttachmentTypes=\"public.aif*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v314 = __p;
  v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v65 + 56, "kMDItemAttachmentTypes=\"public.mp3\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v314 = __p;
  v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v67 + 56, "kMDItemAttachmentTypes=\"public.audio\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v314 = __p;
  v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v69 + 56, "kMDItemAttachmentTypes=\"public.aac-audio\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v314 = __p;
  v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v71 + 56, "kMDItemAttachmentTypes=\"public.aif*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v314 = __p;
  v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v73 + 56, "kMDItemAttachmentTypes=\"public.mp3\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v314 = __p;
  v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v75 + 56, "kMDItemAttachmentTypes=\"public.audio\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v314 = __p;
  v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v77 + 56, "kMDItemAttachmentTypes=\"public.aac-audio\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v314 = __p;
  v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v79 + 56, "kMDItemAttachmentTypes=\"public.aif*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v314 = __p;
  v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v81 + 56, "kMDItemAttachmentTypes=\"public.mp3\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v314 = __p;
  v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v83 + 56, "kMDItemAttachmentTypes=\"public.movie\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v314 = __p;
  v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v85 + 56, "kMDItemAttachmentTypes=\"com.apple.quicktime-movie\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v314 = __p;
  v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v87 + 56, "kMDItemAttachmentTypes=\"com.apple.m4v-video\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v314 = __p;
  v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v89 + 56, "kMDItemAttachmentTypes=\"public.movie\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v314 = __p;
  v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v91 + 56, "kMDItemAttachmentTypes=\"com.apple.quicktime-movie\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v314 = __p;
  v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v93 + 56, "kMDItemAttachmentTypes=\"com.apple.m4v-video\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v314 = __p;
  v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v95 + 56, "kMDItemAttachmentTypes=\"public.movie\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v314 = __p;
  v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v97 + 56, "kMDItemAttachmentTypes=\"com.apple.quicktime-movie\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v314 = __p;
  v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v99 + 56, "kMDItemAttachmentTypes=\"com.apple.m4v-video\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v314 = __p;
  v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v101 + 56, "kMDItemAttachmentTypes=\"public.movie\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v314 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v103 + 56, "kMDItemAttachmentTypes=\"com.apple.quicktime-movie\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v314 = __p;
  v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v105 + 56, "kMDItemAttachmentTypes=\"com.apple.m4v-video\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Presentation");
  v314 = __p;
  v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v107 + 56, "(kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\" || kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v314 = __p;
  v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v109 + 56, "kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v314 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v111 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v314 = __p;
  v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v113 + 56, "(kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\" || kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v314 = __p;
  v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v115 + 56, "kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v314 = __p;
  v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v117 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Presentation");
  v314 = __p;
  v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v119 + 56, "(kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\" || kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v314 = __p;
  v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v121 + 56, "kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v314 = __p;
  v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v123 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v314 = __p;
  v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v125 + 56, "(kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\" || kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v314 = __p;
  v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v127 + 56, "kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v314 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v129 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v314 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v131 + 56, "kMDItemAttachmentTypes=\"com.apple.notes.table\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v314 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v133 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.excel.xls\" || kMDItemAttachmentTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v314 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v135 + 56, "kMDItemAttachmentTypes=\"com.apple.notes.table\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v314 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v137 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.excel.xls\" || kMDItemAttachmentTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v314 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v139 + 56, "kMDItemAttachmentTypes=\"com.apple.notes.table\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v314 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v141 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.excel.xls\" || kMDItemAttachmentTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v142 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v314 = __p;
  v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v142 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v143 + 56, "kMDItemAttachmentTypes=\"com.apple.notes.table\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v144 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v314 = __p;
  v145 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v144 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v145 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.excel.xls\" || kMDItemAttachmentTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v146 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v314 = __p;
  v147 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v146 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v147 + 56, "(kMDItemAttachmentTypes=\"com.adobe.pdf\" || kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"public.spreadsheet\" || kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.word*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd || kMDItemAttachmentTypes=\"public.plain-text\" || kMDItemAttachmentTypes=\"public.rtf\" || kMDItemAttachmentTypes=\"com.apple.notes.gallery\" || kMDItemAttachmentTypes=\"public.html\" || kMDItemAttachmentTypes=\"com.apple.rtfd\" || kMDItemAttachmentTypes=\"com.apple.flat-rtfd\" || kMDItemAttachmentTypes=\"com.apple.ibooks-container\" || kMDItemAttachmentTypes=\"com.apple.ibooks-folder\" || kMDItemAttachmentTypes=\"com.apple.ibooks\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgbook\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.book\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgtemplate\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.template\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v148 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v314 = __p;
  v149 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v148 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v149 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork.pages.*\" || kMDItemAttachmentTypes=\"com.microsoft.word.doc\" || kMDItemAttachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v150 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v314 = __p;
  v151 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v150 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v151 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v152 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v314 = __p;
  v153 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v152 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v153 + 56, "(kMDItemAttachmentTypes=\"microsoft.word.doc*\"cwd || kMDItemAttachmentTypes=\"openxmlformats.word*\"cwd)");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v154 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v314 = __p;
  v155 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v154 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v155 + 56, "(kMDItemAttachmentTypes=\"com.adobe.pdf\" || kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"public.spreadsheet\" || kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.word*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd || kMDItemAttachmentTypes=\"public.plain-text\" || kMDItemAttachmentTypes=\"public.rtf\" || kMDItemAttachmentTypes=\"com.apple.notes.gallery\" || kMDItemAttachmentTypes=\"public.html\" || kMDItemAttachmentTypes=\"com.apple.rtfd\" || kMDItemAttachmentTypes=\"com.apple.flat-rtfd\" || kMDItemAttachmentTypes=\"com.apple.ibooks-container\" || kMDItemAttachmentTypes=\"com.apple.ibooks-folder\" || kMDItemAttachmentTypes=\"com.apple.ibooks\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgbook\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.book\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgtemplate\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.template\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v156 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v314 = __p;
  v157 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v156 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v157 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.word.doc\" || kMDItemAttachmentTypes=\"com.apple.iwork.pages.*\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v158 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v314 = __p;
  v159 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v158 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v159 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v160 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v314 = __p;
  v161 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v160 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v161 + 56, "(kMDItemAttachmentTypes=\"microsoft.word.doc*\"cwd || kMDItemAttachmentTypes=\"openxmlformats.word*\"cwd)");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v162 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v314 = __p;
  v163 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v162 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v163 + 56, "(kMDItemAttachmentTypes=\"com.adobe.pdf\" || kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"public.spreadsheet\" || kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.word*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd || kMDItemAttachmentTypes=\"public.plain-text\" || kMDItemAttachmentTypes=\"public.rtf\" || kMDItemAttachmentTypes=\"com.apple.notes.gallery\" || kMDItemAttachmentTypes=\"public.html\" || kMDItemAttachmentTypes=\"com.apple.rtfd\" || kMDItemAttachmentTypes=\"com.apple.flat-rtfd\" || kMDItemAttachmentTypes=\"com.apple.ibooks-container\" || kMDItemAttachmentTypes=\"com.apple.ibooks-folder\" || kMDItemAttachmentTypes=\"com.apple.ibooks\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgbook\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.book\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgtemplate\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.template\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v164 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v314 = __p;
  v165 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v164 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v165 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork.pages.*\" || kMDItemAttachmentTypes=\"com.microsoft.word.doc\" || kMDItemAttachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v166 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v314 = __p;
  v167 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v166 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v167 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v168 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v314 = __p;
  v169 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v168 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v169 + 56, "(kMDItemAttachmentTypes=\"microsoft.word.doc*\"cwd || kMDItemAttachmentTypes=\"openxmlformats.word*\"cwd)");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v170 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v314 = __p;
  v171 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v170 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v171 + 56, "(kMDItemAttachmentTypes=\"com.adobe.pdf\" || kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"public.spreadsheet\" || kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.word*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd || kMDItemAttachmentTypes=\"public.plain-text\" || kMDItemAttachmentTypes=\"public.rtf\" || kMDItemAttachmentTypes=\"com.apple.notes.gallery\" || kMDItemAttachmentTypes=\"public.html\" || kMDItemAttachmentTypes=\"com.apple.rtfd\" || kMDItemAttachmentTypes=\"com.apple.flat-rtfd\" || kMDItemAttachmentTypes=\"com.apple.ibooks-container\" || kMDItemAttachmentTypes=\"com.apple.ibooks-folder\" || kMDItemAttachmentTypes=\"com.apple.ibooks\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgbook\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.book\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgtemplate\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.template\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v172 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v314 = __p;
  v173 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v172 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v173 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.word.doc\" || kMDItemAttachmentTypes=\"com.apple.iwork.pages.*\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v174 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v314 = __p;
  v175 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v174 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v175 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v176 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v314 = __p;
  v177 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v176 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v177 + 56, "(kMDItemAttachmentTypes=\"microsoft.word.doc*\"cwd || kMDItemAttachmentTypes=\"openxmlformats.word*\"cwd)");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v178 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v314 = __p;
  v179 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v178 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v179 + 56, "kMDItemAttachmentTypes=\"rtf*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v180 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v314 = __p;
  v181 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v180 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v181 + 56, "kMDItemAttachmentTypes=\"rtf*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v182 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v314 = __p;
  v183 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v182 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v183 + 56, "kMDItemAttachmentTypes=\"rtf*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v184 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v314 = __p;
  v185 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v184 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v185 + 56, "kMDItemAttachmentTypes=\"rtf*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v186 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v314 = __p;
  v187 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v186 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v187 + 56, "kMDItemAttachmentTypes=\"public.plain-text\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v188 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v314 = __p;
  v189 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v188 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v189 + 56, "kMDItemAttachmentTypes=\"public.plain-text\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v190 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v314 = __p;
  v191 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v190 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v191 + 56, "kMDItemAttachmentTypes=\"public.plain-text\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v192 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v314 = __p;
  v193 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v192 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v193 + 56, "kMDItemAttachmentTypes=\"public.plain-text\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v194 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v314 = __p;
  v195 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v194 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v195 + 56, "kMDItemAttachmentTypes=\"*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v196 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v314 = __p;
  v197 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v196 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v197 + 56, "(kMDItemAttachmentTypes=\"tar*\"cwd || kMDItemAttachmentTypes=\"zip*\"cwd)");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v198 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v314 = __p;
  v199 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v198 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v199 + 56, "kMDItemAttachmentTypes=\"java*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v200 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v314 = __p;
  v201 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v200 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v201 + 56, "kMDItemAttachmentTypes=\"*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v202 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v314 = __p;
  v203 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v202 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v203 + 56, "(kMDItemAttachmentTypes=\"tar*\"cwd || kMDItemAttachmentTypes=\"zip*\"cwd)");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v204 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v314 = __p;
  v205 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v204 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v205 + 56, "kMDItemAttachmentTypes=\"java*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v206 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v314 = __p;
  v207 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v206 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v207 + 56, "kMDItemAttachmentTypes=\"*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v208 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v314 = __p;
  v209 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v208 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v209 + 56, "(kMDItemAttachmentTypes=\"tar*\"cwd || kMDItemAttachmentTypes=\"zip*\"cwd)");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v210 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v314 = __p;
  v211 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v210 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v211 + 56, "kMDItemAttachmentTypes=\"java*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v212 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v314 = __p;
  v213 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v212 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v213 + 56, "kMDItemAttachmentTypes=\"*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v214 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v314 = __p;
  v215 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v214 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v215 + 56, "(kMDItemAttachmentTypes=\"tar*\"cwd || kMDItemAttachmentTypes=\"zip*\"cwd)");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v216 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v314 = __p;
  v217 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v216 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v217 + 56, "kMDItemAttachmentTypes=\"java*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v218 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v314 = __p;
  v219 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v218 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v219 + 56, "kMDItemAttachmentTypes=\"public.calendar-event\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v220 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v314 = __p;
  v221 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v220 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v221 + 56, "kMDItemAttachmentTypes=\"*ics*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v222 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v314 = __p;
  v223 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v222 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v223 + 56, "kMDItemAttachmentTypes=\"public.calendar-event\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v224 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v314 = __p;
  v225 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v224 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v225 + 56, "kMDItemAttachmentTypes=\"*ics*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v226 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v314 = __p;
  v227 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v226 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v227 + 56, "kMDItemAttachmentTypes=\"public.calendar-event\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v228 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v314 = __p;
  v229 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v228 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v229 + 56, "kMDItemAttachmentTypes=\"*ics*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v230 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v314 = __p;
  v231 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v230 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v231 + 56, "kMDItemAttachmentTypes=\"public.calendar-event\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v232 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v314 = __p;
  v233 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v232 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v233 + 56, "kMDItemAttachmentTypes=\"*ics*\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v234 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v314 = __p;
  v235 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v234 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v235 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v236 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v314 = __p;
  v237 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v236 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v237 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v238 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v314 = __p;
  v239 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v238 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v239 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v240 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v314 = __p;
  v241 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v240 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v241 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v242 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v314 = __p;
  v243 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v242 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v243 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v244 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v314 = __p;
  v245 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v244 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v245 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v246 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v314 = __p;
  v247 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v246 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v247 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v248 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v314 = __p;
  v249 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v248 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v249 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v250 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v314 = __p;
  v251 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v250 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v251 + 56, "kMDItemAttachmentTypes=\"com.apple.pkpass\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v252 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v314 = __p;
  v253 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v252 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v253 + 56, "kMDItemAttachmentTypes=\"com.apple.pkpass\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v254 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v314 = __p;
  v255 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v254 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v255 + 56, "kMDItemAttachmentTypes=\"com.apple.pkpass\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v256 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v314 = __p;
  v257 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v256 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v257 + 56, "kMDItemAttachmentTypes=\"com.apple.pkpass\"cwd");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v258 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v314 = __p;
  v259 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v258 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v259 + 56, "kMDItemAttachmentTypes=\"com.adobe.pdf\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v260 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v314 = __p;
  v261 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v260 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v261 + 56, "kMDItemAttachmentTypes=\"com.adobe.pdf\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v262 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v314 = __p;
  v263 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v262 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v263 + 56, "kMDItemAttachmentTypes=\"com.adobe.pdf\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v264 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v314 = __p;
  v265 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v264 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v265 + 56, "kMDItemAttachmentTypes=\"com.adobe.pdf\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v266 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v314 = __p;
  v267 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v266 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v267 + 56, "kMDItemDisplayName =\"%@c\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "FILEATTACHED");
  __p[0] = v312;
  v268 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v314 = __p;
  v269 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v268 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v269 + 56, "kMDItemDisplayName =\"%@c\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v270 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v314 = __p;
  v271 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v270 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v271 + 56, "kMDItemDisplayName =\"%@c\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "FILEATTACHMOD");
  __p[0] = v312;
  v272 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v314 = __p;
  v273 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v272 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v273 + 56, "kMDItemDisplayName =\"%@c\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v274 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v314 = __p;
  v275 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v274 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v275 + 56, "kMDItemAttachmentTypes=\"org.idpf.epub-container\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v276 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v314 = __p;
  v277 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v276 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v277 + 56, "kMDItemAttachmentTypes=\"org.idpf.epub-container\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v278 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v314 = __p;
  v279 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v278 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v279 + 56, "kMDItemAttachmentTypes=\"org.idpf.epub-container\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v280 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v314 = __p;
  v281 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v280 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v281 + 56, "kMDItemAttachmentTypes=\"org.idpf.epub-container\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v282 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DrawingKind");
  v314 = __p;
  v283 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v282 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v283 + 56, "(kMDItemAttachmentTypes=\"com.apple.notes.pencilkitsketch\" || kMDItemAttachmentTypes=\"com.apple.notes.sketch\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v284 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DrawingAttachment");
  v314 = __p;
  v285 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v284 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v285 + 56, "(kMDItemAttachmentTypes=\"com.apple.notes.pencilkitsketch\" || kMDItemAttachmentTypes=\"com.apple.notes.sketch\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v286 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasDrawn");
  v314 = __p;
  v287 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v286 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v287 + 56, "(kMDItemAttachmentTypes=\"com.apple.notes.pencilkitsketch\" || kMDItemAttachmentTypes=\"com.apple.notes.sketch\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v288 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DrawingKind");
  v314 = __p;
  v289 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v288 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v289 + 56, "(kMDItemAttachmentTypes=\"com.apple.notes.pencilkitsketch\" || kMDItemAttachmentTypes=\"com.apple.notes.sketch\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v290 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DrawingAttachment");
  v314 = __p;
  v291 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v290 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v291 + 56, "(kMDItemAttachmentTypes=\"com.apple.notes.pencilkitsketch\" || kMDItemAttachmentTypes=\"com.apple.notes.sketch\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v292 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasDrawn");
  v314 = __p;
  v293 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v292 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v293 + 56, "(kMDItemAttachmentTypes=\"com.apple.notes.pencilkitsketch\" || kMDItemAttachmentTypes=\"com.apple.notes.sketch\")");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v294 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MapKind");
  v314 = __p;
  v295 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v294 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v295 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v296 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MapAttachment");
  v314 = __p;
  v297 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v296 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v297 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v298 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MapKind");
  v314 = __p;
  v299 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v298 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v299 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v300 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MapAttachment");
  v314 = __p;
  v301 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v300 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v301 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v302 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "WebsiteKind");
  v314 = __p;
  v303 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v302 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v303 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v304 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "WebsiteAttachment");
  v314 = __p;
  v305 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v304 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v305 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v306 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "WebsiteKind");
  v314 = __p;
  v307 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v306 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v307 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v308 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "WebsiteAttachment");
  v314 = __p;
  v309 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v308 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A1B0DE04]((char *)v309 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0)
    operator delete(__p[0]);
  if (v313 < 0)
    operator delete(v312[0]);
}

void sub_1A1837C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *NL::NumericValue::upper@<X0>(NL::NumericValue *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;

  if (*(_QWORD *)this)
    return std::to_string(a2, *(_DWORD *)(*(_QWORD *)this + 8));
  v3 = *((_QWORD *)this + 2);
  if (v3)
    return std::to_string(a2, *(double *)(v3 + 16));
  else
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
}

std::string *NL::NumericValue::lower@<X0>(NL::NumericValue *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;

  if (*(_QWORD *)this)
    return std::to_string(a2, *(_DWORD *)(*(_QWORD *)this + 4));
  v3 = *((_QWORD *)this + 2);
  if (v3)
    return std::to_string(a2, *(double *)(v3 + 8));
  else
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
}

std::string *NL::NumericValue::value@<X0>(int **this@<X0>, std::string *a2@<X8>)
{
  double *v3;

  if (*this)
    return std::to_string(a2, **this);
  v3 = (double *)this[2];
  if (v3)
    return std::to_string(a2, *v3);
  else
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
}

uint64_t ___ZNK2NL14ParseAttribute17enumerateEntitiesEU13block_pointerFvRKNS_6EntityEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1A1838BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1A1838D08(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E45CC1B0, MEMORY[0x1E0DE42D0]);
}

void sub_1A18390C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

uint64_t std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void nlp::CFScopedPtr<__CFNumber const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,NLSearchParseResultModifier>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,NLSearchParseResultModifier>>,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1A1839318(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1A1839498(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1A1839528(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::map<std::string,NLSearchParseResultModifier>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,NLSearchParseResultModifier>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,NLSearchParseResultModifier>,std::__tree_node<std::__value_type<std::string,NLSearchParseResultModifier>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1A18395C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,NLSearchParseResultModifier>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,NLSearchParseResultModifier>,std::__tree_node<std::__value_type<std::string,NLSearchParseResultModifier>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,NLSearchParseResultModifier> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,NLSearchParseResultModifier> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__construct_node<std::pair<std::string const,NLSearchParseResultModifier> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__construct_node<std::pair<std::string const,NLSearchParseResultModifier> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1A1839768(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void nlp::CFScopedPtr<__CFAttributedString *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFSet const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

_OWORD *std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 7) = v7 + 4;
    v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 7) = v7 + 4;
    v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,NLSearchParseResultModifier>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    std::__tree<std::string>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t _CFInit_EmojiPredictorWrapper(uint64_t result)
{
  *(_QWORD *)(result + 16) = &unk_1E45CD570;
  return result;
}

uint64_t createEmojiPredictorWrapper(NLEmojiGenerator *a1)
{
  uint64_t result;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_EmojiPredictorWrapper)
  {
    qword_1EDBB1888 = 0;
    unk_1EDBB1898 = 0u;
    unk_1EDBB18A8 = 0u;
    g_CFTypeID_EmojiPredictorWrapper = _CFRuntimeRegisterClass();
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

uint64_t NLEmojiPredictorCreate(const __CFDictionary *a1)
{
  NLEmojiGenerator *v2;

  v2 = (NLEmojiGenerator *)operator new();
  NLEmojiGenerator::NLEmojiGenerator(v2, a1);
  return createEmojiPredictorWrapper(v2);
}

#error "1A1839C74: call analysis failed (funcsize=30)"

__CFArray *NLEmojiPredictorCreateCandidatesForString(uint64_t a1, const __CFString *a2)
{
  if (a1 && a2)
    return NLEmojiGenerator::createEmojisForString(*(NLEmojiGenerator **)(a1 + 24), a2);
  else
    return 0;
}

void EmojiPredictorWrapper::~EmojiPredictorWrapper(EmojiPredictorWrapper *this)
{
  EmojiPredictorWrapper::~EmojiPredictorWrapper(this);
  JUMPOUT(0x1A1B0E068);
}

{
  NLEmojiGenerator *v2;

  *(_QWORD *)this = &unk_1E45CD570;
  v2 = (NLEmojiGenerator *)*((_QWORD *)this + 1);
  if (v2)
  {
    NLEmojiGenerator::~NLEmojiGenerator(v2);
    MEMORY[0x1A1B0E068]();
  }
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

void NLGujaratiOrthographyChecker::NLGujaratiOrthographyChecker(NLGujaratiOrthographyChecker *this)
{
  CFMutableStringRef Mutable;
  CFMutableStringRef v3;
  CFMutableStringRef v4;
  CFMutableStringRef v5;
  CFMutableStringRef v6;
  CFMutableStringRef v7;
  CFMutableStringRef v8;
  const __CFString *v9;
  CFMutableStringRef v10;
  CFMutableStringRef v11;
  const __CFCharacterSet *v12;

  *(_QWORD *)this = &off_1E45CE138;
  *((_QWORD *)this + 1) = CFSTR("઼");
  *((_QWORD *)this + 2) = CFSTR("‍");
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, CFSTR("ઁ"));
  CFStringAppend(Mutable, CFSTR("ં"));
  CFStringAppend(Mutable, CFSTR("઼"));
  CFStringAppend(Mutable, CFSTR("ા"));
  CFStringAppend(Mutable, CFSTR("િ"));
  CFStringAppend(Mutable, CFSTR("ી"));
  CFStringAppend(Mutable, CFSTR("ુ"));
  CFStringAppend(Mutable, CFSTR("ૂ"));
  CFStringAppend(Mutable, CFSTR("ૃ"));
  CFStringAppend(Mutable, CFSTR("ૄ"));
  CFStringAppend(Mutable, CFSTR("ૅ"));
  CFStringAppend(Mutable, CFSTR("ે"));
  CFStringAppend(Mutable, CFSTR("ૈ"));
  CFStringAppend(Mutable, CFSTR("ૉ"));
  CFStringAppend(Mutable, CFSTR("ો"));
  CFStringAppend(Mutable, CFSTR("ૌ"));
  CFStringAppend(Mutable, CFSTR("્"));
  *((_QWORD *)this + 3) = CFCharacterSetCreateWithCharactersInString(0, Mutable);
  CFRelease(Mutable);
  v3 = CFStringCreateMutable(0, 0);
  CFStringAppend(v3, CFSTR("ઋ"));
  CFStringAppend(v3, CFSTR("ક"));
  CFStringAppend(v3, CFSTR("ખ"));
  CFStringAppend(v3, CFSTR("ગ"));
  CFStringAppend(v3, CFSTR("ઘ"));
  CFStringAppend(v3, CFSTR("ઙ"));
  CFStringAppend(v3, CFSTR("ચ"));
  CFStringAppend(v3, CFSTR("છ"));
  CFStringAppend(v3, CFSTR("જ"));
  CFStringAppend(v3, CFSTR("ઝ"));
  CFStringAppend(v3, CFSTR("ઞ"));
  CFStringAppend(v3, CFSTR("ટ"));
  CFStringAppend(v3, CFSTR("ઠ"));
  CFStringAppend(v3, CFSTR("ડ"));
  CFStringAppend(v3, CFSTR("ઢ"));
  CFStringAppend(v3, CFSTR("ણ"));
  CFStringAppend(v3, CFSTR("ત"));
  CFStringAppend(v3, CFSTR("થ"));
  CFStringAppend(v3, CFSTR("દ"));
  CFStringAppend(v3, CFSTR("ધ"));
  CFStringAppend(v3, CFSTR("ન"));
  CFStringAppend(v3, CFSTR("પ"));
  CFStringAppend(v3, CFSTR("ફ"));
  CFStringAppend(v3, CFSTR("બ"));
  CFStringAppend(v3, CFSTR("ભ"));
  CFStringAppend(v3, CFSTR("મ"));
  CFStringAppend(v3, CFSTR("ય"));
  CFStringAppend(v3, CFSTR("ર"));
  CFStringAppend(v3, CFSTR("લ"));
  CFStringAppend(v3, CFSTR("ળ"));
  CFStringAppend(v3, CFSTR("વ"));
  CFStringAppend(v3, CFSTR("શ"));
  CFStringAppend(v3, CFSTR("ષ"));
  CFStringAppend(v3, CFSTR("સ"));
  CFStringAppend(v3, CFSTR("હ"));
  *((_QWORD *)this + 4) = CFCharacterSetCreateWithCharactersInString(0, v3);
  CFRelease(v3);
  v4 = CFStringCreateMutable(0, 0);
  CFStringAppend(v4, CFSTR("ઙ"));
  CFStringAppend(v4, CFSTR("ઞ"));
  CFStringAppend(v4, CFSTR("ણ"));
  CFStringAppend(v4, CFSTR("ન"));
  CFStringAppend(v4, CFSTR("મ"));
  *((_QWORD *)this + 5) = CFCharacterSetCreateWithCharactersInString(0, v4);
  CFRelease(v4);
  v5 = CFStringCreateMutable(0, 0);
  CFStringAppend(v5, CFSTR("ક"));
  CFStringAppend(v5, CFSTR("ખ"));
  CFStringAppend(v5, CFSTR("ગ"));
  CFStringAppend(v5, CFSTR("ઘ"));
  CFStringAppend(v5, CFSTR("ઙ"));
  *((_QWORD *)this + 6) = CFCharacterSetCreateWithCharactersInString(0, v5);
  CFRelease(v5);
  v6 = CFStringCreateMutable(0, 0);
  CFStringAppend(v6, CFSTR("ચ"));
  CFStringAppend(v6, CFSTR("છ"));
  CFStringAppend(v6, CFSTR("જ"));
  CFStringAppend(v6, CFSTR("ઝ"));
  CFStringAppend(v6, CFSTR("ઞ"));
  *((_QWORD *)this + 7) = CFCharacterSetCreateWithCharactersInString(0, v6);
  CFRelease(v6);
  v7 = CFStringCreateMutable(0, 0);
  CFStringAppend(v7, CFSTR("ટ"));
  CFStringAppend(v7, CFSTR("ઠ"));
  CFStringAppend(v7, CFSTR("ડ"));
  CFStringAppend(v7, CFSTR("ઢ"));
  CFStringAppend(v7, CFSTR("ણ"));
  *((_QWORD *)this + 8) = CFCharacterSetCreateWithCharactersInString(0, v7);
  CFRelease(v7);
  v8 = CFStringCreateMutable(0, 0);
  CFStringAppend(v8, CFSTR("ટ"));
  CFStringAppend(v8, CFSTR("ઠ"));
  CFStringAppend(v8, CFSTR("ડ"));
  CFStringAppend(v8, CFSTR("ઢ"));
  CFStringAppend(v8, CFSTR("ણ"));
  CFStringAppend(v8, CFSTR("ય"));
  CFStringAppend(v8, CFSTR("વ"));
  CFStringAppend(v8, CFSTR("શ"));
  CFStringAppend(v8, CFSTR("ષ"));
  CFStringAppend(v8, CFSTR("સ"));
  CFStringAppend(v8, CFSTR("હ"));
  *((_QWORD *)this + 9) = CFCharacterSetCreateWithCharactersInString(0, v8);
  CFRelease(v8);
  v9 = CFStringCreateMutable(0, 0);
  *((_QWORD *)this + 10) = CFCharacterSetCreateWithCharactersInString(0, v9);
  CFRelease(v9);
  v10 = CFStringCreateMutable(0, 0);
  CFStringAppend(v10, CFSTR("અ"));
  CFStringAppend(v10, CFSTR("આ"));
  CFStringAppend(v10, CFSTR("ઇ"));
  CFStringAppend(v10, CFSTR("ઈ"));
  CFStringAppend(v10, CFSTR("ઉ"));
  CFStringAppend(v10, CFSTR("ઊ"));
  CFStringAppend(v10, CFSTR("ઋ"));
  CFStringAppend(v10, CFSTR("ઍ"));
  CFStringAppend(v10, CFSTR("એ"));
  CFStringAppend(v10, CFSTR("ઐ"));
  CFStringAppend(v10, CFSTR("ઑ"));
  CFStringAppend(v10, CFSTR("ઓ"));
  CFStringAppend(v10, CFSTR("ઔ"));
  *((_QWORD *)this + 11) = CFCharacterSetCreateWithCharactersInString(0, v10);
  CFRelease(v10);
  v11 = CFStringCreateMutable(0, 0);
  CFStringAppend(v11, CFSTR("ઁ"));
  CFStringAppend(v11, CFSTR("ં"));
  CFStringAppend(v11, CFSTR("ઃ"));
  CFStringAppend(v11, CFSTR("અ"));
  CFStringAppend(v11, CFSTR("આ"));
  CFStringAppend(v11, CFSTR("ઇ"));
  CFStringAppend(v11, CFSTR("ઈ"));
  CFStringAppend(v11, CFSTR("ઉ"));
  CFStringAppend(v11, CFSTR("ઊ"));
  CFStringAppend(v11, CFSTR("ઋ"));
  CFStringAppend(v11, CFSTR("ઍ"));
  CFStringAppend(v11, CFSTR("એ"));
  CFStringAppend(v11, CFSTR("ઐ"));
  CFStringAppend(v11, CFSTR("ઑ"));
  CFStringAppend(v11, CFSTR("ઓ"));
  CFStringAppend(v11, CFSTR("ઔ"));
  CFStringAppend(v11, CFSTR("ક"));
  CFStringAppend(v11, CFSTR("ખ"));
  CFStringAppend(v11, CFSTR("ગ"));
  CFStringAppend(v11, CFSTR("ઘ"));
  CFStringAppend(v11, CFSTR("ઙ"));
  CFStringAppend(v11, CFSTR("ચ"));
  CFStringAppend(v11, CFSTR("છ"));
  CFStringAppend(v11, CFSTR("જ"));
  CFStringAppend(v11, CFSTR("ઝ"));
  CFStringAppend(v11, CFSTR("ઞ"));
  CFStringAppend(v11, CFSTR("ટ"));
  CFStringAppend(v11, CFSTR("ઠ"));
  CFStringAppend(v11, CFSTR("ડ"));
  CFStringAppend(v11, CFSTR("ઢ"));
  CFStringAppend(v11, CFSTR("ણ"));
  CFStringAppend(v11, CFSTR("ત"));
  CFStringAppend(v11, CFSTR("થ"));
  CFStringAppend(v11, CFSTR("દ"));
  CFStringAppend(v11, CFSTR("ધ"));
  CFStringAppend(v11, CFSTR("ન"));
  CFStringAppend(v11, CFSTR("પ"));
  CFStringAppend(v11, CFSTR("ફ"));
  CFStringAppend(v11, CFSTR("બ"));
  CFStringAppend(v11, CFSTR("ભ"));
  CFStringAppend(v11, CFSTR("મ"));
  CFStringAppend(v11, CFSTR("ય"));
  CFStringAppend(v11, CFSTR("ર"));
  CFStringAppend(v11, CFSTR("લ"));
  CFStringAppend(v11, CFSTR("ળ"));
  CFStringAppend(v11, CFSTR("વ"));
  CFStringAppend(v11, CFSTR("શ"));
  CFStringAppend(v11, CFSTR("ષ"));
  CFStringAppend(v11, CFSTR("સ"));
  CFStringAppend(v11, CFSTR("હ"));
  CFStringAppend(v11, CFSTR("઼"));
  CFStringAppend(v11, CFSTR("ઽ"));
  CFStringAppend(v11, CFSTR("ા"));
  CFStringAppend(v11, CFSTR("િ"));
  CFStringAppend(v11, CFSTR("ી"));
  CFStringAppend(v11, CFSTR("ુ"));
  CFStringAppend(v11, CFSTR("ૂ"));
  CFStringAppend(v11, CFSTR("ૃ"));
  CFStringAppend(v11, CFSTR("ૄ"));
  CFStringAppend(v11, CFSTR("ૅ"));
  CFStringAppend(v11, CFSTR("ે"));
  CFStringAppend(v11, CFSTR("ૈ"));
  CFStringAppend(v11, CFSTR("ૉ"));
  CFStringAppend(v11, CFSTR("ો"));
  CFStringAppend(v11, CFSTR("ૌ"));
  CFStringAppend(v11, CFSTR("્"));
  CFStringAppend(v11, CFSTR("૦"));
  CFStringAppend(v11, CFSTR("૧"));
  CFStringAppend(v11, CFSTR("૨"));
  CFStringAppend(v11, CFSTR("૩"));
  CFStringAppend(v11, CFSTR("૪"));
  CFStringAppend(v11, CFSTR("૫"));
  CFStringAppend(v11, CFSTR("૬"));
  CFStringAppend(v11, CFSTR("૭"));
  CFStringAppend(v11, CFSTR("૮"));
  CFStringAppend(v11, CFSTR("૯"));
  v12 = CFCharacterSetCreateWithCharactersInString(0, v11);
  *((_QWORD *)this + 12) = CFCharacterSetCreateInvertedSet(0, v12);
  CFRelease(v12);
  CFRelease(v11);
}

void sub_1A183A9B4(_Unwind_Exception *a1)
{
  NLAbstractOrthographyConvertor *v1;

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(v1);
  _Unwind_Resume(a1);
}

void NLGujaratiOrthographyChecker::~NLGujaratiOrthographyChecker(CFTypeRef *this)
{
  *this = &off_1E45CE138;
  CFRelease(this[1]);
  CFRelease(this[2]);
  CFRelease(this[3]);
  CFRelease(this[4]);
  CFRelease(this[5]);
  CFRelease(this[6]);
  CFRelease(this[7]);
  CFRelease(this[8]);
  CFRelease(this[9]);
  CFRelease(this[10]);
  CFRelease(this[11]);
  CFRelease(this[12]);
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)this);
}

{
  NLGujaratiOrthographyChecker::~NLGujaratiOrthographyChecker(this);
  JUMPOUT(0x1A1B0E068);
}

BOOL NLGujaratiOrthographyChecker::isVowelSign(NLGujaratiOrthographyChecker *this, const __CFString *a2)
{
  CFMutableStringRef Mutable;
  const __CFCharacterSet *v4;
  const __CFCharacterSet *InvertedSet;
  _BOOL8 v6;
  CFRange v8;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, CFSTR("ઽ"));
  CFStringAppend(Mutable, CFSTR("ા"));
  CFStringAppend(Mutable, CFSTR("િ"));
  CFStringAppend(Mutable, CFSTR("ી"));
  CFStringAppend(Mutable, CFSTR("ુ"));
  CFStringAppend(Mutable, CFSTR("ૂ"));
  CFStringAppend(Mutable, CFSTR("ૃ"));
  CFStringAppend(Mutable, CFSTR("ૄ"));
  CFStringAppend(Mutable, CFSTR("ૅ"));
  CFStringAppend(Mutable, CFSTR("ે"));
  CFStringAppend(Mutable, CFSTR("ૈ"));
  CFStringAppend(Mutable, CFSTR("ૉ"));
  CFStringAppend(Mutable, CFSTR("ો"));
  CFStringAppend(Mutable, CFSTR("ૌ"));
  v4 = CFCharacterSetCreateWithCharactersInString(0, Mutable);
  InvertedSet = CFCharacterSetCreateInvertedSet(0, v4);
  CFRelease(Mutable);
  CFRelease(v4);
  v8.length = CFStringGetLength(a2) - 1;
  v8.location = 0;
  v6 = CFStringFindCharacterFromSet(a2, InvertedSet, v8, 0, 0) == 0;
  CFRelease(InvertedSet);
  return v6;
}

BOOL NLGujaratiOrthographyChecker::canCandrabinduFollowVowelSign(NLGujaratiOrthographyChecker *this, CFStringRef theString1)
{
  return CFStringCompare(theString1, CFSTR("ા"), 0) == kCFCompareEqualTo
      || CFStringCompare(theString1, CFSTR("ુ"), 0) == kCFCompareEqualTo
      || CFStringCompare(theString1, CFSTR("ૂ"), 0) == kCFCompareEqualTo;
}

BOOL NLGujaratiOrthographyChecker::canViramaFollowLetter(CFStringRef *this, CFStringRef theString1)
{
  const __CFCharacterSet *v4;
  UniChar CharacterAtIndex;

  if (CFStringCompare(theString1, this[1], 0) == kCFCompareEqualTo)
    return 1;
  v4 = (const __CFCharacterSet *)this[4];
  CharacterAtIndex = CFStringGetCharacterAtIndex(theString1, 0);
  return CFCharacterSetIsCharacterMember(v4, CharacterAtIndex) != 0;
}

BOOL NLGujaratiOrthographyChecker::canViramaPrecedeLetter(NLGujaratiOrthographyChecker *this, CFStringRef theString)
{
  const __CFCharacterSet *v4;
  UniChar CharacterAtIndex;

  v4 = (const __CFCharacterSet *)*((_QWORD *)this + 4);
  CharacterAtIndex = CFStringGetCharacterAtIndex(theString, 0);
  return CFCharacterSetIsCharacterMember(v4, CharacterAtIndex)
      || CFStringCompare(theString, *((CFStringRef *)this + 2), 0) == kCFCompareEqualTo;
}

CFMutableStringRef NLGujaratiOrthographyChecker::stringByCorrectingIllegalVowelLetters(NLGujaratiOrthographyChecker *this, const __CFString *a2)
{
  CFIndex Length;
  CFMutableStringRef MutableCopy;
  uint64_t *v5;
  const __CFString *v6;
  CFRange v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  const __CFString *v12;
  uint64_t *v13;
  _QWORD *v14[2];
  const __CFString **v15;

  v14[0] = 0;
  v14[1] = 0;
  v12 = CFSTR("અા");
  v13 = (uint64_t *)v14;
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("આ");
  v12 = CFSTR("અો");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ઓ");
  v12 = CFSTR("અાે");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ઓ");
  v12 = CFSTR("આે");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ઓ");
  v12 = CFSTR("અૌ");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ઔ");
  v12 = CFSTR("અાૈ");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ઔ");
  v12 = CFSTR("આૈ");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ઔ");
  v12 = CFSTR("અૈ");
  v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = (uint64_t)CFSTR("ઐ");
  Length = CFStringGetLength(a2);
  MutableCopy = CFStringCreateMutableCopy(0, Length, a2);
  v5 = v13;
  if (v13 != (uint64_t *)v14)
  {
    do
    {
      v6 = (const __CFString *)v5[5];
      v7 = CFStringFind(MutableCopy, (CFStringRef)v5[4], 0);
      if (v7.length >= 1)
        CFStringReplace(MutableCopy, v7, v6);
      v8 = (uint64_t *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != (uint64_t *)v14);
  }
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy((uint64_t)&v13, v14[0]);
  return MutableCopy;
}

void sub_1A183AFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

BOOL NLGujaratiOrthographyChecker::checkSpelling(NLGujaratiOrthographyChecker *this, CFStringRef theString, __CFString **a3, const __CFString **a4)
{
  CFIndex Length;
  CFIndex v8;
  CFIndex location;
  CFStringRef v10;
  CFStringRef v11;
  CFStringRef v12;
  _BOOL8 v13;
  CFStringRef v14;
  CFStringRef v15;
  CFStringRef v16;
  char v17;
  const __CFString **v18;
  __CFArray *Mutable;
  CFIndex v20;
  char v21;
  int CharacterAtIndex;
  UniChar v23;
  BOOL v24;
  const __CFCharacterSet *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  const __CFString *v28;
  CFDictionaryRef v29;
  CFDictionaryRef v30;
  CFStringRef v31;
  CFIndex Count;
  unint64_t v33;
  __CFArray *v34;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *Value;
  const __CFNumber *v37;
  const __CFString *v38;
  CFRange v39;
  const __CFCharacterSet *Copy;
  const __CFCharacterSet *v41;
  const __CFCharacterSet *v42;
  CFIndex v43;
  UniChar v44;
  NLGujaratiOrthographyChecker *IsCharacterMember;
  int v46;
  CFIndex v47;
  CFMutableStringRef MutableCopy;
  CFRange v49;
  CFComparisonResult v50;
  CFComparisonResult v51;
  const __CFString *v52;
  CFStringRef v53;
  const __CFString *v54;
  CFIndex v55;
  CFMutableStringRef v56;
  CFRange v57;
  int CharacterFromSet;
  CFStringRef v60;
  const __CFString *v61;
  const __CFString *v62;
  char v63;
  const __CFString **v64;
  __CFString *theStringa;
  CFIndex valuePtr;
  uint64_t v68;
  CFRange range;
  void *values[3];
  CFRange result;
  const __CFString *v72;
  uint64_t v73;
  CFRange v74;
  CFRange v75;
  CFRange v76;
  CFRange v77;
  CFRange v78;
  CFRange v79;
  CFRange v80;
  CFRange v81;
  CFRange v82;
  CFRange v83;
  CFRange v84;
  CFRange v85;
  CFRange v86;
  CFRange v87;
  CFRange v88;
  CFRange v89;
  CFRange v90;
  CFRange v91;

  v73 = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(theString);
  result = (CFRange)xmmword_1A18D3A60;
  v74.location = 0;
  v74.length = Length;
  if (!CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 3), v74, 0, &result))
  {
LABEL_18:
    result = (CFRange)xmmword_1A18D3A60;
    v77.location = 0;
    v77.length = Length;
    if (CFStringFindWithOptions(theString, *((CFStringRef *)this + 1), v77, 0, &result))
    {
      if (result.location)
      {
        v78.location = result.location - 1;
        v78.length = 1;
        v12 = CFStringCreateWithSubstring(0, theString, v78);
        if (v12)
          CFRelease(v12);
      }
      v13 = 0;
      v14 = CFSTR("illegal nukta placement");
      goto LABEL_133;
    }
    result = (CFRange)xmmword_1A18D3A60;
    v79.location = 0;
    v79.length = Length;
    if (CFStringFindWithOptions(theString, CFSTR("્"), v79, 0, &result))
    {
      do
      {
        if (!result.location)
        {
LABEL_48:
          v13 = 0;
          v14 = CFSTR("illegal virama placement");
          goto LABEL_133;
        }
        v80.location = result.location - 1;
        v80.length = 1;
        v15 = CFStringCreateWithSubstring(0, theString, v80);
        if (result.location + 1 >= Length)
        {
          v16 = 0;
          if (!NLGujaratiOrthographyChecker::canViramaFollowLetter((CFStringRef *)this, v15))
          {
LABEL_44:
            if (v15)
              CFRelease(v15);
            if (v16)
              CFRelease(v16);
            goto LABEL_48;
          }
        }
        else
        {
          v81.length = 1;
          v81.location = result.location + 1;
          v16 = CFStringCreateWithSubstring(0, theString, v81);
          if (!NLGujaratiOrthographyChecker::canViramaFollowLetter((CFStringRef *)this, v15))
            goto LABEL_44;
          if (v16)
          {
            if (!NLGujaratiOrthographyChecker::canViramaPrecedeLetter(this, v16))
              goto LABEL_44;
            v17 = 0;
            if (!v15)
              goto LABEL_34;
LABEL_33:
            CFRelease(v15);
            goto LABEL_34;
          }
        }
        v17 = 1;
        if (v15)
          goto LABEL_33;
LABEL_34:
        if ((v17 & 1) == 0)
          CFRelease(v16);
        v82.location = result.length + result.location;
        v82.length = Length - (result.length + result.location);
      }
      while (CFStringFindWithOptions(theString, CFSTR("્"), v82, 0, &result));
    }
    v18 = (const __CFString **)a3;
    if (a3)
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    else
      Mutable = 0;
    v20 = CFStringGetLength(theString);
    v83.location = 0;
    v83.length = v20;
    v64 = a4;
    v14 = 0;
    if (CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 5), v83, 0, &range))
    {
      v21 = 1;
      while (1)
      {
        if (range.location + 2 >= v20 || CFStringGetCharacterAtIndex(theString, range.location + 1) != 2765)
          goto LABEL_85;
        CharacterAtIndex = CFStringGetCharacterAtIndex(theString, range.location);
        v23 = CFStringGetCharacterAtIndex(theString, range.location + 2);
        if (CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 10), v23))
          v24 = 1;
        else
          v24 = range.location + 3 < v20 && CFStringGetCharacterAtIndex(theString, range.location + 3) == 2748;
        if (CharacterAtIndex > 2722)
        {
          if (CharacterAtIndex == 2723)
          {
            if (v24)
              goto LABEL_81;
            v25 = (const __CFCharacterSet *)*((_QWORD *)this + 9);
LABEL_77:
            if (((CFCharacterSetIsCharacterMember(v25, v23) != 0) & v21) == 0)
              goto LABEL_81;
            goto LABEL_78;
          }
          if (CharacterAtIndex == 2728
            && (CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 6), v23)
             || CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 7), v23)
             || CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 8), v23))
            && (range.location < 1 || CFStringGetCharacterAtIndex(theString, range.location) != 2765))
          {
            if (Mutable)
            {
              result = (CFRange)xmmword_1E45CFA90;
              v72 = CFSTR("replacement");
              valuePtr = range.location;
              v68 = 2;
              v26 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
              v27 = CFNumberCreate(0, kCFNumberCFIndexType, &v68);
              values[0] = v26;
              values[1] = v27;
              values[2] = CFSTR("ं");
              v28 = v14;
              v29 = CFDictionaryCreate(0, (const void **)&result, (const void **)values, 3, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
              CFRelease(v26);
              CFRelease(v27);
              CFArrayAppendValue(Mutable, v29);
              v30 = v29;
              v14 = v28;
              CFRelease(v30);
            }
LABEL_81:
            if (!v14)
            {
              v84.location = range.location;
              v84.length = 3;
              v31 = CFStringCreateWithSubstring(0, theString, v84);
              v14 = CFStringCreateWithFormat(0, 0, CFSTR("invalid nasal combination '%@'"), v31);
              CFRelease(v31);
            }
            a4 = v64;
            if (!Mutable)
              goto LABEL_132;
            v21 = 0;
            goto LABEL_85;
          }
        }
        else
        {
          if (CharacterAtIndex == 2713)
          {
            if (v24)
              goto LABEL_81;
            v25 = (const __CFCharacterSet *)*((_QWORD *)this + 6);
            goto LABEL_77;
          }
          if (CharacterAtIndex == 2718)
          {
            if (v24)
              goto LABEL_81;
            v25 = (const __CFCharacterSet *)*((_QWORD *)this + 7);
            goto LABEL_77;
          }
        }
        if ((v21 & 1) == 0)
          goto LABEL_81;
LABEL_78:
        v21 = 1;
        a4 = v64;
LABEL_85:
        if (v20 > range.location + 1)
        {
          v85.location = range.location + 1;
          v85.length = v20 - (range.location + 1);
          if (CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 5), v85, 0, &range))
            continue;
        }
        v63 = v21;
        v18 = (const __CFString **)a3;
        if (!Mutable)
          goto LABEL_101;
        goto LABEL_91;
      }
    }
    if (!Mutable)
      goto LABEL_144;
    v63 = 1;
LABEL_91:
    if (CFArrayGetCount(Mutable) >= 1)
    {
      v61 = v14;
      theStringa = CFStringCreateMutableCopy(0, 0, theString);
      Count = CFArrayGetCount(Mutable);
      if (Count >= 1)
      {
        v33 = Count + 1;
        do
        {
          v34 = Mutable;
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v33 - 2);
          Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("range.location"));
          v37 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("range.length"));
          result = (CFRange)xmmword_1A18D3A50;
          CFNumberGetValue(Value, kCFNumberCFIndexType, &result);
          CFNumberGetValue(v37, kCFNumberCFIndexType, &result.length);
          v38 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("replacement"));
          v39.location = result.location;
          if (result.location != -1)
          {
            v39.length = result.length;
            if (result.length >= 1)
            {
              if (v38)
                CFStringReplace(theStringa, v39, v38);
            }
          }
          --v33;
          Mutable = v34;
        }
        while (v33 > 1);
      }
      v18 = (const __CFString **)a3;
      *a3 = theStringa;
      a4 = v64;
      v14 = v61;
    }
    CFRelease(Mutable);
LABEL_101:
    if ((v63 & 1) != 0)
    {
LABEL_144:
      Copy = CFCharacterSetCreateCopy(0, *((CFCharacterSetRef *)this + 11));
      v41 = CFCharacterSetCreateCopy(0, *((CFCharacterSetRef *)this + 3));
      v42 = CFCharacterSetCreateWithCharactersInString(0, CFSTR("ઁં"));
      v43 = CFStringGetLength(theString);
      v86.location = 0;
      v86.length = v43;
      if (CFStringFindCharacterFromSet(theString, Copy, v86, 0, &result))
      {
        v62 = v14;
        while (1)
        {
          if (result.location + 1 < v43)
          {
            v44 = CFStringGetCharacterAtIndex(theString, result.location + 1);
            if (CFCharacterSetIsCharacterMember(v41, v44))
            {
              IsCharacterMember = (NLGujaratiOrthographyChecker *)CFCharacterSetIsCharacterMember(v42, v44);
              if (!(_DWORD)IsCharacterMember)
                break;
            }
          }
          v87.location = result.length + result.location;
          v87.length = v43 - (result.length + result.location);
          if (!CFStringFindCharacterFromSet(theString, Copy, v87, 0, &result))
          {
            v46 = 1;
            v14 = v62;
            goto LABEL_113;
          }
        }
        v46 = 0;
        if (v18)
          *v18 = NLGujaratiOrthographyChecker::stringByCorrectingIllegalVowelLetters(IsCharacterMember, theString);
        v14 = CFSTR("illegal diacritic after vowel letter");
      }
      else
      {
        v46 = 1;
      }
LABEL_113:
      CFRelease(Copy);
      CFRelease(v41);
      CFRelease(v42);
      if (v46)
      {
        v47 = CFStringGetLength(theString);
        MutableCopy = CFStringCreateMutableCopy(0, v47, theString);
        v49 = CFStringFind(MutableCopy, CFSTR("‌"), 0);
        if (v49.length >= 1)
          CFStringReplace(MutableCopy, v49, &stru_1E45D0A48);
        v50 = CFStringCompare(MutableCopy, theString, 0);
        v51 = v50;
        if (v18 && v50)
          *v18 = MutableCopy;
        if (MutableCopy)
        {
          CFRelease(MutableCopy);
          if (v51)
          {
LABEL_121:
            v13 = 0;
            v14 = CFSTR("invalid: ZWNJ present");
            goto LABEL_133;
          }
        }
        else if (v50)
        {
          goto LABEL_121;
        }
        v52 = (const __CFString *)*((_QWORD *)this + 2);
        v88.length = CFStringGetLength(theString);
        v88.location = 0;
        if (!CFStringFindWithOptions(theString, v52, v88, 0, &result))
        {
          v91.length = CFStringGetLength(theString);
          v91.location = 0;
          CharacterFromSet = CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 12), v91, 0, &result);
          v13 = CharacterFromSet == 0;
          if (CharacterFromSet)
          {
            v60 = CFStringCreateWithSubstring(0, theString, result);
            v14 = CFStringCreateWithFormat(0, 0, CFSTR("invalid letter '%@'"), v60);
            CFRelease(v60);
          }
          goto LABEL_133;
        }
        do
        {
          if (result.location)
          {
            v89.length = result.location - 1;
            v89.location = 0;
            v53 = CFStringCreateWithSubstring(0, theString, v89);
            CFRelease(v53);
          }
          v54 = (const __CFString *)*((_QWORD *)this + 2);
          v90.length = CFStringGetLength(theString);
          v90.location = 0;
        }
        while (CFStringFindWithOptions(theString, v54, v90, 0, &result));
        if (v18)
        {
          v55 = CFStringGetLength(theString);
          v56 = CFStringCreateMutableCopy(0, v55, theString);
          v57 = CFStringFind(v56, (CFStringRef)*((_QWORD *)this + 2), 0);
          if (v57.length >= 1)
            CFStringReplace(v56, v57, &stru_1E45D0A48);
          v13 = 0;
          *v18 = v56;
          v14 = CFSTR("invalid sequence with ZWJ");
          goto LABEL_133;
        }
        v14 = CFSTR("invalid sequence with ZWJ");
      }
    }
LABEL_132:
    v13 = 0;
    goto LABEL_133;
  }
  v8 = 0;
  location = 0x7FFFFFFFFFFFFFFFLL;
  while (result.location)
  {
    if (location != 0x7FFFFFFFFFFFFFFFLL && result.location == v8 + location)
    {
      v75.location = location;
      v75.length = v8;
      v10 = CFStringCreateWithSubstring(0, theString, v75);
      v11 = CFStringCreateWithSubstring(0, theString, result);
      if ((CFStringCompare(v10, *((CFStringRef *)this + 1), 0)
         || CFStringCompare(v11, *((CFStringRef *)this + 1), 0) == kCFCompareEqualTo)
        && (CFStringCompare(v11, CFSTR("ં"), 0) || !NLGujaratiOrthographyChecker::isVowelSign(0, v10))
        && (CFStringCompare(v11, CFSTR("ઁ"), 0)
         || !NLGujaratiOrthographyChecker::canCandrabinduFollowVowelSign(0, v10)))
      {
        if (v10)
          CFRelease(v10);
        if (v11)
          CFRelease(v11);
        break;
      }
      if (v10)
        CFRelease(v10);
      if (v11)
        CFRelease(v11);
    }
    location = result.location;
    v8 = result.length;
    v76.location = result.length + result.location;
    v76.length = Length - (result.length + result.location);
    if (!CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 3), v76, 0, &result))
      goto LABEL_18;
  }
  v13 = 0;
  v14 = CFSTR("illegal diacritic placement");
LABEL_133:
  if (!a4 || v13)
  {
    if (!a4 && v14)
      CFRelease(v14);
  }
  else
  {
    *a4 = v14;
  }
  return v13;
}

void std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void NLAbstractTransMappings::NLAbstractTransMappings(NLAbstractTransMappings *this, const __CFDictionary *a2)
{
  *(_QWORD *)this = off_1E45CD918;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  NLAbstractTransMappings::loadMappings(this, a2);
}

void sub_1A183BC64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void NLAbstractTransMappings::loadMappings(NLAbstractTransMappings *this, const __CFDictionary *a2)
{
  const __CFLocale *LocaleFromOptions;
  const __CFString *Value;
  const __CFDictionary *v6;
  CFMutableStringRef Mutable;
  const __CFAllocator *v8;
  std::string *v9;
  const __CFString *v10;
  CFURLRef v11;
  NL::CFLogger *v12;
  uint64_t v13;
  std::string v14;

  LocaleFromOptions = NLTransliteratorUtils::getLocaleFromOptions(a2, a2);
  if (LocaleFromOptions)
  {
    Value = (const __CFString *)CFLocaleGetValue(LocaleFromOptions, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
    v6 = (const __CFDictionary *)CFDictionaryGetValue(a2, kNLTransliteratorSourceToTargetCharMappingsKey[0]);
    if (v6)
    {
      NLAbstractTransMappings::loadStaticMap(this, v6);
    }
    else
    {
      Mutable = CFStringCreateMutable(0, 0);
      CFStringAppend(Mutable, Value);
      CFStringAppend(Mutable, CFSTR("-Mappings.plist"));
      getPathForResource(Mutable, &v14);
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v14;
      else
        v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
      v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v9, 0x8000100u);
      v11 = CFURLCreateWithFileSystemPath(v8, v10, kCFURLPOSIXPathStyle, 0);
      v12 = (NL::CFLogger *)std::string::compare(&v14, "");
      if ((_DWORD)v12)
      {
        (**(void (***)(NLAbstractTransMappings *, CFURLRef))this)(this, v11);
      }
      else
      {
        v13 = NL::CFLogger::sharedInstance(v12);
        (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v13 + 16))(v13, 3, "Could not locate Roman-Hindi character mappings from resource bundle");
      }
      if (v10)
        CFRelease(v10);
      if (v11)
        CFRelease(v11);
      if (Mutable)
        CFRelease(Mutable);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1A183BE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NLAbstractTransMappings::loadStaticMap(NLAbstractTransMappings *this, CFDictionaryRef theDict)
{
  CFIndex Count;
  const void **v5;
  uint64_t v6;
  char *v7;
  const __CFString *v8;
  const __CFArray *Value;
  CFIndex v10;
  CFIndex i;
  const __CFArray *ValueAtIndex;
  const __CFString *v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  std::string **v16;
  void *__p[2];
  char v18;
  double v19;
  unsigned int valuePtr;
  void *v21[2];
  char v22;
  std::string *v23;
  __int128 *v24;
  uint64_t v25;
  void *v26[2];
  char v27;

  Count = CFDictionaryGetCount(theDict);
  v5 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  CFDictionaryGetKeysAndValues(theDict, v5, 0);
  if (Count >= 1)
  {
    v6 = 0;
    v7 = (char *)this + 128;
    do
    {
      v8 = (const __CFString *)v5[v6];
      getUTF8StringFromCFString(v8, v26);
      Value = (const __CFArray *)CFDictionaryGetValue(theDict, v8);
      v10 = CFArrayGetCount(Value);
      v23 = 0;
      v24 = 0;
      v25 = 0;
      if (v10 >= 1)
      {
        for (i = 0; i != v10; ++i)
        {
          ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(Value, i);
          v13 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
          getUTF8StringFromCFString(v13, v21);
          v14 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 1);
          valuePtr = 0;
          CFNumberGetValue(v14, kCFNumberSInt8Type, &valuePtr);
          v15 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 2);
          v19 = 0.0;
          CFNumberGetValue(v15, kCFNumberDoubleType, &v19);
          NLExtendedString::NLExtendedString(__p, v21, valuePtr, v19);
          std::vector<NLExtendedString>::push_back[abi:ne180100]((uint64_t *)&v23, (__int128 *)__p);
          if (v18 < 0)
            operator delete(__p[0]);
          if (v22 < 0)
            operator delete(v21[0]);
        }
      }
      v21[0] = v26;
      v16 = (std::string **)(std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7, (unsigned __int8 *)v26, (uint64_t)&std::piecewise_construct, (__int128 **)v21)+ 40);
      if (v16 != &v23)
        std::vector<NLExtendedString>::__assign_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>((uint64_t)v16, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 4));
      __p[0] = &v23;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v27 < 0)
        operator delete(v26[0]);
      ++v6;
    }
    while (v6 != Count);
  }
  if (v5)
    free(v5);
}

void sub_1A183C020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 81) < 0)
    operator delete(*(void **)(v27 - 104));
  _Unwind_Resume(exception_object);
}

CFPropertyListRef createMyPropertyListFromFile(CFURLRef url)
{
  const __CFAllocator *v1;
  CFPropertyListRef v2;
  SInt32 errorCode;
  CFDataRef resourceData;
  CFStringRef errorString;

  resourceData = 0;
  errorString = 0;
  errorCode = 0;
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CFURLCreateDataAndPropertiesFromResource((CFAllocatorRef)*MEMORY[0x1E0C9AE00], url, &resourceData, 0, 0, &errorCode);
  v2 = CFPropertyListCreateFromXMLData(v1, resourceData, 0, &errorString);
  if (resourceData)
    CFRelease(resourceData);
  if (errorString)
    CFRelease(errorString);
  return v2;
}

uint64_t std::vector<NLExtendedString>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v19[4] = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>(result, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[48 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16[40] = *((_BYTE *)a2 + 40);
    *(_OWORD *)(v16 + 24) = v18;
    v19[2] = v16 + 48;
    std::vector<NLExtendedString>::__swap_out_circular_buffer(a1, v19);
    v10 = a1[1];
    result = std::__split_buffer<NLExtendedString>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_BYTE *)(v7 + 40) = *((_BYTE *)a2 + 40);
    *(_OWORD *)(v7 + 24) = v9;
    v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return result;
}

void sub_1A183C26C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<NLExtendedString>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void NLAbstractTransMappings::loadMappingsFromPlist(NLAbstractTransMappings *this, CFURLRef url)
{
  const __CFDictionary *MyPropertyListFromFile;
  CFIndex Count;
  const void **v5;
  uint64_t v6;
  char *v7;
  const __CFString *v8;
  const __CFArray *Value;
  CFIndex v10;
  CFIndex i;
  const __CFArray *ValueAtIndex;
  const __CFString *v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  std::string **v16;
  void *__p[2];
  char v18;
  double v19;
  unsigned int valuePtr;
  void *v21[2];
  char v22;
  std::string *v23;
  __int128 *v24;
  uint64_t v25;
  void *v26[2];
  char v27;

  MyPropertyListFromFile = (const __CFDictionary *)createMyPropertyListFromFile(url);
  Count = CFDictionaryGetCount(MyPropertyListFromFile);
  v5 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  CFDictionaryGetKeysAndValues(MyPropertyListFromFile, v5, 0);
  if (Count >= 1)
  {
    v6 = 0;
    v7 = (char *)this + 128;
    do
    {
      v8 = (const __CFString *)v5[v6];
      getUTF8StringFromCFString(v8, v26);
      Value = (const __CFArray *)CFDictionaryGetValue(MyPropertyListFromFile, v8);
      v10 = CFArrayGetCount(Value);
      v23 = 0;
      v24 = 0;
      v25 = 0;
      if (v10 >= 1)
      {
        for (i = 0; i != v10; ++i)
        {
          ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(Value, i);
          v13 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
          getUTF8StringFromCFString(v13, v21);
          v14 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 1);
          valuePtr = 0;
          CFNumberGetValue(v14, kCFNumberSInt8Type, &valuePtr);
          v15 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 2);
          v19 = 0.0;
          CFNumberGetValue(v15, kCFNumberDoubleType, &v19);
          NLExtendedString::NLExtendedString(__p, v21, valuePtr, v19);
          std::vector<NLExtendedString>::push_back[abi:ne180100]((uint64_t *)&v23, (__int128 *)__p);
          if (v18 < 0)
            operator delete(__p[0]);
          if (v22 < 0)
            operator delete(v21[0]);
        }
      }
      v21[0] = v26;
      v16 = (std::string **)(std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7, (unsigned __int8 *)v26, (uint64_t)&std::piecewise_construct, (__int128 **)v21)+ 40);
      if (v16 != &v23)
        std::vector<NLExtendedString>::__assign_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>((uint64_t)v16, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 4));
      __p[0] = &v23;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v27 < 0)
        operator delete(v26[0]);
      ++v6;
    }
    while (v6 != Count);
  }
  if (MyPropertyListFromFile)
    CFRelease(MyPropertyListFromFile);
  if (v5)
    free(v5);
}

void sub_1A183C484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 81) < 0)
    operator delete(*(void **)(v27 - 104));
  _Unwind_Resume(exception_object);
}

void NLAbstractTransMappings::addDynamicMapping(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  std::string *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  const void *v16;
  unint64_t v17;
  const void *v18;
  size_t v19;
  int Pos;
  __int128 *v22;
  std::string **v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string *v27;
  unint64_t v28;
  unsigned __int8 *v29;
  std::string **v30;

  v5 = a1 + 8;
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>((_QWORD *)(a1 + 8), a2);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  if (!v6)
    goto LABEL_33;
  if (&v26 == (std::string **)(v6 + 40))
  {
    v7 = 0;
LABEL_31:
    if ((unint64_t)v7 < v28)
    {
      std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)&v26, (__int128 *)a3);
      v22 = (__int128 *)&v7[2];
LABEL_34:
      v27 = (std::string *)v22;
      goto LABEL_35;
    }
LABEL_33:
    v22 = (__int128 *)std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>((uint64_t *)&v26, (__int128 *)a3);
    goto LABEL_34;
  }
  std::vector<NLExtendedString>::__assign_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>((uint64_t)&v26, *((std::string **)v6 + 5), *((__int128 **)v6 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 4));
  v7 = v26;
  if (v27 == v26)
    goto LABEL_31;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)&v7[v8]);
    v11 = v10;
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)a3);
    v13 = *(char *)(v12 + 23);
    v14 = *(char *)(v11 + 23);
    v15 = v14 >= 0 ? *(unsigned __int8 *)(v11 + 23) : *(_QWORD *)(v11 + 8);
    v16 = v14 >= 0 ? (const void *)v11 : *(const void **)v11;
    v17 = v13 >= 0 ? *(unsigned __int8 *)(v12 + 23) : *(_QWORD *)(v12 + 8);
    v18 = v13 >= 0 ? (const void *)v12 : *(const void **)v12;
    v19 = v17 >= v15 ? v15 : v17;
    if (!memcmp(v16, v18, v19) && v17 == v15)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 4) <= v9)
        std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
      Pos = NLExtendedString::getPos((NLExtendedString *)&v26[v8]);
      if (Pos == NLExtendedString::getPos((NLExtendedString *)a3))
        break;
    }
    ++v9;
    v7 = v26;
    v8 += 2;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 4) <= v9)
    {
      v7 = v27;
      goto LABEL_31;
    }
  }
  v24 = &v26[v8];
  std::string::operator=(&v26[v8], (const std::string *)a3);
  v25 = *(_OWORD *)(a3 + 24);
  v24[1].__r_.__value_.__s.__data_[16] = *(_BYTE *)(a3 + 40);
  *(_OWORD *)&v24[1].__r_.__value_.__l.__data_ = v25;
  v22 = (__int128 *)v27;
LABEL_35:
  if (v22 != (__int128 *)v26)
  {
    v29 = a2;
    v23 = (std::string **)(std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v29)+ 40);
    if (v23 != &v26)
      std::vector<NLExtendedString>::__assign_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>((uint64_t)v23, v26, (__int128 *)v27, 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 4));
  }
  v30 = &v26;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
}

void sub_1A183C74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void NLAbstractTransMappings::removeAllDynamicMappings(NLAbstractTransMappings *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8);
}

std::string *NLAbstractTransMappings::findMatches@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  std::string *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a1 + 16, a2);
  if (result)
    result = std::vector<NLExtendedString>::__insert_with_size[abi:ne180100]<std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>((uint64_t *)a3, *(std::string **)(a3 + 8), (std::string *)result[1].__r_.__value_.__r.__words[2], (__int128 *)result[2].__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(result[2].__r_.__value_.__r.__words[0] - result[1].__r_.__value_.__r.__words[2]) >> 4));
  if (a1[4])
  {
    result = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a1 + 1, a2);
    if (result)
      return std::vector<NLExtendedString>::__insert_with_size[abi:ne180100]<std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>((uint64_t *)a3, *(std::string **)(a3 + 8), (std::string *)result[1].__r_.__value_.__r.__words[2], (__int128 *)result[2].__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(result[2].__r_.__value_.__r.__words[0] - result[1].__r_.__value_.__r.__words[2]) >> 4));
  }
  return result;
}

void sub_1A183C824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<NLExtendedString>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<NLExtendedString>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<NLExtendedString>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<NLExtendedString>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  a1[1] = v2;
}

uint64_t std::vector<NLExtendedString>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLExtendedString>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLExtendedString>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_BYTE *)(v9 - 8) = *(_BYTE *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,std::reverse_iterator<NLExtendedString*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,std::reverse_iterator<NLExtendedString*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,std::reverse_iterator<NLExtendedString*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,std::reverse_iterator<NLExtendedString*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 48;
  }
}

uint64_t std::__split_buffer<NLExtendedString>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<NLExtendedString>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<NLExtendedString>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 6;
      *(_QWORD *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A183CF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1A183CFC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<NLExtendedString>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::vector<NLExtendedString>::__assign_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<NLExtendedString>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0x555555555555555)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    std::vector<NLExtendedString>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NLExtendedString>,NLExtendedString*,NLExtendedString*,NLExtendedString*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,NLExtendedString *,NLExtendedString *,NLExtendedString *,0>(__str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NLExtendedString>,NLExtendedString*,NLExtendedString*,NLExtendedString*>(v8, (__int128 *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,NLExtendedString *,NLExtendedString *,NLExtendedString *,0>(__str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 25) < 0)
        operator delete(*(void **)(v16 - 48));
      v16 -= 48;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1A183D900(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1A183D908(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<NLExtendedString>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<NLExtendedString>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<NLExtendedString>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NLExtendedString>,NLExtendedString*,NLExtendedString*,NLExtendedString*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  _QWORD v11[3];
  char v12;
  std::string *v13;
  std::string *v14;

  v4 = this;
  v13 = this;
  v14 = this;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v14;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      v9 = *(__int128 *)((char *)v6 + 24);
      v4[1].__r_.__value_.__s.__data_[16] = *((_BYTE *)v6 + 40);
      *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = v9;
      v6 += 3;
      v4 = v8 + 2;
      v14 = v8 + 2;
    }
    while (v6 != a3);
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,NLExtendedString*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1A183DA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,NLExtendedString*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,NLExtendedString*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,NLExtendedString*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,NLExtendedString*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 25) < 0)
      operator delete(*(void **)(v1 - 48));
    v1 -= 48;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,NLExtendedString *,NLExtendedString *,NLExtendedString *,0>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v4;
  std::string *v5;
  std::string::value_type v6;

  v4 = __str;
  if (__str == a2)
    return __str;
  v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    v6 = v4[1].__r_.__value_.__s.__data_[16];
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v4[1].__r_.__value_.__l.__data_;
    this[1].__r_.__value_.__s.__data_[16] = v6;
    this += 2;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

__n128 std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)((char *)a2 + 24);
  *(_BYTE *)(v4 + 40) = *((_BYTE *)a2 + 40);
  *(__n128 *)(v4 + 24) = result;
  *(_QWORD *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1A183DCBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[2];
  std::string *v18;
  char *v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v20 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[48 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v18 = v11;
  v19 = &v10[48 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v18;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v13 = &v10[48 * v4];
  v14 = *(__int128 *)((char *)a2 + 24);
  v13[40] = *((_BYTE *)a2 + 40);
  *(_OWORD *)(v13 + 24) = v14;
  v18 = v11 + 2;
  std::vector<NLExtendedString>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<NLExtendedString>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1A183DDE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<NLExtendedString>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E45CC1B8, MEMORY[0x1E0DE42E0]);
}

void sub_1A183DE4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

std::string *std::vector<NLExtendedString>::__insert_with_size[abi:ne180100]<std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>(uint64_t *a1, std::string *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  std::string *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 4)) >= a5)
      {
        v21 = (__int128 *)&a3[2 * a5];
      }
      else
      {
        v21 = (__int128 *)((char *)a3 + 16 * ((uint64_t)(v12 - (_QWORD)a2) >> 4));
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NLExtendedString>,NLExtendedString*,NLExtendedString*,NLExtendedString*>(v9, v21, a4, *(std::string **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<NLExtendedString>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,NLExtendedString *,NLExtendedString *,NLExtendedString *,0>(a3, (std::string *)v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 4);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x2AAAAAAAAAAAAAALL)
        v18 = 0x555555555555555;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[48 * v15];
      v25 = v24;
      v26 = &v19[48 * v18];
      std::__split_buffer<NLExtendedString>::__construct_at_end_with_size<std::__wrap_iter<NLExtendedString*>>((uint64_t)&v23, (__int128 *)a3, a5);
      v5 = (std::string *)std::vector<NLExtendedString>::__swap_out_circular_buffer((uint64_t)a1, &v23, (__int128 *)v5);
      std::__split_buffer<NLExtendedString>::~__split_buffer((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1A183E078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<NLExtendedString>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  char v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v8 = v10;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v11 = *(_OWORD *)(v9 + 24);
      *(_BYTE *)(v8 + 40) = *(_BYTE *)(v9 + 40);
      *(_OWORD *)(v8 + 24) = v11;
      v8 += 48;
      v9 += 48;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<NLExtendedString *,NLExtendedString *,NLExtendedString *>((uint64_t)&v13, a2, v7, v6);
}

void std::__split_buffer<NLExtendedString>::__construct_at_end_with_size<std::__wrap_iter<NLExtendedString*>>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (a3)
  {
    v6 = v4 + 48 * a3;
    v7 = 48 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v8 = *a2;
        *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v4 = v8;
      }
      v9 = *(__int128 *)((char *)a2 + 24);
      *(_BYTE *)(v4 + 40) = *((_BYTE *)a2 + 40);
      *(_OWORD *)(v4 + 24) = v9;
      v4 += 48;
      a2 += 3;
      v7 -= 48;
    }
    while (v7);
    v4 = v6;
  }
  *(_QWORD *)(a1 + 16) = v4;
}

void sub_1A183E1B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<NLExtendedString>::__swap_out_circular_buffer(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLExtendedString>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>>(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLExtendedString>,NLExtendedString*,NLExtendedString*,NLExtendedString*>(v7, a3, *(__int128 **)(a1 + 8), a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<NLExtendedString *,NLExtendedString *,NLExtendedString *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = (void **)(a4 + v7 - 48);
      if (*(char *)(a4 + v7 - 25) < 0)
        operator delete(*v9);
      v10 = (__int128 *)(a3 + v7 - 48);
      v11 = *v10;
      *(_QWORD *)(a4 + v7 - 32) = *(_QWORD *)(a3 + v7 - 32);
      *(_OWORD *)v9 = v11;
      *(_BYTE *)(a3 + v7 - 25) = 0;
      *(_BYTE *)v10 = 0;
      v12 = *(_OWORD *)(a3 + v7 - 24);
      *(_BYTE *)(v8 - 8) = *(_BYTE *)(a3 + v7 - 8);
      *(_OWORD *)(v8 - 24) = v12;
      v7 -= 48;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLExtendedString>,NLExtendedString*,NLExtendedString*,NLExtendedString*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v11 = a4;
  v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_BYTE *)(v4 + 40) = *((_BYTE *)a2 + 40);
      *(_OWORD *)(v4 + 24) = v6;
      v4 += 48;
      a2 += 3;
    }
    while (a2 != a3);
    v11 = v4;
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,NLExtendedString*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

double NLTransliterationCandidate::getTotalScore(NLTransliterationCandidate *this)
{
  if (NLTransliterationCandidate::getTotalScore(void)const::once != -1)
    dispatch_once(&NLTransliterationCandidate::getTotalScore(void)const::once, &__block_literal_global_0);
  return *((double *)this + 8)
       + *(double *)&NLTransliterationCandidate::getTotalScore(void)const::lmDistributionModulatingFactor
       * *((double *)this + 7);
}

void ___ZNK26NLTransliterationCandidate13getTotalScoreEv_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  double v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  uint8_t buf[4];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.NLP"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "URLForResource:withExtension:", CFSTR("CandidateRankingParameters"), CFSTR("plist"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = 0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfURL:error:", v1, &v10);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v10;
  if (v2)
  {
    objc_msgSend(v2, "objectForKey:", CFSTR("LMDistributionModulatingFactor"));
    v4 = objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v5 = v4;
      -[NSObject doubleValue](v5, "doubleValue");
      if (v6 >= 0.0 && (-[NSObject doubleValue](v5, "doubleValue"), v7 <= 1.0))
      {
        -[NSObject doubleValue](v5, "doubleValue");
        NLTransliterationCandidate::getTotalScore(void)const::lmDistributionModulatingFactor = v9;
        _nlpDefaultLog();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v12 = NLTransliterationCandidate::getTotalScore(void)const::lmDistributionModulatingFactor;
          _os_log_impl(&dword_1A1802000, v8, OS_LOG_TYPE_INFO, "Using LM distribution modulating factor value of: %f", buf, 0xCu);
        }
      }
      else
      {
        _nlpDefaultLog();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          ___ZNK26NLTransliterationCandidate13getTotalScoreEv_block_invoke_cold_2();
      }

    }
    else
    {
      _nlpDefaultLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        ___ZNK26NLTransliterationCandidate13getTotalScoreEv_block_invoke_cold_3();
    }

  }
  else
  {
    _nlpDefaultLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      ___ZNK26NLTransliterationCandidate13getTotalScoreEv_block_invoke_cold_1((uint64_t)v1, (uint64_t)v3, v4);
  }

}

void sub_1A183E618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t NLTransliterationCandidate::copyMetadata(NLTransliterationCandidate *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v8[0] = kNLTransliteratorCandidateMetadataLMScoreKey[0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)this + 7));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v2;
  v8[1] = kNLTransliteratorCandidateMetadataSeq2SeqScoreKey[0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)this + 8));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = v3;
  v8[2] = kNLTransliteratorCandidateMetadataTotalScoreKey;
  v4 = (void *)MEMORY[0x1E0CB37E8];
  if (NLTransliterationCandidate::getTotalScore(void)const::once != -1)
    dispatch_once(&NLTransliterationCandidate::getTotalScore(void)const::once, &__block_literal_global_0);
  objc_msgSend(v4, "numberWithDouble:", *((double *)this + 8)+ *(double *)&NLTransliterationCandidate::getTotalScore(void)const::lmDistributionModulatingFactor* *((double *)this + 7));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[2] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 3);
  v6 = objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1A183E7B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_1A183E9C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

BOOL NLTransliteratorUtils::checkMetaFlags(NLTransliteratorUtils *this, NLTransliterationCandidate *a2)
{
  char v2;

  v2 = (char)a2;
  if ((a2 & 0x82) == 0x80)
  {
    NLTransliterationCandidate::setLMScore((uint64_t)this, -INFINITY);
    NLTransliterationCandidate::setIsExtensionCandidate((uint64_t)this, 1);
  }
  return (v2 & 2) == 0;
}

BOOL NLTransliteratorUtils::greater_than_key(NLTransliteratorUtils *this, const NLTransliterationCandidate *a2, const NLTransliterationCandidate *a3)
{
  double LMScore;
  double v6;
  double v7;
  double SequenceScore;
  double v10;
  int Type;
  int v12;
  _BOOL4 v13;

  LMScore = NLTransliterationCandidate::getLMScore(this);
  v6 = NLTransliterationCandidate::getLMScore(a2);
  v7 = fabs(v6);
  if (fabs(LMScore) == INFINITY && v7 == INFINITY)
  {
    SequenceScore = NLTransliterationCandidate::getSequenceScore(this);
    v10 = NLTransliterationCandidate::getSequenceScore(a2);
  }
  else
  {
    SequenceScore = NLTransliterationCandidate::getSequenceScore(this) * 0.65 + LMScore * 0.35;
    v10 = NLTransliterationCandidate::getSequenceScore(a2) * 0.65 + v6 * 0.35;
  }
  Type = NLTransliterationCandidate::getType(this);
  v12 = NLTransliterationCandidate::getType(a2);
  v13 = Type == v12;
  if (SequenceScore <= v10)
    v13 = 0;
  return Type < v12 || v13;
}

BOOL NLTransliteratorUtils::greater_than_key_oov(NLTransliteratorUtils *this, const NLTransliterationCandidate *a2, const NLTransliterationCandidate *a3)
{
  double Score;
  double v6;
  double v7;

  Score = NLMessageIntentCandidate::getScore(this);
  v6 = NLTransliterationCandidate::getSequenceScore(this) * 0.65 + Score * 0.35;
  v7 = NLMessageIntentCandidate::getScore(a2);
  return v6 > NLTransliterationCandidate::getSequenceScore(a2) * 0.65 + v7 * 0.35;
}

uint64_t NLTransliteratorUtils::separateByNonAlphanumericDelimeter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v8;
  uint64_t i;
  int8x16_t v10;
  unint64_t v11;
  __int128 v12;
  std::string *p_p;
  std::string::size_type v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  std::string __p;
  std::string v24;
  std::basic_string<char32_t> v25;
  std::basic_string<char32_t>::value_type v26;
  _OWORD v27[3];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_OWORD *)(v4 + 8) = xmmword_1A18D3AF0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &unk_1E45CEA28;
  memset(v27, 0, sizeof(v27));
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (int *)a1;
  else
    v6 = *(int **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v28 = v4;
  v37 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v27, v6, (int *)((char *)v6 + v5), &v25);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v24, "");
  size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v25;
  else
    v8 = (std::basic_string<char32_t> *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v25.__r_.__value_.__l.__size_;
  if (size)
  {
    for (i = 4 * size; i; i -= 4)
    {
      v26 = v8->__r_.__value_.__s.__data_[0];
      std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes((uint64_t)v27, (char *)&v26, (char *)v27, &__p);
      if (!NLCommons::isNonAlphaNumericStr((char *)&__p, v10))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v14 = __p.__r_.__value_.__l.__size_;
        std::string::append(&v24, (const std::string::value_type *)p_p, v14);
        goto LABEL_38;
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v24.__r_.__value_.__l.__size_)
        {
LABEL_29:
          v16 = a2[1];
          if (v16 >= a2[2])
          {
            v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&__p);
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)a2[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else
            {
              v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)(v16 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)v16 = v17;
            }
            v18 = v16 + 24;
            a2[1] = v16 + 24;
          }
          a2[1] = v18;
          MEMORY[0x1A1B0DE04](&v24, "");
          goto LABEL_38;
        }
        v11 = a2[1];
        if (v11 >= a2[2])
        {
LABEL_32:
          v15 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&v24);
          goto LABEL_33;
        }
        std::string::__init_copy_ctor_external((std::string *)a2[1], v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      }
      else
      {
        if (!*((_BYTE *)&v24.__r_.__value_.__s + 23))
          goto LABEL_29;
        v11 = a2[1];
        if (v11 >= a2[2])
          goto LABEL_32;
        v12 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
        *(_QWORD *)(v11 + 16) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
        *(_OWORD *)v11 = v12;
      }
      v15 = v11 + 24;
      a2[1] = v11 + 24;
LABEL_33:
      a2[1] = v15;
      std::string::operator=(&v24, &__p);
LABEL_38:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 = (std::basic_string<char32_t> *)((char *)v8 + 4);
    }
  }
  if (std::string::compare(&v24, ""))
  {
    v19 = a2[1];
    if (v19 >= a2[2])
    {
      v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&v24);
    }
    else
    {
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2[1], v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      }
      else
      {
        v20 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
        *(_QWORD *)(v19 + 16) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
        *(_OWORD *)v19 = v20;
      }
      v21 = v19 + 24;
      a2[1] = v19 + 24;
    }
    a2[1] = v21;
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v27);
}

void sub_1A183EED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  _QWORD *v28;
  uint64_t v29;

  v28[1] = v29;
  if (a20 < 0)
    operator delete(__p);
  __p = v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a26 < 0)
    operator delete(a21);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t NLTransliteratorUtils::getMaximumLayerSize(uint64_t a1)
{
  unint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0x10)
    v2 = 3;
  else
    v2 = 8;
  if (v1 >= 0xB)
    return v2;
  else
    return 10;
}

uint64_t NLTransliteratorUtils::findExistingCandidate(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *TransliteratedWord;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  size_t v12;

  v2 = *a1;
  if (a1[1] == *a1)
    return 0;
  v5 = 0;
  while (1)
  {
    TransliteratedWord = (_QWORD *)NLTransliterationCandidate::getTransliteratedWord(*(NLTransliterationCandidate **)(v2 + 8 * v5));
    v7 = *(char *)(a2 + 23);
    v8 = *((char *)TransliteratedWord + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)TransliteratedWord + 23);
    else
      v9 = TransliteratedWord[1];
    if (v8 < 0)
      TransliteratedWord = (_QWORD *)*TransliteratedWord;
    v10 = v7 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
    v11 = v7 >= 0 ? (const void *)a2 : *(const void **)a2;
    v12 = v10 >= v9 ? v9 : v10;
    if (!memcmp(TransliteratedWord, v11, v12) && v10 == v9)
      break;
    ++v5;
    v2 = *a1;
    if (v5 >= (a1[1] - *a1) >> 3)
      return 0;
  }
  if (v5 >= (a1[1] - *a1) >> 3)
    std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)(*a1 + 8 * v5);
}

CFLocaleRef NLTransliteratorUtils::getLocaleFromOptions(NLTransliteratorUtils *this, const __CFDictionary *a2)
{
  const __CFString *Value;
  const __CFString *v3;
  CFTypeID v4;
  void (*v6)(void);
  CFTypeID v7;
  NL::CFLogger *TypeID;

  if (this)
  {
    Value = (const __CFString *)CFDictionaryGetValue(this, kNLTransliteratorTargetLocaleKey[0]);
    if (Value)
    {
      v3 = Value;
      v4 = CFGetTypeID(Value);
      if (v4 == CFStringGetTypeID())
        return CFLocaleCreate(0, v3);
      v7 = CFGetTypeID(v3);
      TypeID = (NL::CFLogger *)CFLocaleGetTypeID();
      if ((NL::CFLogger *)v7 == TypeID)
        return (CFLocaleRef)CFRetain(v3);
      v6 = *(void (**)(void))(*(_QWORD *)NL::CFLogger::sharedInstance(TypeID) + 16);
    }
    else
    {
      v6 = *(void (**)(void))(*(_QWORD *)NL::CFLogger::sharedInstance(0) + 16);
    }
    v6();
  }
  return 0;
}

void std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8[abi:ne180100]()
{
  MEMORY[0x1A1B0DFCC]();
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, std::basic_string<char32_t> *a4@<X8>)
{
  int *v7;
  std::basic_string<char32_t>::size_type v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  std::basic_string<char32_t>::size_type size;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  std::basic_string<char32_t> *v19;
  uint64_t v20;
  std::basic_string<char32_t>::size_type v21;
  char v22;
  std::basic_string<char32_t> *v23;
  const std::basic_string<char32_t>::value_type **v24;
  char *v25;
  std::basic_string<char32_t>::size_type v26;
  std::basic_string<char32_t> *v27;
  uint64_t v28;
  int *v29;
  _OWORD v30[8];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 184) = 0;
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_23;
  v7 = a2;
  std::basic_string<char32_t>::basic_string[abi:ne180100](a4, 2 * ((char *)a3 - (char *)a2), 0);
  if (a3 != v7)
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = 4;
    else
      v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::basic_string<char32_t>::resize(a4, v8, 0);
    v9 = *(_OWORD *)(a1 + 136);
    v30[4] = *(_OWORD *)(a1 + 120);
    v30[5] = v9;
    v10 = *(_OWORD *)(a1 + 168);
    v30[6] = *(_OWORD *)(a1 + 152);
    v30[7] = v10;
    v11 = *(_OWORD *)(a1 + 72);
    v30[0] = *(_OWORD *)(a1 + 56);
    v30[1] = v11;
    v12 = *(__n128 *)(a1 + 88);
    v13 = *(_OWORD *)(a1 + 104);
    size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v15 = (char *)a4;
    else
      v15 = (char *)a4->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = a4->__r_.__value_.__l.__size_;
    v16 = &v15[4 * size];
    v30[2] = *(_OWORD *)(a1 + 88);
    v30[3] = v13;
    do
    {
      v17 = (*(uint64_t (**)(_QWORD, _OWORD *, int *, int *, int **, char *, char *, uint64_t *, __n128))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v30, v7, a3, &v29, v15, v16, &v28, v12);
      v18 = v29 == v7;
      *(_QWORD *)(a1 + 184) += (char *)v29 - (char *)v7;
      if (v18)
        goto LABEL_34;
      if (v17 != 1)
      {
        if (v17)
        {
          if (v17 != 3)
          {
LABEL_34:
            if ((*((_BYTE *)&a4->__r_.__value_.__s + 23) & 0x80) != 0)
              goto LABEL_35;
            goto LABEL_23;
          }
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = (char *)a4;
          else
            v25 = (char *)a4->__r_.__value_.__r.__words[0];
          std::basic_string<char32_t>::resize(a4, (v15 - v25) >> 2, 0);
          std::basic_string<char32_t>::append<char32_t const*,0>(a4, v7, a3);
        }
        else
        {
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = a4;
          else
            v27 = (std::basic_string<char32_t> *)a4->__r_.__value_.__r.__words[0];
          std::basic_string<char32_t>::resize(a4, (v28 - (uint64_t)v27) >> 2, 0);
        }
        return;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = a4;
      else
        v19 = (std::basic_string<char32_t> *)a4->__r_.__value_.__r.__words[0];
      v20 = v28 - (_QWORD)v19;
      std::basic_string<char32_t>::resize(a4, (v28 - (uint64_t)v19) >> 1, 0);
      v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      v22 = v21;
      v23 = (std::basic_string<char32_t> *)a4->__r_.__value_.__r.__words[0];
      if ((v21 & 0x80u) == 0)
        v23 = a4;
      v15 = (char *)v23 + v20;
      if ((v21 & 0x80u) != 0)
        v21 = a4->__r_.__value_.__l.__size_;
      v16 = (char *)v23 + 4 * v21;
      v7 = v29;
    }
    while (v29 < a3);
    if ((v22 & 0x80) == 0)
      goto LABEL_23;
LABEL_35:
    operator delete(a4->__r_.__value_.__l.__data_);
LABEL_23:
    v24 = (const std::basic_string<char32_t>::value_type **)(a1 + 24);
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
      if (*(_BYTE *)(a1 + 47))
      {
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v24;
        a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
        return;
      }
LABEL_41:
      std::__throw_range_error[abi:ne180100]("wstring_convert: from_bytes error");
    }
    v26 = *(_QWORD *)(a1 + 32);
    if (!v26)
      goto LABEL_41;
    std::basic_string<char32_t>::__init_copy_ctor_external(a4, *v24, v26);
  }
}

void sub_1A183F408(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::basic_string<char32_t> *std::basic_string<char32_t>::append<char32_t const*,0>(std::basic_string<char32_t> *this, int *a2, int *a3)
{
  int *v4;
  unint64_t v6;
  uint64_t v7;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t>::size_type v9;
  std::basic_string<char32_t> *v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  std::basic_string<char32_t>::size_type v14;
  std::basic_string<char32_t> *v15;
  int *v16;
  int v17;
  std::basic_string<char32_t>::size_type v18;
  void *__p[2];
  unsigned __int8 v21;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = (char *)a3 - (char *)a2;
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    v7 = (char *)a3 - (char *)a2;
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 4;
    v10 = this;
  }
  v12 = v7 >> 2;
  if (v10 > (std::basic_string<char32_t> *)v4 || (char *)v10->__r_.__value_.__r.__words + 4 * size + 4 <= (char *)v4)
  {
    if (v9 - size < v12)
    {
      std::basic_string<char32_t>::__grow_by(this, v9, size - v9 + v12, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v15 = this;
    if ((v6 & 0x80) != 0)
      v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
    v16 = (int *)((char *)v15 + 4 * size);
    while (v4 != a3)
    {
      v17 = *v4++;
      *v16++ = v17;
    }
    *v16 = 0;
    v18 = v12 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v18;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v18 & 0x7F;
  }
  else
  {
    std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(__p, v4, a3, v12);
    if ((v21 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v14 = v21;
    else
      v14 = (std::basic_string<char32_t>::size_type)__p[1];
    std::basic_string<char32_t>::append(this, (const std::basic_string<char32_t>::value_type *)v13, v14);
    if ((char)v21 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_1A183F594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_range_error[abi:ne180100](const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::range_error::range_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E45CC1A8, MEMORY[0x1E0DE42B0]);
}

void sub_1A183F5EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::basic_string<char32_t>::basic_string[abi:ne180100](_QWORD *a1, unint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1;
  if (a2 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 >= 5)
  {
    v6 = (a2 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a2 | 1) != 5)
      v6 = a2 | 1;
    a1 = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)a1, v6 + 1);
    v3[1] = a2;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = a1;
  }
  else
  {
    *((_BYTE *)a1 + 23) = a2;
    if (!a2)
      goto LABEL_10;
  }
  v8 = 0;
  do
    *((_DWORD *)a1 + v8++) = a3;
  while (a2 != v8);
LABEL_10:
  *((_DWORD *)a1 + a2) = 0;
  return v3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::basic_string<char32_t>::resize(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __n, std::basic_string<char32_t>::value_type __c)
{
  std::basic_string<char32_t>::size_type size;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    if (size >= __n)
    {
      this->__r_.__value_.__l.__size_ = __n;
      this = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
LABEL_5:
    std::basic_string<char32_t>::append(this, __n - size, __c);
    return;
  }
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size < __n)
    goto LABEL_5;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_7:
  this->__r_.__value_.__s.__data_[__n] = 0;
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::append(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __n, std::basic_string<char32_t>::value_type __c)
{
  unint64_t v6;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t>::size_type v8;
  unint64_t v9;
  std::basic_string<char32_t> *v10;
  std::basic_string<char32_t>::value_type *v11;
  std::basic_string<char32_t>::size_type v12;
  std::basic_string<char32_t>::size_type v13;

  if (__n)
  {
    LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v6 & 0x80000000) != 0)
    {
      size = this->__r_.__value_.__l.__size_;
      v9 = this->__r_.__value_.__r.__words[2];
      v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v6 = HIBYTE(v9);
    }
    else
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v8 = 4;
    }
    if (v8 - size < __n)
    {
      std::basic_string<char32_t>::__grow_by(this, v8, __n - v8 + size, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v10 = this;
    if ((v6 & 0x80) != 0)
      v10 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
    v11 = (std::basic_string<char32_t>::value_type *)((char *)v10 + 4 * size);
    v12 = __n;
    do
    {
      *v11++ = __c;
      --v12;
    }
    while (v12);
    v13 = size + __n;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v13;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v13 & 0x7F;
    v10->__r_.__value_.__s.__data_[v13] = 0;
  }
  return this;
}

void std::basic_string<char32_t>::__grow_by(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __old_cap, std::basic_string<char32_t>::size_type __delta_cap, std::basic_string<char32_t>::size_type __old_sz, std::basic_string<char32_t>::size_type __n_copy, std::basic_string<char32_t>::size_type __n_del, std::basic_string<char32_t>::size_type __n_add)
{
  std::basic_string<char32_t> *v13;
  std::basic_string<char32_t>::size_type v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  std::basic_string<char32_t>::size_type v19;
  uint64_t v20;
  uint64_t v21;

  if (0x3FFFFFFFFFFFFFF7 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v13 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
  v14 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v14 = 2 * __old_cap;
  v15 = (v14 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v14 | 1) != 5)
    v15 = v14 | 1;
  if (v14 >= 5)
    v16 = v15 + 1;
  else
    v16 = 5;
  if (__old_cap <= 0x1FFFFFFFFFFFFFF2)
    v17 = v16;
  else
    v17 = 0x3FFFFFFFFFFFFFF7;
  v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this, v17);
  v19 = (std::basic_string<char32_t>::size_type)v18;
  v21 = v20;
  if (__n_copy)
    memmove(v18, v13, 4 * __n_copy);
  if (__old_sz != __n_del + __n_copy)
    memmove((void *)(v19 + 4 * __n_copy + 4 * __n_add), (char *)v13 + 4 * __n_copy + 4 * __n_del, 4 * (__old_sz - (__n_del + __n_copy)));
  if (__old_cap != 4)
    operator delete(v13);
  this->__r_.__value_.__r.__words[0] = v19;
  this->__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::append(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__s, std::basic_string<char32_t>::size_type __n)
{
  std::basic_string<char32_t>::size_type v6;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v8;
  std::basic_string<char32_t>::size_type v9;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    v6 = 4;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      v8 = this;
      if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
        v8 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      memmove((char *)v8 + 4 * size, __s, 4 * __n);
      v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v9;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::basic_string<char32_t>::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

_QWORD *std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(_QWORD *result, int *a2, int *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = result;
  if (a4 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 4)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a4 | 1) != 5)
      v8 = a4 | 1;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)result, v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_DWORD *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 4);
  }
  *(_DWORD *)v4 = 0;
  return result;
}

void std::basic_string<char32_t>::__grow_by_and_replace(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __old_cap, std::basic_string<char32_t>::size_type __delta_cap, std::basic_string<char32_t>::size_type __old_sz, std::basic_string<char32_t>::size_type __n_copy, std::basic_string<char32_t>::size_type __n_del, std::basic_string<char32_t>::size_type __n_add, const std::basic_string<char32_t>::value_type *__p_new_stuff)
{
  std::basic_string<char32_t> *v15;
  std::basic_string<char32_t>::size_type v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  std::basic_string<char32_t>::size_type v21;
  uint64_t v22;
  uint64_t v23;
  std::basic_string<char32_t>::size_type v24;
  std::basic_string<char32_t>::size_type v25;

  if (0x3FFFFFFFFFFFFFF6 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
  v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v16 = 2 * __old_cap;
  v17 = (v16 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v16 | 1) != 5)
    v17 = v16 | 1;
  if (v16 >= 5)
    v18 = v17 + 1;
  else
    v18 = 5;
  if (__old_cap > 0x1FFFFFFFFFFFFFF2)
    v19 = 0x3FFFFFFFFFFFFFF7;
  else
    v19 = v18;
  v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this, v19);
  v21 = (std::basic_string<char32_t>::size_type)v20;
  v23 = v22;
  if (__n_copy)
    memmove(v20, v15, 4 * __n_copy);
  if (__n_add)
    memmove((void *)(v21 + 4 * __n_copy), __p_new_stuff, 4 * __n_add);
  v24 = __old_sz - (__n_del + __n_copy);
  if (v24)
    memmove((void *)(v21 + 4 * __n_copy + 4 * __n_add), (char *)v15 + 4 * __n_copy + 4 * __n_del, 4 * v24);
  if (__old_cap != 4)
    operator delete(v15);
  v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_DWORD *)(v21 + 4 * v25) = 0;
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
  return result;
}

void std::basic_string<char32_t>::__init_copy_ctor_external(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__s, std::basic_string<char32_t>::size_type __sz)
{
  std::basic_string<char32_t> *v5;
  std::basic_string<char32_t>::size_type v6;
  std::basic_string<char32_t> *v7;
  uint64_t v8;

  v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5)
      v6 = __sz | 1;
    v7 = (std::basic_string<char32_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this, v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)v7;
    v5 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 4 * __sz + 4);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  char *v7;
  std::string::size_type v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  std::string::size_type size;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  std::string *v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  int v33;
  BOOL v34;
  std::string *v35;
  char *v36;
  std::string::size_type v37;
  char *i;
  int v39;
  std::string::size_type v40;
  char *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string::size_type v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 184) = 0;
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_62;
  v7 = a2;
  std::string::basic_string[abi:ne180100](a4, (a3 - a2) >> 1, 0);
  if (a3 == v7)
  {
    v23 = *(_OWORD *)(a1 + 136);
    v52 = *(_OWORD *)(a1 + 120);
    v53 = v23;
    v24 = *(_OWORD *)(a1 + 168);
    v54 = *(_OWORD *)(a1 + 152);
    v55 = v24;
    v25 = *(_OWORD *)(a1 + 72);
    v48 = *(_OWORD *)(a1 + 56);
    v49 = v25;
    v26 = *(_OWORD *)(a1 + 104);
    v50 = *(_OWORD *)(a1 + 88);
    v51 = v26;
  }
  else
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = 22;
    else
      v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::resize(a4, v8, 0);
    v9 = *(_OWORD *)(a1 + 136);
    v52 = *(_OWORD *)(a1 + 120);
    v53 = v9;
    v10 = *(_OWORD *)(a1 + 168);
    v54 = *(_OWORD *)(a1 + 152);
    v55 = v10;
    v11 = *(_OWORD *)(a1 + 72);
    v48 = *(_OWORD *)(a1 + 56);
    v49 = v11;
    v12 = *(__n128 *)(a1 + 88);
    v13 = *(_OWORD *)(a1 + 104);
    size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v15 = (char *)a4;
    else
      v15 = (char *)a4->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = a4->__r_.__value_.__l.__size_;
    v16 = &v15[size];
    v50 = *(_OWORD *)(a1 + 88);
    v51 = v13;
    while (1)
    {
      v17 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, char **, char *, char *, uint64_t *, __n128))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), &v48, v7, a3, &v47, v15, v16, &v46, v12);
      v18 = v47 == v7;
      *(_QWORD *)(a1 + 184) += (v47 - v7) >> 2;
      if (v18)
        goto LABEL_60;
      if (v17 != 1)
        break;
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = a4;
      else
        v19 = (std::string *)a4->__r_.__value_.__r.__words[0];
      v20 = v46 - (_QWORD)v19;
      std::string::resize(a4, 2 * (v46 - (_QWORD)v19), 0);
      v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0)
        v22 = a4;
      else
        v22 = (std::string *)a4->__r_.__value_.__r.__words[0];
      v15 = (char *)v22 + v20;
      if ((v21 & 0x80u) != 0)
        v21 = a4->__r_.__value_.__l.__size_;
      v16 = (char *)v22 + v21;
      v7 = v47;
      if (v47 >= a3)
        goto LABEL_60;
    }
    if (v17)
    {
      if (v17 != 3)
        goto LABEL_60;
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = (char *)a4;
      else
        v27 = (char *)a4->__r_.__value_.__r.__words[0];
      std::string::resize(a4, v15 - v27, 0);
      std::string::append[abi:ne180100]<char const*,0>(a4, v7, a3);
    }
    else
    {
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = a4;
      else
        v28 = (std::string *)a4->__r_.__value_.__r.__words[0];
      std::string::resize(a4, v46 - (_QWORD)v28, 0);
    }
  }
  v29 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  v30 = a4->__r_.__value_.__l.__size_;
  if ((v29 & 0x80u) == 0)
    v31 = 22;
  else
    v31 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  std::string::resize(a4, v31, 0);
  if ((v29 & 0x80u) == 0)
    v32 = v29;
  else
    v32 = v30;
  v33 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
  v34 = v33 < 0;
  if (v33 >= 0)
    v35 = a4;
  else
    v35 = (std::string *)a4->__r_.__value_.__r.__words[0];
  v36 = (char *)v35 + v32;
  if (v34)
    v37 = a4->__r_.__value_.__l.__size_;
  else
    v37 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  for (i = &v36[v37]; ; i = (char *)(v43 + v42))
  {
    v39 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, char **))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), &v48, v36, i, &v47);
    if (v39 != 1)
      break;
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = (std::string::size_type)a4;
    else
      v40 = a4->__r_.__value_.__r.__words[0];
    v41 = &v47[-v40];
    std::string::resize(a4, 2 * (_QWORD)&v47[-v40], 0);
    v42 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((v42 & 0x80u) == 0)
      v43 = (std::string::size_type)a4;
    else
      v43 = a4->__r_.__value_.__r.__words[0];
    v36 = &v41[v43];
    if ((v42 & 0x80u) != 0)
      v42 = a4->__r_.__value_.__l.__size_;
  }
  if (!v39)
  {
    v36 = v47;
    goto LABEL_68;
  }
  if (v39 == 3)
  {
LABEL_68:
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = (std::string::size_type)a4;
    else
      v45 = a4->__r_.__value_.__r.__words[0];
    std::string::resize(a4, (std::string::size_type)&v36[-v45], 0);
    return;
  }
LABEL_60:
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0)
    operator delete(a4->__r_.__value_.__l.__data_);
LABEL_62:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      return;
    }
LABEL_73:
    std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
  }
  v44 = *(_QWORD *)(a1 + 8);
  if (!v44)
    goto LABEL_73;
  std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, v44);
}

void sub_1A1840078(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_1A1840210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1A1840484(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

void NLUrduWordLanguageModeler::NLUrduWordLanguageModeler(NLUrduWordLanguageModeler *this, const __CFDictionary *a2)
{
  _QWORD *v4;

  NLAbstractLanguageModeler::NLAbstractLanguageModeler(this, CFSTR("ur"));
  *v4 = &unk_1E45CDD48;
  if (CFDictionaryGetValue(a2, CFSTR("useLanguageModel")) == (const void *)*MEMORY[0x1E0C9AE50])
    NLUrduWordLanguageModeler::loadLanguageModel(this, a2);
}

void sub_1A18406E4(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler *v1;

  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

void NLUrduWordLanguageModeler::loadLanguageModel(NLUrduWordLanguageModeler *this, CFDictionaryRef theDict)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  NL::CFLogger *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t valuePtr;

  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0D43450], (const void *)*MEMORY[0x1E0C9AE50]);
  valuePtr = 0x3FD0000000000000;
  v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43488], v5);
  CFRelease(v5);
  v9 = 1;
  v6 = CFNumberCreate(0, kCFNumberLongType, &v9);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43490], v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D434A0], v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43498], v6);
  CFRelease(v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D434C8], CFSTR("ur"));
  *((_QWORD *)this + 1) = LMLanguageModelCreate();
  CFRelease(v4);
  if (!*((_QWORD *)this + 1))
  {
    v8 = NL::CFLogger::sharedInstance(v7);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v8 + 16))(v8, 3, "Could not locate Urdu language model");
  }
}

void NLUrduWordLanguageModeler::~NLUrduWordLanguageModeler(NLUrduWordLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);
  JUMPOUT(0x1A1B0E068);
}

void NLGujaratiCharLanguageModeler::NLGujaratiCharLanguageModeler(NLGujaratiCharLanguageModeler *this, CFDictionaryRef theDict)
{
  uint64_t *v2;
  __CFDictionary *MutableCopy;
  __CFDictionary *v4;
  __CFBundle *BundleWithIdentifier;
  __CFBundle *v6;
  uint64_t v7;

  *((_QWORD *)this + 1) = 0;
  v2 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E45CE1D0;
  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0D434C8], CFSTR("gu"));
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.NLP"));
  if (v4)
  {
    if (BundleWithIdentifier)
    {
      BundleWithIdentifier = CFBundleCopyResourcesDirectoryURL(BundleWithIdentifier);
      v6 = BundleWithIdentifier;
      if (BundleWithIdentifier)
      {
        CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43478], BundleWithIdentifier);
        *v2 = LMLanguageModelCreate();
        CFRelease(v6);
      }
    }
  }
  if (!*v2)
  {
    v7 = NL::CFLogger::sharedInstance(BundleWithIdentifier);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v7 + 16))(v7, 3, "Could not locate Gujarati character language model");
  }
  if (v4)
    CFRelease(v4);
}

void sub_1A18409A4(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler *v1;

  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

double NLGujaratiCharLanguageModeler::logProbability(uint64_t a1)
{
  double result;

  if (!*(_QWORD *)(a1 + 8))
    return -INFINITY;
  LMLanguageModelJointProbability();
  return result;
}

double NLGujaratiCharLanguageModeler::logProbability(uint64_t a1, uint64_t *a2)
{
  double v3;
  double v4;
  void *__p[3];

  stringToUTF32Characters(a2, (int **)__p);
  if (*(_QWORD *)(a1 + 8))
  {
    LMLanguageModelJointProbability();
    v4 = v3;
  }
  else
  {
    v4 = -INFINITY;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1A1840A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NLGujaratiCharLanguageModeler::~NLGujaratiCharLanguageModeler(NLGujaratiCharLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);
  JUMPOUT(0x1A1B0E068);
}

void NLEnglishWordLanguageModeler::NLEnglishWordLanguageModeler(NLEnglishWordLanguageModeler *this, const __CFDictionary *a2)
{
  NLEnglishWordLanguageModeler *v3;

  NLAbstractLanguageModeler::NLAbstractLanguageModeler(this, CFSTR("en_US"));
  *(_QWORD *)v3 = &unk_1E45CE0C8;
  NLEnglishWordLanguageModeler::loadLanguageModel(v3, a2);
}

void sub_1A1840AE8(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler *v1;

  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

void NLEnglishWordLanguageModeler::loadLanguageModel(NLEnglishWordLanguageModeler *this, CFDictionaryRef theDict)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v4;
  NL::CFLogger *v5;
  uint64_t v6;

  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0D434C8], CFSTR("en_US"));
  *((_QWORD *)this + 1) = LMLanguageModelCreate();
  CFRelease(v4);
  if (!*((_QWORD *)this + 1))
  {
    v6 = NL::CFLogger::sharedInstance(v5);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v6 + 16))(v6, 3, "Could not locate English language model");
  }
}

void NLEnglishWordLanguageModeler::~NLEnglishWordLanguageModeler(NLEnglishWordLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);
  JUMPOUT(0x1A1B0E068);
}

uint64_t _CFInit_MorphologicalAnalyzerWrapper(uint64_t result)
{
  *(_QWORD *)(result + 16) = &unk_1E45CE058;
  return result;
}

uint64_t createMorphologicalAnalyzerWrapper(NLWordAnalyzer *a1)
{
  uint64_t result;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_MorphologicalAnalyzerWrapper)
  {
    qword_1EDBB1948 = 0;
    unk_1EDBB1958 = 0u;
    unk_1EDBB1968 = 0u;
    g_CFTypeID_MorphologicalAnalyzerWrapper = _CFRuntimeRegisterClass();
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

uint64_t NLMorphologicalAnalyzerCreate(const __CFDictionary *a1)
{
  const __CFString *Value;
  const __CFString *v2;
  CFTypeID v3;
  const __CFLocale *v4;
  const __CFLocale *v5;
  void (*v6)(void);
  CFTypeID v7;
  NL::CFLogger *TypeID;
  const __CFString *v9;
  uint64_t MorphologicalAnalyzerWrapper;
  NLArabicWordAnalyzer *v11;

  if (!a1)
  {
    v5 = 0;
    goto LABEL_10;
  }
  Value = (const __CFString *)CFDictionaryGetValue(a1, (const void *)kNLMorphologicalAnalyzerLocaleKey);
  if (!Value)
  {
    v6 = *(void (**)(void))(*(_QWORD *)NL::CFLogger::sharedInstance(0) + 16);
    goto LABEL_16;
  }
  v2 = Value;
  v3 = CFGetTypeID(Value);
  if (v3 != CFStringGetTypeID())
  {
    v7 = CFGetTypeID(v2);
    TypeID = (NL::CFLogger *)CFLocaleGetTypeID();
    if ((NL::CFLogger *)v7 == TypeID)
    {
      v4 = (const __CFLocale *)CFRetain(v2);
      goto LABEL_9;
    }
    v6 = *(void (**)(void))(*(_QWORD *)NL::CFLogger::sharedInstance(TypeID) + 16);
LABEL_16:
    v6();
    return 0;
  }
  v4 = CFLocaleCreate(0, v2);
LABEL_9:
  v5 = v4;
LABEL_10:
  v9 = (const __CFString *)CFLocaleGetValue(v5, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  if (CFStringCompare(v9, CFSTR("ar"), 0))
  {
    MorphologicalAnalyzerWrapper = 0;
    if (!v5)
      return MorphologicalAnalyzerWrapper;
    goto LABEL_14;
  }
  v11 = (NLArabicWordAnalyzer *)operator new();
  NLArabicWordAnalyzer::NLArabicWordAnalyzer(v11);
  MorphologicalAnalyzerWrapper = createMorphologicalAnalyzerWrapper(v11);
  if (v5)
LABEL_14:
    CFRelease(v5);
  return MorphologicalAnalyzerWrapper;
}

#error "1A1840E0C: call analysis failed (funcsize=29)"

void NLMorphologicalAnalyzerEnumerateLemmasForToken(uint64_t a1, __CFString *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  CFStringRef CFStringFromString;
  uint64_t v7;
  CFStringRef v8;
  void *__p[2];
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 24);
    getUTF8StringFromCFString(a2, __p);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 16))(&v11, v4, __p);
    if (v10 < 0)
      operator delete(__p[0]);
    v5 = v11;
    if (v12 != v11)
    {
      LOBYTE(__p[0]) = 0;
      do
      {
        CFStringFromString = createCFStringFromString(v5);
        v7 = v5 + 24;
        v8 = createCFStringFromString(v7);
        (*(void (**)(uint64_t, CFStringRef, CFStringRef, void **))(a3 + 16))(a3, CFStringFromString, v8, __p);
        if (CFStringFromString)
          CFRelease(CFStringFromString);
        if (v8)
          CFRelease(v8);
        v5 = v7 + 24;
      }
      while (v5 != v12);
    }
    __p[0] = &v11;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1A1840F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NLMorphologicalAnalyzerEnumerateVariantsForToken(uint64_t a1, __CFString *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  CFStringRef CFStringFromString;
  uint64_t v7;
  CFStringRef v8;
  void *__p[2];
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 24);
    getUTF8StringFromCFString(a2, __p);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 24))(&v11, v4, __p);
    if (v10 < 0)
      operator delete(__p[0]);
    v5 = v11;
    if (v12 != v11)
    {
      LOBYTE(__p[0]) = 0;
      do
      {
        CFStringFromString = createCFStringFromString(v5);
        v7 = v5 + 24;
        v8 = createCFStringFromString(v7);
        (*(void (**)(uint64_t, CFStringRef, CFStringRef, void **))(a3 + 16))(a3, CFStringFromString, v8, __p);
        if (CFStringFromString)
          CFRelease(CFStringFromString);
        if (v8)
          CFRelease(v8);
        v5 = v7 + 24;
      }
      while (v5 != v12);
    }
    __p[0] = &v11;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1A184102C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MorphologicalAnalyzerWrapper::~MorphologicalAnalyzerWrapper(MorphologicalAnalyzerWrapper *this)
{
  uint64_t v2;

  *(_QWORD *)this = &unk_1E45CE058;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &unk_1E45CE058;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
  JUMPOUT(0x1A1B0E068);
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void NL::Resource::enumerateAssetResourcesWithContentType()
{
  _QWORD v0[3];
  char v1;

  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x2000000000;
  v1 = 0;
  LDEnumerateAssetDataItems();
  _Block_object_dispose(v0, 8);
}

void sub_1A184124C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN2NL8Resource38enumerateAssetResourcesWithContentTypeEPK10__CFLocalePK10__CFStringU13block_pointerFvPS0_PbE_block_invoke(uint64_t a1, const __CFURL *a2, uint64_t a3, const void *a4, const __CFString *a5, _BYTE *a6)
{
  CFStringRef PathComponent;
  NL::Resource *v11;
  unsigned int *v12;
  unsigned int v13;
  BOOL v14;
  signed int v15;

  if (CFStringsAreEqual(a5, *(const __CFString **)(a1 + 48)))
  {
    PathComponent = CFURLCopyLastPathComponent(a2);
    v11 = (NL::Resource *)operator new();
    NL::Resource::Resource(v11, a2, a4, PathComponent);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v12 = (unsigned int *)((char *)v11 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
    }
    while (__stxr(v15, v12));
    if ((v15 < 0) ^ v14 | (v15 == 0))
      (*(void (**)(NL::Resource *))(*(_QWORD *)v11 + 8))(v11);
    *a6 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    if (PathComponent)
      CFRelease(PathComponent);
  }
}

void sub_1A1841350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1A1B0E068](v2, 0x10E1C40F75B5662);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::Resource::createAssetResource(NL::Resource *this, const __CFLocale *a2, const __CFString *a3, const __CFString *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  NL::Resource::enumerateAssetResourcesWithContentType();
  v4 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v4;
}

void sub_1A1841410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t NL::Resource::name(NL::Resource *this)
{
  return *((_QWORD *)this + 4);
}

NL::Resource *NL::Resource::createBundleResource(NL::Resource *this, const __CFString *a2, const __CFString *a3, const __CFString *a4, const __CFString *a5)
{
  __CFBundle *BundleWithIdentifier;
  CFURLRef v10;
  NL::Resource *v11;

  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.NLP"));
  v10 = CFBundleCopyResourceURL(BundleWithIdentifier, a2, a3, a4);
  v11 = (NL::Resource *)operator new();
  NL::Resource::Resource(v11, v10, this, a2);
  if (v10)
    CFRelease(v10);
  return v11;
}

void sub_1A1841530(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1B0E068](v1, 0x10E1C40F75B5662);
  _Unwind_Resume(a1);
}

NL::Resource *NL::Resource::Resource(NL::Resource *this, CFTypeRef cf, CFTypeRef a3, CFTypeRef a4)
{
  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = &off_1E45CE628;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  if (cf)
    *((_QWORD *)this + 2) = CFRetain(cf);
  if (a3)
    *((_QWORD *)this + 3) = CFRetain(a3);
  if (a4)
    *((_QWORD *)this + 4) = CFRetain(a4);
  return this;
}

void NL::Resource::~Resource(NL::Resource *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  *(_QWORD *)this = &off_1E45CE628;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 4);
  if (v4)
    CFRelease(v4);
}

{
  NL::Resource::~Resource(this);
  JUMPOUT(0x1A1B0E068);
}

uint64_t NL::Resource::URL(NL::Resource *this)
{
  return *((_QWORD *)this + 2);
}

void NL::Resource::path(const __CFURL **this@<X0>, _QWORD *a2@<X8>)
{
  getFileSystemRepresentationFromCFURL(this[2], a2);
}

void NL::Resource::exists(const __CFURL **this)
{
  _QWORD v1[3];

  getFileSystemRepresentationFromCFURL(this[2], v1);
}

BOOL sub_1A1841680(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  const char *v19;
  const char *v20;
  int v21;
  int v22;
  char *v24;
  char v25;

  if (v25 >= 0)
    v20 = v19;
  else
    v20 = v24;
  v21 = open(v20, 0);
  v22 = v21;
  if ((v21 & 0x80000000) == 0)
    close(v21);
  if (v25 < 0)
    operator delete(v24);
  return v22 >= 0;
}

void sub_1A18416D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NLHindiWordLanguageModeler::NLHindiWordLanguageModeler(NLHindiWordLanguageModeler *this, const __CFDictionary *a2)
{
  NLHindiWordLanguageModeler *v3;

  NLAbstractLanguageModeler::NLAbstractLanguageModeler(this, CFSTR("hi"));
  *(_QWORD *)v3 = &off_1E45CDEC0;
  NLHindiWordLanguageModeler::loadLanguageModel(v3, a2);
}

void sub_1A1841730(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler *v1;

  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

void NLHindiWordLanguageModeler::loadLanguageModel(NLHindiWordLanguageModeler *this, CFDictionaryRef theDict)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFTypeID TypeID;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  uint64_t valuePtr;

  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0D43450], (const void *)*MEMORY[0x1E0C9AE50]);
  valuePtr = 0x3FD0000000000000;
  v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43488], v5);
  CFRelease(v5);
  v13 = 1;
  v6 = CFNumberCreate(0, kCFNumberLongType, &v13);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43490], v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D434A0], v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43498], v6);
  CFRelease(v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D434C8], CFSTR("hi"));
  TypeID = CFStringGetTypeID();
  if (TypeID == CFGetTypeID(CFSTR("hi")))
    applesauce::CF::details::CFString_get_value<false>(CFSTR("hi"), (uint64_t)__p);
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "");
  v8 = _nlpDefaultLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    NLHindiWordLanguageModeler::loadLanguageModel();
  *((_QWORD *)this + 1) = LMLanguageModelCreate();
  CFRelease(v4);
  if (*((_QWORD *)this + 1))
  {
    v9 = _nlpDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      NLHindiWordLanguageModeler::loadLanguageModel();
  }
  else
  {
    v10 = _nlpDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      NLHindiWordLanguageModeler::loadLanguageModel();
  }
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_1A184195C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NLHindiWordLanguageModeler::removeDiacritics(uint64_t a1@<X1>, char a2@<W2>, std::string *a3@<X8>)
{
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "ँ");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "ं");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "़");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
  {
    operator delete(v7[0]);
    if ((a2 & 1) != 0)
      goto LABEL_22;
  }
  else if ((a2 & 1) != 0)
  {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "्");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
LABEL_22:
  std::string::basic_string[abi:ne180100]<0>(v7, "ः");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1A1841B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void NLHindiWordLanguageModeler::~NLHindiWordLanguageModeler(NLHindiWordLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);
  JUMPOUT(0x1A1B0E068);
}

void OUTLINED_FUNCTION_1_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(NLAbstractOrthographyConvertor *this)
{
  JUMPOUT(0x1A1B0E068);
}

uint64_t NLAbstractOrthographyConvertor::isNasal()
{
  return 0;
}

void NLAbstractOrthographyConvertor::convertToModernOrthography(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void NLConvertBW2UTF::NLConvertBW2UTF(NLConvertBW2UTF *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
}

uint64_t NLConvertBW2UTF::loadBw2utf(uint64_t a1)
{
  std::locale::id *v2;
  const std::locale::facet *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  BOOL v6;
  BOOL v7;
  __int128 v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void *v12[2];
  char v13;
  std::string __str;
  std::string v15;
  std::locale v16[2];
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  _QWORD v20[2];
  _BYTE v21[408];
  _QWORD v22[21];

  v22[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v20);
  __p[0] = 0;
  __p[1] = 0;
  v19 = 0;
  v2 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(v20[0] - 24)));
    v3 = std::locale::use_facet(v16, v2);
    v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(v16);
    v5 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, (uint64_t)__p, v4);
    if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)
      break;
    trim((unint64_t)__p, v16);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)&v16[0].__locale_;
    v19 = v17;
    std::string::basic_string[abi:ne180100]<0>(v16, ";");
    v6 = startswith((unsigned __int8 *)__p, (unsigned __int8 *)v16);
    v7 = v6;
    if (SHIBYTE(v17) < 0)
    {
      operator delete(v16[0].__locale_);
      if (!v7)
        goto LABEL_9;
    }
    else if (!v6)
    {
LABEL_9:
      v16[0].__locale_ = 0;
      v16[1].__locale_ = 0;
      v17 = 0;
      splitWithChar((uint64_t)__p, 9u, (uint64_t)v16);
      if (*((char *)v16[0].__locale_ + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)v16[0].__locale_, *((_QWORD *)v16[0].__locale_ + 1));
      }
      else
      {
        v8 = *(_OWORD *)v16[0].__locale_;
        v15.__r_.__value_.__r.__words[2] = *((_QWORD *)v16[0].__locale_ + 2);
        *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "\\");
      std::string::basic_string[abi:ne180100]<0>(v12, "");
      replaceAll(&v15, (char *)&__str, (uint64_t)v12);
      if (v13 < 0)
        operator delete(v12[0]);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (*((char *)v16[0].__locale_ + 47) < 0)
        std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v16[0].__locale_ + 3), *((_QWORD *)v16[0].__locale_ + 4));
      else
        __str = *(std::string *)((_BYTE *)v16[0].__locale_ + 1);
      v12[0] = &v15;
      v9 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v15, (uint64_t)&std::piecewise_construct, (__int128 **)v12);
      std::string::operator=((std::string *)(v9 + 40), &__str);
      v12[0] = &__str;
      v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 40, (unsigned __int8 *)&__str, (uint64_t)&std::piecewise_construct, (__int128 **)v12);
      std::string::operator=((std::string *)(v10 + 40), &v15);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      v15.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    }
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v20 + *(_QWORD *)(v20[0] - 24)), *(_DWORD *)&v21[*(_QWORD *)(v20[0] - 24) + 16] | 4);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  v20[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1A1B0DEAC](v21);
  std::istream::~istream();
  return MEMORY[0x1A1B0DFFC](v22);
}

void sub_1A1841FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::locale a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  _Unwind_Resume(exception_object);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1A1B0DEA0](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1A184218C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1A1B0DFFC](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1A1B0DEAC](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1A1B0DFFC](a1 + 53);
  return a1;
}

void NLConvertBW2UTF::bw2utf(_QWORD *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  std::string::size_type i;
  std::string::size_type v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  std::string *v27;
  std::string *v28;
  int v29;
  std::string *v30;
  std::string::size_type size;
  std::string v32;
  std::string *v33;

  v5 = a3;
  LODWORD(a3) = *(char *)(a2 + 23);
  if ((a3 & 0x80000000) != 0)
  {
    v7 = *(_BYTE **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    if (!v6)
    {
LABEL_3:
      if ((a3 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else
  {
    v6 = *(unsigned __int8 *)(a2 + 23);
    v7 = (_BYTE *)a2;
    if (!*(_BYTE *)(a2 + 23))
      goto LABEL_3;
  }
  do
  {
    if (*v7 == 79)
      *v7 = 62;
    ++v7;
    --v6;
  }
  while (v6);
  LOBYTE(a3) = *(_BYTE *)(a2 + 23);
  if ((a3 & 0x80) == 0)
  {
LABEL_4:
    v8 = a3;
    v9 = (_BYTE *)a2;
    if (!(_BYTE)a3)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  v9 = *(_BYTE **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
  {
LABEL_5:
    if ((a3 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
  do
  {
LABEL_26:
    if (*v9 == 87)
      *v9 = 38;
    ++v9;
    --v8;
  }
  while (v8);
  LOBYTE(a3) = *(_BYTE *)(a2 + 23);
  if ((a3 & 0x80) == 0)
  {
LABEL_6:
    v10 = a3;
    v11 = (_BYTE *)a2;
    if (!(_BYTE)a3)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  v11 = *(_BYTE **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
  {
LABEL_7:
    if ((a3 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
  do
  {
LABEL_31:
    if (*v11 == 73)
      *v11 = 60;
    ++v11;
    --v10;
  }
  while (v10);
  LOBYTE(a3) = *(_BYTE *)(a2 + 23);
  if ((a3 & 0x80) == 0)
  {
LABEL_8:
    v12 = a3;
    v13 = (_BYTE *)a2;
    if (!(_BYTE)a3)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  v13 = *(_BYTE **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  if (!v12)
  {
LABEL_9:
    if ((a3 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
  do
  {
LABEL_36:
    if (*v13 == 86)
      *v13 = 42;
    ++v13;
    --v12;
  }
  while (v12);
  LOBYTE(a3) = *(_BYTE *)(a2 + 23);
  if ((a3 & 0x80) == 0)
  {
LABEL_10:
    v14 = a3;
    v15 = (_BYTE *)a2;
    if (!(_BYTE)a3)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  v15 = *(_BYTE **)a2;
  v14 = *(_QWORD *)(a2 + 8);
  if (!v14)
  {
LABEL_11:
    if ((a3 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
  do
  {
LABEL_41:
    if (*v15 == 99)
      *v15 = 36;
    ++v15;
    --v14;
  }
  while (v14);
  LOBYTE(a3) = *(_BYTE *)(a2 + 23);
  if ((a3 & 0x80) == 0)
  {
LABEL_12:
    v16 = a3;
    v17 = (_BYTE *)a2;
    if (!(_BYTE)a3)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  v17 = *(_BYTE **)a2;
  v16 = *(_QWORD *)(a2 + 8);
  if (!v16)
  {
LABEL_13:
    if ((a3 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_50;
  }
  do
  {
LABEL_46:
    if (*v17 == 81)
      *v17 = 125;
    ++v17;
    --v16;
  }
  while (v16);
  LOBYTE(a3) = *(_BYTE *)(a2 + 23);
  if ((a3 & 0x80) == 0)
  {
LABEL_14:
    v18 = a3;
    v19 = (_BYTE *)a2;
    if (!(_BYTE)a3)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_50:
  v19 = *(_BYTE **)a2;
  v18 = *(_QWORD *)(a2 + 8);
  if (!v18)
  {
LABEL_15:
    if ((a3 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_55;
  }
  do
  {
LABEL_51:
    if (*v19 == 67)
      *v19 = 39;
    ++v19;
    --v18;
  }
  while (v18);
  LOBYTE(a3) = *(_BYTE *)(a2 + 23);
  if ((a3 & 0x80) == 0)
  {
LABEL_16:
    v20 = a3;
    v21 = (_BYTE *)a2;
    if (!(_BYTE)a3)
      goto LABEL_17;
    goto LABEL_56;
  }
LABEL_55:
  v21 = *(_BYTE **)a2;
  v20 = *(_QWORD *)(a2 + 8);
  if (!v20)
  {
LABEL_17:
    if ((a3 & 0x80) == 0)
      goto LABEL_18;
LABEL_60:
    v22 = *(_BYTE **)a2;
    a3 = *(std::string **)(a2 + 8);
    if (!a3)
      goto LABEL_64;
    goto LABEL_61;
  }
  do
  {
LABEL_56:
    if (*v21 == 77)
      *v21 = 124;
    ++v21;
    --v20;
  }
  while (v20);
  LOBYTE(a3) = *(_BYTE *)(a2 + 23);
  if ((a3 & 0x80) != 0)
    goto LABEL_60;
LABEL_18:
  a3 = (std::string *)a3;
  v22 = (_BYTE *)a2;
  if (!(_BYTE)a3)
    goto LABEL_64;
  do
  {
LABEL_61:
    if (*v22 == 76)
      *v22 = 123;
    ++v22;
    a3 = (std::string *)((char *)a3 - 1);
  }
  while (a3);
LABEL_64:
  std::string::basic_string[abi:ne180100]<0>(v5, "");
  for (i = 0; ; ++i)
  {
    v24 = *(char *)(a2 + 23) < 0 ? *(_QWORD *)(a2 + 8) : *(unsigned __int8 *)(a2 + 23);
    if (v24 <= i)
      break;
    std::string::basic_string(&v32, (const std::string *)a2, i, 1uLL, (std::allocator<char> *)&v33);
    if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a1, (unsigned __int8 *)&v32))
    {
      v33 = &v32;
      v25 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&v32, (uint64_t)&std::piecewise_construct, (__int128 **)&v33);
      v28 = (std::string *)*((_QWORD *)v25 + 5);
      v26 = v25 + 40;
      v27 = v28;
      v29 = (char)v26[23];
      if (v29 >= 0)
        v30 = (std::string *)v26;
      else
        v30 = v27;
      if (v29 >= 0)
        size = v26[23];
      else
        size = *((_QWORD *)v26 + 1);
    }
    else
    {
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v32;
      else
        v30 = (std::string *)v32.__r_.__value_.__r.__words[0];
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      else
        size = v32.__r_.__value_.__l.__size_;
    }
    std::string::append(v5, (const std::string::value_type *)v30, size);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_1A184258C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t NLConvertBW2UTF::utf2bw@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *p_p;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  std::string *v21;
  std::string *v22;
  int v23;
  std::string *v24;
  std::string::size_type v25;
  uint64_t v26;
  char v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  std::string v51;
  std::basic_string<char32_t> __p;
  std::string *v53;
  void *v54[2];
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v54, "\u202B");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll((std::string *)a2, (char *)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "\u202C");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll((std::string *)a2, (char *)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "\u200F");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll((std::string *)a2, (char *)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "٠");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll((std::string *)a2, (char *)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "١");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll((std::string *)a2, (char *)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "٢");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll((std::string *)a2, (char *)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "٣");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll((std::string *)a2, (char *)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "٤");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll((std::string *)a2, (char *)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "٥");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll((std::string *)a2, (char *)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "٦");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll((std::string *)a2, (char *)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "٧");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll((std::string *)a2, (char *)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "٨");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll((std::string *)a2, (char *)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "٩");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll((std::string *)a2, (char *)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a6, "");
  v12 = operator new();
  *(_OWORD *)(v12 + 8) = xmmword_1A18D3AF0;
  *(_DWORD *)(v12 + 24) = 0;
  *(_QWORD *)v12 = &unk_1E45CEA28;
  *(_OWORD *)v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = v12;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v13 = *(unsigned __int8 *)(a2 + 23);
  if ((v13 & 0x80u) == 0)
    v14 = (int *)a2;
  else
    v14 = *(int **)a2;
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a2 + 8);
  v66 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v54, v14, (int *)((char *)v14 + v13), &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    v17 = (_QWORD *)(a1 + 40);
    v18 = 4 * size;
    do
    {
      LODWORD(v53) = p_p->__r_.__value_.__s.__data_[0];
      std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes((uint64_t)v54, (char *)&v53, (char *)&v53 + 4, &v51);
      if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v17, (unsigned __int8 *)&v51))
      {
        v53 = &v51;
        v19 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v17, (unsigned __int8 *)&v51, (uint64_t)&std::piecewise_construct, (__int128 **)&v53);
        v22 = (std::string *)*((_QWORD *)v19 + 5);
        v20 = v19 + 40;
        v21 = v22;
        v23 = (char)v20[23];
        if (v23 >= 0)
          v24 = (std::string *)v20;
        else
          v24 = v21;
        if (v23 >= 0)
          v25 = v20[23];
        else
          v25 = *((_QWORD *)v20 + 1);
      }
      else
      {
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = &v51;
        else
          v24 = (std::string *)v51.__r_.__value_.__r.__words[0];
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
        else
          v25 = v51.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)a6, (const std::string::value_type *)v24, v25);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      p_p = (std::basic_string<char32_t> *)((char *)p_p + 4);
      v18 -= 4;
    }
    while (v18);
  }
  if ((a3 & 1) != 0)
  {
    v26 = *(unsigned __int8 *)(a6 + 23);
    v27 = v26;
    v28 = *(_BYTE **)a6;
    v29 = *(_QWORD *)(a6 + 8);
    if ((v26 & 0x80u) == 0)
      v30 = (_BYTE *)a6;
    else
      v30 = *(_BYTE **)a6;
    if ((v26 & 0x80u) == 0)
      v31 = *(unsigned __int8 *)(a6 + 23);
    else
      v31 = *(_QWORD *)(a6 + 8);
    if (v31)
    {
      do
      {
        if (*v30 == 62)
          *v30 = 79;
        ++v30;
        --v31;
      }
      while (v31);
      v26 = *(unsigned __int8 *)(a6 + 23);
      v28 = *(_BYTE **)a6;
      v29 = *(_QWORD *)(a6 + 8);
      v27 = *(_BYTE *)(a6 + 23);
    }
    if (v27 >= 0)
      v32 = (_BYTE *)a6;
    else
      v32 = v28;
    if (v27 >= 0)
      v33 = v26;
    else
      v33 = v29;
    if (v33)
    {
      do
      {
        if (*v32 == 38)
          *v32 = 87;
        ++v32;
        --v33;
      }
      while (v33);
      v26 = *(unsigned __int8 *)(a6 + 23);
      v28 = *(_BYTE **)a6;
      v29 = *(_QWORD *)(a6 + 8);
      v27 = *(_BYTE *)(a6 + 23);
    }
    if (v27 < 0)
      v26 = v29;
    else
      v28 = (_BYTE *)a6;
    for (; v26; --v26)
    {
      if (*v28 == 60)
        *v28 = 73;
      ++v28;
    }
  }
  if (a4)
  {
    v34 = *(unsigned __int8 *)(a6 + 23);
    v35 = v34;
    v36 = *(_BYTE **)a6;
    v37 = *(_QWORD *)(a6 + 8);
    if ((v34 & 0x80u) == 0)
      v38 = (_BYTE *)a6;
    else
      v38 = *(_BYTE **)a6;
    if ((v34 & 0x80u) == 0)
      v39 = *(unsigned __int8 *)(a6 + 23);
    else
      v39 = *(_QWORD *)(a6 + 8);
    if (v39)
    {
      do
      {
        if (*v38 == 42)
          *v38 = 86;
        ++v38;
        --v39;
      }
      while (v39);
      v34 = *(unsigned __int8 *)(a6 + 23);
      v36 = *(_BYTE **)a6;
      v37 = *(_QWORD *)(a6 + 8);
      v35 = *(_BYTE *)(a6 + 23);
    }
    if (v35 >= 0)
      v40 = (_BYTE *)a6;
    else
      v40 = v36;
    if (v35 >= 0)
      v41 = v34;
    else
      v41 = v37;
    if (v41)
    {
      do
      {
        if (*v40 == 36)
          *v40 = 99;
        ++v40;
        --v41;
      }
      while (v41);
      v34 = *(unsigned __int8 *)(a6 + 23);
      v36 = *(_BYTE **)a6;
      v37 = *(_QWORD *)(a6 + 8);
      v35 = *(_BYTE *)(a6 + 23);
    }
    if (v35 < 0)
      v34 = v37;
    else
      v36 = (_BYTE *)a6;
    for (; v34; --v34)
    {
      if (*v36 == 125)
        *v36 = 81;
      ++v36;
    }
  }
  if (a5)
  {
    v42 = *(unsigned __int8 *)(a6 + 23);
    v43 = v42;
    v44 = *(_BYTE **)a6;
    v45 = *(_QWORD *)(a6 + 8);
    if ((v42 & 0x80u) == 0)
      v46 = (_BYTE *)a6;
    else
      v46 = *(_BYTE **)a6;
    if ((v42 & 0x80u) == 0)
      v47 = *(unsigned __int8 *)(a6 + 23);
    else
      v47 = *(_QWORD *)(a6 + 8);
    if (v47)
    {
      do
      {
        if (*v46 == 39)
          *v46 = 67;
        ++v46;
        --v47;
      }
      while (v47);
      v42 = *(unsigned __int8 *)(a6 + 23);
      v44 = *(_BYTE **)a6;
      v45 = *(_QWORD *)(a6 + 8);
      v43 = *(_BYTE *)(a6 + 23);
    }
    if (v43 >= 0)
      v48 = (_BYTE *)a6;
    else
      v48 = v44;
    if (v43 >= 0)
      v49 = v42;
    else
      v49 = v45;
    if (v49)
    {
      do
      {
        if (*v48 == 124)
          *v48 = 77;
        ++v48;
        --v49;
      }
      while (v49);
      v42 = *(unsigned __int8 *)(a6 + 23);
      v44 = *(_BYTE **)a6;
      v45 = *(_QWORD *)(a6 + 8);
      v43 = *(_BYTE *)(a6 + 23);
    }
    if (v43 < 0)
      v42 = v45;
    else
      v44 = (_BYTE *)a6;
    for (; v42; --v42)
    {
      if (*v44 == 123)
        *v44 = 76;
      ++v44;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v54);
}

void sub_1A1842E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a23);
  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  _Unwind_Resume(a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x1A1B0DEB8](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1A1843058(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1A1843024);
  }
  __cxa_rethrow();
}

void sub_1A184309C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A1843330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1A18433D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void NLCompositeTransliteratorException::NLCompositeTransliteratorException(NLCompositeTransliteratorException *this, const __CFLocale *a2, const __CFURL *a3)
{
  uint64_t **ExceptionList;

  *(_QWORD *)this = 0;
  ExceptionList = NLCompositeTransliteratorException::loadExceptionList(this, a2, a3);
  std::unique_ptr<NL::StringMap>::reset[abi:ne180100]((NL::StringMap **)this, (NL::StringMap *)ExceptionList);
}

void sub_1A1843460(_Unwind_Exception *a1)
{
  NL::StringMap **v1;

  std::unique_ptr<NL::StringMap>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

NL::StringMap *std::unique_ptr<NL::StringMap>::reset[abi:ne180100](NL::StringMap **a1, NL::StringMap *a2)
{
  NL::StringMap *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::StringMap::~StringMap(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

uint64_t **NLCompositeTransliteratorException::loadExceptionList(NLCompositeTransliteratorException *this, CFLocaleRef locale, const __CFURL *a3)
{
  const __CFString *Value;
  const __CFAllocator *v6;
  CFMutableStringRef Mutable;
  __CFString *v8;
  const __CFString *v9;
  uint64_t **v10;
  NL::CFLogger *v11;
  uint64_t v12;
  void **v13;
  NL::CFLogger *v14;
  uint64_t v15;
  void **v16;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, CFURLRef, uint64_t, uint64_t, uint64_t, _BYTE *);
  void *v27;
  uint64_t *v28;
  void *v29[2];
  char v30;
  const __CFURL *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  CFTypeRef v37;

  v32 = 0;
  v33 = &v32;
  v34 = 0x3002000000;
  v35 = __Block_byref_object_copy__0;
  v36 = __Block_byref_object_dispose__0;
  v37 = 0;
  if (a3)
  {
    Value = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    v8 = Mutable;
    v20[0] = Mutable;
    if (Mutable)
    {
      CFStringAppend(Mutable, Value);
      CFStringAppend(v8, CFSTR("_exceptions.dat"));
      v31 = CFURLCreateCopyAppendingPathComponent(v6, a3, v8, 0);
      getFileSystemRepresentationFromCFURL(v31, v29);
    }
  }
  else
  {
    v24 = MEMORY[0x1E0C809B0];
    v25 = 0x40000000;
    v26 = ___ZN34NLCompositeTransliteratorException17loadExceptionListEPK10__CFLocalePK7__CFURL_block_invoke;
    v27 = &unk_1E45CF398;
    v28 = &v32;
    LMEnumerateAssetDataItems();
  }
  v9 = (const __CFString *)v33[5];
  if (v9)
  {
    getUTF8StringFromCFString(v9, v29);
    v10 = NL::StringMap::createWithFile((char *)v29);
    if (!v10)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Failed to load exception list for: ");
      composeErrorMessageForLocale(locale, (const void **)__p, (uint64_t)v20);
      if (v19 < 0)
        operator delete(__p[0]);
      v12 = NL::CFLogger::sharedInstance(v11);
      v13 = v20;
      if (v21 < 0)
        v13 = (void **)v20[0];
      (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v12 + 16))(v12, 3, "%s", (const char *)v13);
      if (v21 < 0)
        operator delete(v20[0]);
    }
    if (v30 < 0)
      operator delete(v29[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "Could not locate exception list for: ");
    composeErrorMessageForLocale(locale, (const void **)v22, (uint64_t)v29);
    if (v23 < 0)
      operator delete(v22[0]);
    v15 = NL::CFLogger::sharedInstance(v14);
    v16 = v29;
    if (v30 < 0)
      v16 = (void **)v29[0];
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v15 + 16))(v15, 3, "%s", (const char *)v16);
    if (v30 < 0)
      operator delete(v29[0]);
    v10 = 0;
  }
  _Block_object_dispose(&v32, 8);
  if (v37)
    CFRelease(v37);
  return v10;
}

void sub_1A1843784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  if (a16 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  _Block_object_dispose((const void *)(v40 - 112), 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v39 + 40), 0);
  _Unwind_Resume(a1);
}

void NLCompositeTransliteratorException::~NLCompositeTransliteratorException(NL::StringMap **this)
{
  std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(a1 + 40), 0);
}

void ___ZN34NLCompositeTransliteratorException17loadExceptionListEPK10__CFLocalePK7__CFURL_block_invoke(uint64_t a1, CFURLRef url, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  const __CFString *PathComponent;
  const __CFString *v10;
  uint64_t v11;
  CFStringRef v12;

  PathComponent = CFURLCopyLastPathComponent(url);
  if (PathComponent)
  {
    v10 = PathComponent;
    if (CFStringsAreEqual(PathComponent, CFSTR("exceptions.dat")))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v12 = CFURLCopyPath(url);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v11 + 40), v12);
      *a6 = 1;
    }
    CFRelease(v10);
  }
}

void sub_1A184393C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void NLCompositeTransliteratorException::exceptionCandidatesForInput(uint64_t **a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  uint64_t v6;
  std::string::size_type size;
  char v8;
  __int128 *v9;
  __int128 *i;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  std::string __p;
  __int128 *v26;
  __int128 *v27;
  uint64_t v28;
  std::string v29;
  os_signpost_id_t v30;

  NLOSSignPostexceptionCandidatesForInput::NLOSSignPostexceptionCandidatesForInput((NLOSSignPostexceptionCandidatesForInput *)&v30);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*a1)
  {
    v6 = *(unsigned __int8 *)(a2 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_QWORD *)(a2 + 8);
    if (v6)
    {
      NL::StringMap::get(*a1, (const void **)a2, &v29);
      size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      v8 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v29.__r_.__value_.__l.__size_;
      if (size)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        splitWithChar((uint64_t)&v29, 0x2Cu, (uint64_t)&v26);
        v9 = v26;
        for (i = v27; v9 != i; v9 = (__int128 *)((char *)v9 + 24))
        {
          if (*((char *)v9 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
          }
          else
          {
            v11 = *v9;
            __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
          }
          v12 = operator new();
          NLTransliterationCandidate::NLTransliterationCandidate(v12, a2, &__p, 5, 0, 0.0, 0.0);
          v14 = (uint64_t *)a3[1];
          v13 = (unint64_t)a3[2];
          if ((unint64_t)v14 >= v13)
          {
            v16 = ((char *)v14 - (_BYTE *)*a3) >> 3;
            if ((unint64_t)(v16 + 1) >> 61)
              std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
            v17 = v13 - (_QWORD)*a3;
            v18 = v17 >> 2;
            if (v17 >> 2 <= (unint64_t)(v16 + 1))
              v18 = v16 + 1;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            if (v19)
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(a3 + 2), v19);
            else
              v20 = 0;
            v21 = (uint64_t *)&v20[8 * v16];
            *v21 = v12;
            v15 = v21 + 1;
            v23 = (char *)*a3;
            v22 = (char *)a3[1];
            if (v22 != *a3)
            {
              do
              {
                v24 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *--v21 = v24;
              }
              while (v22 != v23);
              v22 = (char *)*a3;
            }
            *a3 = v21;
            a3[1] = v15;
            a3[2] = &v20[8 * v19];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v14 = v12;
            v15 = v14 + 1;
          }
          a3[1] = v15;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v8 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      }
      if (v8 < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
    }
  }
  NLOSSignPostexceptionCandidatesForInput::~NLOSSignPostexceptionCandidatesForInput(&v30);
}

void sub_1A1843B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,os_signpost_id_t a24)
{
  uint64_t v24;
  void *v26;

  a9 = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a23 < 0)
    operator delete(__p);
  v26 = *(void **)v24;
  if (*(_QWORD *)v24)
  {
    *(_QWORD *)(v24 + 8) = v26;
    operator delete(v26);
  }
  NLOSSignPostexceptionCandidatesForInput::~NLOSSignPostexceptionCandidatesForInput(&a24);
  _Unwind_Resume(a1);
}

void NLOSSignPostexceptionCandidatesForInput::NLOSSignPostexceptionCandidatesForInput(NLOSSignPostexceptionCandidatesForInput *this)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  NSObject *v5;
  uint8_t v6[16];

  v2 = _nlpSignpostLog();
  *(_QWORD *)this = os_signpost_id_make_with_pointer(v2, this);
  v3 = _nlpSignpostLog();
  v4 = *(_QWORD *)this;
  if ((unint64_t)(*(_QWORD *)this - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = v3;
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)v6 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1802000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "exceptionCandidatesForInput", (const char *)&unk_1A18F08CD, v6, 2u);
    }
  }
}

void NLOSSignPostexceptionCandidatesForInput::~NLOSSignPostexceptionCandidatesForInput(os_signpost_id_t *this)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = _nlpSignpostLog();
  v3 = *this;
  if (*this - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1802000, v4, OS_SIGNPOST_INTERVAL_END, v3, "exceptionCandidatesForInput", (const char *)&unk_1A18F08CD, v5, 2u);
    }
  }
}

void nlp::CFScopedPtr<__CFString *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFURL const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t NLMessageIntentCandidate::NLMessageIntentCandidate(uint64_t a1, int a2, uint64_t a3, double a4)
{
  *(_DWORD *)a1 = a2;
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 8, a3);
  *(double *)(a1 + 48) = a4;
  return a1;
}

uint64_t NLMessageIntentCandidate::getMessageIntentType(NLMessageIntentCandidate *this)
{
  return *(unsigned int *)this;
}

uint64_t NLMessageIntentCandidate::getAttributes@<X0>(NLMessageIntentCandidate *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_map<std::string,std::string>::unordered_map(a2, (uint64_t)this + 8);
}

double NLMessageIntentCandidate::getScore(NLMessageIntentCandidate *this)
{
  return *((double *)this + 6);
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_1A1843E6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        std::string::operator=((std::string *)(v8 + 5), (const std::string *)(v4 + 5));
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, v8);
        v4 = (uint64_t *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(a1, (__int128 *)v4 + 1);
    v4 = (uint64_t *)*v4;
  }
}

void sub_1A1843F58(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1A1843F74(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *inserted;

  v4 = (unsigned __int8 *)(a2 + 2);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;

  v6 = a1 + 32;
  v7 = *(float *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    v10 = 1;
    if (v8 >= 3)
      v10 = (v8 & (v8 - 1)) != 0;
    v11 = v10 | (2 * v8);
    v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<false>(a1, v13);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v16 = a2;
    if (v8 <= a2)
      v16 = a2 % v8;
  }
  else
  {
    v16 = (v8 - 1) & a2;
  }
  v17 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v16);
  if (v17)
  {
    v18 = *(unsigned __int8 **)v17;
    if (*(_QWORD *)v17)
    {
      v19 = 0;
      do
      {
        v20 = *((_QWORD *)v18 + 1);
        if (v15 > 1)
        {
          v21 = *((_QWORD *)v18 + 1);
          if (v20 >= v8)
            v21 = v20 % v8;
        }
        else
        {
          v21 = v20 & (v8 - 1);
        }
        if (v21 != v16)
          break;
        v22 = v20 == a2 ? std::equal_to<std::string>::operator()[abi:ne180100](v6, v18 + 16, a3) : 0;
        if ((v19 & (v22 ^ 1) & 1) != 0)
          break;
        v19 |= v22;
        v17 = *(unsigned __int8 **)v17;
        v18 = *(unsigned __int8 **)v17;
      }
      while (*(_QWORD *)v17);
    }
  }
  return v17;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  unint64_t v18;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v12 = *v7;
      if (*v7)
      {
        v18 = v9.u32[0];
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            v7 = (unsigned __int8 **)v12;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            v14 = *(unsigned __int8 **)v12;
            if (*(_QWORD *)v12)
            {
              v15 = v12;
              while (1)
              {
                v16 = std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v12 + 16, v14 + 16);
                v17 = *(unsigned __int8 **)v15;
                if (!v16)
                  break;
                v14 = *(unsigned __int8 **)v17;
                v15 = *(unsigned __int8 **)v15;
                if (!*(_QWORD *)v17)
                  goto LABEL_32;
              }
              v14 = *(unsigned __int8 **)v15;
              v17 = v15;
LABEL_32:
              v10 = v18;
            }
            else
            {
              v17 = v12;
            }
            *v7 = v14;
            *(_QWORD *)v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = (unsigned __int8 **)v12;
            v8 = v13;
          }
          v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(_QWORD *a1, __int128 *a2)
{
  _QWORD *inserted;
  _QWORD *v5[3];

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1A1844538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_1A18445C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void NLAbstractOrthographyChecker::~NLAbstractOrthographyChecker(NLAbstractOrthographyChecker *this)
{
  JUMPOUT(0x1A1B0E068);
}

uint64_t NLAbstractOrthographyChecker::checkSpelling(NLAbstractOrthographyChecker *this, const __CFString *a2, const __CFString **a3, const __CFString **a4)
{
  return 1;
}

NL::CFLogger *NL::CFLogger::CFLogger(NL::CFLogger *this)
{
  CFIndex AppIntegerValue;
  int v5;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("NLDebug"), (CFStringRef)*MEMORY[0x1E0C9B228], &keyExistsAndHasValidFormat);
  if (AppIntegerValue > 7 || AppIntegerValue < 0 || keyExistsAndHasValidFormat == 0)
    v5 = 3;
  else
    v5 = AppIntegerValue;
  *(_QWORD *)this = off_1E45CE5C8;
  *((_DWORD *)this + 2) = v5;
  *((_QWORD *)this + 2) = operator new[]();
  *(_QWORD *)this = &off_1E45CE5F8;
  return this;
}

uint64_t NL::CFLogger::sharedInstance(NL::CFLogger *this)
{
  if (NL::CFLogger::sharedInstance(void)::onceToken != -1)
    dispatch_once(&NL::CFLogger::sharedInstance(void)::onceToken, &__block_literal_global_1);
  return NL::CFLogger::sharedInstance(void)::instance;
}

void sub_1A1844720(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1B0E068](v1, 0x1091C400F2A5985);
  _Unwind_Resume(a1);
}

void NL::CFLogger::log(NL::CFLogger *this, uint64_t a2, const char *a3, ...)
{
  CFStringRef v5;
  char __str[1024];
  uint64_t v7;
  va_list va;

  va_start(va, a3);
  v7 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 2) >= (int)a2)
  {
    vsnprintf(__str, 0x400uLL, a3, va);
    v5 = CFStringCreateWithCString(0, __str, 0x8000100u);
    (*(void (**)(NL::CFLogger *, uint64_t, CFStringRef))(*(_QWORD *)this + 24))(this, a2, v5);
    CFRelease(v5);
  }
}

uint64_t NL::CFLogger::log(uint64_t this, int a2, const __CFString *a3)
{
  if (*(_DWORD *)(this + 8) >= a2)
    return CFLog();
  return this;
}

void NL::CFLogger::~CFLogger(NL::CFLogger *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_1E45CE5C8;
  v1 = *((_QWORD *)this + 2);
  if (v1)
    MEMORY[0x1A1B0E050](v1, 0x1000C8077774924);
}

{
  uint64_t v1;

  *(_QWORD *)this = off_1E45CE5C8;
  v1 = *((_QWORD *)this + 2);
  if (v1)
    MEMORY[0x1A1B0E050](v1, 0x1000C8077774924);
  JUMPOUT(0x1A1B0E068);
}

NL::ParseBuilder *NL::ParseBuilder::ParseBuilder(NL::ParseBuilder *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v4 = a2[1];
  *((_QWORD *)a1 + 2) = *a2;
  *((_QWORD *)a1 + 3) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a3[1];
  *((_QWORD *)a1 + 4) = *a3;
  *((_QWORD *)a1 + 5) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *((_QWORD *)a1 + 6) = 0;
  *((_QWORD *)a1 + 7) = 0;
  v10 = (std::__shared_weak_count *)a2[1];
  v17 = *a2;
  v18 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  NL::EntityConverter::EntityConverter((char *)a1 + 64, &v17);
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *((_QWORD *)a1 + 13) = 0;
  *((_QWORD *)a1 + 13) = NLGraphStructureStackCreate();
  NL::ParseBuilder::reset(a1);
  return a1;
}

void sub_1A18449E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void NL::ParseBuilder::reset(NL::ParseBuilder *this)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  NLGraphStructureStackReset(*((_QWORD *)this + 13));
  NL::ParserContext::reset(*((NL::ParserContext **)this + 2));
  v2 = operator new(0x38uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &unk_1E45CEE40;
  v2[5] = 0;
  v2[6] = 0;
  v2[4] = 0;
  *((_QWORD *)&v6 + 1) = v2;
  *((_DWORD *)v2 + 6) = 0;
  *(_QWORD *)&v6 = v2 + 3;
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)this, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void NL::EntityConverter::~EntityConverter(NL::EntityConverter *this)
{
  std::unique_ptr<NL::Transcriber>::reset[abi:ne180100]((NL::Transcriber **)this + 4, 0);
  std::unique_ptr<NL::NumericConverter>::reset[abi:ne180100]((NL::NumericConverter **)this + 3, 0);
  std::unique_ptr<NL::DateConverter>::reset[abi:ne180100]((uint64_t *)this + 2, 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void NL::ParseBuilder::~ParseBuilder(NL::ParseBuilder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 13);
  if (v2)
    NLGraphStructureStackRelease(v2);
  std::unique_ptr<NL::Transcriber>::reset[abi:ne180100]((NL::Transcriber **)this + 12, 0);
  std::unique_ptr<NL::NumericConverter>::reset[abi:ne180100]((NL::NumericConverter **)this + 11, 0);
  std::unique_ptr<NL::DateConverter>::reset[abi:ne180100]((uint64_t *)this + 10, 0);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void NL::ParseBuilder::enumerateAttributeNamesWithType(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4)
{
  BOOL v8;
  int v9;
  std::string *v10;
  const char *v11;
  std::string *v12;
  std::string::size_type size;
  int data;
  int v15;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  std::string::__raw *v25;
  std::string *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  std::string *v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  NL::ParserContext *v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string::size_type v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string __p;
  std::string v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  std::string v66;
  std::string v67;

  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v67, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  else
    v67 = *a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v66 = *(std::string *)a3;
  std::string::basic_string[abi:ne180100]<0>(v64, "FROM");
  if (endswith((uint64_t *)a2, (uint64_t *)v64))
  {
    v8 = 1;
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "OF");
  if (startswith((unsigned __int8 *)a2, (unsigned __int8 *)v62))
  {
    v8 = 1;
    goto LABEL_18;
  }
  v9 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v9 & 0x80000000) == 0)
  {
    v10 = a2;
    if (v9 != 2)
      goto LABEL_17;
LABEL_16:
    v8 = LOWORD(v10->__r_.__value_.__l.__data_) == 22850;
    goto LABEL_18;
  }
  if (a2->__r_.__value_.__l.__size_ == 2)
  {
    v10 = (std::string *)a2->__r_.__value_.__r.__words[0];
    goto LABEL_16;
  }
LABEL_17:
  v8 = 0;
LABEL_18:
  if (v63 < 0)
    operator delete(v62[0]);
LABEL_20:
  if (v65 < 0)
  {
    operator delete(v64[0]);
    if (v8)
      goto LABEL_24;
  }
  else if (v8)
  {
    goto LABEL_24;
  }
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a2->__r_.__value_.__l.__size_;
    if (size == 2 && *(_WORD *)a2->__r_.__value_.__l.__data_ == 20308)
      goto LABEL_142;
    if (size == 5)
    {
      v12 = (std::string *)a2->__r_.__value_.__r.__words[0];
LABEL_33:
      data = (int)v12->__r_.__value_.__l.__data_;
      v15 = v12->__r_.__value_.__s.__data_[4];
      if (data == 1414415699 && v15 == 79)
        goto LABEL_142;
    }
  }
  else
  {
    if (*((_BYTE *)&a2->__r_.__value_.__s + 23) != 2)
    {
      v12 = a2;
      if (*((_BYTE *)&a2->__r_.__value_.__s + 23) != 5)
        goto LABEL_40;
      goto LABEL_33;
    }
    if (LOWORD(a2->__r_.__value_.__l.__data_) == 20308)
      goto LABEL_142;
  }
LABEL_40:
  std::string::basic_string[abi:ne180100]<0>(v64, "WITH");
  v17 = startswith((unsigned __int8 *)a2, (unsigned __int8 *)v64);
  v18 = v17;
  if (v65 < 0)
  {
    operator delete(v64[0]);
    if (v18)
      goto LABEL_42;
LABEL_46:
    std::string::basic_string[abi:ne180100]<0>(v64, "SHARED");
    v20 = startswith((unsigned __int8 *)a2, (unsigned __int8 *)v64);
    v21 = v20;
    if (v65 < 0)
    {
      operator delete(v64[0]);
      if (v21)
      {
LABEL_48:
        std::string::basic_string[abi:ne180100]<0>(v64, "WITH");
        v22 = endswith((uint64_t *)a2, (uint64_t *)v64);
        if (v65 < 0)
          operator delete(v64[0]);
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
        if (v22)
        {
          if ((v23 & 0x10000000000) != 0)
            goto LABEL_142;
          MEMORY[0x1A1B0DE04](&v67, "SENDER");
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v55, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
          else
            v55 = v67;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v54, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
          else
            v54 = v66;
          (*(void (**)(uint64_t, std::string *, std::string *))(a4 + 16))(a4, &v55, &v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_142;
          v26 = &v55;
          goto LABEL_141;
        }
        if ((v23 & 0x10000000000) == 0)
        {
          if ((v23 & 4) == 0)
          {
            MEMORY[0x1A1B0DE04](&v67, "SENDER");
            if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v53, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
            else
              v53 = v67;
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v52, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
            else
              v52 = v66;
            (*(void (**)(uint64_t, std::string *, std::string *))(a4 + 16))(a4, &v53, &v52);
            if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v52.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_142;
            v26 = &v53;
            goto LABEL_141;
          }
          v11 = "RECIPIENT.HasShared";
LABEL_179:
          v30 = &v66;
          goto LABEL_144;
        }
        goto LABEL_124;
      }
    }
    else if (v20)
    {
      goto LABEL_48;
    }
    v24 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v24 < 0)
    {
      if (a2->__r_.__value_.__l.__size_ != 8)
      {
LABEL_78:
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "FROMTO"))
        {
          v27 = *(_QWORD *)(a1 + 16);
          v28 = *(_QWORD *)(v27 + 48);
          if ((v28 & 4) == 0)
          {
            v29 = (*(_QWORD *)(v27 + 48) & 0x12) != 0;
            if ((v28 & 0x10000000000) != 0)
              v29 = 0;
            v11 = "SENDER";
            v30 = &v67;
            if ((v28 & 0x400) != 0 || v29)
              goto LABEL_144;
            if ((v28 & 0x10000000414) != 0)
            {
              v11 = "RECIPIENT";
LABEL_144:
              MEMORY[0x1A1B0DE04](v30, v11);
              goto LABEL_145;
            }
            if (((v28 & 0x6000000000) != 0 || *(_DWORD *)(v27 + 40) == 3) && *(_QWORD *)(v27 + 88))
              goto LABEL_144;
            MEMORY[0x1A1B0DE04](&v67, "SENDER");
            if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v51, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
            else
              v51 = v67;
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v50, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
            else
              v50 = v66;
            (*(void (**)(uint64_t, std::string *, std::string *))(a4 + 16))(a4, &v51, &v50);
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v50.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_142;
            v26 = &v51;
LABEL_141:
            operator delete(v26->__r_.__value_.__l.__data_);
            goto LABEL_142;
          }
          goto LABEL_24;
        }
        std::string::basic_string[abi:ne180100]<0>(v64, "AUTHORED");
        v31 = startswith((unsigned __int8 *)a2, (unsigned __int8 *)v64);
        if (v65 < 0)
          operator delete(v64[0]);
        if (v31)
        {
          v32 = *(_QWORD *)(a1 + 16);
          v33 = *(_QWORD *)(v32 + 48);
          if ((v33 & 0xC0000018000) == 0
            && *(_DWORD *)(v32 + 40) != 3
            && ((v33 & 0x4000) == 0 || (v33 & 0x300) == 0 && (*(_DWORD *)(v32 + 88) & 0xFFFFFFFE) == 0))
          {
            std::string::operator=(&v67, a2);
            goto LABEL_145;
          }
          MEMORY[0x1A1B0DE04](&v67, "SENDER");
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 53) & 1) == 0)
            goto LABEL_145;
          goto LABEL_178;
        }
        std::string::basic_string[abi:ne180100]<0>(v64, "OWNER");
        v34 = startswith((unsigned __int8 *)a2, (unsigned __int8 *)v64);
        if (v65 < 0)
          operator delete(v64[0]);
        v35 = *(NL::ParserContext **)(a1 + 16);
        if (v34)
        {
          v36 = *((_QWORD *)v35 + 6);
          if ((v36 & 0x1C012) == 0)
          {
            if ((v36 & 4) == 0)
              goto LABEL_145;
            MEMORY[0x1A1B0DE04](&v67, "RECEIVEMOD");
            v11 = "HasReceived";
            goto LABEL_179;
          }
LABEL_97:
          MEMORY[0x1A1B0DE04](&v67, "SENTMOD");
          v11 = "HasSent";
          goto LABEL_179;
        }
        if (!NL::ParserContext::currentActionContainsSent(v35)
          || !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a3, "HasUserSent"))
        {
          if (NL::ParserContext::currentActionContainsReceived(*(NL::ParserContext **)(a1 + 16))
            && std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a3, "HasUserReceived"))
          {
            goto LABEL_142;
          }
          if (std::string::find[abi:ne180100]((uint64_t *)a2, "USERSENT", 0) != -1)
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a3, "Received"))
            {
              goto LABEL_124;
            }
LABEL_142:
            v11 = "RECIPIENT";
            goto LABEL_143;
          }
          if (std::string::find[abi:ne180100]((uint64_t *)a2, "USERRECEIVED", 0) == -1)
          {
            std::string::basic_string[abi:ne180100]<0>(v64, "AIRDROPPED");
            if (startswith((unsigned __int8 *)a2, (unsigned __int8 *)v64))
            {
              v39 = 1;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v62, "MESSAGED");
              if (startswith((unsigned __int8 *)a2, (unsigned __int8 *)v62))
              {
                v39 = 1;
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(v48, "MAILED");
                if (startswith((unsigned __int8 *)a2, (unsigned __int8 *)v48))
                {
                  v39 = 1;
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(v46, "POSTED");
                  v39 = startswith((unsigned __int8 *)a2, (unsigned __int8 *)v46);
                  if (v47 < 0)
                    operator delete(v46[0]);
                }
                if (v49 < 0)
                  operator delete(v48[0]);
              }
              if (v63 < 0)
                operator delete(v62[0]);
            }
            if (v65 < 0)
              operator delete(v64[0]);
            if (v39)
            {
              v11 = "TRANSPORT";
              goto LABEL_143;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "USERACTION"))
            {
              v40 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
              if ((v40 & 0x40040004000) == 0x40000000)
              {
                MEMORY[0x1A1B0DE04](&v67, "USERCREATED");
                v11 = "HasUserCreated";
                goto LABEL_179;
              }
              if ((v40 & 0x100000000) != 0)
              {
                MEMORY[0x1A1B0DE04](&v67, "USERMODIFIED");
                v11 = "HasUserModified";
                goto LABEL_179;
              }
              if ((v40 & 0x800000000) != 0)
              {
                MEMORY[0x1A1B0DE04](&v67, "USERPRINTED");
                v11 = "HasUserPrinted";
                goto LABEL_179;
              }
              if ((v40 & 0x8000000800) != 0)
                goto LABEL_145;
              if ((v40 & 0x2070C0000012) != 0)
                goto LABEL_124;
              if ((v40 & 0x404) == 0)
                goto LABEL_145;
LABEL_225:
              MEMORY[0x1A1B0DE04](&v67, "RECIPIENT");
              v11 = "HasUserReceived";
              goto LABEL_179;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "USERCREATED"))
            {
              if ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 48) & 0x1C000) == 0)
                goto LABEL_145;
              goto LABEL_97;
            }
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "SENTMOD"))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "RECEIVEMOD"))
              {
                if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "MAILSENDER"))
                  goto LABEL_145;
                MEMORY[0x1A1B0DE04](&v67, "KIND");
                v11 = "MailKind";
                goto LABEL_179;
              }
              v43 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
              if ((v43 & 0x1E000800041ELL) != 0 && (v43 & 0x10000000010) == 0)
                goto LABEL_145;
              goto LABEL_225;
            }
            v41 = *(_QWORD *)(a1 + 16);
            v42 = *(_QWORD *)(v41 + 48);
            if ((v42 & 0x8000000000) == 0 && ((v42 & 0x1E0008000C1ELL) == 0 || (v42 & 0x10000000010) != 0))
              goto LABEL_124;
            if ((v42 & 4) != 0 || !*(_QWORD *)(v41 + 88))
              goto LABEL_145;
LABEL_116:
            v11 = "";
            goto LABEL_143;
          }
        }
LABEL_24:
        v11 = "SENDER";
LABEL_143:
        v30 = &v67;
        goto LABEL_144;
      }
      v25 = (std::string::__raw *)a2->__r_.__value_.__r.__words[0];
    }
    else
    {
      v25 = (std::string::__raw *)a2;
      if (v24 != 8)
        goto LABEL_78;
    }
    if (v25->__words[0] == 0x544E455352455355)
    {
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a3, "Contact"))
        goto LABEL_142;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 53) & 0x10) == 0)
      {
LABEL_124:
        MEMORY[0x1A1B0DE04](&v67, "SENDER");
LABEL_178:
        v11 = "HasUserSent";
        goto LABEL_179;
      }
      goto LABEL_116;
    }
    goto LABEL_78;
  }
  if (!v17)
    goto LABEL_46;
LABEL_42:
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  if ((v19 & 0x8000000000) == 0)
  {
    MEMORY[0x1A1B0DE04](&v67, "SENDER");
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v57, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    else
      v57 = v67;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v56, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
    else
      v56 = v66;
    (*(void (**)(uint64_t, std::string *, std::string *))(a4 + 16))(a4, &v57, &v56);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_142;
    v26 = &v57;
    goto LABEL_141;
  }
  if ((v19 & 0x10000000000) == 0)
  {
    MEMORY[0x1A1B0DE04](&v67, "SENDER");
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v59, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    else
      v59 = v67;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v58, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
    else
      v58 = v66;
    (*(void (**)(uint64_t, std::string *, std::string *))(a4 + 16))(a4, &v59, &v58);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_142;
    v26 = &v59;
    goto LABEL_141;
  }
  MEMORY[0x1A1B0DE04](&v67, "RECIPIENT");
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v61, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  else
    v61 = v67;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v60, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v60 = v66;
  (*(void (**)(uint64_t, std::string *, std::string *))(a4 + 16))(a4, &v61, &v60);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
LABEL_145:
  v37 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v37 = v67.__r_.__value_.__l.__size_;
  if (v37)
  {
    v38 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = v66.__r_.__value_.__l.__size_;
    if (v38)
    {
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v45, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
        if ((*((_BYTE *)&v66.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_153;
      }
      else
      {
        v45 = v67;
        if ((*((_BYTE *)&v66.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_153:
          __p = v66;
LABEL_156:
          (*(void (**)(uint64_t, std::string *, std::string *))(a4 + 16))(a4, &v45, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v45.__r_.__value_.__l.__data_);
          goto LABEL_160;
        }
      }
      std::string::__init_copy_ctor_external(&__p, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
      goto LABEL_156;
    }
  }
LABEL_160:
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
}

void sub_1A1845814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 137) < 0)
    operator delete(*(void **)(v28 - 160));
  if (*(char *)(v28 - 113) < 0)
    operator delete(*(void **)(v28 - 136));
  if (*(char *)(v28 - 89) < 0)
    operator delete(*(void **)(v28 - 112));
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

unint64_t std::string::find[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v8;
  void *v9;
  char *v10;
  int64_t v11;
  char *v12;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
  }
  v7 = strlen(__s);
  if (v6 < a3)
    return -1;
  v8 = v7;
  if (v7)
  {
    v9 = (void *)(v5 + a3);
    v10 = (char *)(v5 + v6);
    v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      v14 = *__s;
      do
      {
        v15 = v11 - v8;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16)
          break;
        v12 = v16;
        if (!memcmp(v16, __s, v8))
          goto LABEL_9;
        v9 = v12 + 1;
        v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    v12 = v10;
LABEL_9:
    if (v12 == v10)
      return -1;
    else
      return (unint64_t)&v12[-v5];
  }
  return a3;
}

void NL::ParseBuilder::getAttributeForBranchAtIndex(uint64_t a1@<X0>, CFArrayRef *a2@<X1>, CFArrayRef *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  NL::SearchGrammar *v10;
  unsigned int Root;
  char *Symbol;
  NL::SearchGrammar *v13;
  unsigned int Leaf;
  char *v15;
  NL::SearchGrammar *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t TokenSpan;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFIndex v29;
  CFIndex v30;
  CFIndex v31;
  int Score;
  int Location;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD v50[5];
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  std::string __p;
  std::string v56;
  CFRange v57;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v10 = *(NL::SearchGrammar **)(a1 + 48);
  Root = NLBranchGetRoot(a2);
  Symbol = NL::SearchGrammar::getSymbol(v10, Root);
  NL::SearchGrammar::getValidRootName((uint64_t)Symbol, &v56);
  v13 = *(NL::SearchGrammar **)(a1 + 48);
  Leaf = NLBranchGetLeaf(a2);
  v15 = NL::SearchGrammar::getSymbol(v13, Leaf);
  NL::SearchGrammar::getValidLeafName((uint64_t)v15, &__p);
  if (!a3)
    goto LABEL_12;
  v16 = *(NL::SearchGrammar **)(a1 + 48);
  v17 = NLBranchGetRoot(a2);
  v18 = NLBranchGetRoot(a3);
  if (!NL::SearchGrammar::isEquivalent(v16, v17, v18))
  {
    TokenSpan = NLBranchGetTokenSpan((uint64_t)a2);
    v21 = v20;
    v22 = NLBranchGetTokenSpan((uint64_t)a3);
    if (TokenSpan <= v22)
      v24 = v22;
    else
      v24 = TokenSpan;
    v25 = TokenSpan + v21;
    if (TokenSpan + v21 >= v22 + v23)
      v25 = v22 + v23;
    if (v25 <= v24)
      v24 = -1;
    if (v24 == -1 || (NLBranchGetTokenSpan((uint64_t)a2), v27 = v26, NLBranchGetTokenSpan((uint64_t)a3), v27 >= v28))
    {
LABEL_12:
      v29 = NLBranchGetTokenSpan((uint64_t)a2);
      v31 = v30;
      Score = NLBranchGetScore((uint64_t)a2);
      Location = NLBranchGetLocation((uint64_t)a2);
      v34 = (char *)operator new(0xA0uLL);
      *((_QWORD *)v34 + 2) = 0;
      *(_QWORD *)v34 = &unk_1E45CEF20;
      *((_QWORD *)v34 + 1) = 0;
      *((_QWORD *)v34 + 3) = v29;
      *((_QWORD *)v34 + 4) = v31;
      *(_OWORD *)(v34 + 40) = xmmword_1A18D3A50;
      *((_DWORD *)v34 + 14) = Score;
      *(_QWORD *)(v34 + 60) = 0;
      *(_OWORD *)(v34 + 72) = 0u;
      *(_OWORD *)(v34 + 88) = 0u;
      *(_OWORD *)(v34 + 104) = 0u;
      *(_OWORD *)(v34 + 120) = 0u;
      *(_OWORD *)(v34 + 136) = 0u;
      *((_QWORD *)v34 + 19) = 0;
      *(_QWORD *)&v54 = v34 + 24;
      *((_QWORD *)&v54 + 1) = v34;
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](a5, &v54);
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
      if (*((_QWORD *)&v54 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = *(_QWORD *)a5;
      NL::QueryTokenizer::getEntityAtLocation(*(_QWORD *)(a1 + 32), Location, &v52);
      NL::ParseAttribute::setEntity(v38, &v52);
      v39 = v53;
      if (v53)
      {
        p_shared_owners = (unint64_t *)&v53->__shared_owners_;
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(_QWORD *)a5;
      v57.location = v29;
      v57.length = v31;
      *(_QWORD *)(v42 + 16) = NL::QueryTokenizer::tokenRangeAtTokenizationIndexForSpan(*(NL::QueryTokenizer **)(a1 + 32), a4, v57);
      *(_QWORD *)(v42 + 24) = v43;
      v50[0] = MEMORY[0x1E0C809B0];
      v50[1] = 1174405120;
      v50[2] = ___ZN2NL12ParseBuilder28getAttributeForBranchAtIndexEP9_NLBranchS2_l_block_invoke;
      v50[3] = &__block_descriptor_tmp_4;
      v44 = *(std::__shared_weak_count **)(a5 + 8);
      v50[4] = *(_QWORD *)a5;
      v51 = v44;
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      NL::ParseBuilder::enumerateAttributeNamesWithType(a1, &v56, (uint64_t)&__p, (uint64_t)v50);
      NL::ParseAttribute::close(*(NL::ParseAttribute **)a5);
      v47 = v51;
      if (v51)
      {
        v48 = (unint64_t *)&v51->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
}

void sub_1A1845EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;

  if (a24 < 0)
    operator delete(__p);
  if (*(char *)(v25 - 65) < 0)
    operator delete(*(void **)(v25 - 88));
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

_QWORD *NL::ParseAttribute::setEntity(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  int v5;

  result = std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)(a1 + 48), a2);
  if (*a2)
  {
    v5 = *(_DWORD *)(*a2 + 112);
    switch(v5)
    {
      case 1:
        *(_BYTE *)(a1 + 36) = 1;
        break;
      case 7:
        *(_BYTE *)(a1 + 38) = 1;
        break;
      case 5:
        *(_BYTE *)(a1 + 37) = 1;
        break;
    }
  }
  return result;
}

void ___ZN2NL12ParseBuilder28getAttributeForBranchAtIndexEP9_NLBranchS2_l_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  std::string __p;
  std::string v6;

  v4 = *(_QWORD **)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  NL::ParseAttribute::addNameWithType(v4, (__int128 *)&v6, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1A18460B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NL::ParseAttribute::addNameWithType(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t result;

  v5 = a1 + 8;
  v6 = a1[9];
  if (v6 >= a1[10])
  {
    v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, a2);
    v7 = v6 + 24;
  }
  a1[9] = v7;
  v8 = a1 + 11;
  v9 = a1[12];
  if (v9 >= a1[13])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v8, a3);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v8, a3);
    result = v9 + 24;
  }
  a1[12] = result;
  return result;
}

uint64_t __copy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t a1)
{
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 32);
}

void NL::ParseAttribute::close(NL::ParseAttribute *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  __int128 *v7;
  __int128 v8;
  int64_t size;
  std::string *v10;
  char *v11;
  int64_t v12;
  std::string *v13;
  char *v14;
  int64_t v16;
  std::string *v17;
  char *v18;
  int v20;
  int64_t v21;
  std::string *v22;
  char *v23;
  int64_t v25;
  std::string *v26;
  char *v27;
  int64_t v29;
  std::string *v30;
  char *v31;
  int64_t v33;
  std::string *v34;
  char *v35;
  std::string *v37;
  char *v38;
  __int128 *v40;
  std::string v42;

  v1 = *((_QWORD *)this + 6);
  v2 = *(_QWORD *)(v1 + 128);
  v3 = *(std::__shared_weak_count **)(v1 + 136);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
  {
    v7 = (__int128 *)*((_QWORD *)this + 8);
    v40 = (__int128 *)*((_QWORD *)this + 9);
    if (v7 != v40)
    {
      while (1)
      {
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
        }
        else
        {
          v8 = *v7;
          v42.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
          *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v8;
        }
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
        else
          size = v42.__r_.__value_.__l.__size_;
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &v42;
        else
          v10 = (std::string *)v42.__r_.__value_.__r.__words[0];
        v11 = (char *)v10 + size;
        if (size > 9)
        {
          v12 = size;
          v13 = v10;
          do
          {
            v14 = (char *)memchr(v13, 66, v12 - 9);
            if (!v14)
              break;
            if (*(_QWORD *)v14 == 0x414445524F464542 && *((_WORD *)v14 + 4) == 17748)
            {
              if (v14 != v11 && v14 - (char *)v10 != -1)
              {
LABEL_39:
                v20 = 4;
                goto LABEL_103;
              }
              break;
            }
            v13 = (std::string *)(v14 + 1);
            v12 = v11 - (char *)v13;
          }
          while (v11 - (char *)v13 >= 10);
          v16 = size;
          v17 = v10;
          do
          {
            v18 = (char *)memchr(v17, 66, v16 - 9);
            if (!v18)
              break;
            if (*(_QWORD *)v18 == 0x495445524F464542 && *((_WORD *)v18 + 4) == 17741)
            {
              if (v18 == v11 || v18 - (char *)v10 == -1)
                break;
              goto LABEL_39;
            }
            v17 = (std::string *)(v18 + 1);
            v16 = v11 - (char *)v17;
          }
          while (v11 - (char *)v17 > 9);
        }
        if (size >= 9)
        {
          v21 = size;
          v22 = v10;
          do
          {
            v23 = (char *)memchr(v22, 65, v21 - 8);
            if (!v23)
              break;
            if (*(_QWORD *)v23 == 0x5441445245544641 && v23[8] == 69)
            {
              if (v23 != v11 && v23 - (char *)v10 != -1)
              {
LABEL_61:
                v20 = 5;
                goto LABEL_103;
              }
              break;
            }
            v22 = (std::string *)(v23 + 1);
            v21 = v11 - (char *)v22;
          }
          while (v11 - (char *)v22 >= 9);
          v25 = size;
          v26 = v10;
          do
          {
            v27 = (char *)memchr(v26, 65, v25 - 8);
            if (!v27)
              break;
            if (*(_QWORD *)v27 == 0x4D49545245544641 && v27[8] == 69)
            {
              if (v27 != v11 && v27 - (char *)v10 != -1)
                goto LABEL_61;
              break;
            }
            v26 = (std::string *)(v27 + 1);
            v25 = v11 - (char *)v26;
          }
          while (v11 - (char *)v26 >= 9);
          v29 = size;
          v30 = v10;
          do
          {
            v31 = (char *)memchr(v30, 83, v29 - 8);
            if (!v31)
              break;
            if (*(_QWORD *)v31 == 0x54414445434E4953 && v31[8] == 69)
            {
              if (v31 != v11 && v31 - (char *)v10 != -1)
              {
LABEL_82:
                v20 = 6;
                goto LABEL_103;
              }
              break;
            }
            v30 = (std::string *)(v31 + 1);
            v29 = v11 - (char *)v30;
          }
          while (v11 - (char *)v30 >= 9);
          v33 = size;
          v34 = v10;
          do
          {
            v35 = (char *)memchr(v34, 83, v33 - 8);
            if (!v35)
              break;
            if (*(_QWORD *)v35 == 0x4D495445434E4953 && v35[8] == 69)
            {
              if (v35 == v11 || v35 - (char *)v10 == -1)
                break;
              goto LABEL_82;
            }
            v34 = (std::string *)(v35 + 1);
            v33 = v11 - (char *)v34;
          }
          while (v11 - (char *)v34 >= 9);
        }
        if (size >= 6)
        {
          v37 = v10;
          do
          {
            v38 = (char *)memchr(v37, 84, size - 5);
            if (!v38)
              break;
            if (*(_DWORD *)v38 == 1094995796 && *((_WORD *)v38 + 2) == 17748)
            {
              if (v38 != v11 && v38 - (char *)v10 != -1)
                goto LABEL_95;
              break;
            }
            v37 = (std::string *)(v38 + 1);
            size = v11 - (char *)v37;
          }
          while (v11 - (char *)v37 >= 6);
        }
        if (std::string::find[abi:ne180100]((uint64_t *)&v42, "TOTIME", 0) != -1)
          break;
        if (std::string::find[abi:ne180100]((uint64_t *)&v42, "FROMDATE", 0) != -1
          || std::string::find[abi:ne180100]((uint64_t *)&v42, "STARTDATE", 0) != -1
          || std::string::find[abi:ne180100]((uint64_t *)&v42, "ENDDATE", 0) != -1
          || std::string::find[abi:ne180100]((uint64_t *)&v42, "FROMTIME", 0) != -1
          || std::string::find[abi:ne180100]((uint64_t *)&v42, "STARTTIME", 0) != -1
          || std::string::find[abi:ne180100]((uint64_t *)&v42, "ENDTIME", 0) != -1)
        {
          v20 = 2;
          goto LABEL_103;
        }
        if (std::string::find[abi:ne180100]((uint64_t *)&v42, "ANYDATE", 0) != -1
          || std::string::find[abi:ne180100]((uint64_t *)&v42, "ANYTIME", 0) != -1)
        {
          v20 = 1;
          goto LABEL_103;
        }
LABEL_104:
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        v7 = (__int128 *)((char *)v7 + 24);
        if (v7 == v40)
          return;
      }
LABEL_95:
      v20 = 7;
LABEL_103:
      *((_DWORD *)this + 10) = v20;
      goto LABEL_104;
    }
  }
}

void NL::ParseBuilder::getQuoteAttributeForEntity(uint64_t *a1@<X1>, NL::ParseAttribute **a2@<X8>)
{
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NL::ParseAttribute *v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;

  *a2 = 0;
  a2[1] = 0;
  v4 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E45CEF20;
  *((_QWORD *)v4 + 1) = 0;
  *(_OWORD *)(v4 + 24) = xmmword_1A18D3A50;
  *(_OWORD *)(v4 + 40) = xmmword_1A18D3A50;
  *((_DWORD *)v4 + 14) = 1;
  *(_QWORD *)(v4 + 60) = 0;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_QWORD *)v4 + 19) = 0;
  *(_QWORD *)&v23 = v4 + 24;
  *((_QWORD *)&v23 + 1) = v4;
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)a2, &v23);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (uint64_t)*a2;
  v9 = *a1;
  *((_OWORD *)*a2 + 1) = *(_OWORD *)(*a1 + 96);
  v10 = (std::__shared_weak_count *)a1[1];
  v21 = v9;
  v22 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  NL::ParseAttribute::setEntity(v8, &v21);
  v13 = v22;
  if (v22)
  {
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v19, "QUOTED");
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  NL::ParseAttribute::addNameWithType(v16, (__int128 *)v19, (__int128 *)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  NL::ParseAttribute::close(*a2);
}

void sub_1A184685C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

uint64_t NL::ParseBuilder::getFunctionTokenCountForSpan(NL::ParseBuilder *this, CFRange a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  if (!a2.length)
    return 0;
  result = 0;
  v5 = *((_QWORD *)this + 4);
  v6 = *(_QWORD **)(v5 + 208);
  v7 = *(_QWORD **)(v5 + 216);
  do
  {
    v8 = v6;
    if (v6 != v7)
    {
      v8 = v6;
      while (*v8 != a3 || v8[1] != a2.location - 1 + a2.length)
      {
        v8 += 2;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v8 != v7)
      ++result;
    --a2.length;
  }
  while (a2.length);
  return result;
}

void NL::ParseBuilder::updateIntentsForParseAtIndex(uint64_t a1, CFArrayRef *a2, uint64_t a3, uint64_t a4)
{
  const __CFAllocator *v8;
  CFRange v9;
  uint64_t FunctionTokenCountForSpan;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  _QWORD *v39;
  char *v40;
  _QWORD v41[9];
  _QWORD v42[16];
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  void **v47;
  void ***v48;
  uint64_t v49;
  __n128 (*v50)(_QWORD *, uint64_t);
  void (*v51)(uint64_t);
  void *__p;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t **v56;
  uint64_t v57;
  __n128 (*v58)(_QWORD *, uint64_t);
  void (*v59)(uint64_t);
  _QWORD v60[3];
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  __n128 (*v64)(uint64_t, uint64_t);
  uint64_t (*v65)(uint64_t);
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _QWORD v70[6];
  std::__shared_weak_count *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  __n128 (*v75)(uint64_t, uint64_t);
  uint64_t (*v76)();
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;

  v91 = 0;
  v92 = &v91;
  v93 = 0x2000000000;
  v94 = 0;
  v87 = 0;
  v88 = &v87;
  v89 = 0x2000000000;
  v90 = 0;
  v83 = 0;
  v84 = &v83;
  v85 = 0x2000000000;
  v86 = 0;
  v79 = 0;
  v80 = &v79;
  v81 = 0x2000000000;
  v82 = 0;
  v72 = 0;
  v73 = &v72;
  v74 = 0x3802000000;
  v75 = __Block_byref_object_copy__1;
  v76 = __Block_byref_object_dispose__1;
  v78 = 0;
  v77 = 0;
  v70[0] = 0;
  v70[1] = v70;
  v70[2] = 0x3802000000;
  v70[3] = __Block_byref_object_copy__42;
  v70[4] = __Block_byref_object_dispose__43;
  v71 = 0;
  v70[5] = 0;
  v68 = 0;
  v69 = 0;
  v61 = 0;
  v62 = &v61;
  v64 = __Block_byref_object_copy__44;
  v65 = __Block_byref_object_dispose__45;
  v63 = 0x3802000000;
  _ZNSt3__115allocate_sharedB8ne180100IN2NL11ParseIntentENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v66);
  v55 = 0;
  v56 = (uint64_t **)&v55;
  v57 = 0x4002000000;
  v58 = __Block_byref_object_copy__46;
  v59 = __Block_byref_object_dispose__47;
  memset(v60, 0, sizeof(v60));
  v47 = 0;
  v48 = &v47;
  v49 = 0x4002000000;
  v50 = __Block_byref_object_copy__48;
  v51 = __Block_byref_object_dispose__49;
  v53 = 0;
  v54 = 0;
  __p = 0;
  v43 = 0;
  v44 = &v43;
  v45 = 0x2000000000;
  v46 = 0;
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 0x40000000;
  v42[2] = ___ZN2NL12ParseBuilder28updateIntentsForParseAtIndexEP8_NLParsell_block_invoke;
  v42[3] = &unk_1E45CFB00;
  v42[4] = v70;
  v42[5] = &v87;
  v42[14] = a1;
  v42[15] = a4;
  v42[6] = &v91;
  v42[7] = &v47;
  v42[8] = &v43;
  v42[9] = &v55;
  v42[10] = &v61;
  v42[11] = &v72;
  v42[12] = &v79;
  v42[13] = &v83;
  NLParseEnumerateBranches(a2, (uint64_t)v42);
  NL::ParseBuilder::merge(a1, v56 + 5);
  v8 = (const __CFAllocator *)v88[3];
  if (v8)
    NLBranchRelease(v8);
  v9.location = v73[6] + v73[5];
  if (a3 <= v9.location)
  {
    v11 = v80[3];
  }
  else
  {
    v9.length = a3 - v9.location;
    FunctionTokenCountForSpan = NL::ParseBuilder::getFunctionTokenCountForSpan((NL::ParseBuilder *)a1, v9, a4);
    v11 = v80[3] + FunctionTokenCountForSpan;
    v80[3] = v11;
  }
  v12 = v84[3];
  if (v12 == 1 && (v48[6] != v48[5] || *((_BYTE *)v44 + 24)))
  {
    v13 = v62[5];
    *(_DWORD *)v13 = 0;
    v15 = *(_QWORD *)(v13 + 40);
    for (i = *(_QWORD *)(v13 + 48); i != v15; i = std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](i - 16))
      ;
    *(_QWORD *)(v13 + 48) = v15;
    v48[6] = v48[5];
    goto LABEL_15;
  }
  v16 = v11 + v12;
  if (v16 < a3)
  {
LABEL_15:
    v17 = *(_QWORD **)(a1 + 32);
    v41[0] = MEMORY[0x1E0C809B0];
    v41[1] = 0x40000000;
    v41[2] = ___ZN2NL12ParseBuilder28updateIntentsForParseAtIndexEP8_NLParsell_block_invoke_2;
    v41[3] = &unk_1E45CFB28;
    v41[4] = &v47;
    v41[5] = v70;
    v41[6] = &v83;
    v41[7] = &v61;
    v41[8] = a1;
    NL::QueryTokenizer::enumerateQuotedEntities(v17, (uint64_t)v41);
    v16 = v80[3] + v84[3];
  }
  if (v16 >= a3)
  {
    v18 = *((_DWORD *)v92 + 6);
  }
  else
  {
    *((_DWORD *)v92 + 6) = 0;
    v18 = 0;
  }
  *(_DWORD *)v62[5] = v18;
  v19 = v62[5];
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v39, (const void ***)(*(_QWORD *)(a1 + 16) + 96));
  if ((_QWORD **)(v19 + 16) != &v39)
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)(v19 + 16), v39, &v40);
  std::__tree<std::string>::destroy((uint64_t)&v39, v40);
  v20 = v62[5];
  *(_DWORD *)(v20 + 4) = NL::ParserContext::primaryCategory(*(NL::ParserContext **)(a1 + 16));
  v21 = v62[5];
  *(_DWORD *)(v21 + 8) = NL::ParserContext::secondaryCategory(*(NL::ParserContext **)(a1 + 16));
  v22 = *(_QWORD *)a1;
  v23 = v62[6];
  *(_QWORD *)&v38 = v62[5];
  *((_QWORD *)&v38 + 1) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  NL::ParseIntents::add(v22, &v38);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v55, 8);
  v47 = (void **)v60;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v47);
  _Block_object_dispose(&v61, 8);
  v29 = v67;
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v69;
  if (v69)
  {
    v33 = (unint64_t *)&v69->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  _Block_object_dispose(v70, 8);
  v35 = v71;
  if (v71)
  {
    v36 = (unint64_t *)&v71->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  _Block_object_dispose(&v72, 8);
  _Block_object_dispose(&v79, 8);
  _Block_object_dispose(&v83, 8);
  _Block_object_dispose(&v87, 8);
  _Block_object_dispose(&v91, 8);
}

void sub_1A1846E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a68;
  char a70;
  uint64_t v70;

  std::__tree<std::string>::destroy((uint64_t)&a13, (char *)a14);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  if (__p)
  {
    a51 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a53, 8);
  a45 = a10;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  _Block_object_dispose(&a61, 8);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a68);
  _Block_object_dispose(&a70, 8);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x210]);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose((const void *)(v70 - 232), 8);
  _Block_object_dispose((const void *)(v70 - 200), 8);
  _Block_object_dispose((const void *)(v70 - 168), 8);
  _Block_object_dispose((const void *)(v70 - 136), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 __Block_byref_object_copy__42(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__43(uint64_t a1)
{
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 40);
}

__n128 __Block_byref_object_copy__44(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__45(uint64_t a1)
{
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 40);
}

__n128 __Block_byref_object_copy__46(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__47(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

__n128 __Block_byref_object_copy__48(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__49(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN2NL12ParseBuilder28updateIntentsForParseAtIndexEP8_NLParsell_block_invoke(_QWORD *a1, CFArrayRef *a2)
{
  NL::ParseBuilder *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t TokenSpan;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int Location;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  CFRange v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  const __CFAllocator *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;

  v4 = (NL::ParseBuilder *)a1[14];
  NL::ParseBuilder::getAttributeForBranchAtIndex((uint64_t)v4, a2, *(CFArrayRef **)(*(_QWORD *)(a1[5] + 8) + 24), a1[15], (uint64_t)&v59);
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](*(_QWORD *)(a1[4] + 8) + 40, &v59);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40))
  {
    *(float *)(*(_QWORD *)(a1[6] + 8) + 24) = *(float *)(*(_QWORD *)(a1[6] + 8) + 24)
                                                + (float)NLBranchGetScore((uint64_t)a2);
    TokenSpan = NLBranchGetTokenSpan((uint64_t)a2);
    v10 = v9;
    v11 = *(_QWORD *)(a1[4] + 8);
    v12 = *(_QWORD *)(v11 + 40);
    if (*(_BYTE *)(v12 + 37))
    {
      v13 = *(_QWORD **)(a1[7] + 8);
      Location = NLBranchGetLocation((uint64_t)a2);
      v15 = Location;
      v16 = (char *)v13[6];
      v17 = v13[7];
      if ((unint64_t)v16 >= v17)
      {
        v19 = (char *)v13[5];
        v20 = (v16 - v19) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        v21 = v17 - (_QWORD)v19;
        v22 = (uint64_t)(v17 - (_QWORD)v19) >> 2;
        if (v22 <= v20 + 1)
          v22 = v20 + 1;
        if (v21 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(v13 + 7), v23);
          v19 = (char *)v13[5];
          v16 = (char *)v13[6];
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[8 * v20];
        v26 = &v24[8 * v23];
        *(_QWORD *)v25 = v15;
        v18 = v25 + 8;
        while (v16 != v19)
        {
          v27 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v25 - 1) = v27;
          v25 -= 8;
        }
        v13[5] = v25;
        v13[6] = v18;
        v13[7] = v26;
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v16 = Location;
        v18 = v16 + 8;
      }
      v13[6] = v18;
      v11 = *(_QWORD *)(a1[4] + 8);
      v12 = *(_QWORD *)(v11 + 40);
    }
    if (*(_BYTE *)(v12 + 38))
    {
      *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = 1;
      v11 = *(_QWORD *)(a1[4] + 8);
    }
    std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100]((char **)(*(_QWORD *)(a1[9] + 8) + 40), (__int128 *)(v11 + 40));
    v28 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    if (!v28)
      goto LABEL_48;
    v29 = NLBranchGetTokenSpan(v28);
    if (TokenSpan <= v29)
      v31 = v29;
    else
      v31 = TokenSpan;
    v32 = TokenSpan + v10;
    if (TokenSpan + v10 >= v29 + v30)
      v32 = v29 + v30;
    if (v32 <= v31)
      v31 = -1;
    if (v31 != -1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(a1[10] + 8) + 40);
      v34 = *(_QWORD *)(a1[4] + 8);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(std::__shared_weak_count **)(v34 + 48);
      v57 = v36;
      v58 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v38 = __ldxr(p_shared_owners);
        while (__stxr(v38 + 1, p_shared_owners));
      }
      NL::ParseIntent::append(v33, &v57);
      v39 = v58;
      if (!v58)
        goto LABEL_59;
      v40 = (unint64_t *)&v58->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
LABEL_57:
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
LABEL_59:
      v53 = *(_QWORD *)(a1[11] + 8);
      *(_QWORD *)(v53 + 40) = TokenSpan;
      *(_QWORD *)(v53 + 48) = v10;
      v54 = *(const __CFAllocator **)(*(_QWORD *)(a1[5] + 8) + 24);
      if (v54)
        NLBranchRelease(v54);
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = NLBranchRetain((uint64_t)a2);
      return;
    }
    v42 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    if (!v42 || (TokenSpan == NLBranchGetTokenSpan(v42) ? (v44 = v10 == v43) : (v44 = 0), !v44))
    {
LABEL_48:
      v45.location = *(_QWORD *)(*(_QWORD *)(a1[11] + 8) + 48) + *(_QWORD *)(*(_QWORD *)(a1[11] + 8) + 40);
      if (TokenSpan > v45.location)
      {
        v45.length = TokenSpan - v45.location;
        *(_QWORD *)(*(_QWORD *)(a1[12] + 8) + 24) += NL::ParseBuilder::getFunctionTokenCountForSpan(v4, v45, a1[15]);
      }
      *(_QWORD *)(*(_QWORD *)(a1[13] + 8) + 24) += v10;
    }
    v46 = *(_QWORD *)(*(_QWORD *)(a1[10] + 8) + 40);
    v47 = *(_QWORD *)(a1[4] + 8);
    v49 = *(_QWORD *)(v47 + 40);
    v48 = *(std::__shared_weak_count **)(v47 + 48);
    v55 = v49;
    v56 = v48;
    if (v48)
    {
      v50 = (unint64_t *)&v48->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    NL::ParseIntent::add(v46, &v55);
    v39 = v56;
    if (!v56)
      goto LABEL_59;
    v52 = (unint64_t *)&v56->__shared_owners_;
    do
      v41 = __ldaxr(v52);
    while (__stlxr(v41 - 1, v52));
    goto LABEL_57;
  }
}

void sub_1A18473FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

void NL::ParseBuilder::merge(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  _BOOL4 v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  int v70;
  int v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  int v95;
  int v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  int v118;
  int v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  int v137;
  void *v138;
  uint64_t shared_weak_owners;
  NL::Entity *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  int v148;
  int v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  _QWORD v188[9];
  std::__shared_weak_count *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  __n128 (*v193)(uint64_t, uint64_t);
  uint64_t (*v194)(uint64_t);
  uint64_t v195;
  std::__shared_weak_count *v196;
  void *__p;
  void **p_p;
  uint64_t v199;
  __n128 (*v200)(uint64_t, uint64_t);
  uint64_t (*v201)(uint64_t);
  uint64_t v202;
  std::__shared_weak_count *v203;
  _QWORD v204[5];
  std::__shared_weak_count *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  _QWORD v208[6];
  std::__shared_weak_count *v209;
  _QWORD v210[5];
  std::__shared_weak_count *v211;
  uint64_t *v212;
  _QWORD v213[5];
  std::__shared_weak_count *v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  uint64_t v233;
  std::__shared_weak_count *v234;

  v2 = *a2;
  v3 = a2[1];
  if ((unint64_t)((char *)v3 - (char *)*a2) < 0x20)
    return;
  v233 = 0;
  v234 = 0;
  v231 = 0;
  v232 = 0;
  v229 = 0;
  v230 = 0;
  v227 = 0;
  v228 = 0;
  v225 = 0;
  v226 = 0;
  v223 = 0;
  v224 = 0;
  v221 = 0;
  v222 = 0;
  v219 = 0;
  v220 = 0;
  v217 = 0;
  v218 = 0;
  v5 = MEMORY[0x1E0C809B0];
  if (v2 == v3)
    goto LABEL_189;
  do
  {
    v6 = *v2;
    if (!*(_BYTE *)(*v2 + 36))
      goto LABEL_147;
    v7 = *(_QWORD *)(v6 + 48);
    v8 = *(std::__shared_weak_count **)(v6 + 56);
    if (!v8)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (!v7)
        goto LABEL_147;
    }
    else
    {
LABEL_9:
      if (!v7)
        goto LABEL_147;
    }
    v12 = *(_QWORD *)(*v2 + 48);
    v13 = *(std::__shared_weak_count **)(*v2 + 56);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = *(_QWORD *)(v12 + 128);
    v17 = *(std::__shared_weak_count **)(v12 + 136);
    if (!v17)
      goto LABEL_18;
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if (!v13)
        goto LABEL_26;
    }
    else
    {
LABEL_18:
      if (!v13)
        goto LABEL_26;
    }
    v21 = (unint64_t *)&v13->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_26:
    if (!v16)
      goto LABEL_147;
    v24 = *(uint64_t **)(*v2 + 48);
    v23 = *(std::__shared_weak_count **)(*v2 + 56);
    v190 = (uint64_t)v24;
    v191 = v23;
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "CalendarTime");
    v27 = endswith(v24, (uint64_t *)&__p);
    if (SHIBYTE(v199) < 0)
    {
      operator delete(__p);
      if (!v23)
        goto LABEL_37;
    }
    else if (!v23)
    {
      goto LABEL_37;
    }
    v28 = (unint64_t *)&v23->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (v29)
    {
LABEL_37:
      if (!v27)
        goto LABEL_77;
      goto LABEL_38;
    }
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (!v27)
    {
LABEL_77:
      v60 = v217;
      if (v217)
      {
        v61 = *v2;
        if (*(_DWORD *)(*v2 + 40) > 2u)
        {
          std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](&v221, &v217);
        }
        else
        {
          v62 = *(void **)(v61 + 48);
          v63 = *(_QWORD *)(v61 + 56);
          __p = v62;
          p_p = (void **)v63;
          if (v63)
          {
            v64 = (unint64_t *)(v63 + 8);
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
          v66 = *(_QWORD *)(v60 + 48);
          v67 = *(std::__shared_weak_count **)(v60 + 56);
          v190 = v66;
          v191 = v67;
          if (v67)
          {
            v68 = (unint64_t *)&v67->__shared_owners_;
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
          }
          v70 = *(_DWORD *)(*v2 + 40);
          v71 = *(_DWORD *)(v60 + 40);
          v208[0] = v5;
          v208[1] = 1174405120;
          v208[2] = ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_59;
          v208[3] = &__block_descriptor_tmp_60;
          v208[4] = v2;
          v208[5] = v60;
          v209 = v218;
          if (v218)
          {
            v72 = (unint64_t *)&v218->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          NL::EntityConverter::merge(a1 + 64, (NL::Entity *)v62, v70, v66, v71, (uint64_t)v208);
          v74 = v209;
          if (v209)
          {
            v75 = (unint64_t *)&v209->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          if (v191)
          {
            v77 = &v191->__shared_owners_;
            do
              v78 = __ldaxr((unint64_t *)v77);
            while (__stlxr(v78 - 1, (unint64_t *)v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
              std::__shared_weak_count::__release_weak(v191);
            }
          }
          v79 = (std::__shared_weak_count *)p_p;
          if (p_p)
          {
            v80 = (unint64_t *)(p_p + 1);
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
        }
        v83 = v218;
        v217 = 0;
        v218 = 0;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
      }
      std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](&v219, v2);
      switch(*(_DWORD *)(*v2 + 40))
      {
        case 1:
          v82 = &v233;
          goto LABEL_146;
        case 2:
          v82 = &v231;
          goto LABEL_146;
        case 4:
          v82 = &v229;
          goto LABEL_146;
        case 5:
          v82 = &v227;
          goto LABEL_146;
        case 6:
          v82 = &v225;
          goto LABEL_146;
        case 7:
          v82 = &v223;
          goto LABEL_146;
        default:
          goto LABEL_147;
      }
      goto LABEL_147;
    }
LABEL_38:
    v30 = v219;
    v31 = v217;
    if (v219)
    {
      if (v217)
      {
        v32 = *(void **)(v219 + 48);
        v33 = *(_QWORD *)(v219 + 56);
        __p = v32;
        p_p = (void **)v33;
        if (v33)
        {
          v34 = (unint64_t *)(v33 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v36 = *(_QWORD *)(v31 + 48);
        v37 = *(std::__shared_weak_count **)(v31 + 56);
        v190 = v36;
        v191 = v37;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v40 = *(_DWORD *)(v30 + 40);
        v41 = *(_DWORD *)(v31 + 40);
        v213[0] = v5;
        v213[1] = 1174405120;
        v213[2] = ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke;
        v213[3] = &__block_descriptor_tmp_56;
        v213[4] = v30;
        v214 = v220;
        if (v220)
        {
          v42 = (unint64_t *)&v220->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        v215 = v31;
        v216 = v218;
        if (v218)
        {
          v44 = (unint64_t *)&v218->__shared_owners_;
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        NL::EntityConverter::merge(a1 + 64, (NL::Entity *)v32, v40, v36, v41, (uint64_t)v213);
        v46 = v220;
        v219 = 0;
        v220 = 0;
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](&v217, v2);
        v49 = v216;
        if (v216)
        {
          v50 = (unint64_t *)&v216->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v52 = v214;
        if (v214)
        {
          v53 = (unint64_t *)&v214->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        if (v191)
        {
          v55 = &v191->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
            std::__shared_weak_count::__release_weak(v191);
          }
        }
        v57 = (std::__shared_weak_count *)p_p;
        if (p_p)
        {
          v58 = (unint64_t *)(p_p + 1);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          goto LABEL_153;
        }
      }
      else
      {
        v86 = *v2;
        if (*(_DWORD *)(*v2 + 40) > 2u)
        {
          std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](&v217, v2);
          std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](&v221, v2);
        }
        else
        {
          v87 = *(void **)(v219 + 48);
          v88 = *(_QWORD *)(v219 + 56);
          __p = v87;
          p_p = (void **)v88;
          if (v88)
          {
            v89 = (unint64_t *)(v88 + 8);
            do
              v90 = __ldxr(v89);
            while (__stxr(v90 + 1, v89));
            v86 = *v2;
          }
          v91 = *(_QWORD *)(v86 + 48);
          v92 = *(std::__shared_weak_count **)(v86 + 56);
          v190 = v91;
          v191 = v92;
          if (v92)
          {
            v93 = (unint64_t *)&v92->__shared_owners_;
            do
              v94 = __ldxr(v93);
            while (__stxr(v94 + 1, v93));
            v86 = *v2;
          }
          v95 = *(_DWORD *)(v30 + 40);
          v96 = *(_DWORD *)(v86 + 40);
          v210[0] = v5;
          v210[1] = 1174405120;
          v210[2] = ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_57;
          v210[3] = &__block_descriptor_tmp_58;
          v210[4] = v30;
          v211 = v220;
          if (v220)
          {
            v97 = (unint64_t *)&v220->__shared_owners_;
            do
              v98 = __ldxr(v97);
            while (__stxr(v98 + 1, v97));
          }
          v212 = v2;
          NL::EntityConverter::merge(a1 + 64, (NL::Entity *)v87, v95, v91, v96, (uint64_t)v210);
          v99 = v211;
          if (v211)
          {
            v100 = (unint64_t *)&v211->__shared_owners_;
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
          if (v191)
          {
            v102 = &v191->__shared_owners_;
            do
              v103 = __ldaxr((unint64_t *)v102);
            while (__stlxr(v103 - 1, (unint64_t *)v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
              std::__shared_weak_count::__release_weak(v191);
            }
          }
          v104 = (std::__shared_weak_count *)p_p;
          if (p_p)
          {
            v105 = (unint64_t *)(p_p + 1);
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
        }
        v57 = v220;
        v219 = 0;
        v220 = 0;
        if (v57)
        {
          v107 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v107);
          while (__stlxr(v59 - 1, v107));
LABEL_153:
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
      }
    }
    else
    {
      if (v217)
        std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](&v221, &v217);
      v82 = &v217;
LABEL_146:
      std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](v82, v2);
    }
LABEL_147:
    v2 += 2;
  }
  while (v2 != v3);
  v108 = v219;
  if (v219)
  {
    v109 = v217;
    if (v217)
    {
      v110 = *(void **)(v219 + 48);
      v111 = *(_QWORD *)(v219 + 56);
      __p = v110;
      p_p = (void **)v111;
      if (v111)
      {
        v112 = (unint64_t *)(v111 + 8);
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
      }
      v114 = *(_QWORD *)(v109 + 48);
      v115 = *(std::__shared_weak_count **)(v109 + 56);
      v190 = v114;
      v191 = v115;
      if (v115)
      {
        v116 = (unint64_t *)&v115->__shared_owners_;
        do
          v117 = __ldxr(v116);
        while (__stxr(v117 + 1, v116));
      }
      v118 = *(_DWORD *)(v108 + 40);
      v119 = *(_DWORD *)(v109 + 40);
      v204[0] = v5;
      v204[1] = 1174405120;
      v204[2] = ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_61;
      v204[3] = &__block_descriptor_tmp_62;
      v204[4] = v108;
      v205 = v220;
      if (v220)
      {
        v120 = (unint64_t *)&v220->__shared_owners_;
        do
          v121 = __ldxr(v120);
        while (__stxr(v121 + 1, v120));
      }
      v206 = v109;
      v207 = v218;
      if (v218)
      {
        v122 = (unint64_t *)&v218->__shared_owners_;
        do
          v123 = __ldxr(v122);
        while (__stxr(v123 + 1, v122));
      }
      NL::EntityConverter::merge(a1 + 64, (NL::Entity *)v110, v118, v114, v119, (uint64_t)v204);
      v124 = v207;
      if (v207)
      {
        v125 = (unint64_t *)&v207->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
        }
      }
      v127 = v205;
      if (v205)
      {
        v128 = (unint64_t *)&v205->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      if (v191)
      {
        v130 = &v191->__shared_owners_;
        do
          v131 = __ldaxr((unint64_t *)v130);
        while (__stlxr(v131 - 1, (unint64_t *)v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
          std::__shared_weak_count::__release_weak(v191);
        }
      }
      v132 = (std::__shared_weak_count *)p_p;
      if (p_p)
      {
        v133 = (unint64_t *)(p_p + 1);
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
    }
  }
LABEL_189:
  __p = 0;
  p_p = &__p;
  v199 = 0x3802000000;
  v200 = __Block_byref_object_copy__42;
  v201 = __Block_byref_object_dispose__43;
  v202 = 0;
  v203 = 0;
  v190 = 0;
  v191 = (std::__shared_weak_count *)&v190;
  v192 = 0x3802000000;
  v193 = __Block_byref_object_copy__42;
  v194 = __Block_byref_object_dispose__43;
  v195 = 0;
  v196 = 0;
  if (v231)
  {
    if (v223)
    {
      v135 = &v223;
      goto LABEL_201;
    }
    if (v229)
    {
      v135 = &v229;
      goto LABEL_201;
    }
    if (v221)
    {
      v135 = &v221;
LABEL_201:
      v136 = &v231;
LABEL_222:
      std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](&v202, v136);
      std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](&v191[1].__shared_weak_owners_, v135);
      goto LABEL_223;
    }
LABEL_202:
    if (v225)
    {
      if (v229)
      {
        v135 = &v229;
      }
      else
      {
        if (!v221)
          goto LABEL_223;
        v135 = &v221;
      }
LABEL_209:
      v136 = &v225;
      goto LABEL_222;
    }
    v137 = 1;
    if (!v229)
      goto LABEL_216;
LABEL_211:
    if (v227)
    {
      v135 = &v229;
    }
    else
    {
      if (!v221)
        goto LABEL_216;
      v135 = &v221;
    }
    v136 = &v227;
    goto LABEL_222;
  }
  if (!v223)
    goto LABEL_202;
  if (v221)
  {
    v135 = &v223;
    v136 = &v221;
    goto LABEL_222;
  }
  v137 = v225;
  if (v225)
  {
    v135 = &v223;
    goto LABEL_209;
  }
  if (v229)
    goto LABEL_211;
LABEL_216:
  if (v233)
  {
    if (v137)
    {
      if (!v221)
        goto LABEL_223;
      v135 = &v221;
    }
    else
    {
      v135 = &v223;
    }
    v136 = &v233;
    goto LABEL_222;
  }
LABEL_223:
  v138 = p_p[5];
  if (v138)
  {
    shared_weak_owners = v191[1].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      v140 = (NL::Entity *)*((_QWORD *)v138 + 6);
      v141 = (std::__shared_weak_count *)*((_QWORD *)v138 + 7);
      v188[8] = v140;
      v189 = v141;
      if (v141)
      {
        v142 = (unint64_t *)&v141->__shared_owners_;
        do
          v143 = __ldxr(v142);
        while (__stxr(v143 + 1, v142));
        shared_weak_owners = v191[1].__shared_weak_owners_;
      }
      v144 = *(_QWORD *)(shared_weak_owners + 48);
      v145 = *(std::__shared_weak_count **)(shared_weak_owners + 56);
      v188[6] = v144;
      v188[7] = v145;
      if (v145)
      {
        v146 = (unint64_t *)&v145->__shared_owners_;
        do
          v147 = __ldxr(v146);
        while (__stxr(v147 + 1, v146));
        shared_weak_owners = v191[1].__shared_weak_owners_;
      }
      v148 = *((_DWORD *)p_p[5] + 10);
      v149 = *(_DWORD *)(shared_weak_owners + 40);
      v188[0] = v5;
      v188[1] = 0x40000000;
      v188[2] = ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_63;
      v188[3] = &unk_1E45CFB80;
      v188[4] = &__p;
      v188[5] = &v190;
      NL::EntityConverter::merge(a1 + 64, v140, v148, v144, v149, (uint64_t)v188);
      if (v145)
      {
        v150 = (unint64_t *)&v145->__shared_owners_;
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 - 1, v150));
        if (!v151)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }
      v152 = v189;
      if (v189)
      {
        v153 = (unint64_t *)&v189->__shared_owners_;
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
      }
    }
  }
  _Block_object_dispose(&v190, 8);
  v155 = v196;
  if (v196)
  {
    v156 = (unint64_t *)&v196->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  _Block_object_dispose(&__p, 8);
  v158 = v203;
  if (v203)
  {
    v159 = (unint64_t *)&v203->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = v218;
  if (v218)
  {
    v162 = (unint64_t *)&v218->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v220;
  if (v220)
  {
    v165 = (unint64_t *)&v220->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = v222;
  if (v222)
  {
    v168 = (unint64_t *)&v222->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = v224;
  if (v224)
  {
    v171 = (unint64_t *)&v224->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = v226;
  if (v226)
  {
    v174 = (unint64_t *)&v226->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = v228;
  if (v228)
  {
    v177 = (unint64_t *)&v228->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = v230;
  if (v230)
  {
    v180 = (unint64_t *)&v230->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v182 = v232;
  if (v232)
  {
    v183 = (unint64_t *)&v232->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = v234;
  if (v234)
  {
    v186 = (unint64_t *)&v234->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
}

void sub_1A1848414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v36);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v35);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v37 - 256);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v37 - 240);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v37 - 216);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v37 - 200);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v37 - 184);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v37 - 168);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v37 - 152);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v37 - 136);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v37 - 120);
  _Unwind_Resume(a1);
}

void ___ZN2NL12ParseBuilder28updateIntentsForParseAtIndexEP8_NLParsell_block_invoke_2(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;

  v4 = *(_QWORD *)(a1[4] + 8);
  v6 = *(_QWORD **)(v4 + 40);
  v5 = *(_QWORD **)(v4 + 48);
  if (v6 != v5)
  {
    while (*v6 != a3)
    {
      if (++v6 == v5)
      {
        v6 = v5;
        break;
      }
    }
  }
  if (v6 == v5)
  {
    v7 = a2[1];
    v27 = *a2;
    v28 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    NL::ParseBuilder::getQuoteAttributeForEntity(&v27, (NL::ParseAttribute **)&v29);
    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](*(_QWORD *)(a1[5] + 8) + 40, &v29);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    {
      ++*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
      v16 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40);
      v17 = *(_QWORD *)(a1[5] + 8);
      v19 = *(_QWORD *)(v17 + 40);
      v18 = *(std::__shared_weak_count **)(v17 + 48);
      v25 = v19;
      v26 = v18;
      if (v18)
      {
        v20 = (unint64_t *)&v18->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      NL::ParseIntent::add(v16, &v25);
      v22 = v26;
      if (v26)
      {
        v23 = (unint64_t *)&v26->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
  }
}

void sub_1A18486C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t NL::ParseIntents::add(uint64_t result, __int128 *a2)
{
  _DWORD *v3;
  int v4;

  if (*(_QWORD *)a2)
  {
    v3 = (_DWORD *)result;
    std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100]((char **)(result + 8), a2);
    v4 = NL::ParseIntent::confidence(*(NL::ParseIntent **)a2);
    result = *v3;
    if (v4 > (int)result)
      result = NL::ParseIntent::confidence(*(NL::ParseIntent **)a2);
    *v3 = result;
  }
  return result;
}

void ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = *(_QWORD *)(a1 + 32);
  v11 = *a2;
  if (v11)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = *a2;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CF1C0;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  }
  else
  {
    v5 = 0;
  }
  v12 = v5;
  *a2 = 0;
  NL::ParseAttribute::setEntity(v4, &v11);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v10 + 40) = 0;
  *(_BYTE *)(v10 + 39) = 1;
}

void sub_1A184880C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE48c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE48c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_57(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = *(_QWORD *)(a1 + 32);
  v11 = *a2;
  if (v11)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = *a2;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CF1C0;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  }
  else
  {
    v5 = 0;
  }
  v12 = v5;
  *a2 = 0;
  NL::ParseAttribute::setEntity(v4, &v11);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = **(_QWORD **)(a1 + 48);
  *(_DWORD *)(v10 + 40) = 0;
  *(_BYTE *)(v10 + 39) = 1;
}

void sub_1A1848964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_59(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = **(_QWORD **)(a1 + 32);
  v11 = *a2;
  if (v11)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = *a2;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CF1C0;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  }
  else
  {
    v5 = 0;
  }
  v12 = v5;
  *a2 = 0;
  NL::ParseAttribute::setEntity(v4, &v11);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(**(_QWORD **)(a1 + 32) + 40) = *(_DWORD *)(v10 + 40);
  *(_DWORD *)(v10 + 40) = 0;
  *(_BYTE *)(v10 + 39) = 1;
}

void sub_1A1848A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t a1)
{
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_61(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = *(_QWORD *)(a1 + 32);
  v11 = *a2;
  if (v11)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = *a2;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CF1C0;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  }
  else
  {
    v5 = 0;
  }
  v12 = v5;
  *a2 = 0;
  NL::ParseAttribute::setEntity(v4, &v11);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v10 + 40) = 0;
  *(_BYTE *)(v10 + 39) = 1;
}

void sub_1A1848B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_63(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  *(_QWORD *)&v10 = *a2;
  if ((_QWORD)v10)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E45CF1C0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *((_QWORD *)&v10 + 1) = v5;
  *a2 = 0;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100]((char **)(v4 + 112), &v10);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 40) = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) + 40) = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) + 39) = 1;
}

void sub_1A1848C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void NL::ParseBuilder::parse(NL::ParseBuilder *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  uint64_t TokenCount;
  CFArrayRef *ValueAtIndex;
  CFArrayRef *v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  BOOL v24;
  _QWORD v25[6];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  if (*((_QWORD *)this + 4))
  {
    v2 = *((_QWORD *)this + 13);
    if (v2)
    {
      if (*((_QWORD *)this + 6))
      {
        v3 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
        v30 = *((_QWORD *)this + 6);
        v31 = v3;
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldxr(p_shared_owners);
          while (__stxr(v5 + 1, p_shared_owners));
        }
        NLGraphStructureSetGrammar(v2, &v30);
        v6 = v31;
        if (v31)
        {
          v7 = (unint64_t *)&v31->__shared_owners_;
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v9 = *(_QWORD *)(*((_QWORD *)this + 4) + 192) - *(_QWORD *)(*((_QWORD *)this + 4) + 184);
        if (v9 >= 1)
        {
          v10 = 0;
          v11 = v9 / 0x18uLL;
          if (v11 <= 1)
            v12 = 1;
          else
            v12 = v11;
          do
          {
            v26 = 0;
            v27 = &v26;
            v28 = 0x2000000000;
            v29 = 0;
            v13 = *((_QWORD *)this + 4);
            v25[0] = MEMORY[0x1E0C809B0];
            v25[1] = 0x40000000;
            v25[2] = ___ZN2NL12ParseBuilder5parseEv_block_invoke;
            v25[3] = &unk_1E45CF838;
            v25[4] = &v26;
            v25[5] = this;
            NL::QueryTokenizer::enumerateEntitiesAtTokenizationIndex(v13, v10, (uint64_t)v25);
            v14 = NLGraphStructureStackCopyParsesWithCallback(*((_QWORD *)this + 13), *((_QWORD *)this + 6), (void (*)(uint64_t, CFArrayRef *, CFArrayRef *, _QWORD))parseIdentifier);
            if (v14)
            {
              NL::ParserContext::close(*((NL::ParserContext **)this + 2));
              Count = CFArrayGetCount(v14);
              if (Count >= 1)
              {
                v16 = 0;
                TokenCount = 0;
                do
                {
                  ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(v14, v16);
                  v19 = ValueAtIndex;
                  v20 = *(_DWORD *)(*((_QWORD *)this + 2) + 40);
                  v21 = v20 > 8;
                  v22 = (1 << v20) & 0x1DE;
                  v24 = v21 || v22 == 0 || TokenCount == 0;
                  if (!v24 && TokenCount != NLParseGetTokenCount((uint64_t)ValueAtIndex))
                    break;
                  NL::ParseBuilder::updateIntentsForParseAtIndex((uint64_t)this, v19, v27[3], v10);
                  TokenCount = NLParseGetTokenCount((uint64_t)v19);
                  ++v16;
                }
                while (Count != v16);
              }
              CFRelease(v14);
            }
            NLGraphStructureStackReset(*((_QWORD *)this + 13));
            NL::ParserContext::reset(*((NL::ParserContext **)this + 2));
            _Block_object_dispose(&v26, 8);
            ++v10;
          }
          while (v10 != v12);
        }
      }
    }
  }
}

void sub_1A1848ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN2NL12ParseBuilder5parseEv_block_invoke(uint64_t a1, uint64_t *a2, uint64_t a3, __int16 a4)
{
  uint64_t v7;
  int SymbolID;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v7 = *(_QWORD *)(a1 + 40);
  SymbolID = NL::SearchGrammar::getSymbolID(*(_QWORD *)(v7 + 48), *a2);
  NLGraphStructureStackAdd(*(_QWORD *)(v7 + 104), SymbolID, (__int16)a3, a4);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v10 = *(_QWORD *)(v9 + 24);
  if (v10)
    v11 = v10 <= a3;
  else
    v11 = 1;
  if (v11)
    *(_QWORD *)(v9 + 24) = v10 + 1;
}

NL::Transcriber *std::unique_ptr<NL::Transcriber>::reset[abi:ne180100](NL::Transcriber **a1, NL::Transcriber *a2)
{
  NL::Transcriber *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::Transcriber::~Transcriber(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

NL::NumericConverter *std::unique_ptr<NL::NumericConverter>::reset[abi:ne180100](NL::NumericConverter **a1, NL::NumericConverter *a2)
{
  NL::NumericConverter *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::NumericConverter::~NumericConverter(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

uint64_t std::unique_ptr<NL::DateConverter>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1A184907C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::string>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::string>::__emplace_multi<std::string const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1A18491F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::string>::__find_leaf_high(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

_QWORD *std::__tree<std::string>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::string>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

const void **std::__tree<std::string>::__emplace_multi<std::string const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  const void **v6;

  std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::string>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_1A1849378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__shared_ptr_emplace<NL::ParseAttribute>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEF20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::ParseAttribute>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEF20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

void std::__shared_ptr_emplace<NL::ParseAttribute>::__on_zero_shared(uint64_t a1)
{
  NL::ParseAttribute::~ParseAttribute((NL::ParseAttribute *)(a1 + 24));
}

void NL::ParseAttribute::~ParseAttribute(NL::ParseAttribute *this)
{
  void **v2;

  v2 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN2NL11ParseIntentENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x58uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN2NL11ParseIntentENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1A1849588(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN2NL11ParseIntentENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E45CEDD0;
  a1[1] = 0;
  NL::ParseIntent::ParseIntent((uint64_t)(a1 + 3));
  return a1;
}

void sub_1A18495D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NL::ParseIntent>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEDD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::ParseIntent>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEDD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

void std::__shared_ptr_emplace<NL::ParseIntent>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 64);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::string>::destroy(a1 + 40, *(char **)(a1 + 48));
}

void std::__shared_ptr_pointer<NL::Entity  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

NL::Entity *std::__shared_ptr_pointer<NL::Entity  *>::__on_zero_shared(uint64_t a1)
{
  NL::Entity *result;

  result = *(NL::Entity **)(a1 + 24);
  if (result)
  {
    NL::Entity::~Entity(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<NL::Entity  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void NL::Entity::~Entity(NL::Entity *this)
{
  const void *v2;
  void **v3;

  v2 = (const void *)*((_QWORD *)this + 15);
  if (v2)
    CFRelease(v2);
  v3 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__shared_ptr_emplace<NL::ParseIntents>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEE40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::ParseIntents>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEE40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

void std::__shared_ptr_emplace<NL::ParseIntents>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 32);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void NLHindiCanonicalizedMappings::NLHindiCanonicalizedMappings(NLHindiCanonicalizedMappings *this)
{
  NLHindiCanonicalizedMappings *v1;

  NLAbstractDictionaryLookup::NLAbstractDictionaryLookup(this);
  *(_QWORD *)v1 = &off_1E45CE160;
  NLHindiCanonicalizedMappings::loadDictMap(v1);
}

void sub_1A184989C(_Unwind_Exception *a1)
{
  NLAbstractDictionaryLookup *v1;

  NLAbstractDictionaryLookup::~NLAbstractDictionaryLookup(v1);
  _Unwind_Resume(a1);
}

void NLHindiCanonicalizedMappings::loadDictMap(NLHindiCanonicalizedMappings *this)
{
  NL::CFLogger *v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  std::string v6;

  getPathForResource(CFSTR("roman-canonical.dat"), &v6);
  v2 = (NL::CFLogger *)std::string::compare(&v6, "");
  if ((_DWORD)v2)
  {
    v3 = NL::StringMap::createWithFile((char *)&v6);
    *((_QWORD *)this + 1) = v3;
    if (!v3)
    {
      v4 = NL::CFLogger::sharedInstance(0);
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v4 + 16))(v4, 3, "Could not locate Canonicalization dictionary resource");
    }
  }
  else
  {
    v5 = NL::CFLogger::sharedInstance(v2);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v5 + 16))(v5, 3, "Could not locate Canonicalization dictionary resource");
    *((_QWORD *)this + 1) = 0;
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1A184995C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *NLHindiCanonicalizedMappings::getWord@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t *v4;

  v4 = *(uint64_t **)(a1 + 8);
  if (!v4)
    return std::string::basic_string[abi:ne180100]<0>(a3, "");
  NL::StringMap::get(v4, a2, a3);
  return (_QWORD *)std::string::compare(a3, "");
}

BOOL compare_date_components(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_DWORD *)(a1 + 8) != (unint64_t)*(unsigned int *)(a2 + 8))
    return 0;
  return *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

uint64_t compare_date_periods(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  const void *v9;
  const void *v10;
  _BOOL4 v11;
  unsigned int v12;

  v2 = *a1;
  v3 = *a2;
  if (*a1 == *a2)
    return 1;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  v6 = compare_date_components(v2 + 28, v3 + 28);
  v7 = compare_date_components(v2 + 92, v3 + 92);
  v8 = v7;
  v9 = *(const void **)(v2 + 8);
  v11 = v9 && (v10 = *(const void **)(v3 + 8)) != 0 && CFEqual(v9, v10) != 0;
  v12 = v8 && v11;
  if (v6)
    return v12;
  else
    return 0;
}

BOOL compare_entities(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  BOOL v3;
  _BOOL8 result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BOOL4 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 **v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  BOOL v35;

  v2 = *a1;
  if (*a1 == *a2)
    return 1;
  if (v2)
    v3 = *a2 == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  v7 = *((_QWORD *)v2 + 16);
  v8 = (std::__shared_weak_count *)*((_QWORD *)v2 + 17);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7)
  {
    v11 = *((_QWORD *)*a2 + 16);
    v12 = (std::__shared_weak_count *)*((_QWORD *)*a2 + 17);
    if (!v12)
    {
      v15 = v11 != 0;
      if (!v8)
        goto LABEL_27;
      goto LABEL_22;
    }
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = v11 != 0;
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 - 1, v13));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v8)
        goto LABEL_27;
      goto LABEL_22;
    }
  }
  else
  {
    v15 = 0;
  }
  if (!v8)
    goto LABEL_27;
LABEL_22:
  v17 = (unint64_t *)&v8->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_27:
  v19 = *a1;
  if (v15)
  {
    v21 = *((_QWORD *)v19 + 12);
    v20 = *((_QWORD *)v19 + 13);
    return v21 == *((_QWORD *)*a2 + 12) && v20 == *((_QWORD *)*a2 + 13);
  }
  v23 = (unsigned __int8 **)*a2;
  v24 = v19[23];
  if ((v24 & 0x80u) == 0)
    v25 = (unsigned __int8 *)v19[23];
  else
    v25 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
  v26 = (unsigned __int8 *)*((unsigned __int8 *)v23 + 23);
  v27 = (char)v26;
  if ((char)v26 < 0)
    v26 = v23[1];
  if (v25 != v26)
    return 0;
  if (v27 >= 0)
    v28 = *a2;
  else
    v28 = *v23;
  if ((v24 & 0x80) != 0)
    return memcmp(*(const void **)v19, v28, *((_QWORD *)v19 + 1)) == 0;
  if (!v19[23])
    return 1;
  v29 = v24 - 1;
  do
  {
    v31 = *v19++;
    v30 = v31;
    v33 = *v28++;
    v32 = v33;
    v35 = v29-- != 0;
    result = v30 == v32;
  }
  while (v30 == v32 && v35);
  return result;
}

uint64_t *enumerateIndexesOfRange(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char v25;

  v6 = result;
  v25 = 0;
  v7 = (_QWORD *)result[1];
  if (a2)
  {
    v9 = (_QWORD *)*result;
    if (v7 != (_QWORD *)*result)
    {
      v10 = ((uint64_t)v7 - *result) >> 4;
      do
      {
        v11 = v10 >> 1;
        v12 = &v9[2 * (v10 >> 1)];
        v14 = *v12;
        v13 = v12 + 2;
        v10 += ~(v10 >> 1);
        if (*(_QWORD *)(v14 + 104) + *(_QWORD *)(v14 + 96) <= a2)
          v9 = v13;
        else
          v10 = v11;
      }
      while (v10);
    }
    if (v9 != v7)
    {
      v15 = v9;
      do
      {
        v16 = *(_QWORD *)(*v15 + 96);
        if (v16 == a2 && *(_QWORD *)(*v15 + 104) == a3)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, ((uint64_t)v15 - *v6) >> 4, &v25);
          if (v25)
            return result;
          v7 = (_QWORD *)v6[1];
        }
        else if (v16 > a2)
        {
          return result;
        }
        v9 += 2;
        v15 += 2;
      }
      while (v9 != v7);
    }
  }
  else
  {
    v18 = *result;
    if (v7 != (_QWORD *)*result)
    {
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = *(_QWORD *)(v18 + v19);
        v22 = *(_QWORD *)(v21 + 96);
        v23 = *(_QWORD *)(v21 + 104);
        if (v22)
          v24 = 0;
        else
          v24 = v23 == a3;
        if (v24)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, char *))(a4 + 16))(a4, v20, &v25);
          if (v25)
            return result;
          v18 = *v6;
          v7 = (_QWORD *)v6[1];
        }
        else if (v22 > 0)
        {
          return result;
        }
        ++v20;
        v19 += 16;
      }
      while (v20 < ((uint64_t)v7 - v18) >> 4);
    }
  }
  return result;
}

BOOL containsRange(const __CFString *a1, CFIndex a2, CFIndex a3, _QWORD **a4, _BYTE *a5)
{
  const __CFCharacterSet *Predefined;
  _BOOL8 v11;
  _QWORD v13[5];
  uint64_t v14[3];
  CFRange result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  void **v20;
  CFRange v21;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  if (a1)
  {
    result = (CFRange)xmmword_1A18D3A50;
    Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
    v21.location = a2;
    v21.length = a3;
    if (CFStringFindCharacterFromSet(a1, Predefined, v21, 0, &result) && a2 == result.location && a3 == result.length)
    {
      v11 = 1;
      if (a5)
        *a5 = 1;
    }
    else
    {
      memset(v14, 0, sizeof(v14));
      std::vector<std::shared_ptr<NL::Entity>>::__init_with_size[abi:ne180100]<std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>((char *)v14, *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 0x40000000;
      v13[2] = ___Z13containsRangePK10__CFString7CFRangeNSt3__16vectorINS3_10shared_ptrIN2NL6EntityEEENS3_9allocatorIS8_EEEEPb_block_invoke;
      v13[3] = &unk_1E45CF410;
      v13[4] = &v16;
      enumerateIndexesOfRange(v14, a2, a3, (uint64_t)v13);
      v20 = (void **)v14;
      std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v20);
      v11 = *((_BYTE *)v17 + 24) != 0;
    }
  }
  else
  {
    v11 = 0;
  }
  _Block_object_dispose(&v16, 8);
  return v11;
}

void sub_1A1849F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v13;
  va_list va;

  va_start(va, a12);
  *(_QWORD *)(v13 - 56) = v12;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 56));
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z13containsRangePK10__CFString7CFRangeNSt3__16vectorINS3_10shared_ptrIN2NL6EntityEEENS3_9allocatorIS8_EEEEPb_block_invoke(uint64_t result, uint64_t a2, _BYTE *a3)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  *a3 = 1;
  return result;
}

void subtokenize(const __CFString *a1, CFIndex a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD **a6)
{
  CFIndex v12;
  _BOOL4 v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  CFIndex *v22;
  CFIndex *v23;
  unint64_t v25;
  CFIndex *v26;
  _QWORD *v27;
  CFIndex *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  CFIndex *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  void *v38[3];
  void *__p;
  char *v40;
  char *v41;
  _QWORD *v42[3];
  char v43;
  void **v44;

  if (a3 < 1)
    return;
  v12 = 1;
  while (1)
  {
    v43 = 0;
    memset(v42, 0, sizeof(v42));
    std::vector<std::shared_ptr<NL::Entity>>::__init_with_size[abi:ne180100]<std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>((char *)v42, *a6, a6[1], ((char *)a6[1] - (char *)*a6) >> 4);
    v13 = containsRange(a1, a2, v12, v42, &v43);
    __p = v42;
    std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v13)
      break;
LABEL_25:
    if (a3 == v12++)
      return;
  }
  if (a3 != v12)
  {
    __p = 0;
    v40 = 0;
    v41 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
    if (!v43)
    {
      v14 = v40;
      if (v40 >= v41)
      {
        v16 = (char *)__p;
        v17 = (v40 - (_BYTE *)__p) >> 4;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60)
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        v19 = v41 - (_BYTE *)__p;
        if ((v41 - (_BYTE *)__p) >> 3 > v18)
          v18 = v19 >> 3;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)&v41, v20);
          v16 = (char *)__p;
          v14 = v40;
        }
        else
        {
          v21 = 0;
        }
        v22 = (CFIndex *)&v21[16 * v17];
        *v22 = a2;
        v22[1] = v12;
        v23 = v22;
        if (v14 != v16)
        {
          do
          {
            *((_OWORD *)v23 - 1) = *((_OWORD *)v14 - 1);
            v23 -= 2;
            v14 -= 16;
          }
          while (v14 != v16);
          v16 = (char *)__p;
        }
        v15 = (char *)(v22 + 2);
        __p = v23;
        v40 = (char *)(v22 + 2);
        v41 = &v21[16 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v40 = a2;
        *((_QWORD *)v14 + 1) = v12;
        v15 = v14 + 16;
      }
      v40 = v15;
    }
    memset(v38, 0, sizeof(v38));
    std::vector<std::shared_ptr<NL::Entity>>::__init_with_size[abi:ne180100]<std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>((char *)v38, *a6, a6[1], ((char *)a6[1] - (char *)*a6) >> 4);
    subtokenize(a1, v12 + a2, a3 - v12, &__p, a5, v38);
    v44 = v38;
    std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v44);
    if (__p)
    {
      v40 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_25;
  }
  if (!v43)
  {
    v25 = *(_QWORD *)(a4 + 16);
    v26 = *(CFIndex **)(a4 + 8);
    if ((unint64_t)v26 >= v25)
    {
      v28 = *(CFIndex **)a4;
      v29 = ((uint64_t)v26 - *(_QWORD *)a4) >> 4;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 60)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v31 = v25 - (_QWORD)v28;
      if (v31 >> 3 > v30)
        v30 = v31 >> 3;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
        v32 = 0xFFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(a4 + 16, v32);
        v28 = *(CFIndex **)a4;
        v26 = *(CFIndex **)(a4 + 8);
      }
      else
      {
        v33 = 0;
      }
      v34 = (CFIndex *)&v33[16 * v29];
      v35 = &v33[16 * v32];
      *v34 = a2;
      v34[1] = a3;
      v27 = v34 + 2;
      if (v26 != v28)
      {
        do
        {
          *((_OWORD *)v34 - 1) = *((_OWORD *)v26 - 1);
          v34 -= 2;
          v26 -= 2;
        }
        while (v26 != v28);
        v28 = *(CFIndex **)a4;
      }
      *(_QWORD *)a4 = v34;
      *(_QWORD *)(a4 + 8) = v27;
      *(_QWORD *)(a4 + 16) = v35;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *v26 = a2;
      v26[1] = a3;
      v27 = v26 + 2;
    }
    *(_QWORD *)(a4 + 8) = v27;
  }
  v36 = a5[1];
  if (v36 >= a5[2])
  {
    v37 = std::vector<std::vector<CFRange>>::__push_back_slow_path<std::vector<CFRange> const&>(a5, a4);
  }
  else
  {
    std::vector<std::vector<CFRange>>::__construct_one_at_end[abi:ne180100]<std::vector<CFRange> const&>((uint64_t)a5, a4);
    v37 = v36 + 24;
  }
  a5[1] = v37;
}

void sub_1A184A270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NL::QueryTokenizer::QueryTokenizer(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const __CFAllocator *v17;
  CFCharacterSetRef v18;
  CFCharacterSetRef v19;
  CFCharacterSetRef v20;
  CFCharacterSetRef v21;
  __CFArray *Mutable;
  __CFArray *v23;
  __CFDictionary *v24;
  CFNumberRef v25;
  const void **v27;
  const void **v28;
  char valuePtr;
  __CFDictionary *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __CFArray *v33;

  *(_QWORD *)a1 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v7 = (uint64_t *)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  v27 = (const void **)(a1 + 72);
  v28 = (const void **)(a1 + 56);
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v8 = operator new();
  v9 = v8;
  v10 = (std::__shared_weak_count *)a2[1];
  v31 = *a2;
  v32 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  NL::EntityConverter::EntityConverter(v8, &v31);
  v13 = *v7;
  *v7 = v9;
  if (v13)
    std::default_delete<NL::EntityConverter>::operator()[abi:ne180100](a1 + 48, v13);
  v14 = v32;
  if (v32)
  {
    v15 = (unint64_t *)&v32->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v18 = CFCharacterSetCreateWithCharactersInString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("\"‟”“„″˝「」『』"));
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(v28, v18);
  v19 = CFCharacterSetCreateWithCharactersInString(v17, CFSTR("'’"));
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)(a1 + 64), v19);
  v20 = CFCharacterSetCreateWithCharactersInString(v17, CFSTR("sSdDvVmMrRlLtThH"));
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(v27, v20);
  v21 = CFCharacterSetCreateWithCharactersInString(v17, CFSTR(":："));
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)(a1 + 80), v21);
  NL::QueryTokenizer::setLocale((NL::QueryTokenizer *)a1, *(CFLocaleRef *)(*(_QWORD *)a1 + 8));
  Mutable = CFArrayCreateMutable(v17, 1, MEMORY[0x1E0C9B378]);
  v23 = Mutable;
  v33 = Mutable;
  if (Mutable)
    CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E0D174F0]);
  v24 = CFDictionaryCreateMutable(v17, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v30 = v24;
  if (v24)
  {
    valuePtr = 1;
    v25 = CFNumberCreate(v17, kCFNumberCharType, &valuePtr);
    if (v25)
    {
      CFDictionarySetValue(v24, (const void *)*MEMORY[0x1E0D17528], v25);
      CFRelease(v25);
    }
  }
  *(_QWORD *)(a1 + 32) = NLTaggerCreate();
  if (v24)
    CFRelease(v24);
  if (v23)
    CFRelease(v23);
  return a1;
}

void sub_1A184A57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, const void **a11, const void **a12, const void *a13, uint64_t a14, const void *a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  const void **v23;
  const void **v24;
  const void **v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  nlp::CFScopedPtr<__CFNumber const*>::reset(&a13, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset(&a15, 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)&a20, 0);
  v26 = (void *)v20[29];
  if (v26)
  {
    v20[30] = v26;
    operator delete(v26);
  }
  v27 = (void *)v20[26];
  if (v27)
  {
    v20[27] = v27;
    operator delete(v27);
  }
  a20 = v21 + 168;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  v28 = (void *)v20[17];
  if (v28)
  {
    v20[18] = v28;
    operator delete(v28);
  }
  v29 = (void *)v20[14];
  if (v29)
  {
    v20[15] = v29;
    operator delete(v29);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v21 + 88), 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset(v25, 0);
  nlp::CFScopedPtr<__CFSet const*>::reset((const void **)(v21 + 72), 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(v24, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(a11, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(v23, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(a12, 0);
  v30 = *v22;
  *v22 = 0;
  if (v30)
    std::default_delete<NL::EntityConverter>::operator()[abi:ne180100]((uint64_t)v22, v30);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v20);
  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<__CFCharacterSet const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void NL::QueryTokenizer::setLocale(NL::QueryTokenizer *this, CFLocaleRef locale)
{
  const __CFString *v3;
  const __CFString *Value;
  const __CFLocale *v5;
  const void **v6;
  BOOL v7;
  CFMutableSetRef Mutable;
  CFTypeRef v9;
  const __CFAllocator *v11;
  CFLocaleRef v12;

  if (!locale)
  {
    v6 = (const void **)((char *)this + 96);
    goto LABEL_10;
  }
  v3 = (const __CFString *)*MEMORY[0x1E0C9B088];
  Value = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  v6 = (const void **)((char *)this + 96);
  v5 = (const __CFLocale *)*((_QWORD *)this + 12);
  if (v5)
    v7 = Value == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (Value)
    {
LABEL_12:
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Value);
      nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this + 12, v12);
      Mutable = CFSetCreateMutable(v11, 0, MEMORY[0x1E0C9B3B0]);
      goto LABEL_13;
    }
LABEL_10:
    nlp::CFScopedPtr<__CFLocale const*>::reset(v6, 0);
    Mutable = 0;
LABEL_13:
    nlp::CFScopedPtr<__CFSet const*>::reset((const void **)this + 11, Mutable);
    return;
  }
  v9 = CFLocaleGetValue(v5, v3);
  if (!CFEqual(Value, v9))
    goto LABEL_12;
}

void NL::QueryTokenizer::~QueryTokenizer(NL::QueryTokenizer *this)
{
  const void *v2;
  const void **v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void **v9;

  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
    CFRelease(v2);
  v3 = (const void **)*((_QWORD *)this + 5);
  if (v3)
    NLEntityDetectorRelease(v3);
  v4 = (void *)*((_QWORD *)this + 29);
  if (v4)
  {
    *((_QWORD *)this + 30) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 26);
  if (v5)
  {
    *((_QWORD *)this + 27) = v5;
    operator delete(v5);
  }
  v9 = (void **)((char *)this + 184);
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v6 = (void *)*((_QWORD *)this + 17);
  if (v6)
  {
    *((_QWORD *)this + 18) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 14);
  if (v7)
  {
    *((_QWORD *)this + 15) = v7;
    operator delete(v7);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 13, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this + 12, 0);
  nlp::CFScopedPtr<__CFSet const*>::reset((const void **)this + 11, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 10, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 9, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 8, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 7, 0);
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
    std::default_delete<NL::EntityConverter>::operator()[abi:ne180100]((uint64_t)this + 48, v8);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void nlp::CFScopedPtr<__CFLocale const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void NL::QueryTokenizer::setEntityDetector(uint64_t a1, uint64_t a2)
{
  const void **v4;

  v4 = *(const void ***)(a1 + 40);
  if (v4)
  {
    NLEntityDetectorRelease(v4);
    *(_QWORD *)(a1 + 40) = 0;
  }
  if (a2)
    *(_QWORD *)(a1 + 40) = NLEntityDetectorRetain(a2);
}

void NL::QueryTokenizer::setString(const void **this, const __CFString *a2)
{
  CFTypeRef v4;

  NL::QueryTokenizer::reset((NL::QueryTokenizer *)this);
  if (a2)
  {
    v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFString const*>::reset(this + 13, v4);
  }
  NL::QueryTokenizer::tokenize((NL::QueryTokenizer *)this);
}

void NL::QueryTokenizer::reset(NL::QueryTokenizer *this)
{
  uint64_t i;
  uint64_t v3;

  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 13, &stru_1E45D0A48);
  *((_QWORD *)this + 15) = *((_QWORD *)this + 14);
  v3 = *((_QWORD *)this + 20);
  for (i = *((_QWORD *)this + 21); i != v3; i = std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](i - 16))
    ;
  *((_QWORD *)this + 21) = v3;
  *((_QWORD *)this + 18) = *((_QWORD *)this + 17);
  *((_QWORD *)this + 30) = *((_QWORD *)this + 29);
  std::vector<std::vector<CFRange>>::__clear[abi:ne180100]((uint64_t *)this + 23);
  *((_QWORD *)this + 27) = *((_QWORD *)this + 26);
  *((_QWORD *)this + 32) = 0;
}

void NL::QueryTokenizer::tokenize(NL::QueryTokenizer *this)
{
  const void *v2;
  _QWORD *v3;
  void **v4;
  const __CFString *v5;
  CFIndex Length;
  __int128 *i;
  uint64_t *v8;
  const void **v9;
  uint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void **v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t *v29;
  unint64_t v30;
  const void **v31;
  const void **v32;
  _QWORD v33[6];
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[3];
  void *__p;
  void *v40;
  uint64_t v41;
  void **v42;
  void **v43;
  uint64_t v44;
  _QWORD *v45[3];
  const void **v46;
  const void **v47;
  uint64_t v48;
  void **v49;
  void **v50;
  uint64_t v51;
  __int128 v52;
  const void *v53;
  uint64_t *v54;
  __int128 *v55;
  uint64_t v56;
  CFRange v57;

  if (*((_QWORD *)this + 4) && *((_QWORD *)this + 13))
  {
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v2 = (const void *)NL::QueryTokenizer::copySearchStringAndTokenize((CFStringRef *)this);
    v53 = v2;
    if (!v2)
    {
LABEL_15:
      v49 = (void **)&v54;
      std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v49);
      return;
    }
    if (*((_QWORD *)this + 4)
      && *((_QWORD *)this + 5)
      && (NL::QueryTokenizer::containsLegacyQuerySyntax((CFCharacterSetRef *)this, *((const __CFString **)this + 13)) & 1) == 0
      && *((uint64_t *)this + 32) <= 20)
    {
      v57.length = CFStringGetLength(*((CFStringRef *)this + 13));
      v57.location = 0;
      NL::EntityConverter::entityWithString(*((_QWORD *)this + 6), *((CFStringRef *)this + 13), v57, &v49);
      *(_QWORD *)&v52 = v49;
      if (v49)
      {
        v3 = (_QWORD *)operator new();
        v4 = v49;
        *v3 = &unk_1E45CF1C0;
        v3[1] = 0;
        v3[2] = 0;
        v3[3] = v4;
      }
      else
      {
        v3 = 0;
      }
      *((_QWORD *)&v52 + 1) = v3;
      v49 = 0;
      std::unique_ptr<NL::Entity>::reset[abi:ne180100]((NL::Entity **)&v49, 0);
      if ((_QWORD)v52)
      {
        std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100]((char **)this + 20, &v52);
      }
      else
      {
        NL::QueryTokenizer::updateEntitiesWithQuotedTextValues((uint64_t)this, (uint64_t *)&v54);
        NL::QueryTokenizer::updateEntitiesWithKnownValues(this, (uint64_t)v2, (uint64_t *)&v54);
        NL::QueryTokenizer::updateEntitiesWithUnknownValues((uint64_t)this, (uint64_t)&v54);
        if (v55 != (__int128 *)v54)
        {
          std::sort[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity> *>,entity_greater_than_range>(v54, v55);
          v49 = 0;
          v50 = 0;
          v51 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v5 = (const __CFString *)*((_QWORD *)this + 13);
          Length = CFStringGetLength(v5);
          memset(v45, 0, sizeof(v45));
          std::vector<std::shared_ptr<NL::Entity>>::__init_with_size[abi:ne180100]<std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>((char *)v45, v54, v55, ((char *)v55 - (char *)v54) >> 4);
          subtokenize(v5, 0, Length, (uint64_t)&v49, (uint64_t *)&v46, v45);
          v42 = (void **)v45;
          std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v42);
          std::sort[abi:ne180100]<std::__wrap_iter<std::vector<CFRange> *>,ranges_greater_than_range>((uint64_t)v46, v47);
          if (v47 != v46)
          {
            std::vector<std::shared_ptr<NL::Entity>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity>*>,std::__wrap_iter<std::shared_ptr<NL::Entity>*>>((uint64_t *)this + 20, *((_QWORD *)this + 21), v54, (uint64_t *)v55, ((char *)v55 - (char *)v54) >> 4);
            v8 = v54;
            for (i = v55;
                  i != (__int128 *)v8;
            v55 = (__int128 *)v8;
            v9 = v46;
            v31 = v47;
            if (v46 != v47)
            {
              v10 = 0;
              do
              {
                v42 = 0;
                v43 = 0;
                v44 = 0;
                std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v42, *v9, (uint64_t)v9[1], ((_BYTE *)v9[1] - (_BYTE *)*v9) >> 4);
                __p = 0;
                v40 = 0;
                v41 = 0;
                std::vector<std::vector<CFRange>>::push_back[abi:ne180100]((uint64_t *)this + 23, (uint64_t)&__p);
                if (__p)
                {
                  v40 = __p;
                  operator delete(__p);
                }
                v11 = v42;
                v12 = v43;
                if (v42 != v43)
                {
                  v32 = v9;
                  v13 = 0;
                  do
                  {
                    v14 = (uint64_t)*v11;
                    v15 = (uint64_t)v11[1];
                    memset(v38, 0, sizeof(v38));
                    std::vector<std::shared_ptr<NL::Entity>>::__init_with_size[abi:ne180100]<std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>((char *)v38, *((_QWORD **)this + 20), *((_QWORD **)this + 21), (uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 4);
                    v33[0] = MEMORY[0x1E0C809B0];
                    v33[1] = 1174405120;
                    v33[2] = ___ZN2NL14QueryTokenizer8tokenizeEv_block_invoke;
                    v33[3] = &__block_descriptor_tmp_36;
                    v33[4] = this;
                    v33[5] = v13;
                    v35 = 0;
                    v36 = 0;
                    v34 = 0;
                    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v34, v42, (uint64_t)v43, ((char *)v43 - (char *)v42) >> 4);
                    v37 = v10;
                    enumerateIndexesOfRange(v38, v14, v15, (uint64_t)v33);
                    __p = v38;
                    std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                    if (v34)
                    {
                      v35 = v34;
                      operator delete(v34);
                    }
                    v11 += 2;
                    ++v13;
                  }
                  while (v11 != v12);
                  v11 = v42;
                  v9 = v32;
                }
                if (v11)
                {
                  v43 = v11;
                  operator delete(v11);
                }
                ++v10;
                v9 += 3;
              }
              while (v9 != v31);
            }
            v17 = *((_QWORD *)this + 20);
            v16 = *((_QWORD *)this + 21);
            if (v16 != v17)
            {
              v18 = 0;
              v19 = (void **)((char *)this + 232);
              do
              {
                if (*(_DWORD *)(*(_QWORD *)(v17 + 16 * v18) + 112) == 5)
                {
                  v21 = (unint64_t *)*((_QWORD *)this + 30);
                  v20 = *((_QWORD *)this + 31);
                  if ((unint64_t)v21 >= v20)
                  {
                    v23 = (unint64_t *)*v19;
                    v24 = ((char *)v21 - (_BYTE *)*v19) >> 3;
                    v25 = v24 + 1;
                    if ((unint64_t)(v24 + 1) >> 61)
                      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
                    v26 = v20 - (_QWORD)v23;
                    if (v26 >> 2 > v25)
                      v25 = v26 >> 2;
                    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
                      v27 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v27 = v25;
                    if (v27)
                    {
                      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)this + 248, v27);
                      v23 = (unint64_t *)*((_QWORD *)this + 29);
                      v21 = (unint64_t *)*((_QWORD *)this + 30);
                    }
                    else
                    {
                      v28 = 0;
                    }
                    v29 = (unint64_t *)&v28[8 * v24];
                    *v29 = v18;
                    v22 = v29 + 1;
                    while (v21 != v23)
                    {
                      v30 = *--v21;
                      *--v29 = v30;
                    }
                    *((_QWORD *)this + 29) = v29;
                    *((_QWORD *)this + 30) = v22;
                    *((_QWORD *)this + 31) = &v28[8 * v27];
                    if (v23)
                      operator delete(v23);
                  }
                  else
                  {
                    *v21 = v18;
                    v22 = v21 + 1;
                  }
                  *((_QWORD *)this + 30) = v22;
                  v17 = *((_QWORD *)this + 20);
                  v16 = *((_QWORD *)this + 21);
                }
                ++v18;
              }
              while (v18 < (v16 - v17) >> 4);
            }
            v42 = (void **)&v46;
            std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100](&v42);
            if (v49)
            {
              v50 = v49;
              operator delete(v49);
            }
            v2 = v53;
            std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&v52);
            if (!v2)
              goto LABEL_15;
            goto LABEL_14;
          }
          v42 = (void **)&v46;
          std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100](&v42);
          if (v49)
          {
            v50 = v49;
            operator delete(v49);
          }
        }
      }
      std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&v52);
    }
LABEL_14:
    CFRelease(v2);
    goto LABEL_15;
  }
}

void sub_1A184AF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  void *v36;

  a28 = &a34;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  v36 = *(void **)(v34 - 176);
  if (v36)
  {
    *(_QWORD *)(v34 - 168) = v36;
    operator delete(v36);
  }
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v34 - 152);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v34 - 136), 0);
  *(_QWORD *)(v34 - 176) = v34 - 128;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 176));
  _Unwind_Resume(a1);
}

uint64_t NL::QueryTokenizer::getEntityAtLocation@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;

  if ((a2 & 0x8000000000000000) != 0 || (v3 = *(_QWORD *)(this + 160), a2 >= (*(_QWORD *)(this + 168) - v3) >> 4))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v4 = *(_OWORD *)(v3 + 16 * a2);
    *(_OWORD *)a3 = v4;
    if (*((_QWORD *)&v4 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  return this;
}

uint64_t NL::QueryTokenizer::tokenRangeAtTokenizationIndexForSpan(NL::QueryTokenizer *this, unint64_t a2, CFRange a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v3 = -1;
  if ((a2 & 0x8000000000000000) == 0)
  {
    v4 = *((_QWORD *)this + 23);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 24) - v4) >> 3) > a2)
    {
      v5 = v4 + 24 * a2;
      v6 = *(_QWORD **)v5;
      v7 = *(_QWORD **)(v5 + 8);
      if (*(_QWORD **)v5 == v7)
      {
        return -1;
      }
      else
      {
        v3 = -1;
        do
        {
          if (v6[1] == a3.location)
            v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 20) + 16 * *v6) + 96);
          v6 += 2;
        }
        while (v6 != v7);
      }
    }
  }
  return v3;
}

void NL::QueryTokenizer::enumerateEntitiesAtTokenizationIndex(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  BOOL v26;
  __int128 v27;
  __int128 v28;
  char v29;

  if ((a2 & 0x8000000000000000) == 0
    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 3) > a2)
  {
    v29 = 0;
    v6 = NL::SearchGrammar::tokenOrderReversed(*(NL::SearchGrammar **)(a1 + 16));
    v7 = *(_QWORD *)(a1 + 184);
    if (v6)
    {
      v8 = *(_QWORD *)(v7 + 24 * a2 + 8);
      do
      {
        if (v8 == *(_QWORD *)(*(_QWORD *)(a1 + 184) + 24 * a2))
          break;
        v9 = v8;
        v10 = *(_QWORD *)(v8 - 16);
        v8 -= 16;
        v11 = *(_OWORD *)(*(_QWORD *)(a1 + 160) + 16 * v10);
        v28 = v11;
        if (*((_QWORD *)&v11 + 1))
        {
          v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        (*(void (**)(uint64_t, __int128 *, _QWORD))(a3 + 16))(a3, &v28, *(_QWORD *)(v9 - 8));
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
        if (*((_QWORD *)&v28 + 1))
        {
          v15 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      while (!v29);
    }
    else
    {
      v17 = v7 + 24 * a2;
      v18 = *(_QWORD **)v17;
      v19 = *(_QWORD **)(v17 + 8);
      if (*(_QWORD **)v17 != v19)
      {
        do
        {
          v20 = *(_OWORD *)(*(_QWORD *)(a1 + 160) + 16 * *v18);
          v27 = v20;
          if (*((_QWORD *)&v20 + 1))
          {
            v21 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          (*(void (**)(uint64_t, __int128 *, _QWORD))(a3 + 16))(a3, &v27, v18[1]);
          v23 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
          if (*((_QWORD *)&v27 + 1))
          {
            v24 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v18 += 2;
          if (v29)
            v26 = 1;
          else
            v26 = v18 == v19;
        }
        while (!v26);
      }
    }
  }
}

void sub_1A184B2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void NL::QueryTokenizer::enumerateQuotedEntities(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  BOOL v12;
  __int128 v13;
  char v14;

  v14 = 0;
  v2 = (_QWORD *)a1[29];
  v3 = (_QWORD *)a1[30];
  if (v2 != v3)
  {
    do
    {
      v6 = *(_OWORD *)(a1[20] + 16 * *v2);
      v13 = v6;
      if (*((_QWORD *)&v6 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      (*(void (**)(uint64_t, __int128 *))(a2 + 16))(a2, &v13);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
      if (*((_QWORD *)&v13 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      ++v2;
      if (v14)
        v12 = 1;
      else
        v12 = v2 == v3;
    }
    while (!v12);
  }
}

void sub_1A184B3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t NL::QueryTokenizer::containsLegacyQuerySyntax(CFCharacterSetRef *this, const __CFString *a2)
{
  const __CFSet *v3;
  CFIndex Length;
  char v6;
  const __CFAllocator *v7;
  CFRange v8;
  int CharacterFromSet;
  CFIndex location;
  CFRange v12;
  CFIndex v13;
  CFStringRef v14;
  CFStringRef v15;
  int v16;
  CFRange result;

  if (a2 && (v3 = this[11]) != 0 && CFSetGetCount(v3))
  {
    Length = CFStringGetLength(a2);
    v6 = 0;
    v8.location = 0;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v8.length = Length;
    do
    {
      if (v8.location >= Length)
        break;
      CharacterFromSet = CFStringFindCharacterFromSet(a2, this[10], v8, 0, &result);
      location = result.location;
      if (!CharacterFromSet || result.location < 1)
        break;
      while (location >= 2)
      {
        if (CFStringGetCharacterAtIndex(a2, --location) == 32)
        {
          v12.location = location + 1;
          goto LABEL_14;
        }
      }
      v12.location = 0;
LABEL_14:
      v13 = result.location;
      v12.length = result.location - v12.location;
      v14 = CFStringCreateWithSubstring(v7, a2, v12);
      if (v14)
      {
        v15 = v14;
        v6 |= CFSetContainsValue(this[11], v14) != 0;
        if ((v6 & 1) != 0)
          v16 = 3;
        else
          v16 = 0;
        CFRelease(v15);
      }
      else
      {
        if ((v6 & 1) != 0)
        {
          v6 = 1;
          return v6 & 1;
        }
        v16 = 0;
        v6 = 0;
      }
      v8.location = v13 + 1;
      v8.length = Length - v13;
    }
    while (!v16);
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

void sub_1A184B550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void NL::QueryTokenizer::updateEntitiesWithQuotedTextValues(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFIndex v6;
  CFIndex v7;
  CFIndex location;
  CFIndex length;
  CFIndex v10;
  CFIndex v11;
  uint64_t v12;
  const __CFString *v13;
  CFIndex v14;
  CFIndex v15;
  CFIndex v16;
  CFIndex v17;
  uint64_t v18;
  const __CFString *v19;
  _QWORD v20[5];
  _QWORD v21[5];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  __n128 (*v25)(_QWORD *, uint64_t);
  void (*v26)(uint64_t);
  _QWORD v27[3];
  CFRange result;
  void **v29;
  CFRange v30;
  CFRange v31;

  if (*(_QWORD *)(a1 + 104) && *(_QWORD *)(a1 + 56))
  {
    result = (CFRange)xmmword_1A18D3A50;
    v22 = 0;
    v23 = &v22;
    v24 = 0x4002000000;
    v25 = __Block_byref_object_copy__2;
    v26 = __Block_byref_object_dispose__2;
    memset(v27, 0, sizeof(v27));
    v4 = *(_QWORD *)(a1 + 112);
    v5 = *(_QWORD *)(a1 + 120);
    if (v4 != v5)
    {
      v6 = -1;
      v7 = -1;
      do
      {
        if ((*(_BYTE *)(v4 + 17) & 4) != 0
          && CFStringFindCharacterFromSet(*(CFStringRef *)(a1 + 104), *(CFCharacterSetRef *)(a1 + 56), *(CFRange *)v4, 0, &result))
        {
          location = result.location;
          length = result.length;
          if (v6 == -1)
          {
            v7 = result.length + result.location;
            v6 = result.location;
          }
          else
          {
            v30.length = result.location - v7;
            v30.location = v7;
            v7 = NL::QueryTokenizer::contentRangeFromRange((NL::QueryTokenizer *)a1, v30);
            v11 = v10;
            v12 = *(_QWORD *)(a1 + 48);
            v13 = *(const __CFString **)(a1 + 104);
            v21[0] = MEMORY[0x1E0C809B0];
            v21[1] = 0x40000000;
            v21[2] = ___ZN2NL14QueryTokenizer34updateEntitiesWithQuotedTextValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke;
            v21[3] = &unk_1E45CFBA8;
            v21[4] = &v22;
            NL::EntityConverter::enumerateEntitiesWithString(v12, v13, CFSTR("QuotedText"), v7, v11, v6, location - v6 + length, (uint64_t)v21);
            v6 = -1;
          }
        }
        v4 += 24;
      }
      while (v4 != v5);
      if (v6 != -1)
      {
        v14 = CFStringGetLength(*(CFStringRef *)(a1 + 104));
        v31.length = CFStringGetLength(*(CFStringRef *)(a1 + 104)) - v7;
        v31.location = v7;
        v15 = NL::QueryTokenizer::contentRangeFromRange((NL::QueryTokenizer *)a1, v31);
        v17 = v16;
        v18 = *(_QWORD *)(a1 + 48);
        v19 = *(const __CFString **)(a1 + 104);
        v20[0] = MEMORY[0x1E0C809B0];
        v20[1] = 0x40000000;
        v20[2] = ___ZN2NL14QueryTokenizer34updateEntitiesWithQuotedTextValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_2;
        v20[3] = &unk_1E45CFBD0;
        v20[4] = &v22;
        NL::EntityConverter::enumerateEntitiesWithString(v18, v19, CFSTR("QuotedText"), v15, v17, v6, v14 - v6, (uint64_t)v20);
      }
    }
    std::vector<std::shared_ptr<NL::Entity>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity>*>,std::__wrap_iter<std::shared_ptr<NL::Entity>*>>(a2, a2[1], (uint64_t *)v23[5], (uint64_t *)v23[6], (v23[6] - v23[5]) >> 4);
    _Block_object_dispose(&v22, 8);
    v29 = (void **)v27;
    std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v29);
  }
}

void sub_1A184B798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v13 - 112) = a3;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 112));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__2(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t NL::QueryTokenizer::contentRangeFromRange(NL::QueryTokenizer *this, CFRange a2)
{
  CFIndex *v2;
  CFIndex *v3;
  CFIndex length;
  CFIndex location;
  const __CFCharacterSet *Predefined;
  uint64_t v8;
  unint64_t v9;
  CFIndex *v10;
  unint64_t v11;
  unint64_t v12;
  CFIndex *v13;
  CFIndex *v14;
  CFIndex v15;
  CFIndex v16;
  CFIndex v17;
  CFIndex v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex v22;
  unint64_t v26;
  CFIndex *v27;
  CFIndex *v28;
  uint64_t v29;
  uint64_t v30;
  CFIndex *v31;
  CFIndex v32;
  uint64_t v33;
  CFIndex v35;
  CFRange v38;

  v2 = (CFIndex *)*((_QWORD *)this + 14);
  v3 = (CFIndex *)*((_QWORD *)this + 15);
  if (v3 == v2 || !*((_QWORD *)this + 13))
    return -1;
  length = a2.length;
  location = a2.location;
  if (a2.length != 1)
    goto LABEL_6;
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  v38.location = location;
  v38.length = 1;
  if (CFStringFindCharacterFromSet(*((CFStringRef *)this + 13), Predefined, v38, 0, 0))
    return -1;
  v2 = (CFIndex *)*((_QWORD *)this + 14);
  v3 = (CFIndex *)*((_QWORD *)this + 15);
LABEL_6:
  v8 = -1;
  if (v3 == v2)
    return v8;
  v9 = 0xAAAAAAAAAAAAAAABLL * (v3 - v2);
  v10 = v2;
  v11 = v9;
  do
  {
    v12 = v11 >> 1;
    v13 = &v10[3 * (v11 >> 1)];
    v15 = *v13;
    v16 = v13[1];
    v14 = v13 + 3;
    v11 += ~(v11 >> 1);
    if (v16 + v15 <= location)
      v10 = v14;
    else
      v11 = v12;
  }
  while (v11);
  if (v10 == v3)
    return -1;
  v17 = 0;
  v18 = location + length;
  v8 = -1;
  do
  {
    v19 = *v10;
    v20 = v10[1];
    if (location != *v10 || length != v20)
    {
      v22 = v20 + v19;
      if ((v19 < location || v22 >= v18) && (v19 <= location || v22 > v18))
        break;
    }
    if ((*((_BYTE *)v10 + 17) & 8) == 0)
    {
      v17 = v10[1];
      v8 = *v10;
      break;
    }
    v10 += 3;
    v8 = v19;
    v17 = v20;
  }
  while (v10 != v3);
  if (v8 != -1 && v8 + v17 != v18)
  {
    do
    {
      v26 = v9 >> 1;
      v27 = &v3[-3 * (v9 >> 1)];
      v29 = *(v27 - 3);
      v30 = *(v27 - 2);
      v28 = v27 - 3;
      v9 += ~(v9 >> 1);
      if (v30 + v29 > v18)
        v3 = v28;
      else
        v9 = v26;
    }
    while (v9);
    if (v2 != v3)
    {
      v31 = v3;
      while (1)
      {
        v32 = *(v31 - 3);
        v33 = *(v31 - 2);
        v31 -= 3;
        if (location != v32 || length != v33)
        {
          v35 = v33 + v32;
          if ((v32 < location || v35 >= v18) && (v32 <= location || v35 > v18))
            break;
        }
        if ((*((_BYTE *)v3 - 7) & 8) != 0)
        {
          v3 = v31;
          if (v31 != v2)
            continue;
        }
        return v8;
      }
      CFStringGetLength(*((CFStringRef *)this + 13));
    }
  }
  return v8;
}

uint64_t ___ZN2NL14QueryTokenizer34updateEntitiesWithQuotedTextValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke(uint64_t result, uint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;

  if (*a2)
  {
    v2 = *(_QWORD **)(*(_QWORD *)(result + 32) + 8);
    v3 = v2[6];
    if (v3 >= v2[7])
    {
      result = std::vector<std::shared_ptr<NL::Entity>>::__emplace_back_slow_path<std::unique_ptr<NL::Entity>>(v2 + 5, a2);
    }
    else
    {
      std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>((uint64_t *)v2[6], a2);
      result = v3 + 16;
      v2[6] = v3 + 16;
    }
    v2[6] = result;
  }
  return result;
}

void sub_1A184BA68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = v1;
  _Unwind_Resume(a1);
}

uint64_t ___ZN2NL14QueryTokenizer34updateEntitiesWithQuotedTextValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_2(uint64_t result, uint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;

  if (*a2)
  {
    v2 = *(_QWORD **)(*(_QWORD *)(result + 32) + 8);
    v3 = v2[6];
    if (v3 >= v2[7])
    {
      result = std::vector<std::shared_ptr<NL::Entity>>::__emplace_back_slow_path<std::unique_ptr<NL::Entity>>(v2 + 5, a2);
    }
    else
    {
      std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>((uint64_t *)v2[6], a2);
      result = v3 + 16;
      v2[6] = v3 + 16;
    }
    v2[6] = result;
  }
  return result;
}

void sub_1A184BAC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = v1;
  _Unwind_Resume(a1);
}

void NL::QueryTokenizer::updateEntitiesWithKnownValues(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[10];
  void **v9[6];
  std::__shared_weak_count *v10;
  void **v11[5];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 (*v16)(_QWORD *, uint64_t);
  void (*v17)(uint64_t);
  _QWORD v18[3];
  _QWORD v19[5];
  __int128 v20;
  _QWORD v21[5];
  char **v22;
  char *v23[2];

  if (a2)
  {
    if (a1[13])
    {
      v3 = (_QWORD *)a1[5];
      if (v3)
      {
        if (a1[2])
        {
          v21[0] = 0;
          v21[1] = v21;
          v21[2] = 0x4002000000;
          v21[3] = __Block_byref_object_copy__13;
          v21[4] = __Block_byref_object_dispose__14;
          v23[0] = 0;
          v23[1] = 0;
          v22 = v23;
          v19[0] = 0;
          v19[1] = v19;
          v19[2] = 0x3802000000;
          v19[3] = __Block_byref_object_copy__15;
          v19[4] = __Block_byref_object_dispose__16;
          v20 = xmmword_1A18D3A50;
          v13 = 0;
          v14 = &v13;
          v15 = 0x4002000000;
          v16 = __Block_byref_object_copy__2;
          v17 = __Block_byref_object_dispose__2;
          memset(v18, 0, sizeof(v18));
          v11[0] = 0;
          v11[1] = (void **)v11;
          v11[2] = (void **)0x4002000000;
          v11[3] = (void **)__Block_byref_object_copy__2;
          v11[4] = (void **)__Block_byref_object_dispose__2;
          memset(v12, 0, sizeof(v12));
          v9[0] = 0;
          v9[1] = (void **)v9;
          v9[2] = (void **)0x3802000000;
          v9[3] = (void **)__Block_byref_object_copy__17;
          v9[4] = (void **)__Block_byref_object_dispose__18;
          v9[5] = 0;
          v10 = 0;
          v8[0] = MEMORY[0x1E0C809B0];
          v8[1] = 0x40000000;
          v8[2] = ___ZN2NL14QueryTokenizer29updateEntitiesWithKnownValuesEPK10__CFStringRNSt3__16vectorINS4_10shared_ptrINS_6EntityEEENS4_9allocatorIS8_EEEE_block_invoke;
          v8[3] = &unk_1E45CFC20;
          v8[4] = v19;
          v8[5] = v21;
          v8[6] = v11;
          v8[7] = v9;
          v8[8] = &v13;
          v8[9] = a1;
          NLEntityDetectorEnumerateEntities(v3, a2, (uint64_t)v8);
          std::vector<std::shared_ptr<NL::Entity>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity>*>,std::__wrap_iter<std::shared_ptr<NL::Entity>*>>(a3, a3[1], (uint64_t *)v14[5], (uint64_t *)v14[6], (v14[6] - v14[5]) >> 4);
          _Block_object_dispose(v9, 8);
          v5 = v10;
          if (v10)
          {
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          _Block_object_dispose(v11, 8);
          v9[0] = (void **)v12;
          std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](v9);
          _Block_object_dispose(&v13, 8);
          v11[0] = (void **)v18;
          std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](v11);
          _Block_object_dispose(v19, 8);
          _Block_object_dispose(v21, 8);
          std::__tree<std::string>::destroy((uint64_t)&v22, v23[0]);
        }
      }
    }
  }
}

void sub_1A184BCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  _Block_object_dispose(&a19, 8);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v35 + 40);
  _Block_object_dispose(&a26, 8);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Block_object_dispose(&a34, 8);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a26);
  _Block_object_dispose((const void *)(v36 - 184), 8);
  _Block_object_dispose((const void *)(v36 - 128), 8);
  std::__tree<std::string>::destroy(v34, *(char **)(v36 - 80));
  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_copy__13(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 40, *(char **)(a1 + 48));
}

{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__18(uint64_t a1)
{
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___ZN2NL14QueryTokenizer29updateEntitiesWithKnownValuesEPK10__CFStringRNSt3__16vectorINS4_10shared_ptrINS_6EntityEEENS4_9allocatorIS8_EEEE_block_invoke(int8x16_t *a1, __CFString *a2, CFIndex a3, CFIndex a4, const __CFDictionary *a5)
{
  uint64_t *v10;
  uint64_t v11;
  std::string::size_type size;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  CFIndex v18;
  uint64_t v19;
  CFIndex v20;
  CFIndex v21;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  _BOOL4 isTypeSubsumed;
  _QWORD *v29;
  _QWORD *v30;
  const __CFString *CFStringFromString;
  uint64_t v32;
  CFIndex v33;
  CFIndex v34;
  CFIndex v35;
  uint64_t v36;
  uint64_t v37;
  CFIndex v38;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  NL::SearchGrammar *v43;
  __int32 SymbolID;
  _BOOL4 isFunction;
  NL::Entity *v46;
  const __CFString *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  const __CFDictionary *v56;
  _QWORD v57[4];
  int8x16_t v58;
  std::string *p_p;
  uint64_t v60;
  std::string __p;
  char v62;
  std::string v63;
  CFRange v64;

  v10 = (uint64_t *)a1[4].i64[1];
  v11 = v10[2];
  getUTF8StringFromCFString(a2, &__p);
  NL::SearchGrammar::getValidTypeName(v11, (uint64_t)&__p, &v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
  if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v63.__r_.__value_.__l.__size_;
  if (size)
  {
    v13 = *(_QWORD *)(a1[2].i64[0] + 8);
    v14 = *(_QWORD *)(v13 + 40);
    if (v14 == -1
      || ((v15 = *(_QWORD *)(v13 + 48), v14 == a3) ? (v16 = v15 == a4) : (v16 = 0),
          !v16
       || *(_QWORD *)(a1[2].i64[1] + 8) + 48 == std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(*(_QWORD *)(a1[2].i64[1] + 8) + 40, (const void **)&v63.__r_.__value_.__l.__data_)|| NL::SearchGrammar::isTypeMultivalued(v10[2], &v63)))
    {
      v17 = *(_QWORD *)(a1[2].i64[0] + 8);
      v18 = *(_QWORD *)(v17 + 40);
      if (v18 == -1)
        goto LABEL_38;
      v19 = *(_QWORD *)(v17 + 48);
      v20 = a3 + a4;
      v21 = v19 + v18;
      if ((a3 < v18 || v20 >= v21) && (a3 <= v18 || v20 > v21))
        goto LABEL_38;
      v24 = *(_QWORD *)(a1[2].i64[1] + 8);
      v25 = *(_QWORD **)(v24 + 40);
      v26 = (_QWORD *)(v24 + 48);
      if (v25 == (_QWORD *)(v24 + 48))
        goto LABEL_38;
      v27 = 1;
      do
      {
        if (*((char *)v25 + 55) < 0)
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v25[4], v25[5]);
        else
          __p = *(std::string *)(v25 + 4);
        isTypeSubsumed = NL::SearchGrammar::isTypeSubsumed(v10[2], (uint64_t)&__p, (unsigned __int8 *)&v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v29 = (_QWORD *)v25[1];
        if (v29)
        {
          do
          {
            v30 = v29;
            v29 = (_QWORD *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            v30 = (_QWORD *)v25[2];
            v16 = *v30 == (_QWORD)v25;
            v25 = v30;
          }
          while (!v16);
        }
        v27 &= !isTypeSubsumed;
        v25 = v30;
      }
      while (v30 != v26);
      if (v27)
      {
LABEL_38:
        CFStringFromString = createCFStringFromString((uint64_t)&v63);
        if (CFStringFromString)
        {
          v64.location = a3;
          v64.length = a4;
          v32 = NL::QueryTokenizer::tokenRangeForSearchPiece((NL::QueryTokenizer *)v10, v64);
          if (v32 != -1)
          {
            v34 = v32;
            v35 = v33;
            v36 = *(_QWORD *)(a1[2].i64[0] + 8);
            v37 = *(_QWORD *)(v36 + 40);
            v38 = *(_QWORD *)(v36 + 48) + v37;
            if (v37 != -1 && v38 <= a3)
            {
              v56 = a5;
              v40 = *(_QWORD *)(a1[3].i64[0] + 8);
              v42 = *(_QWORD *)(v40 + 40);
              for (i = *(_QWORD *)(v40 + 48);
                    i != v42;
              *(_QWORD *)(v40 + 48) = v42;
              a5 = v56;
            }
            __p.__r_.__value_.__r.__words[0] = 0;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
            __p.__r_.__value_.__r.__words[2] = 0x2000000000;
            v62 = 0;
            v43 = (NL::SearchGrammar *)v10[2];
            SymbolID = NL::SearchGrammar::getSymbolID((uint64_t)v43, (uint64_t)&v63);
            isFunction = NL::SearchGrammar::isFunction(v43, SymbolID);
            v46 = (NL::Entity *)v10[6];
            v47 = (const __CFString *)v10[13];
            v57[0] = MEMORY[0x1E0C809B0];
            v57[1] = 0x40000000;
            v57[2] = ___ZN2NL14QueryTokenizer29updateEntitiesWithKnownValuesEPK10__CFStringRNSt3__16vectorINS4_10shared_ptrINS_6EntityEEENS4_9allocatorIS8_EEEE_block_invoke_2;
            v57[3] = &unk_1E45CFBF8;
            v58 = vextq_s8(a1[3], a1[3], 8uLL);
            v48 = a1[4].i64[0];
            p_p = &__p;
            v60 = v48;
            NL::EntityConverter::enumerateEntitiesWithTypeAndValues(v46, v47, v34, v35, CFStringFromString, a2, a5, isFunction, (uint64_t)v57);
            _Block_object_dispose(&__p, 8);
          }
          CFRelease(CFStringFromString);
        }
        v49 = *(_QWORD *)(a1[2].i64[0] + 8);
        v51 = *(_QWORD *)(v49 + 40);
        v50 = *(_QWORD *)(v49 + 48);
        if (v51 != a3 || v50 != a4)
        {
          v53 = *(_QWORD **)(a1[2].i64[1] + 8);
          v54 = (char *)v53[6];
          v53 += 6;
          std::__tree<std::string>::destroy((uint64_t)(v53 - 1), v54);
          *(v53 - 1) = v53;
          *v53 = 0;
          v53[1] = 0;
          v55 = *(_QWORD *)(a1[2].i64[0] + 8);
          *(_QWORD *)(v55 + 40) = a3;
          *(_QWORD *)(v55 + 48) = a4;
        }
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(*(_QWORD *)(a1[2].i64[1] + 8) + 40), (const void **)&v63.__r_.__value_.__l.__data_, (uint64_t)&v63);
      }
    }
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
}

void sub_1A184C164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 81) < 0)
    operator delete(*(void **)(v24 - 104));
  _Unwind_Resume(exception_object);
}

uint64_t NL::QueryTokenizer::tokenRangeForSearchPiece(NL::QueryTokenizer *this, CFRange a2)
{
  uint64_t v2;
  uint64_t v3;
  CFIndex location;
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFIndex v23;
  unint64_t v24;
  CFIndex v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *((_QWORD *)this + 14);
  v3 = *((_QWORD *)this + 15);
  if (v3 == v2)
    return -1;
  location = a2.location;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 3);
  v6 = (char *)*((_QWORD *)this + 17);
  if (a2.location)
  {
    v7 = (char *)*((_QWORD *)this + 18);
    if (v7 == v6)
    {
      v9 = (char *)*((_QWORD *)this + 17);
    }
    else
    {
      v8 = (v7 - v6) >> 4;
      v9 = (char *)*((_QWORD *)this + 17);
      do
      {
        v10 = v8 >> 1;
        v11 = (uint64_t *)&v9[16 * (v8 >> 1)];
        v12 = *v11;
        v13 = v11[1];
        v14 = (char *)(v11 + 2);
        v8 += ~(v8 >> 1);
        if (v13 + v12 <= location)
          v9 = v14;
        else
          v8 = v10;
      }
      while (v8);
    }
    if (v9 != v7)
    {
      v24 = (v9 - v6) >> 4;
      if (v24 < v5)
      {
        v25 = location + a2.length;
        v26 = v9 + 16;
        v27 = v26 - v6;
        result = -1;
        do
        {
          if (*(_QWORD *)&v6[16 * v24 + 8] + *(_QWORD *)&v6[16 * v24] > v25)
            break;
          v28 = *(_QWORD *)(v2 + 24 * v24);
          if (result == -1)
            result = v28;
          if (v26 == v7)
            break;
          v24 = v27 >> 4;
          v27 += 16;
          v26 += 16;
        }
        while (v24 < v5);
        return result;
      }
    }
    return -1;
  }
  v15 = (char *)*((_QWORD *)this + 18);
  if (v6 == v15)
    return -1;
  result = -1;
  if (v3 != v2 && *((_QWORD *)v6 + 1) + *(_QWORD *)v6 <= a2.length)
  {
    v17 = v6 + 16;
    v18 = v2 + 8;
    v19 = 1;
    do
    {
      v20 = v18;
      if (result == -1)
        result = *(_QWORD *)(v18 - 8);
      if (v17 == v15)
        break;
      if (v19 >= v5)
        break;
      v21 = *(_QWORD *)v17;
      v22 = *((_QWORD *)v17 + 1);
      v17 += 16;
      v23 = v22 + v21;
      v18 = v20 + 24;
      ++v19;
    }
    while (v23 <= a2.length);
  }
  return result;
}

void ___ZN2NL14QueryTokenizer29updateEntitiesWithKnownValuesEPK10__CFStringRNSt3__16vectorINS4_10shared_ptrINS_6EntityEEENS4_9allocatorIS8_EEEE_block_invoke_2(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 **v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22[2];
  uint64_t v23;
  std::__shared_weak_count *v24;

  std::shared_ptr<NL::Entity>::operator=[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>((_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40), a2);
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(unsigned __int8 ***)(v3 + 40);
  v5 = *(unsigned __int8 ***)(v3 + 48);
  while (v4 != v5)
  {
    if (compare_entities(v4, (unsigned __int8 **)(*(_QWORD *)(a1[4] + 8) + 40)))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40);
      if (*(_DWORD *)(v6 + 112) == 1)
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)*v4 + 17);
        v23 = *((_QWORD *)*v4 + 16);
        v24 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
          v6 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40);
        }
        v10 = *(std::__shared_weak_count **)(v6 + 136);
        v22[0] = *(_QWORD *)(v6 + 128);
        v22[1] = (uint64_t)v10;
        if (v10)
        {
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = compare_date_periods(&v23, v22);
        if (v10)
        {
          v14 = (unint64_t *)&v10->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v16 = v24;
        if (v24)
        {
          v17 = (unint64_t *)&v24->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        if ((v13 & 1) == 0)
          std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100]((char **)*v4 + 20, (__int128 *)(*(_QWORD *)(a1[4] + 8) + 40));
      }
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
      break;
    }
    v4 += 2;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24))
  {
    v19 = *(_QWORD *)(a1[4] + 8);
    v21 = *(_QWORD *)(v19 + 40);
    v20 = (__int128 *)(v19 + 40);
    if (v21)
    {
      std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100]((char **)(*(_QWORD *)(a1[7] + 8) + 40), v20);
      std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100]((char **)(*(_QWORD *)(a1[5] + 8) + 40), (__int128 *)(*(_QWORD *)(a1[4] + 8) + 40));
    }
  }
}

void sub_1A184C520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<NL::Entity>::operator=[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E45CF1C0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void NL::QueryTokenizer::updateEntitiesWithUnknownValues(uint64_t a1, uint64_t a2)
{
  const __CFString *v3;
  __int128 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  std::string::size_type v22;
  CFIndex v23;
  CFIndex v24;
  CFIndex v25;
  uint64_t v26;
  const __CFString *v27;
  char **v28;
  void ***v29;
  uint64_t v30;
  uint64_t *v31;
  void **v32;
  void **v33;
  void **v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  CFIndex v45;
  CFIndex v46;
  CFIndex v47;
  uint64_t v48;
  const __CFString *v49;
  BOOL IsCJ;
  void **v51;
  uint64_t *v52;
  uint64_t v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  const __CFString *CFStringFromString;
  std::string::size_type v59;
  uint64_t v60;
  std::string::size_type v61;
  uint64_t v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::string::size_type v69;
  uint64_t v70;
  char v72;
  std::string::size_type v73;
  uint64_t v74;
  CFIndex v75;
  CFIndex v76;
  CFIndex v77;
  BOOL v78;
  uint64_t v79;
  const __CFString *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  CFIndex v83;
  CFIndex v84;
  CFIndex v85;
  uint64_t v86;
  const __CFString *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  __int128 v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  const __CFString *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  CFIndex v101;
  CFIndex v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  CFIndex v112;
  CFIndex v113;
  CFIndex v114;
  BOOL v115;
  uint64_t v116;
  const __CFString *v117;
  unint64_t *v118;
  unint64_t v119;
  std::string::size_type v120;
  CFIndex v121;
  CFIndex v122;
  CFIndex v123;
  uint64_t v124;
  const __CFString *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t i;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  void **v134;
  CFIndex Length;
  _QWORD v136[5];
  _QWORD v137[5];
  _QWORD v138[5];
  _QWORD v139[5];
  __int128 v140;
  const __CFString *v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __n128 (*v145)(_QWORD *, uint64_t);
  void (*v146)(uint64_t);
  _QWORD v147[3];
  _QWORD v148[6];
  _QWORD v149[6];
  void **v150;
  void ***v151;
  uint64_t v152;
  __n128 (*v153)(_QWORD *, uint64_t);
  void (*v154)(uint64_t);
  void *v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  char **v159;
  uint64_t v160;
  __n128 (*v161)(_QWORD *, uint64_t);
  void (*v162)(uint64_t);
  _QWORD v163[4];
  CFRange v164;
  CFRange v165;
  CFRange v166;
  CFRange v167;
  CFRange v168;
  CFRange v169;

  v3 = *(const __CFString **)(a1 + 104);
  if (v3 && *(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
  {
    Length = CFStringGetLength(v3);
    v5 = *(__int128 **)(a2 + 8);
    v6 = 126 - 2 * __clz(((uint64_t)v5 - *(_QWORD *)a2) >> 4);
    if (v5 == *(__int128 **)a2)
      v7 = 0;
    else
      v7 = v6;
    std::__introsort<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *,false>(*(uint64_t **)a2, v5, (uint64_t)&v158, v7, 1);
    v158 = 0;
    v159 = (char **)&v158;
    v160 = 0x4002000000;
    v161 = __Block_byref_object_copy__2;
    v162 = __Block_byref_object_dispose__2;
    memset(v163, 0, 24);
    v150 = 0;
    v151 = &v150;
    v152 = 0x4002000000;
    v153 = __Block_byref_object_copy__22;
    v154 = __Block_byref_object_dispose__23;
    v156 = 0;
    v157 = 0;
    v155 = 0;
    v8 = *(uint64_t **)a2;
    v9 = *(uint64_t **)(a2 + 8);
    v131 = (uint64_t *)a2;
    if (*(uint64_t **)a2 == v9)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = -1;
      do
      {
        v13 = *v8;
        v14 = v8[1];
        *(_QWORD *)&v143 = *v8;
        *((_QWORD *)&v143 + 1) = v14;
        if (v14)
        {
          v15 = (unint64_t *)(v14 + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v17 = *(_QWORD *)(v13 + 96);
        if (v12 == -1
          || ((v18 = *(_QWORD *)(v13 + 104) + v17, v19 = v12 + v11, v17 >= v12) ? (v20 = v18 < v19) : (v20 = 0),
              !v20 && (v17 > v12 ? (v21 = v18 <= v19) : (v21 = 0), !v21)))
        {
          v22 = v17 - v10;
          if (v17 > v10)
          {
            v164.location = v10;
            v164.length = v17 - v10;
            v24 = NL::QueryTokenizer::contentRangeFromRange((NL::QueryTokenizer *)a1, v164);
            if (v24 != -1)
            {
              v25 = v23;
              v26 = *(_QWORD *)(a1 + 48);
              v27 = *(const __CFString **)(a1 + 104);
              v149[0] = MEMORY[0x1E0C809B0];
              v149[1] = 0x40000000;
              v149[2] = ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke;
              v149[3] = &unk_1E45CFC48;
              v149[4] = &v150;
              v149[5] = &v158;
              NL::EntityConverter::enumerateEntitiesWithString(v26, v27, 0, v24, v25, v10, v22, (uint64_t)v149);
            }
          }
          v28 = v159;
          if (*(_DWORD *)(v143 + 112) == 7)
          {
            v29 = v151;
            v30 = (v159[6] - v159[5]) >> 4;
            v31 = (uint64_t *)v151[6];
            v32 = v151[7];
            if (v31 >= (uint64_t *)v32)
            {
              v34 = v151[5];
              v35 = ((char *)v31 - (char *)v34) >> 3;
              if ((unint64_t)(v35 + 1) >> 61)
                std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
              v36 = (char *)v32 - (char *)v34;
              v37 = ((char *)v32 - (char *)v34) >> 2;
              if (v37 <= v35 + 1)
                v37 = v35 + 1;
              if (v36 >= 0x7FFFFFFFFFFFFFF8)
                v38 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v38 = v37;
              if (v38)
              {
                v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(v151 + 7), v38);
                v34 = v29[5];
                v31 = (uint64_t *)v29[6];
              }
              else
              {
                v39 = 0;
              }
              v40 = (uint64_t *)&v39[8 * v35];
              *v40 = v30;
              v33 = (void **)(v40 + 1);
              while (v31 != (uint64_t *)v34)
              {
                v41 = *--v31;
                *--v40 = v41;
              }
              v29[5] = (void **)v40;
              v29[6] = v33;
              v29[7] = (void **)&v39[8 * v38];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *v31 = v30;
              v33 = (void **)(v31 + 1);
            }
            v29[6] = v33;
            v28 = v159;
          }
          std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100](v28 + 5, &v143);
          v12 = *(_QWORD *)(v143 + 96);
          v11 = *(_QWORD *)(v143 + 104);
          v10 = v11 + v12;
        }
        v42 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
        if (*((_QWORD *)&v143 + 1))
        {
          v43 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v8 += 2;
      }
      while (v8 != v9);
    }
    if (Length > v10)
    {
      v165.location = v10;
      v165.length = Length - v10;
      v46 = NL::QueryTokenizer::contentRangeFromRange((NL::QueryTokenizer *)a1, v165);
      if (v46 != -1)
      {
        v47 = v45;
        v48 = *(_QWORD *)(a1 + 48);
        v49 = *(const __CFString **)(a1 + 104);
        v148[0] = MEMORY[0x1E0C809B0];
        v148[1] = 0x40000000;
        v148[2] = ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_2;
        v148[3] = &unk_1E45CFC70;
        v148[4] = &v150;
        v148[5] = &v158;
        NL::EntityConverter::enumerateEntitiesWithString(v48, v49, 0, v46, v47, v10, Length - v10, (uint64_t)v148);
      }
    }
    *(_QWORD *)&v143 = 0;
    *((_QWORD *)&v143 + 1) = &v143;
    v144 = 0x4002000000;
    v145 = __Block_byref_object_copy__2;
    v146 = __Block_byref_object_dispose__2;
    memset(v147, 0, sizeof(v147));
    IsCJ = NL::ParserContext::languageIsCJ(*(NL::ParserContext **)a1);
    v52 = (uint64_t *)v151[5];
    v51 = v151[6];
    v134 = v51;
    if (IsCJ)
    {
      if (v52 == (uint64_t *)v51)
        goto LABEL_152;
      while (1)
      {
        v53 = *v52;
        v54 = *(_OWORD *)&v159[5][16 * *v52];
        v142 = v54;
        if (*((_QWORD *)&v54 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        v57 = v54;
        CFStringFromString = createCFStringFromString(v54);
        v141 = CFStringFromString;
        if (!v53)
        {
LABEL_93:
          if (!CFStringFromString)
            goto LABEL_95;
LABEL_94:
          CFRelease(CFStringFromString);
          goto LABEL_95;
        }
        v59 = *(_QWORD *)(v57 + 96);
        v60 = *(_QWORD *)(v57 + 104);
        v61 = v59 + v60;
        v62 = v53;
        while (1)
        {
          v20 = v62-- < 1;
          if (v20)
            break;
          v63 = *(_OWORD *)&v159[5][16 * v62];
          v140 = v63;
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
          if (*((_QWORD *)&v63 + 1))
          {
            v65 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          v67 = v142;
          v68 = v63;
          v69 = *(_QWORD *)(v63 + 96);
          v70 = *(_QWORD *)(v63 + 104);
          if (v69 == -1 || (uint64_t)(v70 + v69) > *(_QWORD *)(v142 + 96))
            goto LABEL_71;
          if (NL::SearchGrammar::isTypeValidForTopic(*(_QWORD *)(a1 + 16), (unsigned __int8 *)v63))
          {
            v69 = *(_QWORD *)(v68 + 96);
            v70 = *(_QWORD *)(v68 + 104);
LABEL_71:
            if (v69 != v59 || v70 != v60)
            {
              v60 = v70;
              v59 = v69;
            }
            v72 = 1;
            if (!v64)
              goto LABEL_86;
            goto LABEL_83;
          }
          v73 = v61 - v59;
          v166.location = v59;
          v166.length = v73;
          v74 = NL::QueryTokenizer::contentRangeFromRange((NL::QueryTokenizer *)a1, v166);
          v76 = v74;
          v77 = v75;
          v78 = v74 == *(_QWORD *)(v67 + 96) && v75 == *(_QWORD *)(v67 + 104);
          if (!v78 && (v74 || v75 != Length))
          {
            v79 = *(_QWORD *)(a1 + 48);
            v80 = *(const __CFString **)(a1 + 104);
            v137[0] = MEMORY[0x1E0C809B0];
            v137[1] = 0x40000000;
            v137[2] = ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_5;
            v137[3] = &unk_1E45CFCE8;
            v137[4] = &v143;
            NL::EntityConverter::enumerateEntitiesWithString(v79, v80, v141, v76, v77, v59, v73, (uint64_t)v137);
          }
          v61 = 0;
          v72 = 0;
          if (!v64)
            goto LABEL_86;
LABEL_83:
          p_shared_owners = (unint64_t *)&v64->__shared_owners_;
          do
            v82 = __ldaxr(p_shared_owners);
          while (__stlxr(v82 - 1, p_shared_owners));
          if (v82)
          {
LABEL_86:
            if ((v72 & 1) == 0)
              break;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
            if ((v72 & 1) == 0)
              break;
          }
        }
        if (v61)
        {
          v167.location = 0;
          v167.length = v61;
          v51 = v134;
          v84 = NL::QueryTokenizer::contentRangeFromRange((NL::QueryTokenizer *)a1, v167);
          v85 = v83;
          CFStringFromString = v141;
          if (v84 || v83 != Length)
          {
            v86 = *(_QWORD *)(a1 + 48);
            v87 = *(const __CFString **)(a1 + 104);
            v136[0] = MEMORY[0x1E0C809B0];
            v136[1] = 0x40000000;
            v136[2] = ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_6;
            v136[3] = &unk_1E45CFD10;
            v136[4] = &v143;
            NL::EntityConverter::enumerateEntitiesWithString(v86, v87, v141, v84, v85, 0, v61, (uint64_t)v136);
          }
          goto LABEL_93;
        }
        CFStringFromString = v141;
        v51 = v134;
        if (v141)
          goto LABEL_94;
LABEL_95:
        v88 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
        if (*((_QWORD *)&v142 + 1))
        {
          v89 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        if (v53)
        {
          if (++v52 != (uint64_t *)v51)
            continue;
        }
        goto LABEL_152;
      }
    }
    if (v52 == (uint64_t *)v51)
      goto LABEL_152;
    while (1)
    {
      v91 = *v52;
      v92 = *(_OWORD *)&v159[5][16 * *v52];
      v142 = v92;
      if (*((_QWORD *)&v92 + 1))
      {
        v93 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      v95 = v92;
      v96 = createCFStringFromString(v92);
      v141 = v96;
      v97 = v91 + 1;
      v98 = v159[5];
      v99 = v159[6] - v98;
      if (v97 >= v99 >> 4)
        goto LABEL_140;
      v132 = v159[6] - v98;
      v133 = v97;
      v101 = *(_QWORD *)(v95 + 96);
      v100 = *(_QWORD *)(v95 + 104);
      v102 = v101;
      do
      {
        v103 = *(_OWORD *)&v98[16 * v97];
        v140 = v103;
        v104 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
        if (*((_QWORD *)&v103 + 1))
        {
          v105 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
          do
            v106 = __ldxr(v105);
          while (__stxr(v106 + 1, v105));
        }
        v107 = v103;
        v108 = v142;
        v109 = *(_QWORD *)(v142 + 96);
        v110 = v109 != -1 && *(_QWORD *)(v142 + 104) + v109 <= *(_QWORD *)(v103 + 96);
        if (v110 && !NL::SearchGrammar::isTypeValidForTopic(*(_QWORD *)(a1 + 16), (unsigned __int8 *)v103))
        {
          v168.location = v101;
          v168.length = v102 + v100 - v101;
          v111 = NL::QueryTokenizer::contentRangeFromRange((NL::QueryTokenizer *)a1, v168);
          v113 = v111;
          v114 = v112;
          v115 = v111 == *(_QWORD *)(v108 + 96) && v112 == *(_QWORD *)(v108 + 104);
          if (!v115 && (v111 || v112 != Length))
          {
            v116 = *(_QWORD *)(a1 + 48);
            v117 = *(const __CFString **)(a1 + 104);
            v139[0] = MEMORY[0x1E0C809B0];
            v139[1] = 0x40000000;
            v139[2] = ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_3;
            v139[3] = &unk_1E45CFC98;
            v139[4] = &v143;
            NL::EntityConverter::enumerateEntitiesWithString(v116, v117, v141, v113, v114, v101, v102 + v100 - v101, (uint64_t)v139);
          }
          v101 = -1;
        }
        if (*(_QWORD *)(v107 + 96) != v102 || *(_QWORD *)(v107 + 104) != v100)
        {
          v100 = *(_QWORD *)(v107 + 104);
          v102 = *(_QWORD *)(v107 + 96);
        }
        if (v104)
        {
          v118 = (unint64_t *)&v104->__shared_owners_;
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        ++v97;
        v98 = v159[5];
      }
      while (v97 < (v159[6] - v98) >> 4);
      if (v101 != -1)
        break;
      v96 = v141;
      v97 = v133;
      v51 = v134;
      v99 = v132;
      if (v141)
        goto LABEL_141;
LABEL_142:
      v126 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
      if (*((_QWORD *)&v142 + 1))
      {
        v127 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
      if (v97 < v99 >> 4 && ++v52 != (uint64_t *)v51)
        continue;
LABEL_152:
      v130 = *v131;
      for (i = v131[1]; i != v130; i = std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](i - 16))
        ;
      v131[1] = v130;
      std::vector<std::shared_ptr<NL::Entity>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity>*>,std::__wrap_iter<std::shared_ptr<NL::Entity>*>>(v131, v130, (uint64_t *)v159[5], (uint64_t *)v159[6], (v159[6] - v159[5]) >> 4);
      std::vector<std::shared_ptr<NL::Entity>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity>*>,std::__wrap_iter<std::shared_ptr<NL::Entity>*>>(v131, v131[1], *(uint64_t **)(*((_QWORD *)&v143 + 1) + 40), *(uint64_t **)(*((_QWORD *)&v143 + 1) + 48), (uint64_t)(*(_QWORD *)(*((_QWORD *)&v143 + 1) + 48) - *(_QWORD *)(*((_QWORD *)&v143 + 1) + 40)) >> 4);
      _Block_object_dispose(&v143, 8);
      *(_QWORD *)&v142 = v147;
      std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
      _Block_object_dispose(&v150, 8);
      if (v155)
      {
        v156 = v155;
        operator delete(v155);
      }
      _Block_object_dispose(&v158, 8);
      v150 = (void **)v163;
      std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v150);
      return;
    }
    v97 = v133;
    v51 = v134;
    v99 = v132;
    v120 = CFStringGetLength(*(CFStringRef *)(a1 + 104)) - v101;
    v169.location = v101;
    v169.length = v120;
    v122 = NL::QueryTokenizer::contentRangeFromRange((NL::QueryTokenizer *)a1, v169);
    v123 = v121;
    v96 = v141;
    if (v122 || v121 != Length)
    {
      v124 = *(_QWORD *)(a1 + 48);
      v125 = *(const __CFString **)(a1 + 104);
      v138[0] = MEMORY[0x1E0C809B0];
      v138[1] = 0x40000000;
      v138[2] = ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_4;
      v138[3] = &unk_1E45CFCC0;
      v138[4] = &v143;
      NL::EntityConverter::enumerateEntitiesWithString(v124, v125, v141, v122, v123, v101, v120, (uint64_t)v138);
    }
LABEL_140:
    if (!v96)
      goto LABEL_142;
LABEL_141:
    CFRelease(v96);
    goto LABEL_142;
  }
}

void sub_1A184CFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  _Block_object_dispose((const void *)(v12 - 232), 8);
  v14 = *(void **)(v12 - 192);
  if (v14)
  {
    *(_QWORD *)(v12 - 184) = v14;
    operator delete(v14);
  }
  _Block_object_dispose((const void *)(v12 - 168), 8);
  *(_QWORD *)(v12 - 232) = a12;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 232));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__22(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t result;

  if (*(_DWORD *)(*a2 + 112) == 7)
  {
    v4 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v5 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48)
                 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)) >> 4;
    v6 = (uint64_t *)v4[6];
    v7 = v4[7];
    if ((unint64_t)v6 >= v7)
    {
      v9 = (uint64_t *)v4[5];
      v10 = v6 - v9;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v11 = v7 - (_QWORD)v9;
      v12 = (uint64_t)(v7 - (_QWORD)v9) >> 2;
      if (v12 <= v10 + 1)
        v12 = v10 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(v4 + 7), v13);
        v9 = (uint64_t *)v4[5];
        v6 = (uint64_t *)v4[6];
      }
      else
      {
        v14 = 0;
      }
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v5;
      v8 = v15 + 1;
      while (v6 != v9)
      {
        v17 = *--v6;
        *--v15 = v17;
      }
      v4[5] = v15;
      v4[6] = v8;
      v4[7] = v16;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v6 = v5;
      v8 = v6 + 1;
    }
    v4[6] = v8;
  }
  v18 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v19 = v18[6];
  if (v19 >= v18[7])
  {
    result = std::vector<std::shared_ptr<NL::Entity>>::__emplace_back_slow_path<std::unique_ptr<NL::Entity>>(v18 + 5, a2);
  }
  else
  {
    std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>((uint64_t *)v18[6], a2);
    result = v19 + 16;
    v18[6] = v19 + 16;
  }
  v18[6] = result;
  return result;
}

void sub_1A184D24C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = v1;
  _Unwind_Resume(a1);
}

uint64_t ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t result;

  if (*(_DWORD *)(*a2 + 112) == 7)
  {
    v4 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v5 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48)
                 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)) >> 4;
    v6 = (uint64_t *)v4[6];
    v7 = v4[7];
    if ((unint64_t)v6 >= v7)
    {
      v9 = (uint64_t *)v4[5];
      v10 = v6 - v9;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v11 = v7 - (_QWORD)v9;
      v12 = (uint64_t)(v7 - (_QWORD)v9) >> 2;
      if (v12 <= v10 + 1)
        v12 = v10 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(v4 + 7), v13);
        v9 = (uint64_t *)v4[5];
        v6 = (uint64_t *)v4[6];
      }
      else
      {
        v14 = 0;
      }
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v5;
      v8 = v15 + 1;
      while (v6 != v9)
      {
        v17 = *--v6;
        *--v15 = v17;
      }
      v4[5] = v15;
      v4[6] = v8;
      v4[7] = v16;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v6 = v5;
      v8 = v6 + 1;
    }
    v4[6] = v8;
  }
  v18 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v19 = v18[6];
  if (v19 >= v18[7])
  {
    result = std::vector<std::shared_ptr<NL::Entity>>::__emplace_back_slow_path<std::unique_ptr<NL::Entity>>(v18 + 5, a2);
  }
  else
  {
    std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>((uint64_t *)v18[6], a2);
    result = v19 + 16;
    v18[6] = v19 + 16;
  }
  v18[6] = result;
  return result;
}

void sub_1A184D3A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = v1;
  _Unwind_Resume(a1);
}

uint64_t ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_3(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t result;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = v2[6];
  if (v3 >= v2[7])
  {
    result = std::vector<std::shared_ptr<NL::Entity>>::__emplace_back_slow_path<std::unique_ptr<NL::Entity>>(v2 + 5, a2);
  }
  else
  {
    std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>((uint64_t *)v2[6], a2);
    result = v3 + 16;
    v2[6] = v3 + 16;
  }
  v2[6] = result;
  return result;
}

void sub_1A184D3F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = v1;
  _Unwind_Resume(a1);
}

uint64_t ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_4(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t result;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = v2[6];
  if (v3 >= v2[7])
  {
    result = std::vector<std::shared_ptr<NL::Entity>>::__emplace_back_slow_path<std::unique_ptr<NL::Entity>>(v2 + 5, a2);
  }
  else
  {
    std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>((uint64_t *)v2[6], a2);
    result = v3 + 16;
    v2[6] = v3 + 16;
  }
  v2[6] = result;
  return result;
}

void sub_1A184D448(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = v1;
  _Unwind_Resume(a1);
}

uint64_t ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_5(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t result;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = v2[6];
  if (v3 >= v2[7])
  {
    result = std::vector<std::shared_ptr<NL::Entity>>::__emplace_back_slow_path<std::unique_ptr<NL::Entity>>(v2 + 5, a2);
  }
  else
  {
    std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>((uint64_t *)v2[6], a2);
    result = v3 + 16;
    v2[6] = v3 + 16;
  }
  v2[6] = result;
  return result;
}

void sub_1A184D49C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = v1;
  _Unwind_Resume(a1);
}

uint64_t ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_6(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t result;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = v2[6];
  if (v3 >= v2[7])
  {
    result = std::vector<std::shared_ptr<NL::Entity>>::__emplace_back_slow_path<std::unique_ptr<NL::Entity>>(v2 + 5, a2);
  }
  else
  {
    std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>((uint64_t *)v2[6], a2);
    result = v3 + 16;
    v2[6] = v3 + 16;
  }
  v2[6] = result;
  return result;
}

void sub_1A184D4F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = v1;
  _Unwind_Resume(a1);
}

uint64_t NL::QueryTokenizer::copySearchStringAndTokenize(CFStringRef *this)
{
  const __CFLocale *info;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  CFMutableStringRef Mutable;

  info = (const __CFLocale *)(*this)->info;
  if (info)
    NL::QueryTokenizer::setLocale((NL::QueryTokenizer *)this, info);
  if (!this[12])
    return 0;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  Mutable = 0;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (v6[3])
  {
    CFStringGetLength(this[13]);
    NLTaggerSetString();
    NLTaggerSetLocaleForRange();
    NLTaggerEnumerateTokens();
    v3 = v6[3];
  }
  else
  {
    v3 = 0;
  }
  _Block_object_dispose(&v5, 8);
  return v3;
}

void sub_1A184D620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN2NL14QueryTokenizer27copySearchStringAndTokenizeEv_block_invoke(uint64_t a1, CFRange *a2)
{
  uint64_t v4;
  uint64_t length;
  CFIndex v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  CFIndex location;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  CFRange v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  CFRange v34;
  char *v35;
  char *v36;
  __int128 v37;
  CFIndex v38;
  const __CFString *v39;
  CFIndex v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  CFIndex *v50;
  char *v51;
  char *v52;
  char *v53;
  const __CFString *v54;
  const __CFString **v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  _QWORD v71[12];
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  CFIndex v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  __n128 (*v79)(uint64_t, uint64_t);
  uint64_t (*v80)();
  __int128 v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  __n128 (*v85)(uint64_t, uint64_t);
  uint64_t (*v86)();
  CFIndex v87;
  uint64_t v88;
  const __CFString *v89;
  const __CFString **v90;
  uint64_t v91;
  __n128 (*v92)(uint64_t, uint64_t);
  uint64_t (*v93)();
  CFIndex v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  char v99;
  _QWORD v100[3];
  int v101;

  v4 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(*(_QWORD *)v4 + 64))
  {
    v13 = *(_QWORD *)(v4 + 120);
    if (v13 != *(_QWORD *)(v4 + 112))
    {
      location = a2[1].location;
      if ((location & 0x800) == 0)
      {
        v15 = *(_QWORD *)(v13 - 8);
        if ((v15 & 0x800) == 0 && ((v15 | location) & 0x80) != 0)
          CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), CFSTR(" "));
      }
    }
  }
  if (CFStringFindCharacterFromSet(*(CFStringRef *)(v4 + 104), *(CFCharacterSetRef *)(v4 + 64), *a2, 0, 0))
  {
    v100[0] = 0;
    v100[1] = v100;
    v100[2] = 0x2000000000;
    v101 = 0;
    v96 = 0;
    v97 = &v96;
    v98 = 0x2000000000;
    v99 = 0;
    v89 = 0;
    v90 = &v89;
    v91 = 0x3802000000;
    v92 = __Block_byref_object_copy__15;
    v93 = __Block_byref_object_dispose__16;
    length = a2->length;
    v94 = a2->location;
    v95 = 0;
    v82 = 0;
    v83 = &v82;
    v84 = 0x3802000000;
    v85 = __Block_byref_object_copy__15;
    v86 = __Block_byref_object_dispose__16;
    v87 = v94;
    v88 = 0;
    v76 = 0;
    v77 = &v76;
    v78 = 0x3802000000;
    v79 = __Block_byref_object_copy__15;
    v80 = __Block_byref_object_dispose__16;
    v81 = xmmword_1A18D3A50;
    v72 = 0;
    v73 = &v72;
    v74 = 0x2000000000;
    v75 = v94;
    v6 = *(_QWORD *)(v4 + 104);
    v71[0] = MEMORY[0x1E0C809B0];
    v71[1] = 0x40000000;
    v71[2] = ___ZN2NL14QueryTokenizer27copySearchStringAndTokenizeEv_block_invoke_2;
    v71[3] = &unk_1E45CFD38;
    v71[4] = &v76;
    v71[5] = &v96;
    v7 = *(_QWORD *)(a1 + 32);
    v71[6] = &v89;
    v71[7] = v7;
    v71[8] = &v72;
    v71[9] = &v82;
    v71[10] = v100;
    v71[11] = v4;
    enumerateCharactersInCFString(v6, v94, length, (uint64_t)v71);
    if (v90[5] != (const __CFString *)-1)
    {
      v8 = v90[6];
      if (v8)
      {
        v9 = v73[3];
        v10 = *(_QWORD *)(v4 + 152);
        v11 = *(char **)(v4 + 144);
        if ((unint64_t)v11 >= v10)
        {
          v26 = *(char **)(v4 + 136);
          v27 = (v11 - v26) >> 4;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 60)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v29 = v10 - (_QWORD)v26;
          if (v29 >> 3 > v28)
            v28 = v29 >> 3;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
            v30 = 0xFFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(v4 + 152, v30);
            v26 = *(char **)(v4 + 136);
            v11 = *(char **)(v4 + 144);
          }
          else
          {
            v31 = 0;
          }
          v52 = &v31[16 * v27];
          v53 = &v31[16 * v30];
          *(_QWORD *)v52 = v9;
          *((_QWORD *)v52 + 1) = v8;
          v12 = v52 + 16;
          if (v11 != v26)
          {
            do
            {
              *((_OWORD *)v52 - 1) = *((_OWORD *)v11 - 1);
              v52 -= 16;
              v11 -= 16;
            }
            while (v11 != v26);
            v26 = *(char **)(v4 + 136);
          }
          *(_QWORD *)(v4 + 136) = v52;
          *(_QWORD *)(v4 + 144) = v12;
          *(_QWORD *)(v4 + 152) = v53;
          if (v26)
            operator delete(v26);
        }
        else
        {
          *(_QWORD *)v11 = v9;
          *((_QWORD *)v11 + 1) = v8;
          v12 = v11 + 16;
        }
        *(_QWORD *)(v4 + 144) = v12;
        v54 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(_QWORD *)(v4 + 104), v83[5], v83[6]);
        CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v54);
        if (*((_BYTE *)v97 + 24))
        {
          CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), CFSTR(" "));
          v55 = v90;
          if (*((_BYTE *)v97 + 24))
            v90[6] = (const __CFString *)(v77[6] + v77[5] - (_QWORD)v90[5]);
        }
        else
        {
          v55 = v90;
        }
        v56 = *(_QWORD *)(v4 + 128);
        v70 = *(_OWORD *)(v55 + 5);
        v57 = *(_QWORD *)(v4 + 120);
        if (v57 >= v56)
        {
          v59 = *(_QWORD *)(v4 + 112);
          v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - v59) >> 3);
          v61 = v60 + 1;
          if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - v59) >> 3);
          if (2 * v62 > v61)
            v61 = 2 * v62;
          if (v62 >= 0x555555555555555)
            v63 = 0xAAAAAAAAAAAAAAALL;
          else
            v63 = v61;
          if (v63)
            v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4 + 128, v63);
          else
            v64 = 0;
          v65 = &v64[24 * v60];
          v66 = &v64[24 * v63];
          *(_OWORD *)v65 = v70;
          *((_QWORD *)v65 + 2) = 0;
          v58 = v65 + 24;
          v68 = *(char **)(v4 + 112);
          v67 = *(char **)(v4 + 120);
          if (v67 != v68)
          {
            do
            {
              v69 = *(_OWORD *)(v67 - 24);
              *((_QWORD *)v65 - 1) = *((_QWORD *)v67 - 1);
              *(_OWORD *)(v65 - 24) = v69;
              v65 -= 24;
              v67 -= 24;
            }
            while (v67 != v68);
            v67 = *(char **)(v4 + 112);
          }
          *(_QWORD *)(v4 + 112) = v65;
          *(_QWORD *)(v4 + 120) = v58;
          *(_QWORD *)(v4 + 128) = v66;
          if (v67)
            operator delete(v67);
        }
        else
        {
          *(_OWORD *)v57 = *(_OWORD *)(v55 + 5);
          *(_QWORD *)(v57 + 16) = 0;
          v58 = (char *)(v57 + 24);
        }
        *(_QWORD *)(v4 + 120) = v58;
        ++*(_QWORD *)(v4 + 256);
        if (v54)
          CFRelease(v54);
      }
    }
    _Block_object_dispose(&v72, 8);
    _Block_object_dispose(&v76, 8);
    _Block_object_dispose(&v82, 8);
    _Block_object_dispose(&v89, 8);
    _Block_object_dispose(&v96, 8);
    _Block_object_dispose(v100, 8);
  }
  else
  {
    v16 = *(_QWORD *)(v4 + 128);
    v17 = *(_QWORD *)(v4 + 120);
    if (v17 >= v16)
    {
      v20 = *(_QWORD *)(v4 + 112);
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v20) >> 3);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v22;
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4 + 128, v24);
      else
        v25 = 0;
      v32 = &v25[24 * v21];
      v33 = &v25[24 * v24];
      v34 = *a2;
      *((_QWORD *)v32 + 2) = a2[1].location;
      *(CFRange *)v32 = v34;
      v19 = v32 + 24;
      v36 = *(char **)(v4 + 112);
      v35 = *(char **)(v4 + 120);
      if (v35 != v36)
      {
        do
        {
          v37 = *(_OWORD *)(v35 - 24);
          *((_QWORD *)v32 - 1) = *((_QWORD *)v35 - 1);
          *(_OWORD *)(v32 - 24) = v37;
          v32 -= 24;
          v35 -= 24;
        }
        while (v35 != v36);
        v35 = *(char **)(v4 + 112);
      }
      *(_QWORD *)(v4 + 112) = v32;
      *(_QWORD *)(v4 + 120) = v19;
      *(_QWORD *)(v4 + 128) = v33;
      if (v35)
        operator delete(v35);
    }
    else
    {
      v18 = *a2;
      *(_QWORD *)(v17 + 16) = a2[1].location;
      *(CFRange *)v17 = v18;
      v19 = (char *)(v17 + 24);
    }
    *(_QWORD *)(v4 + 120) = v19;
    if ((a2[1].location & 0x800) == 0)
      ++*(_QWORD *)(v4 + 256);
    v38 = CFStringGetLength(*(CFStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    v39 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(_QWORD *)(v4 + 104), a2->location, a2->length);
    v89 = v39;
    CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v39);
    v40 = CFStringGetLength(*(CFStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)) - v38;
    v41 = *(_QWORD *)(v4 + 152);
    v42 = *(char **)(v4 + 144);
    if ((unint64_t)v42 >= v41)
    {
      v44 = *(char **)(v4 + 136);
      v45 = (v42 - v44) >> 4;
      v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 60)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v47 = v41 - (_QWORD)v44;
      if (v47 >> 3 > v46)
        v46 = v47 >> 3;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
        v48 = 0xFFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
      {
        v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(v4 + 152, v48);
        v44 = *(char **)(v4 + 136);
        v42 = *(char **)(v4 + 144);
      }
      else
      {
        v49 = 0;
      }
      v50 = (CFIndex *)&v49[16 * v45];
      v51 = &v49[16 * v48];
      *v50 = v38;
      v50[1] = v40;
      v43 = v50 + 2;
      if (v42 != v44)
      {
        do
        {
          *((_OWORD *)v50 - 1) = *((_OWORD *)v42 - 1);
          v50 -= 2;
          v42 -= 16;
        }
        while (v42 != v44);
        v44 = *(char **)(v4 + 136);
      }
      *(_QWORD *)(v4 + 136) = v50;
      *(_QWORD *)(v4 + 144) = v43;
      *(_QWORD *)(v4 + 152) = v51;
      if (v44)
        operator delete(v44);
    }
    else
    {
      *(_QWORD *)v42 = v38;
      *((_QWORD *)v42 + 1) = v40;
      v43 = v42 + 16;
    }
    *(_QWORD *)(v4 + 144) = v43;
    if (v39)
      CFRelease(v39);
  }
}

void sub_1A184DCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  nlp::CFScopedPtr<__CFString const*>::reset(&a11, 0);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 184), 8);
  _Block_object_dispose((const void *)(v35 - 128), 8);
  _Block_object_dispose((const void *)(v35 - 96), 8);
  _Unwind_Resume(a1);
}

void ___ZN2NL14QueryTokenizer27copySearchStringAndTokenizeEv_block_invoke_2(_QWORD *a1, CFRange rangeToSearch)
{
  CFIndex length;
  CFIndex location;
  uint64_t v5;
  int CharacterFromSet;
  int v7;
  __CFString *v8;
  const __CFString *v9;
  CFIndex v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  CFIndex v28;
  CFIndex v29;
  CFIndex v30;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  CFIndex *v40;
  char *v41;
  const __CFString *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  CFRange v46;
  CFRange v47;

  length = rangeToSearch.length;
  location = rangeToSearch.location;
  v5 = a1[11];
  v46.location = rangeToSearch.location;
  v46.length = length;
  CharacterFromSet = CFStringFindCharacterFromSet(*(CFStringRef *)(v5 + 104), *(CFCharacterSetRef *)(v5 + 64), v46, 0, (CFRange *)(*(_QWORD *)(a1[4] + 8) + 40));
  v47.location = location;
  v47.length = length;
  v7 = CFStringFindCharacterFromSet(*(CFStringRef *)(v5 + 104), *(CFCharacterSetRef *)(v5 + 72), v47, 0, 0);
  if (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
  {
    if (v7)
    {
      v8 = *(__CFString **)(*(_QWORD *)(a1[7] + 8) + 24);
      if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48))
      {
        *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = CFStringGetLength(v8);
        v9 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(_QWORD *)(v5 + 104), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48));
        CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(a1[7] + 8) + 24), v9);
        CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(a1[7] + 8) + 24), CFSTR(" "));
        if (v9)
          CFRelease(v9);
      }
      else
      {
        CFStringAppend(v8, CFSTR(" "));
      }
      v16 = *(_QWORD *)(a1[9] + 8);
      *(_QWORD *)(v16 + 40) = location;
      *(_QWORD *)(v16 + 48) = length;
      v10 = location + length;
      v11 = a1[6];
      goto LABEL_12;
    }
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48) = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 48)
                                                 + *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40)
                                                 - *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
    v12 = *(_QWORD *)(v5 + 128);
    v13 = *(_QWORD *)(a1[6] + 8);
    v45 = *(_OWORD *)(v13 + 40);
    v14 = *(_QWORD *)(v5 + 120);
    if (v14 >= v12)
    {
      v17 = *(_QWORD *)(v5 + 112);
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v17) >> 3);
      v19 = v18 + 1;
      if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v17) >> 3);
      if (2 * v20 > v19)
        v19 = 2 * v20;
      if (v20 >= 0x555555555555555)
        v21 = 0xAAAAAAAAAAAAAAALL;
      else
        v21 = v19;
      if (v21)
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v5 + 128, v21);
      else
        v22 = 0;
      v23 = &v22[24 * v18];
      v24 = &v22[24 * v21];
      *(_OWORD *)v23 = v45;
      *((_QWORD *)v23 + 2) = 0;
      v15 = v23 + 24;
      v26 = *(char **)(v5 + 112);
      v25 = *(char **)(v5 + 120);
      if (v25 != v26)
      {
        do
        {
          v27 = *(_OWORD *)(v25 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v25 - 1);
          *(_OWORD *)(v23 - 24) = v27;
          v23 -= 24;
          v25 -= 24;
        }
        while (v25 != v26);
        v25 = *(char **)(v5 + 112);
      }
      *(_QWORD *)(v5 + 112) = v23;
      *(_QWORD *)(v5 + 120) = v15;
      *(_QWORD *)(v5 + 128) = v24;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_OWORD *)v14 = *(_OWORD *)(v13 + 40);
      *(_QWORD *)(v14 + 16) = 0;
      v15 = (char *)(v14 + 24);
    }
    *(_QWORD *)(v5 + 120) = v15;
    ++*(_QWORD *)(v5 + 256);
    v28 = CFStringGetLength(*(CFStringRef *)(*(_QWORD *)(a1[7] + 8) + 24));
    v29 = v28;
    v30 = *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 48);
    v31 = *(_QWORD *)(v5 + 152);
    v32 = *(char **)(v5 + 144);
    if ((unint64_t)v32 >= v31)
    {
      v34 = *(char **)(v5 + 136);
      v35 = (v32 - v34) >> 4;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 60)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v37 = v31 - (_QWORD)v34;
      if (v37 >> 3 > v36)
        v36 = v37 >> 3;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
        v38 = 0xFFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
      {
        v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(v5 + 152, v38);
        v34 = *(char **)(v5 + 136);
        v32 = *(char **)(v5 + 144);
      }
      else
      {
        v39 = 0;
      }
      v40 = (CFIndex *)&v39[16 * v35];
      v41 = &v39[16 * v38];
      *v40 = v29;
      v40[1] = v30;
      v33 = v40 + 2;
      if (v32 != v34)
      {
        do
        {
          *((_OWORD *)v40 - 1) = *((_OWORD *)v32 - 1);
          v40 -= 2;
          v32 -= 16;
        }
        while (v32 != v34);
        v34 = *(char **)(v5 + 136);
      }
      *(_QWORD *)(v5 + 136) = v40;
      *(_QWORD *)(v5 + 144) = v33;
      *(_QWORD *)(v5 + 152) = v41;
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_QWORD *)v32 = v28;
      *((_QWORD *)v32 + 1) = v30;
      v33 = v32 + 16;
    }
    *(_QWORD *)(v5 + 144) = v33;
    v42 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(_QWORD *)(v5 + 104), *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 48));
    CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(a1[7] + 8) + 24), v42);
    CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(a1[7] + 8) + 24), CFSTR(" "));
    v43 = *(_QWORD *)(a1[9] + 8);
    *(_QWORD *)(v43 + 40) = location;
    *(_QWORD *)(v43 + 48) = length;
    v44 = *(_QWORD *)(a1[6] + 8);
    *(_QWORD *)(v44 + 40) = location;
    *(_QWORD *)(v44 + 48) = length;
    if (v42)
      CFRelease(v42);
  }
  else if (!CharacterFromSet)
  {
    v10 = location + length;
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48) = location + length - *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
    v11 = a1[9];
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v11 + 8) + 48) = v10 - *(_QWORD *)(*(_QWORD *)(v11 + 8) + 40);
  }
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = CharacterFromSet != 0;
  ++*(_DWORD *)(*(_QWORD *)(a1[10] + 8) + 24);
}

void sub_1A184E1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0);
  _Unwind_Resume(a1);
}

void std::sort[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity> *>,entity_greater_than_range>(uint64_t *a1, __int128 *a2)
{
  unint64_t v2;
  uint64_t v3;
  char v4;

  v2 = 126 - 2 * __clz(((char *)a2 - (char *)a1) >> 4);
  if (a2 == (__int128 *)a1)
    v3 = 0;
  else
    v3 = v2;
  std::__introsort<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *,false>(a1, a2, (uint64_t)&v4, v3, 1);
}

void std::sort[abi:ne180100]<std::__wrap_iter<std::vector<CFRange> *>,ranges_greater_than_range>(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  char v4;

  v2 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3));
  if (a2 == (_QWORD *)a1)
    v3 = 0;
  else
    v3 = v2;
  std::__introsort<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *,false>(a1, a2, (uint64_t)&v4, v3, 1);
}

uint64_t std::vector<std::vector<CFRange>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<CFRange>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1A184E390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN2NL14QueryTokenizer8tokenizeEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD **v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t *v33;
  char *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t v37;

  v4 = a1[4];
  v5 = a1[5];
  if (NL::SearchGrammar::tokenOrderReversed(*(NL::SearchGrammar **)(v4 + 16)))
    v5 = ~a1[5] + ((uint64_t)(a1[7] - a1[6]) >> 4);
  v6 = *(_OWORD *)(*(_QWORD *)(v4 + 160) + 16 * a2);
  v37 = *(_QWORD *)(*(_QWORD *)(v4 + 160) + 16 * a2);
  v7 = *(std::__shared_weak_count **)(*(_QWORD *)(v4 + 160) + 16 * a2 + 8);
  if (*((_QWORD *)&v6 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(v4 + 184) + 24 * a1[9];
  v12 = (_QWORD **)(v10 + 8);
  v11 = *(_QWORD **)(v10 + 8);
  v13 = *(_QWORD *)(v10 + 16);
  if ((unint64_t)v11 >= v13)
  {
    v15 = *(_QWORD **)v10;
    v16 = ((uint64_t)v11 - *(_QWORD *)v10) >> 4;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v18 = v13 - (_QWORD)v15;
    if (v18 >> 3 > v17)
      v17 = v18 >> 3;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
      v19 = 0xFFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(v10 + 16, v19);
      v11 = *v12;
      v15 = *(_QWORD **)v10;
    }
    else
    {
      v20 = 0;
    }
    v21 = &v20[16 * v16];
    v22 = &v20[16 * v19];
    *(_QWORD *)v21 = a2;
    *((_QWORD *)v21 + 1) = v5;
    v14 = v21 + 16;
    if (v11 != v15)
    {
      do
      {
        *((_OWORD *)v21 - 1) = *((_OWORD *)v11 - 1);
        v21 -= 16;
        v11 -= 2;
      }
      while (v11 != v15);
      v15 = *(_QWORD **)v10;
    }
    *(_QWORD *)v10 = v21;
    *v12 = v14;
    *(_QWORD *)(v10 + 16) = v22;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v11 = a2;
    v11[1] = v5;
    v14 = v11 + 2;
  }
  *v12 = v14;
  if ((*(_DWORD *)(v37 + 112) - 3) <= 1)
  {
    v23 = *(_QWORD *)(v4 + 224);
    v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v4 + 192) - *(_QWORD *)(v4 + 184)) >> 3) - 1;
    v25 = *(unint64_t **)(v4 + 216);
    if ((unint64_t)v25 >= v23)
    {
      v27 = *(unint64_t **)(v4 + 208);
      v28 = ((char *)v25 - (char *)v27) >> 4;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60)
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      v30 = v23 - (_QWORD)v27;
      if (v30 >> 3 > v29)
        v29 = v30 >> 3;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
        v31 = 0xFFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(v4 + 224, v31);
        v27 = *(unint64_t **)(v4 + 208);
        v25 = *(unint64_t **)(v4 + 216);
      }
      else
      {
        v32 = 0;
      }
      v33 = (unint64_t *)&v32[16 * v28];
      v34 = &v32[16 * v31];
      *v33 = v24;
      v33[1] = v5;
      v26 = v33 + 2;
      if (v25 != v27)
      {
        do
        {
          *((_OWORD *)v33 - 1) = *((_OWORD *)v25 - 1);
          v33 -= 2;
          v25 -= 2;
        }
        while (v25 != v27);
        v27 = *(unint64_t **)(v4 + 208);
      }
      *(_QWORD *)(v4 + 208) = v33;
      *(_QWORD *)(v4 + 216) = v26;
      *(_QWORD *)(v4 + 224) = v34;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v25 = v24;
      v25[1] = v5;
      v26 = v25 + 2;
    }
    *(_QWORD *)(v4 + 216) = v26;
  }
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1A184E668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_48c48_ZTSNSt3__16vectorI7CFRangeNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v2 = (_QWORD *)(a1 + 48);
  v2[2] = 0;
  return std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(v2, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 4);
}

void __destroy_helper_block_e8_48c48_ZTSNSt3__16vectorI7CFRangeNS_9allocatorIS1_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void NL::QueryTokenizer::description(NL::QueryTokenizer *this@<X0>, std::string *a2@<X8>)
{
  std::string *v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  const std::string::value_type *v17;
  std::string::size_type size;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::string::size_type v27;
  void **v28;
  std::string::size_type v29;
  uint64_t i;
  void *__p[2];
  unsigned __int8 v33;
  std::string v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;

  v2 = a2;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *((_QWORD *)this + 23);
  for (i = *((_QWORD *)this + 24); v3 != i; v3 += 24)
  {
    v35 = 0;
    v36 = 0;
    v37 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v35, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 4);
    memset(&v34, 0, sizeof(v34));
    v6 = v35;
    v5 = v36;
    if (v35 != v36)
    {
      v7 = 0;
      v8 = -1;
      do
      {
        v9 = *(_OWORD *)(*((_QWORD *)this + 20) + 16 * *v6);
        *(_OWORD *)__p = v9;
        v10 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
        if (*((_QWORD *)&v9 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = v9;
        v15 = *(_QWORD *)(v9 + 96);
        v14 = *(_QWORD *)(v9 + 104);
        v16 = v15 == v8 && v14 == v7;
        v17 = "|";
        if (!v16)
        {
          size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v34.__r_.__value_.__l.__size_;
          if (size)
            std::string::append(&v34, "} ");
          std::string::append(&v34, "[");
          v19 = *(char *)(v13 + 47);
          if (v19 >= 0)
            v20 = (const std::string::value_type *)(v13 + 24);
          else
            v20 = *(const std::string::value_type **)(v13 + 24);
          if (v19 >= 0)
            v21 = *(unsigned __int8 *)(v13 + 47);
          else
            v21 = *(_QWORD *)(v13 + 32);
          std::string::append(&v34, v20, v21);
          std::string::append(&v34, "]");
          v17 = "{";
        }
        std::string::append(&v34, v17);
        v22 = *(char *)(v13 + 23);
        if (v22 >= 0)
          v23 = (const std::string::value_type *)v13;
        else
          v23 = *(const std::string::value_type **)v13;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v13 + 23);
        else
          v24 = *(_QWORD *)(v13 + 8);
        std::string::append(&v34, v23, v24);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v6 += 2;
        v8 = v15;
        v7 = v14;
      }
      while (v6 != v5);
      v27 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = v34.__r_.__value_.__l.__size_;
      v2 = a2;
      if (v27)
        std::string::append(&v34, "} ");
    }
    trim((unint64_t)&v34, __p);
    if ((v33 & 0x80u) == 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if ((v33 & 0x80u) == 0)
      v29 = v33;
    else
      v29 = (std::string::size_type)__p[1];
    std::string::append(v2, (const std::string::value_type *)v28, v29);
    if ((char)v33 < 0)
      operator delete(__p[0]);
    std::string::append(v2, "\n");
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (v35)
    {
      v36 = v35;
      operator delete(v35);
    }
  }
}

void sub_1A184E938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a24)
    operator delete(a24);
  if (*(char *)(a9 + 23) < 0)
    operator delete(*(void **)a9);
  _Unwind_Resume(exception_object);
}

NL::Entity *std::unique_ptr<NL::Entity>::reset[abi:ne180100](NL::Entity **a1, NL::Entity *a2)
{
  NL::Entity *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::Entity::~Entity(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

char *std::vector<std::shared_ptr<NL::Entity>>::__init_with_size[abi:ne180100]<std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<NL::Entity>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1A184EA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<NL::Entity>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

_QWORD *std::vector<std::vector<CFRange>>::__construct_one_at_end[abi:ne180100]<std::vector<CFRange> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1A184EB10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<CFRange>>::__push_back_slow_path<std::vector<CFRange> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  v15 += 24;
  std::vector<std::vector<CFRange>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1A184EC18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<CFRange>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::vector<CFRange>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

_QWORD *std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<NL::Entity>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1A184EE6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<CFRange>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<CFRange>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::default_delete<NL::EntityConverter>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::unique_ptr<NL::Transcriber>::reset[abi:ne180100]((NL::Transcriber **)(a2 + 32), 0);
    std::unique_ptr<NL::NumericConverter>::reset[abi:ne180100]((NL::NumericConverter **)(a2 + 24), 0);
    std::unique_ptr<NL::DateConverter>::reset[abi:ne180100]((uint64_t *)(a2 + 16), 0);
    std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x1A1B0E068);
  }
}

uint64_t std::vector<std::shared_ptr<NL::Entity>>::__emplace_back_slow_path<std::unique_ptr<NL::Entity>>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v21 = &v10[16 * v9];
  std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>((uint64_t *)v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_1A184F088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<NL::Entity>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity>*>,std::__wrap_iter<std::shared_ptr<NL::Entity>*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD v33[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v33[4] = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(v9, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v15];
    v33[0] = v18;
    v33[1] = v26;
    v33[3] = &v18[16 * v17];
    v27 = &v26[2 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26 += 2;
      a3 += 2;
    }
    while (v26 != v27);
    v33[2] = v27;
    v5 = (_QWORD *)std::vector<std::shared_ptr<NL::Entity>>::__swap_out_circular_buffer(a1, v33, v5);
    std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer((uint64_t)v33);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
LABEL_29:
    std::vector<std::shared_ptr<NL::Entity>>::__move_range((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      v31 = v5;
      do
      {
        std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100](v31, a3);
        a3 += 2;
        v31 += 2;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_1A184F274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<NL::Entity>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v7 = (uint64_t)(v4 - 16);
    v8 = 16 * ((v4 - a4) >> 4);
    v9 = a2 - 16;
    do
    {
      result = std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v7, (__int128 *)(v9 + v8));
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<NL::Entity>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::string>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *,false>(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

LABEL_1:
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v26 = *((_QWORD *)a2 - 2);
        if (!v26)
          return;
        v27 = *v9;
        if (!*v9)
          return;
        v28 = *(_QWORD *)(v26 + 96);
        v29 = *(_QWORD *)(v27 + 96);
        if (v28 == v29)
        {
          v30 = *(_QWORD *)(v26 + 104);
          v31 = *(_QWORD *)(v27 + 104);
          if (v30 == v31)
          {
            if (*(_DWORD *)(v26 + 112) >= *(_DWORD *)(v27 + 112))
              return;
          }
          else if (v30 <= v31)
          {
            return;
          }
        }
        else if (v28 >= v29)
        {
          return;
        }
        *v9 = v26;
        *((_QWORD *)a2 - 2) = v27;
        v32 = v9[1];
        v9[1] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v32;
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v9, v9 + 2, (uint64_t *)a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v9, v9 + 2, v9 + 4, (uint64_t *)a2 - 2);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v9, v9 + 2, v9 + 4, v9 + 6, (uint64_t *)a2 - 2);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>((__int128 *)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(&v9[2 * (v13 >> 1)], v9, (uint64_t *)a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v9, &v9[2 * (v13 >> 1)], (uint64_t *)a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v9 + 2, v15 - 2, (uint64_t *)a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v9 + 4, &v9[2 * v14 + 2], (uint64_t *)a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          v17 = *(v9 - 2);
          if (!v17 || (v18 = *v9) == 0)
          {
LABEL_23:
            v9 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_less_than_range &>((uint64_t)v9, a2);
            goto LABEL_24;
          }
          v19 = *(_QWORD *)(v17 + 96);
          v20 = *(_QWORD *)(v18 + 96);
          if (v19 == v20)
          {
            v21 = *(_QWORD *)(v17 + 104);
            v22 = *(_QWORD *)(v18 + 104);
            if (v21 == v22)
            {
              if (*(_DWORD *)(v17 + 112) >= *(_DWORD *)(v18 + 112))
                goto LABEL_23;
            }
            else if (v21 <= v22)
            {
              goto LABEL_23;
            }
          }
          else if (v19 >= v20)
          {
            goto LABEL_23;
          }
LABEL_19:
          v23 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_less_than_range &>((uint64_t)v9, a2);
          if ((v24 & 1) == 0)
            goto LABEL_22;
          v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v9, v23);
          v9 = v23 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v23 + 2, (uint64_t *)a2))
          {
            v10 = v11 + 1;
            if (v25)
              continue;
LABEL_22:
            std::__introsort<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *,false>(a1, v23, a3, -v11, a5 & 1);
            v9 = v23 + 2;
LABEL_24:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__int128 *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v9 != (uint64_t *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *>(v9, (uint64_t *)a2, (uint64_t *)a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v27 = *((_QWORD *)a2 - 2);
        if (!v27)
          return;
        v28 = *v9;
        if (!*v9)
          return;
        v29 = *(_QWORD *)(v27 + 96);
        v30 = *(_QWORD *)(v28 + 96);
        v31 = v29 < v30;
        if (v29 == v30 && (v32 = *(_QWORD *)(v27 + 104), v33 = *(_QWORD *)(v28 + 104), v31 = v32 < v33, v32 == v33))
        {
          if (*(_DWORD *)(v27 + 112) >= *(_DWORD *)(v28 + 112))
            return;
        }
        else if (!v31)
        {
          return;
        }
        *v9 = v27;
        *((_QWORD *)a2 - 2) = v28;
        v34 = v9[1];
        v9[1] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v34;
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v9, v9 + 2, (uint64_t *)a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v9, v9 + 2, v9 + 4, (uint64_t *)a2 - 2);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v9, v9 + 2, v9 + 4, v9 + 6, (uint64_t *)a2 - 2);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>((__int128 *)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(&v9[2 * (v13 >> 1)], v9, (uint64_t *)a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_18;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v9, &v9[2 * (v13 >> 1)], (uint64_t *)a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v9 + 2, v15 - 2, (uint64_t *)a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v9 + 4, &v9[2 * v14 + 2], (uint64_t *)a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_18;
          }
          v17 = *(v9 - 2);
          if (!v17 || (v18 = *v9) == 0)
          {
LABEL_22:
            v9 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_greater_than_range &>((uint64_t)v9, a2);
            goto LABEL_23;
          }
          v19 = *(_QWORD *)(v17 + 96);
          v20 = *(_QWORD *)(v18 + 96);
          v21 = v19 < v20;
          if (v19 == v20 && (v22 = *(_QWORD *)(v17 + 104), v23 = *(_QWORD *)(v18 + 104), v21 = v22 < v23, v22 == v23))
          {
            if (*(_DWORD *)(v17 + 112) >= *(_DWORD *)(v18 + 112))
              goto LABEL_22;
          }
          else if (!v21)
          {
            goto LABEL_22;
          }
LABEL_18:
          v24 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_greater_than_range &>((uint64_t)v9, a2);
          if ((v25 & 1) == 0)
            goto LABEL_21;
          v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v9, v24);
          v9 = v24 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v24 + 2, (uint64_t *)a2))
          {
            v10 = v11 + 1;
            if (v26)
              continue;
LABEL_21:
            std::__introsort<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *,false>(a1, v24, a3, -v11, a5 & 1);
            v9 = v24 + 2;
LABEL_23:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__int128 *)v24;
          if (v26)
            return;
          goto LABEL_1;
        }
        if (v9 != (uint64_t *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *>(v9, (uint64_t *)a2, (uint64_t *)a2, a3);
        return;
    }
  }
}

  v8 = (uint64_t)(a2 - 3);
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v49 = 0;
        v50 = 0;
        v51 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v49, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
        v46 = 0;
        v47 = 0;
        v48 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v46, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 4);
        v31 = v49;
        v30 = v50;
        v32 = v46;
        v33 = v47;
        if (v46)
        {
          v47 = v46;
          operator delete(v46);
        }
        v34 = v30 - v31;
        v35 = v33 - v32;
        if (v49)
        {
          v50 = v49;
          operator delete(v49);
        }
        if (v34 > v35)
        {
          v36 = *(const void **)v9;
          *(_QWORD *)v9 = *(a2 - 3);
          *(a2 - 3) = v36;
          v37 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = *(a2 - 2);
          *(a2 - 2) = v37;
          v38 = *(_QWORD *)(v9 + 16);
          *(_QWORD *)(v9 + 16) = *(a2 - 1);
          *(a2 - 1) = v38;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v9, v9 + 24, v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v9, v9 + 24, v9 + 48, v8);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v9, v9 + 24, v9 + 48, v9 + 72, v8);
        return;
      default:
        if (v12 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>((_QWORD *)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v9, (uint64_t)a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (_OWORD *)(v9 + 24 * (v13 >> 1));
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v9 + 24 * v14, v9, v8);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v9, v9 + 24 * v14, v8);
            v16 = 3 * v14;
            v17 = v8;
            v18 = v9 + 8 * v16;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v9 + 24, v18 - 24, (uint64_t)(a2 - 6));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v9 + 48, v9 + 24 + 8 * v16, (uint64_t)(a2 - 9));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v18 - 24, (uint64_t)v15, v9 + 24 + 8 * v16);
            v19 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *v15;
            *v15 = v19;
            v20 = *(_QWORD *)(v9 + 16);
            *(_QWORD *)(v9 + 16) = *(_QWORD *)(v18 + 16);
            *(_QWORD *)(v18 + 16) = v20;
            v8 = v17;
          }
          if ((a5 & 1) == 0)
          {
            v43 = 0;
            v44 = 0;
            v45 = 0;
            std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v43, *(const void **)(v9 - 24), *(_QWORD *)(v9 - 16), (uint64_t)(*(_QWORD *)(v9 - 16) - *(_QWORD *)(v9 - 24)) >> 4);
            v40 = 0;
            v41 = 0;
            v42 = 0;
            std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v40, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 4);
            v22 = v43;
            v21 = v44;
            v24 = v40;
            v23 = v41;
            if (v40)
            {
              v41 = v40;
              operator delete(v40);
            }
            v25 = v21 - v22;
            v26 = v23 - v24;
            if (v43)
            {
              v44 = v43;
              operator delete(v43);
            }
            if (v25 <= v26)
            {
              v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,ranges_greater_than_range &>(a1, a2);
              goto LABEL_20;
            }
          }
          v27 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,ranges_greater_than_range &>(a1, a2);
          if ((v28 & 1) == 0)
            goto LABEL_18;
          v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, (uint64_t)v27);
          v9 = (unint64_t)(v27 + 3);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>((uint64_t)(v27 + 3), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v29)
              continue;
LABEL_18:
            std::__introsort<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *,false>(a1, v27, a3, -v11, a5 & 1);
            v9 = (unint64_t)(v27 + 3);
LABEL_20:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v27;
          if (v29)
            return;
          goto LABEL_1;
        }
        if ((_QWORD *)v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *,std::vector<CFRange> *>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((uint64_t *)a2 - 2, v9))
        {
          v20 = *v9;
          *v9 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v20;
          v21 = v9[1];
          v9[1] = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v21;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v9, v9 + 2, (uint64_t *)a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v9, v9 + 2, v9 + 4, (uint64_t *)a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v9, v9 + 2, v9 + 4, v9 + 6, (uint64_t *)a2 - 2, a3);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>((uint64_t)v9, (uint64_t)a2, (uint64_t (**)(__int128 *, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>((__int128 *)v9, a2, (uint64_t (**)(__int128 *, __int128 *))a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(&v9[2 * (v13 >> 1)], v9, (uint64_t *)a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v9, &v9[2 * (v13 >> 1)], (uint64_t *)a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v9 + 2, v15 - 2, (uint64_t *)a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v9 + 4, &v9[2 * v14 + 2], (uint64_t *)a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v15 - 2, v15, &v9[2 * v14 + 2], a3);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v9 - 2, v9) & 1) == 0)
          {
            v9 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NLMessageConversationTurn> *,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&)>((uint64_t)v9, a2, (uint64_t (**)(__int128 *, __int128 *))a3);
            goto LABEL_16;
          }
LABEL_11:
          v17 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NLMessageConversationTurn> *,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&)>((uint64_t)v9, (uint64_t *)a2, (uint64_t (**)(uint64_t, __int128 *))a3);
          if ((v18 & 1) == 0)
            goto LABEL_14;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v9, v17, a3);
          v9 = v17 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v17 + 2, (uint64_t *)a2, a3))
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*,false>(a1, v17, a3, -v11, a5 & 1);
            v9 = v17 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__int128 *)v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if (v9 != (uint64_t *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*,std::shared_ptr<NLMessageConversationTurn>*>((char *)v9, (char *)a2, a2, (uint64_t (**)(__int128 *, uint64_t))a3);
        return;
    }
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 != a2)
  {
    v29 = v2;
    v30 = v3;
    v6 = a1 + 1;
    if (a1 + 1 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v8;
        v8 = v6;
        v10 = *((_QWORD *)v9 + 2);
        if (v10)
        {
          v11 = *(_QWORD *)v9;
          if (*(_QWORD *)v9)
          {
            v12 = *(_QWORD *)(v10 + 96);
            v13 = *(_QWORD *)(v11 + 96);
            if (v12 == v13)
            {
              v14 = *(_QWORD *)(v10 + 104);
              v15 = *(_QWORD *)(v11 + 104);
              if (v14 == v15)
              {
                if (*(_DWORD *)(v10 + 112) < *(_DWORD *)(v11 + 112))
                  goto LABEL_13;
              }
              else if (v14 > v15)
              {
LABEL_13:
                v16 = *((_QWORD *)v9 + 3);
                *(_QWORD *)&v28 = *((_QWORD *)v9 + 2);
                *((_QWORD *)&v28 + 1) = v16;
                *(_QWORD *)v8 = 0;
                *((_QWORD *)v8 + 1) = 0;
                std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v8, v9);
                v17 = (uint64_t)a1;
                if (v9 != a1)
                {
                  v18 = v7;
                  while ((_QWORD)v28)
                  {
                    v19 = (__int128 *)((char *)a1 + v18 - 16);
                    v20 = *(_QWORD *)v19;
                    if (!*(_QWORD *)v19)
                      break;
                    v21 = *(_QWORD *)(v28 + 96);
                    v22 = *(_QWORD *)(v20 + 96);
                    if (v21 == v22)
                    {
                      v23 = *(_QWORD *)(v28 + 104);
                      v24 = *(_QWORD *)(v20 + 104);
                      if (v23 == v24)
                      {
                        if (*(_DWORD *)(v28 + 112) >= *(_DWORD *)(v20 + 112))
                          break;
                      }
                      else if (v23 <= v24)
                      {
                        break;
                      }
                    }
                    else if (v21 >= v22)
                    {
                      v17 = (uint64_t)a1 + v18;
                      goto LABEL_27;
                    }
                    --v9;
                    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)a1 + v18, v19);
                    v18 -= 16;
                    if (!v18)
                    {
                      v17 = (uint64_t)a1;
                      goto LABEL_27;
                    }
                  }
                  v17 = (uint64_t)v9;
                }
LABEL_27:
                std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v17, &v28);
                v25 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
                if (*((_QWORD *)&v28 + 1))
                {
                  v26 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
                  do
                    v27 = __ldaxr(v26);
                  while (__stlxr(v27 - 1, v26));
                  if (!v27)
                  {
                    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                    std::__shared_weak_count::__release_weak(v25);
                  }
                }
              }
            }
            else if (v12 < v13)
            {
              goto LABEL_13;
            }
          }
        }
        v6 = v8 + 1;
        v7 += 16;
      }
      while (v8 + 1 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    v27 = v2;
    v28 = v3;
    v5 = a1;
    v6 = a1 + 2;
    if (a1 + 2 != a2)
    {
      v7 = (__int128 *)(a1 - 2);
      do
      {
        v8 = (uint64_t)v5;
        v5 = v6;
        v9 = *(_QWORD *)(v8 + 16);
        if (v9)
        {
          v10 = *(_QWORD *)v8;
          if (*(_QWORD *)v8)
          {
            v11 = *(_QWORD *)(v9 + 96);
            v12 = *(_QWORD *)(v10 + 96);
            if (v11 == v12)
            {
              v13 = *(_QWORD *)(v9 + 104);
              v14 = *(_QWORD *)(v10 + 104);
              if (v13 == v14)
              {
                if (*(_DWORD *)(v9 + 112) < *(_DWORD *)(v10 + 112))
                  goto LABEL_13;
              }
              else if (v13 > v14)
              {
LABEL_13:
                v15 = *(_QWORD *)(v8 + 24);
                *(_QWORD *)&v26 = *(_QWORD *)(v8 + 16);
                *((_QWORD *)&v26 + 1) = v15;
                *v5 = 0;
                v5[1] = 0;
                std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v5, (__int128 *)v8);
                v16 = v26;
                if ((_QWORD)v26)
                {
                  v17 = v7;
                  while (1)
                  {
                    v18 = *(_QWORD *)v17;
                    if (!*(_QWORD *)v17)
                      break;
                    v19 = *(_QWORD *)(v16 + 96);
                    v20 = *(_QWORD *)(v18 + 96);
                    if (v19 == v20)
                    {
                      v21 = *(_QWORD *)(v16 + 104);
                      v22 = *(_QWORD *)(v18 + 104);
                      if (v21 == v22)
                      {
                        if (*(_DWORD *)(v16 + 112) >= *(_DWORD *)(v18 + 112))
                          break;
                      }
                      else if (v21 <= v22)
                      {
                        break;
                      }
                    }
                    else if (v19 >= v20)
                    {
                      goto LABEL_24;
                    }
                    v8 -= 16;
                    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)(v17 + 1), v17);
                    v16 = v26;
                    --v17;
                    if (!(_QWORD)v26)
                    {
LABEL_24:
                      v8 = (uint64_t)(v17 + 1);
                      break;
                    }
                  }
                }
                std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v8, &v26);
                v23 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
                if (*((_QWORD *)&v26 + 1))
                {
                  v24 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
                  do
                    v25 = __ldaxr(v24);
                  while (__stlxr(v25 - 1, v24));
                  if (!v25)
                  {
                    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                    std::__shared_weak_count::__release_weak(v23);
                  }
                }
              }
            }
            else if (v11 < v12)
            {
              goto LABEL_13;
            }
          }
        }
        v6 = v5 + 2;
        ++v7;
      }
      while (v5 + 2 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *a2;
  if (*a2)
  {
    v4 = *a1;
    if (!*a1)
      goto LABEL_14;
    v6 = *(_QWORD *)(v3 + 96);
    v5 = *(_QWORD *)(v3 + 104);
    v7 = *(_QWORD *)(v4 + 96);
    if (v6 == v7)
    {
      v8 = *(_QWORD *)(v4 + 104);
      if (v5 == v8)
      {
        if (*(_DWORD *)(v3 + 112) >= *(_DWORD *)(v4 + 112))
        {
LABEL_14:
          v12 = *a3;
          if (!*a3)
            return 0;
          v13 = *(_QWORD *)(v12 + 96);
          v14 = *(_QWORD *)(v3 + 96);
          if (v13 == v14)
          {
            v15 = *(_QWORD *)(v12 + 104);
            v16 = *(_QWORD *)(v3 + 104);
            if (v15 == v16)
            {
              if (*(_DWORD *)(v12 + 112) >= *(_DWORD *)(v3 + 112))
                return 0;
            }
            else if (v15 <= v16)
            {
              return 0;
            }
          }
          else if (v13 >= v14)
          {
            return 0;
          }
          *a2 = v12;
          *a3 = v3;
          v18 = a2 + 1;
          v17 = a2[1];
          a2[1] = a3[1];
          a3[1] = v17;
          v19 = *a2;
          if (*a2)
          {
            v20 = *a1;
            if (*a1)
            {
              v21 = *(_QWORD *)(v19 + 96);
              v22 = *(_QWORD *)(v20 + 96);
              if (v21 != v22)
              {
                if (v21 >= v22)
                  return 1;
                goto LABEL_42;
              }
              v23 = *(_QWORD *)(v19 + 104);
              v24 = *(_QWORD *)(v20 + 104);
              if (v23 == v24)
              {
                if (*(_DWORD *)(v19 + 112) >= *(_DWORD *)(v20 + 112))
                  return 1;
                goto LABEL_42;
              }
              if (v23 > v24)
              {
LABEL_42:
                *a1 = v19;
                v25 = a1 + 1;
                *a2 = v20;
                v3 = 2;
LABEL_46:
                v34 = *v25;
                *v25 = *v18;
                *v18 = v34;
                return v3;
              }
            }
          }
          return 1;
        }
      }
      else if (v5 <= v8)
      {
        goto LABEL_14;
      }
    }
    else if (v6 >= v7)
    {
      goto LABEL_14;
    }
    v9 = *a3;
    if (!*a3)
      goto LABEL_31;
    v10 = *(_QWORD *)(v9 + 96);
    if (v10 == v6)
    {
      v11 = *(_QWORD *)(v9 + 104);
      if (v11 == v5)
      {
        if (*(_DWORD *)(v9 + 112) >= *(_DWORD *)(v3 + 112))
        {
LABEL_31:
          *a1 = v3;
          *a2 = v4;
          v27 = a1[1];
          a1[1] = a2[1];
          a2[1] = v27;
          v28 = *a3;
          if (!*a3)
            return 1;
          v29 = *a2;
          if (!*a2)
            return 1;
          v30 = *(_QWORD *)(v28 + 96);
          v31 = *(_QWORD *)(v29 + 96);
          if (v30 == v31)
          {
            v32 = *(_QWORD *)(v28 + 104);
            v33 = *(_QWORD *)(v29 + 104);
            if (v32 == v33)
            {
              if (*(_DWORD *)(v28 + 112) >= *(_DWORD *)(v29 + 112))
                return 1;
            }
            else if (v32 <= v33)
            {
              return 1;
            }
          }
          else if (v30 >= v31)
          {
            return 1;
          }
          *a2 = v28;
          *a3 = v29;
          v26 = a3 + 1;
          v3 = 2;
          v25 = a2 + 1;
LABEL_45:
          v18 = v26;
          goto LABEL_46;
        }
      }
      else if (v11 <= v5)
      {
        goto LABEL_31;
      }
    }
    else if (v10 >= v6)
    {
      goto LABEL_31;
    }
    *a1 = v9;
    v25 = a1 + 1;
    *a3 = v4;
    v26 = a3 + 1;
    v3 = 1;
    goto LABEL_45;
  }
  return v3;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_less_than_range &>(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v37;

  v37 = *(_OWORD *)a1;
  v2 = v37;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    v3 = *((_QWORD *)a2 - 2);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 96);
      v5 = *(_QWORD *)(v2 + 104);
      v6 = *(_QWORD *)(v3 + 96);
      if (v4 == v6)
      {
        v7 = *(_QWORD *)(v3 + 104);
        if (v5 == v7)
        {
          if (*(_DWORD *)(v2 + 112) >= *(_DWORD *)(v3 + 112))
            goto LABEL_19;
        }
        else if (v5 <= v7)
        {
          goto LABEL_19;
        }
      }
      else if (v4 >= v6)
      {
        goto LABEL_19;
      }
      for (i = (__int128 *)(a1 + 16); ; ++i)
      {
        v9 = *(_QWORD *)i;
        if (*(_QWORD *)i)
        {
          v10 = *(_QWORD *)(v9 + 96);
          if (v4 == v10)
          {
            v11 = *(_QWORD *)(v9 + 104);
            if (v5 == v11)
            {
              if (*(_DWORD *)(v2 + 112) < *(_DWORD *)(v9 + 112))
                goto LABEL_31;
            }
            else if (v5 > v11)
            {
              goto LABEL_31;
            }
          }
          else if (v4 < v10)
          {
            goto LABEL_31;
          }
        }
      }
    }
  }
LABEL_19:
  for (i = (__int128 *)(a1 + 16); i < a2; ++i)
  {
    if (v2)
    {
      v12 = *(_QWORD *)i;
      if (*(_QWORD *)i)
      {
        v13 = *(_QWORD *)(v2 + 96);
        v14 = *(_QWORD *)(v12 + 96);
        if (v13 == v14)
        {
          v15 = *(_QWORD *)(v2 + 104);
          v16 = *(_QWORD *)(v12 + 104);
          if (v15 == v16)
          {
            if (*(_DWORD *)(v2 + 112) < *(_DWORD *)(v12 + 112))
              break;
          }
          else if (v15 > v16)
          {
            break;
          }
        }
        else if (v13 < v14)
        {
          break;
        }
      }
    }
  }
LABEL_31:
  if (i < a2)
  {
    --a2;
    if (v2)
    {
      v17 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v18 = *(_QWORD *)(v2 + 96);
        v19 = *(_QWORD *)(v2 + 104);
        do
        {
          v20 = *(_QWORD *)(v17 + 96);
          if (v18 == v20)
          {
            v21 = *(_QWORD *)(v17 + 104);
            if (v19 == v21)
            {
              if (*(_DWORD *)(v2 + 112) >= *(_DWORD *)(v17 + 112))
                break;
            }
            else if (v19 <= v21)
            {
              break;
            }
          }
          else if (v18 >= v20)
          {
            break;
          }
          v22 = *((_QWORD *)a2-- - 2);
          v17 = v22;
        }
        while (v22);
      }
    }
  }
  if (i < a2)
  {
    v23 = *(_QWORD *)i;
    v24 = *(_QWORD *)a2;
    do
    {
      *(_QWORD *)i = v24;
      *(_QWORD *)a2 = v23;
      v25 = *((_QWORD *)i + 1);
      *((_QWORD *)i + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v25;
      do
      {
        while (1)
        {
          while (1)
          {
            do
            {
              do
                ++i;
              while (!(_QWORD)v37);
              v23 = *(_QWORD *)i;
            }
            while (!*(_QWORD *)i);
            v26 = *(_QWORD *)(v37 + 96);
            v27 = *(_QWORD *)(v37 + 104);
            v28 = *(_QWORD *)(v23 + 96);
            if (v26 == v28)
              break;
            if (v26 < v28)
              goto LABEL_59;
          }
          v29 = *(_QWORD *)(v23 + 104);
          if (v27 != v29)
            break;
          if (*(_DWORD *)(v37 + 112) < *(_DWORD *)(v23 + 112))
            goto LABEL_59;
        }
      }
      while (v27 <= v29);
LABEL_59:
      while (1)
      {
        v30 = *((_QWORD *)a2-- - 2);
        v24 = v30;
        if (!v30)
          break;
        v31 = *(_QWORD *)(v24 + 96);
        if (v26 == v31)
        {
          v32 = *(_QWORD *)(v24 + 104);
          if (v27 == v32)
          {
            if (*(_DWORD *)(v37 + 112) >= *(_DWORD *)(v24 + 112))
              break;
          }
          else if (v27 <= v32)
          {
            break;
          }
        }
        else if (v26 >= v31)
        {
          break;
        }
      }
    }
    while (i < a2);
  }
  if (i - 1 != (__int128 *)a1)
    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](a1, i - 1);
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)(i - 1), &v37);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return i;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_less_than_range &>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v53;

  v53 = *(_OWORD *)a1;
  v3 = v53;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (__int128 *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (v6)
    goto LABEL_24;
  v7 = *(_QWORD *)(v3 + 96);
  v8 = *(_QWORD *)(v3 + 104);
  v9 = a1;
  while (1)
  {
    v10 = (__int128 *)v9;
    v9 = (uint64_t)v5;
    v11 = *(_QWORD *)(v4 + 96);
    if (v11 == v7)
    {
      v12 = *(_QWORD *)(v4 + 104);
      if (v12 == v8)
      {
        if (*(_DWORD *)(v4 + 112) >= *(_DWORD *)(v3 + 112))
          goto LABEL_14;
      }
      else if (v12 <= v8)
      {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    if (v11 >= v7)
      break;
LABEL_13:
    ++v5;
    v4 = *(_QWORD *)(v9 + 16);
    v10 = (__int128 *)v9;
    if (!v4)
      goto LABEL_14;
  }
  v10 = v5 - 1;
LABEL_14:
  if (v10 != (__int128 *)a1)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          do
          {
            v14 = *((_QWORD *)a2-- - 2);
            v13 = v14;
          }
          while (!v14);
          v15 = *(_QWORD *)(v13 + 96);
          v16 = *(_QWORD *)(v3 + 96);
          if (v15 == v16)
            break;
          if (v15 < v16)
            goto LABEL_48;
        }
        v17 = *(_QWORD *)(v13 + 104);
        v18 = *(_QWORD *)(v3 + 104);
        if (v17 != v18)
          break;
        if (*(_DWORD *)(v13 + 112) < *(_DWORD *)(v3 + 112))
          goto LABEL_48;
      }
    }
    while (v17 <= v18);
    goto LABEL_48;
  }
LABEL_24:
  while (v5 < a2)
  {
    while (1)
    {
      v20 = *((_QWORD *)a2-- - 2);
      v19 = v20;
      if (!v20 || v3 == 0)
        break;
      v22 = *(_QWORD *)(v19 + 96);
      v23 = *(_QWORD *)(v3 + 96);
      if (v22 == v23)
      {
        v24 = *(_QWORD *)(v19 + 104);
        v25 = *(_QWORD *)(v3 + 104);
        if (v24 == v25)
        {
          if (*(_DWORD *)(v19 + 112) < *(_DWORD *)(v3 + 112) || v5 >= a2)
            goto LABEL_48;
        }
        else if (v24 > v25 || v5 >= a2)
        {
          goto LABEL_48;
        }
      }
      else if (v22 < v23 || v5 >= a2)
      {
        goto LABEL_48;
      }
    }
  }
LABEL_48:
  v29 = v5;
  if (v5 < a2)
  {
    v30 = *(_QWORD *)a2;
    v29 = v5;
    v31 = a2;
    do
    {
      v32 = *(_QWORD *)v29;
      *(_QWORD *)v29 = v30;
      *(_QWORD *)v31 = v32;
      v33 = *((_QWORD *)v29 + 1);
      *((_QWORD *)v29 + 1) = *((_QWORD *)v31 + 1);
      *((_QWORD *)v31 + 1) = v33;
      v35 = *((_QWORD *)v29++ + 2);
      v34 = v35;
      v36 = v29;
      if (!v35)
      {
LABEL_61:
        v29 = v36;
        goto LABEL_62;
      }
      do
      {
        if (!(_QWORD)v53)
          goto LABEL_61;
        v37 = *(_QWORD *)(v34 + 96);
        v38 = *(_QWORD *)(v53 + 96);
        if (v37 == v38)
        {
          v39 = *(_QWORD *)(v34 + 104);
          v40 = *(_QWORD *)(v53 + 104);
          if (v39 == v40)
          {
            if (*(_DWORD *)(v34 + 112) >= *(_DWORD *)(v53 + 112))
              goto LABEL_62;
          }
          else if (v39 <= v40)
          {
            goto LABEL_62;
          }
        }
        else if (v37 >= v38)
        {
          goto LABEL_62;
        }
        v41 = *((_QWORD *)v29++ + 2);
        v34 = v41;
      }
      while (v41);
      do
      {
        while (1)
        {
          while (1)
          {
            do
            {
LABEL_62:
              v42 = *((_QWORD *)v31-- - 2);
              v30 = v42;
              if (v42)
                v43 = (_QWORD)v53 == 0;
              else
                v43 = 1;
            }
            while (v43);
            v44 = *(_QWORD *)(v30 + 96);
            v45 = *(_QWORD *)(v53 + 96);
            if (v44 == v45)
              break;
            if (v44 < v45)
              goto LABEL_73;
          }
          v46 = *(_QWORD *)(v30 + 104);
          v47 = *(_QWORD *)(v53 + 104);
          if (v46 != v47)
            break;
          if (*(_DWORD *)(v30 + 112) < *(_DWORD *)(v53 + 112))
            goto LABEL_73;
        }
      }
      while (v46 <= v47);
LABEL_73:
      ;
    }
    while (v29 < v31);
  }
  v48 = (uint64_t)(v29 - 1);
  if (v29 - 1 != (__int128 *)a1)
    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](a1, v29 - 1);
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v48, &v53);
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  return v48;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      if (!v6)
        return result;
      v7 = *a1;
      if (!*a1)
        return result;
      v8 = *(_QWORD *)(v6 + 96);
      v9 = *(_QWORD *)(v7 + 96);
      if (v8 == v9)
      {
        v10 = *(_QWORD *)(v6 + 104);
        v11 = *(_QWORD *)(v7 + 104);
        if (v10 == v11)
        {
          if (*(_DWORD *)(v6 + 112) >= *(_DWORD *)(v7 + 112))
            return result;
        }
        else if (v10 <= v11)
        {
          return result;
        }
      }
      else if (v8 >= v9)
      {
        return result;
      }
      *a1 = v6;
      *(a2 - 2) = v7;
      v34 = a1[1];
      a1[1] = *(a2 - 1);
      *(a2 - 1) = v34;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v12 = (__int128 *)(a1 + 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a1 + 4);
      v13 = (__int128 *)(a1 + 6);
      if (a1 + 6 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(_QWORD *)v13;
    if (!*(_QWORD *)v13)
      goto LABEL_39;
    v17 = *(_QWORD *)v12;
    if (!*(_QWORD *)v12)
      goto LABEL_39;
    v18 = *(_QWORD *)(v16 + 96);
    v19 = *(_QWORD *)(v17 + 96);
    if (v18 == v19)
      break;
    if (v18 < v19)
      goto LABEL_19;
LABEL_39:
    v12 = v13;
    v14 += 16;
    if (++v13 == (__int128 *)a2)
      return 1;
  }
  v20 = *(_QWORD *)(v16 + 104);
  v21 = *(_QWORD *)(v17 + 104);
  if (v20 == v21)
  {
    if (*(_DWORD *)(v16 + 112) < *(_DWORD *)(v17 + 112))
      goto LABEL_19;
    goto LABEL_39;
  }
  if (v20 <= v21)
    goto LABEL_39;
LABEL_19:
  v22 = *((_QWORD *)v13 + 1);
  *(_QWORD *)&v35 = *(_QWORD *)v13;
  *((_QWORD *)&v35 + 1) = v22;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v13, v12);
  v23 = (uint64_t)a1;
  if (v12 != (__int128 *)a1)
  {
    v24 = v14;
    while ((_QWORD)v35)
    {
      v25 = (__int128 *)((char *)a1 + v24 + 16);
      v26 = *(_QWORD *)v25;
      if (!*(_QWORD *)v25)
        break;
      v27 = *(_QWORD *)(v35 + 96);
      v28 = *(_QWORD *)(v26 + 96);
      if (v27 == v28)
      {
        v29 = *(_QWORD *)(v35 + 104);
        v30 = *(_QWORD *)(v26 + 104);
        if (v29 == v30)
        {
          if (*(_DWORD *)(v35 + 112) >= *(_DWORD *)(v26 + 112))
            break;
        }
        else if (v29 <= v30)
        {
          break;
        }
      }
      else if (v27 >= v28)
      {
        v23 = (uint64_t)a1 + v24 + 32;
        goto LABEL_33;
      }
      --v12;
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)a1 + v24 + 32, v25);
      v24 -= 16;
      if (v24 == -32)
      {
        v23 = (uint64_t)a1;
        goto LABEL_33;
      }
    }
    v23 = (uint64_t)v12;
  }
LABEL_33:
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v23, &v35);
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (++v15 != 8)
    goto LABEL_39;
  return v13 + 1 == (__int128 *)a2;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(a1, a2, a3);
  v9 = *a4;
  if (*a4)
  {
    v10 = *a3;
    if (*a3)
    {
      v11 = *(_QWORD *)(v9 + 96);
      v12 = *(_QWORD *)(v10 + 96);
      if (v11 == v12)
      {
        v13 = *(_QWORD *)(v9 + 104);
        v14 = *(_QWORD *)(v10 + 104);
        if (v13 == v14)
        {
          if (*(_DWORD *)(v9 + 112) >= *(_DWORD *)(v10 + 112))
            return result;
        }
        else if (v13 <= v14)
        {
          return result;
        }
      }
      else if (v11 >= v12)
      {
        return result;
      }
      *a3 = v9;
      *a4 = v10;
      v15 = a3[1];
      a3[1] = a4[1];
      a4[1] = v15;
      v16 = *a3;
      if (*a3)
      {
        v17 = *a2;
        if (*a2)
        {
          v18 = *(_QWORD *)(v16 + 96);
          v19 = *(_QWORD *)(v17 + 96);
          if (v18 == v19)
          {
            v20 = *(_QWORD *)(v16 + 104);
            v21 = *(_QWORD *)(v17 + 104);
            if (v20 == v21)
            {
              if (*(_DWORD *)(v16 + 112) >= *(_DWORD *)(v17 + 112))
                return result;
            }
            else if (v20 <= v21)
            {
              return result;
            }
          }
          else if (v18 >= v19)
          {
            return result;
          }
          *a2 = v16;
          *a3 = v17;
          v22 = a2[1];
          a2[1] = a3[1];
          a3[1] = v22;
          v23 = *a2;
          if (*a2)
          {
            v24 = *a1;
            if (*a1)
            {
              v25 = *(_QWORD *)(v23 + 96);
              v26 = *(_QWORD *)(v24 + 96);
              if (v25 == v26)
              {
                v27 = *(_QWORD *)(v23 + 104);
                v28 = *(_QWORD *)(v24 + 104);
                if (v27 == v28)
                {
                  if (*(_DWORD *)(v23 + 112) >= *(_DWORD *)(v24 + 112))
                    return result;
                }
                else if (v27 <= v28)
                {
                  return result;
                }
              }
              else if (v25 >= v26)
              {
                return result;
              }
              *a1 = v23;
              *a2 = v24;
              v29 = a1[1];
              a1[1] = a2[1];
              a2[1] = v29;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(a1, a2, a3, a4);
  v11 = *a5;
  if (*a5)
  {
    v12 = *a4;
    if (*a4)
    {
      v13 = *(_QWORD *)(v11 + 96);
      v14 = *(_QWORD *)(v12 + 96);
      if (v13 == v14)
      {
        v15 = *(_QWORD *)(v11 + 104);
        v16 = *(_QWORD *)(v12 + 104);
        if (v15 == v16)
        {
          if (*(_DWORD *)(v11 + 112) >= *(_DWORD *)(v12 + 112))
            return result;
        }
        else if (v15 <= v16)
        {
          return result;
        }
      }
      else if (v13 >= v14)
      {
        return result;
      }
      *a4 = v11;
      *a5 = v12;
      v17 = a4[1];
      a4[1] = a5[1];
      a5[1] = v17;
      v18 = *a4;
      if (*a4)
      {
        v19 = *a3;
        if (*a3)
        {
          v20 = *(_QWORD *)(v18 + 96);
          v21 = *(_QWORD *)(v19 + 96);
          if (v20 == v21)
          {
            v22 = *(_QWORD *)(v18 + 104);
            v23 = *(_QWORD *)(v19 + 104);
            if (v22 == v23)
            {
              if (*(_DWORD *)(v18 + 112) >= *(_DWORD *)(v19 + 112))
                return result;
            }
            else if (v22 <= v23)
            {
              return result;
            }
          }
          else if (v20 >= v21)
          {
            return result;
          }
          *a3 = v18;
          *a4 = v19;
          v24 = a3[1];
          a3[1] = a4[1];
          a4[1] = v24;
          v25 = *a3;
          if (*a3)
          {
            v26 = *a2;
            if (*a2)
            {
              v27 = *(_QWORD *)(v25 + 96);
              v28 = *(_QWORD *)(v26 + 96);
              if (v27 == v28)
              {
                v29 = *(_QWORD *)(v25 + 104);
                v30 = *(_QWORD *)(v26 + 104);
                if (v29 == v30)
                {
                  if (*(_DWORD *)(v25 + 112) >= *(_DWORD *)(v26 + 112))
                    return result;
                }
                else if (v29 <= v30)
                {
                  return result;
                }
              }
              else if (v27 >= v28)
              {
                return result;
              }
              *a2 = v25;
              *a3 = v26;
              v31 = a2[1];
              a2[1] = a3[1];
              a3[1] = v31;
              v32 = *a2;
              if (*a2)
              {
                v33 = *a1;
                if (*a1)
                {
                  v34 = *(_QWORD *)(v32 + 96);
                  v35 = *(_QWORD *)(v33 + 96);
                  if (v34 == v35)
                  {
                    v36 = *(_QWORD *)(v32 + 104);
                    v37 = *(_QWORD *)(v33 + 104);
                    if (v36 == v37)
                    {
                      if (*(_DWORD *)(v32 + 112) >= *(_DWORD *)(v33 + 112))
                        return result;
                    }
                    else if (v36 <= v37)
                    {
                      return result;
                    }
                  }
                  else if (v34 >= v35)
                  {
                    return result;
                  }
                  *a1 = v32;
                  *a2 = v33;
                  v38 = a1[1];
                  a1[1] = a2[1];
                  a2[1] = v38;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      v14 = (uint64_t *)v6;
      while (1)
      {
        v15 = *v14;
        if (!*v14)
          goto LABEL_15;
        v16 = *a1;
        if (!*a1)
          goto LABEL_15;
        v17 = *(_QWORD *)(v15 + 96);
        v18 = *(_QWORD *)(v16 + 96);
        if (v17 == v18)
          break;
        if (v17 < v18)
          goto LABEL_14;
LABEL_15:
        v14 += 2;
        if (v14 == a3)
        {
          v13 = (uint64_t)a3;
          goto LABEL_19;
        }
      }
      v19 = *(_QWORD *)(v15 + 104);
      v20 = *(_QWORD *)(v16 + 104);
      if (v19 == v20)
      {
        if (*(_DWORD *)(v15 + 112) >= *(_DWORD *)(v16 + 112))
          goto LABEL_15;
      }
      else if (v19 <= v20)
      {
        goto LABEL_15;
      }
LABEL_14:
      *v14 = v16;
      *a1 = v15;
      v21 = v14[1];
      v14[1] = a1[1];
      a1[1] = v21;
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>((uint64_t)a1, a4, v9, a1);
      goto LABEL_15;
    }
LABEL_19:
    if (v8 >= 17)
    {
      v22 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range,std::shared_ptr<NL::Entity> *>((uint64_t)a1, v6, a4, v22);
        v6 -= 16;
      }
      while (v22-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v6 = a3 - 2;
  if (a3 < 2)
    return;
  v46 = v4;
  v47 = v5;
  v8 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) < ((uint64_t)a4 - a1) >> 4)
    return;
  v10 = ((uint64_t)a4 - a1) >> 3;
  v11 = v10 + 1;
  v12 = (__int128 *)(a1 + 16 * (v10 + 1));
  v13 = v10 + 2;
  if (v10 + 2 >= a3)
    goto LABEL_12;
  v15 = (uint64_t *)(v12 + 1);
  v14 = *(_QWORD *)v12;
  if (!*(_QWORD *)v12)
    goto LABEL_22;
  v16 = *v15;
  if (*v15)
  {
    v17 = *(_QWORD *)(v14 + 96);
    v18 = *(_QWORD *)(v16 + 96);
    if (v17 != v18)
    {
      if (v17 >= v18)
        goto LABEL_12;
      goto LABEL_11;
    }
    v19 = *(_QWORD *)(v14 + 104);
    v20 = *(_QWORD *)(v16 + 104);
    if (v19 == v20)
    {
      if (*(_DWORD *)(v14 + 112) >= *(_DWORD *)(v16 + 112))
        goto LABEL_12;
LABEL_11:
      ++v12;
      v11 = v13;
      goto LABEL_12;
    }
    if (v19 > v20)
      goto LABEL_11;
LABEL_12:
    v14 = *(_QWORD *)v12;
    if (!*(_QWORD *)v12)
      goto LABEL_22;
  }
  v21 = *a4;
  if (!*a4)
  {
    v26 = 0;
    goto LABEL_23;
  }
  v22 = *(_QWORD *)(v14 + 96);
  v23 = *(_QWORD *)(v21 + 96);
  if (v22 == v23)
  {
    v24 = *(_QWORD *)(v14 + 104);
    v25 = *(_QWORD *)(v21 + 104);
    if (v24 == v25)
    {
      if (*(_DWORD *)(v14 + 112) < *(_DWORD *)(v21 + 112))
        return;
    }
    else if (v24 > v25)
    {
      return;
    }
  }
  else if (v22 < v23)
  {
    return;
  }
LABEL_22:
  v26 = *a4;
LABEL_23:
  v27 = a4[1];
  *(_QWORD *)&v45 = v26;
  *((_QWORD *)&v45 + 1) = v27;
  *a4 = 0;
  a4[1] = 0;
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)a4, v12);
  if (v8 >= v11)
  {
    while (1)
    {
      v32 = 2 * v11;
      v11 = (2 * v11) | 1;
      v28 = (__int128 *)(a1 + 16 * v11);
      v33 = v32 + 2;
      if (v32 + 2 >= a3)
        goto LABEL_40;
      v35 = (uint64_t *)(v28 + 1);
      v34 = *(_QWORD *)v28;
      if (!*(_QWORD *)v28)
        goto LABEL_49;
      v36 = *v35;
      if (!*v35)
        goto LABEL_41;
      v37 = *(_QWORD *)(v34 + 96);
      v38 = *(_QWORD *)(v36 + 96);
      if (v37 != v38)
        break;
      v39 = *(_QWORD *)(v34 + 104);
      v40 = *(_QWORD *)(v36 + 104);
      if (v39 == v40)
      {
        if (*(_DWORD *)(v34 + 112) < *(_DWORD *)(v36 + 112))
          goto LABEL_39;
      }
      else if (v39 > v40)
      {
        goto LABEL_39;
      }
LABEL_40:
      v34 = *(_QWORD *)v28;
      if (*(_QWORD *)v28)
      {
LABEL_41:
        if (v26)
        {
          v41 = *(_QWORD *)(v34 + 96);
          v42 = *(_QWORD *)(v26 + 96);
          if (v41 == v42)
          {
            v43 = *(_QWORD *)(v34 + 104);
            v44 = *(_QWORD *)(v26 + 104);
            if (v43 == v44)
            {
              if (*(_DWORD *)(v34 + 112) < *(_DWORD *)(v26 + 112))
                goto LABEL_24;
            }
            else if (v43 > v44)
            {
              goto LABEL_24;
            }
          }
          else if (v41 < v42)
          {
            goto LABEL_24;
          }
        }
      }
LABEL_49:
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v12, v28);
      v12 = v28;
      if (v8 < v11)
        goto LABEL_25;
    }
    if (v37 >= v38)
      goto LABEL_40;
LABEL_39:
    ++v28;
    v11 = v33;
    goto LABEL_40;
  }
LABEL_24:
  v28 = v12;
LABEL_25:
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v28, &v45);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
  if (*((_QWORD *)&v45 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range,std::shared_ptr<NL::Entity> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v13 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>((__int128 *)a1, a3, a4);
    v8 = v7;
    v9 = (__int128 *)(a2 - 16);
    if (v7 == v9)
    {
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v7, &v13);
    }
    else
    {
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v7, v9);
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v9, &v13);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(a1, (uint64_t)(v8 + 1), a3, ((uint64_t)v8 - a1 + 16) >> 4);
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1A1850D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = (uint64_t)a1;
    a1 += v5 + 1;
    v9 = 2 * v5;
    v5 = (2 * v5) | 1;
    v10 = v9 + 2;
    if (v10 < a3)
    {
      v11 = (uint64_t *)(a1 + 1);
      v12 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v13 = *v11;
        if (*v11)
        {
          v14 = *(_QWORD *)(v12 + 96);
          v15 = *(_QWORD *)(v13 + 96);
          if (v14 != v15)
          {
            if (v14 >= v15)
              goto LABEL_13;
LABEL_12:
            ++a1;
            v5 = v10;
            goto LABEL_13;
          }
          v16 = *(_QWORD *)(v12 + 104);
          v17 = *(_QWORD *)(v13 + 104);
          if (v16 == v17)
          {
            if (*(_DWORD *)(v12 + 112) < *(_DWORD *)(v13 + 112))
              goto LABEL_12;
          }
          else if (v16 > v17)
          {
            goto LABEL_12;
          }
        }
      }
    }
LABEL_13:
    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v8, a1);
  }
  while (v5 <= v7);
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  __int128 *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = v4 >> 1;
    v7 = (__int128 *)(a1 + 16 * (v4 >> 1));
    v8 = *(_QWORD *)v7;
    if (*(_QWORD *)v7)
    {
      v9 = (_QWORD *)(a2 - 16);
      v10 = *(_QWORD *)(a2 - 16);
      if (v10)
      {
        v11 = *(_QWORD *)(v8 + 96);
        v12 = *(_QWORD *)(v10 + 96);
        if (v11 == v12)
        {
          v13 = *(_QWORD *)(v8 + 104);
          v14 = *(_QWORD *)(v10 + 104);
          if (v13 == v14)
          {
            if (*(_DWORD *)(v8 + 112) >= *(_DWORD *)(v10 + 112))
              return;
          }
          else if (v13 <= v14)
          {
            return;
          }
        }
        else if (v11 >= v12)
        {
          return;
        }
        v15 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)&v26 = *(_QWORD *)(a2 - 16);
        *((_QWORD *)&v26 + 1) = v15;
        *v9 = 0;
        *(_QWORD *)(a2 - 8) = 0;
        std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v9, v7);
        if (v4 >= 2)
        {
          while (1)
          {
            v20 = v6 - 1;
            v6 = (v6 - 1) >> 1;
            v16 = (__int128 *)(a1 + 16 * v6);
            v21 = *(_QWORD *)v16;
            if (!*(_QWORD *)v16)
              break;
            v22 = *(_QWORD *)(v21 + 96);
            v23 = *(_QWORD *)(v10 + 96);
            if (v22 == v23)
            {
              v24 = *(_QWORD *)(v21 + 104);
              v25 = *(_QWORD *)(v10 + 104);
              if (v24 == v25)
              {
                if (*(_DWORD *)(v21 + 112) >= *(_DWORD *)(v10 + 112))
                  break;
              }
              else if (v24 <= v25)
              {
                break;
              }
            }
            else if (v22 >= v23)
            {
              break;
            }
            std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v7, (__int128 *)(a1 + 16 * v6));
            v7 = (__int128 *)(a1 + 16 * v6);
            if (v20 <= 1)
              goto LABEL_13;
          }
        }
        v16 = v7;
LABEL_13:
        std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v16, &v26);
        v17 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
        if (*((_QWORD *)&v26 + 1))
        {
          v18 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
    }
  }
}

uint64_t *std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E45CF1C0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = (uint64_t)v5;
  *a2 = 0;
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *,false>(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (a1 != a2)
  {
    v30 = v2;
    v31 = v3;
    v6 = a1 + 1;
    if (a1 + 1 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v8;
        v8 = v6;
        v10 = *((_QWORD *)v9 + 2);
        if (v10)
        {
          v11 = *(_QWORD *)v9;
          if (*(_QWORD *)v9)
          {
            v12 = *(_QWORD *)(v10 + 96);
            v13 = *(_QWORD *)(v11 + 96);
            v14 = v12 < v13;
            if (v12 == v13 && (v15 = *(_QWORD *)(v10 + 104), v16 = *(_QWORD *)(v11 + 104), v14 = v15 < v16, v15 == v16))
            {
              if (*(_DWORD *)(v10 + 112) < *(_DWORD *)(v11 + 112))
                goto LABEL_12;
            }
            else if (v14)
            {
LABEL_12:
              v17 = *((_QWORD *)v9 + 3);
              *(_QWORD *)&v29 = *((_QWORD *)v9 + 2);
              *((_QWORD *)&v29 + 1) = v17;
              *(_QWORD *)v8 = 0;
              *((_QWORD *)v8 + 1) = 0;
              std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v8, v9);
              v18 = (uint64_t)a1;
              if (v9 != a1)
              {
                v19 = v7;
                while ((_QWORD)v29)
                {
                  v20 = (__int128 *)((char *)a1 + v19 - 16);
                  v21 = *(_QWORD *)v20;
                  if (!*(_QWORD *)v20)
                    break;
                  v22 = *(_QWORD *)(v29 + 96);
                  v23 = *(_QWORD *)(v21 + 96);
                  if (v22 == v23)
                  {
                    v24 = *(_QWORD *)(v29 + 104);
                    v25 = *(_QWORD *)(v21 + 104);
                    if (v24 == v25)
                    {
                      if (*(_DWORD *)(v29 + 112) >= *(_DWORD *)(v21 + 112))
                        break;
                    }
                    else if (v24 >= v25)
                    {
                      break;
                    }
                  }
                  else if (v22 >= v23)
                  {
                    v18 = (uint64_t)a1 + v19;
                    goto LABEL_26;
                  }
                  --v9;
                  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)a1 + v19, v20);
                  v19 -= 16;
                  if (!v19)
                  {
                    v18 = (uint64_t)a1;
                    goto LABEL_26;
                  }
                }
                v18 = (uint64_t)v9;
              }
LABEL_26:
              std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v18, &v29);
              v26 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
              if (*((_QWORD *)&v29 + 1))
              {
                v27 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
                do
                  v28 = __ldaxr(v27);
                while (__stlxr(v28 - 1, v27));
                if (!v28)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v26);
                }
              }
            }
          }
        }
        v6 = v8 + 1;
        v7 += 16;
      }
      while (v8 + 1 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 != a2)
  {
    v28 = v2;
    v29 = v3;
    v5 = a1;
    v6 = a1 + 2;
    if (a1 + 2 != a2)
    {
      v7 = (__int128 *)(a1 - 2);
      do
      {
        v8 = (uint64_t)v5;
        v5 = v6;
        v9 = *(_QWORD *)(v8 + 16);
        if (v9)
        {
          v10 = *(_QWORD *)v8;
          if (*(_QWORD *)v8)
          {
            v11 = *(_QWORD *)(v9 + 96);
            v12 = *(_QWORD *)(v10 + 96);
            v13 = v11 < v12;
            if (v11 == v12 && (v14 = *(_QWORD *)(v9 + 104), v15 = *(_QWORD *)(v10 + 104), v13 = v14 < v15, v14 == v15))
            {
              if (*(_DWORD *)(v9 + 112) < *(_DWORD *)(v10 + 112))
                goto LABEL_12;
            }
            else if (v13)
            {
LABEL_12:
              v16 = *(_QWORD *)(v8 + 24);
              *(_QWORD *)&v27 = *(_QWORD *)(v8 + 16);
              *((_QWORD *)&v27 + 1) = v16;
              *v5 = 0;
              v5[1] = 0;
              std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v5, (__int128 *)v8);
              v17 = v27;
              if ((_QWORD)v27)
              {
                v18 = v7;
                while (1)
                {
                  v19 = *(_QWORD *)v18;
                  if (!*(_QWORD *)v18)
                    break;
                  v20 = *(_QWORD *)(v17 + 96);
                  v21 = *(_QWORD *)(v19 + 96);
                  if (v20 == v21)
                  {
                    v22 = *(_QWORD *)(v17 + 104);
                    v23 = *(_QWORD *)(v19 + 104);
                    if (v22 == v23)
                    {
                      if (*(_DWORD *)(v17 + 112) >= *(_DWORD *)(v19 + 112))
                        break;
                    }
                    else if (v22 >= v23)
                    {
                      break;
                    }
                  }
                  else if (v20 >= v21)
                  {
                    goto LABEL_23;
                  }
                  v8 -= 16;
                  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)(v18 + 1), v18);
                  v17 = v27;
                  --v18;
                  if (!(_QWORD)v27)
                  {
LABEL_23:
                    v8 = (uint64_t)(v18 + 1);
                    break;
                  }
                }
              }
              std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v8, &v27);
              v24 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
              if (*((_QWORD *)&v27 + 1))
              {
                v25 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
                do
                  v26 = __ldaxr(v25);
                while (__stlxr(v26 - 1, v25));
                if (!v26)
                {
                  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                  std::__shared_weak_count::__release_weak(v24);
                }
              }
            }
          }
        }
        v6 = v5 + 2;
        ++v7;
      }
      while (v5 + 2 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *a2;
  if (*a2)
  {
    v4 = *a1;
    if (!*a1)
      goto LABEL_6;
    v6 = *(_QWORD *)(v3 + 96);
    v5 = *(_QWORD *)(v3 + 104);
    v7 = *(_QWORD *)(v4 + 96);
    v8 = v6 < v7;
    if (v6 == v7 && (v9 = *(_QWORD *)(v4 + 104), v8 = v5 < v9, v5 == v9))
    {
      if (*(_DWORD *)(v3 + 112) >= *(_DWORD *)(v4 + 112))
        goto LABEL_6;
    }
    else if (!v8)
    {
LABEL_6:
      v10 = *a3;
      if (!*a3)
        return 0;
      v11 = *(_QWORD *)(v10 + 96);
      v12 = *(_QWORD *)(v3 + 96);
      v13 = v11 < v12;
      if (v11 == v12 && (v14 = *(_QWORD *)(v10 + 104), v15 = *(_QWORD *)(v3 + 104), v13 = v14 < v15, v14 == v15))
      {
        if (*(_DWORD *)(v10 + 112) >= *(_DWORD *)(v3 + 112))
          return 0;
      }
      else if (!v13)
      {
        return 0;
      }
      *a2 = v10;
      *a3 = v3;
      v29 = a2 + 1;
      v28 = a2[1];
      a2[1] = a3[1];
      a3[1] = v28;
      v30 = *a2;
      if (*a2)
      {
        v31 = *a1;
        if (*a1)
        {
          v32 = *(_QWORD *)(v30 + 96);
          v33 = *(_QWORD *)(v31 + 96);
          v34 = v32 < v33;
          if (v32 == v33 && (v35 = *(_QWORD *)(v30 + 104), v36 = *(_QWORD *)(v31 + 104), v34 = v35 < v36, v35 == v36))
          {
            if (*(_DWORD *)(v30 + 112) >= *(_DWORD *)(v31 + 112))
              return 1;
          }
          else if (!v34)
          {
            return 1;
          }
          *a1 = v30;
          v37 = a1 + 1;
          *a2 = v31;
          v3 = 2;
LABEL_41:
          v39 = *v37;
          *v37 = *v29;
          *v29 = v39;
          return v3;
        }
      }
      return 1;
    }
    v16 = *a3;
    if (!*a3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 96);
    v18 = v17 < v6;
    if (v17 == v6 && (v19 = *(_QWORD *)(v16 + 104), v18 = v19 < v5, v19 == v5))
    {
      if (*(_DWORD *)(v16 + 112) >= *(_DWORD *)(v3 + 112))
        goto LABEL_17;
    }
    else if (!v18)
    {
LABEL_17:
      *a1 = v3;
      *a2 = v4;
      v20 = a1[1];
      a1[1] = a2[1];
      a2[1] = v20;
      v21 = *a3;
      if (!*a3)
        return 1;
      v22 = *a2;
      if (!*a2)
        return 1;
      v23 = *(_QWORD *)(v21 + 96);
      v24 = *(_QWORD *)(v22 + 96);
      v25 = v23 < v24;
      if (v23 == v24 && (v26 = *(_QWORD *)(v21 + 104), v27 = *(_QWORD *)(v22 + 104), v25 = v26 < v27, v26 == v27))
      {
        if (*(_DWORD *)(v21 + 112) >= *(_DWORD *)(v22 + 112))
          return 1;
      }
      else if (!v25)
      {
        return 1;
      }
      *a2 = v21;
      *a3 = v22;
      v38 = a3 + 1;
      v3 = 2;
      v37 = a2 + 1;
LABEL_37:
      v29 = v38;
      goto LABEL_41;
    }
    *a1 = v16;
    v37 = a1 + 1;
    *a3 = v4;
    v38 = a3 + 1;
    v3 = 1;
    goto LABEL_37;
  }
  return v3;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_greater_than_range &>(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v43;

  v43 = *(_OWORD *)a1;
  v2 = v43;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    v3 = *((_QWORD *)a2 - 2);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 96);
      v5 = *(_QWORD *)(v2 + 104);
      v6 = *(_QWORD *)(v3 + 96);
      v7 = v4 < v6;
      if (v4 == v6)
      {
        v8 = *(_QWORD *)(v3 + 104);
        v7 = v5 < v8;
        if (v5 == v8)
        {
          if (*(_DWORD *)(v2 + 112) >= *(_DWORD *)(v3 + 112))
            goto LABEL_6;
LABEL_18:
          for (i = (__int128 *)(a1 + 16); ; ++i)
          {
            v16 = *(_QWORD *)i;
            if (*(_QWORD *)i)
            {
              v17 = *(_QWORD *)(v16 + 96);
              v18 = v4 < v17;
              if (v4 == v17 && (v19 = *(_QWORD *)(v16 + 104), v18 = v5 < v19, v5 == v19))
              {
                if (*(_DWORD *)(v2 + 112) < *(_DWORD *)(v16 + 112))
                  goto LABEL_26;
              }
              else if (v18)
              {
                goto LABEL_26;
              }
            }
          }
        }
      }
      if (v7)
        goto LABEL_18;
    }
  }
LABEL_6:
  for (i = (__int128 *)(a1 + 16); i < a2; ++i)
  {
    if (v2)
    {
      v10 = *(_QWORD *)i;
      if (*(_QWORD *)i)
      {
        v11 = *(_QWORD *)(v2 + 96);
        v12 = *(_QWORD *)(v10 + 96);
        v13 = v11 < v12;
        if (v11 == v12 && (v14 = *(_QWORD *)(v2 + 104), v15 = *(_QWORD *)(v10 + 104), v13 = v14 < v15, v14 == v15))
        {
          if (*(_DWORD *)(v2 + 112) < *(_DWORD *)(v10 + 112))
            break;
        }
        else if (v13)
        {
          break;
        }
      }
    }
  }
LABEL_26:
  if (i < a2)
  {
    --a2;
    if (v2)
    {
      v20 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v21 = *(_QWORD *)(v2 + 96);
        v22 = *(_QWORD *)(v2 + 104);
        do
        {
          v23 = *(_QWORD *)(v20 + 96);
          v24 = v21 < v23;
          if (v21 == v23 && (v25 = *(_QWORD *)(v20 + 104), v24 = v22 < v25, v22 == v25))
          {
            if (*(_DWORD *)(v2 + 112) >= *(_DWORD *)(v20 + 112))
              break;
          }
          else if (!v24)
          {
            break;
          }
          v26 = *((_QWORD *)a2-- - 2);
          v20 = v26;
        }
        while (v26);
      }
    }
  }
  if (i < a2)
  {
    v27 = *(_QWORD *)i;
    v28 = *(_QWORD *)a2;
    do
    {
      *(_QWORD *)i = v28;
      *(_QWORD *)a2 = v27;
      v29 = *((_QWORD *)i + 1);
      *((_QWORD *)i + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v29;
      do
      {
        while (1)
        {
          do
          {
            do
              ++i;
            while (!(_QWORD)v43);
            v27 = *(_QWORD *)i;
          }
          while (!*(_QWORD *)i);
          v30 = *(_QWORD *)(v43 + 96);
          v31 = *(_QWORD *)(v43 + 104);
          v32 = *(_QWORD *)(v27 + 96);
          v33 = v30 < v32;
          if (v30 != v32)
            break;
          v34 = *(_QWORD *)(v27 + 104);
          v33 = v31 < v34;
          if (v31 != v34)
            break;
          if (*(_DWORD *)(v43 + 112) < *(_DWORD *)(v27 + 112))
            goto LABEL_51;
        }
      }
      while (!v33);
LABEL_51:
      while (1)
      {
        v35 = *((_QWORD *)a2-- - 2);
        v28 = v35;
        if (!v35)
          break;
        v36 = *(_QWORD *)(v28 + 96);
        v37 = v30 < v36;
        if (v30 == v36 && (v38 = *(_QWORD *)(v28 + 104), v37 = v31 < v38, v31 == v38))
        {
          if (*(_DWORD *)(v43 + 112) >= *(_DWORD *)(v28 + 112))
            break;
        }
        else if (!v37)
        {
          break;
        }
      }
    }
    while (i < a2);
  }
  if (i - 1 != (__int128 *)a1)
    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](a1, i - 1);
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)(i - 1), &v43);
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return i;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_greater_than_range &>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 v56;

  v56 = *(_OWORD *)a1;
  v3 = v56;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (__int128 *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (v6)
    goto LABEL_23;
  v7 = *(_QWORD *)(v3 + 96);
  v8 = *(_QWORD *)(v3 + 104);
  v9 = a1;
  while (1)
  {
    v10 = (__int128 *)v9;
    v9 = (uint64_t)v5;
    v11 = *(_QWORD *)(v4 + 96);
    if (v11 == v7)
    {
      v12 = *(_QWORD *)(v4 + 104);
      if (v12 == v8)
      {
        if (*(_DWORD *)(v4 + 112) >= *(_DWORD *)(v3 + 112))
          goto LABEL_14;
      }
      else if (v12 >= v8)
      {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    if (v11 >= v7)
      break;
LABEL_13:
    ++v5;
    v4 = *(_QWORD *)(v9 + 16);
    v10 = (__int128 *)v9;
    if (!v4)
      goto LABEL_14;
  }
  v10 = v5 - 1;
LABEL_14:
  if (v10 != (__int128 *)a1)
  {
    do
    {
      while (1)
      {
        do
        {
          v14 = *((_QWORD *)a2-- - 2);
          v13 = v14;
        }
        while (!v14);
        v15 = *(_QWORD *)(v13 + 96);
        v16 = *(_QWORD *)(v3 + 96);
        v17 = v15 < v16;
        if (v15 != v16)
          break;
        v18 = *(_QWORD *)(v13 + 104);
        v19 = *(_QWORD *)(v3 + 104);
        v17 = v18 < v19;
        if (v18 != v19)
          break;
        if (*(_DWORD *)(v13 + 112) < *(_DWORD *)(v3 + 112))
          goto LABEL_41;
      }
    }
    while (!v17);
    goto LABEL_41;
  }
LABEL_23:
  while (v5 < a2)
  {
    while (1)
    {
      v21 = *((_QWORD *)a2-- - 2);
      v20 = v21;
      if (!v21 || v3 == 0)
        break;
      v23 = *(_QWORD *)(v20 + 96);
      v24 = *(_QWORD *)(v3 + 96);
      v25 = v23 < v24;
      if (v23 == v24 && (v26 = *(_QWORD *)(v20 + 104), v27 = *(_QWORD *)(v3 + 104), v25 = v26 < v27, v26 == v27))
      {
        if (*(_DWORD *)(v20 + 112) < *(_DWORD *)(v3 + 112) || v5 >= a2)
          goto LABEL_41;
      }
      else if (v25 || v5 >= a2)
      {
        goto LABEL_41;
      }
    }
  }
LABEL_41:
  v30 = v5;
  if (v5 < a2)
  {
    v31 = *(_QWORD *)a2;
    v30 = v5;
    v32 = a2;
    do
    {
      v33 = *(_QWORD *)v30;
      *(_QWORD *)v30 = v31;
      *(_QWORD *)v32 = v33;
      v34 = *((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = *((_QWORD *)v32 + 1);
      *((_QWORD *)v32 + 1) = v34;
      v36 = *((_QWORD *)v30++ + 2);
      v35 = v36;
      v37 = v30;
      if (!v36)
      {
LABEL_53:
        v30 = v37;
        goto LABEL_54;
      }
      do
      {
        if (!(_QWORD)v56)
          goto LABEL_53;
        v38 = *(_QWORD *)(v35 + 96);
        v39 = *(_QWORD *)(v56 + 96);
        v40 = v38 < v39;
        if (v38 == v39 && (v41 = *(_QWORD *)(v35 + 104), v42 = *(_QWORD *)(v56 + 104), v40 = v41 < v42, v41 == v42))
        {
          if (*(_DWORD *)(v35 + 112) >= *(_DWORD *)(v56 + 112))
            goto LABEL_54;
        }
        else if (!v40)
        {
          goto LABEL_54;
        }
        v43 = *((_QWORD *)v30++ + 2);
        v35 = v43;
      }
      while (v43);
      do
      {
        while (1)
        {
          do
          {
LABEL_54:
            v44 = *((_QWORD *)v32-- - 2);
            v31 = v44;
            if (v44)
              v45 = (_QWORD)v56 == 0;
            else
              v45 = 1;
          }
          while (v45);
          v46 = *(_QWORD *)(v31 + 96);
          v47 = *(_QWORD *)(v56 + 96);
          v48 = v46 < v47;
          if (v46 != v47)
            break;
          v49 = *(_QWORD *)(v31 + 104);
          v50 = *(_QWORD *)(v56 + 104);
          v48 = v49 < v50;
          if (v49 != v50)
            break;
          if (*(_DWORD *)(v31 + 112) < *(_DWORD *)(v56 + 112))
            goto LABEL_64;
        }
      }
      while (!v48);
LABEL_64:
      ;
    }
    while (v30 < v32);
  }
  v51 = (uint64_t)(v30 - 1);
  if (v30 - 1 != (__int128 *)a1)
    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](a1, v30 - 1);
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v51, &v56);
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  return v51;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      if (!v6)
        return result;
      v7 = *a1;
      if (!*a1)
        return result;
      v8 = *(_QWORD *)(v6 + 96);
      v9 = *(_QWORD *)(v7 + 96);
      v10 = v8 < v9;
      if (v8 == v9 && (v11 = *(_QWORD *)(v6 + 104), v12 = *(_QWORD *)(v7 + 104), v10 = v11 < v12, v11 == v12))
      {
        if (*(_DWORD *)(v6 + 112) >= *(_DWORD *)(v7 + 112))
          return result;
      }
      else if (!v10)
      {
        return result;
      }
      *a1 = v6;
      *(a2 - 2) = v7;
      v36 = a1[1];
      a1[1] = *(a2 - 1);
      *(a2 - 1) = v36;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v13 = (__int128 *)(a1 + 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a1 + 4);
      v14 = (__int128 *)(a1 + 6);
      if (a1 + 6 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *(_QWORD *)v14;
    if (!*(_QWORD *)v14)
      goto LABEL_38;
    v18 = *(_QWORD *)v13;
    if (!*(_QWORD *)v13)
      goto LABEL_38;
    v19 = *(_QWORD *)(v17 + 96);
    v20 = *(_QWORD *)(v18 + 96);
    v21 = v19 < v20;
    if (v19 != v20)
      break;
    v22 = *(_QWORD *)(v17 + 104);
    v23 = *(_QWORD *)(v18 + 104);
    v21 = v22 < v23;
    if (v22 != v23)
      break;
    if (*(_DWORD *)(v17 + 112) < *(_DWORD *)(v18 + 112))
      goto LABEL_18;
LABEL_38:
    v13 = v14;
    v15 += 16;
    if (++v14 == (__int128 *)a2)
      return 1;
  }
  if (!v21)
    goto LABEL_38;
LABEL_18:
  v24 = *((_QWORD *)v14 + 1);
  *(_QWORD *)&v37 = *(_QWORD *)v14;
  *((_QWORD *)&v37 + 1) = v24;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v14, v13);
  v25 = (uint64_t)a1;
  if (v13 != (__int128 *)a1)
  {
    v26 = v15;
    while ((_QWORD)v37)
    {
      v27 = (__int128 *)((char *)a1 + v26 + 16);
      v28 = *(_QWORD *)v27;
      if (!*(_QWORD *)v27)
        break;
      v29 = *(_QWORD *)(v37 + 96);
      v30 = *(_QWORD *)(v28 + 96);
      if (v29 == v30)
      {
        v31 = *(_QWORD *)(v37 + 104);
        v32 = *(_QWORD *)(v28 + 104);
        if (v31 == v32)
        {
          if (*(_DWORD *)(v37 + 112) >= *(_DWORD *)(v28 + 112))
            break;
        }
        else if (v31 >= v32)
        {
          break;
        }
      }
      else if (v29 >= v30)
      {
        v25 = (uint64_t)a1 + v26 + 32;
        goto LABEL_32;
      }
      --v13;
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)a1 + v26 + 32, v27);
      v26 -= 16;
      if (v26 == -32)
      {
        v25 = (uint64_t)a1;
        goto LABEL_32;
      }
    }
    v25 = (uint64_t)v13;
  }
LABEL_32:
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v25, &v37);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (++v16 != 8)
    goto LABEL_38;
  return v14 + 1 == (__int128 *)a2;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(a1, a2, a3);
  v9 = *a4;
  if (*a4)
  {
    v10 = *a3;
    if (*a3)
    {
      v11 = *(_QWORD *)(v9 + 96);
      v12 = *(_QWORD *)(v10 + 96);
      v13 = v11 < v12;
      if (v11 == v12 && (v14 = *(_QWORD *)(v9 + 104), v15 = *(_QWORD *)(v10 + 104), v13 = v14 < v15, v14 == v15))
      {
        if (*(_DWORD *)(v9 + 112) >= *(_DWORD *)(v10 + 112))
          return result;
      }
      else if (!v13)
      {
        return result;
      }
      *a3 = v9;
      *a4 = v10;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      if (*a3)
      {
        v18 = *a2;
        if (*a2)
        {
          v19 = *(_QWORD *)(v17 + 96);
          v20 = *(_QWORD *)(v18 + 96);
          v21 = v19 < v20;
          if (v19 == v20 && (v22 = *(_QWORD *)(v17 + 104), v23 = *(_QWORD *)(v18 + 104), v21 = v22 < v23, v22 == v23))
          {
            if (*(_DWORD *)(v17 + 112) >= *(_DWORD *)(v18 + 112))
              return result;
          }
          else if (!v21)
          {
            return result;
          }
          *a2 = v17;
          *a3 = v18;
          v24 = a2[1];
          a2[1] = a3[1];
          a3[1] = v24;
          v25 = *a2;
          if (*a2)
          {
            v26 = *a1;
            if (*a1)
            {
              v27 = *(_QWORD *)(v25 + 96);
              v28 = *(_QWORD *)(v26 + 96);
              v29 = v27 < v28;
              if (v27 == v28)
              {
                v30 = *(_QWORD *)(v25 + 104);
                v31 = *(_QWORD *)(v26 + 104);
                v29 = v30 < v31;
                if (v30 == v31)
                {
                  if (*(_DWORD *)(v25 + 112) >= *(_DWORD *)(v26 + 112))
                    return result;
LABEL_25:
                  *a1 = v25;
                  *a2 = v26;
                  v32 = a1[1];
                  a1[1] = a2[1];
                  a2[1] = v32;
                  return result;
                }
              }
              if (v29)
                goto LABEL_25;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(a1, a2, a3, a4);
  v11 = *a5;
  if (*a5)
  {
    v12 = *a4;
    if (*a4)
    {
      v13 = *(_QWORD *)(v11 + 96);
      v14 = *(_QWORD *)(v12 + 96);
      v15 = v13 < v14;
      if (v13 == v14 && (v16 = *(_QWORD *)(v11 + 104), v17 = *(_QWORD *)(v12 + 104), v15 = v16 < v17, v16 == v17))
      {
        if (*(_DWORD *)(v11 + 112) >= *(_DWORD *)(v12 + 112))
          return result;
      }
      else if (!v15)
      {
        return result;
      }
      *a4 = v11;
      *a5 = v12;
      v18 = a4[1];
      a4[1] = a5[1];
      a5[1] = v18;
      v19 = *a4;
      if (*a4)
      {
        v20 = *a3;
        if (*a3)
        {
          v21 = *(_QWORD *)(v19 + 96);
          v22 = *(_QWORD *)(v20 + 96);
          v23 = v21 < v22;
          if (v21 == v22 && (v24 = *(_QWORD *)(v19 + 104), v25 = *(_QWORD *)(v20 + 104), v23 = v24 < v25, v24 == v25))
          {
            if (*(_DWORD *)(v19 + 112) >= *(_DWORD *)(v20 + 112))
              return result;
          }
          else if (!v23)
          {
            return result;
          }
          *a3 = v19;
          *a4 = v20;
          v26 = a3[1];
          a3[1] = a4[1];
          a4[1] = v26;
          v27 = *a3;
          if (*a3)
          {
            v28 = *a2;
            if (*a2)
            {
              v29 = *(_QWORD *)(v27 + 96);
              v30 = *(_QWORD *)(v28 + 96);
              v31 = v29 < v30;
              if (v29 == v30
                && (v32 = *(_QWORD *)(v27 + 104), v33 = *(_QWORD *)(v28 + 104), v31 = v32 < v33, v32 == v33))
              {
                if (*(_DWORD *)(v27 + 112) >= *(_DWORD *)(v28 + 112))
                  return result;
              }
              else if (!v31)
              {
                return result;
              }
              *a2 = v27;
              *a3 = v28;
              v34 = a2[1];
              a2[1] = a3[1];
              a3[1] = v34;
              v35 = *a2;
              if (*a2)
              {
                v36 = *a1;
                if (*a1)
                {
                  v37 = *(_QWORD *)(v35 + 96);
                  v38 = *(_QWORD *)(v36 + 96);
                  v39 = v37 < v38;
                  if (v37 == v38)
                  {
                    v40 = *(_QWORD *)(v35 + 104);
                    v41 = *(_QWORD *)(v36 + 104);
                    v39 = v40 < v41;
                    if (v40 == v41)
                    {
                      if (*(_DWORD *)(v35 + 112) >= *(_DWORD *)(v36 + 112))
                        return result;
LABEL_33:
                      *a1 = v35;
                      *a2 = v36;
                      v42 = a1[1];
                      a1[1] = a2[1];
                      a2[1] = v42;
                      return result;
                    }
                  }
                  if (v39)
                    goto LABEL_33;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      v14 = (uint64_t *)v6;
      while (1)
      {
        v15 = *v14;
        if (!*v14)
          goto LABEL_16;
        v16 = *a1;
        if (!*a1)
          goto LABEL_16;
        v17 = *(_QWORD *)(v15 + 96);
        v18 = *(_QWORD *)(v16 + 96);
        v19 = v17 < v18;
        if (v17 == v18 && (v20 = *(_QWORD *)(v15 + 104), v21 = *(_QWORD *)(v16 + 104), v19 = v20 < v21, v20 == v21))
        {
          if (*(_DWORD *)(v15 + 112) >= *(_DWORD *)(v16 + 112))
            goto LABEL_16;
        }
        else if (!v19)
        {
          goto LABEL_16;
        }
        *v14 = v16;
        *a1 = v15;
        v22 = v14[1];
        v14[1] = a1[1];
        a1[1] = v22;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>((uint64_t)a1, a4, v9, a1);
LABEL_16:
        v14 += 2;
        if (v14 == a3)
        {
          v13 = (uint64_t)a3;
          break;
        }
      }
    }
    if (v8 >= 17)
    {
      v23 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range,std::shared_ptr<NL::Entity> *>((uint64_t)a1, v6, a4, v23);
        v6 -= 16;
        v19 = v23-- > 2;
      }
      while (v19);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v6 = a3 - 2;
  if (a3 < 2)
    return;
  v50 = v4;
  v51 = v5;
  v8 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) < ((uint64_t)a4 - a1) >> 4)
    return;
  v10 = ((uint64_t)a4 - a1) >> 3;
  v11 = v10 + 1;
  v12 = (__int128 *)(a1 + 16 * (v10 + 1));
  v13 = v10 + 2;
  if (v10 + 2 < a3)
  {
    v15 = (uint64_t *)(v12 + 1);
    v14 = *(_QWORD *)v12;
    if (!*(_QWORD *)v12)
    {
LABEL_20:
      v28 = *a4;
      goto LABEL_22;
    }
    v16 = *v15;
    if (!*v15)
      goto LABEL_14;
    v17 = *(_QWORD *)(v14 + 96);
    v18 = *(_QWORD *)(v16 + 96);
    v19 = v17 < v18;
    if (v17 == v18)
    {
      v20 = *(_QWORD *)(v14 + 104);
      v21 = *(_QWORD *)(v16 + 104);
      v19 = v20 < v21;
      if (v20 == v21)
      {
        if (*(_DWORD *)(v14 + 112) >= *(_DWORD *)(v16 + 112))
          goto LABEL_13;
LABEL_12:
        ++v12;
        v11 = v13;
        goto LABEL_13;
      }
    }
    if (v19)
      goto LABEL_12;
  }
LABEL_13:
  v14 = *(_QWORD *)v12;
  if (!*(_QWORD *)v12)
    goto LABEL_20;
LABEL_14:
  v22 = *a4;
  if (*a4)
  {
    v23 = *(_QWORD *)(v14 + 96);
    v24 = *(_QWORD *)(v22 + 96);
    v25 = v23 < v24;
    if (v23 == v24 && (v26 = *(_QWORD *)(v14 + 104), v27 = *(_QWORD *)(v22 + 104), v25 = v26 < v27, v26 == v27))
    {
      if (*(_DWORD *)(v14 + 112) < *(_DWORD *)(v22 + 112))
        return;
    }
    else if (v25)
    {
      return;
    }
    goto LABEL_20;
  }
  v28 = 0;
LABEL_22:
  v29 = a4[1];
  *(_QWORD *)&v49 = v28;
  *((_QWORD *)&v49 + 1) = v29;
  *a4 = 0;
  a4[1] = 0;
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)a4, v12);
  if (v8 >= v11)
  {
    while (1)
    {
      v31 = 2 * v11;
      v11 = (2 * v11) | 1;
      v30 = (__int128 *)(a1 + 16 * v11);
      v32 = v31 + 2;
      if (v31 + 2 >= a3)
        goto LABEL_34;
      v34 = (uint64_t *)(v30 + 1);
      v33 = *(_QWORD *)v30;
      if (!*(_QWORD *)v30)
        goto LABEL_41;
      v35 = *v34;
      if (!*v34)
        goto LABEL_35;
      v36 = *(_QWORD *)(v33 + 96);
      v37 = *(_QWORD *)(v35 + 96);
      v38 = v36 < v37;
      if (v36 == v37 && (v39 = *(_QWORD *)(v33 + 104), v40 = *(_QWORD *)(v35 + 104), v38 = v39 < v40, v39 == v40))
      {
        if (*(_DWORD *)(v33 + 112) < *(_DWORD *)(v35 + 112))
          goto LABEL_33;
      }
      else if (v38)
      {
LABEL_33:
        ++v30;
        v11 = v32;
      }
LABEL_34:
      v33 = *(_QWORD *)v30;
      if (*(_QWORD *)v30)
      {
LABEL_35:
        if (v28)
        {
          v41 = *(_QWORD *)(v33 + 96);
          v42 = *(_QWORD *)(v28 + 96);
          v43 = v41 < v42;
          if (v41 == v42 && (v44 = *(_QWORD *)(v33 + 104), v45 = *(_QWORD *)(v28 + 104), v43 = v44 < v45, v44 == v45))
          {
            if (*(_DWORD *)(v33 + 112) < *(_DWORD *)(v28 + 112))
              break;
          }
          else if (v43)
          {
            break;
          }
        }
      }
LABEL_41:
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v12, v30);
      v12 = v30;
      if (v8 < v11)
        goto LABEL_42;
    }
  }
  v30 = v12;
LABEL_42:
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v30, &v49);
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range,std::shared_ptr<NL::Entity> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v13 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>((__int128 *)a1, a3, a4);
    v8 = v7;
    v9 = (__int128 *)(a2 - 16);
    if (v7 == v9)
    {
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v7, &v13);
    }
    else
    {
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v7, v9);
      std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v9, &v13);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(a1, (uint64_t)(v8 + 1), a3, ((uint64_t)v8 - a1 + 16) >> 4);
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1A185281C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = (uint64_t)a1;
    a1 += v5 + 1;
    v9 = 2 * v5;
    v5 = (2 * v5) | 1;
    v10 = v9 + 2;
    if (v10 < a3)
    {
      v11 = (uint64_t *)(a1 + 1);
      v12 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v13 = *v11;
        if (*v11)
        {
          v14 = *(_QWORD *)(v12 + 96);
          v15 = *(_QWORD *)(v13 + 96);
          v16 = v14 < v15;
          if (v14 == v15 && (v17 = *(_QWORD *)(v12 + 104), v18 = *(_QWORD *)(v13 + 104), v16 = v17 < v18, v17 == v18))
          {
            if (*(_DWORD *)(v12 + 112) < *(_DWORD *)(v13 + 112))
              goto LABEL_13;
          }
          else if (v16)
          {
LABEL_13:
            ++a1;
            v5 = v10;
          }
        }
      }
    }
    std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](v8, a1);
  }
  while (v5 <= v7);
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  __int128 *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = v4 >> 1;
    v7 = (__int128 *)(a1 + 16 * (v4 >> 1));
    v8 = *(_QWORD *)v7;
    if (*(_QWORD *)v7)
    {
      v9 = (_QWORD *)(a2 - 16);
      v10 = *(_QWORD *)(a2 - 16);
      if (v10)
      {
        v11 = *(_QWORD *)(v8 + 96);
        v12 = *(_QWORD *)(v10 + 96);
        v13 = v11 < v12;
        if (v11 == v12 && (v14 = *(_QWORD *)(v8 + 104), v15 = *(_QWORD *)(v10 + 104), v13 = v14 < v15, v14 == v15))
        {
          if (*(_DWORD *)(v8 + 112) >= *(_DWORD *)(v10 + 112))
            return;
        }
        else if (!v13)
        {
          return;
        }
        v16 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)&v28 = *(_QWORD *)(a2 - 16);
        *((_QWORD *)&v28 + 1) = v16;
        *v9 = 0;
        *(_QWORD *)(a2 - 8) = 0;
        std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v9, v7);
        if (v4 >= 2)
        {
          while (1)
          {
            v21 = v6 - 1;
            v6 = (v6 - 1) >> 1;
            v17 = (__int128 *)(a1 + 16 * v6);
            v22 = *(_QWORD *)v17;
            if (!*(_QWORD *)v17)
              break;
            v23 = *(_QWORD *)(v22 + 96);
            v24 = *(_QWORD *)(v10 + 96);
            v25 = v23 < v24;
            if (v23 == v24 && (v26 = *(_QWORD *)(v22 + 104), v27 = *(_QWORD *)(v10 + 104), v25 = v26 < v27, v26 == v27))
            {
              if (*(_DWORD *)(v22 + 112) >= *(_DWORD *)(v10 + 112))
                break;
            }
            else if (!v25)
            {
              break;
            }
            std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v7, (__int128 *)(a1 + 16 * v6));
            v7 = (__int128 *)(a1 + 16 * v6);
            if (v21 <= 1)
              goto LABEL_12;
          }
        }
        v17 = v7;
LABEL_12:
        std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100]((uint64_t)v17, &v28);
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
        if (*((_QWORD *)&v28 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *,false>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char v28;
  BOOL v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  unint64_t v34;
  unint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;

void sub_1A1852E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  const void *v12;
  _QWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v25;
  __int128 v26;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;

  if (a1 == a2)
    return;
  v2 = a2;
  v3 = a1 + 3;
  if (a1 + 3 == a2)
    return;
  v4 = 0;
  v5 = a1;
  do
  {
    v6 = v3;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v37, (const void *)v5[3], v5[4], (uint64_t)(v5[4] - v5[3]) >> 4);
    v34 = 0;
    v35 = 0;
    v36 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v34, (const void *)*v5, v5[1], (uint64_t)(v5[1] - *v5) >> 4);
    v8 = v37;
    v7 = v38;
    v9 = v34;
    v10 = v35;
    if (!v34)
    {
      v11 = v37;
      if (!v37)
        goto LABEL_7;
LABEL_6:
      v38 = v11;
      operator delete(v11);
      goto LABEL_7;
    }
    v35 = v34;
    operator delete(v34);
    v11 = v37;
    if (v37)
      goto LABEL_6;
LABEL_7:
    if (v7 - v8 <= (unint64_t)(v10 - v9))
      goto LABEL_25;
    v12 = (const void *)v5[3];
    v26 = *((_OWORD *)v5 + 2);
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
    std::vector<CFRange>::__move_assign((uint64_t)v6, (__n128 *)v5);
    v13 = a1;
    if (v5 == a1)
      goto LABEL_22;
    v25 = v4;
    v14 = v4;
    while (1)
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v31, v12, v26, (uint64_t)(v26 - (_QWORD)v12) >> 4);
      v15 = *(const void **)((char *)a1 + v14 - 24);
      v16 = *(_QWORD *)((char *)a1 + v14 - 16);
      v28 = 0;
      v29 = 0;
      v30 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v28, v15, v16, (v16 - (uint64_t)v15) >> 4);
      v18 = v31;
      v17 = v32;
      v20 = v28;
      v19 = v29;
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      v21 = v17 - v18;
      v22 = v19 - v20;
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
        if (v21 <= v22)
        {
          v13 = v5;
          goto LABEL_21;
        }
        goto LABEL_16;
      }
      if (v21 <= v22)
        break;
LABEL_16:
      v5 -= 3;
      std::vector<CFRange>::__move_assign((uint64_t)a1 + v14, (__n128 *)((char *)a1 + v14 - 24));
      v14 -= 24;
      if (!v14)
      {
        v13 = a1;
        goto LABEL_21;
      }
    }
    v13 = (_QWORD *)((char *)a1 + v14);
LABEL_21:
    v2 = a2;
    v4 = v25;
LABEL_22:
    v23 = (void *)*v13;
    if (*v13)
    {
      v13[1] = v23;
      operator delete(v23);
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
    }
    *v13 = v12;
    *(_OWORD *)(v13 + 1) = v26;
LABEL_25:
    v3 = v6 + 3;
    v4 += 24;
    v5 = v6;
  }
  while (v6 + 3 != v2);
}

void sub_1A18530A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  v24 = *(void **)(v22 - 112);
  if (v24)
  {
    *(_QWORD *)(v22 - 104) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  const void *v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  unint64_t v22;
  void *v23;
  __int128 v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  void *__p;
  _BYTE *v35;
  uint64_t v36;

  if (a1 != a2)
  {
    v3 = a1;
    v4 = a1 + 24;
    while (1)
    {
      if (v4 == a2)
        return;
      v5 = v4;
      __p = 0;
      v35 = 0;
      v36 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)(v3 + 24), *(_QWORD *)(v3 + 32), (uint64_t)(*(_QWORD *)(v3 + 32) - *(_QWORD *)(v3 + 24)) >> 4);
      v31 = 0;
      v32 = 0;
      v33 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v31, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 4);
      v7 = __p;
      v6 = v35;
      v8 = v31;
      v9 = v32;
      if (!v31)
        break;
      v32 = v31;
      operator delete(v31);
      v10 = __p;
      if (__p)
        goto LABEL_6;
LABEL_7:
      if (v6 - v7 <= (unint64_t)(v9 - v8))
        goto LABEL_19;
      v11 = *(const void **)v5;
      v12 = *(_OWORD *)(v3 + 32);
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)v5 = 0;
      v24 = v12;
      v13 = v12;
      v14 = (uint64_t)(v12 - (_QWORD)v11) >> 4;
      v15 = v5;
      do
      {
        v16 = v15 - 24;
        std::vector<CFRange>::__move_assign(v15, (__n128 *)(v15 - 24));
        v28 = 0;
        v29 = 0;
        v30 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v28, v11, v13, v14);
        v25 = 0;
        v26 = 0;
        v27 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v25, *(const void **)(v15 - 48), *(_QWORD *)(v15 - 40), (uint64_t)(*(_QWORD *)(v15 - 40) - *(_QWORD *)(v15 - 48)) >> 4);
        v18 = v28;
        v17 = v29;
        v19 = v25;
        v20 = v26;
        if (v25)
        {
          v26 = v25;
          operator delete(v25);
          v21 = v28;
          if (!v28)
            goto LABEL_12;
LABEL_11:
          v29 = v21;
          operator delete(v21);
          goto LABEL_12;
        }
        v21 = v28;
        if (v28)
          goto LABEL_11;
LABEL_12:
        v22 = v20 - v19;
        v15 = v16;
      }
      while (v17 - v18 > v22);
      v23 = *(void **)v16;
      if (*(_QWORD *)v16)
      {
        *(_QWORD *)(v16 + 8) = v23;
        operator delete(v23);
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)(v16 + 16) = 0;
      }
      *(_QWORD *)v16 = v11;
      *(_OWORD *)(v16 + 8) = v24;
LABEL_19:
      v4 = v5 + 24;
      v3 = v5;
    }
    v10 = __p;
    if (!__p)
      goto LABEL_7;
LABEL_6:
    v35 = v10;
    operator delete(v10);
    goto LABEL_7;
  }
}

void sub_1A18532B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  const void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  unint64_t v33;
  unint64_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  unint64_t v42;
  unint64_t v43;
  const void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;

  v78 = 0;
  v79 = 0;
  v80 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v78, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  v75 = 0;
  v76 = 0;
  v77 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v75, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v7 = v78;
  v6 = v79;
  v8 = v75;
  v9 = v76;
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  v10 = v6 - v7;
  v11 = v9 - v8;
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  if (v10 <= v11)
  {
    v72 = 0;
    v73 = 0;
    v74 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v72, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    v69 = 0;
    v70 = 0;
    v71 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v69, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    v17 = v72;
    v16 = v73;
    v18 = v69;
    v19 = v70;
    if (v69)
    {
      v70 = v69;
      operator delete(v69);
    }
    v33 = v16 - v17;
    v34 = v19 - v18;
    if (v72)
    {
      v73 = v72;
      operator delete(v72);
    }
    if (v33 <= v34)
      return 0;
    v35 = *(const void **)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v35;
    v36 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v36;
    v25 = (uint64_t *)(a2 + 16);
    v37 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v37;
    v67 = 0;
    v68 = 0;
    v66 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v66, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    v63 = 0;
    v64 = 0;
    v65 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v63, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
    v39 = v66;
    v38 = v67;
    v40 = v63;
    v41 = v64;
    if (v63)
    {
      v64 = v63;
      operator delete(v63);
    }
    v46 = v38 - v39;
    v47 = v41 - v40;
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
    if (v46 > v47)
    {
      v48 = *(const void **)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v48;
      v49 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v49;
      v23 = (uint64_t *)(a1 + 16);
      goto LABEL_30;
    }
  }
  else
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v60, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    v57 = 0;
    v58 = 0;
    v59 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v57, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    v13 = v60;
    v12 = v61;
    v14 = v57;
    v15 = v58;
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    v20 = v12 - v13;
    v21 = v15 - v14;
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    v23 = (uint64_t *)(a1 + 16);
    v22 = *(const void **)a1;
    if (v20 > v21)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v22;
      v24 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v24;
      v25 = (uint64_t *)(a3 + 16);
      result = 1;
LABEL_31:
      v50 = *v23;
      *v23 = *v25;
      *v25 = v50;
      return result;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v22;
    v27 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v27;
    v23 = (uint64_t *)(a2 + 16);
    v28 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v28;
    v55 = 0;
    v56 = 0;
    v54 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v54, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v51, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    v30 = v54;
    v29 = v55;
    v31 = v51;
    v32 = v52;
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    v42 = v29 - v30;
    v43 = v32 - v31;
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    if (v42 > v43)
    {
      v44 = *(const void **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v44;
      v45 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v45;
      v25 = (uint64_t *)(a3 + 16);
LABEL_30:
      result = 2;
      goto LABEL_31;
    }
  }
  return 1;
}

void sub_1A1853698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,ranges_greater_than_range &>(uint64_t a1, _QWORD *a2)
{
  const void *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t i;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  void **v44;
  void *v45;
  __int128 v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  void *v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  void *v57;
  _BYTE *v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  void *__p;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;

  v4 = *(const void **)a1;
  v5 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v82 = 0;
  v83 = 0;
  v81 = 0;
  v47 = v5;
  v6 = v5;
  v7 = (uint64_t)(v5 - (_QWORD)v4) >> 4;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v81, v4, v5, v7);
  v78 = 0;
  v79 = 0;
  v80 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v78, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
  v9 = v81;
  v8 = v82;
  v10 = v78;
  v11 = v79;
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  v12 = v8 - v9;
  v13 = v11 - v10;
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  if (v12 > v13)
  {
    i = a1;
    while (1)
    {
      v75 = 0;
      v76 = 0;
      v77 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v75, v4, v6, v7);
      v72 = 0;
      v73 = 0;
      v74 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v72, *(const void **)(i + 24), *(_QWORD *)(i + 32), (uint64_t)(*(_QWORD *)(i + 32) - *(_QWORD *)(i + 24)) >> 4);
      v16 = v75;
      v15 = v76;
      v17 = v72;
      v18 = v73;
      if (!v72)
        break;
      v73 = v72;
      operator delete(v72);
      v19 = v75;
      if (v75)
        goto LABEL_9;
LABEL_10:
      i += 24;
      if (v15 - v16 > (unint64_t)(v18 - v17))
        goto LABEL_22;
    }
    v19 = v75;
    if (!v75)
      goto LABEL_10;
LABEL_9:
    v76 = v19;
    operator delete(v19);
    goto LABEL_10;
  }
  for (i = a1 + 24; i < (unint64_t)a2; i += 24)
  {
    v69 = 0;
    v70 = 0;
    v71 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v69, v4, v6, v7);
    v66 = 0;
    v67 = 0;
    v68 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v66, *(const void **)i, *(_QWORD *)(i + 8), (uint64_t)(*(_QWORD *)(i + 8) - *(_QWORD *)i) >> 4);
    v21 = v69;
    v20 = v70;
    v22 = v66;
    v23 = v67;
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
    v24 = v20 - v21;
    v25 = v23 - v22;
    if (v69)
    {
      v70 = v69;
      operator delete(v69);
    }
    if (v24 > v25)
      break;
  }
LABEL_22:
  if (i < (unint64_t)a2)
  {
    while (1)
    {
      __p = 0;
      v64 = 0;
      v65 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, v4, v6, v7);
      v60 = 0;
      v61 = 0;
      v62 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v60, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
      v27 = __p;
      v26 = v64;
      v28 = v60;
      v29 = v61;
      if (!v60)
        break;
      v61 = v60;
      operator delete(v60);
      v30 = __p;
      if (__p)
        goto LABEL_25;
LABEL_26:
      a2 -= 3;
      if (v26 - v27 <= (unint64_t)(v29 - v28))
        goto LABEL_44;
    }
    v30 = __p;
    if (!__p)
      goto LABEL_26;
LABEL_25:
    v64 = v30;
    operator delete(v30);
    goto LABEL_26;
  }
LABEL_44:
  if (i < (unint64_t)a2)
  {
    v31 = *(const void **)i;
    *(_QWORD *)i = *a2;
    *a2 = v31;
    v32 = *(_QWORD *)(i + 8);
    *(_QWORD *)(i + 8) = a2[1];
    a2[1] = v32;
    v33 = *(_QWORD *)(i + 16);
    *(_QWORD *)(i + 16) = a2[2];
    a2[2] = v33;
    while (1)
    {
      v57 = 0;
      v58 = 0;
      v59 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v57, v4, v6, v7);
      v54 = 0;
      v55 = 0;
      v56 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v54, *(const void **)(i + 24), *(_QWORD *)(i + 32), (uint64_t)(*(_QWORD *)(i + 32) - *(_QWORD *)(i + 24)) >> 4);
      v35 = v57;
      v34 = v58;
      v36 = v54;
      v37 = v55;
      if (!v54)
        break;
      v55 = v54;
      operator delete(v54);
      v38 = v57;
      if (v57)
        goto LABEL_33;
LABEL_34:
      i += 24;
      if (v34 - v35 > (unint64_t)(v37 - v36))
      {
        while (1)
        {
          v51 = 0;
          v52 = 0;
          v53 = 0;
          std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v51, v4, v6, v7);
          v48 = 0;
          v49 = 0;
          v50 = 0;
          std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v48, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
          v41 = v51;
          v40 = v52;
          v42 = v48;
          v43 = v49;
          if (!v48)
            break;
          v49 = v48;
          operator delete(v48);
          v39 = v51;
          if (v51)
            goto LABEL_42;
LABEL_43:
          a2 -= 3;
          if (v40 - v41 <= (unint64_t)(v43 - v42))
            goto LABEL_44;
        }
        v39 = v51;
        if (!v51)
          goto LABEL_43;
LABEL_42:
        v52 = v39;
        operator delete(v39);
        goto LABEL_43;
      }
    }
    v38 = v57;
    if (!v57)
      goto LABEL_34;
LABEL_33:
    v58 = v38;
    operator delete(v38);
    goto LABEL_34;
  }
  v44 = (void **)(i - 24);
  if (i - 24 != a1)
    std::vector<CFRange>::__move_assign(a1, (__n128 *)(i - 24));
  v45 = *v44;
  if (*v44)
  {
    *(_QWORD *)(i - 16) = v45;
    operator delete(v45);
    *v44 = 0;
    *(_QWORD *)(i - 16) = 0;
    *(_QWORD *)(i - 8) = 0;
  }
  *(_QWORD *)(i - 24) = v4;
  *(_OWORD *)(i - 16) = v47;
  return i;
}

void sub_1A1853B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 112);
  if (v37)
  {
    *(_QWORD *)(v35 - 104) = v37;
    operator delete(v37);
  }
  if (v34)
    operator delete(v34);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,ranges_greater_than_range &>(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  const void *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _QWORD *v13;
  const void *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  const void *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  const void *v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  void **v49;
  void *v50;
  __int128 v52;
  _QWORD *v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  void *v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  void *v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  void *__p;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;

  v3 = 0;
  v4 = *(const void **)a1;
  v5 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v52 = v5;
  v6 = v5;
  v7 = (uint64_t)(v5 - (_QWORD)v4) >> 4;
  v54 = a1;
  do
  {
    v82 = 0;
    v83 = 0;
    v84 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v82, *(const void **)(a1 + v3 + 24), *(_QWORD *)(a1 + v3 + 32), (uint64_t)(*(_QWORD *)(a1 + v3 + 32) - *(_QWORD *)(a1 + v3 + 24)) >> 4);
    v79 = 0;
    v80 = 0;
    v81 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v79, v4, v6, v7);
    v8 = v82;
    v9 = v83;
    v10 = v79;
    v11 = v80;
    if (v79)
    {
      v80 = v79;
      operator delete(v79);
      v12 = v82;
      if (!v82)
        goto LABEL_5;
LABEL_4:
      v83 = v12;
      operator delete(v12);
      goto LABEL_5;
    }
    v12 = v82;
    if (v82)
      goto LABEL_4;
LABEL_5:
    v3 += 24;
    a1 = v54;
  }
  while (v9 - v8 > (unint64_t)(v11 - v10));
  v13 = (_QWORD *)(v54 + v3);
  v53 = (_QWORD *)(v54 + v3);
  if (v3 != 24)
  {
    while (1)
    {
      v14 = (const void *)*(a2 - 3);
      v15 = *(a2 - 2);
      a2 -= 3;
      __p = 0;
      v71 = 0;
      v72 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, v14, v15, (v15 - (uint64_t)v14) >> 4);
      v67 = 0;
      v68 = 0;
      v69 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v67, v4, v6, v7);
      v17 = __p;
      v16 = v71;
      v18 = v67;
      v19 = v68;
      if (!v67)
        break;
      v68 = v67;
      operator delete(v67);
      v20 = __p;
      if (__p)
        goto LABEL_12;
LABEL_13:
      if (v16 - v17 > (unint64_t)(v19 - v18))
        goto LABEL_29;
    }
    v20 = __p;
    if (!__p)
      goto LABEL_13;
LABEL_12:
    v71 = v20;
    operator delete(v20);
    goto LABEL_13;
  }
  while (v13 < a2)
  {
    while (1)
    {
      v76 = 0;
      v77 = 0;
      v78 = 0;
      v21 = (const void *)*(a2 - 3);
      v22 = *(a2 - 2);
      a2 -= 3;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v76, v21, v22, (v22 - (uint64_t)v21) >> 4);
      v73 = 0;
      v74 = 0;
      v75 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v73, v4, v6, v7);
      v24 = v76;
      v23 = v77;
      v25 = v73;
      v26 = v74;
      if (v73)
      {
        v74 = v73;
        operator delete(v73);
      }
      v27 = v23 - v24;
      v28 = v26 - v25;
      if (v76)
        break;
      if (v27 > v28 || v53 >= a2)
        goto LABEL_29;
    }
    v77 = v76;
    operator delete(v76);
    if (v27 > v28)
      break;
    v13 = v53;
  }
LABEL_29:
  v30 = v53;
  if (v53 >= a2)
    goto LABEL_46;
  v31 = a2;
  while (2)
  {
    v32 = *v30;
    *v30 = *v31;
    *v31 = v32;
    v33 = v30[1];
    v30[1] = v31[1];
    v31[1] = v33;
    v34 = v30[2];
    v30[2] = v31[2];
    v31[2] = v34;
    while (2)
    {
      v64 = 0;
      v65 = 0;
      v66 = 0;
      v35 = (const void *)v30[3];
      v36 = v30[4];
      v30 += 3;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v64, v35, v36, (v36 - (uint64_t)v35) >> 4);
      v61 = 0;
      v62 = 0;
      v63 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v61, v4, v6, v7);
      v37 = v64;
      v38 = v65;
      v40 = v61;
      v39 = v62;
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
        v41 = v64;
        if (v64)
          goto LABEL_34;
      }
      else
      {
        v41 = v64;
        if (v64)
        {
LABEL_34:
          v65 = v41;
          operator delete(v41);
        }
      }
      if (v38 - v37 > (unint64_t)(v39 - v40))
        continue;
      break;
    }
    while (2)
    {
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v43 = (const void *)*(v31 - 3);
      v44 = *(v31 - 2);
      v31 -= 3;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v58, v43, v44, (v44 - (uint64_t)v43) >> 4);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v55, v4, v6, v7);
      v45 = v58;
      v46 = v59;
      v48 = v55;
      v47 = v56;
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
        v42 = v58;
        if (v58)
        {
LABEL_43:
          v59 = v42;
          operator delete(v42);
        }
      }
      else
      {
        v42 = v58;
        if (v58)
          goto LABEL_43;
      }
      if (v46 - v45 <= (unint64_t)(v47 - v48))
        continue;
      break;
    }
    if (v30 < v31)
      continue;
    break;
  }
LABEL_46:
  v49 = (void **)(v30 - 3);
  if (v30 - 3 != (_QWORD *)v54)
    std::vector<CFRange>::__move_assign(v54, (__n128 *)(v30 - 3));
  v50 = *v49;
  if (*v49)
  {
    *(v30 - 2) = v50;
    operator delete(v50);
    *v49 = 0;
    *(v30 - 2) = 0;
    *(v30 - 1) = 0;
  }
  *(v30 - 3) = v4;
  *((_OWORD *)v30 - 1) = v52;
  return v30 - 3;
}

void sub_1A1853F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;

  if (v30)
    operator delete(v30);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _BOOL8 result;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  unint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  const void *v36;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  void *__p;
  _BYTE *v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;

  v2 = a2;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v3)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v53 = 0;
      v54 = 0;
      v55 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v53, *(const void **)(a2 - 24), *(_QWORD *)(a2 - 16), (uint64_t)(*(_QWORD *)(a2 - 16) - *(_QWORD *)(a2 - 24)) >> 4);
      v50 = 0;
      v51 = 0;
      v52 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v50, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
      v6 = v53;
      v5 = v54;
      v7 = v50;
      v8 = v51;
      if (v50)
      {
        v51 = v50;
        operator delete(v50);
      }
      v27 = v5 - v6;
      if (v53)
      {
        v54 = v53;
        operator delete(v53);
      }
      if (v27 > v8 - v7)
      {
        v28 = *(const void **)a1;
        *(_QWORD *)a1 = *(_QWORD *)(v2 - 24);
        *(_QWORD *)(v2 - 24) = v28;
        v29 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(v2 - 16);
        *(_QWORD *)(v2 - 16) = v29;
        v30 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 - 8);
        *(_QWORD *)(v2 - 8) = v30;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v9 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a1 + 24, a1 + 48);
      v10 = a1 + 72;
      if (a1 + 72 == v2)
        return 1;
      v11 = 0;
      v34 = 0;
      v31 = v2;
      break;
  }
  while (2)
  {
    __p = 0;
    v48 = 0;
    v49 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 4);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v44, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 4);
    v13 = __p;
    v12 = v48;
    v14 = v44;
    v15 = v45;
    if (!v44)
    {
      v16 = __p;
      if (!__p)
        goto LABEL_10;
      goto LABEL_9;
    }
    v45 = v44;
    operator delete(v44);
    v16 = __p;
    if (__p)
    {
LABEL_9:
      v48 = v16;
      operator delete(v16);
    }
LABEL_10:
    if (v12 - v13 <= (unint64_t)(v15 - v14))
      goto LABEL_28;
    v36 = *(const void **)v10;
    v35 = *(_OWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)v10 = 0;
    std::vector<CFRange>::__move_assign(v10, (__n128 *)v9);
    v17 = a1;
    if (v9 == a1)
      goto LABEL_25;
    v32 = v11;
    v33 = v10;
    while (1)
    {
      v41 = 0;
      v42 = 0;
      v43 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v41, v36, v35, (uint64_t)(v35 - (_QWORD)v36) >> 4);
      v18 = *(const void **)(a1 + v11 + 24);
      v19 = *(_QWORD *)(a1 + v11 + 32);
      v38 = 0;
      v39 = 0;
      v40 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v38, v18, v19, (v19 - (uint64_t)v18) >> 4);
      v21 = v41;
      v20 = v42;
      v23 = v38;
      v22 = v39;
      if (v38)
      {
        v39 = v38;
        operator delete(v38);
      }
      v24 = v20 - v21;
      v25 = v22 - v23;
      if (v41)
      {
        v42 = v41;
        operator delete(v41);
        if (v24 <= v25)
        {
          v17 = v9;
          goto LABEL_24;
        }
        goto LABEL_19;
      }
      if (v24 <= v25)
        break;
LABEL_19:
      v9 -= 24;
      std::vector<CFRange>::__move_assign(a1 + v11 + 48, (__n128 *)(a1 + v11 + 24));
      v11 -= 24;
      if (v11 == -48)
      {
        v17 = a1;
        goto LABEL_24;
      }
    }
    v17 = a1 + v11 + 48;
LABEL_24:
    v2 = v31;
    v11 = v32;
    v10 = v33;
LABEL_25:
    v26 = *(void **)v17;
    if (*(_QWORD *)v17)
    {
      *(_QWORD *)(v17 + 8) = v26;
      operator delete(v26);
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 16) = 0;
    }
    *(_QWORD *)v17 = v36;
    *(_OWORD *)(v17 + 8) = v35;
    if (++v34 != 8)
    {
LABEL_28:
      v9 = v10;
      v11 += 24;
      v10 += 24;
      if (v10 == v2)
        return 1;
      continue;
    }
    return v10 + 24 == v2;
  }
}

void sub_1A18543A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  void *__pa;

  __pa = *(void **)(v28 - 112);
  if (__pa)
  {
    *(_QWORD *)(v28 - 104) = __pa;
    operator delete(__pa);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  unint64_t v30;
  unint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a2, a3);
  v51 = 0;
  v52 = 0;
  v50 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v50, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v47, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
  v9 = v50;
  v8 = v51;
  v10 = v47;
  v11 = v48;
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  v12 = v8 - v9;
  v13 = v11 - v10;
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (v12 > v13)
  {
    v14 = *(const void **)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v14;
    v15 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v15;
    v16 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v16;
    v45 = 0;
    v46 = 0;
    v44 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v44, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    v41 = 0;
    v42 = 0;
    v43 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v41, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    v18 = v44;
    v17 = v45;
    v19 = v41;
    v20 = v42;
    if (v41)
    {
      v42 = v41;
      operator delete(v41);
    }
    v21 = v17 - v18;
    v22 = v20 - v19;
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    if (v21 > v22)
    {
      v23 = *(const void **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v23;
      v24 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v24;
      v25 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v25;
      v39 = 0;
      v40 = 0;
      v38 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v38, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
      v35 = 0;
      v36 = 0;
      v37 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v35, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
      v27 = v38;
      v26 = v39;
      v28 = v35;
      v29 = v36;
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      v30 = v26 - v27;
      v31 = v29 - v28;
      if (v38)
      {
        v39 = v38;
        operator delete(v38);
      }
      if (v30 > v31)
      {
        v32 = *(const void **)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v32;
        v33 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v33;
        v34 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v34;
      }
    }
  }
}

void sub_1A185465C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  unint64_t v41;
  unint64_t v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a2, a3, a4);
  v67 = 0;
  v68 = 0;
  v69 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v67, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 4);
  v64 = 0;
  v65 = 0;
  v66 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v64, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
  v11 = v67;
  v10 = v68;
  v12 = v64;
  v13 = v65;
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  v14 = v10 - v11;
  v15 = v13 - v12;
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v14 > v15)
  {
    v16 = *(const void **)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v16;
    v17 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v17;
    v18 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a5 + 16);
    *(_QWORD *)(a5 + 16) = v18;
    v62 = 0;
    v63 = 0;
    v61 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v61, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v58, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    v20 = v61;
    v19 = v62;
    v21 = v58;
    v22 = v59;
    if (v58)
    {
      v59 = v58;
      operator delete(v58);
    }
    v23 = v19 - v20;
    v24 = v22 - v21;
    if (v61)
    {
      v62 = v61;
      operator delete(v61);
    }
    if (v23 > v24)
    {
      v25 = *(const void **)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v25;
      v26 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v26;
      v27 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
      *(_QWORD *)(a4 + 16) = v27;
      v56 = 0;
      v57 = 0;
      v55 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v55, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
      v52 = 0;
      v53 = 0;
      v54 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v52, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
      v29 = v55;
      v28 = v56;
      v30 = v52;
      v31 = v53;
      if (v52)
      {
        v53 = v52;
        operator delete(v52);
      }
      v32 = v28 - v29;
      v33 = v31 - v30;
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
      if (v32 > v33)
      {
        v34 = *(const void **)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v34;
        v35 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v35;
        v36 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = v36;
        v50 = 0;
        v51 = 0;
        v49 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v49, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
        v46 = 0;
        v47 = 0;
        v48 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v46, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
        v38 = v49;
        v37 = v50;
        v39 = v46;
        v40 = v47;
        if (v46)
        {
          v47 = v46;
          operator delete(v46);
        }
        v41 = v37 - v38;
        v42 = v40 - v39;
        if (v49)
        {
          v50 = v49;
          operator delete(v49);
        }
        if (v41 > v42)
        {
          v43 = *(const void **)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v43;
          v44 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v44;
          v45 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a2 + 16) = v45;
        }
      }
    }
  }
}

void sub_1A18549A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::vector<CFRange>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *,std::vector<CFRange> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  void *__p;
  _BYTE *v31;
  uint64_t v32;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 24;
    if (a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 24 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a4, v9, v12);
        v12 -= 24;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v26 = v8;
      v14 = v6;
      while (1)
      {
        __p = 0;
        v31 = 0;
        v32 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 4);
        v27 = 0;
        v28 = 0;
        v29 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v27, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
        v16 = __p;
        v15 = v31;
        v17 = v27;
        v18 = v28;
        if (!v27)
          break;
        v28 = v27;
        operator delete(v27);
        v19 = __p;
        if (__p)
          goto LABEL_9;
LABEL_10:
        if (v15 - v16 > (unint64_t)(v18 - v17))
        {
          v20 = *(const void **)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v20;
          v21 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v21;
          v22 = *(_QWORD *)(v14 + 16);
          *(_QWORD *)(v14 + 16) = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v22;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a4, v9, a1);
        }
        v14 += 24;
        if (v14 == a3)
        {
          v13 = a3;
          v8 = v26;
          goto LABEL_16;
        }
      }
      v19 = __p;
      if (!__p)
        goto LABEL_10;
LABEL_9:
      v31 = v19;
      operator delete(v19);
      goto LABEL_10;
    }
LABEL_16:
    if (v8 >= 25)
    {
      v23 = v8 / 0x18uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range,std::vector<CFRange> *>((uint64_t *)a1, v6, a4, v23);
        v6 -= 24;
      }
      while (v23-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1A1854C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v16;
  __n128 result;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  unint64_t v44;
  void *v45;
  __n128 v46;
  unint64_t v47;
  unint64_t v49;
  uint64_t v50;
  const void *v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  void *__p;
  _BYTE *v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 3)))
    {
      v7 = (0x5555555555555556 * ((a4 - a1) >> 3)) | 1;
      v8 = a1 + 24 * v7;
      v9 = 0x5555555555555556 * ((a4 - a1) >> 3) + 2;
      v47 = v4 >> 1;
      if (v9 < a3)
      {
        v73 = 0;
        v74 = 0;
        v75 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v73, *(const void **)v8, *(_QWORD *)(a1 + 24 * v7 + 8), (uint64_t)(*(_QWORD *)(a1 + 24 * v7 + 8) - *(_QWORD *)v8) >> 4);
        v10 = *(const void **)(v8 + 24);
        v11 = *(_QWORD *)(v8 + 32);
        v70 = 0;
        v71 = 0;
        v72 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v70, v10, v11, (v11 - (uint64_t)v10) >> 4);
        v13 = v73;
        v12 = v74;
        v14 = v70;
        v15 = v71;
        if (v70)
        {
          v71 = v70;
          operator delete(v70);
        }
        v16 = v15 - v14;
        if (v73)
        {
          v74 = v73;
          operator delete(v73);
        }
        if (v12 - v13 > v16)
        {
          v8 += 24;
          v7 = v9;
        }
      }
      v67 = 0;
      v68 = 0;
      v69 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v67, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 4);
      v64 = 0;
      v65 = 0;
      v66 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v64, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 4);
      v19 = v67;
      v18 = v68;
      v20 = v64;
      v21 = v65;
      if (v64)
      {
        v65 = v64;
        operator delete(v64);
      }
      v22 = v21 - v20;
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      v23 = v18 - v19 > v22;
      v25 = v47;
      v24 = a3;
      if (!v23)
      {
        v26 = *(const void **)v5;
        v27 = *(_OWORD *)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)v5 = 0;
        v46 = (__n128)v27;
        v50 = v27;
        v51 = v26;
        v49 = (uint64_t)(v27 - (_QWORD)v26) >> 4;
        while (1)
        {
          v28 = v8;
          std::vector<CFRange>::__move_assign(v5, (__n128 *)v8);
          if (v25 < v7)
          {
LABEL_33:
            v45 = *(void **)v28;
            if (*(_QWORD *)v28)
            {
              *(_QWORD *)(v28 + 8) = v45;
              operator delete(v45);
              *(_QWORD *)v28 = 0;
              *(_QWORD *)(v28 + 8) = 0;
              *(_QWORD *)(v28 + 16) = 0;
            }
            *(_QWORD *)v28 = v51;
            result = v46;
            *(__n128 *)(v28 + 8) = v46;
            return result;
          }
          v29 = (2 * v7) | 1;
          v8 = a1 + 24 * v29;
          v30 = 2 * v7 + 2;
          if (v30 >= v24)
          {
            v7 = (2 * v7) | 1;
          }
          else
          {
            v61 = 0;
            v62 = 0;
            v63 = 0;
            std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v61, *(const void **)v8, *(_QWORD *)(a1 + 24 * v29 + 8), (uint64_t)(*(_QWORD *)(a1 + 24 * v29 + 8) - *(_QWORD *)v8) >> 4);
            v31 = *(const void **)(v8 + 24);
            v32 = *(_QWORD *)(v8 + 32);
            v58 = 0;
            v59 = 0;
            v60 = 0;
            std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v58, v31, v32, (v32 - (uint64_t)v31) >> 4);
            v33 = v61;
            v34 = v62;
            v36 = v58;
            v35 = v59;
            if (v58)
            {
              v59 = v58;
              operator delete(v58);
            }
            v37 = v34 - v33;
            v38 = v35 - v36;
            if (v61)
            {
              v62 = v61;
              operator delete(v61);
            }
            v7 = v29;
            v23 = v37 > v38;
            v25 = v47;
            v24 = a3;
            if (v23)
            {
              v8 += 24;
              v7 = v30;
            }
          }
          __p = 0;
          v56 = 0;
          v57 = 0;
          std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 4);
          v52 = 0;
          v53 = 0;
          v54 = 0;
          std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v52, v51, v50, v49);
          v40 = __p;
          v39 = v56;
          v41 = v52;
          v42 = v53;
          if (!v52)
            break;
          v53 = v52;
          operator delete(v52);
          v43 = __p;
          if (__p)
            goto LABEL_28;
LABEL_29:
          v44 = v42 - v41;
          v5 = v28;
          if (v39 - v40 > v44)
            goto LABEL_33;
        }
        v43 = __p;
        if (!__p)
          goto LABEL_29;
LABEL_28:
        v56 = v43;
        operator delete(v43);
        goto LABEL_29;
      }
    }
  }
  return result;
}

void sub_1A1854FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  _QWORD *v26;
  uint64_t v27;
  void *__pa;

  __pa = *(void **)(v27 - 112);
  if (__pa)
  {
    *v26 = __pa;
    operator delete(__pa);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range,std::vector<CFRange> *>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  void *v14;
  void *v15;

  if (a4 >= 2)
  {
    v7 = *a1;
    v8 = a1[1];
    v9 = a1[2];
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    v10 = (_QWORD *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>((uint64_t)a1, a3, a4);
    v11 = v10;
    v12 = (void **)(a2 - 24);
    if (v10 == (_QWORD *)(a2 - 24))
    {
      v15 = (void *)*v10;
      if (*v11)
      {
        v11[1] = v15;
        operator delete(v15);
        *v11 = 0;
        v11[1] = 0;
        v11[2] = 0;
      }
      *v11 = v7;
      v11[1] = v8;
      v11[2] = v9;
    }
    else
    {
      std::vector<CFRange>::__move_assign((uint64_t)v10, (__n128 *)(a2 - 24));
      v13 = (uint64_t)(v11 + 3);
      v14 = *v12;
      if (*v12)
      {
        *(_QWORD *)(a2 - 16) = v14;
        operator delete(v14);
        *v12 = 0;
        *(_QWORD *)(a2 - 16) = 0;
        *(_QWORD *)(a2 - 8) = 0;
      }
      *(_QWORD *)(a2 - 24) = v7;
      *(_QWORD *)(a2 - 16) = v8;
      *(_QWORD *)(a2 - 8) = v9;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>((uint64_t)a1, v13, a3, 0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)a1) >> 3));
    }
  }
}

void sub_1A1855110(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v3 = a3;
  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    v9 = v5 + 1;
    a1 += 24 * (v5 + 1);
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < v3)
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v24, *(const void **)a1, *(_QWORD *)(v8 + 24 * v9 + 8), (uint64_t)(*(_QWORD *)(v8 + 24 * v9 + 8) - *(_QWORD *)a1) >> 4);
      v21 = 0;
      v22 = 0;
      v23 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v21, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4);
      v12 = v24;
      v13 = v25;
      v14 = v21;
      v15 = v22;
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      v16 = v13 - v12;
      v17 = v15 - v14;
      if (v24)
      {
        v25 = v24;
        operator delete(v24);
      }
      v18 = v16 > v17;
      v3 = a3;
      if (v18)
      {
        a1 += 24;
        v5 = v11;
      }
    }
    std::vector<CFRange>::__move_assign(v8, (__n128 *)a1);
  }
  while (v5 <= v7);
  return a1;
}

void sub_1A1855260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  _QWORD *v11;
  __n128 result;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  const void *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  unint64_t v29;
  void *v30;
  __n128 v31;
  const void *v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  void *__p;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = a1 + 24 * (v4 >> 1);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v42, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 4);
    v9 = *(const void **)(a2 - 24);
    v10 = *(_QWORD *)(a2 - 16);
    v11 = (_QWORD *)(a2 - 24);
    v39 = 0;
    v40 = 0;
    v41 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v39, v9, v10, (v10 - (uint64_t)v9) >> 4);
    v14 = v42;
    v13 = v43;
    v15 = v39;
    v16 = v40;
    if (v39)
    {
      v40 = v39;
      operator delete(v39);
    }
    v17 = v13 - v14;
    v18 = v16 - v15;
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v17 > v18)
    {
      v19 = *(const void **)(a2 - 24);
      v20 = *(_OWORD *)(a2 - 16);
      *v11 = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      v31 = (__n128)v20;
      v21 = v20;
      v32 = v19;
      v22 = (uint64_t)(v20 - (_QWORD)v19) >> 4;
      while (1)
      {
        v23 = (_QWORD *)v8;
        std::vector<CFRange>::__move_assign((uint64_t)v11, (__n128 *)v8);
        if (!v7)
        {
LABEL_16:
          v30 = (void *)*v23;
          if (*v23)
          {
            v23[1] = v30;
            operator delete(v30);
            *v23 = 0;
            v23[1] = 0;
            v23[2] = 0;
          }
          *v23 = v32;
          result = v31;
          *(__n128 *)(v23 + 1) = v31;
          return result;
        }
        v7 = (v7 - 1) >> 1;
        v8 = a1 + 24 * v7;
        __p = 0;
        v37 = 0;
        v38 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 4);
        v33 = 0;
        v34 = 0;
        v35 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v33, v32, v21, v22);
        v24 = __p;
        v25 = v37;
        v27 = v33;
        v26 = v34;
        if (!v33)
          break;
        v34 = v33;
        operator delete(v33);
        v28 = __p;
        if (__p)
          goto LABEL_11;
LABEL_12:
        v29 = v26 - v27;
        v11 = v23;
        if (v25 - v24 <= v29)
          goto LABEL_16;
      }
      v28 = __p;
      if (!__p)
        goto LABEL_12;
LABEL_11:
      v37 = v28;
      operator delete(v28);
      goto LABEL_12;
    }
  }
  return result;
}

void sub_1A1855448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void NLTextSlotParserDateTimeExtractor::NLTextSlotParserDateTimeExtractor(NLTextSlotParserDateTimeExtractor *this, const __CFLocale *a2)
{
  *(_QWORD *)this = MEMORY[0x1A1B0D624](*MEMORY[0x1E0C9AE00], a2);
  *((_QWORD *)this + 1) = DDScannerCreateWithLocale();
}

void NLTextSlotParserDateTimeExtractor::~NLTextSlotParserDateTimeExtractor(NLTextSlotParserDateTimeExtractor *this)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)this;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
    CFRelease(v3);
}

void NLTextSlotParserDateTimeExtractor::getEventFixedDateTimeAndRange(const __CFTimeZone *a1@<X2>, uint64_t a2@<X8>)
{
  CFAbsoluteTime Current;
  CFDateRef v7;
  CFDateRef v8;
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex v11;
  uint64_t Range;
  uint64_t v13;
  uint64_t v14;

  Current = CFAbsoluteTimeGetCurrent();
  v7 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Current);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v7)
  {
    v8 = v7;
    if (a1)
    {
      if (DDScannerScanString() && (v9 = (const __CFArray *)DDScannerCopyResultsWithOptions()) != 0)
      {
        v10 = v9;
        if (CFArrayGetCount(v9) < 1)
        {
          Range = 0;
          v14 = 0;
        }
        else
        {
          v11 = 0;
          do
          {
            CFArrayGetValueAtIndex(v10, v11);
            Range = DDResultGetRange();
            v14 = v13;
            DDResultCopyExtractedDateFromReferenceDateWithLocale();
            ++v11;
          }
          while (v11 < CFArrayGetCount(v10));
        }
        CFRelease(v10);
      }
      else
      {
        Range = 0;
        v14 = 0;
      }
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = Range;
      *(_QWORD *)(a2 + 16) = v14;
      *(_BYTE *)(a2 + 24) = 0;
    }
    CFRelease(v8);
  }
}

_QWORD *_CFInit_MessageConversationWrapper(_QWORD *result)
{
  result[3] = 0;
  result[4] = 0;
  result[2] = &unk_1E45CDDB8;
  return result;
}

uint64_t createMessageConversationWrapper(uint64_t *a1)
{
  uint64_t Instance;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_MessageConversationWrapper)
  {
    qword_1EDBB1D68 = 0;
    unk_1EDBB1D78 = 0u;
    unk_1EDBB1D88 = 0u;
    g_CFTypeID_MessageConversationWrapper = _CFRuntimeRegisterClass();
  }
  Instance = _CFRuntimeCreateInstance();
  std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)(Instance + 24), a1);
  return Instance;
}

_QWORD *_CFInit_MessageIntentCandidateWrapper(_QWORD *result)
{
  result[3] = 0;
  result[4] = 0;
  result[2] = &unk_1E45CE188;
  return result;
}

uint64_t createMessageIntentCandidateWrapper(uint64_t *a1)
{
  uint64_t Instance;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_MessageIntentCandidateWrapper)
  {
    qword_1EDBB18E8 = 0;
    unk_1EDBB18F8 = 0u;
    unk_1EDBB1908 = 0u;
    g_CFTypeID_MessageIntentCandidateWrapper = _CFRuntimeRegisterClass();
  }
  Instance = _CFRuntimeCreateInstance();
  std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)(Instance + 24), a1);
  return Instance;
}

_QWORD *_CFInit_MessageConversationTurnWrapper(_QWORD *result)
{
  result[3] = 0;
  result[4] = 0;
  result[2] = &unk_1E45CE2F8;
  return result;
}

uint64_t createMessageConversationTurnWrapper(uint64_t *a1)
{
  uint64_t Instance;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_MessageConversationTurnWrapper)
  {
    qword_1EDBB1D08 = 0;
    unk_1EDBB1D18 = 0u;
    unk_1EDBB1D28 = 0u;
    g_CFTypeID_MessageConversationTurnWrapper = _CFRuntimeRegisterClass();
  }
  Instance = _CFRuntimeCreateInstance();
  std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)(Instance + 24), a1);
  return Instance;
}

_QWORD *_CFInit_MessageIntentRecognizerWrapper(_QWORD *result)
{
  result[3] = 0;
  result[4] = 0;
  result[2] = &unk_1E45CE340;
  return result;
}

uint64_t createMessageIntentRecognizerWrapper(uint64_t *a1)
{
  uint64_t Instance;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_MessageIntentRecognizerWrapper)
  {
    qword_1EDBB1DC8 = 0;
    unk_1EDBB1DD8 = 0u;
    unk_1EDBB1DE8 = 0u;
    g_CFTypeID_MessageIntentRecognizerWrapper = _CFRuntimeRegisterClass();
  }
  Instance = _CFRuntimeCreateInstance();
  std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)(Instance + 24), a1);
  return Instance;
}

void convertToMessageConversationTurnVector(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  CFIndex Count;
  CFIndex v5;
  _QWORD *ValueAtIndex;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v5 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
        v7 = ValueAtIndex[4];
        *(_QWORD *)&v13 = ValueAtIndex[3];
        *((_QWORD *)&v13 + 1) = v7;
        if (v7)
        {
          v8 = (unint64_t *)(v7 + 8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100]((char **)a2, &v13);
        v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
        if (*((_QWORD *)&v13 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        ++v5;
      }
      while (v5 != Count);
    }
  }
}

void sub_1A18559C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void convertToUnorderedMap(const __CFDictionary *a1@<X0>, uint64_t a2@<X8>)
{
  CFIndex Count;
  const void **v5;
  const void **v6;
  const __CFString *v7;
  const __CFString *Value;
  void *v9[2];
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 __p;
  uint64_t v16;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (a1)
  {
    Count = CFDictionaryGetCount(a1);
    v5 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
    CFDictionaryGetKeysAndValues(a1, v5, 0);
    if (Count < 1)
    {
      if (!v5)
        return;
    }
    else
    {
      v6 = v5;
      do
      {
        v7 = (const __CFString *)*v6;
        Value = (const __CFString *)CFDictionaryGetValue(a1, *v6);
        getUTF8StringFromCFString(v7, v11);
        getUTF8StringFromCFString(Value, v9);
        *(_OWORD *)v13 = *(_OWORD *)v11;
        v14 = v12;
        v11[1] = 0;
        v12 = 0;
        __p = *(_OWORD *)v9;
        v16 = v10;
        v9[0] = 0;
        v9[1] = 0;
        v10 = 0;
        v11[0] = 0;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(a2, (unsigned __int8 *)v13, (uint64_t)v13);
        if (SHIBYTE(v16) < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v14) < 0)
          operator delete(v13[0]);
        if (SHIBYTE(v10) < 0)
          operator delete(v9[0]);
        if (SHIBYTE(v12) < 0)
          operator delete(v11[0]);
        ++v6;
        --Count;
      }
      while (Count);
    }
    free(v5);
  }
}

void sub_1A1855B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v21);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t NLMessageConversationCreate(const __CFArray *a1, const __CFDictionary *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void **v17[5];
  _QWORD *v18[3];

  convertToMessageConversationTurnVector(a1, (uint64_t)v18);
  convertToUnorderedMap(a2, (uint64_t)v17);
  std::allocate_shared[abi:ne180100]<NLMessageConversation,std::allocator<NLMessageConversation>,std::vector<std::shared_ptr<NLMessageConversationTurn>> &,std::unordered_map<std::string,std::string> &,void>(v18, (uint64_t)v17, &v15);
  v13 = v15;
  v14 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = createMessageConversationWrapper(&v13);
  v6 = v14;
  if (v14)
  {
    v7 = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v17);
  v17[0] = (void **)v18;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](v17);
  return v5;
}

void sub_1A1855CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void **a14)
{
  uint64_t v14;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a14);
  a14 = (void **)(v14 - 48);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

__CFArray *NLMessageConversationCopyConversationTurns(uint64_t a1)
{
  NLMessageConversation *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  __CFArray *Mutable;
  void ***v7;
  void ***v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  const void *MessageConversationTurnWrapper;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void **v24;
  std::__shared_weak_count *v25;
  void **v26;
  std::__shared_weak_count *v27;
  void ***v28;
  void ***v29;
  NLMessageConversation *v30;
  std::__shared_weak_count *v31;

  v2 = *(NLMessageConversation **)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v2;
  v31 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  NLMessageConversation::getConversationTurns(v2, (uint64_t)&v28);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v7 = v28;
  v8 = v29;
  if (v28 != v29)
  {
    do
    {
      v9 = *v7;
      v10 = (std::__shared_weak_count *)v7[1];
      v26 = *v7;
      v27 = v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v24 = v9;
        v25 = v10;
        do
          v13 = __ldxr(v11);
        while (__stxr(v13 + 1, v11));
      }
      else
      {
        v24 = v9;
        v25 = 0;
      }
      MessageConversationTurnWrapper = (const void *)createMessageConversationTurnWrapper((uint64_t *)&v24);
      v15 = v25;
      if (v25)
      {
        v16 = (unint64_t *)&v25->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      CFArrayAppendValue(Mutable, MessageConversationTurnWrapper);
      CFRelease(MessageConversationTurnWrapper);
      v18 = v27;
      if (v27)
      {
        v19 = (unint64_t *)&v27->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v7 += 2;
    }
    while (v7 != v8);
    v3 = v31;
  }
  v26 = (void **)&v28;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v26);
  if (v3)
  {
    v21 = (unint64_t *)&v3->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return Mutable;
}

void sub_1A1855ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy((va_list)v5, va1);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void NLMessageConversationAddConversationTurn(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(std::__shared_weak_count **)(a1 + 32);
  v19 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a2 + 32);
  v18 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v17 = v7;
    do
      v10 = __ldxr(v8);
    while (__stxr(v10 + 1, v8));
  }
  else
  {
    v17 = 0;
  }
  NLMessageConversation::addConversationTurn(v3);
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1A1856054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

__CFDictionary *NLMessageConversationCopyMetadata(uint64_t a1)
{
  NLTransliterationCandidate *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t TransliteratedWord;
  __CFDictionary *Mutable;
  _QWORD *v8;
  CFStringRef CFStringFromString;
  CFStringRef v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v14;

  v2 = *(NLTransliterationCandidate **)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v14 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord(v2);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = *(_QWORD **)(TransliteratedWord + 16);
  if (v8)
  {
    do
    {
      CFStringFromString = createCFStringFromString((uint64_t)(v8 + 2));
      v10 = createCFStringFromString((uint64_t)(v8 + 5));
      CFDictionaryAddValue(Mutable, CFStringFromString, v10);
      if (CFStringFromString)
        CFRelease(CFStringFromString);
      if (v10)
        CFRelease(v10);
      v8 = (_QWORD *)*v8;
    }
    while (v8);
    v3 = v14;
  }
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return Mutable;
}

void sub_1A1856184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void NLMessageConversationUpdateMetadata(uint64_t a1, __CFDictionary *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE v8[40];
  _BYTE v9[40];
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  v10 = v3;
  v11 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  convertToUnorderedMap(a2, (uint64_t)v9);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v8, (uint64_t)v9);
  NLMessageConversation::updateMetadata(v3, (uint64_t)v8);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v8);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v9);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1A185624C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a14);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v14 - 32);
  _Unwind_Resume(a1);
}

uint64_t NLMessageConversationTurnCreate(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;

  getUTF8StringFromCFString(a1, v22);
  getUTF8StringFromCFString(a2, __p);
  v19 = (uint64_t)MEMORY[0x1A1B0D51C](a3);
  std::allocate_shared[abi:ne180100]<NLMessageConversationTurn,std::allocator<NLMessageConversationTurn>,std::string &,std::string &,long &,void>((uint64_t)v22, (uint64_t)__p, &v19, &v17);
  v15 = v17;
  v16 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = createMessageConversationTurnWrapper(&v15);
  v8 = v16;
  if (v16)
  {
    v9 = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  return v7;
}

void sub_1A18563A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v19 - 25) < 0)
    operator delete(*(void **)(v19 - 48));
  _Unwind_Resume(a1);
}

CFStringRef NLMessageConversationTurnCopyContent(uint64_t a1)
{
  NLResult *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  CFStringRef CFStringFromString;
  unint64_t *v7;
  unint64_t v8;
  std::string __p;
  NLResult *v11;
  std::__shared_weak_count *v12;

  v2 = *(NLResult **)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v11 = v2;
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  NLResult::getLemmaID(v2, &__p);
  CFStringFromString = createCFStringFromString((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return CFStringFromString;
}

void sub_1A1856498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

CFStringRef NLMessageConversationTurnCopySenderID(uint64_t a1)
{
  NLResult *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  CFStringRef CFStringFromString;
  unint64_t *v7;
  unint64_t v8;
  std::string __p;
  NLResult *v11;
  std::__shared_weak_count *v12;

  v2 = *(NLResult **)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v11 = v2;
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  NLResult::getVocStr(v2, &__p);
  CFStringFromString = createCFStringFromString((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return CFStringFromString;
}

void sub_1A1856568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

CFDateRef NLMessageConversationTurnCopyTimestamp(uint64_t a1)
{
  NLMessageConversationTurn *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t Timestamp;
  CFDateRef v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(NLMessageConversationTurn **)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  Timestamp = NLMessageConversationTurn::getTimestamp(v2);
  v7 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (double)Timestamp);
  if (v3)
  {
    v8 = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v7;
}

void sub_1A1856634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t NLMessageIntentCandidateCreate(int a1, CFDictionaryRef theDict, double a3)
{
  CFIndex Count;
  const void **v5;
  void **v6;
  const __CFString *v7;
  const __CFString *Value;
  unsigned __int8 *v9;
  uint64_t MessageIntentCandidateWrapper;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18[3];
  std::string __str;
  void *__p[2];
  char v21;
  void **keys;
  void **v23;
  _OWORD v24[2];
  int v25;
  double v26;
  int v27;
  void **v28;

  v27 = a1;
  v26 = a3;
  memset(v24, 0, sizeof(v24));
  v25 = 1065353216;
  Count = CFDictionaryGetCount(theDict);
  std::vector<__CFString const*>::vector(&keys, Count);
  CFDictionaryGetKeysAndValues(theDict, (const void **)keys, 0);
  v5 = (const void **)keys;
  v6 = v23;
  if (keys != v23)
  {
    do
    {
      v7 = (const __CFString *)*v5;
      Value = (const __CFString *)CFDictionaryGetValue(theDict, *v5);
      getUTF8StringFromCFString(v7, __p);
      getUTF8StringFromCFString(Value, &__str);
      v28 = __p;
      v9 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v24, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v28);
      std::string::operator=((std::string *)(v9 + 40), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v21 < 0)
        operator delete(__p[0]);
      ++v5;
    }
    while (v5 != (const void **)v6);
  }
  std::allocate_shared[abi:ne180100]<NLMessageIntentCandidate,std::allocator<NLMessageIntentCandidate>,NLMessageIntentType &,std::unordered_map<std::string,std::string> &,double &,void>(&v27, (uint64_t)v24, &v26, __p);
  *(_OWORD *)v18 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  MessageIntentCandidateWrapper = createMessageIntentCandidateWrapper(v18);
  v11 = (std::__shared_weak_count *)v18[1];
  if (v18[1])
  {
    v12 = (unint64_t *)(v18[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v15 = (unint64_t *)((char *)__p[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (keys)
  {
    v23 = keys;
    operator delete(keys);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v24);
  return MessageIntentCandidateWrapper;
}

void sub_1A1856814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,uint64_t a26,char a27)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t NLMessageIntentCandidateGetIntentType(uint64_t a1)
{
  NLMessageIntentCandidate *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t MessageIntentType;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(NLMessageIntentCandidate **)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  MessageIntentType = NLMessageIntentCandidate::getMessageIntentType(v2);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return MessageIntentType;
}

void sub_1A185691C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__CFDictionary *NLMessageIntentCandidateCopyAttributes(uint64_t a1)
{
  NLMessageIntentCandidate *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  __CFDictionary *Mutable;
  _QWORD *v7;
  CFStringRef CFStringFromString;
  CFStringRef v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  NLMessageIntentCandidate *v15;
  std::__shared_weak_count *v16;

  v2 = *(NLMessageIntentCandidate **)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v15 = v2;
  v16 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  NLMessageIntentCandidate::getAttributes(v2, (uint64_t)v13);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = v14;
  if (v14)
  {
    do
    {
      CFStringFromString = createCFStringFromString((uint64_t)(v7 + 2));
      v9 = createCFStringFromString((uint64_t)(v7 + 5));
      CFDictionaryAddValue(Mutable, CFStringFromString, v9);
      CFRelease(CFStringFromString);
      CFRelease(v9);
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    v3 = v16;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v13);
  if (v3)
  {
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return Mutable;
}

void sub_1A1856A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

double NLMessageIntentCandidateGetScore(uint64_t a1)
{
  NLMessageIntentCandidate *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  double Score;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(NLMessageIntentCandidate **)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  Score = NLMessageIntentCandidate::getScore(v2);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return Score;
}

void sub_1A1856AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t NLMessageIntentRecognizerCreate(CFDictionaryRef theDict)
{
  const __CFString *Value;
  const __CFString *v3;
  CFTypeID v4;
  const __CFLocale *v5;
  const __CFLocale *v6;
  void (*v7)(void);
  CFTypeID v8;
  NL::CFLogger *TypeID;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  CFTypeRef cf;

  if (theDict)
  {
    Value = (const __CFString *)CFDictionaryGetValue(theDict, kNLMessageIntentRecognizerLocaleKey);
    if (Value)
    {
      v3 = Value;
      v4 = CFGetTypeID(Value);
      if (v4 == CFStringGetTypeID())
      {
        v5 = CFLocaleCreate(0, v3);
LABEL_9:
        v6 = v5;
        goto LABEL_10;
      }
      v8 = CFGetTypeID(v3);
      TypeID = (NL::CFLogger *)CFLocaleGetTypeID();
      if ((NL::CFLogger *)v8 == TypeID)
      {
        v5 = (const __CFLocale *)CFRetain(v3);
        goto LABEL_9;
      }
      v7 = *(void (**)(void))(*(_QWORD *)NL::CFLogger::sharedInstance(TypeID) + 16);
    }
    else
    {
      v7 = *(void (**)(void))(*(_QWORD *)NL::CFLogger::sharedInstance(0) + 16);
    }
    v7();
    return 0;
  }
  v6 = 0;
LABEL_10:
  v10 = CFLocaleGetValue(v6, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  cf = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
  CFDictionaryAddValue((CFMutableDictionaryRef)cf, kNLMessageIntentRecognizerLocaleKey, v10);
  std::allocate_shared[abi:ne180100]<NLMessageIntentRecognizer,std::allocator<NLMessageIntentRecognizer>,__CFDictionary *&,void>((const __CFDictionary **)&cf, &v23);
  v21 = v23;
  v22 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = createMessageIntentRecognizerWrapper(&v21);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v6)
    CFRelease(v6);
  if (cf)
    CFRelease(cf);
  return v13;
}

#error "1A1856D54: call analysis failed (funcsize=31)"

__CFArray *NLMessageIntentRecognizerCopyTopIntentCandidate(uint64_t a1, uint64_t a2)
{
  __CFArray *result;
  __CFArray *v3;
  const void *ValueAtIndex;

  result = NLMessageIntentRecognizerCopyTopNIntentCandidates(a1, a2, 1);
  if (result)
  {
    v3 = result;
    ValueAtIndex = CFArrayGetValueAtIndex(result, 0);
    CFRelease(v3);
    return (__CFArray *)ValueAtIndex;
  }
  return result;
}

__CFArray *NLMessageIntentRecognizerCopyTopNIntentCandidates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFArray *Mutable;
  uint64_t i;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  const void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  NLMessageConversation *v34;
  std::__shared_weak_count *v35;
  std::string *v36;
  std::__shared_weak_count *v37;
  void **v38;

  v5 = *(std::string **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v36 = v5;
  v37 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(std::__shared_weak_count **)(a2 + 32);
  v34 = *(NLMessageConversation **)(a2 + 24);
  v35 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  NLMessageIntentRecognizer::getCandidates(v5, &v34, &v32);
  v12 = v33 - v32;
  if (v33 == v32)
  {
    Mutable = 0;
  }
  else
  {
    if (a3 - 1 >= (unint64_t)(v12 >> 3))
      v13 = v12 >> 3;
    else
      v13 = a3;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (v13 >= 1)
    {
      for (i = 0; i != v13; ++i)
      {
        v16 = v32;
        v30 = *(_QWORD *)(v32 + 8 * i);
        if (v30)
        {
          v17 = (std::__shared_weak_count *)operator new();
          v18 = *(std::__shared_weak_count_vtbl **)(v16 + 8 * i);
          v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CF0A8;
          v17->__shared_owners_ = 0;
          v17->__shared_weak_owners_ = 0;
          v17[1].__vftable = v18;
        }
        else
        {
          v17 = 0;
        }
        v31 = v17;
        *(_QWORD *)(v16 + 8 * i) = 0;
        v19 = (const void *)createMessageIntentCandidateWrapper(&v30);
        v20 = v31;
        if (v31)
        {
          v21 = (unint64_t *)&v31->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        CFArrayAppendValue(Mutable, v19);
      }
    }
  }
  v38 = (void **)&v32;
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100](&v38);
  v23 = v35;
  if (v35)
  {
    v24 = (unint64_t *)&v35->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v37;
  if (v37)
  {
    v27 = (unint64_t *)&v37->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  return Mutable;
}

void sub_1A1856FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  *(_QWORD *)(v3 - 56) = va;
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 56));
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

__CFArray *NLMessageIntentRecognizerCopyTopNCandidatesForIntentType(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __CFArray *Mutable;
  uint64_t i;
  __int128 **v17;
  std::__shared_weak_count *v18;
  __int128 *v19;
  const void *MessageIntentCandidateWrapper;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 *v31;
  std::__shared_weak_count *v32;
  __int128 **v33;
  uint64_t v34;
  NLTransliterationCandidate *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 ***v39;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(std::__shared_weak_count **)(a1 + 32);
  v37 = v6;
  v38 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *(std::__shared_weak_count **)(a2 + 32);
  v35 = *(NLTransliterationCandidate **)(a2 + 24);
  v36 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  NLMessageIntentRecognizer::getCandidateForIntentType(v6, &v35, a3, &v33);
  if (a4)
    v13 = a4;
  else
    v13 = (v34 - (uint64_t)v33) >> 3;
  if ((v34 - (uint64_t)v33) >> 3 >= v13)
    v14 = v13;
  else
    v14 = (v34 - (uint64_t)v33) >> 3;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (v14 >= 1)
  {
    for (i = 0; i != v14; ++i)
    {
      v17 = v33;
      v31 = v33[i];
      if (v31)
      {
        v18 = (std::__shared_weak_count *)operator new();
        v19 = v17[i];
        v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CF0A8;
        v18->__shared_owners_ = 0;
        v18->__shared_weak_owners_ = 0;
        v18[1].__vftable = (std::__shared_weak_count_vtbl *)v19;
      }
      else
      {
        v18 = 0;
      }
      v32 = v18;
      v17[i] = 0;
      MessageIntentCandidateWrapper = (const void *)createMessageIntentCandidateWrapper((uint64_t *)&v31);
      v21 = v32;
      if (v32)
      {
        v22 = (unint64_t *)&v32->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      CFArrayAppendValue(Mutable, MessageIntentCandidateWrapper);
    }
  }
  v39 = &v33;
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  v24 = v36;
  if (v36)
  {
    v25 = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v38;
  if (v38)
  {
    v28 = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return Mutable;
}

void sub_1A18571FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  *(_QWORD *)(v3 - 56) = va;
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 56));
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t NLMessageIntentRecognizerCopyIntentCandidatesForIntentType(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 **v11;
  std::__shared_weak_count *v12;
  __int128 *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  __int128 **v27[3];
  NLTransliterationCandidate *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 ***v32;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v4;
  v31 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *(std::__shared_weak_count **)(a2 + 32);
  v28 = *(NLTransliterationCandidate **)(a2 + 24);
  v29 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  NLMessageIntentRecognizer::getCandidateForIntentType(v4, &v28, a3, v27);
  v11 = v27[0];
  if (v27[1] == v27[0])
  {
    v14 = 0;
  }
  else
  {
    v25 = (uint64_t)*v27[0];
    if (v25)
    {
      v12 = (std::__shared_weak_count *)operator new();
      v13 = *v11;
      v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CF0A8;
      v12->__shared_owners_ = 0;
      v12->__shared_weak_owners_ = 0;
      v12[1].__vftable = (std::__shared_weak_count_vtbl *)v13;
    }
    else
    {
      v12 = 0;
    }
    v26 = v12;
    *v11 = 0;
    v14 = createMessageIntentCandidateWrapper(&v25);
    v15 = v26;
    if (v26)
    {
      v16 = (unint64_t *)&v26->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v32 = v27;
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v18 = v29;
  if (v29)
  {
    v19 = (unint64_t *)&v29->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v31;
  if (v31)
  {
    v22 = (unint64_t *)&v31->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v14;
}

void sub_1A18573E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  *(_QWORD *)(v3 - 24) = va;
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 24));
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v3 - 40);
  _Unwind_Resume(a1);
}

__CFArray *NLMessageIntentRecognizerCopyTopNIntentTypes(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  const __CFAllocator *v10;
  __CFArray *Mutable;
  char *v12;
  unint64_t v13;
  CFNumberRef v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int valuePtr;
  char *v23;
  char *v24;
  NLMessageConversation *v25;
  std::__shared_weak_count *v26;
  std::string *v27;
  std::__shared_weak_count *v28;

  v3 = *(std::string **)(a1 + 24);
  v4 = *(std::__shared_weak_count **)(a1 + 32);
  v27 = v3;
  v28 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a2 + 32);
  v25 = *(NLMessageConversation **)(a2 + 24);
  v26 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  NLMessageIntentRecognizer::getCandidateIntentTypes(v3, &v25, &v23);
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v12 = v24;
  if (v24 != v23)
  {
    v13 = 0;
    v12 = v23;
    do
    {
      valuePtr = 0;
      valuePtr = *(_DWORD *)&v12[4 * v13];
      v14 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
      CFArrayAppendValue(Mutable, v14);
      CFRelease(v14);
      ++v13;
      v12 = v23;
    }
    while (v13 < (v24 - v23) >> 2);
  }
  if (v12)
  {
    v24 = v12;
    operator delete(v12);
  }
  v15 = v26;
  if (v26)
  {
    v16 = (unint64_t *)&v26->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v28;
  if (v28)
  {
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return Mutable;
}

void sub_1A18575A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MessageConversationWrapper::~MessageConversationWrapper(MessageConversationWrapper *this)
{
  *(_QWORD *)this = &unk_1E45CDDB8;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

{
  *(_QWORD *)this = &unk_1E45CDDB8;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
  JUMPOUT(0x1A1B0E068);
}

void MessageIntentCandidateWrapper::~MessageIntentCandidateWrapper(MessageIntentCandidateWrapper *this)
{
  *(_QWORD *)this = &unk_1E45CE188;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

{
  *(_QWORD *)this = &unk_1E45CE188;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
  JUMPOUT(0x1A1B0E068);
}

void MessageConversationTurnWrapper::~MessageConversationTurnWrapper(MessageConversationTurnWrapper *this)
{
  *(_QWORD *)this = &unk_1E45CE2F8;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

{
  *(_QWORD *)this = &unk_1E45CE2F8;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
  JUMPOUT(0x1A1B0E068);
}

void MessageIntentRecognizerWrapper::~MessageIntentRecognizerWrapper(MessageIntentRecognizerWrapper *this)
{
  *(_QWORD *)this = &unk_1E45CE340;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

{
  *(_QWORD *)this = &unk_1E45CE340;
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
  JUMPOUT(0x1A1B0E068);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v16 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A1857A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<NLMessageConversation,std::allocator<NLMessageConversation>,std::vector<std::shared_ptr<NLMessageConversationTurn>> &,std::unordered_map<std::string,std::string> &,void>@<X0>(_QWORD **a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<NLMessageConversation>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<NLMessageConversationTurn>> &,std::unordered_map<std::string,std::string> &,std::allocator<NLMessageConversation>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1A1857AC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<NLMessageConversation>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<NLMessageConversationTurn>> &,std::unordered_map<std::string,std::string> &,std::allocator<NLMessageConversation>,0>(_QWORD *a1, _QWORD **a2, uint64_t a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E45CECF0;
  a1[1] = 0;
  std::allocator<NLMessageConversation>::construct[abi:ne180100]<NLMessageConversation,std::vector<std::shared_ptr<NLMessageConversationTurn>> &,std::unordered_map<std::string,std::string> &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1A1857B24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NLMessageConversation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CECF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NLMessageConversation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CECF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

void std::__shared_ptr_emplace<NLMessageConversation>::__on_zero_shared(uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = (void **)(a1 + 24);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 48);
  v2 = v1;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::allocator<NLMessageConversation>::construct[abi:ne180100]<NLMessageConversation,std::vector<std::shared_ptr<NLMessageConversationTurn>> &,std::unordered_map<std::string,std::string> &>(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  _BYTE v6[40];
  _QWORD v7[3];
  void **v8;

  memset(v7, 0, sizeof(v7));
  std::vector<std::shared_ptr<NLMessageConversationTurn>>::__init_with_size[abi:ne180100]<std::shared_ptr<NLMessageConversationTurn>*,std::shared_ptr<NLMessageConversationTurn>*>((char *)v7, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v6, a4);
  NLMessageConversation::NLMessageConversation(a2, v7, v6);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v6);
  v8 = (void **)v7;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_1A1857C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a10);
  *(_QWORD *)(v15 - 24) = &a15;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 24));
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<NLMessageConversationTurn>>::__init_with_size[abi:ne180100]<std::shared_ptr<NLMessageConversationTurn>*,std::shared_ptr<NLMessageConversationTurn>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<NL::Entity>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1A1857CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<NLMessageConversationTurn,std::allocator<NLMessageConversationTurn>,std::string &,std::string &,long &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<NLMessageConversationTurn>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,long &,std::allocator<NLMessageConversationTurn>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1A1857D5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<NLMessageConversationTurn>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,long &,std::allocator<NLMessageConversationTurn>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_1E45CED60;
  a1[1] = 0;
  std::allocator<NLMessageConversationTurn>::construct[abi:ne180100]<NLMessageConversationTurn,std::string &,std::string &,long &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1A1857DC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NLMessageConversationTurn>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CED60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NLMessageConversationTurn>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CED60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

void std::__shared_ptr_emplace<NLMessageConversationTurn>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<NLMessageConversationTurn>::construct[abi:ne180100]<NLMessageConversationTurn,std::string &,std::string &,long &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  std::string __p;
  std::string v9;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v9 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  NLMessageConversationTurn::NLMessageConversationTurn(a2, &v9, &__p, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1A1857F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<__CFString const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<__CFString const*>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1A1857F8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<__CFString const*>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<NLMessageIntentCandidate,std::allocator<NLMessageIntentCandidate>,NLMessageIntentType &,std::unordered_map<std::string,std::string> &,double &,void>@<X0>(int *a1@<X1>, uint64_t a2@<X2>, double *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<NLMessageIntentCandidate>::__shared_ptr_emplace[abi:ne180100]<NLMessageIntentType &,std::unordered_map<std::string,std::string> &,double &,std::allocator<NLMessageIntentCandidate>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1A1858044(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<NLMessageIntentCandidate>::__shared_ptr_emplace[abi:ne180100]<NLMessageIntentType &,std::unordered_map<std::string,std::string> &,double &,std::allocator<NLMessageIntentCandidate>,0>(_QWORD *a1, int *a2, uint64_t a3, double *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_1E45CED28;
  a1[1] = 0;
  std::allocator<NLMessageIntentCandidate>::construct[abi:ne180100]<NLMessageIntentCandidate,NLMessageIntentType &,std::unordered_map<std::string,std::string> &,double &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1A18580AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NLMessageIntentCandidate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CED28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NLMessageIntentCandidate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CED28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__shared_ptr_emplace<NLMessageIntentCandidate>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 32);
}

uint64_t std::allocator<NLMessageIntentCandidate>::construct[abi:ne180100]<NLMessageIntentCandidate,NLMessageIntentType &,std::unordered_map<std::string,std::string> &,double &>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, double *a5)
{
  int v7;
  _BYTE v9[40];

  v7 = *a3;
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v9, a4);
  NLMessageIntentCandidate::NLMessageIntentCandidate(a2, v7, (uint64_t)v9, *a5);
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v9);
}

void sub_1A1858170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<NLMessageIntentRecognizer,std::allocator<NLMessageIntentRecognizer>,__CFDictionary *&,void>@<X0>(const __CFDictionary **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x100uLL);
  result = std::__shared_ptr_emplace<NLMessageIntentRecognizer>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary *&,std::allocator<NLMessageIntentRecognizer>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1A18581C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<NLMessageIntentRecognizer>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary *&,std::allocator<NLMessageIntentRecognizer>,0>(_QWORD *a1, const __CFDictionary **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E45CED98;
  NLMessageIntentRecognizer::NLMessageIntentRecognizer((NLMessageIntentRecognizer *)(a1 + 3), *a2);
  return a1;
}

void sub_1A1858218(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NLMessageIntentRecognizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CED98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NLMessageIntentRecognizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CED98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

void std::__shared_ptr_emplace<NLMessageIntentRecognizer>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<NLMessageIntentRecognizer>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<NLMessageIntentRecognizer>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 231) < 0)
    operator delete(*(void **)(a2 + 208));
  if (*(char *)(a2 + 207) < 0)
    operator delete(*(void **)(a2 + 184));
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::~__hash_table(a2 + 144);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::~__hash_table(a2 + 104);
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::~__hash_table(a2 + 64);
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::~__hash_table(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<NLAbstractIntentRecognizer>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<NLAbstractIntentRecognizer>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<std::string>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<std::string>>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::basic_regex<char,std::regex_traits<char>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::basic_regex<char,std::regex_traits<char>>>,0>(uint64_t a1)
{
  std::locale *v2;

  v2 = (std::locale *)(a1 + 24);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 64);
  std::locale::~locale(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2 + 8);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

void std::__shared_ptr_pointer<NLMessageIntentCandidate  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__shared_ptr_pointer<NLMessageIntentCandidate  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1 + 8);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<NLMessageIntentCandidate  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void NLTextSlotParserRecurrenceEventExtractor::NLTextSlotParserRecurrenceEventExtractor(NLTextSlotParserRecurrenceEventExtractor *this, CFTypeRef cf)
{
  id **v3;
  const __CFDictionary *v4;
  const void *Value;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NLSearchParserManager *v10;
  id *v11;

  v3 = (id **)((char *)this + 24);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (cf)
  {
    v4 = (const __CFDictionary *)CFRetain(cf);
    *(_QWORD *)this = v4;
  }
  else
  {
    v4 = 0;
  }
  if (CFDictionaryContainsKey(v4, kNLTextSlotParserLocaleKey[0]))
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)this, kNLTextSlotParserLocaleKey[0]);
    *((_QWORD *)this + 1) = MEMORY[0x1A1B0D624](*MEMORY[0x1E0C9AE00], Value);
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)this, kNLTextSlotParserReferenceDateKey[0]))
  {
    v6 = CFDictionaryGetValue(*(CFDictionaryRef *)this, kNLTextSlotParserReferenceDateKey[0]);
    *((_QWORD *)this + 2) = CFRetain(v6);
  }
  if (!*v3)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    objc_msgSend(v7, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("includeFutureDates"));
    v8 = *((_QWORD *)this + 2);
    if (v8)
      objc_msgSend(v7, "setObject:forKey:", v8, CFSTR("date"));
    v9 = *((_QWORD *)this + 1);
    if (!v9)
      v9 = objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", CFSTR("en_US"));
    v10 = -[NLSearchParserManager initWithLocale:context:options:]([NLSearchParserManager alloc], "initWithLocale:context:options:", v9, CFSTR("com.apple.NLP"), v7);
    v11 = (id *)operator new();
    *v11 = v10;
    std::unique_ptr<NLSearchParserManagerWrapper>::reset[abi:ne180100](v3, v11);
  }
}

void sub_1A185897C(_Unwind_Exception *a1)
{
  id **v1;

  std::unique_ptr<NLSearchParserManagerWrapper>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

id *std::unique_ptr<NLSearchParserManagerWrapper>::reset[abi:ne180100](id **a1, id *a2)
{
  id *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NLSearchParserManagerWrapper::~NLSearchParserManagerWrapper(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

void NLTextSlotParserRecurrenceEventExtractor::~NLTextSlotParserRecurrenceEventExtractor(NLTextSlotParserRecurrenceEventExtractor *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)this;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 2);
  if (v4)
    CFRelease(v4);
  std::unique_ptr<NLSearchParserManagerWrapper>::reset[abi:ne180100]((id **)this + 3, 0);
}

BOOL NLTextSlotParserRecurrenceEventExtractor::checkFutureTime(NLTextSlotParserRecurrenceEventExtractor *this, const __CFDate *a2)
{
  CFAbsoluteTime v3;
  double CurrentTime;
  __CFCalendar *v5;
  int v6;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  if (!a2)
    return 1;
  v3 = MEMORY[0x1A1B0D51C](a2);
  CurrentTime = getCurrentTime(*((_QWORD *)this + 2));
  v12 = -1;
  v13 = -1;
  v11 = -1;
  v9 = -1;
  v10 = -1;
  v8 = -1;
  v5 = copyCurrentCalendar(*((_QWORD *)this + 1));
  CFCalendarDecomposeAbsoluteTime(v5, CurrentTime, "yMd", &v13, &v12, &v11);
  CFCalendarDecomposeAbsoluteTime(v5, v3, "yMd", &v10, &v9, &v8);
  if (v10 >= v13 && (v10 != v13 || v9 >= v12 && (v9 != v12 || v8 >= v11)))
  {
    v6 = 1;
    if (!v5)
      return v6 != 0;
    goto LABEL_10;
  }
  v6 = 0;
  if (v5)
LABEL_10:
    CFRelease(v5);
  return v6 != 0;
}

void sub_1A1858B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void NLTextSlotParserRecurrenceEventExtractor::getRecurrentEventDatesAndFrequency(NLTextSlotParserRecurrenceEventExtractor *this@<X0>, CFStringRef theString@<X1>, const __CFTimeZone *a3@<X2>, _QWORD *a4@<X8>)
{
  CFIndex Length;
  void **v9;
  void *v10;
  NL::AssetResource *v11;
  const __CFDate *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD v19[9];
  _QWORD v20[8];
  _QWORD v21[6];
  uint64_t v22;
  CFIndex v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __n128 (*v27)(__n128 *, __n128 *);
  uint64_t (*v28)(uint64_t);
  void *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v24 = 0;
  v25 = &v24;
  v26 = 0x4012000000;
  v27 = __Block_byref_object_copy__3;
  v28 = __Block_byref_object_dispose__3;
  v30 = 0;
  v31 = 0;
  v29 = &unk_1A18F4361;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x4012000000;
  v21[3] = __Block_byref_object_copy__9;
  v21[4] = __Block_byref_object_dispose__10;
  v22 = 0;
  v23 = 0;
  v21[5] = &unk_1A18F4361;
  Length = CFStringGetLength(theString);
  v22 = 0;
  v23 = Length;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x4012000000;
  v20[3] = __Block_byref_object_copy__9;
  v20[4] = __Block_byref_object_dispose__10;
  v20[6] = 0;
  v20[7] = 0;
  v20[5] = &unk_1A18F4361;
  v9 = (void **)*((_QWORD *)this + 3);
  if (!v9)
    goto LABEL_8;
  v10 = *v9;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = ___ZNK40NLTextSlotParserRecurrenceEventExtractor34getRecurrentEventDatesAndFrequencyEPK10__CFStringPK12__CFTimeZone_block_invoke;
  v19[3] = &unk_1E45CFDB8;
  v19[4] = v21;
  v19[5] = v20;
  v19[6] = &v24;
  v19[7] = this;
  v19[8] = a3;
  objc_msgSend(v10, "tokenizeAndEnumerateAttributedParsesForQuery:options:withBlock:", theString, 0, v19);
  v11 = (NL::AssetResource *)v25[6];
  if (!v11)
    goto LABEL_8;
  v12 = (const __CFDate *)NL::AssetResource::URL(v11);
  if (NLTextSlotParserRecurrenceEventExtractor::checkFutureTime(this, v12))
  {
    v13 = v25[7];
    *a4 = v25[6];
    a4[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
LABEL_8:
    *a4 = 0;
    a4[1] = 0;
  }
  _Block_object_dispose(v20, 8);
  _Block_object_dispose(v21, 8);
  _Block_object_dispose(&v24, 8);
  v16 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1A1858D58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 144), 8);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v1 + 48);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__3(uint64_t a1)
{
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 48);
}

__n128 __Block_byref_object_copy__9(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t ___ZNK40NLTextSlotParserRecurrenceEventExtractor34getRecurrentEventDatesAndFrequencyEPK10__CFStringPK12__CFTimeZone_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v7[4];
  __int128 v8;
  __int128 v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v2 + 56);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZNK40NLTextSlotParserRecurrenceEventExtractor34getRecurrentEventDatesAndFrequencyEPK10__CFStringPK12__CFTimeZone_block_invoke_2;
  v7[3] = &unk_1E45CFD90;
  v5 = *(_OWORD *)(a1 + 56);
  v8 = *(_OWORD *)(a1 + 40);
  v9 = v5;
  return objc_msgSend(a2, "enumerateAttributesInRange:options:usingBlock:", v3, v4, 0, v7);
}

void ___ZNK40NLTextSlotParserRecurrenceEventExtractor34getRecurrentEventDatesAndFrequencyEPK10__CFStringPK12__CFTimeZone_block_invoke_2(_QWORD *a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  void *v18;
  __CFCalendar *v19;
  void *v20;
  double CurrentTime;
  double v22;
  double v23;
  double v24;
  int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  double v35;
  void *v36;
  int v37;
  void *v38;
  uint64_t v39;
  double v40;
  void *v41;
  int v42;
  void *v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  int v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  id v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NLTextSlotRecurrentEvent *v67;
  const __CFDate *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  CFAbsoluteTime at[2];

  if (!a2)
    return;
  v8 = a1[6];
  if (!objc_msgSend(a2, "count"))
    return;
  v9 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("dateComponents"));
  v10 = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("startDateComponents"));
  v11 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("endDateComponents"));
  v12 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("frequencyDateComponents"));
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("dateType")))
    v13 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("dateType")), "unsignedIntValue");
  else
    v13 = 0;
  v14 = *(_QWORD *)(a1[4] + 8);
  v15 = *(_QWORD *)(v14 + 56);
  if (v15)
  {
    v16 = *(_QWORD *)(v14 + 48);
    if (v16 + v15 <= a3)
      *(_QWORD *)(v14 + 56) = a4 + a3 - v16;
  }
  else
  {
    *(_QWORD *)(v14 + 48) = a3;
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 56) = a4;
  }
  if (v9)
    v17 = v10 == 0;
  else
    v17 = 0;
  if (!v17)
    v9 = (void *)v10;
  v18 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v19 = copyCurrentCalendar(*(_QWORD *)(v8 + 8));
  v20 = (id)CFMakeCollectable(v19);
  CurrentTime = getCurrentTime(*(_QWORD *)(v8 + 16));
  at[0] = CurrentTime;
  v94 = -1;
  v92 = -1;
  v93 = -1;
  v90 = -1;
  v91 = -1;
  v88 = -1;
  v89 = -1;
  v86 = -1;
  v87 = -1;
  v85 = -1;
  CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, CurrentTime, "smHyMdEFwW", &v85, &v86, &v87, &v94, &v93, &v92, &v91, &v90, &v88, &v89);
  if (v9)
  {
    if (objc_msgSend(v9, "weekday") == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (objc_msgSend(v9, "weekOfYear") == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (objc_msgSend(v9, "day") == 0x7FFFFFFFFFFFFFFFLL
          && objc_msgSend(v9, "month") == 0x7FFFFFFFFFFFFFFFLL
          && objc_msgSend(v9, "year") == 0x7FFFFFFFFFFFFFFFLL)
        {
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "smH", -v85, -v86, -v87);
          if (objc_msgSend(v9, "hour") != 0x7FFFFFFFFFFFFFFFLL)
          {
            CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "H", objc_msgSend(v9, "hour"));
            if (!v12)
            {
              v22 = at[0];
              if (at[0] < CurrentTime)
                CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "d", at[0], 1);
            }
          }
          if (objc_msgSend(v9, "minute", v22) != 0x7FFFFFFFFFFFFFFFLL)
          {
            CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "m", objc_msgSend(v9, "minute"));
            if (!v12)
            {
              v23 = at[0];
              if (at[0] < CurrentTime)
                CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "h", at[0], 1);
            }
          }
          if (objc_msgSend(v9, "second", v23) != 0x7FFFFFFFFFFFFFFFLL)
          {
            CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "s", objc_msgSend(v9, "second"));
            if (!v12 && at[0] < CurrentTime)
              CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "m", at[0], 1);
          }
          goto LABEL_80;
        }
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "smHdM", -v85, -v86, -v87, (1 - v92), (1 - v93));
        if (objc_msgSend(v9, "year") != 0x7FFFFFFFFFFFFFFFLL)
        {
          v34 = objc_msgSend(v9, "year");
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "y", v34 - v94);
        }
        if (objc_msgSend(v9, "month") != 0x7FFFFFFFFFFFFFFFLL)
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "M", objc_msgSend(v9, "month") - 1);
        if (objc_msgSend(v9, "day") != 0x7FFFFFFFFFFFFFFFLL)
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "d", objc_msgSend(v9, "day") - 1);
        if (objc_msgSend(v9, "hour") != 0x7FFFFFFFFFFFFFFFLL)
        {
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "H", objc_msgSend(v9, "hour"));
          if (!v12)
          {
            v36 = v11;
            v37 = v13;
            v38 = v18;
            v39 = v92;
            v17 = objc_msgSend(v9, "day") == v39;
            v18 = v38;
            v13 = v37;
            v11 = v36;
            if (v17)
            {
              v35 = at[0];
              if (at[0] < CurrentTime)
                CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "h", at[0], 12);
            }
          }
        }
        if (objc_msgSend(v9, "minute", v35) != 0x7FFFFFFFFFFFFFFFLL)
        {
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "m", objc_msgSend(v9, "minute"));
          if (!v12)
          {
            v41 = v11;
            v42 = v13;
            v43 = v18;
            v44 = v92;
            v17 = objc_msgSend(v9, "day") == v44;
            v18 = v43;
            v13 = v42;
            v11 = v41;
            if (v17)
            {
              v40 = at[0];
              if (at[0] < CurrentTime)
                CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "h", at[0], 12);
            }
          }
        }
        if (objc_msgSend(v9, "second", v40) == 0x7FFFFFFFFFFFFFFFLL)
        {
          if (!v12)
          {
LABEL_100:
            if (objc_msgSend(v9, "year", v45) == 0x7FFFFFFFFFFFFFFFLL && at[0] < CurrentTime)
              CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "y", at[0], 1);
          }
        }
        else
        {
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "s", objc_msgSend(v9, "second"));
          if (!v12)
          {
            v55 = v11;
            v56 = v13;
            v57 = v18;
            v58 = v92;
            v17 = objc_msgSend(v9, "day") == v58;
            v18 = v57;
            v13 = v56;
            v11 = v55;
            if (v17)
            {
              v45 = at[0];
              if (at[0] < CurrentTime)
                CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "h", at[0], 12);
            }
            goto LABEL_100;
          }
        }
LABEL_80:
        CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "smHyMdEFwW", &v85, &v86, &v87, &v94, &v93, &v92, &v91, &v90, &v88, &v89);
        goto LABEL_81;
      }
      v84 = v11;
      v25 = v13;
      v26 = v18;
      v27 = -v85;
      v28 = -v86;
      v29 = -v87;
      v30 = (1 - v91);
      v31 = objc_msgSend(v9, "weekOfYear");
      CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "smHEw", v27, v28, v29, v30, v31 - v88);
      if (objc_msgSend(v9, "hour") != 0x7FFFFFFFFFFFFFFFLL)
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "H", objc_msgSend(v9, "hour"));
      v18 = v26;
      if (objc_msgSend(v9, "minute") != 0x7FFFFFFFFFFFFFFFLL)
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "m", objc_msgSend(v9, "minute"));
      v13 = v25;
      v11 = v84;
      if (objc_msgSend(v9, "second") == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_80;
    }
    else
    {
      CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "E", -v91);
      CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "E", objc_msgSend(v9, "weekday"));
      if (objc_msgSend(v9, "weekdayOrdinal") == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (objc_msgSend(v9, "weekOfYear") == 0x7FFFFFFFFFFFFFFFLL)
        {
          if (objc_msgSend(v9, "weekOfYear") == 0x7FFFFFFFFFFFFFFFLL && !v12)
          {
            v24 = at[0];
            if (at[0] < CurrentTime)
              CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "w", at[0], 1);
          }
        }
        else
        {
          CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "w", &v88);
          v46 = objc_msgSend(v9, "weekOfYear");
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "w", v47, v46 - v88);
        }
      }
      else
      {
        CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "F", &v90);
        v32 = objc_msgSend(v9, "weekdayOrdinal");
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "F", v33, v32 - v90);
      }
      if (objc_msgSend(v9, "yearForWeekOfYear", v24) != 0x7FFFFFFFFFFFFFFFLL)
      {
        CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "y", &v94);
        v49 = objc_msgSend(v9, "yearForWeekOfYear");
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "Y", v49 - v94);
      }
      if (!v12 && objc_msgSend(v9, "weekday") != 0x7FFFFFFFFFFFFFFFLL)
      {
        v48 = at[0];
        if (at[0] <= CurrentTime)
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "w", at[0], 1);
      }
      CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "smH", v48, -v85, -v86, -v87);
      if (objc_msgSend(v9, "hour") != 0x7FFFFFFFFFFFFFFFLL)
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "H", objc_msgSend(v9, "hour"));
      if (objc_msgSend(v9, "minute") != 0x7FFFFFFFFFFFFFFFLL)
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "m", objc_msgSend(v9, "minute"));
      if (objc_msgSend(v9, "second") == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_80;
    }
    v83 = objc_msgSend(v9, "second");
    CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "s", v50, v83);
    goto LABEL_80;
  }
LABEL_81:
  if (v12)
  {
    if (objc_msgSend(v12, "second") == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (objc_msgSend(v12, "minute") == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (objc_msgSend(v12, "hour") == 0x7FFFFFFFFFFFFFFFLL)
        {
          if (objc_msgSend(v12, "day") == 0x7FFFFFFFFFFFFFFFLL)
          {
            if (objc_msgSend(v12, "weekOfYear") == 0x7FFFFFFFFFFFFFFFLL)
            {
              if (objc_msgSend(v12, "weekOfMonth") == 0x7FFFFFFFFFFFFFFFLL)
              {
                if (objc_msgSend(v12, "weekdayOrdinal") == 0x7FFFFFFFFFFFFFFFLL)
                {
                  if (objc_msgSend(v12, "month") == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    if (objc_msgSend(v12, "year") != 0x7FFFFFFFFFFFFFFFLL)
                    {
                      v51 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v12, "year"));
                      objc_msgSend(v18, "setValue:forKey:", v51, kNLTextSlotParserRecurrentFrequencyYearKey[0]);
                      CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "y", objc_msgSend(v12, "year"));
                    }
                  }
                  else
                  {
                    v82 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v12, "month"));
                    objc_msgSend(v18, "setValue:forKey:", v82, kNLTextSlotParserRecurrentFrequencyMonthKey[0]);
                    CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "M", objc_msgSend(v12, "month"));
                  }
                }
                else
                {
                  v73 = v18;
                  v74 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v9, "weekday"));
                  objc_msgSend(v18, "setValue:forKey:", v74, kNLTextSlotParserRecurrentFrequencyWeekdayKey[0]);
                  v75 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v9, "weekdayOrdinal"));
                  objc_msgSend(v18, "setValue:forKey:", v75, kNLTextSlotParserRecurrentFrequencyWeekdayOrdinalKey[0]);
                  if (at[0] < CurrentTime)
                  {
                    CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "dM", at[0], (1 - v92), 1);
                    CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "EF", &v91, &v90);
                    v76 = objc_msgSend(v9, "weekday");
                    CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "E", v76 - v91);
                    CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "F", &v90);
                    v77 = v90;
                    v78 = objc_msgSend(v9, "weekdayOrdinal");
                    v79 = objc_msgSend(v9, "weekdayOrdinal");
                    v80 = v90;
                    v81 = v78 < v77;
                    v18 = v73;
                    if (v81)
                      v80 = 0;
                    CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "F", v79 - v80);
                  }
                }
              }
              else
              {
                v72 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v12, "weekOfMonth"));
                objc_msgSend(v18, "setValue:forKey:", v72, kNLTextSlotParserRecurrentFrequencyWeekOfMonthKey[0]);
              }
            }
            else
            {
              v69 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v12, "weekOfYear"));
              objc_msgSend(v18, "setValue:forKey:", v69, kNLTextSlotParserRecurrentFrequencyWeekOfYearKey[0]);
              if (objc_msgSend(v9, "weekday") != 0x7FFFFFFFFFFFFFFFLL)
              {
                v70 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v9, "weekday"));
                if (v13 == 48)
                {
                  objc_msgSend(v18, "setValue:forKey:", v70, kNLTextSlotParserRecurrentFrequencyWeekdayStartKey[0]);
                  v71 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v11, "weekday"));
                  objc_msgSend(v18, "setValue:forKey:", v71, kNLTextSlotParserRecurrentFrequencyWeekdayEndKey[0]);
                  v11 = 0;
                }
                else
                {
                  objc_msgSend(v18, "setValue:forKey:", v70, kNLTextSlotParserRecurrentFrequencyWeekdayKey[0]);
                  CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "w", objc_msgSend(v12, "weekOfYear"));
                }
              }
            }
          }
          else
          {
            v59 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v12, "day"));
            objc_msgSend(v18, "setValue:forKey:", v59, kNLTextSlotParserRecurrentFrequencyDayKey[0]);
            CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "d", objc_msgSend(v12, "day"));
          }
        }
        else
        {
          v54 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v12, "hour"));
          objc_msgSend(v18, "setValue:forKey:", v54, kNLTextSlotParserRecurrentFrequencyHourKey[0]);
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "H", objc_msgSend(v12, "hour"));
        }
      }
      else
      {
        v53 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v12, "minute"));
        objc_msgSend(v18, "setValue:forKey:", v53, kNLTextSlotParserRecurrentFrequencyMinuteKey[0]);
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "m", objc_msgSend(v12, "minute"));
      }
    }
    else
    {
      v52 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v12, "second"));
      objc_msgSend(v18, "setValue:forKey:", v52, kNLTextSlotParserRecurrentFrequencySecondKey[0]);
      CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "s", objc_msgSend(v12, "second"));
    }
  }
  if (v9 && objc_msgSend(v9, "hour") == 0x7FFFFFFFFFFFFFFFLL && objc_msgSend(v9, "minute") == 0x7FFFFFFFFFFFFFFFLL)
  {
    v60 = objc_msgSend(v9, "second") == 0x7FFFFFFFFFFFFFFFLL;
    if (!v12)
      goto LABEL_113;
  }
  else
  {
    v60 = 0;
    if (!v12)
      goto LABEL_113;
  }
  if (objc_msgSend(v12, "weekday") != 0x7FFFFFFFFFFFFFFFLL
    || objc_msgSend(v12, "weekOfMonth") != 0x7FFFFFFFFFFFFFFFLL
    || objc_msgSend(v12, "weekOfYear") != 0x7FFFFFFFFFFFFFFFLL)
  {
    goto LABEL_129;
  }
LABEL_113:
  if (v9)
  {
    if (objc_msgSend(v9, "weekday") == 0x7FFFFFFFFFFFFFFFLL
      && objc_msgSend(v9, "weekOfMonth") == 0x7FFFFFFFFFFFFFFFLL
      && objc_msgSend(v9, "weekOfYear") == 0x7FFFFFFFFFFFFFFFLL)
    {
      CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "smHyMd", &v85, &v86, &v87, &v94, &v93, &v92);
      v61 = objc_alloc_init(MEMORY[0x1E0C99D78]);
      v62 = v61;
      if (v85)
        objc_msgSend(v61, "setSecond:");
      if (v86)
        objc_msgSend(v62, "setMinute:");
      if (v87)
        objc_msgSend(v62, "setHour:");
      if (v92)
        objc_msgSend(v62, "setDay:");
      if (v93)
        objc_msgSend(v62, "setMonth:");
      if (v94)
        objc_msgSend(v62, "setYear:");
      goto LABEL_145;
    }
LABEL_129:
    CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "smHyEwW", &v85, &v86, &v87, &v94, &v91, &v88, &v89);
    v63 = objc_alloc_init(MEMORY[0x1E0C99D78]);
    v62 = v63;
    if (v85)
      objc_msgSend(v63, "setSecond:");
    if (v86)
      objc_msgSend(v62, "setMinute:");
    if (v87)
      objc_msgSend(v62, "setHour:");
    if (v91)
      objc_msgSend(v62, "setWeekday:");
    if (v88)
      objc_msgSend(v62, "setWeekOfYear:");
    if (v89 && objc_msgSend(v62, "weekOfMonth"))
      objc_msgSend(v62, "setWeekOfMonth:", v89);
    if (v94)
      objc_msgSend(v62, "setYearForWeekOfYear:");
    goto LABEL_145;
  }
  v62 = 0;
LABEL_145:
  v64 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 48);
  if (v64 || v13 == 42)
  {
    if (v64 && v13 == 42)
      NLTextSlotRecurrentEvent::setEventDateRange(v64, *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 48), *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 56));
  }
  else
  {
    v65 = a1[7];
    if (v65 && v62)
    {
      objc_msgSend(v62, "setTimeZone:");
      v65 = a1[7];
    }
    if (v65 && v11)
      objc_msgSend(v11, "setTimeZone:");
    v66 = *(_QWORD *)(a1[5] + 8);
    v67 = (NLTextSlotRecurrentEvent *)operator new();
    if (v62)
      v62 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar"), "dateFromComponents:", v62);
    if (v11)
      v68 = (const __CFDate *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar"), "dateFromComponents:", v11);
    else
      v68 = 0;
    NLTextSlotRecurrentEvent::NLTextSlotRecurrentEvent(v67, (const __CFDate *)v62, v68, (const __CFDictionary *)v18, *(CFRange *)(*(_QWORD *)(a1[4] + 8) + 48), v60);
    std::shared_ptr<NLTextSlotRecurrentEvent>::reset[abi:ne180100]<NLTextSlotRecurrentEvent,void>((_QWORD *)(v66 + 48), (uint64_t)v67);
  }
}

void sub_1A185A0A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1B0E068](v1, 0x1060C407B31EA7ELL);
  _Unwind_Resume(a1);
}

void std::shared_ptr<NLTextSlotRecurrentEvent>::reset[abi:ne180100]<NLTextSlotRecurrentEvent,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<NLTextSlotRecurrentEvent>::shared_ptr[abi:ne180100]<NLTextSlotRecurrentEvent,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void NLSearchParserManagerWrapper::~NLSearchParserManagerWrapper(id *this)
{
  if (*this)

}

void nlp::CFScopedPtr<__CFCalendar *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

_QWORD *std::shared_ptr<NLTextSlotRecurrentEvent>::shared_ptr[abi:ne180100]<NLTextSlotRecurrentEvent,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E45CF0E0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1A185A1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<NLTextSlotRecurrentEvent>::reset[abi:ne180100]((NLTextSlotRecurrentEvent **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<NLTextSlotRecurrentEvent *,std::shared_ptr<NLTextSlotRecurrentEvent>::__shared_ptr_default_delete<NLTextSlotRecurrentEvent,NLTextSlotRecurrentEvent>,std::allocator<NLTextSlotRecurrentEvent>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

NLTextSlotRecurrentEvent *std::__shared_ptr_pointer<NLTextSlotRecurrentEvent *,std::shared_ptr<NLTextSlotRecurrentEvent>::__shared_ptr_default_delete<NLTextSlotRecurrentEvent,NLTextSlotRecurrentEvent>,std::allocator<NLTextSlotRecurrentEvent>>::__on_zero_shared(uint64_t a1)
{
  NLTextSlotRecurrentEvent *result;

  result = *(NLTextSlotRecurrentEvent **)(a1 + 24);
  if (result)
  {
    NLTextSlotRecurrentEvent::~NLTextSlotRecurrentEvent(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<NLTextSlotRecurrentEvent *,std::shared_ptr<NLTextSlotRecurrentEvent>::__shared_ptr_default_delete<NLTextSlotRecurrentEvent,NLTextSlotRecurrentEvent>,std::allocator<NLTextSlotRecurrentEvent>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

NLTextSlotRecurrentEvent *std::unique_ptr<NLTextSlotRecurrentEvent>::reset[abi:ne180100](NLTextSlotRecurrentEvent **a1, NLTextSlotRecurrentEvent *a2)
{
  NLTextSlotRecurrentEvent *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NLTextSlotRecurrentEvent::~NLTextSlotRecurrentEvent(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

void NLDevanagariNasalOrthographyConverter::NLDevanagariNasalOrthographyConverter(NLDevanagariNasalOrthographyConverter *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  __CFCharacterSet *Mutable;
  uint64_t v8;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  std::string v13[4];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  std::string v17;
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  std::string v21;
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD v30[3];
  _QWORD v31[3];
  _QWORD v32[3];
  _QWORD v33[3];
  _QWORD v34[3];
  _QWORD v35[3];
  _QWORD v36[3];
  _QWORD v37[3];
  _QWORD v38[3];
  _QWORD v39[3];
  _QWORD v40[3];
  _QWORD v41[3];
  _QWORD v42[3];
  _QWORD v43[3];
  _QWORD v44[3];
  _QWORD v45[3];
  std::string v46;
  CFRange v47;
  CFRange v48;
  CFRange v49;

  v46.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0C80C00];
  *((_OWORD *)this + 2) = 0u;
  v2 = (_QWORD *)((char *)this + 32);
  *(_QWORD *)this = &off_1E45CE4E8;
  *((_QWORD *)this + 1) = CFSTR("्");
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  v3 = (_QWORD *)((char *)this + 72);
  *((_DWORD *)this + 16) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 1065353216;
  *((_OWORD *)this + 7) = 0u;
  v4 = (_QWORD *)((char *)this + 112);
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 1065353216;
  *(_OWORD *)((char *)this + 152) = 0u;
  v5 = (_QWORD *)((char *)this + 152);
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 46) = 1065353216;
  *((_OWORD *)this + 12) = 0u;
  v6 = (_QWORD *)((char *)this + 192);
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 56) = 1065353216;
  Mutable = CFCharacterSetCreateMutable(0);
  v47.location = 2325;
  v47.length = 37;
  CFCharacterSetAddCharactersInRange(Mutable, v47);
  v48.location = 2392;
  v48.length = 8;
  CFCharacterSetAddCharactersInRange(Mutable, v48);
  v49.location = 2424;
  v49.length = 8;
  CFCharacterSetAddCharactersInRange(Mutable, v49);
  *((_QWORD *)this + 2) = CFCharacterSetCreateCopy(0, Mutable);
  CFRelease(Mutable);
  *((_QWORD *)this + 3) = CFCharacterSetCreateWithCharactersInString(0, CFSTR("ङञणनम"));
  std::string::basic_string[abi:ne180100]<0>(v13, "क");
  std::string::basic_string[abi:ne180100]<0>(v14, "ख");
  std::string::basic_string[abi:ne180100]<0>(v15, "ग");
  std::string::basic_string[abi:ne180100]<0>(v16, "घ");
  std::string::basic_string[abi:ne180100]<0>(&v17, "च");
  std::string::basic_string[abi:ne180100]<0>(v18, "छ");
  std::string::basic_string[abi:ne180100]<0>(v19, "ज");
  std::string::basic_string[abi:ne180100]<0>(v20, "झ");
  std::string::basic_string[abi:ne180100]<0>(&v21, "ट");
  std::string::basic_string[abi:ne180100]<0>(v22, "ठ");
  std::string::basic_string[abi:ne180100]<0>(v23, "ड");
  std::string::basic_string[abi:ne180100]<0>(v24, "ढ");
  std::string::basic_string[abi:ne180100]<0>(v25, "त");
  std::string::basic_string[abi:ne180100]<0>(v26, "थ");
  std::string::basic_string[abi:ne180100]<0>(v27, "द");
  std::string::basic_string[abi:ne180100]<0>(v28, "ध");
  std::string::basic_string[abi:ne180100]<0>(v29, "ड़");
  std::string::basic_string[abi:ne180100]<0>(v30, "ड़");
  std::string::basic_string[abi:ne180100]<0>(v31, "ढ़");
  std::string::basic_string[abi:ne180100]<0>(v32, "ढ़");
  std::string::basic_string[abi:ne180100]<0>(v33, "क़");
  std::string::basic_string[abi:ne180100]<0>(v34, "क़");
  std::string::basic_string[abi:ne180100]<0>(v35, "ख़");
  std::string::basic_string[abi:ne180100]<0>(v36, "ख़");
  std::string::basic_string[abi:ne180100]<0>(v37, "ग़");
  std::string::basic_string[abi:ne180100]<0>(v38, "ग़");
  std::string::basic_string[abi:ne180100]<0>(v39, "फ़");
  std::string::basic_string[abi:ne180100]<0>(v40, "फ़");
  std::string::basic_string[abi:ne180100]<0>(v41, "ज़");
  std::string::basic_string[abi:ne180100]<0>(v42, "ज़");
  std::string::basic_string[abi:ne180100]<0>(v43, "श");
  std::string::basic_string[abi:ne180100]<0>(v44, "ष");
  std::string::basic_string[abi:ne180100]<0>(v45, "स");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v2, v13, &v46);
  v8 = 33;
  do
  {
    if (SHIBYTE(v13[v8 - 1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13[v8 - 1].__r_.__value_.__l.__data_);
    --v8;
  }
  while (v8 * 24);
  std::string::basic_string[abi:ne180100]<0>(v13, "प");
  std::string::basic_string[abi:ne180100]<0>(v14, "फ");
  std::string::basic_string[abi:ne180100]<0>(v15, "ब");
  std::string::basic_string[abi:ne180100]<0>(v16, "भ");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v3, v13, &v17);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v16[i + 2]) < 0)
      operator delete((void *)v16[i]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "ट");
  std::string::basic_string[abi:ne180100]<0>(v14, "ठ");
  std::string::basic_string[abi:ne180100]<0>(v15, "ड");
  std::string::basic_string[abi:ne180100]<0>(v16, "ड़");
  std::string::basic_string[abi:ne180100]<0>(&v17, "ड़");
  std::string::basic_string[abi:ne180100]<0>(v18, "ढ");
  std::string::basic_string[abi:ne180100]<0>(v19, "ढ़");
  std::string::basic_string[abi:ne180100]<0>(v20, "ढ़");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v4, v13, &v21);
  for (j = 0; j != -24; j -= 3)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "क");
  std::string::basic_string[abi:ne180100]<0>(v14, "ख");
  std::string::basic_string[abi:ne180100]<0>(v15, "ग");
  std::string::basic_string[abi:ne180100]<0>(v16, "घ");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v5, v13, &v17);
  for (k = 0; k != -12; k -= 3)
  {
    if (SHIBYTE(v16[k + 2]) < 0)
      operator delete((void *)v16[k]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "च");
  std::string::basic_string[abi:ne180100]<0>(v14, "छ");
  std::string::basic_string[abi:ne180100]<0>(v15, "ज");
  std::string::basic_string[abi:ne180100]<0>(v16, "झ");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v6, v13, &v17);
  for (m = 0; m != -12; m -= 3)
  {
    if (SHIBYTE(v16[m + 2]) < 0)
      operator delete((void *)v16[m]);
  }
}

void sub_1A185A9C0(_Unwind_Exception *a1)
{
  NLAbstractOrthographyConvertor *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = 0;
  while (1)
  {
    if (*(char *)(v7 + v9 + 95) < 0)
      operator delete(*(void **)(v7 + v9 + 72));
    v9 -= 24;
    if (v9 == -96)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v6);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v5);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v3);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
      NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(v1);
      _Unwind_Resume(a1);
    }
  }
}

void NLDevanagariNasalOrthographyConverter::~NLDevanagariNasalOrthographyConverter(NLDevanagariNasalOrthographyConverter *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_1E45CE4E8;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
    CFRelease(v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 192);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 152);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 112);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

{
  NLDevanagariNasalOrthographyConverter::~NLDevanagariNasalOrthographyConverter(this);
  JUMPOUT(0x1A1B0E068);
}

BOOL NLDevanagariNasalOrthographyConverter::isConsonant(CFStringRef *this, CFStringRef theString)
{
  const __CFString *v2;
  int HasSuffix;
  const __CFCharacterSet *v5;
  UniChar CharacterAtIndex;
  _BOOL8 v7;
  CFRange v9;

  v2 = theString;
  HasSuffix = CFStringHasSuffix(theString, this[1]);
  if (HasSuffix)
  {
    v9.length = CFStringGetLength(v2) - 1;
    v9.location = 0;
    v2 = CFStringCreateWithSubstring(0, v2, v9);
  }
  if (CFStringGetLength(v2) < 1)
  {
    v7 = 0;
    if (!HasSuffix)
      return v7;
    goto LABEL_5;
  }
  v5 = (const __CFCharacterSet *)this[2];
  CharacterAtIndex = CFStringGetCharacterAtIndex(v2, 0);
  v7 = CFCharacterSetIsCharacterMember(v5, CharacterAtIndex) != 0;
  if (HasSuffix)
LABEL_5:
    CFRelease(v2);
  return v7;
}

BOOL NLDevanagariNasalOrthographyConverter::isNasal(uint64_t a1, uint64_t a2)
{
  const __CFString *CFStringFromString;
  int HasSuffix;
  const __CFString *v5;
  const __CFCharacterSet *v6;
  UniChar CharacterAtIndex;
  _BOOL8 v8;
  CFRange v10;

  CFStringFromString = createCFStringFromString(a2);
  HasSuffix = CFStringHasSuffix(CFStringFromString, *(CFStringRef *)(a1 + 8));
  v5 = CFStringFromString;
  if (HasSuffix)
  {
    v10.length = CFStringGetLength(CFStringFromString) - 1;
    v10.location = 0;
    v5 = CFStringCreateWithSubstring(0, CFStringFromString, v10);
  }
  if (CFStringGetLength(v5) == 1)
  {
    v6 = *(const __CFCharacterSet **)(a1 + 24);
    CharacterAtIndex = CFStringGetCharacterAtIndex(v5, 0);
    v8 = CFCharacterSetIsCharacterMember(v6, CharacterAtIndex) != 0;
    if (!HasSuffix)
      goto LABEL_8;
    goto LABEL_7;
  }
  v8 = 0;
  if (HasSuffix)
LABEL_7:
    CFRelease(v5);
LABEL_8:
  CFRelease(CFStringFromString);
  return v8;
}

void NLDevanagariNasalOrthographyConverter::getSimplifiedFormForNasalConsonantCombination(CFStringRef *this@<X0>, CFStringRef theString@<X1>, const __CFString *a3@<X2>, uint64_t a4@<X8>)
{
  const __CFString *v5;
  int HasSuffix;
  int v9;
  const __CFString *v10;
  std::string *v11;
  __int128 v12;
  const std::string::value_type *p_p;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  uint64_t v26;
  std::string v27;
  std::string v28;
  void *__p;
  std::string::size_type v30;
  unsigned __int8 v31;
  void *v32[2];
  char v33;
  _QWORD v34[3];
  CFRange v35;
  CFRange v36;

  v5 = theString;
  v34[2] = *MEMORY[0x1E0C80C00];
  HasSuffix = CFStringHasSuffix(theString, this[1]);
  if (HasSuffix)
  {
    v35.length = CFStringGetLength(v5) - 1;
    v35.location = 0;
    v5 = CFStringCreateWithSubstring(0, v5, v35);
  }
  v9 = CFStringHasSuffix(a3, this[1]);
  v10 = a3;
  if (v9)
  {
    v36.length = CFStringGetLength(a3) - 1;
    v36.location = 0;
    v10 = CFStringCreateWithSubstring(0, a3, v36);
  }
  getUTF8StringFromCFString(v10, v32);
  getUTF8StringFromCFString(a3, &__p);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a4, "");
  if (CFStringCompare(v5, CFSTR("न"), 0))
  {
    if (CFStringCompare(v5, CFSTR("म"), 0))
    {
      if (CFStringCompare(v5, CFSTR("ण"), 0))
      {
        if (CFStringCompare(v5, CFSTR("ङ"), 0))
        {
          if (CFStringCompare(v5, CFSTR("ञ"), 0))
            goto LABEL_58;
          if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(this + 24, (unsigned __int8 *)v32))
          {
            goto LABEL_25;
          }
          getUTF8StringFromCFString(v5, &v27);
          v21 = std::string::append(&v27, "्");
          v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          v28.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          if ((v31 & 0x80u) == 0)
            p_p = (const std::string::value_type *)&__p;
          else
            p_p = (const std::string::value_type *)__p;
          if ((v31 & 0x80u) == 0)
            v14 = v31;
          else
            v14 = v30;
        }
        else
        {
          if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(this + 19, (unsigned __int8 *)v32))
          {
            goto LABEL_25;
          }
          getUTF8StringFromCFString(v5, &v27);
          v19 = std::string::append(&v27, "्");
          v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          if ((v31 & 0x80u) == 0)
            p_p = (const std::string::value_type *)&__p;
          else
            p_p = (const std::string::value_type *)__p;
          if ((v31 & 0x80u) == 0)
            v14 = v31;
          else
            v14 = v30;
        }
LABEL_53:
        v23 = std::string::append(&v28, p_p, v14);
        v24 = v23->__r_.__value_.__r.__words[0];
        v34[0] = v23->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
        v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a4 + 23) < 0)
          operator delete(*(void **)a4);
        v26 = v34[0];
        *(_QWORD *)a4 = v24;
        *(_QWORD *)(a4 + 8) = v26;
        *(_QWORD *)(a4 + 15) = *(_QWORD *)((char *)v34 + 7);
        *(_BYTE *)(a4 + 23) = v25;
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v27.__r_.__value_.__l.__data_);
          if (!v9)
            goto LABEL_60;
LABEL_59:
          CFRelease(v10);
          goto LABEL_60;
        }
LABEL_58:
        if (!v9)
          goto LABEL_60;
        goto LABEL_59;
      }
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(this + 14, (unsigned __int8 *)v32))
      {
        getUTF8StringFromCFString(v5, &v27);
        v17 = std::string::append(&v27, "्");
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if ((v31 & 0x80u) == 0)
          p_p = (const std::string::value_type *)&__p;
        else
          p_p = (const std::string::value_type *)__p;
        if ((v31 & 0x80u) == 0)
          v14 = v31;
        else
          v14 = v30;
        goto LABEL_53;
      }
    }
    else if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(this + 9, (unsigned __int8 *)v32))
    {
      getUTF8StringFromCFString(v5, &v27);
      v15 = std::string::append(&v27, "्");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if ((v31 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v31 & 0x80u) == 0)
        v14 = v31;
      else
        v14 = v30;
      goto LABEL_53;
    }
  }
  else if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(this + 4, (unsigned __int8 *)v32))
  {
    getUTF8StringFromCFString(v5, &v27);
    v11 = std::string::append(&v27, "्");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((v31 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v31 & 0x80u) == 0)
      v14 = v31;
    else
      v14 = v30;
    goto LABEL_53;
  }
LABEL_25:
  std::operator+<char>();
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v28;
  if (v9)
    goto LABEL_59;
LABEL_60:
  if (HasSuffix)
    CFRelease(v5);
  if ((char)v31 < 0)
    operator delete(__p);
  if (v33 < 0)
    operator delete(v32[0]);
}

void sub_1A185B28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void NLDevanagariNasalOrthographyConverter::convertToModernOrthography(CFStringRef *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const __CFString *CFStringFromString;
  CFMutableStringRef Mutable;
  const __CFString *Copy;
  CFIndex v9;
  const __CFString *v10;
  _BOOL4 isConsonant;
  _BOOL4 v12;
  uint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  CFIndex Length;
  CFIndex v17;
  CFIndex v18;
  const __CFString *v19;
  const __CFString *v20;
  std::string *v21;
  std::string::size_type v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  std::string v26;
  std::string v27;
  _BYTE v28[32];
  __int128 __p;
  unsigned __int8 v30;
  uint64_t v31;
  CFRange v32;
  CFRange v33;
  CFRange v34;

  v31 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v27 = *(std::string *)a2;
  NLDevanagariCharTokenizer::NLDevanagariCharTokenizer(v28, &v27, 0, 0);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  CFStringFromString = createCFStringFromString(a2);
  v25 = a3;
  Mutable = CFStringCreateMutable(0, 0);
  Copy = 0;
  while (NLDevanagariCharTokenizer::advance((NLDevanagariCharTokenizer *)v28))
  {
    v33.location = NLDevanagariCharTokenizer::currentTokenRange((NLDevanagariCharTokenizer *)v28);
    v33.length = v9;
    v10 = CFStringCreateWithSubstring(0, CFStringFromString, v33);
    getUTF8StringFromCFString(v10, &v26);
    isConsonant = NLDevanagariNasalOrthographyConverter::isConsonant(a1, v10);
    if (Copy)
      v12 = isConsonant;
    else
      v12 = 0;
    if (v12)
    {
      if (CFStringGetLength(Copy) < 1)
      {
        v15 = 0;
      }
      else
      {
        NLDevanagariNasalOrthographyConverter::getSimplifiedFormForNasalConsonantCombination(a1, Copy, v10, (uint64_t)&__p);
        v13 = v30;
        v14 = v30;
        if ((v30 & 0x80u) != 0)
          v13 = *((_QWORD *)&__p + 1);
        v15 = v13 != 0;
        if (v13)
        {
          Length = CFStringGetLength(Mutable);
          v17 = CFStringGetLength(Copy);
          v18 = CFStringGetLength(Copy);
          v19 = createCFStringFromString((uint64_t)&__p);
          v32.location = Length - v17;
          v32.length = v18;
          CFStringReplace(Mutable, v32, v19);
          CFRelease(v19);
          v14 = v30;
        }
        if ((v14 & 0x80) != 0)
          operator delete((void *)__p);
      }
    }
    else
    {
      v15 = 0;
      if (!Copy)
        goto LABEL_23;
    }
    CFRelease(Copy);
LABEL_23:
    if (!((unsigned int (*)(CFStringRef *, std::string *))(*a1)->data)(a1, &v26)
      || !CFStringHasSuffix(v10, a1[1]))
    {
      Copy = 0;
      if (v15)
        goto LABEL_29;
LABEL_28:
      CFStringAppend(Mutable, v10);
      goto LABEL_29;
    }
    Copy = CFStringCreateCopy(0, v10);
    if (!v15)
      goto LABEL_28;
LABEL_29:
    if (v10)
      CFRelease(v10);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  getUTF8StringFromCFString(Mutable, (_QWORD *)v25);
  if (Copy)
  {
    v34.length = CFStringGetLength(Mutable) - 2;
    v34.location = 0;
    v20 = CFStringCreateWithSubstring(0, Mutable, v34);
    getUTF8StringFromCFString(v20, &v26);
    v21 = std::string::append(&v26, "ं");
    v22 = v21->__r_.__value_.__r.__words[0];
    *(_QWORD *)&__p = v21->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&__p + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(v25 + 23) < 0)
      operator delete(*(void **)v25);
    v24 = __p;
    *(_QWORD *)v25 = v22;
    *(_QWORD *)(v25 + 8) = v24;
    *(_QWORD *)(v25 + 15) = *(_QWORD *)((char *)&__p + 7);
    *(_BYTE *)(v25 + 23) = v23;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    CFRelease(v20);
  }
  if (Mutable)
    CFRelease(Mutable);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  if (Copy)
    CFRelease(Copy);
  NLDevanagariCharTokenizer::~NLDevanagariCharTokenizer((NLDevanagariCharTokenizer *)v28);
}

void sub_1A185B690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(_QWORD *a1, std::string *__str, std::string *a3)
{
  std::string *v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  BOOL v9;
  void **v10;
  BOOL v11;

  v4 = __str;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = __str == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = (void **)v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 16), v4);
        v10 = *(void ***)v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, v8);
        ++v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = (uint64_t)v10;
      }
      while (!v11);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a1, (unsigned __int8 *)v4, (uint64_t)v4);
    ++v4;
  }
}

void sub_1A185B81C(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1A185B838(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *v6;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2 + 16);
  v2[1] = v5;
  v6 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6)
    return v6;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (unsigned __int8 *)v2;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
      v9 = v4 <= a2 ? a2 % v4 : a2;
    else
      v9 = (v4 - 1) & a2;
    v10 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = *(unsigned __int8 **)i)
      {
        v12 = *((_QWORD *)i + 1);
        if (v12 == a2)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a3) & 1) != 0)
            return i;
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4)
              v12 %= v4;
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    v15 = 1;
    if (v4 >= 3)
      v15 = (v4 & (v4 - 1)) != 0;
    v16 = v15 | (2 * v4);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

_QWORD *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_perform[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void NLRomanHindiWordLanguageModeler::NLRomanHindiWordLanguageModeler(NLRomanHindiWordLanguageModeler *this, const __CFDictionary *a2)
{
  NLRomanHindiWordLanguageModeler *v3;

  NLAbstractLanguageModeler::NLAbstractLanguageModeler(this, CFSTR("hi-Latn"));
  *(_QWORD *)v3 = &unk_1E45CE430;
  NLRomanHindiWordLanguageModeler::loadLanguageModel(v3, a2);
}

void sub_1A185BB5C(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler *v1;

  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

void NLRomanHindiWordLanguageModeler::loadLanguageModel(NLRomanHindiWordLanguageModeler *this, CFDictionaryRef theDict)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v4;
  NL::CFLogger *v5;
  uint64_t v6;

  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0D434C8], CFSTR("hi-Latn"));
  *((_QWORD *)this + 1) = LMLanguageModelCreate();
  CFRelease(v4);
  if (!*((_QWORD *)this + 1))
  {
    v6 = NL::CFLogger::sharedInstance(v5);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v6 + 16))(v6, 3, "Could not locate Hindi-Latn language model");
  }
}

void NLRomanHindiWordLanguageModeler::~NLRomanHindiWordLanguageModeler(NLRomanHindiWordLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);
  JUMPOUT(0x1A1B0E068);
}

double NL::ParserContext::ParserContext(NL::ParserContext *this)
{
  double result;

  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)&result = 1;
  *((_OWORD *)this + 3) = xmmword_1A18D41F0;
  *((_WORD *)this + 32) = 1;
  *((_BYTE *)this + 66) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = (char *)this + 104;
  return result;
}

uint64_t NL::ParserContext::index(NL::ParserContext *this)
{
  uint64_t v1;
  int v3;
  const __CFURL *v4;

  v1 = *((_QWORD *)this + 7);
  if (!v1)
  {
    v3 = *((_DWORD *)this + 10);
    if (v3 == 3)
    {
      return 2;
    }
    else if (v3 == 1)
    {
      v4 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("/Library/Application Support/Apple/Spotlight/MailUsesCoreSpotlight"), kCFURLPOSIXPathStyle, 0);
      if (CFURLResourceIsReachable(v4, 0))
        v1 = 2;
      else
        v1 = 1;
      if (v4)
        CFRelease(v4);
    }
    else
    {
      return 3;
    }
  }
  return v1;
}

void sub_1A185BD28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void NL::ParserContext::setDate(const void **this, const __CFDate *a2)
{
  CFTypeRef v4;

  nlp::CFScopedPtr<__CFDate const*>::reset(this, 0);
  if (a2)
  {
    v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFDate const*>::reset(this, v4);
  }
}

void nlp::CFScopedPtr<__CFDate const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t NL::ParserContext::setLocale(const void **this, const __CFLocale *a2)
{
  const void **v4;
  CFTypeRef v5;
  uint64_t result;
  const __CFString *v7;
  int HasPrefix;

  v4 = this + 1;
  nlp::CFScopedPtr<__CFLocale const*>::reset(this + 1, 0);
  if (a2)
  {
    v5 = CFRetain(a2);
    nlp::CFScopedPtr<__CFLocale const*>::reset(v4, v5);
  }
  result = MEMORY[0x1A1B0D63C](*v4);
  if (*v4)
  {
    v7 = (const __CFString *)result;
    HasPrefix = CFStringHasPrefix((CFStringRef)result, CFSTR("ja"));
    result = CFStringHasPrefix(v7, CFSTR("zh"));
    if (result | HasPrefix)
    {
      *((_BYTE *)this + 64) = 0;
      if (HasPrefix)
        *((_BYTE *)this + 65) = 1;
    }
  }
  return result;
}

void NL::ParserContext::setUsername(const void **this, const __CFString *a2)
{
  const void **v3;
  CFTypeRef v4;

  v3 = this + 2;
  nlp::CFScopedPtr<__CFString const*>::reset(this + 2, 0);
  if (a2)
  {
    v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFString const*>::reset(v3, v4);
  }
}

void NL::ParserContext::setReferenceDatesPath(const void **this, const __CFURL *a2)
{
  const void **v3;
  CFMutableDictionaryRef DictionaryWithContentsOfURL;

  v3 = this + 3;
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 3, 0);
  if (a2)
  {
    DictionaryWithContentsOfURL = createDictionaryWithContentsOfURL(a2, 0);
    nlp::CFScopedPtr<__CFDictionary const*>::reset(v3, DictionaryWithContentsOfURL);
  }
}

void nlp::CFScopedPtr<__CFDictionary const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void NL::ParserContext::setCanonicalRegions(const void **this, const __CFDictionary *a2)
{
  const void **v3;
  CFTypeRef v4;

  v3 = this + 4;
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 4, 0);
  if (a2)
  {
    v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFDictionary const*>::reset(v3, v4);
  }
}

BOOL NL::ParserContext::regionValidForLanguage(NL::ParserContext *this, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  const __CFAllocator *v7;
  CFStringRef v8;
  const __CFDictionary *Value;
  int v10;
  const __CFDictionary *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  char v14;
  CFRange v16;

  if (!a4 || !a2 || !*((_QWORD *)this + 4))
    return 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a3)
  {
    v8 = CFStringCreateWithFormat(v7, 0, CFSTR("%@-%@"), a2, a3);
    if (!CFDictionaryContainsKey(*((CFDictionaryRef *)this + 4), v8))
      goto LABEL_16;
    Value = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 4), v8);
  }
  else
  {
    v8 = CFStringCreateWithFormat(v7, 0, CFSTR("%@_%@"), a2, a4);
    v10 = CFDictionaryContainsKey(*((CFDictionaryRef *)this + 4), v8);
    v11 = (const __CFDictionary *)*((_QWORD *)this + 4);
    if (v10)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(v11, v8);
    }
    else
    {
      if (!CFDictionaryContainsKey(v11, a2))
        goto LABEL_16;
      Value = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 4), a2);
    }
  }
  if (!Value
    || (v12 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("ValidRegions")), (v13 = v12) == 0)
    || (v16.length = CFArrayGetCount(v12), v16.location = 0, !CFArrayContainsValue(v13, v16, a4)))
  {
LABEL_16:
    v14 = 1;
    if (!v8)
      return (v14 & 1) == 0;
    goto LABEL_17;
  }
  v14 = 0;
  if (v8)
LABEL_17:
    CFRelease(v8);
  return (v14 & 1) == 0;
}

void sub_1A185C0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

NL::ParserContext *NL::ParserContext::canonicalRegionForLanguage(const __CFDictionary **this, const __CFString *key, const __CFString *a3)
{
  NL::ParserContext *v3;
  const __CFDictionary *v4;
  CFStringRef v6;
  int v7;
  const __CFDictionary *v8;
  const __CFDictionary *Value;

  if (!key)
    return 0;
  v3 = (NL::ParserContext *)this;
  v4 = this[4];
  if (!v4)
    return 0;
  if (!a3)
  {
    if (CFDictionaryContainsKey(v4, key))
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)v3 + 4), key);
      return (NL::ParserContext *)CFDictionaryGetValue(Value, CFSTR("CanonicalRegion"));
    }
    return 0;
  }
  v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@-%@"), key, a3);
  v7 = CFDictionaryContainsKey(*((CFDictionaryRef *)v3 + 4), v6);
  if (!v7)
  {
    if (!v6)
      goto LABEL_11;
    goto LABEL_10;
  }
  v8 = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)v3 + 4), v6);
  v3 = (NL::ParserContext *)CFDictionaryGetValue(v8, CFSTR("CanonicalRegion"));
  if (v6)
LABEL_10:
    CFRelease(v6);
LABEL_11:
  if (!v7)
    return 0;
  return v3;
}

void sub_1A185C1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::ParserContext::primaryCategory(NL::ParserContext *this)
{
  uint64_t v1;
  int v3;
  int v4;
  unsigned int v5;

  v1 = *((_QWORD *)this + 6);
  if ((v1 & 0x401C000) != 0)
    return 1;
  if ((v1 & 0x200000) != 0)
    return 8;
  if ((v1 & 0x2000000) != 0)
    return 15;
  if ((v1 & 0x20000) != 0)
    return 14;
  if ((v1 & 0x100000) != 0)
    return 11;
  if ((v1 & 0x40000) != 0)
    return 12;
  if ((v1 & 0x800000) != 0)
    v3 = 7;
  else
    v3 = 0;
  if ((v1 & 0x400000) != 0)
    v4 = 10;
  else
    v4 = v3;
  if ((v1 & 0x1000000) != 0)
    v5 = 13;
  else
    v5 = v4;
  if ((v1 & 0x80000) != 0)
    return 16;
  else
    return v5;
}

uint64_t NL::ParserContext::secondaryCategory(NL::ParserContext *this)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;

  v1 = *((_QWORD *)this + 6);
  if ((v1 & 0x200000) != 0)
    return 8;
  if ((v1 & 0x2000000) != 0)
    return 15;
  if ((v1 & 0x20000) != 0)
    return 14;
  if ((v1 & 0x100000) != 0)
    return 11;
  if ((v1 & 0x40000) != 0)
    return 12;
  if ((v1 & 0x800000) != 0)
    v2 = 7;
  else
    v2 = 0;
  if ((v1 & 0x400000) != 0)
    v3 = 10;
  else
    v3 = v2;
  if ((v1 & 0x1000000) != 0)
    v4 = 13;
  else
    v4 = v3;
  if ((v1 & 0x80000) != 0)
    return 16;
  else
    return v4;
}

void NL::ParserContext::close(NL::ParserContext *this)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;

  v2 = *((_QWORD *)this + 6);
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v2 & 0x200) == 0 || *((_QWORD *)this + 11) != 1)
    {
      if ((v2 & 0x207000000000) == 0)
        goto LABEL_15;
      v3 = 336;
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  if ((v2 & 0x400) != 0)
  {
    *((_QWORD *)this + 6) = v2 & 0xFFFFFFFFFFFFFCBFLL | 0x240;
    if ((v2 & 0x40C) != 0)
    {
      v2 = v2 & 0xFFFFFFFFFFFFFCBBLL | 0x244;
      goto LABEL_14;
    }
    v2 = v2 & 0xFFFFFFFFFFFFFCBFLL | 0x240;
    goto LABEL_15;
  }
  if ((v2 & 0x12) != 0 && *((_QWORD *)this + 11) >= 2uLL)
  {
    v2 &= 0xFFFFFFFFFFFFFCB9;
    v3 = 580;
LABEL_11:
    v2 |= v3;
LABEL_14:
    *((_QWORD *)this + 6) = v2;
    goto LABEL_15;
  }
  if ((v2 & 8) == 0)
  {
    if ((v2 & 0x404) != 0)
    {
      if (*((_QWORD *)this + 11) >= 2uLL)
      {
        v2 &= ~0x200uLL;
        v3 = 320;
        goto LABEL_11;
      }
      goto LABEL_78;
    }
    goto LABEL_80;
  }
  v5 = *((_QWORD *)this + 11);
  if (v5 >= 2)
  {
    v2 &= 0xFFFFFFFFFFFFFCBDLL;
    goto LABEL_55;
  }
  if (v5 == 1)
  {
    if ((v2 & 0xF000000100) != 0)
    {
      v2 &= 0xFFFFFFFFFFFFF8FFLL;
      v3 = 1604;
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  if ((v2 & 0x504) == 0)
  {
LABEL_80:
    if ((v2 & 0x12) != 0)
    {
      *((_QWORD *)this + 6) = v2 | 0x140;
      if ((v2 & 0x7000000000) != 0)
      {
        v3 = 832;
        goto LABEL_11;
      }
      v2 |= 0x140uLL;
      goto LABEL_15;
    }
    if ((v2 & 0x80000000) == 0 || !*((_QWORD *)this + 11))
      goto LABEL_15;
    v2 &= 0xFFFFFFFFFFFFFCFFLL;
LABEL_55:
    v3 = 576;
    goto LABEL_11;
  }
LABEL_78:
  if ((*((_QWORD *)this + 6) & 0x80000004) != 0x80000000)
  {
    v2 &= 0xFFFFFFFFFFFFF8FFLL;
LABEL_8:
    v3 = 1600;
    goto LABEL_11;
  }
LABEL_15:
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v2 & 0x200000000) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILVIEWED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      v2 = *((_QWORD *)this + 6);
    }
    if ((~(_WORD)v2 & 0x300) != 0)
    {
      if ((v2 & 0x204) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        goto LABEL_183;
      }
      if ((v2 & 0x80000112) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "MAILSENT");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    goto LABEL_183;
  }
  if ((v2 & 0x1A0000000000) != 0)
  {
    if ((~(_WORD)v2 & 0x300) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      goto LABEL_69;
    }
    if ((v2 & 0x200) == 0)
    {
      if ((v2 & 0x10080000012) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0)
          operator delete(__p[0]);
      }
      goto LABEL_69;
    }
    goto LABEL_237;
  }
  if ((v2 & 0x200000000000) != 0)
  {
LABEL_69:
    std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    goto LABEL_183;
  }
  if ((v2 & 0x8000) != 0 || (v4 = *((_DWORD *)this + 10), v4 == 1))
  {
    if ((v2 & 0x200000000) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILVIEWED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      v2 = *((_QWORD *)this + 6);
    }
    if ((~(_WORD)v2 & 0x300) != 0)
    {
      if ((v2 & 0x8000000800) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0)
          operator delete(__p[0]);
      }
      else
      {
        if ((v2 & 0x604) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
          goto LABEL_183;
        }
        if ((v2 & 0xC0000112) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
          if (v10 < 0)
            operator delete(__p[0]);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
LABEL_183:
    if (v10 < 0)
      operator delete(__p[0]);
    goto LABEL_185;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v2 & 0x8000000800) != 0 || (v2 & 0x300) == 0x300)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGERECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
    }
    else
    {
      if ((v2 & 0x204) != 0)
      {
LABEL_91:
        std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGERECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        goto LABEL_183;
      }
      if ((v2 & 0xC0000112) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGERECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0)
          operator delete(__p[0]);
      }
    }
    goto LABEL_251;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v2 & 0x8000000800) != 0 || (v2 & 0x300) == 0x300)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGERECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
    }
    else
    {
      if ((v2 & 0x204) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0)
          operator delete(__p[0]);
        goto LABEL_91;
      }
      if ((v2 & 0xC0000112) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0)
          operator delete(__p[0]);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGERECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0)
          operator delete(__p[0]);
      }
    }
    goto LABEL_251;
  }
  if (v4 == 3)
  {
    if ((v2 & 0x800) != 0)
    {
      if ((v2 & 0x10000000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0)
          operator delete(__p[0]);
        goto LABEL_76;
      }
    }
    else if ((v2 & 0x8000000000) != 0)
    {
      if ((v2 & 0x10000000000) == 0 && (v2 & 4) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0)
          operator delete(__p[0]);
        goto LABEL_76;
      }
    }
    else
    {
      if ((v2 & 0x80000200) != 0)
      {
LABEL_76:
        std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
LABEL_164:
        if (v10 < 0)
          operator delete(__p[0]);
        v6 = 1;
LABEL_167:
        v7 = *((_QWORD *)this + 6);
        if ((v7 & 0x400000000000) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "FILECREATED");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
          if (v10 < 0)
            operator delete(__p[0]);
          std::string::basic_string[abi:ne180100]<0>(__p, "FILEADDED");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        }
        else if ((v7 & 0x40000000) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "FILECREATED");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        }
        else
        {
          if ((v7 & 0x100000000) == 0)
            goto LABEL_177;
          std::string::basic_string[abi:ne180100]<0>(__p, "FILEMODIFIED");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        }
        if (v10 < 0)
          operator delete(__p[0]);
LABEL_177:
        if ((v6 & 1) != 0)
          goto LABEL_185;
LABEL_178:
        if (!*((_QWORD *)this + 14))
          goto LABEL_185;
        v8 = *((_QWORD *)this + 6);
        if ((v8 & 0x100) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "SENTFROM");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        }
        else
        {
          if ((v8 & 0x200) == 0)
            goto LABEL_185;
          std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVEDFROM");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        }
        goto LABEL_183;
      }
      if ((v2 & 0x112) == 0)
      {
        v6 = 0;
        goto LABEL_167;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    goto LABEL_164;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v2 & 0x10000000000) != 0)
      std::string::basic_string[abi:ne180100]<0>(__p, "USERCREATED");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "FILECREATED");
    goto LABEL_233;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v2 & 0x10000000000) != 0)
      std::string::basic_string[abi:ne180100]<0>(__p, "USERMODIFIED");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "FILEMODIFIED");
    goto LABEL_233;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FILECREATED");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    goto LABEL_161;
  }
  if ((v2 & 0x800000000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "USERPRINTED");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    goto LABEL_161;
  }
  if ((v2 & 0x600000000) != 0)
  {
    if ((v2 & 0x8000000) == 0)
    {
      if ((v2 & 0x2000000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "USERWEBVIEWED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      }
      else if ((v2 & 0x200000000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "USERVIEWED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      }
      else
      {
        if ((v2 & 0x400000000) == 0)
          goto LABEL_178;
        std::string::basic_string[abi:ne180100]<0>(__p, "USERDOWNLOADED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      }
      goto LABEL_161;
    }
    if ((v2 & 0x2000000) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "WEBVIEWED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    }
    else
    {
      if ((v2 & 0x200000000) == 0)
      {
        if ((v2 & 0x400000000) != 0)
          std::string::basic_string[abi:ne180100]<0>(__p, "FILEDOWNLOADED");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "FILEVIEWED");
LABEL_233:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        goto LABEL_161;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "FILEVIEWED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    }
LABEL_161:
    if (v10 < 0)
      operator delete(__p[0]);
    goto LABEL_178;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    if (v10 < 0)
      operator delete(__p[0]);
    if ((*((_BYTE *)this + 53) & 1) != 0)
      goto LABEL_185;
    goto LABEL_237;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v2 & 0x200) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILSENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGESENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGERECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      goto LABEL_161;
    }
    goto LABEL_241;
  }
  if ((v2 & 0x12) != 0)
  {
LABEL_241:
    if ((v2 & 0x800) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILSENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGESENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      if ((*((_BYTE *)this + 49) & 0x10) != 0)
        goto LABEL_185;
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
LABEL_251:
      std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGESENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      goto LABEL_183;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    if (v10 < 0)
      operator delete(__p[0]);
LABEL_237:
    std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    goto LABEL_183;
  }
  if ((v2 & 0x200) == 0)
    goto LABEL_178;
  std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  if ((*((_BYTE *)this + 49) & 0x10) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    if (v10 < 0)
      operator delete(__p[0]);
    goto LABEL_91;
  }
LABEL_185:
  if (!*((_QWORD *)this + 14))
  {
    if (*((_DWORD *)this + 10) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILSENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    }
    else if (NL::ParserContext::index(this) == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FILEMODIFIED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "FILECREATED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILSENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGESENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGERECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "FILECREATED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "FILEMODIFIED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    }
    if (v10 < 0)
      operator delete(__p[0]);
  }
}

void sub_1A185D7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NL::ParserContext::setActionReceived(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x240uLL;
  return this;
}

uint64_t NL::ParserContext::setActionSentFrom(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x44uLL;
  return this;
}

uint64_t NL::ParserContext::setActionSent(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x140uLL;
  return this;
}

uint64_t NL::ParserContext::setActionUserReceived(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x440uLL;
  return this;
}

uint64_t NL::ParserContext::setActionUserSent(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x50uLL;
  return this;
}

void NL::ParserContext::reset(NL::ParserContext *this)
{
  NL::ParserContext *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = this;
  *((_QWORD *)this + 6) = 1;
  v2 = (_QWORD *)((char *)this + 104);
  std::__tree<std::string>::destroy((uint64_t)this + 96, *((char **)this + 13));
  *((_QWORD *)v1 + 12) = v2;
  *v2 = 0;
  v3 = (_QWORD *)*((_QWORD *)v1 + 10);
  v1 = (NL::ParserContext *)((char *)v1 + 80);
  *((_QWORD *)v1 + 4) = 0;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy((uint64_t)v1 - 8, v3);
  *((_QWORD *)v1 - 1) = v1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
}

uint64_t **NL::ParserContext::setParticipant(uint64_t **this, __int16 a2)
{
  __int16 v3;

  v3 = a2;
  return std::__tree<short>::__emplace_unique_key_args<short,short const&>(this + 9, &v3, &v3);
}

uint64_t NL::ParserContext::setActionSentTo(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x42uLL;
  return this;
}

uint64_t NL::ParserContext::setActionWith(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x800uLL;
  return this;
}

uint64_t NL::ParserContext::setActionFromTo(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x48uLL;
  return this;
}

uint64_t NL::ParserContext::setActionCreated(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x40000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionAuthored(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x80000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionModified(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x100000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionViewed(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x200000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionDownloaded(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x400000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionPrinted(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x800000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionPosted(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x200000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionAdded(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x400000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionMessaged(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x2000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionMailed(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x4000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionAirdropped(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x1000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionUserAction(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x10000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionShared(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x8000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setTransportMail(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x40000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setTransportMessages(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x80000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setTransportAirdrop(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x20000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setTransportSharesheet(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x100000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeDate(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x8000000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeAfterDate(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x10000000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeBeforeDate(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x20000000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeKind(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x1000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeMail(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x8000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeChat(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x10000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeMessage(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x4000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeWebsite(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x2000000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeAttachment(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x4000000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeAudio(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x400000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeImage(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x1000000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeVideo(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x800000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributePresentation(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x40000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeSpreadsheet(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x80000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeDocument(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x20000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributePdf(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x100000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeApplication(uint64_t this)
{
  *(_QWORD *)(this + 48) |= 0x200000uLL;
  return this;
}

BOOL NL::ParserContext::currentActionContainsSent(NL::ParserContext *this)
{
  _QWORD *v2;
  _BOOL8 v3;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(v9, "SENT");
  v2 = (_QWORD *)((char *)this + 104);
  if ((_QWORD *)((char *)this + 104) == std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*((_QWORD **)this + 12), (_QWORD *)this + 13, (unsigned __int8 **)v9))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "MAILSENT");
    if (v2 == std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*((_QWORD **)this + 12), (_QWORD *)this + 13, (unsigned __int8 **)v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
      v3 = v2 != std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*((_QWORD **)this + 12), (_QWORD *)this + 13, (unsigned __int8 **)__p);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v3 = 1;
    }
    if (v8 < 0)
      operator delete(v7[0]);
  }
  else
  {
    v3 = 1;
  }
  if (v10 < 0)
    operator delete(v9[0]);
  return v3;
}

void sub_1A185DDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

BOOL NL::ParserContext::currentActionContainsReceived(NL::ParserContext *this)
{
  _QWORD *v2;
  _BOOL8 v3;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(v9, "RECEIVED");
  v2 = (_QWORD *)((char *)this + 104);
  if ((_QWORD *)((char *)this + 104) == std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*((_QWORD **)this + 12), (_QWORD *)this + 13, (unsigned __int8 **)v9))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "MAILRECEIVED");
    if (v2 == std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*((_QWORD **)this + 12), (_QWORD *)this + 13, (unsigned __int8 **)v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
      v3 = v2 != std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*((_QWORD **)this + 12), (_QWORD *)this + 13, (unsigned __int8 **)__p);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v3 = 1;
    }
    if (v8 < 0)
      operator delete(v7[0]);
  }
  else
  {
    v3 = 1;
  }
  if (v10 < 0)
    operator delete(v9[0]);
  return v3;
}

void sub_1A185DF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(_QWORD *a1, _QWORD *a2, unsigned __int8 **a3)
{
  _QWORD *v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *((unsigned __int8 *)v3 + 55);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 55);
      else
        v9 = (unsigned __int8 *)v3[5];
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[4], v7, v3[5]))
            return v3;
        }
        else
        {
          if (!*((_BYTE *)v3 + 55))
            return v3;
          v10 = 0;
          while (*((unsigned __int8 *)v3 + v10 + 32) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v11 = (_QWORD *)v3[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v3[2];
          v13 = *v12 == (_QWORD)v3;
          v3 = v12;
        }
        while (!v13);
      }
      v3 = v12;
    }
    while (v12 != a2);
    return a2;
  }
  return v3;
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::string>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t **std::__tree<short>::__emplace_unique_key_args<short,short const&>(uint64_t **a1, __int16 *a2, _WORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((__int16 *)v5 + 13);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v10 + 13) = *a3;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void NLTextSlotParserEventExtractor::NLTextSlotParserEventExtractor(NLTextSlotParserEventExtractor *this, const __CFLocale *a2)
{
  *(_OWORD *)((char *)this + 8) = xmmword_1A18D3A50;
  *(_OWORD *)((char *)this + 24) = xmmword_1A18D3A50;
  *(_QWORD *)this = MEMORY[0x1A1B0D624](*MEMORY[0x1E0C9AE00], a2);
}

void NLTextSlotParserEventExtractor::~NLTextSlotParserEventExtractor(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t NLTextSlotParserEventExtractor::getEventNameRange(NLTextSlotParserEventExtractor *this, const __CFString *a2)
{
  return *((_QWORD *)this + 1);
}

uint64_t NLTextSlotParserEventExtractor::getEventActionPhraseRange(NLTextSlotParserEventExtractor *this, const __CFString *a2)
{
  return *((_QWORD *)this + 3);
}

void NLResult::NLResult(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, int a7, __int128 *a8)
{
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v15 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v15;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v16 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v16;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v17 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v17;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v18 = *a5;
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v18;
  }
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v19 = *a6;
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a6 + 2);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v19;
  }
  LODWORD(this[5].__r_.__value_.__l.__data_) = a7;
  v20 = (std::string *)((char *)this + 128);
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v21 = *a8;
    this[6].__r_.__value_.__r.__words[0] = *((_QWORD *)a8 + 2);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
}

void sub_1A185E380(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void NLResult::getLemmaID(NLResult *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void NLResult::getVocStr(NLResult *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

void NLResult::getPosStr(NLResult *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

CFStringRef *NLDevanagariCharTokenizer::NLDevanagariCharTokenizer(CFStringRef *a1, uint64_t a2, const __CFString *a3, const __CFString *a4)
{
  __CFCharacterSet *Mutable;
  CFRange v9;
  CFRange v10;
  CFRange v11;

  *a1 = createCFStringFromString(a2);
  a1[1] = a3;
  a1[2] = a4;
  Mutable = CFCharacterSetCreateMutable(0);
  v9.location = 2325;
  v9.length = 37;
  CFCharacterSetAddCharactersInRange(Mutable, v9);
  v10.location = 2392;
  v10.length = 8;
  CFCharacterSetAddCharactersInRange(Mutable, v10);
  v11.location = 2424;
  v11.length = 8;
  CFCharacterSetAddCharactersInRange(Mutable, v11);
  a1[3] = (CFStringRef)Mutable;
  return a1;
}

void NLDevanagariCharTokenizer::~NLDevanagariCharTokenizer(NLDevanagariCharTokenizer *this)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)this;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
    CFRelease(v3);
  CFRelease(CFSTR("्"));
  CFRelease(CFSTR("ं"));
  CFRelease(CFSTR("़"));
}

BOOL NLDevanagariCharTokenizer::advance(NLDevanagariCharTokenizer *this)
{
  CFIndex v2;
  CFIndex Length;
  CFIndex v4;
  int v5;
  UniChar CharacterAtIndex;
  CFIndex v7;
  CFIndex v8;
  int v9;
  int v10;

  v2 = *((_QWORD *)this + 2);
  Length = CFStringGetLength(*(CFStringRef *)this);
  if (v2 < Length)
  {
    v4 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 1) = v4;
    v5 = CFStringGetLength(*(CFStringRef *)this);
    if (v4 < v5)
    {
      CharacterAtIndex = CFStringGetCharacterAtIndex(*(CFStringRef *)this, v4);
      v7 = v4 + 1;
      if (!CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 3), CharacterAtIndex))
        goto LABEL_11;
      v8 = v5;
      if (v7 < v5)
      {
        v9 = CFStringGetCharacterAtIndex(*(CFStringRef *)this, v4 + 1);
        if (v9 == CFStringGetCharacterAtIndex(CFSTR("़"), 0))
          v7 = v4 + 2;
      }
      if (v7 < v8)
      {
        v10 = CFStringGetCharacterAtIndex(*(CFStringRef *)this, v7);
        if (v10 == CFStringGetCharacterAtIndex(CFSTR("्"), 0))
          v4 = v7 + 1;
        else
          v4 = v7;
      }
      else
      {
LABEL_11:
        v4 = v7;
      }
    }
    *((_QWORD *)this + 2) = v4;
  }
  return v2 < Length;
}

uint64_t NLDevanagariCharTokenizer::currentTokenRange(NLDevanagariCharTokenizer *this)
{
  if (*((_QWORD *)this + 2) <= *((_QWORD *)this + 1))
    return -1;
  else
    return *((_QWORD *)this + 1);
}

uint64_t NLPOIEntryImplReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  BOOL v17;
  void *String;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t result;
  void *v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v16)
          v17 = 1;
        else
          v17 = (v10 & 7) == 4;
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              String = (void *)PBReaderReadString();

              v19 = String;
              v20 = 24;
              goto LABEL_27;
            case 2u:
              v26 = (void *)PBReaderReadString();

              v19 = v26;
              v20 = 16;
              goto LABEL_27;
            case 3u:
              v21 = (void *)PBReaderReadString();

              v19 = v21;
              v20 = 8;
LABEL_27:
              *(_QWORD *)(a1 + v20) = v19;
              goto LABEL_30;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 1u;
              v22 = *v3;
              v23 = *(_QWORD *)(a2 + v22);
              if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + *v4))
              {
                v24 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v23);
                *(_QWORD *)(a2 + v22) = v23 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v24 = 0;
              }
              *(_DWORD *)(a1 + 32) = v24;
              goto LABEL_30;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_30:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void NLCompositeTransliteratorSeq2Seq::NLCompositeTransliteratorSeq2Seq(NLCompositeTransliteratorSeq2Seq *this, const __CFLocale *a2, const __CFURL *a3)
{
  const void **v6;
  const __CFAllocator *v7;
  CFLocaleRef v8;
  const __CFString *Value;
  __CFString *MutableCopy;
  const __CFString *v11;
  CFLocaleRef v12;

  *((_QWORD *)this + 1) = 0;
  v6 = (const void **)((char *)this + 8);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("en_US"));
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this, v8);
  Value = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  MutableCopy = CFStringCreateMutableCopy(v7, 0, Value);
  v11 = MutableCopy;
  if (MutableCopy)
  {
    CFStringAppend(MutableCopy, CFSTR("_IN"));
    v12 = CFLocaleCreate(v7, v11);
    nlp::CFScopedPtr<__CFLocale const*>::reset(v6, v12);
  }
  *((_QWORD *)this + 2) = NLCompositeTransliteratorSeq2Seq::loadSeq2SeqModel((NLCompositeTransliteratorSeq2Seq *)MutableCopy, a2, a3);
  if (v11)
    CFRelease(v11);
}

void sub_1A185F0DC(_Unwind_Exception *a1)
{
  const void **v1;
  const void **v2;

  nlp::CFScopedPtr<__CFLocale const*>::reset(v2, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset(v1, 0);
  _Unwind_Resume(a1);
}

void *NLCompositeTransliteratorSeq2Seq::loadSeq2SeqModel(NLCompositeTransliteratorSeq2Seq *this, CFLocaleRef locale, const __CFURL *a3)
{
  const __CFString *Value;
  const __CFAllocator *v6;
  CFMutableStringRef Mutable;
  __CFString *v8;
  const __CFString *v9;
  void **v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  NSObject *v15;
  NL::CFLogger *v16;
  uint64_t v17;
  void **v18;
  NL::CFLogger *v19;
  uint64_t v20;
  void **v21;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, CFURLRef, uint64_t, uint64_t, uint64_t, _BYTE *);
  void *v32;
  uint64_t *v33;
  void *v34[2];
  char v35;
  const __CFURL *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  void *v42;
  CFTypeRef v43;
  _QWORD v44[2];

  v44[1] = *MEMORY[0x1E0C80C00];
  v37 = 0;
  v38 = &v37;
  v39 = 0x3812000000;
  v40 = __Block_byref_object_copy__4;
  v41 = __Block_byref_object_dispose__4;
  v42 = &unk_1A18F4361;
  v43 = 0;
  if (a3)
  {
    Value = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    v8 = Mutable;
    v25[0] = Mutable;
    if (Mutable)
    {
      CFStringAppend(Mutable, Value);
      CFStringAppend(v8, CFSTR("_EMT_package"));
      v36 = CFURLCreateCopyAppendingPathComponent(v6, a3, v8, 1u);
      getFileSystemRepresentationFromCFURL(v36, v34);
    }
  }
  else
  {
    v29 = MEMORY[0x1E0C809B0];
    v30 = 3221225472;
    v31 = ___ZN32NLCompositeTransliteratorSeq2Seq16loadSeq2SeqModelEPK10__CFLocalePK7__CFURL_block_invoke;
    v32 = &unk_1E45CFDE0;
    v33 = &v37;
    LMEnumerateAssetDataItems();
  }
  v9 = (const __CFString *)v38[6];
  if (v9)
  {
    getUTF8StringFromCFString(v9, v34);
    if (v35 >= 0)
      v10 = v34;
    else
      v10 = (void **)v34[0];
    v11 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:", v11);
    if (!v12
      || (v13 = objc_alloc(MEMORY[0x1E0D1F110]),
          v44[0] = v12,
          v14 = (void *)objc_msgSend(v13, "initWithModelURLs:task:skipNonFinalToCatchup:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v44, 1), CFSTR("siri"), 0), v15 = dispatch_queue_create("callbackQueue", 0), objc_msgSend(v14, "setCallbackQueue:", v15), dispatch_release(v15), v12, !v14))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Failed to load Seq2Seq EMT model for: ");
      composeErrorMessageForLocale(locale, (const void **)__p, (uint64_t)v25);
      if (v24 < 0)
        operator delete(__p[0]);
      v17 = NL::CFLogger::sharedInstance(v16);
      v18 = v25;
      if (v26 < 0)
        v18 = (void **)v25[0];
      (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v17 + 16))(v17, 3, "%s", (const char *)v18);
      if (v26 < 0)
        operator delete(v25[0]);
      v14 = 0;
    }
    if (v35 < 0)
      operator delete(v34[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "Could not locate Seq2Seq EMT package for: ");
    composeErrorMessageForLocale(locale, (const void **)v27, (uint64_t)v34);
    if (v28 < 0)
      operator delete(v27[0]);
    v20 = NL::CFLogger::sharedInstance(v19);
    v21 = v34;
    if (v35 < 0)
      v21 = (void **)v34[0];
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v20 + 16))(v20, 3, "%s", (const char *)v21);
    if (v35 < 0)
      operator delete(v34[0]);
    v14 = 0;
  }
  _Block_object_dispose(&v37, 8);
  if (v43)
    CFRelease(v43);
  return v14;
}

void sub_1A185F4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(a1 + 48), 0);
}

void ___ZN32NLCompositeTransliteratorSeq2Seq16loadSeq2SeqModelEPK10__CFLocalePK7__CFURL_block_invoke(uint64_t a1, CFURLRef url, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  const __CFString *PathComponent;
  const __CFString *v10;
  uint64_t v11;
  CFStringRef v12;

  PathComponent = CFURLCopyLastPathComponent(url);
  if (PathComponent)
  {
    v10 = PathComponent;
    if (CFStringsAreEqual(PathComponent, CFSTR("EMT_package")))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v12 = CFURLCopyPath(url);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v11 + 48), v12);
      *a6 = 1;
    }
    CFRelease(v10);
  }
}

void sub_1A185F66C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void NLCompositeTransliteratorSeq2Seq::~NLCompositeTransliteratorSeq2Seq(NLCompositeTransliteratorSeq2Seq *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)

  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this + 1, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this, 0);
}

void NLCompositeTransliteratorSeq2Seq::seq2SeqCandidatesForInput(uint64_t *a1@<X0>, uint64_t **a2@<X1>, void **a3@<X8>)
{
  uint64_t *v6;
  void *v7;
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  dispatch_time_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  uint64_t v25;
  double v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void *__p[2];
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD v46[6];
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  void (*v51)(uint64_t);
  uint64_t v52;
  _QWORD v53[5];
  os_signpost_id_t v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  NLOSSignPostseq2SeqCandidatesForInput::NLOSSignPostseq2SeqCandidatesForInput((NLOSSignPostseq2SeqCandidatesForInput *)&v54);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1[2])
  {
    if (*((char *)a2 + 23) < 0)
    {
      if (!a2[1])
        goto LABEL_38;
      v6 = *a2;
    }
    else
    {
      v6 = (uint64_t *)a2;
      if (!*((_BYTE *)a2 + 23))
        goto LABEL_38;
    }
    v7 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
    v8 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v9 = objc_msgSend(v7, "length");
    v10 = MEMORY[0x1E0C809B0];
    v53[0] = MEMORY[0x1E0C809B0];
    v53[1] = 3221225472;
    v53[2] = ___ZNK32NLCompositeTransliteratorSeq2Seq25seq2SeqCandidatesForInputERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
    v53[3] = &unk_1E45CFE08;
    v53[4] = v8;
    objc_msgSend(v7, "enumerateSubstringsInRange:options:usingBlock:", 0, v9, 2, v53);
    CFStringTrimWhitespace(v8);
    v11 = dispatch_semaphore_create(0);
    v47 = 0;
    v48 = &v47;
    v49 = 0x3052000000;
    v50 = __Block_byref_object_copy__21;
    v51 = __Block_byref_object_dispose__22;
    v52 = 0;
    v13 = a1[1];
    v12 = (void *)a1[2];
    v14 = *a1;
    v46[0] = v10;
    v46[1] = 3221225472;
    v46[2] = ___ZNK32NLCompositeTransliteratorSeq2Seq25seq2SeqCandidatesForInputERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_23;
    v46[3] = &unk_1E45CFE30;
    v46[4] = v11;
    v46[5] = &v47;
    objc_msgSend(v12, "translateString:from:to:completion:", v8, v14, v13, v46);
    v15 = dispatch_time(0, 60000000);
    dispatch_semaphore_wait(v11, v15);
    dispatch_release(v11);
    v16 = 0;
    v39 = (uint64_t)(a3 + 2);
    while (1)
    {
      v17 = objc_msgSend((id)v48[5], "count", v39);
      v18 = 5;
      if (v17 < 5)
        v18 = v17;
      if (v16 >= v18)
        break;
      v19 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v20 = (void *)objc_msgSend((id)objc_msgSend((id)v48[5], "objectAtIndexedSubscript:", v16), "tokens");
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v42, v55, 16);
      if (v21)
      {
        v22 = *(_QWORD *)v43;
        do
        {
          for (i = 0; i != v21; ++i)
          {
            if (*(_QWORD *)v43 != v22)
              objc_enumerationMutation(v20);
            objc_msgSend(v19, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v42 + 1) + 8 * i), "text"));
          }
          v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v42, v55, 16);
        }
        while (v21);
      }
      v24 = (void *)objc_msgSend(v19, "componentsJoinedByString:", &stru_1E45D0A48);
      v25 = operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v24, "UTF8String"));
      objc_msgSend((id)objc_msgSend((id)v48[5], "objectAtIndexedSubscript:", v16), "score");
      NLTransliterationCandidate::NLTransliterationCandidate(v25, a2, __p, 6, 0, -INFINITY, v26);
      v28 = (uint64_t *)a3[1];
      v27 = (unint64_t)a3[2];
      if ((unint64_t)v28 >= v27)
      {
        v30 = ((char *)v28 - (_BYTE *)*a3) >> 3;
        if ((unint64_t)(v30 + 1) >> 61)
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        v31 = v27 - (_QWORD)*a3;
        v32 = v31 >> 2;
        if (v31 >> 2 <= (unint64_t)(v30 + 1))
          v32 = v30 + 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        if (v33)
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v39, v33);
        else
          v34 = 0;
        v35 = (uint64_t *)&v34[8 * v30];
        *v35 = v25;
        v29 = v35 + 1;
        v37 = (char *)*a3;
        v36 = (char *)a3[1];
        if (v36 != *a3)
        {
          do
          {
            v38 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *--v35 = v38;
          }
          while (v36 != v37);
          v36 = (char *)*a3;
        }
        *a3 = v35;
        a3[1] = v29;
        a3[2] = &v34[8 * v33];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *v28 = v25;
        v29 = v28 + 1;
      }
      a3[1] = v29;
      if (v41 < 0)
        operator delete(__p[0]);
      ++v16;
    }

    _Block_object_dispose(&v47, 8);
  }
LABEL_38:
  NLOSSignPostseq2SeqCandidatesForInput::~NLOSSignPostseq2SeqCandidatesForInput(&v54);
}

void sub_1A185FAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,os_signpost_id_t a41)
{
  uint64_t v41;
  void *v43;

  v43 = *(void **)v41;
  if (*(_QWORD *)v41)
  {
    *(_QWORD *)(v41 + 8) = v43;
    operator delete(v43);
  }
  NLOSSignPostseq2SeqCandidatesForInput::~NLOSSignPostseq2SeqCandidatesForInput(&a41);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK32NLCompositeTransliteratorSeq2Seq25seq2SeqCandidatesForInputERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "appendString:", a2);
  return objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR(" "));
}

void __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

intptr_t ___ZNK32NLCompositeTransliteratorSeq2Seq25seq2SeqCandidatesForInputERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_23(uint64_t a1, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = objc_msgSend(a2, "copy");
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void NLOSSignPostseq2SeqCandidatesForInput::NLOSSignPostseq2SeqCandidatesForInput(NLOSSignPostseq2SeqCandidatesForInput *this)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  NSObject *v5;
  uint8_t v6[16];

  v2 = _nlpSignpostLog();
  *(_QWORD *)this = os_signpost_id_make_with_pointer(v2, this);
  v3 = _nlpSignpostLog();
  v4 = *(_QWORD *)this;
  if ((unint64_t)(*(_QWORD *)this - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = v3;
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)v6 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1802000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "seq2SeqCandidatesForInput", (const char *)&unk_1A18F08CD, v6, 2u);
    }
  }
}

void NLOSSignPostseq2SeqCandidatesForInput::~NLOSSignPostseq2SeqCandidatesForInput(os_signpost_id_t *this)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = _nlpSignpostLog();
  v3 = *this;
  if (*this - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1802000, v4, OS_SIGNPOST_INTERVAL_END, v3, "seq2SeqCandidatesForInput", (const char *)&unk_1A18F08CD, v5, 2u);
    }
  }
}

void NLArabicWordAnalyzer::NLArabicWordAnalyzer(NLArabicWordAnalyzer *this)
{
  NLQamus *v1;

  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E45CD3D8;
  v1 = (NLArabicWordAnalyzer *)((char *)this + 56);
  NLQamus::NLQamus((NLArabicWordAnalyzer *)((char *)this + 56));
  NLQamus::loadData(v1);
}

void sub_1A185FD98(_Unwind_Exception *a1)
{
  NLWordAnalyzer *v1;
  NLQamus *v2;

  NLQamus::~NLQamus(v2);
  NLWordAnalyzer::~NLWordAnalyzer(v1);
  _Unwind_Resume(a1);
}

void NLWordAnalyzer::~NLWordAnalyzer(NLWordAnalyzer *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = &unk_1E45CD318;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 32);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void NLArabicWordAnalyzer::~NLArabicWordAnalyzer(NLArabicWordAnalyzer *this)
{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E45CD3D8;
  v2 = (void **)((char *)this + 32);
  NLQamus::~NLQamus((NLArabicWordAnalyzer *)((char *)this + 56));
  *(_QWORD *)this = &unk_1E45CD318;
  v3 = v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  NLArabicWordAnalyzer::~NLArabicWordAnalyzer(this);
  JUMPOUT(0x1A1B0E068);
}

std::string *NLArabicWordAnalyzer::getLemmasForToken@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  void *__p[2];
  char v8;
  std::vector<std::pair<std::string, std::string>> v9;
  std::vector<std::pair<std::string, std::string>> *v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "lemmas");
  NLArabicWordAnalyzer::analyzeWord(a1, a2, (uint64_t *)__p, &v9);
  std::vector<std::pair<std::string,std::string>>::__vdeallocate((std::vector<std::pair<std::string, std::string>> *)(a1 + 8));
  *(std::vector<std::pair<std::string, std::string>> *)(a1 + 8) = v9;
  memset(&v9, 0, sizeof(v9));
  v10 = &v9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  if (v8 < 0)
    operator delete(__p[0]);
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a3, *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4));
}

void sub_1A185FF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NLArabicWordAnalyzer::analyzeWord(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, std::vector<std::pair<std::string, std::string>> *a4@<X8>)
{
  _QWORD *v7;
  _QWORD *i;
  char *v9;
  __int128 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  std::string::size_type v15;
  std::string v16;
  std::string v17;
  void *v18;
  std::string::size_type v19;
  uint64_t v20;
  _BYTE v21[16];
  _QWORD *v22;
  std::string v23;
  std::string v24;
  void *__p;
  uint64_t v26;
  void *v27[2];
  char v28;

  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  v7 = (_QWORD *)(a1 + 56);
  NLQamus::getBw2UTFConverter((NLQamus *)(a1 + 56), (uint64_t)&v24);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v23 = *(std::string *)a2;
  NLConvertBW2UTF::utf2bw((uint64_t)&v24, (uint64_t)&v23, 1, 0, 0, (uint64_t)v27);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v26);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v24);
  NLQamus::process_word_for_analysisType(v7, (uint64_t)v27, a3, (uint64_t)v21);
  for (i = v22; i; i = (_QWORD *)*i)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    splitWithChar((uint64_t)(i + 5), 9u, (uint64_t)&v18);
    v9 = (char *)v18;
    if (*((char *)v18 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
      v9 = (char *)v18;
    }
    else
    {
      v10 = *(_OWORD *)v18;
      v17.__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v10;
    }
    if (v9[47] < 0)
      std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)v9 + 3), *((_QWORD *)v9 + 4));
    else
      v16 = *(std::string *)(v9 + 1);
    std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v24, (__int128 *)&v17, (__int128 *)&v16);
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a4, (__int128 *)&v24);
    if (SHIBYTE(v26) < 0)
      operator delete(__p);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  }
  if (a4->__end_ == a4->__begin_)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "ت");
    v11 = startswith((unsigned __int8 *)a2, (unsigned __int8 *)&v24);
    v12 = v11;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v24.__r_.__value_.__l.__data_);
      if (v12)
        goto LABEL_25;
    }
    else if (v11)
    {
LABEL_25:
      std::string::basic_string[abi:ne180100]<0>(&v18, "ت");
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v17 = *(std::string *)a2;
      if (v20 >= 0)
        v15 = HIBYTE(v20);
      else
        v15 = v19;
LABEL_42:
      std::string::replace(&v17, 0, v15, "ا");
      std::string::basic_string[abi:ne180100]<0>(&v16, "Verb");
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v24, (__int128 *)&v17, (__int128 *)&v16);
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a4, (__int128 *)&v24);
      if (SHIBYTE(v26) < 0)
        operator delete(__p);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20) < 0)
        operator delete(v18);
      goto LABEL_52;
    }
    std::string::basic_string[abi:ne180100]<0>(&v24, "ي");
    v13 = startswith((unsigned __int8 *)a2, (unsigned __int8 *)&v24);
    v14 = v13;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v24.__r_.__value_.__l.__data_);
      if (!v14)
        goto LABEL_52;
    }
    else if (!v13)
    {
      goto LABEL_52;
    }
    std::string::basic_string[abi:ne180100]<0>(&v18, "ي");
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v17 = *(std::string *)a2;
    if (v20 >= 0)
      v15 = HIBYTE(v20);
    else
      v15 = v19;
    goto LABEL_42;
  }
LABEL_52:
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v21);
  if (v28 < 0)
    operator delete(v27[0]);
}

void sub_1A1860350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a28 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a29);
  if (*(char *)(v45 - 49) < 0)
    operator delete(*(void **)(v45 - 72));
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  _Unwind_Resume(a1);
}

std::string *NLArabicWordAnalyzer::getVariantsForToken@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  void *__p[2];
  char v8;
  std::vector<std::pair<std::string, std::string>> v9;
  std::vector<std::pair<std::string, std::string>> *v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "variants");
  NLArabicWordAnalyzer::analyzeWord(a1, a2, (uint64_t *)__p, &v9);
  std::vector<std::pair<std::string,std::string>>::__vdeallocate((std::vector<std::pair<std::string, std::string>> *)(a1 + 32));
  *(std::vector<std::pair<std::string, std::string>> *)(a1 + 32) = v9;
  memset(&v9, 0, sizeof(v9));
  v10 = &v9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  if (v8 < 0)
    operator delete(__p[0]);
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a3, *(__int128 **)(a1 + 32), *(__int128 **)(a1 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4));
}

void sub_1A1860574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, __int128 *a2)
{
  std::allocator<std::pair<std::string, std::string>> *p_end_cap;
  std::pair<std::string, std::string> *v5;
  std::pair<std::string, std::string> *value;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::pair<std::string, std::string> *end;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::pair<std::string, std::string> *v15;
  std::pair<std::string, std::string> *v16;
  __int128 v17;
  __int128 v18;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14)
      v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_1A18606E4(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1A1860770(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::__vdeallocate(std::vector<std::pair<std::string, std::string>> *this)
{
  std::pair<std::string, std::string> *begin;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  std::vector<std::pair<std::string, std::string>>::pointer v4;

  begin = this->__begin_;
  if (this->__begin_)
  {
    end = this->__end_;
    v4 = this->__begin_;
    if (end != begin)
    {
      do
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&this->__end_cap_, (uint64_t)--end);
      while (end != begin);
      v4 = this->__begin_;
    }
    this->__end_ = begin;
    operator delete(v4);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<NLExtendedString>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1A186085C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1A1860908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1A1860994(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

void NLCompositeTransliteratorLexicon::NLCompositeTransliteratorLexicon(NLCompositeTransliteratorLexicon *this, const __CFLocale *a2)
{
  const void **v4;
  const void *LatinToIDMap;
  NLCompositeTransliteratorLexicon *v6;
  const void *IDToNativeMap;

  *((_QWORD *)this + 1) = 0;
  v4 = (const void **)((char *)this + 8);
  *(_QWORD *)this = 0;
  LatinToIDMap = (const void *)NLCompositeTransliteratorLexicon::loadLatinToIDMap(this, a2);
  nlp::CFScopedPtr<_LXLexicon const*>::reset((const void **)this, LatinToIDMap);
  IDToNativeMap = (const void *)NLCompositeTransliteratorLexicon::loadIDToNativeMap(v6, a2);
  nlp::CFScopedPtr<_LXLexicon const*>::reset(v4, IDToNativeMap);
}

void sub_1A1860C0C(_Unwind_Exception *a1)
{
  const void **v1;
  const void **v2;

  nlp::CFScopedPtr<_LXLexicon const*>::reset(v2, 0);
  nlp::CFScopedPtr<_LXLexicon const*>::reset(v1, 0);
  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<_LXLexicon const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t NLCompositeTransliteratorLexicon::loadLatinToIDMap(NLCompositeTransliteratorLexicon *this, CFLocaleRef locale)
{
  const __CFString *Value;
  const __CFAllocator *v3;
  __CFString *MutableCopy;
  const __CFString *v5;
  CFLocaleRef v6;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  uint64_t v9;
  NL::CFLogger *v10;
  uint64_t v11;
  void **v12;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  __CFDictionary *v18;
  CFLocaleRef v19;
  __CFString *v20;

  Value = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, Value);
  v19 = 0;
  v20 = MutableCopy;
  if (!MutableCopy)
    return 0;
  v5 = MutableCopy;
  CFStringAppend(MutableCopy, CFSTR("_Latn"));
  v6 = CFLocaleCreate(v3, v5);
  v19 = v6;
  if (v6)
  {
    Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = Mutable;
    v18 = Mutable;
    if (Mutable)
    {
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D437B8], v6);
      v9 = LXLexiconCreate();
      if (!v9)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Could not load lexicon for: ");
        composeErrorMessageForLocale(v6, (const void **)__p, (uint64_t)v16);
        if (v15 < 0)
          operator delete(__p[0]);
        v11 = NL::CFLogger::sharedInstance(v10);
        v12 = v16;
        if (v17 < 0)
          v12 = (void **)v16[0];
        (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v11 + 16))(v11, 3, "%s", (const char *)v12);
        if (v17 < 0)
          operator delete(v16[0]);
      }
      CFRelease(v8);
    }
    else
    {
      v9 = 0;
    }
    CFRelease(v6);
  }
  else
  {
    v9 = 0;
  }
  CFRelease(v5);
  return v9;
}

void sub_1A1860DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,const void *a22)
{
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFDictionary *>::reset(&a22, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)(v22 - 48), 0);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)(v22 - 40), 0);
  _Unwind_Resume(a1);
}

uint64_t NLCompositeTransliteratorLexicon::loadIDToNativeMap(NLCompositeTransliteratorLexicon *this, const __CFLocale *a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  uint64_t v5;
  NL::CFLogger *v6;
  uint64_t v7;
  void **v8;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  __CFDictionary *v14;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v14 = Mutable;
  if (!Mutable)
    return 0;
  v4 = Mutable;
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D437B8], a2);
  v5 = LXLexiconCreate();
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Could not load lexicon for: ");
    composeErrorMessageForLocale(a2, (const void **)__p, (uint64_t)v12);
    if (v11 < 0)
      operator delete(__p[0]);
    v7 = NL::CFLogger::sharedInstance(v6);
    v8 = v12;
    if (v13 < 0)
      v8 = (void **)v12[0];
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v7 + 16))(v7, 3, "%s", (const char *)v8);
    if (v13 < 0)
      operator delete(v12[0]);
  }
  CFRelease(v4);
  return v5;
}

void sub_1A1860F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v21 - 40), 0);
  _Unwind_Resume(a1);
}

void NLCompositeTransliteratorLexicon::~NLCompositeTransliteratorLexicon(const void **this)
{
  nlp::CFScopedPtr<_LXLexicon const*>::reset(this + 1, 0);
  nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0);
}

uint64_t NLCompositeTransliteratorLexicon::getTokenIDForString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v3;
  CFStringRef v4;
  CFStringRef v5;
  uint64_t FirstTokenIDForString;

  if (*(char *)(a3 + 23) >= 0)
    v3 = (const char *)a3;
  else
    v3 = *(const char **)a3;
  v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, 0x8000100u);
  if (!v4)
    return 0;
  v5 = v4;
  FirstTokenIDForString = LXLexiconGetFirstTokenIDForString();
  CFRelease(v5);
  return FirstTokenIDForString;
}

void sub_1A1861074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void NLCompositeTransliteratorLexicon::getStringForTokenID(_QWORD *a1@<X8>)
{
  uint64_t v2;
  const void *v3;
  const __CFString *v4;
  const __CFString *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = LXLexiconCopyEntryForTokenID();
  v10 = v2;
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = (const __CFString *)LXEntryCopyString();
    v5 = v4;
    v9 = v4;
    if (v4)
    {
      v6 = (char *)convertToCString(v4);
      std::string::basic_string[abi:ne180100]<0>(&v7, v6);
      *(_OWORD *)a1 = v7;
      a1[2] = v8;
      free(v6);
      CFRelease(v5);
    }
    CFRelease(v3);
  }
}

void sub_1A186112C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void *v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<_LXEntry const*>::reset((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void NLCompositeTransliteratorLexicon::lexiconCandidatesForInput(uint64_t *a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  std::string __str;
  std::string v19;
  os_signpost_id_t v20;

  NLOSSignPostlexiconCandidatesForInput::NLOSSignPostlexiconCandidatesForInput((NLOSSignPostlexiconCandidatesForInput *)&v20);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v7 = *a1;
  if (*a1 && a1[1])
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      memset(&v19, 0, sizeof(v19));
      if (NLCompositeTransliteratorLexicon::getTokenIDForString(v6, v7, a2))
      {
        NLCompositeTransliteratorLexicon::getStringForTokenID(&__str);
        std::string::operator=(&v19, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v19.__r_.__value_.__l.__size_;
        if (size)
        {
          v10 = operator new();
          NLTransliterationCandidate::NLTransliterationCandidate(v10, a2, &v19, 0, 0, -INFINITY, 0.0);
          v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(a3 + 2), 1uLL);
          v13 = &v11[v12];
          *v11 = v10;
          v14 = v11 + 1;
          v16 = (char *)*a3;
          v15 = (char *)a3[1];
          if (v15 != *a3)
          {
            do
            {
              v17 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *--v11 = v17;
            }
            while (v15 != v16);
            v15 = (char *)*a3;
          }
          *a3 = v11;
          a3[1] = v14;
          a3[2] = v13;
          if (v15)
            operator delete(v15);
          a3[1] = v14;
        }
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  NLOSSignPostlexiconCandidatesForInput::~NLOSSignPostlexiconCandidatesForInput(&v20);
}

void sub_1A18612CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v25;

  MEMORY[0x1A1B0E068](v22, 0x1012C40B0087DDBLL);
  if (a21 < 0)
    operator delete(__p);
  v25 = *(void **)v21;
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(v21 + 8) = v25;
    operator delete(v25);
  }
  NLOSSignPostlexiconCandidatesForInput::~NLOSSignPostlexiconCandidatesForInput((os_signpost_id_t *)(v23 - 40));
  _Unwind_Resume(a1);
}

BOOL NLCompositeTransliteratorLexicon::isMemberOfTheNativeLexicon(uint64_t a1, uint64_t a2)
{
  return NLCompositeTransliteratorLexicon::getTokenIDForString(a1, *(_QWORD *)(a1 + 8), a2) != 0;
}

void NLOSSignPostlexiconCandidatesForInput::NLOSSignPostlexiconCandidatesForInput(NLOSSignPostlexiconCandidatesForInput *this)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  NSObject *v5;
  uint8_t v6[16];

  v2 = _nlpSignpostLog();
  *(_QWORD *)this = os_signpost_id_make_with_pointer(v2, this);
  v3 = _nlpSignpostLog();
  v4 = *(_QWORD *)this;
  if ((unint64_t)(*(_QWORD *)this - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = v3;
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)v6 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1802000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "lexiconCandidatesForInput", (const char *)&unk_1A18F08CD, v6, 2u);
    }
  }
}

void NLOSSignPostlexiconCandidatesForInput::~NLOSSignPostlexiconCandidatesForInput(os_signpost_id_t *this)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = _nlpSignpostLog();
  v3 = *this;
  if (*this - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1802000, v4, OS_SIGNPOST_INTERVAL_END, v3, "lexiconCandidatesForInput", (const char *)&unk_1A18F08CD, v5, 2u);
    }
  }
}

void nlp::CFScopedPtr<_LXEntry const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

__CFCalendar *getCurrentDateComponents@<X0>(__CFCalendar *result@<X0>, const __CFDate *a2@<X1>, _OWORD *a3@<X8>)
{
  __CFCalendar *v3;
  double CurrentTime;

  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (result)
  {
    v3 = result;
    CurrentTime = getCurrentTime((uint64_t)a2);
    return (__CFCalendar *)CFCalendarDecomposeAbsoluteTime(v3, CurrentTime, "dEMywYHms", a3, (char *)a3 + 36, (char *)a3 + 4, (char *)a3 + 8, a3 + 3, (char *)a3 + 52, (char *)a3 + 24, (char *)a3 + 28, a3 + 2);
  }
  return result;
}

uint64_t updateDateComponentsWithHolidayReference(const __CFDictionary *a1, const __CFString *a2, __CFCalendar *a3, const __CFDate *a4, const __CFLocale *a5, double *a6, NL::DateComponents *a7, NL::DateComponents *a8)
{
  uint64_t v8;
  double *v13;
  const __CFAllocator *v16;
  CFArrayRef ArrayBySeparatingStrings;
  const void *ValueAtIndex;
  const __CFDictionary *Value;
  const __CFDictionary *HolidayValuesForLocale;
  const __CFString *v21;
  CFCalendarRef v22;
  double CurrentTime;
  int v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  const __CFString *theString;
  unsigned int v35;
  CFAbsoluteTime at;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  CFTypeRef cf;
  CFTypeRef v42;
  int v43;

  v8 = 0;
  v43 = (int)a6;
  if (!a1)
    return v8;
  if (!a2)
    return v8;
  if (!a3)
    return v8;
  if (!a5)
    return v8;
  v13 = a6;
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, CFSTR("-"));
  v8 = (uint64_t)ArrayBySeparatingStrings;
  v42 = ArrayBySeparatingStrings;
  if (!ArrayBySeparatingStrings)
    return v8;
  if (CFArrayGetCount(ArrayBySeparatingStrings) != 3)
    goto LABEL_30;
  theString = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v8, 0);
  ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v8, 1);
  if (!CFDictionaryContainsKey(a1, ValueAtIndex))
    goto LABEL_30;
  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, ValueAtIndex);
  if (CFStringHasPrefix(theString, CFSTR("GENERIC")))
  {
    HolidayValuesForLocale = (const __CFDictionary *)getHolidayValuesForLocale(Value, a5);
    if (!HolidayValuesForLocale)
      goto LABEL_10;
  }
  else
  {
    HolidayValuesForLocale = (const __CFDictionary *)getHolidayValuesForLocaleAndCalendar(Value, a5, theString);
    if (!HolidayValuesForLocale)
    {
      HolidayValuesForLocale = (const __CFDictionary *)getHolidayValuesForCalendar(Value, theString);
      if (!HolidayValuesForLocale)
      {
LABEL_10:
        HolidayValuesForLocale = (const __CFDictionary *)getHolidayDefaultValuesForLocale(Value, a5);
        if (!HolidayValuesForLocale)
        {
          HolidayValuesForLocale = (const __CFDictionary *)getHolidayDefaultValues(Value);
          if (!HolidayValuesForLocale)
            goto LABEL_30;
        }
      }
    }
  }
  cf = 0;
  v21 = (const __CFString *)MEMORY[0x1A1B0D42C](a3);
  if (CFStringHasPrefix(v21, CFSTR("gregorian")))
  {
    cf = CFRetain(a3);
  }
  else
  {
    v22 = CFCalendarCreateWithIdentifier(v16, CFSTR("gregorian"));
    nlp::CFScopedPtr<__CFCalendar *>::reset(&cf, v22);
  }
  v40 = 0;
  v38 = 1;
  v39 = 0;
  v37 = 0;
  CurrentTime = getCurrentTime((uint64_t)a4);
  at = CurrentTime;
  v35 = v13;
  if (!(_DWORD)v13)
  {
    CFCalendarDecomposeAbsoluteTime((CFCalendarRef)cf, CurrentTime, "y", &v35);
    v13 = (double *)v35;
  }
  if (updateTimeForHolidayReferenceValueWithYear(a1, HolidayValuesForLocale, theString, (__CFCalendar *)cf, a5, &at, v13, &v38, &v37))
  {
    CFCalendarDecomposeAbsoluteTime((CFCalendarRef)cf, at, "dMh", (char *)&v40 + 4, &v40, &v39);
    CFCalendarDecomposeAbsoluteTime(a3, at, "dMy", (char *)&v40 + 4, &v40, &v43);
    v24 = v40;
    *(_DWORD *)a7 = HIDWORD(v40);
    *((_DWORD *)a7 + 1) = v24;
    *((_DWORD *)a7 + 2) = v43;
    v25 = v38;
    if (v38 >= 2)
    {
      v26 = *((_OWORD *)a7 + 3);
      v28 = *(_OWORD *)a7;
      v27 = *((_OWORD *)a7 + 1);
      *((_OWORD *)a8 + 2) = *((_OWORD *)a7 + 2);
      *((_OWORD *)a8 + 3) = v26;
      *(_OWORD *)a8 = v28;
      *((_OWORD *)a8 + 1) = v27;
      *(_DWORD *)a8 += v25;
    }
    v29 = v37;
    if (v37)
    {
      *((_DWORD *)a7 + 6) = v39;
      v30 = *((_OWORD *)a7 + 3);
      v31 = *(_OWORD *)a7;
      v32 = *((_OWORD *)a7 + 1);
      *((_OWORD *)a8 + 2) = *((_OWORD *)a7 + 2);
      *((_OWORD *)a8 + 3) = v30;
      *(_OWORD *)a8 = v31;
      *((_OWORD *)a8 + 1) = v32;
      *((_DWORD *)a8 + 6) += v29;
    }
    if (cf)
      CFRelease(cf);
    v8 = 1;
    goto LABEL_31;
  }
  if (cf)
    CFRelease(cf);
LABEL_30:
  v8 = 0;
LABEL_31:
  if (v42)
    CFRelease(v42);
  return v8;
}

void sub_1A1861864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  const void *v11;
  va_list va;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, const void *);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)va1, 0);
  _Unwind_Resume(a1);
}

const void *getHolidayValuesForLocale(const __CFDictionary *a1, CFLocaleRef locale)
{
  CFTypeRef Value;
  const void *v4;
  const void *v5;
  CFStringRef v6;
  CFStringRef v7;
  const void *v8;

  Value = CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
  if (!Value)
    return 0;
  v4 = Value;
  if (!CFDictionaryContainsKey(a1, Value))
    return 0;
  v5 = CFDictionaryGetValue(a1, v4);
  v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("default.%@"), v5);
  if (!v6)
    return 0;
  v7 = v6;
  if (CFDictionaryContainsKey(a1, v6))
    v8 = CFDictionaryGetValue(a1, v7);
  else
    v8 = 0;
  CFRelease(v7);
  return v8;
}

void sub_1A1861980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void *getHolidayDefaultValuesForLocale(const __CFDictionary *a1, const __CFLocale *a2)
{
  const void *Value;
  const void *v5;
  CFTypeRef v6;
  CFStringRef v7;
  CFStringRef v8;
  const void *v9;

  Value = CFDictionaryGetValue(a1, CFSTR("default"));
  if (!Value)
    return 0;
  v5 = Value;
  v6 = CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
  if (!v6)
    return 0;
  v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@.%@"), v6, v5);
  if (!v7)
    return 0;
  v8 = v7;
  if (CFDictionaryContainsKey(a1, v7))
    v9 = CFDictionaryGetValue(a1, v8);
  else
    v9 = 0;
  CFRelease(v8);
  return v9;
}

void sub_1A1861A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void *getHolidayDefaultValues(const __CFDictionary *a1)
{
  const void *Value;
  CFStringRef v3;
  CFStringRef v4;
  const void *v5;

  Value = CFDictionaryGetValue(a1, CFSTR("default"));
  if (!Value)
    return 0;
  v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("default.%@"), Value);
  if (!v3)
    return 0;
  v4 = v3;
  if (CFDictionaryContainsKey(a1, v3))
    v5 = CFDictionaryGetValue(a1, v4);
  else
    v5 = 0;
  CFRelease(v4);
  return v5;
}

void sub_1A1861B20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void *getHolidayValuesForLocaleAndCalendar(const __CFDictionary *a1, CFLocaleRef locale, const __CFString *a3)
{
  CFTypeRef Value;
  CFStringRef v6;
  CFStringRef v7;
  const void *v8;

  if (!a3)
    return 0;
  Value = CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
  if (!Value)
    return 0;
  v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@.%@"), Value, a3);
  if (!v6)
    return 0;
  v7 = v6;
  if (CFDictionaryContainsKey(a1, v6))
    v8 = CFDictionaryGetValue(a1, v7);
  else
    v8 = 0;
  CFRelease(v7);
  return v8;
}

void sub_1A1861BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void *getHolidayValuesForCalendar(const __CFDictionary *a1, const __CFString *a2)
{
  CFStringRef v3;
  CFStringRef v4;
  const void *Value;

  if (!a2)
    return 0;
  v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("default.%@"), a2);
  if (!v3)
    return 0;
  v4 = v3;
  if (CFDictionaryContainsKey(a1, v3))
    Value = CFDictionaryGetValue(a1, v4);
  else
    Value = 0;
  CFRelease(v4);
  return Value;
}

void sub_1A1861C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t updateTimeForHolidayReferenceValueWithYear(const __CFDictionary *a1, const __CFDictionary *a2, const __CFString *a3, __CFCalendar *a4, const __CFLocale *a5, double *a6, double *a7, int *a8, int *a9)
{
  const __CFDictionary *ValueAtIndex;
  uint64_t result;
  const __CFString *v18;
  CFIndex length;
  const __CFNumber *v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  int v23;
  int v24;
  int *v25;
  int *v26;
  CFStringRef v27;
  const void *Value;
  CFTypeID v29;
  int v30;
  int *v31;
  int *v32;
  const __CFNumber *v33;
  CFIndex v34;
  int v35;
  CFRange RangeOfUnit;
  const __CFString *v37;
  const __CFDictionary *v38;
  const __CFDictionary *HolidayValuesForLocale;
  CFTypeID v40;
  char v41;
  const __CFString *v42;
  const __CFString *v43;
  int *v44;
  int *v45;
  const __CFDictionary *HolidayDefaultValues;
  const __CFDictionary *v47;
  unsigned int v48[3];
  int v49;
  uint64_t valuePtr;

  ValueAtIndex = a2;
  result = (uint64_t)CFDictionaryGetValue(a2, CFSTR("Type"));
  if (!result)
    return result;
  v18 = (const __CFString *)result;
  if (!CFStringHasPrefix((CFStringRef)result, CFSTR("MonthRelativeWeekDay")))
  {
    if (CFStringHasPrefix(v18, CFSTR("AbsoluteDate")))
    {
      composeHolidayAbsoluteDateWithValue(ValueAtIndex, a4, a6, a7, v24, v25, v26);
      if (!a8)
        goto LABEL_47;
      goto LABEL_46;
    }
    if (CFStringHasPrefix(v18, CFSTR("DateList")))
    {
      v27 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), a7);
      *(_QWORD *)v48 = v27;
      if (!CFDictionaryContainsKey(ValueAtIndex, v27))
        goto LABEL_41;
      Value = CFDictionaryGetValue(ValueAtIndex, v27);
      v29 = CFGetTypeID(Value);
      if (v29 == CFDictionaryGetTypeID())
      {
        ValueAtIndex = (const __CFDictionary *)Value;
      }
      else
      {
        v40 = CFGetTypeID(Value);
        if (v40 == CFArrayGetTypeID())
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)Value, 0);
      }
      if (ValueAtIndex)
      {
        composeHolidayAbsoluteDateWithValue(ValueAtIndex, a4, a6, a7, v30, v31, v32);
        v41 = 1;
      }
      else
      {
LABEL_41:
        v41 = 0;
      }
      if (v27)
        CFRelease(v27);
      if ((v41 & 1) != 0)
        goto LABEL_45;
      return 0;
    }
    result = CFStringHasPrefix(v18, CFSTR("SpecialDateRelativeDate"));
    if (!(_DWORD)result)
      return result;
    result = CFDictionaryContainsKey(ValueAtIndex, CFSTR("SpecialDate"));
    if (!(_DWORD)result)
      return result;
    v37 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("SpecialDate"));
    result = CFDictionaryContainsKey(a1, v37);
    if (!(_DWORD)result)
      return result;
    v48[0] = 1;
    HIDWORD(valuePtr) = 1;
    if (CFStringCompare(v37, CFSTR("easter"), 0) == kCFCompareEqualTo)
    {
      v42 = (const __CFString *)MEMORY[0x1A1B0D42C](a4);
      if (CFStringCompare(v42, CFSTR("julian"), 0))
      {
        v43 = (const __CFString *)MEMORY[0x1A1B0D42C](a4);
        if (CFStringCompare(v43, CFSTR("gregorian"), 0))
          return 0;
        extractGregorianEasterInYear((_DWORD *)&valuePtr + 1, v48, (int)a7);
      }
      else
      {
        extractJulianEasterInYear((_DWORD *)&valuePtr + 1, (int *)v48, (int)a7);
      }
LABEL_62:
      composeHolidayRelativeDateWithValue(ValueAtIndex, a4, a6, HIDWORD(valuePtr), v48[0], (uint64_t)a7, v44, v45);
      if (!a8)
        goto LABEL_47;
      goto LABEL_46;
    }
    v38 = (const __CFDictionary *)CFDictionaryGetValue(a1, v37);
    if (CFStringHasPrefix(a3, CFSTR("GENERIC")))
    {
      HolidayValuesForLocale = (const __CFDictionary *)getHolidayValuesForLocale(v38, a5);
      if (!HolidayValuesForLocale)
        goto LABEL_35;
    }
    else
    {
      HolidayValuesForLocale = (const __CFDictionary *)getHolidayValuesForLocaleAndCalendar(v38, a5, a3);
      if (!HolidayValuesForLocale)
      {
        HolidayValuesForLocale = (const __CFDictionary *)getHolidayValuesForCalendar(v38, a3);
        if (!HolidayValuesForLocale)
        {
LABEL_35:
          HolidayValuesForLocale = (const __CFDictionary *)getHolidayDefaultValuesForLocale(v38, a5);
          if (!HolidayValuesForLocale)
            HolidayValuesForLocale = (const __CFDictionary *)getHolidayDefaultValues(v38);
        }
      }
    }
    if (!CFDictionaryContainsKey(HolidayValuesForLocale, CFSTR("SpecialDate")))
      return 0;
    HolidayDefaultValues = (const __CFDictionary *)getHolidayDefaultValues(v38);
    if (!HolidayDefaultValues)
      return 0;
    v47 = HolidayDefaultValues;
    if (CFDictionaryContainsKey(HolidayDefaultValues, CFSTR("SpecialDate")))
      return 0;
    updateTimeForHolidayReferenceValueWithYear(a1, v47, a3, a4, a5, a6, (int)a7, a8, a9);
    CFCalendarDecomposeAbsoluteTime(a4, *a6, "dM", (char *)&valuePtr + 4, v48);
    goto LABEL_62;
  }
  if (a4)
  {
    v48[0] = 0;
    valuePtr = 0;
    length = CFCalendarGetMaximumRangeOfUnit(a4, 0x200uLL).length;
    v20 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Month"));
    if (v20)
      CFNumberGetValue(v20, kCFNumberSInt32Type, &valuePtr);
    v21 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("WeekDay"));
    v22 = v21;
    if (v21)
    {
      CFNumberGetValue(v21, kCFNumberSInt32Type, v48);
      if (length == v48[0])
        v23 = 1;
      else
        v23 = v48[0] + 1;
      v48[0] = v23;
    }
    v33 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("WeekDayNumberInMonth"));
    if (v33)
    {
      CFNumberGetValue(v33, kCFNumberSInt32Type, (char *)&valuePtr + 4);
      if (v22)
      {
        CFCalendarComposeAbsoluteTime(a4, a6, "My", valuePtr, a7);
        v49 = 0;
        CFCalendarDecomposeAbsoluteTime(a4, *a6, "E", &v49);
        if ((int)v48[0] >= v49)
        {
          if ((int)v48[0] <= v49)
            goto LABEL_25;
          v34 = v48[0] - v49;
        }
        else
        {
          v34 = length + (int)v48[0] - v49;
        }
        CFCalendarAddComponents(a4, a6, 0, "d", v34);
LABEL_25:
        v35 = HIDWORD(valuePtr);
        if (valuePtr < 0)
        {
          RangeOfUnit = CFCalendarGetRangeOfUnit(a4, 0x400uLL, 8uLL, *a6);
          v35 = HIDWORD(valuePtr) + LODWORD(RangeOfUnit.length);
          HIDWORD(valuePtr) += LODWORD(RangeOfUnit.length);
        }
        CFCalendarAddComponents(a4, a6, 0, "F", (v35 - 1));
        if (!a8)
          goto LABEL_47;
        goto LABEL_46;
      }
    }
  }
LABEL_45:
  if (a8)
LABEL_46:
    *a8 = 1;
LABEL_47:
  if (a9)
    *a9 = 0;
  return 1;
}

void sub_1A18621BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t getDateComponentsOffsetForUnit@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (result <= 63)
  {
    if (result > 15)
    {
      if (result != 16)
      {
        if (result != 32)
          return result;
        a3 = (_OWORD *)((char *)a3 + 24);
      }
    }
    else if (result == 4)
    {
      a3 = (_OWORD *)((char *)a3 + 8);
    }
    else
    {
      if (result != 8)
        return result;
      a3 = (_OWORD *)((char *)a3 + 4);
    }
  }
  else if (result <= 511)
  {
    if (result == 64)
    {
      a3 = (_OWORD *)((char *)a3 + 28);
    }
    else
    {
      if (result != 128)
        return result;
      a3 += 2;
    }
  }
  else
  {
    switch(result)
    {
      case 0x200:
        a3 = (_OWORD *)((char *)a3 + 36);
        break;
      case 0x2000:
        a3 += 3;
        break;
      case 0x4000:
        a3 = (_OWORD *)((char *)a3 + 52);
        break;
      default:
        return result;
    }
  }
  *(_DWORD *)a3 = a2;
  return result;
}

void resolveDateComponentsToCurrentDateForUnit(__CFCalendar *a1, const __CFLocale *a2, const __CFDate *a3, NL::DateComponents *a4, uint64_t a5, int a6)
{
  double AbsoluteTime;
  double v13;
  _OWORD v14[4];
  _OWORD v15[4];

  getCurrentDateComponents(a1, a3, v15);
  AbsoluteTime = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v15, a1, a3);
  v13 = NL::DateComponents::getAbsoluteTime(a4, a1, a3);
  if ((a6 & 1) == 0)
  {
    while (v13 > AbsoluteTime)
    {
      getDateComponentsOffsetForUnit(a5, -1, v14);
      updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v14);
      v13 = NL::DateComponents::getAbsoluteTime(a4, a1, a3);
    }
  }
  if (a6)
  {
    while (v13 < AbsoluteTime)
    {
      getDateComponentsOffsetForUnit(a5, 1, v14);
      updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v14);
      v13 = NL::DateComponents::getAbsoluteTime(a4, a1, a3);
    }
  }
}

CFAbsoluteTime NL::DateComponents::getAbsoluteTime(NL::DateComponents *this, __CFCalendar *a2, const __CFDate *a3)
{
  double CurrentTime;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFAbsoluteTime at;

  at = 0.0;
  CurrentTime = getCurrentTime((uint64_t)a3);
  v25 = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  CFCalendarDecomposeAbsoluteTime(a2, CurrentTime, "yMdwEHms", &v24, &v25, &v26, &v22, &v23, &v21, &v20, &v19);
  v6 = *((int *)this + 12);
  if ((_DWORD)v6)
  {
    v7 = *((_DWORD *)this + 9);
    if (v7 <= 1)
      v7 = 1;
    v8 = *((int *)this + 13);
    if (!(_DWORD)v8)
      v8 = v24;
    CFCalendarComposeAbsoluteTime(a2, &at, "EwYHms", (int)v7, v6, v8, *((unsigned int *)this + 6), *((unsigned int *)this + 7), *((unsigned int *)this + 8));
    return at;
  }
  v9 = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    v10 = *((int *)this + 6);
LABEL_9:
    if (v9 <= 1)
      v9 = 1;
    v11 = *((_DWORD *)this + 1);
    v12 = *((int *)this + 2);
    if (v11 <= 1)
      v11 = 1;
    if (!(_DWORD)v12)
      v12 = v24;
    CFCalendarComposeAbsoluteTime(a2, &at, "dMyHms", (int)v9, (int)v11, v12, v10, *((int *)this + 7), *((int *)this + 8));
    return at;
  }
  if (*((_DWORD *)this + 9))
  {
    at = CurrentTime;
    CFCalendarAddComponents(a2, &at, 0, "E", -v23);
    CFCalendarAddComponents(a2, &at, 0, "E", *((unsigned int *)this + 9));
    v14 = *((int *)this + 6);
    if ((_DWORD)v14)
      CFCalendarAddComponents(a2, &at, 0, "H", v14 - v21);
    v15 = *((int *)this + 7);
    if ((_DWORD)v15)
      CFCalendarAddComponents(a2, &at, 0, "m", v15 - v20);
    v16 = *((int *)this + 8);
    if ((_DWORD)v16)
      CFCalendarAddComponents(a2, &at, 0, "s", v16 - v19);
  }
  else
  {
    if (!*((_DWORD *)this + 6))
    {
      v10 = 0;
      goto LABEL_9;
    }
    v17 = v25;
    v18 = *((int *)this + 2);
    if (*((_DWORD *)this + 1))
      v17 = *((int *)this + 1);
    if (!(_DWORD)v18)
      v18 = v24;
    CFCalendarComposeAbsoluteTime(a2, &at, "dMyHms", v26, v17, v18, *((int *)this + 6), *((int *)this + 7), *((int *)this + 8));
  }
  return at;
}

unint64_t updateDateComponentsWithOffsetComponents(unint64_t result, const __CFLocale *a2, const __CFDate *a3, NL::DateComponents *this, const NL::DateComponents *a5)
{
  __CFCalendar *v8;
  char *v9;
  int v10;
  uint64_t v11;
  CFAbsoluteTime at;

  if (result)
  {
    if (a2)
    {
      v8 = (__CFCalendar *)result;
      result = NL::DateComponents::isEmpty(this);
      if ((result & 1) == 0)
      {
        result = NL::DateComponents::isEmpty(a5);
        if ((result & 1) == 0)
        {
          at = NL::DateComponents::getAbsoluteTime(this, v8, a3);
          if (*((_QWORD *)a5 + 6))
          {
            CFCalendarAddComponents(v8, &at, 0, "wY", *((unsigned int *)a5 + 12), *((unsigned int *)a5 + 13));
          }
          else
          {
            CFCalendarAddComponents(v8, &at, 0, "dMy", *(unsigned int *)a5, *((unsigned int *)a5 + 1), *((unsigned int *)a5 + 2));
            if (*((_DWORD *)a5 + 9))
              CFCalendarAddComponents(v8, &at, 0, "E", *((unsigned int *)a5 + 9), v11);
          }
          result = CFCalendarAddComponents(v8, &at, 0, "Hms", *((unsigned int *)a5 + 6), *((unsigned int *)a5 + 7), *((unsigned int *)a5 + 8));
          if (*(_DWORD *)this)
            result = CFCalendarDecomposeAbsoluteTime(v8, at, "d", this);
          if (*((_DWORD *)this + 9))
            result = CFCalendarDecomposeAbsoluteTime(v8, at, "E", (char *)this + 36);
          if (*((_DWORD *)this + 1))
            result = CFCalendarDecomposeAbsoluteTime(v8, at, "M", (char *)this + 4);
          if (*((_DWORD *)this + 2))
            result = CFCalendarDecomposeAbsoluteTime(v8, at, "y", (char *)this + 8);
          if (*((_DWORD *)this + 12))
            result = CFCalendarDecomposeAbsoluteTime(v8, at, "w", (char *)this + 48);
          if (*((_DWORD *)this + 13))
            result = CFCalendarDecomposeAbsoluteTime(v8, at, "Y", (char *)this + 52);
          if (*((_DWORD *)this + 6))
            result = CFCalendarDecomposeAbsoluteTime(v8, at, "H", (char *)this + 24);
          if (*((_DWORD *)this + 7))
            result = CFCalendarDecomposeAbsoluteTime(v8, at, "m", (char *)this + 28);
          v10 = *((_DWORD *)this + 8);
          v9 = (char *)this + 32;
          if (v10)
            return CFCalendarDecomposeAbsoluteTime(v8, at, "s", v9);
        }
      }
    }
  }
  return result;
}

void resolveDateComponentsToCurrentDate(__CFCalendar *a1, const __CFLocale *a2, const __CFDate *a3, NL::DateComponents *a4, int a5)
{
  double AbsoluteTime;
  CFAbsoluteTime v11;
  int v12;
  BOOL v13;
  _OWORD v14[4];

  getCurrentDateComponents(a1, a3, v14);
  AbsoluteTime = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v14, a1, a3);
  v11 = AbsoluteTime;
  v12 = *(_DWORD *)a4;
  if (!*((_DWORD *)a4 + 2))
  {
    v12 |= *((_DWORD *)a4 + 1);
    if (!v12)
      goto LABEL_9;
    CFCalendarDecomposeAbsoluteTime(a1, AbsoluteTime, "y", (char *)a4 + 8);
    resolveDateComponentsToCurrentDateForUnit(a1, a2, a3, a4, 4, a5);
    v12 = *(_DWORD *)a4;
  }
  if (*((_DWORD *)a4 + 1))
    v13 = 1;
  else
    v13 = v12 == 0;
  if (!v13)
  {
    CFCalendarDecomposeAbsoluteTime(a1, v11, "M", (char *)a4 + 4);
    resolveDateComponentsToCurrentDateForUnit(a1, a2, a3, a4, 4, a5);
    v12 = *(_DWORD *)a4;
  }
LABEL_9:
  if (*((_DWORD *)a4 + 9) && !v12 && !*((_DWORD *)a4 + 12))
  {
    updateDateComponentsForWeekdayWithWeekOffset(a1, a2, a3, a4, 0);
    resolveDateComponentsToCurrentDateForUnit(a1, a2, a3, a4, 512, a5);
  }
}

void updateDateComponentsForWeekdayWithWeekOffset(__CFCalendar *a1, const __CFLocale *a2, const __CFDate *a3, NL::DateComponents *this, int a5)
{
  double CurrentTime;
  double AbsoluteTime;
  CFAbsoluteTime at;

  if (a1 && a2 && !NL::DateComponents::isEmpty(this))
  {
    CurrentTime = getCurrentTime((uint64_t)a3);
    AbsoluteTime = NL::DateComponents::getAbsoluteTime(this, a1, a3);
    at = AbsoluteTime;
    CFCalendarDecomposeAbsoluteTime(a1, AbsoluteTime, "dMy", this, (char *)this + 4, (char *)this + 8);
    if (a5)
    {
      CFCalendarAddComponents(a1, &at, 0, "w", 0xFFFFFFFFLL);
      CFCalendarDecomposeAbsoluteTime(a1, at, "dMy", this, (char *)this + 4, (char *)this + 8);
      AbsoluteTime = NL::DateComponents::getAbsoluteTime(this, a1, a3);
      at = AbsoluteTime;
    }
    if (AbsoluteTime > CurrentTime)
    {
      do
      {
        CFCalendarAddComponents(a1, &at, 0, "w", 0xFFFFFFFFLL);
        CFCalendarDecomposeAbsoluteTime(a1, at, "dMy", this, (char *)this + 4, (char *)this + 8);
        at = NL::DateComponents::getAbsoluteTime(this, a1, a3);
      }
      while (at > CurrentTime);
    }
  }
}

void resolveDateComponentsToDateWithOffset(__CFCalendar *a1, const __CFLocale *a2, const __CFDate *a3, NL::DateComponents *a4, int a5, uint64_t a6, int a7)
{
  double AbsoluteTime;
  double v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  CFAbsoluteTime at;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  _OWORD v41[4];

  getCurrentDateComponents(a1, a3, v41);
  AbsoluteTime = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v41, a1, a3);
  v39 = -1;
  v40 = -1;
  v37 = -1;
  v38 = -1;
  v35 = -1;
  v36 = -1;
  v33 = -1;
  v34 = -1;
  v15 = NL::DateComponents::getAbsoluteTime(a4, a1, a3);
  at = v15;
  if (*((_DWORD *)a4 + 8))
  {
    if (a6)
    {
      CFCalendarAddComponents(a1, &at, 0, "s", a6);
      v15 = at;
    }
    CFCalendarDecomposeAbsoluteTime(a1, v15, "dMyHms", &v40, &v37, &v36, &v35, &v34, &v33);
    v16 = v36;
    v17 = v40;
    *((_DWORD *)a4 + 1) = v37;
    *((_DWORD *)a4 + 2) = v16;
    *(_DWORD *)a4 = v17;
    v18 = v34;
    *((_DWORD *)a4 + 6) = v35;
    *((_DWORD *)a4 + 7) = v18;
    *((_DWORD *)a4 + 8) = v33;
    goto LABEL_28;
  }
  if (*((_DWORD *)a4 + 7))
  {
    if (a6)
    {
      CFCalendarAddComponents(a1, &at, 0, "m", a6);
      v15 = at;
    }
    CFCalendarDecomposeAbsoluteTime(a1, v15, "dMyHm", &v40, &v37, &v36, &v35, &v34);
    v19 = v36;
    v20 = v40;
    *((_DWORD *)a4 + 1) = v37;
    *((_DWORD *)a4 + 2) = v19;
    *(_DWORD *)a4 = v20;
    v21 = v34;
    *((_DWORD *)a4 + 6) = v35;
    *((_DWORD *)a4 + 7) = v21;
    goto LABEL_28;
  }
  if (*((_DWORD *)a4 + 6))
  {
    if (a6)
    {
      CFCalendarAddComponents(a1, &at, 0, "H", a6);
      v15 = at;
    }
    CFCalendarDecomposeAbsoluteTime(a1, v15, "dMyH", &v40, &v37, &v36, &v35);
    v22 = v36;
    v23 = v40;
    *((_DWORD *)a4 + 1) = v37;
    *((_DWORD *)a4 + 2) = v22;
    *(_DWORD *)a4 = v23;
    *((_DWORD *)a4 + 6) = v35;
    goto LABEL_28;
  }
  if (*((_DWORD *)a4 + 9))
  {
    v30 = -1;
    v31 = -1;
    v29 = -1;
    CFCalendarDecomposeAbsoluteTime(a1, AbsoluteTime, "dEw", &v31, &v30, &v29);
    if (a6)
      CFCalendarAddComponents(a1, &at, 0, "w", a6);
    CFCalendarDecomposeAbsoluteTime(a1, at, "dEwy", &v40, &v39, &v38, &v36);
    if (a5)
    {
      v24 = 1;
      if (at >= AbsoluteTime && v39 != 1)
        goto LABEL_27;
    }
    else
    {
      if (at <= AbsoluteTime)
      {
LABEL_27:
        CFCalendarDecomposeAbsoluteTime(a1, at, "Ewy", &v39, &v38, &v36);
        *((_DWORD *)a4 + 9) = v39;
        v27 = v36;
        *((_DWORD *)a4 + 12) = v38;
        *((_DWORD *)a4 + 13) = v27;
        goto LABEL_28;
      }
      v24 = 0xFFFFFFFFLL;
    }
    CFCalendarAddComponents(a1, &at, 0, "w", at, v24);
    goto LABEL_27;
  }
  if (*(_DWORD *)a4)
  {
    if (a6)
    {
      CFCalendarAddComponents(a1, &at, 0, "y", a6);
      v15 = at;
    }
    CFCalendarDecomposeAbsoluteTime(a1, v15, "dMy", &v40, &v37, &v36);
    v25 = v36;
    v26 = v40;
    *((_DWORD *)a4 + 1) = v37;
    *((_DWORD *)a4 + 2) = v25;
    *(_DWORD *)a4 = v26;
  }
  else if (*((_DWORD *)a4 + 1))
  {
    v30 = -1;
    v31 = -1;
    CFCalendarDecomposeAbsoluteTime(a1, AbsoluteTime, "My", &v31, &v30);
    if (a6)
      CFCalendarAddComponents(a1, &at, 0, "y", a6);
    CFCalendarDecomposeAbsoluteTime(a1, at, "My", &v37, &v36);
    v28 = v36;
    *((_DWORD *)a4 + 1) = v37;
    *((_DWORD *)a4 + 2) = v28;
  }
  else if (*((_DWORD *)a4 + 2))
  {
    if (a6)
    {
      CFCalendarAddComponents(a1, &at, 0, "y", a6);
      v15 = at;
    }
    CFCalendarDecomposeAbsoluteTime(a1, v15, "y", &v36);
    *((_DWORD *)a4 + 2) = v36;
  }
LABEL_28:
  if (a5 && !a7 && at < AbsoluteTime)
    resolveDateComponentsToDateWithOffset(a1, a2, a3, a4, a6 != 0, 1, 1);
}

void NL::DateComponents::getFullFormat(NL::DateComponents *this@<X0>, __CFCalendar *a2@<X1>, const __CFDate *a3@<X2>, double *a4@<X3>, std::string *a5@<X8>)
{
  double CurrentTime;
  uint64_t *v11;
  int **v12;
  int *v13;
  uint64_t v14;
  int v21;
  int v22;
  _BOOL4 v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  __int128 v28;
  unsigned __int8 *v29;
  uint64_t *v30;
  _BOOL4 v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  _BOOL4 v35;
  _BOOL4 v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39[2];
  char v40;
  void *__p[2];
  char v42;
  void *v43[2];
  char v44;
  _QWORD v45[6];
  _QWORD v46[5];
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  __n128 (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t);
  void *v55;
  uint64_t v56;
  uint64_t v57;

  if (!a2 || !a4)
  {
    std::string::basic_string[abi:ne180100]<0>(a5, 0);
    return;
  }
  v50 = 0;
  v51 = &v50;
  v52 = 0x4002000000;
  v53 = __Block_byref_object_copy__5;
  v54 = __Block_byref_object_dispose__5;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v46[0] = 0;
  v46[1] = v46;
  v46[2] = 0x4002000000;
  v46[3] = __Block_byref_object_copy__24;
  v46[4] = __Block_byref_object_dispose__25;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v45[0] = MEMORY[0x1E0C809B0];
  v45[1] = 0x40000000;
  v45[2] = ___ZNK2NL14DateComponents13getFullFormatEP12__CFCalendarPK8__CFDatePd_block_invoke;
  v45[3] = &unk_1E45CF438;
  v45[4] = &v50;
  v45[5] = v46;
  NL::DateComponents::enumerate((unsigned int *)this, (uint64_t)v45);
  CurrentTime = getCurrentTime((uint64_t)a3);
  v11 = v51;
  v12 = (int **)(v51 + 5);
  if ((*((char *)v51 + 63) & 0x80000000) == 0)
  {
    v13 = (int *)(v51 + 5);
    switch(*((_BYTE *)v51 + 63))
    {
      case 1:
        if (*(_BYTE *)v12 != 100)
          goto LABEL_52;
        goto LABEL_10;
      case 5:
        if (*(_DWORD *)v12 != 1296911716 || *((_BYTE *)v51 + 44) != 77)
          goto LABEL_52;
        goto LABEL_36;
      case 6:
        if (*(_DWORD *)v12 != 1296911716 || *((_WORD *)v51 + 22) != 31053)
          goto LABEL_52;
        goto LABEL_75;
      case 7:
        goto LABEL_48;
      case 0xA:
        if (*v12 == (int *)0x4545794D4D4D4D64 && *((_WORD *)v51 + 24) == 17733)
          goto LABEL_75;
        v13 = (int *)(v51 + 5);
        if (*((_BYTE *)v51 + 63) == 7)
          goto LABEL_48;
        goto LABEL_52;
      default:
        goto LABEL_52;
    }
  }
  v14 = v51[6];
  if (v14 == 1 && *(_BYTE *)*v12 == 100)
  {
LABEL_10:
    CFCalendarComposeAbsoluteTime(a2, a4, "d", *(unsigned int *)this);
    goto LABEL_86;
  }
  if (v14 == 5)
  {
    if (**v12 == 1296911716 && *((_BYTE *)*v12 + 4) == 77)
    {
LABEL_36:
      CFCalendarComposeAbsoluteTime(a2, a4, "dM", *(unsigned int *)this, *((unsigned int *)this + 1));
      goto LABEL_86;
    }
    v14 = v51[6];
  }
  if (v14 == 6)
  {
    if (**v12 == 1296911716 && *((_WORD *)*v12 + 2) == 31053)
      goto LABEL_75;
    v14 = v51[6];
  }
  if (v14 != 10)
    goto LABEL_29;
  if (*(_QWORD *)*v12 == 0x4545794D4D4D4D64 && *((_WORD *)*v12 + 4) == 17733)
  {
LABEL_75:
    std::string::basic_string[abi:ne180100]<0>(v43, "EEEE");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    replaceAll((std::string *)(v11 + 5), (char *)v43, (uint64_t)__p);
    if (v42 < 0)
      operator delete(__p[0]);
    if (v44 < 0)
      operator delete(v43[0]);
    v27 = v51;
    std::string::basic_string[abi:ne180100]<0>(v43, "d");
    std::string::basic_string[abi:ne180100]<0>(__p, "dEEEE");
    replaceAll((std::string *)(v27 + 5), (char *)v43, (uint64_t)__p);
    if (v42 < 0)
      operator delete(__p[0]);
    if (v44 < 0)
      operator delete(v43[0]);
    CFCalendarComposeAbsoluteTime(a2, a4, "dMy", *(unsigned int *)this, *((unsigned int *)this + 1), *((unsigned int *)this + 2));
    goto LABEL_86;
  }
  v14 = v51[6];
LABEL_29:
  if (v14 != 7)
    goto LABEL_52;
  v13 = *v12;
LABEL_48:
  v21 = *v13;
  v22 = *(int *)((char *)v13 + 3);
  if (v21 != 1296911716 || v22 != 1215909197)
  {
LABEL_52:
    v24 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51 + 5, "dMMMMyHEEEE");
    v11 = v51;
    if (!v24)
    {
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51 + 5, "MMMM"))
      {
        CFCalendarComposeAbsoluteTime(a2, a4, "M", *((unsigned int *)this + 1));
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51 + 5, "MMMMy"))
      {
        CFCalendarComposeAbsoluteTime(a2, a4, "My", *((unsigned int *)this + 1), *((unsigned int *)this + 2));
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51 + 5, "y"))
      {
        CFCalendarComposeAbsoluteTime(a2, a4, "y", *((unsigned int *)this + 2));
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51 + 5, "EEEE"))
      {
        *a4 = CurrentTime;
        v43[0] = 0;
        CFCalendarDecomposeAbsoluteTime(a2, CurrentTime, "E", v43);
        CFCalendarAddComponents(a2, a4, 0, "E", -(uint64_t)v43[0]);
        CFCalendarAddComponents(a2, a4, 0, "E", *((unsigned int *)this + 9));
      }
      else
      {
        v29 = (unsigned __int8 *)v51;
        std::string::basic_string[abi:ne180100]<0>(v43, "H");
        if (startswith(v29 + 40, (unsigned __int8 *)v43))
        {
          v30 = v51;
          std::string::basic_string[abi:ne180100]<0>(__p, "EEEE");
          if (endswith(v30 + 5, (uint64_t *)__p))
          {
            v31 = 1;
          }
          else
          {
            v32 = v51;
            std::string::basic_string[abi:ne180100]<0>(v39, "EEEEwY");
            v31 = endswith(v32 + 5, (uint64_t *)v39);
            if (v40 < 0)
              operator delete(v39[0]);
          }
          if (v42 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v31 = 0;
        }
        if (v44 < 0)
          operator delete(v43[0]);
        if (v31)
        {
          *a4 = CurrentTime;
          v43[0] = 0;
          __p[0] = 0;
          v38 = 0;
          v39[0] = 0;
          CFCalendarDecomposeAbsoluteTime(a2, CurrentTime, "EHwy", v43, __p, v39, &v38);
          CFCalendarAddComponents(a2, a4, 0, "EH", -(uint64_t)v43[0], -(uint64_t)__p[0]);
          if (*((_DWORD *)this + 12))
          {
            CFCalendarAddComponents(a2, a4, 0, "w", -(uint64_t)v39[0]);
            CFCalendarAddComponents(a2, a4, 0, "w", *((unsigned int *)this + 12));
          }
          v33 = *((int *)this + 13);
          if ((_DWORD)v33)
            CFCalendarAddComponents(a2, a4, 0, "y", v33 - v38);
          CFCalendarAddComponents(a2, a4, 0, "EHms", *((unsigned int *)this + 9), *((unsigned int *)this + 6), *((unsigned int *)this + 7), *((unsigned int *)this + 8));
          MEMORY[0x1A1B0DE04](v51 + 5, "EEEEjm");
        }
        else
        {
          v34 = (unsigned __int8 *)v51;
          std::string::basic_string[abi:ne180100]<0>(v43, "H");
          v35 = startswith(v34 + 40, (unsigned __int8 *)v43);
          if (v44 < 0)
            operator delete(v43[0]);
          if (v35)
          {
            CFCalendarComposeAbsoluteTime(a2, a4, "Hms", *((unsigned int *)this + 6), *((unsigned int *)this + 7), *((unsigned int *)this + 8));
            MEMORY[0x1A1B0DE04](v51 + 5, "jm");
          }
          else
          {
            v36 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51 + 5, "wY");
            v37 = v51 + 5;
            if (v36)
            {
              MEMORY[0x1A1B0DE04](v37, "dMMMMy");
              CFCalendarComposeAbsoluteTime(a2, a4, "wY", *((unsigned int *)this + 12), *((unsigned int *)this + 13));
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v37, "EEEEwY"))
            {
              MEMORY[0x1A1B0DE04](v51 + 5, "dMMMMyEEEE");
              CFCalendarComposeAbsoluteTime(a2, a4, "EwY", *((unsigned int *)this + 9), *((unsigned int *)this + 12), *((unsigned int *)this + 13));
            }
          }
        }
      }
      goto LABEL_86;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v43, "EEEE");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll((std::string *)(v11 + 5), (char *)v43, (uint64_t)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  v25 = v51;
  std::string::basic_string[abi:ne180100]<0>(v43, "d");
  std::string::basic_string[abi:ne180100]<0>(__p, "dEEEE");
  replaceAll((std::string *)(v25 + 5), (char *)v43, (uint64_t)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  v26 = v51;
  std::string::basic_string[abi:ne180100]<0>(v43, "H");
  std::string::basic_string[abi:ne180100]<0>(__p, "j");
  replaceAll((std::string *)(v26 + 5), (char *)v43, (uint64_t)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  std::string::basic_string[abi:ne180100]<0>(v43, "y");
  updateTimeForUnit(a2, a4, 4, (uint64_t)v43, *((int *)this + 2));
  if (v44 < 0)
    operator delete(v43[0]);
  std::string::basic_string[abi:ne180100]<0>(v43, "M");
  updateTimeForUnit(a2, a4, 8, (uint64_t)v43, *((int *)this + 1));
  if (v44 < 0)
    operator delete(v43[0]);
  std::string::basic_string[abi:ne180100]<0>(v43, "d");
  updateTimeForUnit(a2, a4, 16, (uint64_t)v43, *(int *)this);
  if (v44 < 0)
    operator delete(v43[0]);
  std::string::basic_string[abi:ne180100]<0>(v43, "H");
  updateTimeForUnit(a2, a4, 32, (uint64_t)v43, *((int *)this + 6));
  if (v44 < 0)
    operator delete(v43[0]);
LABEL_86:
  if (*((char *)v51 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a5, (const std::string::value_type *)v51[5], v51[6]);
  }
  else
  {
    v28 = *(_OWORD *)(v51 + 5);
    a5->__r_.__value_.__r.__words[2] = v51[7];
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v28;
  }
  _Block_object_dispose(v46, 8);
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  _Block_object_dispose(&v50, 8);
  if (SHIBYTE(v57) < 0)
    operator delete(v55);
}

void sub_1A186397C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  uint64_t v44;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Block_object_dispose(&a38, 8);
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  _Block_object_dispose((const void *)(v44 - 144), 8);
  if (*(char *)(v44 - 81) < 0)
    operator delete(*(void **)(v44 - 104));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

__n128 __Block_byref_object_copy__24(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void NL::DateComponents::enumerate(unsigned int *a1, uint64_t a2)
{
  void *v4[2];
  char v5;
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;

  if (*a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "d");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v22, *a1);
    if (v23 < 0)
      operator delete(v22[0]);
  }
  if (a1[1])
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "MMMM");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v20, a1[1]);
    if (v21 < 0)
      operator delete(v20[0]);
  }
  if (a1[2])
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "y");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v18, a1[2]);
    if (v19 < 0)
      operator delete(v18[0]);
  }
  if (a1[6])
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "H");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v16, a1[6]);
    if (v17 < 0)
      operator delete(v16[0]);
  }
  if (a1[7])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "m");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, __p, a1[7]);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  if (a1[8])
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "s");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v12, a1[8]);
    if (v13 < 0)
      operator delete(v12[0]);
  }
  if (a1[9])
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "EEEE");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v10, a1[9]);
    if (v11 < 0)
      operator delete(v10[0]);
  }
  if (a1[12])
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "w");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v8, a1[12]);
    if (v9 < 0)
      operator delete(v8[0]);
  }
  if (a1[11])
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "W");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v6, a1[11]);
    if (v7 < 0)
      operator delete(v6[0]);
  }
  if (a1[13])
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "Y");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v4, a1[13]);
    if (v5 < 0)
      operator delete(v4[0]);
  }
}

void sub_1A1863D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void ___ZNK2NL14DateComponents13getFullFormatEP12__CFCalendarPK8__CFDatePd_block_invoke(uint64_t a1, const std::string::value_type *a2, int a3)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  _DWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;

  v5 = (std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v6 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v7 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v7 = v6;
  }
  std::string::append(v5, a2, v7);
  v8 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v9 = (char *)v8[6];
  v10 = v8[7];
  if ((unint64_t)v9 >= v10)
  {
    v12 = (char *)v8[5];
    v13 = (v9 - v12) >> 2;
    if ((unint64_t)(v13 + 1) >> 62)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v14 = v10 - (_QWORD)v12;
    v15 = (uint64_t)(v10 - (_QWORD)v12) >> 1;
    if (v15 <= v13 + 1)
      v15 = v13 + 1;
    if (v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)(v8 + 7), v16);
      v12 = (char *)v8[5];
      v9 = (char *)v8[6];
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[4 * v13];
    v19 = &v17[4 * v16];
    *(_DWORD *)v18 = a3;
    v11 = v18 + 4;
    while (v9 != v12)
    {
      v20 = *((_DWORD *)v9 - 1);
      v9 -= 4;
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }
    v8[5] = v18;
    v8[6] = v11;
    v8[7] = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_DWORD *)v9 = a3;
    v11 = v9 + 4;
  }
  v8[6] = v11;
}

uint64_t updateTimeForUnit(__CFCalendar *a1, CFAbsoluteTime *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *__p[2];
  char v11;

  if (a3 > 63)
  {
    if (a3 > 511)
    {
      if (a3 != 512)
      {
        if (a3 != 0x2000 && a3 != 0x4000)
          return resetTimeForUnit(a1, a2, a4, a5);
        std::string::basic_string[abi:ne180100]<0>(__p, "w");
        resetTimeForUnit(a1, a2, (uint64_t)__p, 1);
        if (v11 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "H");
        resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
        if (v11 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "m");
        resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
        if (v11 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "s");
        resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
        if (v11 < 0)
          operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "E");
      resetTimeForUnit(a1, a2, (uint64_t)__p, 1);
      if (v11 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "H");
      resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
      if (v11 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "m");
      resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
      if (v11 < 0)
        operator delete(__p[0]);
      goto LABEL_45;
    }
    if (a3 != 64)
    {
      if (a3 != 128)
        return resetTimeForUnit(a1, a2, a4, a5);
      goto LABEL_45;
    }
    goto LABEL_43;
  }
  if (a3 > 15)
  {
    if (a3 == 16)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "d");
      resetTimeForUnit(a1, a2, (uint64_t)__p, 1);
      if (v11 < 0)
        operator delete(__p[0]);
    }
    else if (a3 != 32)
    {
      return resetTimeForUnit(a1, a2, a4, a5);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "H");
    resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
    if (v11 < 0)
      operator delete(__p[0]);
LABEL_43:
    std::string::basic_string[abi:ne180100]<0>(__p, "m");
    resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
    if (v11 < 0)
      operator delete(__p[0]);
    goto LABEL_45;
  }
  if (a3 != 4 && a3 != 8)
    return resetTimeForUnit(a1, a2, a4, a5);
  std::string::basic_string[abi:ne180100]<0>(__p, "M");
  resetTimeForUnit(a1, a2, (uint64_t)__p, 1);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "d");
  resetTimeForUnit(a1, a2, (uint64_t)__p, 1);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "H");
  resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "m");
  resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
  if (v11 < 0)
    operator delete(__p[0]);
LABEL_45:
  std::string::basic_string[abi:ne180100]<0>(__p, "s");
  resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
  if (v11 < 0)
    operator delete(__p[0]);
  return resetTimeForUnit(a1, a2, a4, a5);
}

void sub_1A186436C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NL::DateComponents::getShortFormat(NL::DateComponents *this@<X0>, __CFCalendar *a2@<X1>, const __CFDate *a3@<X2>, double *a4@<X3>, std::string *a5@<X8>)
{
  _QWORD *v10;
  int v11;
  _WORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  _BOOL4 v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  _BOOL4 v21;
  const char *v22;
  BOOL v23;
  __int128 v24;
  _BOOL4 v25;
  _QWORD *v26;
  _BOOL4 v27;
  _QWORD *v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *__p[2];
  char v34;
  _OWORD v35[4];
  _QWORD v36[5];
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  __n128 (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  void *v42;
  uint64_t v43;
  uint64_t v44;

  if (!a2 || !a4)
  {
    std::string::basic_string[abi:ne180100]<0>(a5, 0);
    return;
  }
  v37 = 0;
  v38 = &v37;
  v39 = 0x4002000000;
  v40 = __Block_byref_object_copy__5;
  v41 = __Block_byref_object_dispose__5;
  v44 = 0;
  v42 = 0;
  v43 = 0;
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 0x40000000;
  v36[2] = ___ZNK2NL14DateComponents14getShortFormatEP12__CFCalendarPK8__CFDatePd_block_invoke;
  v36[3] = &unk_1E45CFE58;
  v36[4] = &v37;
  NL::DateComponents::enumerate((unsigned int *)this, (uint64_t)v36);
  getCurrentDateComponents(a2, a3, v35);
  *a4 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v35, a2, a3);
  v10 = v38 + 5;
  if ((*((char *)v38 + 63) & 0x80000000) == 0)
  {
    v11 = *((unsigned __int8 *)v38 + 63);
    if (v11 != 1)
    {
      if (v11 == 2)
      {
        if (*(_WORD *)v10 != 19812)
        {
          v12 = v38 + 5;
LABEL_26:
          if (*v12 != 31053)
            goto LABEL_27;
          std::string::basic_string[abi:ne180100]<0>(__p, "y");
          updateTimeForUnit(a2, a4, 4, (uint64_t)__p, *((int *)this + 2));
          if (v34 < 0)
            operator delete(__p[0]);
LABEL_45:
          std::string::basic_string[abi:ne180100]<0>(__p, "M");
          updateTimeForUnit(a2, a4, 8, (uint64_t)__p, *((int *)this + 1));
          goto LABEL_80;
        }
LABEL_36:
        std::string::basic_string[abi:ne180100]<0>(__p, "M");
        updateTimeForUnit(a2, a4, 8, (uint64_t)__p, *((int *)this + 1));
        if (v34 < 0)
          operator delete(__p[0]);
        goto LABEL_38;
      }
      goto LABEL_27;
    }
    v15 = *(unsigned __int8 *)v10;
    if (v15 == 77)
      goto LABEL_45;
    if (v15 != 121)
    {
      if (v15 != 100)
        goto LABEL_27;
      goto LABEL_38;
    }
    goto LABEL_18;
  }
  v13 = v38[6];
  if (v13 == 1)
  {
    v14 = *(unsigned __int8 *)*v10;
    switch(v14)
    {
      case 'M':
        goto LABEL_45;
      case 'd':
LABEL_38:
        std::string::basic_string[abi:ne180100]<0>(__p, "d");
        updateTimeForUnit(a2, a4, 16, (uint64_t)__p, *(int *)this);
        goto LABEL_80;
      case 'y':
LABEL_18:
        std::string::basic_string[abi:ne180100]<0>(__p, "y");
        updateTimeForUnit(a2, a4, 4, (uint64_t)__p, *((int *)this + 2));
        goto LABEL_80;
    }
    v13 = v38[6];
  }
  if (v13 == 2)
  {
    if (*(_WORD *)*v10 == 19812)
      goto LABEL_36;
    if (v38[6] == 2)
    {
      v12 = (_WORD *)*v10;
      goto LABEL_26;
    }
  }
LABEL_27:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, "dMy")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38 + 5, "dMyE"))
  {
    MEMORY[0x1A1B0DE04](v38 + 5, "dMy");
    std::string::basic_string[abi:ne180100]<0>(__p, "y");
    updateTimeForUnit(a2, a4, 4, (uint64_t)__p, *((int *)this + 2));
    if (v34 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "M");
    updateTimeForUnit(a2, a4, 8, (uint64_t)__p, *((int *)this + 1));
    if (v34 < 0)
      operator delete(__p[0]);
    goto LABEL_38;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38 + 5, "E"))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "E");
    updateTimeForUnit(a2, a4, 512, (uint64_t)__p, *((int *)this + 9));
    goto LABEL_80;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38 + 5, "HE"))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "E");
    updateTimeForUnit(a2, a4, 512, (uint64_t)__p, *((int *)this + 9));
    if (v34 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "H");
    updateTimeForUnit(a2, a4, 32, (uint64_t)__p, *((int *)this + 6));
    goto LABEL_80;
  }
  v16 = (unsigned __int8 *)v38;
  std::string::basic_string[abi:ne180100]<0>(__p, "H");
  if (startswith(v16 + 40, (unsigned __int8 *)__p))
  {
    v17 = 1;
  }
  else
  {
    v18 = (unsigned __int8 *)v38;
    std::string::basic_string[abi:ne180100]<0>(v31, "m");
    if (startswith(v18 + 40, (unsigned __int8 *)v31))
    {
      v17 = 1;
    }
    else
    {
      v19 = (unsigned __int8 *)v38;
      std::string::basic_string[abi:ne180100]<0>(v29, "s");
      v17 = startswith(v19 + 40, (unsigned __int8 *)v29);
      if (v30 < 0)
        operator delete(v29[0]);
    }
    if (v32 < 0)
      operator delete(v31[0]);
  }
  if (v34 < 0)
    operator delete(__p[0]);
  v20 = v38;
  if (v17)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "s");
    v21 = endswith(v20 + 5, (uint64_t *)__p);
    if (v34 < 0)
      operator delete(__p[0]);
    if (v21)
      v22 = "Hms";
    else
      v22 = "Hma";
    MEMORY[0x1A1B0DE04](v38 + 5, v22);
    std::string::basic_string[abi:ne180100]<0>(__p, "h");
    updateTimeForUnit(a2, a4, 32, (uint64_t)__p, *((int *)this + 6));
    if (v34 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "m");
    updateTimeForUnit(a2, a4, 64, (uint64_t)__p, *((int *)this + 7));
    if (v34 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "s");
    updateTimeForUnit(a2, a4, 128, (uint64_t)__p, *((int *)this + 8));
    goto LABEL_80;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dMyH");
  if (startswith((unsigned __int8 *)v20 + 40, (unsigned __int8 *)__p))
  {
    if (v34 < 0)
      operator delete(__p[0]);
LABEL_73:
    MEMORY[0x1A1B0DE04](v38 + 5, "dMyjm");
    std::string::basic_string[abi:ne180100]<0>(__p, "y");
    updateTimeForUnit(a2, a4, 4, (uint64_t)__p, *((int *)this + 2));
    if (v34 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "M");
    updateTimeForUnit(a2, a4, 8, (uint64_t)__p, *((int *)this + 1));
    if (v34 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "d");
    updateTimeForUnit(a2, a4, 16, (uint64_t)__p, *(int *)this);
    if (v34 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "H");
    updateTimeForUnit(a2, a4, 32, (uint64_t)__p, *((int *)this + 6));
    goto LABEL_80;
  }
  v23 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38 + 5, "dMyHE");
  if (v34 < 0)
    operator delete(__p[0]);
  if (v23)
    goto LABEL_73;
  v25 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38 + 5, "w");
  v26 = v38 + 5;
  if (v25)
  {
    MEMORY[0x1A1B0DE04](v26, "dMy");
    std::string::basic_string[abi:ne180100]<0>(__p, "w");
    updateTimeForUnit(a2, a4, 0x2000, (uint64_t)__p, *((int *)this + 12));
LABEL_80:
    if (v34 < 0)
      operator delete(__p[0]);
    goto LABEL_82;
  }
  v27 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v26, "wY");
  v28 = v38 + 5;
  if (v27)
  {
    MEMORY[0x1A1B0DE04](v28, "dMy");
    std::string::basic_string[abi:ne180100]<0>(__p, "Y");
    updateTimeForUnit(a2, a4, 0x4000, (uint64_t)__p, *((int *)this + 13));
    if (v34 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "w");
    updateTimeForUnit(a2, a4, 0x2000, (uint64_t)__p, *((int *)this + 12));
    goto LABEL_80;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v28, "EwY"))
  {
    MEMORY[0x1A1B0DE04](v38 + 5, "dMy");
    std::string::basic_string[abi:ne180100]<0>(__p, "Y");
    updateTimeForUnit(a2, a4, 0x4000, (uint64_t)__p, *((int *)this + 13));
    if (v34 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "w");
    updateTimeForUnit(a2, a4, 0x2000, (uint64_t)__p, *((int *)this + 12));
    if (v34 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "E");
    updateTimeForUnit(a2, a4, 512, (uint64_t)__p, *((int *)this + 9));
    goto LABEL_80;
  }
LABEL_82:
  if (*((char *)v38 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a5, (const std::string::value_type *)v38[5], v38[6]);
  }
  else
  {
    v24 = *(_OWORD *)(v38 + 5);
    a5->__r_.__value_.__r.__words[2] = v38[7];
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v24;
  }
  _Block_object_dispose(&v37, 8);
  if (SHIBYTE(v44) < 0)
    operator delete(v42);
}

void sub_1A1864D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  _Block_object_dispose((const void *)(v26 - 128), 8);
  if (*(char *)(v26 - 65) < 0)
    operator delete(*(void **)(v26 - 88));
  _Unwind_Resume(a1);
}

void ___ZNK2NL14DateComponents14getShortFormatEP12__CFCalendarPK8__CFDatePd_block_invoke(uint64_t a1, std::string::value_type *a2)
{
  if (a2[23] < 0)
    a2 = *(std::string::value_type **)a2;
  std::string::push_back((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *a2);
}

void NL::DatePeriod::setCalendarWithIdentifier(const void **this, const __CFString *a2)
{
  const void **v3;
  CFCalendarRef v4;

  v3 = this + 1;
  nlp::CFScopedPtr<__CFCalendar *>::reset(this + 1, 0);
  if (a2)
  {
    v4 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    nlp::CFScopedPtr<__CFCalendar *>::reset(v3, v4);
  }
}

void NL::DatePeriod::setDisplayKey(const void **this, const __CFString *a2)
{
  CFTypeRef v4;

  nlp::CFScopedPtr<__CFString const*>::reset(this, 0);
  if (a2)
  {
    v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFString const*>::reset(this, v4);
  }
}

void NL::DatePeriod::setCurrentDate(const void **this, const __CFDate *a2)
{
  const void **v3;
  CFTypeRef v4;

  v3 = this + 28;
  nlp::CFScopedPtr<__CFDate const*>::reset(this + 28, 0);
  if (a2)
  {
    v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFDate const*>::reset(v3, v4);
  }
}

void NL::DatePeriod::setLocale(const void **this, const __CFLocale *a2)
{
  const void **v3;
  CFTypeRef v4;

  v3 = this + 2;
  nlp::CFScopedPtr<__CFLocale const*>::reset(this + 2, 0);
  if (a2)
  {
    v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFLocale const*>::reset(v3, v4);
  }
}

BOOL NL::DatePeriod::updateAmbiguousDateComponents(NL::DatePeriod *this, NL::DateComponents *a2, NL::DateComponents *a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  result = NL::DateComponents::isTime(a2);
  if (result)
  {
    v6 = *((_DWORD *)a2 + 6);
    if (v6)
    {
      if (v6 <= 8)
        *((_DWORD *)a2 + 6) = v6 + 12;
      result = NL::DateComponents::isTime(a3);
      if (result)
      {
        v7 = *((_DWORD *)a3 + 6);
        if (v7)
        {
          if (v7 <= 8)
            *((_DWORD *)a3 + 6) = v7 + 12;
        }
      }
    }
  }
  return result;
}

BOOL NL::DateComponents::isTime(NL::DateComponents *this)
{
  return (*((_DWORD *)this + 6) || *((_DWORD *)this + 7) || *((_DWORD *)this + 8) || *((_DWORD *)this + 4))
      && !NL::DateComponents::hasDate(this);
}

double NL::DatePeriod::resolveDateComponents(NL::DatePeriod *this, NL::DateComponents *a2, NL::DateComponents *a3, int a4, int a5)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __CFCalendar *v13;
  const __CFLocale *v14;
  const __CFDate *v15;
  NL::DateComponents *v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v7 = *(_OWORD *)((char *)this + 44);
  v27 = *(_OWORD *)((char *)this + 28);
  v28 = v7;
  v8 = *(_OWORD *)((char *)this + 76);
  v29 = *(_OWORD *)((char *)this + 60);
  v30 = v8;
  v9 = *(_OWORD *)((char *)this + 108);
  v23 = *(_OWORD *)((char *)this + 92);
  v24 = v9;
  v10 = *(_OWORD *)((char *)this + 140);
  v25 = *(_OWORD *)((char *)this + 124);
  v26 = v10;
  if (*((_DWORD *)this + 6) > 0x28u)
    goto LABEL_16;
  if (a5)
    NL::DatePeriod::updateAmbiguousDateComponents(this, (NL::DateComponents *)&v27, (NL::DateComponents *)&v23);
  if (NL::DateComponents::isEmpty((NL::DateComponents *)&v23))
  {
    if (a4 != 7)
    {
      if (a4 == 5)
      {
        v13 = (__CFCalendar *)*((_QWORD *)this + 1);
        v14 = (const __CFLocale *)*((_QWORD *)this + 2);
        v15 = (const __CFDate *)*((_QWORD *)this + 28);
        v16 = (NL::DateComponents *)&v27;
        v17 = 1;
        goto LABEL_15;
      }
      if (a4 == 4)
      {
        v23 = v27;
        v24 = v28;
        v25 = v29;
        v26 = v30;
        v27 = 0u;
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        v13 = (__CFCalendar *)*((_QWORD *)this + 1);
        v14 = (const __CFLocale *)*((_QWORD *)this + 2);
        v15 = (const __CFDate *)*((_QWORD *)this + 28);
        v16 = (NL::DateComponents *)&v23;
        v17 = -1;
LABEL_15:
        updateDateComponentsWithOffset(v13, v14, v15, v16, v17);
        goto LABEL_16;
      }
      goto LABEL_16;
    }
LABEL_12:
    v23 = v27;
    v24 = v28;
    v25 = v29;
    v26 = v30;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    goto LABEL_16;
  }
  if ((a4 - 5) < 2)
  {
    v27 = v23;
    v28 = v24;
    v29 = v25;
    v30 = v26;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    goto LABEL_16;
  }
  if (a4 == 7 || a4 == 4)
    goto LABEL_12;
LABEL_16:
  v18 = v28;
  *(_OWORD *)a2 = v27;
  *((_OWORD *)a2 + 1) = v18;
  v19 = v30;
  *((_OWORD *)a2 + 2) = v29;
  *((_OWORD *)a2 + 3) = v19;
  v20 = v24;
  *(_OWORD *)a3 = v23;
  *((_OWORD *)a3 + 1) = v20;
  result = *(double *)&v25;
  v22 = v26;
  *((_OWORD *)a3 + 2) = v25;
  *((_OWORD *)a3 + 3) = v22;
  return result;
}

BOOL NL::DateComponents::isEmpty(NL::DateComponents *this)
{
  return !NL::DateComponents::hasDate(this)
      && !*((_DWORD *)this + 6)
      && !*((_DWORD *)this + 7)
      && !*((_DWORD *)this + 8)
      && *((_DWORD *)this + 4) == 0;
}

unint64_t updateDateComponentsWithOffset(__CFCalendar *a1, const __CFLocale *a2, const __CFDate *a3, NL::DateComponents *a4, int a5)
{
  _OWORD v6[4];

  memset(v6, 0, sizeof(v6));
  if (*((_DWORD *)a4 + 8))
  {
    memset(v6, 0, 32);
    LODWORD(v6[2]) = a5;
    memset((char *)&v6[2] + 4, 0, 24);
LABEL_3:
    HIDWORD(v6[3]) = 0;
    return updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v6);
  }
  if (*((_DWORD *)a4 + 7))
  {
    memset(v6, 0, 28);
    HIDWORD(v6[1]) = a5;
    memset(&v6[2], 0, 32);
    return updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v6);
  }
  if (*((_DWORD *)a4 + 6))
  {
    memset(v6, 0, 24);
    DWORD2(v6[1]) = a5;
LABEL_9:
    *(_OWORD *)((char *)&v6[1] + 12) = 0uLL;
    *(_OWORD *)((char *)&v6[2] + 12) = 0uLL;
    goto LABEL_3;
  }
  if (*((_DWORD *)a4 + 9))
  {
    memset(v6, 0, 36);
    DWORD1(v6[2]) = a5;
    memset((char *)&v6[2] + 8, 0, 24);
    return updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v6);
  }
  if (*(_DWORD *)a4)
  {
    LODWORD(v6[0]) = a5;
    *(_OWORD *)((char *)v6 + 4) = 0uLL;
    *(_OWORD *)((char *)&v6[1] + 4) = 0uLL;
    *(_OWORD *)((char *)&v6[2] + 4) = 0uLL;
    v6[3] = 0uLL;
    return updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v6);
  }
  if (*((_DWORD *)a4 + 1))
  {
    DWORD1(v6[0]) = a5;
    *(_OWORD *)((char *)v6 + 8) = 0uLL;
    *(_OWORD *)((char *)&v6[1] + 8) = 0uLL;
    *(_OWORD *)((char *)&v6[2] + 8) = 0uLL;
    *((_QWORD *)&v6[3] + 1) = 0;
    return updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v6);
  }
  if (*((_DWORD *)a4 + 2))
  {
    DWORD2(v6[0]) = a5;
    *(_OWORD *)((char *)v6 + 12) = 0uLL;
    goto LABEL_9;
  }
  if (*((_DWORD *)a4 + 12))
  {
    memset(v6, 0, 48);
    LODWORD(v6[3]) = a5;
    *(_QWORD *)((char *)&v6[3] + 4) = 0;
    goto LABEL_3;
  }
  if (*((_DWORD *)a4 + 13))
  {
    memset(v6, 0, 52);
    DWORD1(v6[3]) = a5;
  }
  return updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v6);
}

double NL::DatePeriod::resolveDateComponentsAsRange(NL::DatePeriod *this, NL::DateComponents *a2, NL::DateComponents *a3, int a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v8 = *(_OWORD *)((char *)this + 44);
  v22 = *(_OWORD *)((char *)this + 28);
  v23 = v8;
  v9 = *(_OWORD *)((char *)this + 76);
  v24 = *(_OWORD *)((char *)this + 60);
  v25 = v9;
  v10 = *(_OWORD *)((char *)this + 108);
  v18 = *(_OWORD *)((char *)this + 92);
  v19 = v10;
  v11 = *(_OWORD *)((char *)this + 140);
  v20 = *(_OWORD *)((char *)this + 124);
  v21 = v11;
  if (!NL::DateComponents::isEmpty((NL::DateComponents *)&v18))
  {
    if (a4 != 7)
    {
      if (a4 == 6)
      {
        v12 = &v18;
        goto LABEL_9;
      }
      if (a4 != 4)
      {
LABEL_13:
        updateDateComponentsWithOffset(*((__CFCalendar **)this + 1), *((const __CFLocale **)this + 2), *((const __CFDate **)this + 28), (NL::DateComponents *)&v18, 1);
        goto LABEL_14;
      }
    }
    v18 = v22;
    v19 = v23;
    v20 = v24;
    v21 = v25;
    v12 = &v22;
LABEL_9:
    v12[2] = 0u;
    v12[3] = 0u;
    *v12 = 0u;
    v12[1] = 0u;
    goto LABEL_13;
  }
  v18 = v22;
  v19 = v23;
  v20 = v24;
  v21 = v25;
  updateDateComponentsWithOffset(*((__CFCalendar **)this + 1), *((const __CFLocale **)this + 2), *((const __CFDate **)this + 28), (NL::DateComponents *)&v18, 1);
  switch(a4)
  {
    case 4:
      v18 = v22;
      v19 = v23;
      v20 = v24;
      v21 = v25;
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      break;
    case 5:
      v22 = v18;
      v23 = v19;
      v24 = v20;
      v25 = v21;
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      break;
    case 6:
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      break;
    case 7:
      v18 = v22;
      v19 = v23;
      v20 = v24;
      v21 = v25;
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      goto LABEL_13;
    default:
      break;
  }
LABEL_14:
  v13 = v23;
  *(_OWORD *)a2 = v22;
  *((_OWORD *)a2 + 1) = v13;
  v14 = v25;
  *((_OWORD *)a2 + 2) = v24;
  *((_OWORD *)a2 + 3) = v14;
  v15 = v19;
  *(_OWORD *)a3 = v18;
  *((_OWORD *)a3 + 1) = v15;
  result = *(double *)&v20;
  v17 = v21;
  *((_OWORD *)a3 + 2) = v20;
  *((_OWORD *)a3 + 3) = v17;
  return result;
}

_QWORD *NL::DateConverter::DateConverter(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

CFIndex NL::DateConverter::datePeriodForValues@<X0>(CFIndex this@<X0>, CFStringRef theString@<X1>, const __CFDictionary *a3@<X2>, uint64_t *a4@<X8>)
{
  const __CFDate ***v7;
  uint64_t v8;
  char updated;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int HasPrefix;
  const __CFLocale *v14;

  if (!theString || (v7 = (const __CFDate ***)this, this = CFStringGetLength(theString), !a3) || !this)
  {
    *a4 = 0;
    return this;
  }
  v8 = operator new();
  NL::DatePeriod::DatePeriod((NL::DatePeriod *)v8);
  NL::DatePeriod::setCurrentDate((const void **)v8, **v7);
  NL::DatePeriod::setLocale((const void **)v8, (*v7)[1]);
  if (CFStringsAreEqual(theString, CFSTR("CalendarTime")))
  {
    updated = NL::DateConverter::updatePeriodForCalendarTime(v7, (*v7)[1], a3, CFSTR("Time"), (NL::DatePeriod *)v8);
    goto LABEL_6;
  }
  if (CFStringsAreEqual(theString, CFSTR("AmbiguousCalendarTime")))
  {
    v10 = NL::DateConverter::updatePeriodForCalendarTime(v7, (*v7)[1], a3, CFSTR("Ambiguoustime"), (NL::DatePeriod *)v8);
    goto LABEL_11;
  }
  if (CFStringsAreEqual(theString, CFSTR("CalendarDate")))
  {
    updated = NL::DateConverter::updatePeriodForCalendarDate(v7, (*v7)[1], a3, CFSTR("Date"), (NL::DatePeriod *)v8);
  }
  else
  {
    if (CFStringsAreEqual(theString, CFSTR("AmbiguousCalendarDate")))
    {
      v10 = NL::DateConverter::updatePeriodForCalendarDate(v7, (*v7)[1], a3, CFSTR("Ambiguousdate"), (NL::DatePeriod *)v8);
LABEL_11:
      if (v10)
      {
        *(_BYTE *)(v8 + 240) = 1;
        goto LABEL_13;
      }
LABEL_22:
      *a4 = 0;
      NL::DatePeriod::~DatePeriod((const void **)v8);
      return MEMORY[0x1A1B0E068]();
    }
    if (CFStringHasPrefix(theString, CFSTR("FormattedDate")))
    {
      updated = NL::DateConverter::updatePeriodForFormattedDate((NL::DateConverter *)v7, (*v7)[1], a3, (NL::DatePeriod *)v8);
    }
    else
    {
      if (CFStringHasPrefix(theString, CFSTR("FormattedTime")))
      {
        if (NL::DateConverter::updatePeriodForFormattedDate((NL::DateConverter *)v7, (*v7)[1], a3, (NL::DatePeriod *)v8))
        {
          *(_DWORD *)(v8 + 24) = 39;
          goto LABEL_13;
        }
        goto LABEL_22;
      }
      if (CFStringHasPrefix(theString, CFSTR("HolidayCompound")))
      {
        updated = NL::DateConverter::updatePeriodForHolidayCompoundDate((uint64_t **)v7, (*v7)[1], a3, (NL::DatePeriod *)v8);
      }
      else if (CFStringHasPrefix(theString, CFSTR("HolidayRelative")))
      {
        updated = NL::DateConverter::updatePeriodForHolidayRelativeDate(v7, (*v7)[1], a3, theString, (NL::DatePeriod *)v8);
      }
      else if (CFStringHasPrefix(theString, CFSTR("Holiday")))
      {
        updated = NL::DateConverter::updatePeriodForHolidayDate(v7, (*v7)[1], a3, (NL::DatePeriod *)v8);
      }
      else if (CFStringHasPrefix(theString, CFSTR("Compound")))
      {
        updated = NL::DateConverter::updatePeriodForValueCompoundDate((NL::DateConverter *)v7, (*v7)[1], a3, (const void **)v8);
      }
      else if (CFStringHasPrefix(theString, CFSTR("Relative")))
      {
        updated = NL::DateConverter::updatePeriodForRelativeCompoundDate((NL::DateConverter *)v7, theString, (*v7)[1], a3, (NL::DatePeriod *)v8);
      }
      else if (CFStringHasPrefix(theString, CFSTR("EveryNum")))
      {
        updated = NL::DateConverter::updatePeriodForOrdinalNumDate((uint64_t **)v7, theString, (*v7)[1], a3, (NL::DatePeriod *)v8);
      }
      else
      {
        HasPrefix = CFStringHasPrefix(theString, CFSTR("Every"));
        v14 = (*v7)[1];
        if (!HasPrefix)
        {
          if (!NL::DateConverter::updatePeriodForValueDate(v7, theString, v14, a3, (NL::DatePeriod *)v8))
            goto LABEL_22;
          goto LABEL_13;
        }
        updated = NL::DateConverter::updatePeriodForOrdinalDate((NL::DateConverter *)v7, theString, v14, a3, (NL::DatePeriod *)v8);
      }
    }
  }
LABEL_6:
  if ((updated & 1) == 0)
    goto LABEL_22;
LABEL_13:
  this = NL::DateConverter::updatePeriodForAppContext((uint64_t)v7, *((_DWORD *)*v7 + 10), v8);
  if (!(_DWORD)this)
    goto LABEL_22;
  v11 = *((_DWORD *)*v7 + 10);
  if (v11 <= 8)
  {
    v12 = *(_DWORD *)(v8 + 24);
    if (((1 << v11) & 0x1DE) != 0 && (v12 - 43 < 9 || v12 - 11 < 0xC || v12 - 29 < 5))
      goto LABEL_22;
    if (v11 == 5 && v12 <= 0x25 && ((1 << v12) & 0x3C078007C0) != 0)
      goto LABEL_22;
  }
  *a4 = v8;
  return this;
}

void sub_1A18659A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1B0E068](v1, 0x1060C407A40A00CLL);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForCalendarTime(const __CFDictionary ***this, const __CFLocale *a2, CFDictionaryRef theDict, const __CFString *a4, NL::DatePeriod *a5)
{
  uint64_t Value;
  __CFCalendar *v11;
  __CFCalendar *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  BOOL v17;
  int v18;
  CFStringRef v19;
  CFStringRef v20;
  const __CFDictionary *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  const __CFString *v40;
  __CFCalendar *v41;

  Value = 0;
  if (!a2)
    return Value;
  if (!theDict)
    return Value;
  if (!a4)
    return Value;
  Value = (uint64_t)CFDictionaryGetValue(theDict, CFSTR("CalendarSystem"));
  if (!Value)
    return Value;
  v11 = copyCurrentCalendar((uint64_t)a2);
  v41 = v11;
  if (!v11)
    return 0;
  v12 = v11;
  v13 = (const __CFString *)MEMORY[0x1A1B0D42C]();
  if (!CFStringHasPrefix((CFStringRef)Value, CFSTR("generic"))
    && CFStringFind((CFStringRef)Value, v13, 0).location == -1)
  {
    Value = 0;
LABEL_51:
    CFRelease(v12);
    return Value;
  }
  v40 = 0;
  v14 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  v15 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
  v16 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
  if (!NL::ParserContext::regionValidForLanguage((NL::ParserContext *)*this, v14, v16, v15))
    v15 = (const __CFString *)NL::ParserContext::canonicalRegionForLanguage(*this, v14, v16);
  if (v14)
    v17 = v16 == 0;
  else
    v17 = 1;
  v18 = !v17;
  if (!v17 && v15)
  {
    v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@_%@_%@_%@_%@"), a4, Value, v14, v16, v15);
    goto LABEL_23;
  }
  if (v14 && v15)
  {
    v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@_%@_%@_%@"), a4, Value, v14, v15);
LABEL_23:
    v40 = v19;
    if (!v19)
      goto LABEL_47;
    goto LABEL_32;
  }
  if (v18)
  {
    v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@_%@_%@_%@"), a4, Value, v14, v16);
  }
  else
  {
    if (!v14)
      goto LABEL_31;
    v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@_%@_%@"), a4, Value, v14);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v40, v20);
LABEL_31:
  v19 = v40;
  if (!v40)
  {
LABEL_47:
    Value = 0;
    goto LABEL_48;
  }
LABEL_32:
  v21 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v19);
  if (!v21)
    goto LABEL_47;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v22 = (std::__shared_weak_count *)this[1];
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  Value = updateDateComponentsWithValues((SInt32 *)&v36, (uint64_t)a2, v21, 0);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if ((Value & 1) != 0)
  {
    v27 = v37;
    *(_OWORD *)((char *)a5 + 28) = v36;
    *(_OWORD *)((char *)a5 + 44) = v27;
    v28 = v39;
    *(_OWORD *)((char *)a5 + 60) = v38;
    *(_OWORD *)((char *)a5 + 76) = v28;
    v29 = v33;
    *(_OWORD *)((char *)a5 + 92) = v32;
    *(_OWORD *)((char *)a5 + 108) = v29;
    v30 = v35;
    *(_OWORD *)((char *)a5 + 124) = v34;
    *(_OWORD *)((char *)a5 + 140) = v30;
    if (NL::DateComponents::isTime((NL::DateComponents *)&v36)
      && NL::DateComponents::isEmpty((NL::DateComponents *)&v32)
      && !CFDictionaryContainsKey(v21, CFSTR("a")))
    {
      *((_BYTE *)a5 + 240) = 1;
    }
    NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
    *((_DWORD *)a5 + 6) = 39;
    NL::DatePeriod::setCalendarWithIdentifier((const void **)a5, v13);
  }
LABEL_48:
  if (v40)
    CFRelease(v40);
  v12 = v41;
  if (v41)
    goto LABEL_51;
  return Value;
}

void sub_1A1865D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v7 - 104), 0);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)(v7 - 96), 0);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForCalendarDate(const __CFDictionary ***this, const __CFLocale *a2, CFDictionaryRef theDict, const __CFString *a4, NL::DatePeriod *a5)
{
  uint64_t Value;
  __CFCalendar *v11;
  __CFCalendar *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  BOOL v17;
  int v18;
  CFStringRef v19;
  CFStringRef v20;
  const __CFDictionary *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  const __CFString *v40;
  __CFCalendar *v41;

  Value = 0;
  if (!a2)
    return Value;
  if (!theDict)
    return Value;
  Value = (uint64_t)CFDictionaryGetValue(theDict, CFSTR("CalendarSystem"));
  if (!Value)
    return Value;
  v11 = copyCurrentCalendar((uint64_t)a2);
  v41 = v11;
  if (!v11)
    return 0;
  v12 = v11;
  v13 = (const __CFString *)MEMORY[0x1A1B0D42C]();
  if (!CFStringHasPrefix((CFStringRef)Value, CFSTR("generic"))
    && CFStringFind((CFStringRef)Value, v13, 0).location == -1)
  {
    Value = 0;
LABEL_50:
    CFRelease(v12);
    return Value;
  }
  v40 = 0;
  v14 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  v15 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
  v16 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
  if (!NL::ParserContext::regionValidForLanguage((NL::ParserContext *)*this, v14, v16, v15))
    v15 = (const __CFString *)NL::ParserContext::canonicalRegionForLanguage(*this, v14, v16);
  if (v14)
    v17 = v16 == 0;
  else
    v17 = 1;
  v18 = !v17;
  if (!v17 && v15)
  {
    v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@_%@_%@_%@_%@"), a4, Value, v14, v16, v15);
    goto LABEL_22;
  }
  if (v14 && v15)
  {
    v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@_%@_%@_%@"), a4, Value, v14, v15);
LABEL_22:
    v40 = v19;
    if (!v19)
      goto LABEL_46;
    goto LABEL_31;
  }
  if (v18)
  {
    v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@_%@_%@_%@"), a4, Value, v14, v16);
  }
  else
  {
    if (!v14)
      goto LABEL_30;
    v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@_%@_%@"), a4, Value, v14);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v40, v20);
LABEL_30:
  v19 = v40;
  if (!v40)
  {
LABEL_46:
    Value = 0;
    goto LABEL_47;
  }
LABEL_31:
  v21 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v19);
  if (!v21)
    goto LABEL_46;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v22 = (std::__shared_weak_count *)this[1];
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  Value = updateDateComponentsWithValues((SInt32 *)&v36, (uint64_t)a2, v21, 0);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if ((Value & 1) != 0)
  {
    v27 = v37;
    *(_OWORD *)((char *)a5 + 28) = v36;
    *(_OWORD *)((char *)a5 + 44) = v27;
    v28 = v39;
    *(_OWORD *)((char *)a5 + 60) = v38;
    *(_OWORD *)((char *)a5 + 76) = v28;
    v29 = v33;
    *(_OWORD *)((char *)a5 + 92) = v32;
    *(_OWORD *)((char *)a5 + 108) = v29;
    v30 = v35;
    *(_OWORD *)((char *)a5 + 124) = v34;
    *(_OWORD *)((char *)a5 + 140) = v30;
    if (NL::DateComponents::isTime((NL::DateComponents *)&v36)
      && NL::DateComponents::isEmpty((NL::DateComponents *)&v32)
      && !CFDictionaryContainsKey(v21, CFSTR("a")))
    {
      *((_BYTE *)a5 + 240) = 1;
    }
    NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
    *((_DWORD *)a5 + 6) = 38;
    NL::DatePeriod::setCalendarWithIdentifier((const void **)a5, v13);
  }
LABEL_47:
  if (v40)
    CFRelease(v40);
  v12 = v41;
  if (v41)
    goto LABEL_50;
  return Value;
}

void sub_1A186616C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)va);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v7 - 104), 0);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)(v7 - 96), 0);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForFormattedDate(NL::DateConverter *this, const __CFLocale *a2, CFDictionaryRef theDict, NL::DatePeriod *a4)
{
  uint64_t updated;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  updated = 0;
  if (a2 && theDict)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    updated = updateDateComponentsWithValues((SInt32 *)&v21, (uint64_t)a2, theDict, 0);
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if ((updated & 1) != 0)
    {
      v12 = v22;
      *(_OWORD *)((char *)a4 + 28) = v21;
      *(_OWORD *)((char *)a4 + 44) = v12;
      v13 = v24;
      *(_OWORD *)((char *)a4 + 60) = v23;
      *(_OWORD *)((char *)a4 + 76) = v13;
      v14 = v18;
      *(_OWORD *)((char *)a4 + 92) = v17;
      *(_OWORD *)((char *)a4 + 108) = v14;
      v15 = v20;
      *(_OWORD *)((char *)a4 + 124) = v19;
      *(_OWORD *)((char *)a4 + 140) = v15;
      if (NL::DateComponents::isTime((NL::DateComponents *)&v21)
        && NL::DateComponents::isEmpty((NL::DateComponents *)&v17)
        && !CFDictionaryContainsKey(theDict, CFSTR("a")))
      {
        *((_BYTE *)a4 + 240) = 1;
      }
      NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("FORMATTED"));
      *((_DWORD *)a4 + 6) = 38;
      NL::DatePeriod::setCalendarWithIdentifier((const void **)a4, CFSTR("gregorian"));
    }
  }
  return updated;
}

void sub_1A186630C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForHolidayCompoundDate(uint64_t **this, const __CFLocale *a2, CFDictionaryRef theDict, NL::DatePeriod *a4)
{
  uint64_t result;
  CFIndex Count;
  unint64_t v10;
  const void **v11;
  size_t v12;
  uint64_t v13;
  const __CFString *v14;
  const __CFDictionary *Value;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char updated;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  __int128 v27;
  const __CFDictionary *v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t *v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  result = 0;
  v43 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (theDict)
    {
      result = CFDictionaryContainsKey(theDict, CFSTR("HolidayDate"));
      if ((_DWORD)result)
      {
        Count = CFDictionaryGetCount(theDict);
        v32 = &v29;
        MEMORY[0x1E0C80A78]();
        v11 = (const void **)((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
        if (v10 >= 0x200)
          v12 = 512;
        else
          v12 = v10;
        bzero((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
        CFDictionaryGetKeysAndValues(theDict, v11, 0);
        if (Count >= 1)
        {
          v13 = 0;
          v31 = (_OWORD *)((char *)a4 + 28);
          v30 = (_OWORD *)((char *)a4 + 92);
          do
          {
            v14 = (const __CFString *)v11[v13];
            if (!CFStringHasPrefix(v14, CFSTR("HolidayDate")))
            {
              if (CFStringHasPrefix(v14, CFSTR("Relative")))
              {
                NL::DateConverter::updatePeriodForRelativeDate(this, v14, a2, a4);
              }
              else if (CFStringHasSuffix(v14, CFSTR("Date")))
              {
                Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v14);
                if (Value
                  && (NL::DateConverter::updatePeriodForValueDate((const __CFDate ***)this, v14, a2, Value, a4) & 1) == 0)
                {
                  return 0;
                }
              }
              else
              {
                v41 = 0u;
                v42 = 0u;
                v39 = 0u;
                v40 = 0u;
                v37 = 0u;
                v38 = 0u;
                v35 = 0u;
                v36 = 0u;
                v16 = (std::__shared_weak_count *)this[1];
                v33 = *this;
                v34 = v16;
                if (v16)
                {
                  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                  do
                    v18 = __ldxr(p_shared_owners);
                  while (__stxr(v18 + 1, p_shared_owners));
                }
                updated = updateDateComponentsWithValues((SInt32 *)&v39, (uint64_t)a2, theDict, 0);
                if (v16)
                {
                  v20 = (unint64_t *)&v16->__shared_owners_;
                  do
                    v21 = __ldaxr(v20);
                  while (__stlxr(v21 - 1, v20));
                  if (!v21)
                  {
                    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                    std::__shared_weak_count::__release_weak(v16);
                  }
                }
                if ((updated & 1) == 0)
                  return 0;
                v22 = v40;
                v23 = v31;
                *v31 = v39;
                v23[1] = v22;
                v24 = v42;
                v23[2] = v41;
                v23[3] = v24;
                v25 = v36;
                v26 = v30;
                *v30 = v35;
                v26[1] = v25;
                v27 = v38;
                v26[2] = v37;
                v26[3] = v27;
              }
            }
            ++v13;
          }
          while (v13 != Count);
        }
        v28 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("HolidayDate"));
        result = NL::DateConverter::updatePeriodForHolidayDate((const __CFDate ***)this, a2, v28, a4);
        if ((_DWORD)result)
        {
          NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("HOLIDAY"));
          return 1;
        }
      }
    }
  }
  return result;
}

void sub_1A18665D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v1 - 240);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForHolidayRelativeDate(const __CFDate ***this, const __CFLocale *a2, CFDictionaryRef theDict, const __CFString *a4, NL::DatePeriod *a5)
{
  uint64_t updated;
  __CFCalendar *v11;
  int v12;
  const __CFDictionary *Value;
  __int128 v15;
  __CFCalendar *v16;

  updated = 0;
  if (!theDict || !a2 || !a4)
    return updated;
  if (!CFDictionaryContainsKey(theDict, CFSTR("HolidayDate")))
    return 0;
  v11 = copyCurrentCalendar((uint64_t)a2);
  v16 = v11;
  getCurrentDateComponents(v11, **this, &v15);
  if (!CFStringHasSuffix(a4, CFSTR("ThisDate")))
  {
    if (CFStringHasSuffix(a4, CFSTR("LastDate")))
    {
      v12 = DWORD2(v15) - 1;
      goto LABEL_10;
    }
    if (!CFStringHasSuffix(a4, CFSTR("EveryDate")))
    {
      if (CFStringHasSuffix(a4, CFSTR("NextDate")))
      {
        v12 = DWORD2(v15) + 1;
      }
      else
      {
        CFStringHasSuffix(a4, CFSTR("AnyDate"));
        v12 = 0;
      }
      goto LABEL_10;
    }
  }
  v12 = DWORD2(v15);
LABEL_10:
  *((_DWORD *)a5 + 22) = 0;
  *(_OWORD *)((char *)a5 + 72) = 0u;
  *(_OWORD *)((char *)a5 + 56) = 0u;
  *(_OWORD *)((char *)a5 + 40) = 0u;
  *(_QWORD *)((char *)a5 + 28) = 0;
  *((_DWORD *)a5 + 9) = v12;
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("HolidayDate"));
  updated = NL::DateConverter::updatePeriodForHolidayDate(this, a2, Value, a5);
  if ((_DWORD)updated)
    NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("HOLIDAY"));
  if (v11)
    CFRelease(v11);
  return updated;
}

void sub_1A1866778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForHolidayDate(const __CFDate ***this, const __CFLocale *a2, const __CFDictionary *a3, NL::DatePeriod *a4)
{
  uint64_t updated;
  const __CFDictionary *v7;
  unint64_t Value;
  const __CFString *v11;
  const __CFString *v12;
  __CFCalendar *v13;
  __CFCalendar *v14;
  CFMutableStringRef MutableCopy;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  CFMutableStringRef v35;
  __CFCalendar *v36;

  updated = 0;
  if (a2 && a3)
  {
    v7 = (*this)[3];
    if (v7
      && CFDictionaryGetCount(v7)
      && (Value = (unint64_t)CFDictionaryGetValue(a3, CFSTR("Identifier")),
          v11 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("CalendarSystem")),
          (unint64_t)v11 | Value)
      && (v12 = v11, v13 = copyCurrentCalendar((uint64_t)a2), (v36 = v13) != 0))
    {
      v14 = v13;
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v12);
      v35 = MutableCopy;
      CFStringUppercase(MutableCopy, 0);
      CFStringAppendFormat(MutableCopy, 0, CFSTR("-%@-HOLIDAY"), Value);
      v16 = *(_OWORD *)((char *)a4 + 44);
      v31 = *(_OWORD *)((char *)a4 + 28);
      v32 = v16;
      v17 = *(_OWORD *)((char *)a4 + 76);
      v33 = *(_OWORD *)((char *)a4 + 60);
      v34 = v17;
      v18 = *(_OWORD *)((char *)a4 + 108);
      v27 = *(_OWORD *)((char *)a4 + 92);
      v28 = v18;
      v19 = *(_OWORD *)((char *)a4 + 140);
      v29 = *(_OWORD *)((char *)a4 + 124);
      v30 = v19;
      if (NL::DateComponents::isEmpty((NL::DateComponents *)&v31))
      {
        getCurrentDateComponents(v14, **this, &v26);
        v20 = (double *)DWORD2(v26);
        DWORD2(v31) = DWORD2(v26);
      }
      else
      {
        v20 = (double *)DWORD2(v31);
      }
      updated = updateDateComponentsWithHolidayReference((*this)[3], MutableCopy, v14, **this, (*this)[1], v20, (NL::DateComponents *)&v31, (NL::DateComponents *)&v27);
      if ((_DWORD)updated)
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, MutableCopy);
        *((_DWORD *)a4 + 6) = 40;
        NL::DatePeriod::setCalendarWithIdentifier((const void **)a4, CFSTR("gregorian"));
        v22 = v32;
        *(_OWORD *)((char *)a4 + 28) = v31;
        *(_OWORD *)((char *)a4 + 44) = v22;
        v23 = v34;
        *(_OWORD *)((char *)a4 + 60) = v33;
        *(_OWORD *)((char *)a4 + 76) = v23;
        v24 = v28;
        *(_OWORD *)((char *)a4 + 92) = v27;
        *(_OWORD *)((char *)a4 + 108) = v24;
        v25 = v30;
        *(_OWORD *)((char *)a4 + 124) = v29;
        *(_OWORD *)((char *)a4 + 140) = v25;
      }
      if (MutableCopy)
        CFRelease(MutableCopy);
      CFRelease(v14);
    }
    else
    {
      return 0;
    }
  }
  return updated;
}

void sub_1A186696C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nlp::CFScopedPtr<__CFString *>::reset((const void **)(v1 - 64), 0);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

BOOL NL::DateConverter::updatePeriodForValueCompoundDate(NL::DateConverter *this, const __CFLocale *a2, CFDictionaryRef theDict, const void **a4)
{
  _BOOL8 result;
  CFIndex Count;
  unint64_t v8;
  const void **v9;
  size_t v10;
  uint64_t v11;
  const __CFString *v12;
  _OWORD *v13;
  _OWORD *v14;
  const __CFString *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  const __CFDictionary *Value;
  _QWORD v26[2];
  const void **v27;
  const __CFLocale *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v27 = a4;
  result = 0;
  v39 = *MEMORY[0x1E0C80C00];
  v28 = a2;
  if (a2 && theDict)
  {
    Count = CFDictionaryGetCount(theDict);
    v26[1] = v26;
    MEMORY[0x1E0C80A78]();
    v9 = (const void **)((char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v8 >= 0x200)
      v10 = 512;
    else
      v10 = v8;
    bzero((char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
    CFDictionaryGetKeysAndValues(theDict, v9, 0);
    if (Count >= 1)
    {
      v11 = 0;
      v12 = 0;
      v13 = (_OWORD *)((char *)v27 + 28);
      v14 = (_OWORD *)((char *)v27 + 92);
      do
      {
        v15 = (const __CFString *)v9[v11];
        if (!CFStringHasSuffix(v15, CFSTR("Date")))
        {
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v16 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
          v29 = *(_QWORD *)this;
          v30 = v16;
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(p_shared_owners);
            while (__stxr(v18 + 1, p_shared_owners));
          }
          updateDateComponentsWithValues((SInt32 *)&v35, (uint64_t)v28, theDict, 0);
          if (v16)
          {
            v19 = (unint64_t *)&v16->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v21 = v36;
          *v13 = v35;
          v13[1] = v21;
          v22 = v38;
          v13[2] = v37;
          v13[3] = v22;
          v23 = v32;
          *v14 = v31;
          v14[1] = v23;
          v24 = v34;
          v15 = v12;
          v14[2] = v33;
          v14[3] = v24;
        }
        ++v11;
        v12 = v15;
      }
      while (v11 != Count);
      if (v15)
      {
        if (CFStringHasPrefix(v15, CFSTR("Relative")))
        {
          result = NL::DateConverter::updatePeriodForRelativeDate((uint64_t **)this, v15, v28, (NL::DatePeriod *)v27);
          if (!result)
            return result;
LABEL_24:
          NL::DatePeriod::setDisplayKey(v27, CFSTR("FORMATTED"));
          *((_DWORD *)v27 + 6) = 38;
          return 1;
        }
        Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v15);
        if ((NL::DateConverter::updatePeriodForValueDate((const __CFDate ***)this, v15, v28, Value, (NL::DatePeriod *)v27) & 1) != 0)goto LABEL_24;
      }
    }
    return 0;
  }
  return result;
}

void sub_1A1866C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v1 - 240);
  _Unwind_Resume(a1);
}

BOOL NL::DateConverter::updatePeriodForRelativeCompoundDate(NL::DateConverter *this, CFStringRef theString, const __CFLocale *a3, const __CFDictionary *a4, NL::DatePeriod *a5)
{
  CFIndex Length;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (!theString)
    return 0;
  Length = CFStringGetLength(theString);
  if (!a3 || !Length)
    return 0;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  updateDateComponentsWithValues((SInt32 *)&v19, (uint64_t)a3, a4, 0);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v16 = v20;
  *(_OWORD *)((char *)a5 + 28) = v19;
  *(_OWORD *)((char *)a5 + 44) = v16;
  v17 = v22;
  *(_OWORD *)((char *)a5 + 60) = v21;
  *(_OWORD *)((char *)a5 + 76) = v17;
  *(_OWORD *)((char *)a5 + 92) = 0u;
  *(_OWORD *)((char *)a5 + 108) = 0u;
  *(_OWORD *)((char *)a5 + 124) = 0u;
  *(_OWORD *)((char *)a5 + 140) = 0u;
  return NL::DateConverter::updatePeriodForRelativeDate((uint64_t **)this, theString, a3, a5);
}

void sub_1A1866D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForOrdinalNumDate(uint64_t **this, const __CFString *a2, const __CFLocale *a3, const __CFDictionary *a4, NL::DatePeriod *a5)
{
  uint64_t v5;
  __int128 v11;
  __int128 v12;
  int v13;
  __CFCalendar *v14;
  double CurrentTime;
  int v16;
  uint64_t v17;
  __CFString *v18;
  unint64_t *p_info;
  unint64_t v20;
  char v21;
  char v22;
  unint64_t *v23;
  unint64_t v24;
  const __CFString *v25;
  const __CFDictionary *Value;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  char updated;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  CFStringRef v34;
  const __CFString *v35;
  const __CFString *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  __int128 v44;
  __int128 v45;
  int v46;
  __int128 v47;
  const __CFString *v49;
  const __CFString *v50;
  int v51;
  int v52;
  const __CFString *v53;
  const __CFString *v54;
  int v55;
  const __CFString *v56;
  const __CFString *v57;
  const __CFString *v58;
  __CFString *v59;
  __CFString *v60[3];
  CFAbsoluteTime at;
  CFTypeRef cf;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  int v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;

  v5 = 0;
  if (!a2)
    return v5;
  if (!a3)
    return v5;
  if (!a4)
    return v5;
  v81 = 0;
  v82 = 0;
  v79 = 0;
  v80 = 0;
  v11 = *(_OWORD *)((char *)a5 + 44);
  v75 = *(_OWORD *)((char *)a5 + 28);
  v76 = v11;
  v12 = *(_OWORD *)((char *)a5 + 76);
  v77 = *(_OWORD *)((char *)a5 + 60);
  v78 = v12;
  v72 = *(_OWORD *)((char *)a5 + 92);
  v73 = *(_OWORD *)((char *)a5 + 108);
  v13 = *((_DWORD *)a5 + 32);
  v74 = *((_DWORD *)a5 + 31);
  v70 = *(_OWORD *)((char *)a5 + 132);
  v71 = *(_QWORD *)((char *)a5 + 148);
  v69 = -1;
  v67 = -1;
  v68 = -1;
  v65 = -1;
  v66 = -1;
  v63 = -1;
  v64 = -1;
  v14 = copyCurrentCalendar((uint64_t)a3);
  v5 = (uint64_t)v14;
  cf = v14;
  if (!v14)
    return v5;
  v59 = (__CFString *)MEMORY[0x1A1B0D42C](v14);
  CurrentTime = getCurrentTime(**this);
  at = CurrentTime;
  v16 = *((unsigned __int8 *)*this + 66);
  v17 = intValueForNumberInValues(a3, a4);
  CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v5, CurrentTime, "yMdEwHms", (char *)&v69 + 4, &v69, &v68, &v67, &v66, &v65, &v64, &v63);
  if (!CFStringHasSuffix(a2, CFSTR("EveryNumIsoDayPerMonthDate")))
  {
    if (!CFStringHasSuffix(a2, CFSTR("EveryNumFormattedDate")))
    {
      if ((v17 & 0x80000000) == 0)
      {
        CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v5, CurrentTime, "yMdEHms", (char *)&v69 + 4, &v69, &v68, &v67, &v65, &v64, &v63);
        *(_QWORD *)((char *)&v75 + 4) = v69;
        LODWORD(v75) = v68;
        if (CFStringFind(a2, CFSTR("Second"), 0).location == -1)
        {
          if (CFStringFind(a2, CFSTR("Minute"), 0).location == -1)
          {
            if (CFStringFind(a2, CFSTR("Hour"), 0).location == -1)
            {
              if (CFStringFind(a2, CFSTR("Day"), 0).location == -1)
              {
                if (CFStringFind(a2, CFSTR("Weekend"), 0).location != -1)
                {
                  *((_DWORD *)a5 + 6) = 48;
                  v54 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_WEEKENDS"), v17);
                  NL::DatePeriod::setDisplayKey((const void **)a5, v54);
                  v55 = 7;
                  if (v67 != 7)
                  {
                    CFCalendarAddComponents((CFCalendarRef)v5, &at, 0, "d", (7 - v67));
                    CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v5, at, "yEw", (char *)&v69 + 4, &v67, &v66);
                    v55 = v67;
                  }
                  v37 = 0;
                  v38 = 0;
                  v39 = 0;
                  v43 = 0;
                  v40 = 0;
                  v41 = 0;
                  v42 = 0;
                  *(_QWORD *)&v78 = __PAIR64__(HIDWORD(v69), v66);
                  DWORD1(v77) = v55;
                  *(_QWORD *)((char *)&v75 + 4) = 0;
                  LODWORD(v75) = 0;
                  v13 = 1;
                  goto LABEL_50;
                }
                if (CFStringFind(a2, CFSTR("Week"), 0).location != -1)
                {
                  *((_DWORD *)a5 + 6) = 49;
                  v56 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_WEEKS"), v17);
                  NL::DatePeriod::setDisplayKey((const void **)a5, v56);
                  v37 = 0;
                  v38 = 0;
                  v39 = 0;
                  v43 = 0;
                  v40 = 0;
                  v41 = 0;
                  v42 = 0;
                  *(_QWORD *)((char *)&v75 + 4) = 0;
                  DWORD1(v77) = v67;
                  *(_QWORD *)&v78 = __PAIR64__(HIDWORD(v69), v66);
                  LODWORD(v75) = 0;
                  goto LABEL_50;
                }
                if (CFStringFind(a2, CFSTR("Month"), 0).location == -1)
                {
                  if (CFStringFind(a2, CFSTR("Year"), 0).location == -1)
                  {
                    v37 = 0;
                    v38 = 0;
                    v39 = 0;
                    v43 = 0;
                    v40 = 0;
                    v41 = 0;
                    v42 = 0;
                  }
                  else
                  {
                    *((_DWORD *)a5 + 6) = 51;
                    v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_YEARS"), v17);
                    NL::DatePeriod::setDisplayKey((const void **)a5, v58);
                    v38 = 0;
                    v39 = 0;
                    v43 = 0;
                    v40 = 0;
                    v41 = 0;
                    v42 = 0;
                    v37 = v17;
                  }
                }
                else
                {
                  *((_DWORD *)a5 + 6) = 50;
                  v57 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_MONTHS"), v17);
                  NL::DatePeriod::setDisplayKey((const void **)a5, v57);
                  v37 = 0;
                  v38 = 0;
                  v39 = 0;
                  v43 = 0;
                  v41 = 0;
                  v42 = 0;
                  v40 = v17;
                }
              }
              else
              {
                *((_DWORD *)a5 + 6) = 46;
                v53 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_DAYS"), v17);
                NL::DatePeriod::setDisplayKey((const void **)a5, v53);
                v37 = 0;
                v38 = 0;
                v39 = 0;
                v43 = 0;
                v40 = 0;
                v41 = 0;
                v42 = v17;
              }
            }
            else
            {
              *((_DWORD *)a5 + 6) = 45;
              v50 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_HOURS"), v17);
              NL::DatePeriod::setDisplayKey((const void **)a5, v50);
              v37 = 0;
              v39 = 0;
              v43 = 0;
              v40 = 0;
              v41 = 0;
              v42 = 0;
              DWORD2(v76) = v65;
              v38 = v17;
            }
          }
          else
          {
            *((_DWORD *)a5 + 6) = 44;
            v49 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_MINUTES"), v17);
            NL::DatePeriod::setDisplayKey((const void **)a5, v49);
            v37 = 0;
            v38 = 0;
            v43 = 0;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            *((_QWORD *)&v76 + 1) = __PAIR64__(v64, v65);
            v39 = v17;
          }
        }
        else
        {
          *((_DWORD *)a5 + 6) = 43;
          v36 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_SECONDS"), v17);
          NL::DatePeriod::setDisplayKey((const void **)a5, v36);
          v37 = 0;
          v38 = 0;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          *((_QWORD *)&v76 + 1) = __PAIR64__(v64, v65);
          LODWORD(v77) = v63;
          v43 = v17;
        }
        goto LABEL_49;
      }
      goto LABEL_44;
    }
    if (!CFDictionaryContainsKey(a4, CFSTR("FormattedDate"))
      && !CFDictionaryContainsKey(a4, CFSTR("FormattedAmbiguousDate")))
    {
      goto LABEL_44;
    }
    Value = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("FormattedDate"));
    if (!Value)
      Value = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("FormattedAmbiguousDate"));
    v27 = (std::__shared_weak_count *)this[1];
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
    }
    updated = updateDateComponentsWithValues((SInt32 *)&v75, (uint64_t)a3, Value, 0);
    if (v27)
    {
      v31 = (unint64_t *)&v27->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if ((updated & 1) == 0)
      goto LABEL_44;
    v5 = 0;
    if ((v17 & 0x80000000) != 0)
      goto LABEL_51;
    v33 = DWORD1(v77);
    if ((DWORD1(v77) & 0x80000000) != 0)
      goto LABEL_51;
    v60[0] = 0;
    if (v16)
    {
      v34 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_ORDINAL_ANY:FORMATTED"), v17);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)v60, v34);
      if ((_DWORD)v17 == 2)
      {
        v35 = CFSTR("2_EVERY_ORDINAL_ANY:FORMATTED");
      }
      else
      {
        if ((_DWORD)v17 != 3)
          goto LABEL_61;
        v35 = CFSTR("3_EVERY_ORDINAL_ANY:FORMATTED");
      }
    }
    else
    {
      v35 = CFSTR("FORMATTED");
    }
    nlp::CFScopedPtr<__CFString const*>::reset((const void **)v60, v35);
LABEL_61:
    NL::DatePeriod::setDisplayKey((const void **)a5, v60[0]);
    if ((_DWORD)v77)
    {
      v51 = 0;
      v37 = 0;
      v39 = 0;
      v40 = 0;
      v42 = 0;
      v52 = 43;
      v43 = v17;
    }
    else if (HIDWORD(v76))
    {
      v51 = 0;
      v37 = 0;
      v43 = 0;
      v40 = 0;
      v42 = 0;
      v52 = 44;
      v39 = v17;
    }
    else if (DWORD2(v76))
    {
      v51 = 0;
      v39 = 0;
      v43 = 0;
      v40 = 0;
      v42 = 0;
      v52 = 45;
      v37 = v17;
    }
    else if ((_DWORD)v75)
    {
      v51 = 0;
      v37 = 0;
      v39 = 0;
      v43 = 0;
      v40 = 0;
      v52 = 46;
      v42 = v17;
    }
    else
    {
      if (v33)
      {
        v51 = 0;
        v37 = 0;
        v39 = 0;
        v43 = 0;
        v40 = 0;
        v42 = 0;
        v52 = 47;
        goto LABEL_72;
      }
      if (!DWORD1(v75))
      {
        v37 = 0;
        if (!DWORD2(v75))
        {
          v38 = 0;
          v39 = 0;
          v43 = 0;
          v40 = 0;
          v42 = 0;
          LODWORD(v17) = 0;
          goto LABEL_73;
        }
        v52 = 51;
        v51 = v17;
        v39 = 0;
        v43 = 0;
        v40 = 0;
        v42 = 0;
        LODWORD(v17) = 0;
LABEL_72:
        v38 = v37;
        *((_DWORD *)a5 + 6) = v52;
        v37 = v51;
LABEL_73:
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)v60, 0);
        v41 = 0;
        goto LABEL_50;
      }
      v51 = 0;
      v37 = 0;
      v39 = 0;
      v43 = 0;
      v42 = 0;
      v52 = 50;
      v40 = v17;
    }
    LODWORD(v17) = 0;
    goto LABEL_72;
  }
  v18 = (__CFString *)this[1];
  v60[1] = (__CFString *)*this;
  v60[2] = v18;
  if (v18)
  {
    p_info = (unint64_t *)&v18->info;
    do
      v20 = __ldxr(p_info);
    while (__stxr(v20 + 1, p_info));
  }
  v21 = updateDateComponentsWithValues((SInt32 *)&v75, (uint64_t)a3, a4, 1);
  v22 = v21;
  if (v18)
  {
    v23 = (unint64_t *)&v18->info;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*((void (**)(__CFString *))v18->isa + 2))(v18);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v18);
      if ((v22 & 1) != 0)
        goto LABEL_14;
LABEL_44:
      v5 = 0;
      goto LABEL_51;
    }
  }
  if ((v21 & 1) == 0)
    goto LABEL_44;
LABEL_14:
  v5 = 0;
  if (v17 <= 5 && (DWORD1(v77) & 0x80000000) == 0)
  {
    if ((_DWORD)v17 == 2)
    {
      v25 = CFSTR("2_ORDINAL_ANY:FORMATTED");
    }
    else
    {
      if ((_DWORD)v17 != 3)
      {
        v60[0] = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_ORDINAL_ANY:FORMATTED"), v17);
        NL::DatePeriod::setDisplayKey((const void **)a5, v60[0]);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)v60, 0);
        goto LABEL_48;
      }
      v25 = CFSTR("3_ORDINAL_ANY:FORMATTED");
    }
    NL::DatePeriod::setDisplayKey((const void **)a5, v25);
LABEL_48:
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v43 = 0;
    v40 = 0;
    v42 = 0;
    *((_DWORD *)a5 + 6) = 47;
    DWORD2(v77) = v17;
    v41 = v17;
LABEL_49:
    LODWORD(v17) = 0;
LABEL_50:
    v44 = v76;
    *(_OWORD *)((char *)a5 + 28) = v75;
    *(_OWORD *)((char *)a5 + 44) = v44;
    v45 = v78;
    *(_OWORD *)((char *)a5 + 60) = v77;
    *(_OWORD *)((char *)a5 + 76) = v45;
    *((_QWORD *)a5 + 21) = v81;
    *((_QWORD *)a5 + 26) = v79;
    *((_DWORD *)a5 + 54) = v80;
    v46 = v82;
    *((_DWORD *)a5 + 39) = v42;
    *((_DWORD *)a5 + 40) = v40;
    *((_DWORD *)a5 + 41) = v37;
    *((_DWORD *)a5 + 44) = v46;
    *((_DWORD *)a5 + 45) = v38;
    *((_DWORD *)a5 + 46) = v39;
    *((_DWORD *)a5 + 47) = v43;
    *((_DWORD *)a5 + 48) = 0;
    *((_DWORD *)a5 + 49) = v41;
    *((_DWORD *)a5 + 50) = 0;
    *((_DWORD *)a5 + 51) = v17;
    *((_DWORD *)a5 + 31) = v74;
    v47 = v73;
    *(_OWORD *)((char *)a5 + 92) = v72;
    *(_OWORD *)((char *)a5 + 108) = v47;
    *((_DWORD *)a5 + 32) = v13;
    *(_QWORD *)((char *)a5 + 148) = v71;
    *(_OWORD *)((char *)a5 + 132) = v70;
    NL::DatePeriod::setCalendarWithIdentifier((const void **)a5, v59);
    v5 = 1;
  }
LABEL_51:
  if (cf)
    CFRelease(cf);
  return v5;
}

void sub_1A1867818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForOrdinalDate(NL::DateConverter *this, const __CFString *a2, const __CFLocale *a3, CFDictionaryRef theDict, NL::DatePeriod *a5)
{
  uint64_t result;
  int v11;
  const __CFDictionary *Value;
  int v13;
  int v14;
  int v15;
  int HasPrefix;
  int v17;
  int v18;
  const __CFString *v19;
  int v20;
  const __CFDictionary *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  _BYTE v42[28];
  __int128 v43;
  int v44;
  __int128 v45;
  _BYTE v46[28];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  result = 0;
  if (a2 && a3)
  {
    v11 = *(unsigned __int8 *)(*(_QWORD *)this + 66);
    if (CFDictionaryContainsKey(theDict, CFSTR("FormattedDate"))
      || CFDictionaryContainsKey(theDict, CFSTR("FormattedAmbiguousDate")))
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("FormattedDate"));
      if (!Value)
        Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("FormattedAmbiguousDate"));
      result = NL::DateConverter::updatePeriodForFormattedDate(this, a3, Value, a5);
      if ((_DWORD)result)
      {
        v13 = *((_DWORD *)a5 + 8);
        v50 = *(_OWORD *)((char *)a5 + 40);
        v52 = *((_QWORD *)a5 + 7);
        v31 = *((_DWORD *)a5 + 7);
        v32 = *((_DWORD *)a5 + 16);
        v33 = *((_DWORD *)a5 + 19);
        v34 = *((_DWORD *)a5 + 9);
        v36 = *((_QWORD *)a5 + 10);
        v38 = *((_DWORD *)a5 + 22);
        v45 = *(_OWORD *)((char *)a5 + 92);
        v47 = *(_OWORD *)((char *)a5 + 108);
        v48 = *(_OWORD *)((char *)a5 + 124);
        v49 = *(_OWORD *)((char *)a5 + 140);
        v29 = *(_QWORD *)((char *)a5 + 68);
        v30 = *(_QWORD *)((char *)a5 + 156);
        v14 = *((_DWORD *)a5 + 51);
        v44 = *((_DWORD *)a5 + 50);
        v15 = *((_DWORD *)a5 + 41);
        v41 = *(_OWORD *)((char *)a5 + 168);
        v43 = *(_OWORD *)((char *)a5 + 184);
        v39 = *((_QWORD *)a5 + 26);
        v40 = *((_DWORD *)a5 + 54);
        HasPrefix = CFStringHasPrefix(a2, CFSTR("EveryTwo"));
        v17 = HasPrefix;
        if (HasPrefix)
          v18 = 2;
        else
          v18 = 1;
        if (v11)
        {
          v19 = CFSTR("VAL_1-N_EVERY_ORDINAL_ANY:FORMATTED");
          if (HasPrefix)
          {
            CFRelease(CFSTR("VAL_1-N_EVERY_ORDINAL_ANY:FORMATTED"));
            v19 = CFSTR("2_EVERY_ORDINAL_ANY:FORMATTED");
          }
        }
        else
        {
          v19 = CFSTR("FORMATTED");
        }
        if (v34)
        {
          if (v17)
            v20 = 51;
          else
            v20 = 52;
        }
        else
        {
          if (!v13)
          {
            if (v33)
            {
              if (v17)
                v20 = 49;
              else
                v20 = 52;
              v14 = v18;
            }
            else
            {
              if (v32)
                v14 = v18;
              if (v17)
                v28 = v32 == 0;
              else
                v28 = 1;
              if (v28)
                v20 = 52;
              else
                v20 = 47;
            }
            goto LABEL_24;
          }
          if (v17)
            v20 = 50;
          else
            v20 = 52;
        }
        v15 = v18;
LABEL_24:
        *((_DWORD *)a5 + 6) = v20;
        NL::DatePeriod::setDisplayKey((const void **)a5, v19);
        *(_OWORD *)((char *)a5 + 40) = v50;
        *((_QWORD *)a5 + 7) = v52;
        *((_QWORD *)a5 + 10) = v36;
        *((_DWORD *)a5 + 22) = v38;
        *((_DWORD *)a5 + 7) = v31;
        *((_DWORD *)a5 + 8) = v13;
        *((_DWORD *)a5 + 9) = v34;
        *((_DWORD *)a5 + 16) = v32;
        *(_QWORD *)((char *)a5 + 68) = v29;
        *((_DWORD *)a5 + 19) = v33;
        *(_OWORD *)((char *)a5 + 124) = v48;
        *(_OWORD *)((char *)a5 + 140) = v49;
        *(_OWORD *)((char *)a5 + 92) = v45;
        *(_OWORD *)((char *)a5 + 108) = v47;
        *((_DWORD *)a5 + 50) = v44;
        *(_OWORD *)((char *)a5 + 168) = v41;
        *(_OWORD *)((char *)a5 + 184) = v43;
        *((_DWORD *)a5 + 54) = v40;
        *((_QWORD *)a5 + 26) = v39;
        *(_QWORD *)((char *)a5 + 156) = v30;
        *((_DWORD *)a5 + 41) = v15;
        *((_DWORD *)a5 + 51) = v14;
        CFRelease(v19);
        return 1;
      }
    }
    else if (CFDictionaryContainsKey(theDict, CFSTR("FormattedTime"))
           || (result = CFDictionaryContainsKey(theDict, CFSTR("FormattedAmbiguousTime")), (_DWORD)result))
    {
      v21 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("FormattedTime"));
      if (!v21)
        v21 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("FormattedAmbiguousTime"));
      result = NL::DateConverter::updatePeriodForFormattedDate(this, a3, v21, a5);
      if ((_DWORD)result)
      {
        v37 = *(_OWORD *)((char *)a5 + 28);
        v22 = *((_DWORD *)a5 + 13);
        v23 = *((_DWORD *)a5 + 14);
        v24 = *((_DWORD *)a5 + 15);
        *(_OWORD *)v46 = *((_OWORD *)a5 + 4);
        *(_OWORD *)&v46[12] = *(_OWORD *)((char *)a5 + 76);
        v25 = *((_DWORD *)a5 + 23);
        v51 = *((_OWORD *)a5 + 6);
        v53 = *((_QWORD *)a5 + 14);
        v26 = *((_DWORD *)a5 + 30);
        v27 = *((_DWORD *)a5 + 31);
        *(_OWORD *)v42 = *((_OWORD *)a5 + 8);
        *(_OWORD *)&v42[12] = *(_OWORD *)((char *)a5 + 140);
        v35 = *(_QWORD *)((char *)a5 + 44);
        if (v35 | v22)
        {
          *((_DWORD *)a5 + 6) = 45;
          v25 = 1;
        }
        else if (v23)
        {
          *((_DWORD *)a5 + 6) = 44;
          v26 = 60;
        }
        else if (v24)
        {
          *((_DWORD *)a5 + 6) = 43;
          v27 = 60;
        }
        else
        {
          *((_DWORD *)a5 + 6) = 52;
        }
        NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("EVERY_FORMATTED_TIME"));
        *((_OWORD *)a5 + 4) = *(_OWORD *)v46;
        *(_OWORD *)((char *)a5 + 76) = *(_OWORD *)&v46[12];
        *(_OWORD *)((char *)a5 + 28) = v37;
        *(_QWORD *)((char *)a5 + 44) = v35;
        *((_DWORD *)a5 + 13) = v22;
        *((_DWORD *)a5 + 14) = v23;
        *((_DWORD *)a5 + 15) = v24;
        *(_OWORD *)((char *)a5 + 92) = 0u;
        *(_OWORD *)((char *)a5 + 108) = 0u;
        *(_OWORD *)((char *)a5 + 124) = 0u;
        *(_OWORD *)((char *)a5 + 140) = 0u;
        *((_OWORD *)a5 + 10) = v51;
        *((_QWORD *)a5 + 22) = v53;
        *(_OWORD *)((char *)a5 + 204) = *(_OWORD *)&v42[12];
        *((_OWORD *)a5 + 12) = *(_OWORD *)v42;
        *((_DWORD *)a5 + 39) = v25;
        result = 1;
        *((_DWORD *)a5 + 46) = v26;
        *((_DWORD *)a5 + 47) = v27;
      }
    }
  }
  return result;
}

void sub_1A1867CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForValueDate(const __CFDate ***this, const __CFString *a2, const __CFLocale *a3, const __CFDictionary *a4, NL::DatePeriod *a5)
{
  uint64_t v5;
  __CFCalendar *v11;
  __CFCalendar *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  const __CFDictionary *Value;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  char updated;
  char v31;
  unint64_t *v32;
  unint64_t v33;
  CFTypeRef v34;
  const __CFDictionary *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  char v39;
  unint64_t *v40;
  unint64_t v41;
  const __CFDictionary *v42;
  const __CFDate **v43;
  unint64_t *v44;
  unint64_t v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  const __CFString *v51;
  const __CFString *v52;
  const __CFString *v53;
  const __CFString *v54;
  int v55;
  const __CFString *v56;
  const __CFString *v57;
  unsigned int v58;
  const __CFString *v59;
  const __CFString *v60;
  const __CFString *v61;
  const __CFString *v62;
  const __CFString *v63;
  const __CFString *v64;
  const __CFString *v66;
  const __CFString *v67;
  const __CFString *v68;
  const __CFDate **v69;
  unint64_t *v70;
  unint64_t v71;
  char v72;
  CFRange MaximumRangeOfUnit;
  CFIndex length;
  CFIndex v75;
  const __CFDate **v76;
  unint64_t *v77;
  unint64_t v78;
  char v79;
  CFRange v80;
  const __CFDate **v81;
  unint64_t *v82;
  unint64_t v83;
  char v84;
  CFRange v85;
  CFIndex v86;
  CFIndex v87;
  CFIndex v88;
  const __CFDate **v89;
  unint64_t *v90;
  unint64_t v91;
  char v92;
  CFRange v93;
  const __CFDate **v94;
  unint64_t *v95;
  unint64_t v96;
  char v97;
  const __CFDate **v98;
  unint64_t *v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  const __CFDate **v103;
  unint64_t *v104;
  unint64_t v105;
  char v106;
  const __CFDate **v107;
  unint64_t *v108;
  unint64_t v109;
  char v110;
  const __CFDate **v111;
  unint64_t *v112;
  unint64_t v113;
  char v114;
  CFRange v115;
  const __CFDate **v116;
  unint64_t *v117;
  unint64_t v118;
  char v119;
  CFRange v120;
  uint64_t v121;
  int v122;
  __CFString *v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  _QWORD v129[2];
  _QWORD v130[2];
  _QWORD v131[2];
  _QWORD v132[2];
  _QWORD v133[2];
  _QWORD v134[2];
  _QWORD v135[2];
  _QWORD v136[2];
  _QWORD v137[2];
  _QWORD v138[2];
  unsigned int v139;
  _QWORD v140[6];
  CFTypeRef cf;
  uint64_t v142;
  int v143;
  int v144;
  _BYTE v145[12];
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  CFAbsoluteTime at;
  _OWORD v159[4];
  __CFCalendar *v160;

  v5 = 0;
  if (!a2 || !a3 || !a4)
    return v5;
  v11 = copyCurrentCalendar((uint64_t)a3);
  v160 = v11;
  if (!v11)
    return 0;
  v12 = v11;
  v13 = MEMORY[0x1A1B0D42C]();
  getCurrentDateComponents(v12, **this, v159);
  at = 0.0;
  at = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v159, v12, **this);
  v14 = *(_OWORD *)((char *)a5 + 44);
  v154 = *(_OWORD *)((char *)a5 + 28);
  v155 = v14;
  v15 = *(_OWORD *)((char *)a5 + 76);
  v156 = *(_OWORD *)((char *)a5 + 60);
  v157 = v15;
  v16 = *(_OWORD *)((char *)a5 + 172);
  v150 = *(_OWORD *)((char *)a5 + 156);
  v151 = v16;
  v17 = *(_OWORD *)((char *)a5 + 204);
  v152 = *(_OWORD *)((char *)a5 + 188);
  v153 = v17;
  v18 = *((_DWORD *)a5 + 24);
  v19 = *((_DWORD *)a5 + 25);
  v20 = *((_QWORD *)a5 + 13);
  HIDWORD(v127) = *((_DWORD *)a5 + 29);
  v128 = *((_DWORD *)a5 + 23);
  v149 = *((_DWORD *)a5 + 28);
  v21 = *((_DWORD *)a5 + 30);
  v22 = *((_DWORD *)a5 + 31);
  v23 = *((_DWORD *)a5 + 32);
  v147 = *(_QWORD *)((char *)a5 + 132);
  v148 = v20;
  v126 = *((_DWORD *)a5 + 35);
  LODWORD(v127) = v21;
  v124 = v23;
  v125 = *((_DWORD *)a5 + 36);
  v146 = *(_QWORD *)((char *)a5 + 148);
  memset(v145, 255, sizeof(v145));
  v144 = -1;
  v143 = -1;
  v142 = -1;
  CFCalendarDecomposeAbsoluteTime(v12, at, "yMdEwHm", &v145[8], &v145[4], v145, &v144, &v143, (char *)&v142 + 4, &v142);
  v122 = v22;
  v123 = (__CFString *)v13;
  v24 = intValueForNumberInValues(a3, a4);
  v25 = *((unsigned __int8 *)*this + 66);
  if (CFStringHasPrefix(a2, CFSTR("ThisFormattedDate")))
  {
    cf = CFSTR("FORMATTED");
    NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
    *((_DWORD *)a5 + 6) = 38;
    if (CFDictionaryContainsKey(a4, CFSTR("FormattedDate"))
      || CFDictionaryContainsKey(a4, CFSTR("FormattedAmbiguousDate")))
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("FormattedDate"));
      if (!Value)
        Value = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("FormattedAmbiguousDate"));
      v27 = (std::__shared_weak_count *)this[1];
      v140[4] = *this;
      v140[5] = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      updated = updateDateComponentsWithValues((SInt32 *)&v154, (uint64_t)a3, Value, 0);
      v31 = updated;
      if (!v27)
        goto LABEL_17;
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        if ((v31 & 1) != 0)
        {
LABEL_18:
          resolveDateComponentsToDateWithOffset(v160, a3, **this, (NL::DateComponents *)&v154, v25 != 0, 0, 0);
          v34 = cf;
          if (!cf)
          {
LABEL_48:
            v5 = 1;
LABEL_49:
            v47 = v155;
            *(_OWORD *)((char *)a5 + 28) = v154;
            *(_OWORD *)((char *)a5 + 44) = v47;
            v48 = v157;
            *(_OWORD *)((char *)a5 + 60) = v156;
            *(_OWORD *)((char *)a5 + 76) = v48;
            *((_DWORD *)a5 + 23) = v128;
            *((_DWORD *)a5 + 24) = v18;
            *((_DWORD *)a5 + 25) = v19;
            *((_QWORD *)a5 + 13) = v148;
            *((_DWORD *)a5 + 28) = v149;
            *((_DWORD *)a5 + 29) = HIDWORD(v127);
            *((_DWORD *)a5 + 30) = v127;
            *((_DWORD *)a5 + 31) = v122;
            *((_DWORD *)a5 + 32) = v124;
            *(_QWORD *)((char *)a5 + 132) = v147;
            *((_DWORD *)a5 + 35) = v126;
            *((_DWORD *)a5 + 36) = v125;
            *(_QWORD *)((char *)a5 + 148) = v146;
            v49 = v153;
            *(_OWORD *)((char *)a5 + 188) = v152;
            *(_OWORD *)((char *)a5 + 204) = v49;
            v50 = v151;
            *(_OWORD *)((char *)a5 + 156) = v150;
            *(_OWORD *)((char *)a5 + 172) = v50;
            NL::DatePeriod::setCalendarWithIdentifier((const void **)a5, v123);
            goto LABEL_117;
          }
LABEL_19:
          CFRelease(v34);
          goto LABEL_48;
        }
      }
      else
      {
LABEL_17:
        if ((updated & 1) != 0)
          goto LABEL_18;
      }
      v51 = (const __CFString *)cf;
      if (!cf)
        goto LABEL_116;
    }
    else
    {
      v51 = CFSTR("FORMATTED");
    }
LABEL_56:
    CFRelease(v51);
LABEL_116:
    v5 = 0;
    goto LABEL_117;
  }
  if (CFStringHasPrefix(a2, CFSTR("LastFormattedDate")))
  {
    cf = CFSTR("FORMATTED");
    NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
    *((_DWORD *)a5 + 6) = 38;
    if (CFDictionaryContainsKey(a4, CFSTR("FormattedDate"))
      || CFDictionaryContainsKey(a4, CFSTR("FormattedAmbiguousDate")))
    {
      v35 = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("FormattedDate"));
      if (!v35)
        v35 = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("FormattedAmbiguousDate"));
      v36 = (std::__shared_weak_count *)this[1];
      v140[2] = *this;
      v140[3] = v36;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = updateDateComponentsWithValues((SInt32 *)&v154, (uint64_t)a3, v35, 0);
      if (v36)
      {
        v40 = (unint64_t *)&v36->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if ((v39 & 1) != 0)
      {
        resolveDateComponentsToDateWithOffset(v160, a3, **this, (NL::DateComponents *)&v154, v25 != 0, -1, 0);
        v34 = cf;
        if (!cf)
          goto LABEL_48;
        goto LABEL_19;
      }
      v51 = (const __CFString *)cf;
      if (!cf)
        goto LABEL_116;
    }
    else
    {
      v51 = CFSTR("FORMATTED");
    }
    goto LABEL_56;
  }
  if (CFStringHasPrefix(a2, CFSTR("NextFormattedDate")))
  {
    cf = CFSTR("FORMATTED");
    NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
    *((_DWORD *)a5 + 6) = 38;
    if (CFDictionaryContainsKey(a4, CFSTR("FormattedDate"))
      || CFDictionaryContainsKey(a4, CFSTR("FormattedAmbiguousDate")))
    {
      v42 = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("FormattedDate"));
      if (!v42)
        v42 = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("FormattedAmbiguousDate"));
      v43 = this[1];
      v140[0] = *this;
      v140[1] = v43;
      if (v43)
      {
        v44 = (unint64_t *)(v43 + 1);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      v46 = updateDateComponentsWithValues((SInt32 *)&v154, (uint64_t)a3, v42, 0);
      std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v140);
      if ((v46 & 1) != 0)
      {
        resolveDateComponentsToDateWithOffset(v12, a3, **this, (NL::DateComponents *)&v154, v25 != 0, 1, 0);
LABEL_47:
        nlp::CFScopedPtr<__CFString const*>::reset(&cf, 0);
        goto LABEL_48;
      }
    }
LABEL_115:
    nlp::CFScopedPtr<__CFString const*>::reset(&cf, 0);
    goto LABEL_116;
  }
  if (CFStringHasPrefix(a2, CFSTR("NextNum")) && CFStringHasSuffix(a2, CFSTR("RangeDate")))
  {
    if ((v24 & 0x80000000) != 0)
      goto LABEL_116;
    if (CFStringFind(a2, CFSTR("Minute"), 0).location != -1)
    {
      *((_DWORD *)a5 + 6) = 27;
      v52 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_NEXT_MINUTES"), v24);
      NL::DatePeriod::setDisplayKey((const void **)a5, v52);
      *(_QWORD *)&v154 = *(_QWORD *)v145;
      DWORD2(v154) = *(_DWORD *)&v145[8];
      *((_QWORD *)&v155 + 1) = __PAIR64__(v142, HIDWORD(v142));
      CFCalendarAddComponents(v12, &at, 0, "m", v24);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMdEwHm", &v145[8], &v145[4], v145, &v144, &v143, (char *)&v142 + 4, &v142);
      v18 = *(_DWORD *)&v145[4];
      v19 = *(_DWORD *)&v145[8];
      v128 = *(_DWORD *)v145;
      v5 = 1;
      v127 = v142;
      goto LABEL_49;
    }
    if (CFStringFind(a2, CFSTR("Hour"), 0).location != -1)
    {
      *((_DWORD *)a5 + 6) = 28;
      v56 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_NEXT_HOURS"), v24);
      NL::DatePeriod::setDisplayKey((const void **)a5, v56);
      *(_QWORD *)&v154 = *(_QWORD *)v145;
      DWORD2(v154) = *(_DWORD *)&v145[8];
      DWORD2(v155) = HIDWORD(v142);
      CFCalendarAddComponents(v12, &at, 0, "h", v24);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMdEwHm", &v145[8], &v145[4], v145, &v144, &v143, (char *)&v142 + 4, &v142);
      v18 = *(_DWORD *)&v145[4];
      v19 = *(_DWORD *)&v145[8];
      v5 = 1;
      HIDWORD(v127) = HIDWORD(v142);
      v128 = *(_DWORD *)v145;
      goto LABEL_49;
    }
    if (CFStringFind(a2, CFSTR("Day"), 0).location != -1)
    {
      *((_DWORD *)a5 + 6) = 29;
      v59 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_NEXT_DAYS"), v24);
      NL::DatePeriod::setDisplayKey((const void **)a5, v59);
      LODWORD(v154) = *(_DWORD *)v145;
      *(_QWORD *)((char *)&v154 + 4) = *(_QWORD *)&v145[4];
      CFCalendarAddComponents(v12, &at, 0, "d", v24);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
      v128 = *(_DWORD *)v145;
      goto LABEL_89;
    }
    if (CFStringFind(a2, CFSTR("Week"), 0).location == -1)
    {
      if (CFStringFind(a2, CFSTR("Month"), 0).location == -1)
      {
        if (CFStringFind(a2, CFSTR("Year"), 0).location == -1)
          goto LABEL_48;
        *((_DWORD *)a5 + 6) = 33;
        v66 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_NEXT_YEARS"), v24);
        NL::DatePeriod::setDisplayKey((const void **)a5, v66);
        LODWORD(v154) = *(_DWORD *)v145;
        *(_QWORD *)((char *)&v154 + 4) = *(_QWORD *)&v145[4];
        CFCalendarAddComponents(v12, &at, 0, "y", v24);
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
LABEL_90:
        v5 = 1;
        v19 = *(_DWORD *)&v145[8];
        goto LABEL_49;
      }
      *((_DWORD *)a5 + 6) = 32;
      v63 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_NEXT_MONTHS"), v24);
      NL::DatePeriod::setDisplayKey((const void **)a5, v63);
      LODWORD(v154) = *(_DWORD *)v145;
      *(_QWORD *)((char *)&v154 + 4) = *(_QWORD *)&v145[4];
      CFCalendarAddComponents(v12, &at, 0, "M", v24);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
LABEL_89:
      v18 = *(_DWORD *)&v145[4];
      goto LABEL_90;
    }
    *((_DWORD *)a5 + 6) = 31;
    v61 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_NEXT_WEEKS"), v24);
    NL::DatePeriod::setDisplayKey((const void **)a5, v61);
    LODWORD(v154) = *(_DWORD *)v145;
    *(_QWORD *)((char *)&v154 + 4) = *(_QWORD *)&v145[4];
    CFCalendarAddComponents(v12, &at, 0, "w", v24);
    CFCalendarDecomposeAbsoluteTime(v12, at, "yw", &v145[8], &v143);
LABEL_103:
    v5 = 1;
    v125 = *(_DWORD *)&v145[8];
    v126 = v143;
    goto LABEL_49;
  }
  if (CFStringHasPrefix(a2, CFSTR("NextNum")) && CFStringHasSuffix(a2, CFSTR("Date")))
  {
    if ((v24 & 0x80000000) != 0)
      goto LABEL_116;
    if (CFStringFind(a2, CFSTR("Minute"), 0).location != -1)
    {
      *((_DWORD *)a5 + 6) = 16;
      v53 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_MINUTES"), v24);
      NL::DatePeriod::setDisplayKey((const void **)a5, v53);
      CFCalendarAddComponents(v12, &at, 0, "m", v24);
      LODWORD(cf) = 0;
      v139 = 0;
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMdHm", &v145[8], &v145[4], v145, &cf, &v139);
LABEL_83:
      *(_QWORD *)&v154 = *(_QWORD *)v145;
      DWORD2(v154) = *(_DWORD *)&v145[8];
      *((_QWORD *)&v155 + 1) = __PAIR64__(v139, cf);
      goto LABEL_48;
    }
    if (CFStringFind(a2, CFSTR("Hour"), 0).location != -1)
    {
      *((_DWORD *)a5 + 6) = 17;
      v57 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_HOURS"), v24);
      NL::DatePeriod::setDisplayKey((const void **)a5, v57);
      CFCalendarAddComponents(v12, &at, 0, "h", v24);
      LODWORD(cf) = 0;
      v139 = 0;
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMdHm", &v145[8], &v145[4], v145, &cf, &v139);
      goto LABEL_83;
    }
    if (CFStringFind(a2, CFSTR("Day"), 0).location != -1)
    {
      v60 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_DAYS"), v24);
      NL::DatePeriod::setDisplayKey((const void **)a5, v60);
      *((_DWORD *)a5 + 6) = 18;
      CFCalendarAddComponents(v12, &at, 0, "d", v24);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
LABEL_72:
      *(_QWORD *)&v154 = *(_QWORD *)v145;
LABEL_73:
      v55 = *(_DWORD *)&v145[8];
LABEL_74:
      DWORD2(v154) = v55;
      goto LABEL_48;
    }
    if (CFStringFind(a2, CFSTR("Weekend"), 0).location != -1)
    {
      v62 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_WEEKENDS"), v24);
      NL::DatePeriod::setDisplayKey((const void **)a5, v62);
      *((_DWORD *)a5 + 6) = 19;
      if (v144 <= 6)
        CFCalendarAddComponents(v12, &at, 0, "d", (7 - v144));
      CFCalendarAddComponents(v12, &at, 0, "w", v24);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yEw", &v145[8], &v144, &v143);
      *(_QWORD *)&v154 = 0;
      DWORD2(v154) = 0;
      DWORD1(v156) = v144;
      *(_QWORD *)&v157 = __PAIR64__(*(unsigned int *)&v145[8], v143);
      CFCalendarAddComponents(v12, &at, 0, "d", 1);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yEw", &v145[8], &v144, &v143);
      v124 = v144;
      goto LABEL_103;
    }
    if (CFStringFind(a2, CFSTR("Week"), 0).location != -1)
    {
      v64 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_WEEKS"), v24);
      NL::DatePeriod::setDisplayKey((const void **)a5, v64);
      *((_DWORD *)a5 + 6) = 20;
      CFCalendarAddComponents(v12, &at, 0, "w", v24);
      CFCalendarDecomposeAbsoluteTime(v12, at, "wyMd", &v143, &v145[8], &v145[4], v145);
      *(_QWORD *)&v157 = __PAIR64__(*(unsigned int *)&v145[8], v143);
      goto LABEL_48;
    }
    if (CFStringFind(a2, CFSTR("Month"), 0).location == -1)
    {
      if (CFStringFind(a2, CFSTR("Year"), 0).location == -1)
        goto LABEL_48;
      v68 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_YEARS"), v24);
      NL::DatePeriod::setDisplayKey((const void **)a5, v68);
      *((_DWORD *)a5 + 6) = 22;
      CFCalendarAddComponents(v12, &at, 0, "y", v24);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
      goto LABEL_73;
    }
    v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_MONTHS"), v24);
    NL::DatePeriod::setDisplayKey((const void **)a5, v67);
    *((_DWORD *)a5 + 6) = 21;
    CFCalendarAddComponents(v12, &at, 0, "M", v24);
    CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
LABEL_124:
    *(_QWORD *)((char *)&v154 + 4) = *(_QWORD *)&v145[4];
    goto LABEL_48;
  }
  v121 = -(int)v24;
  if (CFStringHasPrefix(a2, CFSTR("NumDaysRange")))
  {
    *((_DWORD *)a5 + 6) = 34;
    v54 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_LAST_DAYS"), v24);
    NL::DatePeriod::setDisplayKey((const void **)a5, v54);
    if ((v24 & 0x80000000) != 0)
      goto LABEL_116;
    v128 = *(_DWORD *)v145;
    v18 = *(_DWORD *)&v145[4];
    v19 = *(_DWORD *)&v145[8];
    CFCalendarAddComponents(v12, &at, 0, "d", v121);
    CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
    goto LABEL_72;
  }
  if (CFStringHasPrefix(a2, CFSTR("NumDays")))
  {
    cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_DAYS_AGO"), v24);
    NL::DatePeriod::setDisplayKey((const void **)a5, (const __CFString *)cf);
    *((_DWORD *)a5 + 6) = 23;
    if ((v24 & 0x80000000) != 0)
      goto LABEL_115;
    CFCalendarAddComponents(v12, &at, 0, "d", v121);
    CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
    *(_QWORD *)&v154 = *(_QWORD *)v145;
LABEL_78:
    DWORD2(v154) = *(_DWORD *)&v145[8];
    goto LABEL_47;
  }
  if (CFStringHasPrefix(a2, CFSTR("NumWeeksRange")))
  {
    cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_LAST_WEEKS"), v24);
    NL::DatePeriod::setDisplayKey((const void **)a5, (const __CFString *)cf);
    *((_DWORD *)a5 + 6) = 35;
    if ((v24 & 0x80000000) != 0)
      goto LABEL_115;
    v128 = *(_DWORD *)v145;
    v18 = *(_DWORD *)&v145[4];
    v19 = *(_DWORD *)&v145[8];
    v139 = 0;
    CFCalendarDecomposeAbsoluteTime(v12, at, "w", &v139);
    v58 = v139 - v24 + 1;
LABEL_96:
    *(_QWORD *)&v157 = __PAIR64__(*(unsigned int *)&v145[8], v58);
    goto LABEL_47;
  }
  if (CFStringHasPrefix(a2, CFSTR("NumWeeks")))
  {
    cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_WEEKS_AGO"), v24);
    NL::DatePeriod::setDisplayKey((const void **)a5, (const __CFString *)cf);
    *((_DWORD *)a5 + 6) = 24;
    if ((v24 & 0x80000000) != 0)
      goto LABEL_115;
    v139 = 0;
    CFCalendarDecomposeAbsoluteTime(v12, at, "w", &v139);
    v58 = v139 - v24;
    goto LABEL_96;
  }
  if (CFStringHasPrefix(a2, CFSTR("NumMonthsRange")))
  {
    cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_LAST_MONTHS"), v24);
    NL::DatePeriod::setDisplayKey((const void **)a5, (const __CFString *)cf);
    *((_DWORD *)a5 + 6) = 36;
    if ((v24 & 0x80000000) != 0)
      goto LABEL_115;
    v18 = *(_DWORD *)&v145[4];
    v19 = *(_DWORD *)&v145[8];
    v128 = *(_DWORD *)v145;
    CFCalendarAddComponents(v12, &at, 0, "dM", (1 - *(_DWORD *)v145), v121);
    CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
LABEL_114:
    *(_QWORD *)((char *)&v154 + 4) = *(_QWORD *)&v145[4];
    goto LABEL_47;
  }
  if (CFStringHasPrefix(a2, CFSTR("NumMonths")))
  {
    cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_MONTHS_AGO"), v24);
    NL::DatePeriod::setDisplayKey((const void **)a5, (const __CFString *)cf);
    *((_DWORD *)a5 + 6) = 25;
    if ((v24 & 0x80000000) != 0)
      goto LABEL_115;
    CFCalendarAddComponents(v12, &at, 0, "dM", (1 - *(_DWORD *)v145), v121);
    CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
    goto LABEL_114;
  }
  if (!CFStringHasPrefix(a2, CFSTR("NumYearsRange")))
  {
    if (CFStringHasPrefix(a2, CFSTR("NumYears")))
    {
      v5 = 0;
      if (*(int *)&v145[8] >= (int)v24
        && (v24 & 0x80000000) == 0
        && *(_DWORD *)&v145[8] - (int)v24 >= *(_DWORD *)&v145[8] - 1970)
      {
        cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_YEARS_AGO"), v24);
        NL::DatePeriod::setDisplayKey((const void **)a5, (const __CFString *)cf);
        *((_DWORD *)a5 + 6) = 26;
        CFCalendarAddComponents(v12, &at, 0, "dM", (1 - *(_DWORD *)v145), (1 - *(_DWORD *)&v145[4]));
        CFCalendarAddComponents(v12, &at, 0, "y", v121);
        if (SDWORD1(v154) >= 2)
          CFCalendarAddComponents(v12, &at, 0, "M", (DWORD1(v154) - 1));
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
        goto LABEL_78;
      }
      goto LABEL_117;
    }
    if (CFStringHasPrefix(a2, CFSTR("IsoDay")))
    {
      NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
      *((_DWORD *)a5 + 6) = 38;
      v69 = this[1];
      v138[0] = *this;
      v138[1] = v69;
      if (v69)
      {
        v70 = (unint64_t *)(v69 + 1);
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      v72 = updateDateComponentsWithValues((SInt32 *)&v154, (uint64_t)a3, a4, 0);
      std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v138);
      if ((v72 & 1) != 0)
      {
        MaximumRangeOfUnit = CFCalendarGetMaximumRangeOfUnit(v12, 0x200uLL);
        if (v25)
        {
          length = MaximumRangeOfUnit.length - v144 + SDWORD1(v156);
          if (SDWORD1(v156) >= v144)
            length = 0;
          if (DWORD1(v156) == v144)
            length = MaximumRangeOfUnit.length;
          if (SDWORD1(v156) > v144)
            v75 = DWORD1(v156) - v144;
          else
            v75 = length;
          CFCalendarAddComponents(v12, &at, 0, "d", v75);
        }
        else
        {
          CFCalendarAddComponents(v12, &at, 0, "d", (1 - v144));
          CFCalendarAddComponents(v12, &at, 0, "d", (DWORD1(v156) - 1));
          if (SDWORD1(v156) > v144)
            CFCalendarAddComponents(v12, &at, 0, "d", -MaximumRangeOfUnit.length);
        }
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
        goto LABEL_72;
      }
      goto LABEL_219;
    }
    if (CFStringHasPrefix(a2, CFSTR("LastIsoDay")))
    {
      NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
      *((_DWORD *)a5 + 6) = 38;
      v76 = this[1];
      v137[0] = *this;
      v137[1] = v76;
      if (v76)
      {
        v77 = (unint64_t *)(v76 + 1);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      v79 = updateDateComponentsWithValues((SInt32 *)&v154, (uint64_t)a3, a4, 0);
      std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v137);
      if ((v79 & 1) != 0)
      {
        v80 = CFCalendarGetMaximumRangeOfUnit(v12, 0x200uLL);
        CFCalendarAddComponents(v12, &at, 0, "d", SDWORD1(v156) - (v80.length + v144));
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
        goto LABEL_72;
      }
      goto LABEL_219;
    }
    if (CFStringHasPrefix(a2, CFSTR("NextIsoDay")))
    {
      NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
      *((_DWORD *)a5 + 6) = 38;
      v81 = this[1];
      v136[0] = *this;
      v136[1] = v81;
      if (v81)
      {
        v82 = (unint64_t *)(v81 + 1);
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = updateDateComponentsWithValues((SInt32 *)&v154, (uint64_t)a3, a4, 0);
      std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v136);
      if ((v84 & 1) != 0)
      {
        v85 = CFCalendarGetMaximumRangeOfUnit(v12, 0x200uLL);
        v86 = v144 % v85.length;
        v87 = (v85.length - v86) % v85.length;
        if (v86 <= SDWORD1(v156))
          v88 = 0;
        else
          v88 = v85.length;
        CFCalendarAddComponents(v12, &at, 0, "d", v87 + SDWORD1(v156) + v88);
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
        goto LABEL_72;
      }
      goto LABEL_219;
    }
    if (CFStringHasPrefix(a2, CFSTR("BeforeLastIsoDay")))
    {
      NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
      *((_DWORD *)a5 + 6) = 38;
      v89 = this[1];
      v135[0] = *this;
      v135[1] = v89;
      if (v89)
      {
        v90 = (unint64_t *)(v89 + 1);
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
      v92 = updateDateComponentsWithValues((SInt32 *)&v154, (uint64_t)a3, a4, 0);
      std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v135);
      if ((v92 & 1) != 0)
      {
        v93 = CFCalendarGetMaximumRangeOfUnit(v12, 0x200uLL);
        CFCalendarAddComponents(v12, &at, 0, "d", SDWORD1(v156) - (v144 + 2 * v93.length));
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
        goto LABEL_72;
      }
      goto LABEL_219;
    }
    if (CFStringHasPrefix(a2, CFSTR("NextIsoMonth")))
    {
      NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
      *((_DWORD *)a5 + 6) = 38;
      v94 = this[1];
      v134[0] = *this;
      v134[1] = v94;
      if (v94)
      {
        v95 = (unint64_t *)(v94 + 1);
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
      }
      v97 = updateDateComponentsWithValues((SInt32 *)&v154, (uint64_t)a3, a4, 0);
      std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v134);
      if ((v97 & 1) != 0)
      {
        v55 = *(_DWORD *)&v145[8] + 1;
        goto LABEL_74;
      }
      goto LABEL_219;
    }
    if (!CFStringHasPrefix(a2, CFSTR("IsoMonth")))
    {
      if (CFStringHasPrefix(a2, CFSTR("LastIsoMonth")))
      {
        NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
        *((_DWORD *)a5 + 6) = 38;
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMdE", &v145[8], &v145[4], v145, &v144);
        v103 = this[1];
        v132[0] = *this;
        v132[1] = v103;
        if (v103)
        {
          v104 = (unint64_t *)(v103 + 1);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 1, v104));
        }
        v106 = updateDateComponentsWithValues((SInt32 *)&v154, (uint64_t)a3, a4, 0);
        std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v132);
        if ((v106 & 1) != 0)
        {
          CFCalendarAddComponents(v12, &at, 0, "dMy", (1 - *(_DWORD *)v145), (1 - *(_DWORD *)&v145[4]), 0xFFFFFFFFLL);
          CFCalendarAddComponents(v12, &at, 0, "M", (DWORD1(v154) - 1));
          CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
          goto LABEL_124;
        }
      }
      else if (CFStringHasPrefix(a2, CFSTR("BeforeLastIsoMonth")))
      {
        NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
        *((_DWORD *)a5 + 6) = 38;
        v107 = this[1];
        v131[0] = *this;
        v131[1] = v107;
        if (v107)
        {
          v108 = (unint64_t *)(v107 + 1);
          do
            v109 = __ldxr(v108);
          while (__stxr(v109 + 1, v108));
        }
        v110 = updateDateComponentsWithValues((SInt32 *)&v154, (uint64_t)a3, a4, 0);
        std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v131);
        if ((v110 & 1) != 0)
        {
          CFCalendarAddComponents(v12, &at, 0, "dMy", (1 - *(_DWORD *)v145), (1 - *(_DWORD *)&v145[4]), 4294967294);
          CFCalendarAddComponents(v12, &at, 0, "M", (DWORD1(v154) - 1));
          CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
          goto LABEL_124;
        }
      }
      else if (CFStringHasPrefix(a2, CFSTR("CompoundDay")))
      {
        NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
        *((_DWORD *)a5 + 6) = 38;
        v111 = this[1];
        v130[0] = *this;
        v130[1] = v111;
        if (v111)
        {
          v112 = (unint64_t *)(v111 + 1);
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
        }
        v114 = updateDateComponentsWithValues((SInt32 *)&v154, (uint64_t)a3, a4, 0);
        std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v130);
        if ((v114 & 1) != 0)
        {
          v115 = CFCalendarGetMaximumRangeOfUnit(v12, 0x200uLL);
          CFCalendarAddComponents(v12, &at, 0, "d", SDWORD1(v156) - (v144 + v115.length * (SDWORD2(v157) - 1)));
          CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
          *(_QWORD *)&v154 = *(_QWORD *)v145;
          DWORD2(v154) = *(_DWORD *)&v145[8];
          DWORD1(v156) = -1;
          goto LABEL_48;
        }
      }
      else
      {
        if (!CFStringHasPrefix(a2, CFSTR("CompoundMonth")))
          goto LABEL_48;
        NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
        *((_DWORD *)a5 + 6) = 38;
        v116 = this[1];
        v129[0] = *this;
        v129[1] = v116;
        if (v116)
        {
          v117 = (unint64_t *)(v116 + 1);
          do
            v118 = __ldxr(v117);
          while (__stxr(v118 + 1, v117));
        }
        v119 = updateDateComponentsWithValues((SInt32 *)&v154, (uint64_t)a3, a4, 0);
        std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v129);
        if ((v119 & 1) != 0)
        {
          v120 = CFCalendarGetMaximumRangeOfUnit(v12, 8uLL);
          CFCalendarAddComponents(v12, &at, 0, "dM", (1 - *(_DWORD *)v145), SDWORD1(v154) - (*(int *)&v145[4] + v120.length * (SHIDWORD(v157) - 1)));
          CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
          goto LABEL_124;
        }
      }
LABEL_219:
      v5 = 0;
      goto LABEL_49;
    }
    NL::DatePeriod::setDisplayKey((const void **)a5, CFSTR("FORMATTED"));
    *((_DWORD *)a5 + 6) = 38;
    v98 = this[1];
    v133[0] = *this;
    v133[1] = v98;
    if (v98)
    {
      v99 = (unint64_t *)(v98 + 1);
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v101 = updateDateComponentsWithValues((SInt32 *)&v154, (uint64_t)a3, a4, 0);
    std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)v133);
    if ((v101 & 1) == 0)
      goto LABEL_219;
    CFCalendarAddComponents(v12, &at, 0, "dM", (1 - *(_DWORD *)v145), (1 - *(_DWORD *)&v145[4]));
    CFCalendarAddComponents(v12, &at, 0, "M", (DWORD1(v154) - 1));
    if (*((_BYTE *)*this + 66))
    {
      if (SDWORD1(v154) < *(int *)&v145[4])
      {
        v102 = 1;
LABEL_205:
        CFCalendarAddComponents(v12, &at, 0, "y", v102);
      }
    }
    else if (SDWORD1(v154) > *(int *)&v145[4])
    {
      v102 = 0xFFFFFFFFLL;
      goto LABEL_205;
    }
    CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
    goto LABEL_124;
  }
  v5 = 0;
  if (*(int *)&v145[8] >= (int)v24
    && (v24 & 0x80000000) == 0
    && *(_DWORD *)&v145[8] - (int)v24 >= *(_DWORD *)&v145[8] - 1970)
  {
    cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_LAST_YEARS"), v24);
    NL::DatePeriod::setDisplayKey((const void **)a5, (const __CFString *)cf);
    *((_DWORD *)a5 + 6) = 37;
    v18 = *(_DWORD *)&v145[4];
    v19 = *(_DWORD *)&v145[8];
    v128 = *(_DWORD *)v145;
    CFCalendarAddComponents(v12, &at, 0, "dMy", (1 - *(_DWORD *)v145), (1 - *(_DWORD *)&v145[4]), v121);
    CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v145[8], &v145[4], v145);
    goto LABEL_78;
  }
LABEL_117:
  if (v160)
    CFRelease(v160);
  return v5;
}

void sub_1A1869D18(_Unwind_Exception *a1)
{
  uint64_t v1;

  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)(v1 - 96), 0);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForAppContext(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  double AbsoluteTime;
  double v12;
  int v13;
  double v14;
  double v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  _OWORD v21[4];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v6 = *(_OWORD *)(a3 + 44);
  v26 = *(_OWORD *)(a3 + 28);
  v27 = v6;
  v7 = *(_OWORD *)(a3 + 76);
  v28 = *(_OWORD *)(a3 + 60);
  v29 = v7;
  v8 = *(_OWORD *)(a3 + 108);
  v22 = *(_OWORD *)(a3 + 92);
  v23 = v8;
  v9 = *(_OWORD *)(a3 + 140);
  v24 = *(_OWORD *)(a3 + 124);
  v25 = v9;
  getCurrentDateComponents(*(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224), v21);
  if ((a2 & 0xFFFFFFFB) != 0)
  {
    if (!NL::DateComponents::isEmpty((NL::DateComponents *)&v26))
      resolveDateComponentsToCurrentDate(*(__CFCalendar **)(a3 + 8), *(const __CFLocale **)(a3 + 16), *(const __CFDate **)(a3 + 224), (NL::DateComponents *)&v26, *(unsigned __int8 *)(*(_QWORD *)a1 + 66));
    if (!NL::DateComponents::isEmpty((NL::DateComponents *)&v22))
      resolveDateComponentsToCurrentDate(*(__CFCalendar **)(a3 + 8), *(const __CFLocale **)(a3 + 16), *(const __CFDate **)(a3 + 224), (NL::DateComponents *)&v22, *(unsigned __int8 *)(*(_QWORD *)a1 + 66));
  }
  v10 = *(unsigned __int8 *)(*(_QWORD *)a1 + 66);
  AbsoluteTime = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v26, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224));
  v12 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v21, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224));
  v13 = *(_DWORD *)(a3 + 24);
  if (v10)
  {
    if (AbsoluteTime < v12 && v13 == 40 && !CFStringsAreEqual(*(const __CFString **)a3, CFSTR("HOLIDAY")))
    {
      while (1)
      {
        v14 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v26, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224));
        if (v14 >= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v21, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224)))break;
        if ((updateDateComponentsWithHolidayReference(*(const __CFDictionary **)(*(_QWORD *)a1 + 24), *(const __CFString **)a3, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224), *(const __CFLocale **)(a3 + 16), (double *)(DWORD2(v26) + 1), (NL::DateComponents *)&v26, (NL::DateComponents *)&v22) & 1) == 0)return 0;
      }
    }
  }
  else if (AbsoluteTime > v12 && v13 == 40 && !CFStringsAreEqual(*(const __CFString **)a3, CFSTR("HOLIDAY")))
  {
    while (1)
    {
      v15 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v26, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224));
      if (v15 <= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v21, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224)))break;
      if ((updateDateComponentsWithHolidayReference(*(const __CFDictionary **)(*(_QWORD *)a1 + 24), *(const __CFString **)a3, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224), *(const __CFLocale **)(a3 + 16), (double *)(DWORD2(v26) - 1), (NL::DateComponents *)&v26, (NL::DateComponents *)&v22) & 1) == 0)return 0;
    }
  }
  v16 = v27;
  *(_OWORD *)(a3 + 28) = v26;
  *(_OWORD *)(a3 + 44) = v16;
  v17 = v29;
  *(_OWORD *)(a3 + 60) = v28;
  *(_OWORD *)(a3 + 76) = v17;
  v18 = v23;
  *(_OWORD *)(a3 + 92) = v22;
  *(_OWORD *)(a3 + 108) = v18;
  v19 = v25;
  result = 1;
  *(_OWORD *)(a3 + 124) = v24;
  *(_OWORD *)(a3 + 140) = v19;
  return result;
}

const __CFDate ***NL::DateConverter::datePeriodForRelativeDate@<X0>(const __CFDate ***this@<X0>, CFStringRef theString@<X1>, NL::DatePeriod **a3@<X8>)
{
  const __CFDate ***v5;
  NL::DatePeriod *v6;
  unsigned int v7;
  unsigned int v8;

  if (theString && (v5 = this, (this = (const __CFDate ***)CFStringGetLength(theString)) != 0))
  {
    v6 = (NL::DatePeriod *)operator new();
    NL::DatePeriod::DatePeriod(v6);
    NL::DatePeriod::setCurrentDate((const void **)v6, **v5);
    NL::DatePeriod::setLocale((const void **)v6, (*v5)[1]);
    if (!NL::DateConverter::updatePeriodForRelativeDate((uint64_t **)v5, theString, (*v5)[1], v6)
      || (this = (const __CFDate ***)NL::DateConverter::updatePeriodForAppContext((uint64_t)v5, *((_DWORD *)*v5 + 10), (uint64_t)v6), !(_DWORD)this)|| (v7 = *((_DWORD *)*v5 + 10), v7 <= 8)&& ((v8 = *((_DWORD *)v6 + 6), ((1 << v7) & 0x1DE) != 0) && (v8 - 43 < 9 || v8 - 11 < 0xC || v8 - 29 < 5)|| v7 == 5 && v8 <= 0x25 && ((1 << v8) & 0x3C078007C0) != 0))
    {
      *a3 = 0;
      NL::DatePeriod::~DatePeriod((const void **)v6);
      return (const __CFDate ***)MEMORY[0x1A1B0E068]();
    }
    else
    {
      *a3 = v6;
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

void sub_1A186A268(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1B0E068](v1, 0x1060C407A40A00CLL);
  _Unwind_Resume(a1);
}

BOOL NL::DateConverter::updatePeriodForRelativeDate(uint64_t **this, const __CFString *a2, const __CFLocale *a3, NL::DatePeriod *a4)
{
  _BOOL8 v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  int v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  __CFCalendar *v19;
  __CFCalendar *v20;
  int v21;
  int v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  const __CFString *v32;
  const __CFString *v33;
  int v34;
  int v35;
  int v36;
  const __CFString *v37;
  const __CFString *v38;
  const __CFString *v39;
  int v40;
  const __CFString *v41;
  const __CFDate *v42;
  uint64_t v43;
  const __CFString *v44;
  const __CFString *v45;
  const __CFString *v46;
  const __CFString *v47;
  const __CFString *v48;
  int v49;
  const __CFString *v50;
  const __CFString *v51;
  const __CFString *v52;
  const __CFString *v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  __CFString *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  CFAbsoluteTime at;
  CFTypeRef cf;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  _BYTE v73[12];
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;

  v4 = 0;
  if (!a2)
    return v4;
  if (!a3)
    return v4;
  v8 = *(_OWORD *)((char *)a4 + 44);
  v84 = *(_OWORD *)((char *)a4 + 28);
  v85 = v8;
  v9 = *(_OWORD *)((char *)a4 + 76);
  v86 = *(_OWORD *)((char *)a4 + 60);
  v87 = v9;
  v10 = *(_OWORD *)((char *)a4 + 108);
  v80 = *(_OWORD *)((char *)a4 + 92);
  v81 = v10;
  v11 = *(_OWORD *)((char *)a4 + 140);
  v82 = *(_OWORD *)((char *)a4 + 124);
  v83 = v11;
  v13 = (char *)a4 + 192;
  v12 = *((_QWORD *)a4 + 24);
  v59 = *((_DWORD *)a4 + 40);
  v60 = *((_DWORD *)a4 + 39);
  v14 = *((_DWORD *)a4 + 41);
  v15 = (char *)a4 + 168;
  v78 = *((_QWORD *)a4 + 21);
  v16 = *((_DWORD *)a4 + 45);
  v79 = *((_DWORD *)a4 + 44);
  v63 = v16;
  v64 = *((_DWORD *)a4 + 46);
  v65 = *((_DWORD *)a4 + 47);
  v76 = v12;
  v61 = v14;
  v62 = *((_DWORD *)a4 + 51);
  v77 = *((_DWORD *)a4 + 50);
  v18 = (char *)a4 + 208;
  v17 = *((_QWORD *)a4 + 26);
  v75 = *((_DWORD *)a4 + 54);
  v74 = v17;
  v72 = -1;
  memset(v73, 255, sizeof(v73));
  v70 = -1;
  v71 = -1;
  v68 = -1;
  v69 = -1;
  v19 = copyCurrentCalendar((uint64_t)a3);
  cf = v19;
  v4 = v19 != 0;
  if (!v19)
    return v4;
  v20 = v19;
  v58 = (__CFString *)MEMORY[0x1A1B0D42C]();
  at = 0.0;
  at = getCurrentTime(**this);
  v21 = *((unsigned __int8 *)*this + 66);
  CFCalendarDecomposeAbsoluteTime(v20, at, "yMdEwHms", &v73[8], &v73[4], v73, &v72, &v71, &v70, &v69, &v68);
  if (CFStringHasPrefix(a2, CFSTR("RelativeNow")))
  {
    *((_DWORD *)a4 + 6) = 39;
    NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("FORMATTED"));
    *(_QWORD *)&v84 = *(_QWORD *)v73;
    DWORD2(v84) = *(_DWORD *)&v73[8];
    DWORD2(v85) = v70;
    v23 = v68;
    v22 = v69;
LABEL_6:
    HIDWORD(v85) = v22;
    LODWORD(v86) = v23;
    goto LABEL_7;
  }
  if (!CFStringHasPrefix(a2, CFSTR("RelativeEvery")))
  {
    if (CFStringHasPrefix(a2, CFSTR("RelativeNext")))
    {
      if (CFStringHasPrefix(a2, CFSTR("RelativeNextTwo")))
      {
        v31 = 2;
      }
      else
      {
        if (!CFStringHasPrefix(a2, CFSTR("RelativeNextThree")))
        {
          v57 = 1;
          v34 = 11;
          v35 = 13;
          v55 = 14;
          v56 = 12;
          v36 = 15;
          goto LABEL_31;
        }
        v31 = 3;
      }
      v57 = v31;
      v34 = 18;
      v35 = 19;
      v55 = 21;
      v56 = 20;
      v36 = 22;
LABEL_31:
      v54 = v36;
      if (CFStringFind(a2, CFSTR("Minute"), 0).location != -1)
      {
        *((_DWORD *)a4 + 6) = 16;
        v37 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_MINUTES"), v57);
        NL::DatePeriod::setDisplayKey((const void **)a4, v37);
        CFCalendarAddComponents(v20, &at, 0, "m", v57);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMdHms", &v73[8], &v73[4], v73, &v70, &v69, &v68);
        *(_QWORD *)&v84 = *(_QWORD *)v73;
        DWORD2(v84) = *(_DWORD *)&v73[8];
        *((_QWORD *)&v85 + 1) = __PAIR64__(v69, v70);
        goto LABEL_7;
      }
      if (CFStringFind(a2, CFSTR("Hour"), 0).location != -1)
      {
        *((_DWORD *)a4 + 6) = 17;
        v38 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_HOURS"), v57);
        NL::DatePeriod::setDisplayKey((const void **)a4, v38);
        CFCalendarAddComponents(v20, &at, 0, "h", v57);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMdHms", &v73[8], &v73[4], v73, &v70, &v69, &v68);
        *(_QWORD *)&v84 = *(_QWORD *)v73;
        DWORD2(v84) = *(_DWORD *)&v73[8];
        DWORD2(v85) = v70;
        goto LABEL_7;
      }
      if (CFStringFind(a2, CFSTR("Day"), 0).location != -1)
      {
        *((_DWORD *)a4 + 6) = v34;
        v41 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_DAYS"), v57);
        NL::DatePeriod::setDisplayKey((const void **)a4, v41);
        CFCalendarAddComponents(v20, &at, 0, "d", v57);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
LABEL_98:
        *(_QWORD *)&v84 = *(_QWORD *)v73;
        goto LABEL_99;
      }
      if (CFStringFind(a2, CFSTR("Weekend"), 0).location != -1)
      {
        *((_DWORD *)a4 + 6) = v35;
        v44 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_WEEKENDS"), v57);
        NL::DatePeriod::setDisplayKey((const void **)a4, v44);
        if (v72 <= 6)
          CFCalendarAddComponents(v20, &at, 0, "d", (7 - v72));
        CFCalendarAddComponents(v20, &at, 0, "w", v57);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yEw", &v73[8], &v72, &v71);
        DWORD1(v86) = v72;
        *(_QWORD *)&v87 = __PAIR64__(*(unsigned int *)&v73[8], v71);
        CFCalendarAddComponents(v20, &at, 0, "d", 1);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yEw", &v73[8], &v72, &v71);
        goto LABEL_70;
      }
      if (CFStringFind(a2, CFSTR("Week"), 0).location != -1)
      {
        *((_DWORD *)a4 + 6) = v56;
        v45 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_WEEKS"), v57);
        NL::DatePeriod::setDisplayKey((const void **)a4, v45);
        CFCalendarAddComponents(v20, &at, 0, "w", v57);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yw", &v73[8], &v71);
        goto LABEL_82;
      }
      if (CFStringFind(a2, CFSTR("Month"), 0).location != -1)
      {
        *((_DWORD *)a4 + 6) = v55;
        v47 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_MONTHS"), v57);
        NL::DatePeriod::setDisplayKey((const void **)a4, v47);
        CFCalendarAddComponents(v20, &at, 0, "dM", (1 - *(_DWORD *)v73), v57);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_106;
      }
      if (CFStringFind(a2, CFSTR("Year"), 0).location == -1)
        goto LABEL_7;
      *((_DWORD *)a4 + 6) = v54;
      v50 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_YEARS"), v57);
      NL::DatePeriod::setDisplayKey((const void **)a4, v50);
      CFCalendarAddComponents(v20, &at, 0, "dMy", (1 - *(_DWORD *)v73), (1 - *(_DWORD *)&v73[4]), v57);
      CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
LABEL_99:
      DWORD2(v84) = *(_DWORD *)&v73[8];
      goto LABEL_7;
    }
    if (CFStringHasPrefix(a2, CFSTR("RelativeLast")))
    {
      if (CFStringFind(a2, CFSTR("Weekend"), 0).location != -1)
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("LAST_WEEKEND"));
        *((_DWORD *)a4 + 6) = 7;
        CFCalendarAddComponents(v20, &at, 0, "E", -v72);
        if (v72 <= 2)
          CFCalendarAddComponents(v20, &at, 0, "d", 7);
LABEL_27:
        CFCalendarDecomposeAbsoluteTime(v20, at, "yEw", &v73[8], &v72, &v71);
        DWORD1(v86) = v72;
        *(_QWORD *)&v87 = __PAIR64__(*(unsigned int *)&v73[8], v71);
        CFCalendarAddComponents(v20, &at, 0, "d", 1);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yEw", &v73[8], &v72, &v71);
LABEL_70:
        DWORD1(v82) = v72;
        *(_QWORD *)&v83 = __PAIR64__(*(unsigned int *)&v73[8], v71);
        goto LABEL_7;
      }
      if (CFStringFind(a2, CFSTR("Week"), 0).location != -1)
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("LAST_WEEK"));
        *((_DWORD *)a4 + 6) = 8;
        v40 = v71 - 1;
LABEL_83:
        *(_QWORD *)&v87 = __PAIR64__(*(unsigned int *)&v73[8], v40);
        goto LABEL_7;
      }
      if (CFStringFind(a2, CFSTR("Month"), 0).location == -1)
      {
        if (CFStringFind(a2, CFSTR("Year"), 0).location == -1)
          goto LABEL_7;
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("LAST_YEAR"));
        *((_DWORD *)a4 + 6) = 10;
        CFCalendarAddComponents(v20, &at, 0, "dMy", (1 - *(_DWORD *)v73), (1 - *(_DWORD *)&v73[4]), 0xFFFFFFFFLL);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_99;
      }
      NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("LAST_MONTH"));
      *((_DWORD *)a4 + 6) = 9;
      CFCalendarAddComponents(v20, &at, 0, "dM", (1 - *(_DWORD *)v73), 0xFFFFFFFFLL);
      CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
      goto LABEL_106;
    }
    if (CFStringHasPrefix(a2, CFSTR("RelativeThis")))
    {
      if (CFStringFind(a2, CFSTR("Weekend"), 0).location != -1)
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("THIS_WEEKEND"));
        *((_DWORD *)a4 + 6) = 2;
        if (v72 <= 6)
          CFCalendarAddComponents(v20, &at, 0, "d", (7 - v72));
        goto LABEL_27;
      }
      if (CFStringFind(a2, CFSTR("Week"), 0).location != -1)
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("THIS_WEEK"));
        *((_DWORD *)a4 + 6) = 3;
LABEL_82:
        v40 = v71;
        goto LABEL_83;
      }
      if (CFStringFind(a2, CFSTR("Month"), 0).location == -1)
      {
        if (CFStringFind(a2, CFSTR("Year"), 0).location == -1)
          goto LABEL_7;
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("THIS_YEAR"));
        *((_DWORD *)a4 + 6) = 5;
        CFCalendarAddComponents(v20, &at, 0, "dM", (1 - *(_DWORD *)v73), (1 - *(_DWORD *)&v73[4]));
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_99;
      }
      NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("THIS_MONTH"));
      *((_DWORD *)a4 + 6) = 4;
      CFCalendarAddComponents(v20, &at, 0, "d", (1 - *(_DWORD *)v73));
      CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
LABEL_106:
      *(_QWORD *)((char *)&v84 + 4) = *(_QWORD *)&v73[4];
      goto LABEL_7;
    }
    if (!CFStringHasPrefix(a2, CFSTR("RelativeEnd")))
    {
      if (CFStringHasSuffix(a2, CFSTR("TodayDate")))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("TODAY"));
        *((_DWORD *)a4 + 6) = 1;
        *(_QWORD *)&v84 = *(_QWORD *)v73;
        DWORD2(v84) = *(_DWORD *)&v73[8];
        if (!NL::DateComponents::isEmpty((NL::DateComponents *)&v80))
        {
          *(_QWORD *)&v80 = *(_QWORD *)v73;
          DWORD2(v80) = *(_DWORD *)&v73[8];
        }
        goto LABEL_7;
      }
      if (CFStringHasSuffix(a2, CFSTR("YesterdayDate")))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("YESTERDAY"));
        *((_DWORD *)a4 + 6) = 6;
        CFCalendarAddComponents(v20, &at, 0, "d", 0xFFFFFFFFLL);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_98;
      }
      if (CFStringHasSuffix(a2, CFSTR("TomorrowDate")))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("TOMORROW"));
        *((_DWORD *)a4 + 6) = 11;
        CFCalendarAddComponents(v20, &at, 0, "d", 1);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_98;
      }
      if (CFStringHasSuffix(a2, CFSTR("TwoDaysDate")))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("VAL_2-N_DAYS_AGO"));
        *((_DWORD *)a4 + 6) = 23;
        CFCalendarAddComponents(v20, &at, 0, "d", 4294967294);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_98;
      }
      if (CFStringHasSuffix(a2, CFSTR("ThreeDaysDate")))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("VAL_3-N_DAYS_AGO"));
        *((_DWORD *)a4 + 6) = 23;
        CFCalendarAddComponents(v20, &at, 0, "d", 4294967293);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_98;
      }
      if (CFStringHasSuffix(a2, CFSTR("TwoWeeksDate")))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("VAL_2-N_WEEKS_AGO"));
        *((_DWORD *)a4 + 6) = 24;
        v40 = v71 - 2;
        goto LABEL_83;
      }
      if (CFStringHasSuffix(a2, CFSTR("ThreeWeeksDate")))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("VAL_3-N_WEEKS_AGO"));
        *((_DWORD *)a4 + 6) = 24;
        v40 = v71 - 3;
        goto LABEL_83;
      }
      if (CFStringHasSuffix(a2, CFSTR("TwoMonthsDate")))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("VAL_2-N_MONTHS_AGO"));
        *((_DWORD *)a4 + 6) = 25;
        CFCalendarAddComponents(v20, &at, 0, "dM", (1 - *(_DWORD *)v73), 4294967294);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_106;
      }
      if (CFStringHasSuffix(a2, CFSTR("ThreeMonthsDate")))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("VAL_3-N_MONTHS_AGO"));
        *((_DWORD *)a4 + 6) = 25;
        CFCalendarAddComponents(v20, &at, 0, "dM", (1 - *(_DWORD *)v73), 4294967293);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_106;
      }
      if (CFStringHasSuffix(a2, CFSTR("TwoYearsDate")))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("VAL_2-N_YEARS_AGO"));
        *((_DWORD *)a4 + 6) = 26;
        CFCalendarAddComponents(v20, &at, 0, "dMy", (1 - *(_DWORD *)v73), (1 - *(_DWORD *)&v73[4]), 4294967294);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
      }
      else
      {
        if (!CFStringHasSuffix(a2, CFSTR("ThreeYearsDate")))
          goto LABEL_7;
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("VAL_3-N_YEARS_AGO"));
        *((_DWORD *)a4 + 6) = 26;
        CFCalendarAddComponents(v20, &at, 0, "dMy", (1 - *(_DWORD *)v73), (1 - *(_DWORD *)&v73[4]), 4294967293);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
      }
      goto LABEL_99;
    }
    if (!CFStringHasSuffix(a2, CFSTR("IsoMonthDate")))
      goto LABEL_7;
    NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("FORMATTED"));
    *((_DWORD *)a4 + 6) = 38;
    v42 = (const __CFDate *)**this;
    if (v21)
    {
      if (at <= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v84, v20, v42)
        || (!DWORD2(v85) || SDWORD2(v85) >= v70)
        && (!DWORD1(v86) || SDWORD1(v86) >= v72)
        && (!(_DWORD)v84 || (int)v84 >= *(int *)v73)
        && (!DWORD1(v84) || SDWORD1(v84) >= *(int *)&v73[4]))
      {
        goto LABEL_97;
      }
      v43 = 1;
    }
    else
    {
      if (at >= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v84, v20, v42)
        && (!DWORD2(v85) || SDWORD2(v85) < v70)
        && (!DWORD1(v86) || SDWORD1(v86) < v72)
        && (!(_DWORD)v84 || (int)v84 < *(int *)v73)
        && (!DWORD1(v84) || SDWORD1(v84) < *(int *)&v73[4]))
      {
        goto LABEL_97;
      }
      v43 = 0xFFFFFFFFLL;
    }
    CFCalendarAddComponents(v20, &at, 0, "y", v43);
LABEL_97:
    CFCalendarAddComponents(v20, &at, 0, "dM", -*(_DWORD *)v73, (1 - *(_DWORD *)&v73[4]));
    CFCalendarAddComponents(v20, &at, 0, "dM", 0xFFFFFFFFLL, DWORD1(v84));
    CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
    goto LABEL_98;
  }
  if (CFStringHasPrefix(a2, CFSTR("RelativeEveryTwo")))
  {
    v30 = 2;
  }
  else if (CFStringHasPrefix(a2, CFSTR("RelativeEveryThree")))
  {
    v30 = 3;
  }
  else
  {
    v30 = 1;
  }
  CFCalendarDecomposeAbsoluteTime(v20, at, "yMdHms", &v73[8], &v73[4], v73, &v70, &v69, &v68);
  if (CFStringFind(a2, CFSTR("Second"), 0).location != -1)
  {
    *((_DWORD *)a4 + 6) = 43;
    v32 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_SECONDS"), v30);
    NL::DatePeriod::setDisplayKey((const void **)a4, v32);
    *(_QWORD *)&v84 = *(_QWORD *)v73;
    DWORD2(v84) = *(_DWORD *)&v73[8];
    DWORD2(v85) = v70;
    v23 = v68;
    v22 = v69;
    v65 = v30;
    goto LABEL_6;
  }
  if (CFStringFind(a2, CFSTR("Minute"), 0).location == -1)
  {
    if (CFStringFind(a2, CFSTR("Hour"), 0).location == -1)
    {
      if (CFStringFind(a2, CFSTR("IsoDay"), 0).location == -1)
      {
        if (CFStringFind(a2, CFSTR("IsoMonth"), 0).location == -1)
        {
          if (CFStringFind(a2, CFSTR("Day"), 0).location == -1)
          {
            if (CFStringFind(a2, CFSTR("Weekend"), 0).location == -1)
            {
              if (CFStringFind(a2, CFSTR("Week"), 0).location == -1)
              {
                if (CFStringFind(a2, CFSTR("Month"), 0).location == -1)
                {
                  if (CFStringFind(a2, CFSTR("Year"), 0).location != -1)
                  {
                    *((_DWORD *)a4 + 6) = 51;
                    v53 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_YEARS"), v30);
                    NL::DatePeriod::setDisplayKey((const void **)a4, v53);
                    LODWORD(v84) = *(_DWORD *)v73;
                    *(_QWORD *)((char *)&v84 + 4) = *(_QWORD *)&v73[4];
                    v61 = v30;
                  }
                }
                else
                {
                  *((_DWORD *)a4 + 6) = 50;
                  v52 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_MONTHS"), v30);
                  NL::DatePeriod::setDisplayKey((const void **)a4, v52);
                  LODWORD(v84) = *(_DWORD *)v73;
                  *(_QWORD *)((char *)&v84 + 4) = *(_QWORD *)&v73[4];
                  v59 = v30;
                }
                goto LABEL_7;
              }
              *((_DWORD *)a4 + 6) = 49;
              v51 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_WEEKS"), v30);
              NL::DatePeriod::setDisplayKey((const void **)a4, v51);
              DWORD1(v86) = v72;
              *(_QWORD *)&v87 = __PAIR64__(*(unsigned int *)&v73[8], v71);
            }
            else
            {
              *((_DWORD *)a4 + 6) = 48;
              v48 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_WEEKENDS"), v30);
              NL::DatePeriod::setDisplayKey((const void **)a4, v48);
              v49 = 7;
              if (v72 != 7)
              {
                CFCalendarAddComponents(v20, &at, 0, "d", (7 - v72));
                CFCalendarDecomposeAbsoluteTime(v20, at, "yEw", &v73[8], &v72, &v71);
                v49 = v72;
              }
              DWORD1(v86) = v49;
              *(_QWORD *)&v87 = __PAIR64__(*(unsigned int *)&v73[8], v71);
              DWORD1(v82) = 1;
            }
            v62 = v30;
          }
          else
          {
            *((_DWORD *)a4 + 6) = 46;
            v46 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_DAYS"), v30);
            NL::DatePeriod::setDisplayKey((const void **)a4, v46);
            LODWORD(v84) = *(_DWORD *)v73;
            *(_QWORD *)((char *)&v84 + 4) = *(_QWORD *)&v73[4];
            v60 = v30;
          }
        }
        else
        {
          *((_DWORD *)a4 + 6) = 52;
          NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("VAL_1-N_EVERY_ORDINAL_ANY:FORMATTED"));
          v61 = v30;
        }
      }
      else
      {
        *((_DWORD *)a4 + 6) = 52;
        NL::DatePeriod::setDisplayKey((const void **)a4, CFSTR("VAL_1-N_EVERY_ORDINAL_ANY:FORMATTED"));
        v62 = v30;
      }
    }
    else
    {
      *((_DWORD *)a4 + 6) = 45;
      v39 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_HOURS"), v30);
      NL::DatePeriod::setDisplayKey((const void **)a4, v39);
      *(_QWORD *)&v84 = *(_QWORD *)v73;
      DWORD2(v84) = *(_DWORD *)&v73[8];
      DWORD2(v85) = v70;
      v63 = v30;
    }
  }
  else
  {
    *((_DWORD *)a4 + 6) = 44;
    v33 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VAL_%d-N_EVERY_MINUTES"), v30);
    NL::DatePeriod::setDisplayKey((const void **)a4, v33);
    *(_QWORD *)&v84 = *(_QWORD *)v73;
    DWORD2(v84) = *(_DWORD *)&v73[8];
    *((_QWORD *)&v85 + 1) = __PAIR64__(v69, v70);
    v64 = v30;
  }
LABEL_7:
  v24 = v85;
  *(_OWORD *)((char *)a4 + 28) = v84;
  *(_OWORD *)((char *)a4 + 44) = v24;
  v25 = v87;
  *(_OWORD *)((char *)a4 + 60) = v86;
  *(_OWORD *)((char *)a4 + 76) = v25;
  v26 = v81;
  *(_OWORD *)((char *)a4 + 92) = v80;
  *(_OWORD *)((char *)a4 + 108) = v26;
  v27 = v83;
  *(_OWORD *)((char *)a4 + 124) = v82;
  *(_OWORD *)((char *)a4 + 140) = v27;
  v28 = v78;
  *((_DWORD *)v15 + 2) = v79;
  *(_QWORD *)v15 = v28;
  *((_DWORD *)v13 + 2) = v77;
  *(_QWORD *)v13 = v76;
  *((_DWORD *)v18 + 2) = v75;
  *(_QWORD *)v18 = v74;
  *((_DWORD *)a4 + 39) = v60;
  *((_DWORD *)a4 + 40) = v59;
  *((_DWORD *)a4 + 41) = v61;
  *((_DWORD *)a4 + 45) = v63;
  *((_DWORD *)a4 + 46) = v64;
  *((_DWORD *)a4 + 47) = v65;
  *((_DWORD *)a4 + 51) = v62;
  NL::DatePeriod::setCalendarWithIdentifier((const void **)a4, v58);
  if (cf)
    CFRelease(cf);
  return v4;
}

void sub_1A186BB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26,uint64_t a27,const void *a28)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a26, 0);
  nlp::CFScopedPtr<__CFCalendar *>::reset(&a28, 0);
  _Unwind_Resume(a1);
}

uint64_t updateDateComponentsWithValues(SInt32 *a1, uint64_t a2, CFDictionaryRef theDict, int a4)
{
  const __CFDictionary *v4;
  CFIndex Count;
  unint64_t v9;
  const void **v10;
  size_t v11;
  const __CFString *v12;
  const __CFString *Value;
  SInt32 v14;
  int HasPrefix;
  const __CFDictionary *v16;
  const __CFString *v17;
  int IntValue;
  const __CFString *v19;
  SInt32 v20;
  int v21;
  int v22;
  uint64_t result;
  int v24;
  int v25;
  SInt32 v26;
  int v27;
  _BYTE v28[12];
  int v29;
  _BYTE *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!theDict)
    return 0;
  LODWORD(v4) = a4;
  Count = CFDictionaryGetCount(theDict);
  MEMORY[0x1E0C80A78]();
  v10 = (const void **)&v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v9 >= 0x200)
    v11 = 512;
  else
    v11 = v9;
  bzero(&v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v11);
  CFDictionaryGetKeysAndValues(theDict, v10, 0);
  if (Count < 1)
  {
LABEL_77:
    if (a1[10] || a1[11] || a1[12])
    {
      a1[13] = a1[2];
      a1[2] = 0;
    }
    v25 = a1[4];
    if (!v25)
      return 1;
    v26 = a1[6];
    if (*((_QWORD *)a1 + 3))
    {
      if (!v26 || v25 != 2 && v25 < 5)
        return 1;
      v27 = v26 % 12 + 12;
    }
    else
    {
      if (v25 >= 8)
        return 1;
      v27 = dword_1A18D4280[v25 - 1];
    }
    a1[6] = v27;
    return 1;
  }
  v30 = v28;
  v29 = 1;
  v31 = (int)v4;
  v32 = a2;
  do
  {
    v12 = (const __CFString *)*v10;
    if (!CFStringHasSuffix((CFStringRef)*v10, CFSTR("Date")) && !CFStringHasPrefix(v12, CFSTR("NUMBERS")))
    {
      if (CFStringHasPrefix(v12, CFSTR("SPELLED")))
      {
        if ((v4 & 1) == 0)
        {
          Value = (const __CFString *)CFDictionaryGetValue(theDict, v12);
          v14 = intFromSpelledNumber(Value, a2);
          if (v14 < 0)
            return 0;
          a1[2] = v14;
        }
      }
      else
      {
        HasPrefix = CFStringHasPrefix(v12, CFSTR("Num"));
        v16 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v12);
        v4 = v16;
        if (HasPrefix)
        {
          if (CFDictionaryContainsKey(v16, CFSTR("NUMBERS")))
          {
            v17 = (const __CFString *)CFDictionaryGetValue(v4, CFSTR("NUMBERS"));
            IntValue = intFromSpelledNumber(v17, v32);
            if (IntValue < 0)
              return 0;
          }
          else if (CFDictionaryContainsKey(v4, CFSTR("DIGITS")))
          {
            v19 = (const __CFString *)CFDictionaryGetValue(v4, CFSTR("DIGITS"));
            IntValue = CFStringGetIntValue(v19);
          }
          else
          {
            IntValue = -1;
          }
          if (CFStringHasPrefix(v12, CFSTR("NumWeeks")))
            a1[14] = IntValue;
          if (CFStringHasPrefix(v12, CFSTR("NumYears")))
            a1[15] = IntValue;
          goto LABEL_29;
        }
        if (CFStringHasPrefix(v12, CFSTR("d")) || CFStringHasPrefix(v12, CFSTR("DAY_ORDINAL")))
        {
          *a1 = CFStringGetIntValue((CFStringRef)v4);
          a2 = v32;
          LOBYTE(v4) = v31;
          goto LABEL_9;
        }
        if (CFStringHasPrefix(v12, CFSTR("E")))
        {
          a1[9] = CFStringGetIntValue((CFStringRef)v4);
          goto LABEL_29;
        }
        if (CFStringHasPrefix(v12, CFSTR("M")))
        {
          a1[1] = CFStringGetIntValue((CFStringRef)v4);
          goto LABEL_29;
        }
        if (!CFStringHasPrefix(v12, CFSTR("y")) && !CFStringHasPrefix(v12, CFSTR("Y")))
        {
          if (CFStringHasPrefix(v12, CFSTR("F")))
          {
            a1[10] = CFStringGetIntValue((CFStringRef)v4);
          }
          else if (CFStringHasPrefix(v12, CFSTR("w")))
          {
            a1[12] = CFStringGetIntValue((CFStringRef)v4);
          }
          else if (CFStringHasPrefix(v12, CFSTR("W")))
          {
            a1[11] = CFStringGetIntValue((CFStringRef)v4);
          }
          else if (CFStringHasPrefix(v12, CFSTR("G")))
          {
            a1[5] = CFStringGetIntValue((CFStringRef)v4);
          }
          else if (CFStringHasPrefix(v12, CFSTR("q")) || CFStringHasPrefix(v12, CFSTR("Q")))
          {
            a1[3] = CFStringGetIntValue((CFStringRef)v4);
          }
          else if (CFStringHasPrefix(v12, CFSTR("h")) || CFStringHasPrefix(v12, CFSTR("H")))
          {
            a1[6] = CFStringGetIntValue((CFStringRef)v4);
          }
          else if (CFStringHasPrefix(v12, CFSTR("m")))
          {
            a1[7] = CFStringGetIntValue((CFStringRef)v4);
          }
          else
          {
            if (!CFStringHasPrefix(v12, CFSTR("s")))
            {
              result = CFStringHasPrefix(v12, CFSTR("a"));
              if (!(_DWORD)result)
                return result;
              if (CFStringHasPrefix((CFStringRef)v4, CFSTR("am")))
              {
                v24 = 1;
              }
              else if (CFStringHasPrefix((CFStringRef)v4, CFSTR("pm")))
              {
                v24 = 2;
              }
              else if (CFStringHasPrefix((CFStringRef)v4, CFSTR("morning")))
              {
                v24 = 3;
              }
              else if (CFStringHasPrefix((CFStringRef)v4, CFSTR("noon")))
              {
                v24 = 4;
              }
              else if (CFStringHasPrefix((CFStringRef)v4, CFSTR("afternoon")))
              {
                v24 = 5;
              }
              else if (CFStringHasPrefix((CFStringRef)v4, CFSTR("evening")))
              {
                v24 = 6;
              }
              else
              {
                if (!CFStringHasPrefix((CFStringRef)v4, CFSTR("night")))
                  goto LABEL_29;
                v24 = 7;
              }
              a1[4] = v24;
              goto LABEL_29;
            }
            a1[8] = CFStringGetIntValue((CFStringRef)v4);
          }
LABEL_29:
          a2 = v32;
          LOBYTE(v4) = v31;
          goto LABEL_9;
        }
        v20 = CFStringGetIntValue((CFStringRef)v4);
        v29 = (v20 < 2101) & v29;
        a1[2] = v20;
        if (CFStringCompare(v12, CFSTR("yy"), 0))
          goto LABEL_29;
        v21 = a1[2];
        a2 = v32;
        LOBYTE(v4) = v31;
        if (v21 > 69)
          v22 = v21 + 1000;
        else
          v22 = v21 + 2000;
        a1[2] = v22;
      }
    }
LABEL_9:
    ++v10;
    --Count;
  }
  while (Count);
  if ((v29 & 1) != 0)
    goto LABEL_77;
  return 0;
}

uint64_t intValueForNumberInValues(const __CFLocale *a1, CFDictionaryRef theDict)
{
  const __CFString *Value;
  uint64_t result;
  const __CFString *v6;

  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("SPELLED"));
  if (!Value)
  {
    v6 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("DIGITS"));
    if (!v6)
    {
      v6 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("NON_YEAR_DIGITS"));
      if (!v6)
      {
        v6 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("NON_MONTH_DIGITS"));
        if (!v6)
        {
          v6 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("NON_DAY_DIGITS"));
          if (!v6)
            return 0xFFFFFFFFLL;
        }
      }
    }
    return CFStringGetIntValue(v6);
  }
  result = intFromSpelledNumber(Value, (uint64_t)a1);
  if ((result & 0x80000000) != 0)
  {
    v6 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("NUMBERS"));
    return CFStringGetIntValue(v6);
  }
  return result;
}

void NL::DateConverter::mergeRange(NL::DateConverter *this@<X0>, const NL::DatePeriod *a2@<X1>, const NL::DatePeriod *a3@<X3>, int a4@<W2>, int a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  const __CFLocale *v8;
  __CFCalendar *v9;
  BOOL v10;
  const __CFDate *v16;
  __int128 v18;
  __int128 v19;
  BOOL v20;
  int v21;
  _BOOL4 v22;
  double v23;
  _BOOL4 v24;
  double v25;
  double v26;
  double v27;
  char v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int updated;
  double AbsoluteTime;
  uint64_t v37;
  const __CFString *v38;
  __int128 v39;
  __int128 v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  const __CFString *v48;
  _OWORD v49[4];
  _OWORD v50[4];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  v9 = (__CFCalendar *)*((_QWORD *)a2 + 1);
  v8 = (const __CFLocale *)*((_QWORD *)a2 + 2);
  if (v9)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (v10)
    goto LABEL_6;
  v16 = (const __CFDate *)*((_QWORD *)a2 + 28);
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  NL::DatePeriod::resolveDateComponents(a2, (NL::DateComponents *)&v63, (NL::DateComponents *)&v51, a4, *((unsigned __int8 *)a2 + 240));
  if (NL::DateComponents::isEmpty((NL::DateComponents *)&v63))
  {
    v63 = v51;
    v64 = v52;
    v65 = v53;
    v66 = v54;
  }
  NL::DatePeriod::resolveDateComponents(a3, (NL::DateComponents *)&v59, (NL::DateComponents *)&v51, a5, *((unsigned __int8 *)a3 + 240));
  if (NL::DateComponents::isEmpty((NL::DateComponents *)&v59)
    || !NL::DateComponents::isEmpty((NL::DateComponents *)&v51))
  {
    v59 = v51;
    v60 = v52;
    v61 = v53;
    v62 = v54;
  }
  if (a6
    && ((_DWORD)v63 && !(_DWORD)v59
     || DWORD1(v63) && !DWORD1(v59)
     || DWORD2(v63) && !DWORD2(v59)
     || DWORD1(v65) && !DWORD1(v61)))
  {
    goto LABEL_6;
  }
  getCurrentDateComponents(v9, v16, v50);
  v18 = *(_OWORD *)((char *)a2 + 172);
  v55 = *(_OWORD *)((char *)a2 + 156);
  v56 = v18;
  v19 = *(_OWORD *)((char *)a2 + 204);
  v57 = *(_OWORD *)((char *)a2 + 188);
  v58 = v19;
  if (DWORD1(v61) && !(_DWORD)v59 && NL::DateComponents::isEmpty((const NL::DatePeriod *)((char *)a3 + 156)))
    resolveDateComponentsToCurrentDate(v9, v8, v16, (NL::DateComponents *)&v59, *(unsigned __int8 *)(*(_QWORD *)this + 66));
  if (DWORD1(v65)
    && !(_DWORD)v63
    && NL::DateComponents::isEmpty((const NL::DatePeriod *)((char *)a2 + 156))
    && !*(_BYTE *)(*(_QWORD *)this + 66))
  {
    resolveDateComponentsToCurrentDate(v9, v8, v16, (NL::DateComponents *)&v63, 0);
    while (1)
    {
      AbsoluteTime = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v63, v9, v16);
      if (AbsoluteTime <= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v59, v9, v16))
        break;
      updateDateComponentsForWeekdayWithWeekOffset(v9, v8, v16, (NL::DateComponents *)&v63, -1);
    }
  }
  if (DWORD1(v59) && !DWORD2(v59) && NL::DateComponents::isEmpty((const NL::DatePeriod *)((char *)a3 + 156)))
    resolveDateComponentsToCurrentDate(v9, v8, v16, (NL::DateComponents *)&v59, *(unsigned __int8 *)(*(_QWORD *)this + 66));
  if (DWORD1(v63) && !DWORD2(v63) && NL::DateComponents::isEmpty((const NL::DatePeriod *)((char *)a2 + 156)))
  {
    resolveDateComponentsToCurrentDate(v9, v8, v16, (NL::DateComponents *)&v63, *(unsigned __int8 *)(*(_QWORD *)this + 66));
    memset(v49, 0, sizeof(v49));
    v20 = *(_BYTE *)(*(_QWORD *)this + 66) == 0;
    v21 = *(_BYTE *)(*(_QWORD *)this + 66) ? 1 : -1;
    DWORD2(v49[0]) = v21;
    v22 = !v20;
    v23 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v63, v9, v16);
    if (v22 != v23 > NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v59, v9, v16))
    {
      do
      {
        updateDateComponentsWithOffsetComponents((unint64_t)v9, v8, v16, (NL::DateComponents *)&v63, (const NL::DateComponents *)v49);
        v24 = *(_BYTE *)(*(_QWORD *)this + 66) != 0;
        v25 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v63, v9, v16);
      }
      while (((v24 ^ (v25 > NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v59, v9, v16))) & 1) != 0);
    }
  }
  if (!NL::DateComponents::isEmpty((const NL::DatePeriod *)((char *)a2 + 156))
    && !NL::DateComponents::isEmpty((const NL::DatePeriod *)((char *)a3 + 156)))
  {
    goto LABEL_87;
  }
  if (!NL::DateComponents::isTime((NL::DateComponents *)&v59))
  {
    if (*(_BYTE *)(*(_QWORD *)this + 66))
    {
      v28 = 1;
    }
    else
    {
      v33 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v59, v9, v16);
      v28 = 1;
      if (v33 > NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v50, v9, v16)
        && *((_DWORD *)a3 + 6) == 40
        && !CFStringsAreEqual(*(const __CFString **)a3, CFSTR("HOLIDAY")))
      {
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        while (1)
        {
          v34 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v59, v9, v16);
          if (v34 <= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v50, v9, v16))
            break;
          updated = updateDateComponentsWithHolidayReference(*(const __CFDictionary **)(*(_QWORD *)this + 24), *(const __CFString **)a3, v9, v16, v8, (double *)(DWORD2(v59) - 1), (NL::DateComponents *)&v59, (NL::DateComponents *)&v51);
          v28 = updated;
          if (!updated)
            break;
          if (!NL::DateComponents::isEmpty((NL::DateComponents *)&v51))
          {
            v59 = v51;
            v60 = v52;
            v61 = v53;
            v62 = v54;
          }
        }
      }
    }
    v29 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v63, v9, v16);
    if (v29 > NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v59, v9, v16))
    {
      if (*((_DWORD *)a2 + 6) != 40 || CFStringsAreEqual(*(const __CFString **)a2, CFSTR("HOLIDAY")))
        goto LABEL_6;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      while (1)
      {
        v30 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v63, v9, v16);
        if (v30 <= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v59, v9, v16))
          break;
        if ((updateDateComponentsWithHolidayReference(*(const __CFDictionary **)(*(_QWORD *)this + 24), *(const __CFString **)a2, v9, v16, v8, (double *)(DWORD2(v63) - 1), (NL::DateComponents *)&v63, (NL::DateComponents *)&v51) & 1) == 0)goto LABEL_6;
      }
    }
    if ((v28 & 1) != 0)
      goto LABEL_87;
LABEL_6:
    *a7 = 0;
    return;
  }
  NL::DateComponents::merge((int *)&v63, (int *)&v59);
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  if (*(_BYTE *)(*(_QWORD *)this + 66))
  {
LABEL_49:
    v26 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v63, v9, v16);
    if (v26 < NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v50, v9, v16)
      && *((_DWORD *)a2 + 6) == 40
      && !CFStringsAreEqual(*(const __CFString **)a2, CFSTR("HOLIDAY")))
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      do
        v27 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v63, v9, v16);
      while (v27 > NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v59, v9, v16)
           && (updateDateComponentsWithHolidayReference(*(const __CFDictionary **)(*(_QWORD *)this + 24), *(const __CFString **)a2, v9, v16, v8, (double *)(DWORD2(v63) - 1), (NL::DateComponents *)&v63, (NL::DateComponents *)&v51) & 1) != 0);
    }
    goto LABEL_87;
  }
  v31 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v63, v9, v16);
  if (v31 <= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v50, v9, v16))
  {
    if (!*(_BYTE *)(*(_QWORD *)this + 66))
      goto LABEL_87;
    goto LABEL_49;
  }
  if (*((_DWORD *)a3 + 6) == 40 && !CFStringsAreEqual(*(const __CFString **)a3, CFSTR("HOLIDAY")))
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    while (1)
    {
      v32 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v63, v9, v16);
      if (v32 <= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v50, v9, v16)
        || !updateDateComponentsWithHolidayReference(*(const __CFDictionary **)(*(_QWORD *)this + 24), *(const __CFString **)a2, v9, v16, v8, (double *)(DWORD2(v63) - 1), (NL::DateComponents *)&v63, (NL::DateComponents *)&v51))
      {
        break;
      }
      if (!NL::DateComponents::isEmpty((NL::DateComponents *)&v51))
      {
        v63 = v51;
        v64 = v52;
        v65 = v53;
        v66 = v54;
      }
    }
  }
LABEL_87:
  v37 = operator new();
  NL::DatePeriod::DatePeriod((NL::DatePeriod *)v37);
  *a7 = v37;
  v38 = (const __CFString *)MEMORY[0x1A1B0D42C](v9);
  NL::DatePeriod::setCalendarWithIdentifier((const void **)v37, v38);
  NL::DatePeriod::setCurrentDate((const void **)v37, v16);
  NL::DatePeriod::setLocale((const void **)v37, v8);
  if (NL::DateComponents::isEmpty((NL::DateComponents *)&v63)
    || NL::DateComponents::isEmpty((NL::DateComponents *)&v59))
  {
    if (NL::DateComponents::isEmpty((NL::DateComponents *)&v63))
      goto LABEL_93;
    v39 = v64;
    *(_OWORD *)(v37 + 28) = v63;
    *(_OWORD *)(v37 + 44) = v39;
    v40 = v66;
    *(_OWORD *)(v37 + 60) = v65;
    *(_OWORD *)(v37 + 76) = v40;
    v41 = 38;
  }
  else
  {
    v42 = v64;
    *(_OWORD *)(v37 + 28) = v63;
    *(_OWORD *)(v37 + 44) = v42;
    v43 = v66;
    *(_OWORD *)(v37 + 60) = v65;
    *(_OWORD *)(v37 + 76) = v43;
    v44 = v60;
    *(_OWORD *)(v37 + 92) = v59;
    *(_OWORD *)(v37 + 108) = v44;
    v45 = v62;
    *(_OWORD *)(v37 + 124) = v61;
    v41 = 41;
    *(_OWORD *)(v37 + 140) = v45;
  }
  v46 = v56;
  *(_OWORD *)(v37 + 156) = v55;
  *(_OWORD *)(v37 + 172) = v46;
  v47 = v58;
  *(_OWORD *)(v37 + 188) = v57;
  *(_OWORD *)(v37 + 204) = v47;
  *(_DWORD *)(v37 + 24) = v41;
LABEL_93:
  if (NL::DateComponents::isEmpty((NL::DateComponents *)&v55))
  {
    NL::DatePeriod::setDisplayKey((const void **)v37, CFSTR("FORMATTED"));
  }
  else
  {
    v48 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@::%@"), *(_QWORD *)a2, *(_QWORD *)a3);
    *(_QWORD *)&v49[0] = v48;
    NL::DatePeriod::setDisplayKey((const void **)v37, v48);
    if (v48)
      CFRelease(v48);
  }
}

void sub_1A186CB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void ***v3;
  va_list va;

  va_start(va, a3);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  std::unique_ptr<NL::DatePeriod>::reset[abi:ne180100](v3, 0);
  _Unwind_Resume(a1);
}

int *NL::DateComponents::merge(int *result, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v2 = *a2;
  v3 = result[1];
  if (*result)
    v2 = *result;
  *result = v2;
  v4 = a2[1];
  if (v3)
    v4 = v3;
  result[1] = v4;
  v5 = a2[2];
  v6 = result[3];
  if (result[2])
    v5 = result[2];
  result[2] = v5;
  v7 = a2[3];
  if (v6)
    v7 = v6;
  result[3] = v7;
  v8 = result[4];
  if (!v8)
    v8 = a2[4];
  result[4] = v8;
  v9 = a2[6];
  v10 = result[7];
  if (result[6])
    v9 = result[6];
  result[6] = v9;
  v11 = a2[7];
  if (v10)
    v11 = v10;
  result[7] = v11;
  v12 = a2[8];
  v13 = result[9];
  if (result[8])
    v12 = result[8];
  result[8] = v12;
  v14 = a2[9];
  if (v13)
    v14 = v13;
  result[9] = v14;
  v15 = a2[10];
  v16 = result[11];
  if (result[10])
    v15 = result[10];
  result[10] = v15;
  v17 = a2[11];
  if (v16)
    v17 = v16;
  result[11] = v17;
  v18 = a2[12];
  v19 = result[13];
  if (result[12])
    v18 = result[12];
  result[12] = v18;
  v20 = a2[13];
  if (v19)
    v20 = v19;
  result[13] = v20;
  return result;
}

const __CFDictionary *composeHolidayAbsoluteDateWithValue(const __CFDictionary *result, const __CFDictionary *a2, CFAbsoluteTime *a3, double *a4, int a5, int *a6, int *a7)
{
  const __CFDictionary *v10;
  const __CFNumber *Value;
  const __CFNumber *v12;
  uint64_t v13;
  uint64_t valuePtr;

  if (a2)
  {
    v10 = result;
    valuePtr = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(result, CFSTR("Day"));
    if (Value)
      CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    v12 = (const __CFNumber *)CFDictionaryGetValue(v10, CFSTR("Month"));
    if (v12)
    {
      CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
      v13 = valuePtr;
    }
    else
    {
      v13 = 0;
    }
    return (const __CFDictionary *)CFCalendarComposeAbsoluteTime(a2, a3, "dMy", HIDWORD(valuePtr), v13, a4);
  }
  return result;
}

_DWORD *extractJulianEasterInYear(_DWORD *result, int *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a3 <= 0)
    v3 = -(-a3 & 3);
  else
    v3 = a3 & 3;
  v4 = 4 * (a3 % 7) + 2 * v3 + 34;
  v5 = v4
     - 7
     * ((v4
       - (__int16)(19 * (a3 % 19)
                 + 15
                 - 30
                 * (((__int16)((34953 * (__int16)(19 * (a3 % 19) + 15)) >> 16) >> 4)
                  + ((unsigned __int16)(((34953 * (__int16)(19 * (a3 % 19) + 15)) >> 16) & 0x8000) >> 15))))
      / 7)
     + 114;
  v6 = 9
     * (v4
                       - 7
                       * ((v4
                         - (__int16)(19 * (a3 % 19)
                                   + 15
                                   - 30
                                   * (((__int16)((34953 * (__int16)(19 * (a3 % 19) + 15)) >> 16) >> 4)
                                    + ((unsigned __int16)(((34953 * (__int16)(19 * (a3 % 19) + 15)) >> 16) & 0x8000) >> 15))))
                        / 7)
                       + 114);
  v7 = (((v5 - BYTE1(v6)) >> 1) + (v6 >> 8)) >> 4;
  v8 = (v5 - 31 * v7);
  if (result)
    *result = (v8 + 13) % extractJulianEasterInYear(int *,int *,int)::lastDayOfMonthLeapYear[v7 - 1] + 1;
  if (a2)
    *a2 = (v8 + 13) / extractJulianEasterInYear(int *,int *,int)::lastDayOfMonthLeapYear[v7 - 1] + v7;
  return result;
}

_DWORD *extractGregorianEasterInYear(_DWORD *result, unsigned int *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  int v10;
  __int16 v11;
  char v12;
  unsigned int v13;

  v3 = a3 % 19;
  v4 = a3 / 100;
  v5 = a3 % 100;
  v6 = (a3 / 100) & 3;
  if (a3 / -100 >= 0)
    v6 = -((a3 / -100) & 3);
  v7 = ((unint64_t)(1431655765 * (v4 + (v4 + 8) / -25 + 1)) >> 32) - (v4 + (v4 + 8) / -25 + 1);
  v8 = (int)(v4 + a3 / -400 + 19 * v3 + (v7 >> 1) + (v7 >> 31) + 15) % 30;
  v9 = v5 + (((char)v5 >> 13) & 3);
  v10 = (2 * (v6 + (v9 >> 2)) + ((v9 & 0xFC) - v5 + 32) - v8) % 7;
  v11 = (37201 * (__int16)(v3 + 11 * v8 + 22 * v10)) >> 16;
  v12 = HIBYTE(v11) + ((unsigned __int16)(v11 & 0x8000) >> 15);
  if (result)
  {
    v13 = 9 * (v10 + v8 - 7 * v12 + 114);
    *result = (v10
                              + v8
                              - 7 * v12
                              + 114
                              - 31
                              * ((((v10 + v8 - 7 * v12 + 114 - BYTE1(v13)) >> 1) + (v13 >> 8)) >> 4)
                              + 1);
  }
  if (a2)
    *a2 = (((v10
                            + v8
                            - 7 * v12
                            + 114
                            - ((unsigned __int16)(9 * (v10 + v8 - 7 * v12 + 114)) >> 8)) >> 1)
         + ((9 * (v10 + v8 - 7 * v12 + 114)) >> 8)) >> 4;
  return result;
}

const __CFDictionary *composeHolidayRelativeDateWithValue(const __CFDictionary *result, __CFCalendar *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  const __CFNumber *Value;
  unsigned int valuePtr;

  if (result && a2)
  {
    valuePtr = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(result, CFSTR("RelativeDays"));
    if (Value)
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    CFCalendarComposeAbsoluteTime(a2, a3, "dMy", a4, a5, a6);
    return (const __CFDictionary *)CFCalendarAddComponents(a2, a3, 0, "d", valuePtr);
  }
  return result;
}

uint64_t resetTimeForUnit(__CFCalendar *a1, CFAbsoluteTime *a2, uint64_t a3, uint64_t a4)
{
  CFAbsoluteTime v8;
  const char *v9;
  uint64_t v11;

  v8 = *a2;
  if (*(char *)(a3 + 23) >= 0)
    v9 = (const char *)a3;
  else
    v9 = *(const char **)a3;
  v11 = 0;
  CFCalendarDecomposeAbsoluteTime(a1, v8, v9, &v11);
  if (*(char *)(a3 + 23) >= 0)
    return CFCalendarAddComponents(a1, a2, 0, (const char *)a3, a4 - v11);
  else
    return CFCalendarAddComponents(a1, a2, 0, *(const char **)a3, a4 - v11);
}

BOOL NL::DateComponents::hasDate(NL::DateComponents *this)
{
  return *(_DWORD *)this
      || *((_DWORD *)this + 9)
      || *((_DWORD *)this + 1)
      || *((_DWORD *)this + 2)
      || *((_DWORD *)this + 3)
      || *((_DWORD *)this + 12)
      || *((_DWORD *)this + 11)
      || *((_DWORD *)this + 10)
      || *((_DWORD *)this + 13)
      || *((_DWORD *)this + 14)
      || *((_DWORD *)this + 15) != 0;
}

NL::DatePeriod *NL::DatePeriod::DatePeriod(NL::DatePeriod *this)
{
  const void **v2;
  CFDateFormatterRef ISO8601Formatter;

  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  v2 = (const void **)((char *)this + 232);
  *(_OWORD *)((char *)this + 204) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_BYTE *)this + 240) = 0;
  ISO8601Formatter = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x333uLL);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(v2, ISO8601Formatter);
  return this;
}

void sub_1A186D268(_Unwind_Exception *a1)
{
  const void **v1;
  const void **v2;
  const void **v3;

  nlp::CFScopedPtr<__CFDateFormatter *>::reset(v3, 0);
  nlp::CFScopedPtr<__CFDate const*>::reset(v2, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset(v1 + 2, 0);
  nlp::CFScopedPtr<__CFCalendar *>::reset(v1 + 1, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v1, 0);
  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<__CFDateFormatter *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFArray const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

const void **std::unique_ptr<NL::DatePeriod>::reset[abi:ne180100](const void ***a1, const void **a2)
{
  const void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::DatePeriod::~DatePeriod(result);
    JUMPOUT(0x1A1B0E068);
  }
  return result;
}

void NL::DatePeriod::~DatePeriod(const void **this)
{
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 29, 0);
  nlp::CFScopedPtr<__CFDate const*>::reset(this + 28, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset(this + 2, 0);
  nlp::CFScopedPtr<__CFCalendar *>::reset(this + 1, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(this, 0);
}

void loadPlistFromFile(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const __CFString *CFStringFromString;
  NL::CFLogger *v3;
  const __CFAllocator *v4;
  std::string *v5;
  const __CFString *v6;
  CFURLRef v7;
  CFURLRef v8;
  int v9;
  uint64_t v10;
  CFIndex Count;
  const void **v12;
  const __CFString *v13;
  const __CFDictionary *Value;
  CFIndex v15;
  void **v16;
  const __CFString **v17;
  const __CFString *v18;
  const __CFArray *v19;
  CFIndex v20;
  CFIndex i;
  const __CFString *ValueAtIndex;
  std::string *v23;
  __int128 v24;
  __int128 *v25;
  unsigned __int8 *v26;
  std::vector<std::string> *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  const __CFDictionary *plist;
  const void **v39;
  void *__p[2];
  std::string::size_type v42;
  std::string *v43;
  std::string *v44;
  unint64_t v45;
  void *v46[2];
  char v47;
  void **v48;
  void **v49;
  void *v50[2];
  char v51;
  void **keys;
  void **v53;
  CFErrorRef error;
  SInt32 errorCode;
  CFDataRef resourceData;
  std::string v57;
  __int128 *v58[2];

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  CFStringFromString = createCFStringFromString(a1);
  getPathForResource(CFStringFromString, &v57);
  v3 = (NL::CFLogger *)std::string::compare(&v57, "");
  if (!(_DWORD)v3)
  {
    v10 = NL::CFLogger::sharedInstance(v3);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v10 + 16))(v10, 3, "Could not find the mappings from resource bundle");
    if (CFStringFromString)
      CFRelease(CFStringFromString);
    goto LABEL_58;
  }
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v57;
  else
    v5 = (std::string *)v57.__r_.__value_.__r.__words[0];
  v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v5, 0x8000100u);
  v7 = CFURLCreateWithFileSystemPath(v4, v6, kCFURLPOSIXPathStyle, 0);
  v8 = v7;
  resourceData = 0;
  errorCode = 0;
  if (!v7)
  {
    v9 = 0;
    if (!v6)
      goto LABEL_12;
    goto LABEL_11;
  }
  v7 = (CFURLRef)CFURLCreateDataAndPropertiesFromResource(v4, v7, &resourceData, 0, 0, &errorCode);
  v9 = (int)v7;
  if (v6)
LABEL_11:
    CFRelease(v6);
LABEL_12:
  if (v8)
    CFRelease(v8);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  if (v9 && resourceData)
  {
    error = 0;
    plist = (const __CFDictionary *)CFPropertyListCreateWithData(v4, resourceData, 0, 0, &error);
    if (resourceData)
      CFRelease(resourceData);
    if (plist && CFPropertyListIsValid(plist, kCFPropertyListXMLFormat_v1_0))
    {
      Count = CFDictionaryGetCount(plist);
      std::vector<__CFString const*>::vector(&keys, Count);
      CFDictionaryGetKeysAndValues(plist, (const void **)keys, 0);
      v12 = (const void **)keys;
      v37 = v53;
      if (keys != v53)
      {
        do
        {
          v13 = (const __CFString *)*v12;
          Value = (const __CFDictionary *)CFDictionaryGetValue(plist, *v12);
          getUTF8StringFromCFString(v13, v50);
          v15 = CFDictionaryGetCount(Value);
          std::vector<__CFString const*>::vector(&v48, v15);
          v39 = v12;
          CFDictionaryGetKeysAndValues(Value, (const void **)v48, 0);
          v17 = (const __CFString **)v48;
          v16 = v49;
          if (v48 != v49)
          {
            do
            {
              v18 = *v17;
              getUTF8StringFromCFString(*v17, v46);
              v19 = (const __CFArray *)CFDictionaryGetValue(Value, v18);
              v20 = CFArrayGetCount(v19);
              v43 = 0;
              v44 = 0;
              v45 = 0;
              if (v20 >= 1)
              {
                for (i = 0; i != v20; ++i)
                {
                  ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v19, i);
                  getUTF8StringFromCFString(ValueAtIndex, __p);
                  v23 = v44;
                  if ((unint64_t)v44 >= v45)
                  {
                    v25 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (__int128 *)__p);
                  }
                  else
                  {
                    if (SHIBYTE(v42) < 0)
                    {
                      std::string::__init_copy_ctor_external(v44, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
                    }
                    else
                    {
                      v24 = *(_OWORD *)__p;
                      v44->__r_.__value_.__r.__words[2] = v42;
                      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
                    }
                    v25 = (__int128 *)&v23[1];
                  }
                  v44 = (std::string *)v25;
                  if (SHIBYTE(v42) < 0)
                    operator delete(__p[0]);
                }
              }
              v58[0] = (__int128 *)v50;
              v26 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)v50, (uint64_t)&std::piecewise_construct, v58);
              v58[0] = (__int128 *)v46;
              v27 = (std::vector<std::string> *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v26 + 40), (unsigned __int8 *)v46, (uint64_t)&std::piecewise_construct, v58)+ 40);
              if (v27 != (std::vector<std::string> *)&v43)
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v27, v43, (__int128 *)v44, 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (char *)v43) >> 3));
              __p[0] = &v43;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              if (v47 < 0)
                operator delete(v46[0]);
              ++v17;
            }
            while (v17 != (const __CFString **)v16);
            v17 = (const __CFString **)v48;
          }
          if (v17)
          {
            v49 = (void **)v17;
            operator delete(v17);
          }
          if (v51 < 0)
            operator delete(v50[0]);
          v12 = v39 + 1;
        }
        while (v39 + 1 != (const void **)v37);
        v12 = (const void **)keys;
      }
      if (v12)
      {
        v53 = (void **)v12;
        operator delete(v12);
      }
LABEL_57:
      CFRelease(plist);
      goto LABEL_58;
    }
    CFShow(error);
    if (LogHandleForNLMessageIntentDomainDetector(void)::onceToken != -1)
      dispatch_once(&LogHandleForNLMessageIntentDomainDetector(void)::onceToken, &__block_literal_global_2);
    v29 = LogHandleForNLMessageIntentDomainDetector(void)::logHandle;
    if (os_log_type_enabled((os_log_t)LogHandleForNLMessageIntentDomainDetector(void)::logHandle, OS_LOG_TYPE_FAULT))
      loadPlistFromFile(v29, v30, v31, v32, v33, v34, v35, v36);
    if (plist)
      goto LABEL_57;
  }
  else
  {
    if (resourceData)
      CFRelease(resourceData);
    v28 = NL::CFLogger::sharedInstance(v7);
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v28 + 16))(v28, 3, "Could not load the mappings from resource bundle %d", errorCode);
  }
LABEL_58:
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
}

#error "1A186D988: call analysis failed (funcsize=53)"

void sub_1A186D9E4()
{
  __cxa_end_catch();
  JUMPOUT(0x1A186D878);
}

void NLMessageIntentDomainDetector::NLMessageIntentDomainDetector(std::string *this, __int128 *a2)
{
  __int128 v3;
  void *__p[2];
  char v5;
  uint64_t v6[5];

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 1065353216;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  LODWORD(this[4].__r_.__value_.__l.__data_) = 1065353216;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = 0u;
  LODWORD(this[5].__r_.__value_.__r.__words[2]) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "photosharing-keywords.plist");
  loadPlistFromFile((uint64_t)__p, (uint64_t)v6);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__move_assign((uint64_t)&this[4].__r_.__value_.__l.__size_, v6);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::~__hash_table((uint64_t)v6);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1A186DAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a14 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::~__hash_table(v17);
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::~__hash_table(v16);
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::~__hash_table(v15);
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(a1);
}

void NLMessageIntentDomainDetector::getLemmatizedTextWithSurfaceform(const char *a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  const __CFAllocator *v5;
  const __CFString *v6;
  __CFArray *Mutable;
  const void *v8;
  const __CFString *v9;
  const __CFString *CanonicalLocaleIdentifierFromString;
  CFLocaleRef v11;
  void **v12;
  void ***v13;
  uint64_t v14;
  __n128 (*v15)(_QWORD *, uint64_t);
  void (*v16)(uint64_t);
  _QWORD v17[3];
  uint64_t v18;
  __int128 **v19;
  uint64_t v20;
  __n128 (*v21)(_QWORD *, uint64_t);
  void (*v22)(uint64_t);
  _QWORD v23[3];
  void **v24;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E0D174D0]);
  v8 = (const void *)NLTaggerCreate();
  CFRelease(Mutable);
  NLTaggerSetString();
  CFStringGetLength(v6);
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v9 = CFStringCreateWithCString(v5, a1, 0x8000100u);
  CanonicalLocaleIdentifierFromString = CFLocaleCreateCanonicalLocaleIdentifierFromString(v5, v9);
  v11 = CFLocaleCreate(v5, CanonicalLocaleIdentifierFromString);
  NLTaggerSetLocaleForRange();
  if (v9)
    CFRelease(v9);
  if (CanonicalLocaleIdentifierFromString)
    CFRelease(CanonicalLocaleIdentifierFromString);
  if (v11)
    CFRelease(v11);
  v18 = 0;
  v19 = (__int128 **)&v18;
  v20 = 0x4002000000;
  v21 = __Block_byref_object_copy__6;
  v22 = __Block_byref_object_dispose__6;
  memset(v23, 0, sizeof(v23));
  v12 = 0;
  v13 = &v12;
  v14 = 0x4002000000;
  v15 = __Block_byref_object_copy__6;
  v16 = __Block_byref_object_dispose__6;
  memset(v17, 0, sizeof(v17));
  NLTaggerEnumerateTokens();
  if (v6)
    CFRelease(v6);
  if (v8)
    CFRelease(v8);
  std::pair<std::vector<std::string>,std::vector<std::string>>::pair[abi:ne180100]<std::vector<std::string>&,std::vector<std::string>&,0>(a3, v19 + 5, (__int128 **)v13 + 5);
  _Block_object_dispose(&v12, 8);
  v24 = (void **)v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v24);
  _Block_object_dispose(&v18, 8);
  v12 = (void **)v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_1A186DD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  _Block_object_dispose(&a18, 8);
  *(_QWORD *)(v27 - 72) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 72));
  _Block_object_dispose(&a26, 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__6(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN29NLMessageIntentDomainDetector32getLemmatizedTextWithSurfaceformERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, CFRange *a2)
{
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  _QWORD *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;

  v3 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)(a1 + 48), *a2);
  getUTF8StringFromCFString(v3, v18);
  v4 = (const __CFString *)NLTaggerCopyTagForCurrentToken();
  v5 = v4;
  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  if (v4)
    getUTF8StringFromCFString(v4, &v14);
  else
    getUTF8StringFromCFString(v3, &v14);
  *(_OWORD *)__p = v14;
  v17 = v15;
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = v6[6];
  if (v7 >= v6[7])
  {
    v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6 + 5, (__int128 *)__p);
  }
  else
  {
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v6[6], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      v8 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 16) = v17;
      *(_OWORD *)v7 = v8;
    }
    v9 = v7 + 24;
    v6[6] = v7 + 24;
  }
  v6[6] = v9;
  v10 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v11 = v10[6];
  if (v11 >= v10[7])
  {
    v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v10 + 5, (__int128 *)v18);
  }
  else
  {
    if (SHIBYTE(v19) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v10[6], (const std::string::value_type *)v18[0], (std::string::size_type)v18[1]);
    }
    else
    {
      v12 = *(_OWORD *)v18;
      *(_QWORD *)(v11 + 16) = v19;
      *(_OWORD *)v11 = v12;
    }
    v13 = v11 + 24;
    v10[6] = v11 + 24;
  }
  v10[6] = v13;
  if (v3)
    CFRelease(v3);
  if (v5)
    CFRelease(v5);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
}

void sub_1A186DF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v25 + 48) = v24;
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

BOOL NLMessageIntentDomainDetector::regExEvaluated(NLMessageIntentDomainDetector *this)
{
  return *((_QWORD *)this + 16)
      && !std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>((_QWORD *)this + 3, (unsigned __int8 *)this)&& !std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>((_QWORD *)this + 8, (unsigned __int8 *)this);
}

void NLMessageIntentDomainDetector::hasPhotoSharingKeywords(std::string *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::value_type *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  std::vector<std::ssub_match>::pointer end;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v19;
  std::sub_match<std::__wrap_iter<const char *>> *v20;
  int v21;
  std::__wrap_iter<const char *>::iterator_type i;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  __int128 *v30;
  __int128 *v31;
  __int128 v32;
  std::__split_buffer<std::string>::pointer begin;
  __int128 v34;
  std::string *v35;
  int v36;
  std::__split_buffer<std::string>::pointer data;
  std::string::size_type size;
  std::string *v39;
  __int128 v40;
  std::__wrap_iter<const char *>::iterator_type v41;
  std::basic_regex<char> *v42;
  std::string *v43;
  __int128 v44;
  std::__wrap_iter<const char *>::iterator_type v45;
  std::basic_regex<char> *v46;
  std::string *v47;
  __int128 v48;
  std::__wrap_iter<const char *>::iterator_type pregex_high;
  std::basic_regex<char> *v50;
  std::string *v51;
  __int128 v52;
  unsigned __int8 *v53;
  __int128 v54;
  unsigned __int8 *v55;
  __int128 v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  std::vector<std::string>::pointer v61;
  uint64_t v62;
  unint64_t v63;
  char j;
  std::string *v65;
  __int128 v66;
  unsigned __int8 *v67;
  std::__wrap_iter<const char *>::iterator_type v68;
  char *v69;
  int v70;
  std::__wrap_iter<const char *>::iterator_type v71;
  uint64_t v72;
  std::string *v73;
  std::vector<std::string>::pointer v74;
  __int128 v75;
  std::string *v76;
  char v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  __int128 v81;
  unsigned __int8 *v82;
  std::__wrap_iter<const char *> v83;
  uint64_t v84;
  std::__wrap_iter<const char *> v85;
  _BOOL4 v86;
  std::vector<std::string>::pointer v87;
  __int128 v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  std::string *v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 *v100;
  std::string::size_type v101;
  std::string *v102;
  char v103;
  std::string::size_type v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::string *v113;
  _BYTE v114[32];
  void *v115;
  void *v116;
  void *v117[2];
  std::string::size_type v118;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v119;
  std::vector<std::string> v120;
  std::vector<std::ssub_match> __p[2];
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  char v128;
  uint64_t v129;
  void *v130;
  char v131;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v132;
  std::regex_traits<char> v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  std::regex_traits<char> v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  __int128 v141;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *v142;
  __int128 v143;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *pregex;
  std::vector<std::string> v145;
  std::vector<std::string> v146;
  std::string v147;
  std::__split_buffer<std::string> __v;
  _QWORD v149[5];

  v149[2] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v147 = *(std::string *)a2;
  memset(&v146, 0, sizeof(v146));
  memset(&v145, 0, sizeof(v145));
  *(_QWORD *)((char *)v149 + 7) = 0;
  v149[0] = 0;
  if (!std::string::compare(this, "zh-Hans"))
  {
    std::string::basic_string[abi:ne180100]<0>(&v132, " ");
    std::string::basic_string[abi:ne180100]<0>(&v119, "");
    replaceAll(&v147, (char *)&v132, (uint64_t)&v119);
    if (SHIBYTE(v119.__pregex_) < 0)
      operator delete((void *)v119.__begin_.__i_);
    if (SHIBYTE(v132.__pregex_) < 0)
      operator delete((void *)v132.__begin_.__i_);
  }
  else
  {
    NLMessageIntentDomainDetector::getLemmatizedTextWithSurfaceform((const char *)this, (const char *)a2, (std::string *)&v132);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v146, (std::string *)v132.__begin_.__i_, (__int128 *)v132.__end_.__i_, 0xAAAAAAAAAAAAAAABLL * ((v132.__end_.__i_ - v132.__begin_.__i_) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v145, *(std::string **)&v132.__flags_, (__int128 *)v132.__match_.__matches_.__begin_, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v132.__match_.__matches_.__begin_ - *(_QWORD *)&v132.__flags_) >> 3));
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    join((uint64_t *)&v146, (uint64_t)__p, (std::string *)&v119);
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = *(_OWORD *)&v119.__begin_.__i_;
    v147.__r_.__value_.__r.__words[2] = (std::string::size_type)v119.__pregex_;
    HIBYTE(v119.__pregex_) = 0;
    LOBYTE(v119.__begin_.__i_) = 0;
    if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
      operator delete(__p[0].__begin_);
    v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v132.__flags_;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
    v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v132;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
  }
  v143 = 0uLL;
  pregex = 0;
  v141 = 0uLL;
  v142 = 0;
  std::regex_traits<char>::regex_traits(&v137);
  v140 = 0;
  v139 = 0u;
  v138 = 0u;
  std::regex_traits<char>::regex_traits(&v133);
  v136 = 0;
  v135 = 0u;
  v134 = 0u;
  v113 = this;
  if (NLMessageIntentDomainDetector::regExEvaluated((NLMessageIntentDomainDetector *)this))
  {
    memset(__p, 0, 24);
    memset(&__v, 0, 24);
    v6 = &this[4].__r_.__value_.__s.__data_[8];
    v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)this;
    v7 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&this[4].__r_.__value_.__l.__size_, (unsigned __int8 *)this, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
    std::string::basic_string[abi:ne180100]<0>(&v132, "nouns");
    v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v132;
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v7 + 40), (unsigned __int8 *)&v132, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((_QWORD *)v8 + 6);
    if (SHIBYTE(v132.__pregex_) < 0)
      operator delete((void *)v132.__begin_.__i_);
    v11 = MEMORY[0x1E0DE4F60];
    v12 = MEMORY[0x1E0DE4FB8];
    if (v9 != v10)
    {
      v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)v113;
      v13 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)v113, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
      std::string::basic_string[abi:ne180100]<0>(&v132, "nouns");
      v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v132;
      v14 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v13 + 40), (unsigned __int8 *)&v132, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
      if (SHIBYTE(v132.__pregex_) < 0)
        operator delete((void *)v132.__begin_.__i_);
      v15 = (__int128 *)*((_QWORD *)v14 + 5);
      v16 = (__int128 *)*((_QWORD *)v14 + 6);
      while (v15 != v16)
      {
        if (*((char *)v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v132, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
        }
        else
        {
          v17 = *v15;
          v132.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)*((_QWORD *)v15 + 2);
          *(_OWORD *)&v132.__begin_.__i_ = v17;
        }
        end = __p[0].__end_;
        if (__p[0].__end_ >= __p[0].__end_cap_.__value_)
        {
          v20 = (std::sub_match<std::__wrap_iter<const char *>> *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__p, (__int128 *)&v132);
        }
        else
        {
          if (SHIBYTE(v132.__pregex_) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p[0].__end_, v132.__begin_.__i_, (std::string::size_type)v132.__end_.__i_);
          }
          else
          {
            v19 = *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v132.__begin_.__i_;
            *(_QWORD *)&__p[0].__end_->matched = v132.__pregex_;
            end->std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v19;
          }
          v20 = end + 1;
        }
        __p[0].__end_ = v20;
        if (SHIBYTE(v132.__pregex_) < 0)
          operator delete((void *)v132.__begin_.__i_);
        v15 = (__int128 *)((char *)v15 + 24);
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v132);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::ostream_iterator<std::string,char,std::char_traits<char>>,0>((uint64_t)__p[0].__begin_, (uint64_t)&__p[0].__end_[-1], (uint64_t)&v132, (uint64_t)"|", (uint64_t *)&v119);
      v21 = *((char *)&__p[0].__end_[-1].matched + 7);
      if (v21 >= 0)
        i = (std::__wrap_iter<const char *>::iterator_type)&__p[0].__end_[-1];
      else
        i = __p[0].__end_[-1].first.__i_;
      if (v21 >= 0)
        v23 = *((unsigned __int8 *)&__p[0].__end_[-1].matched + 7);
      else
        v23 = (uint64_t)__p[0].__end_[-1].second.__i_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v132, (uint64_t)i, v23);
      std::stringbuf::str();
      if (SHIBYTE(pregex) < 0)
        operator delete((void *)v143);
      v143 = *(_OWORD *)&v119.__begin_.__i_;
      pregex = v119.__pregex_;
      v132.__begin_.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)v11;
      *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v132.__begin_.__i_
                                                       + *((_QWORD *)v132.__begin_.__i_ - 3)) = *(std::__wrap_iter<const char *>::iterator_type *)(v11 + 24);
      v132.__end_.__i_ = (std::__wrap_iter<const char *>::iterator_type)(v12 + 16);
      if (SHIBYTE(v132.__match_.__prefix_.second.__i_) < 0)
        operator delete(*(void **)&v132.__match_.__unmatched_.matched);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1A1B0DFFC](&v132.__match_.__suffix_.second);
    }
    v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)v113;
    v24 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)v113, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
    std::string::basic_string[abi:ne180100]<0>(&v132, "verbs");
    v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v132;
    v25 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v24 + 40), (unsigned __int8 *)&v132, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
    v26 = *((_QWORD *)v25 + 5);
    v27 = *((_QWORD *)v25 + 6);
    if (SHIBYTE(v132.__pregex_) < 0)
      operator delete((void *)v132.__begin_.__i_);
    if (v26 != v27)
    {
      v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)v113;
      v28 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)v113, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
      std::string::basic_string[abi:ne180100]<0>(&v132, "verbs");
      v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v132;
      v29 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v28 + 40), (unsigned __int8 *)&v132, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
      if (SHIBYTE(v132.__pregex_) < 0)
        operator delete((void *)v132.__begin_.__i_);
      v30 = (__int128 *)*((_QWORD *)v29 + 5);
      v31 = (__int128 *)*((_QWORD *)v29 + 6);
      while (v30 != v31)
      {
        if (*((char *)v30 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v132, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
        }
        else
        {
          v32 = *v30;
          v132.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)*((_QWORD *)v30 + 2);
          *(_OWORD *)&v132.__begin_.__i_ = v32;
        }
        begin = __v.__begin_;
        if (__v.__begin_ >= __v.__end_)
        {
          v35 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (__int128 *)&v132);
        }
        else
        {
          if (SHIBYTE(v132.__pregex_) < 0)
          {
            std::string::__init_copy_ctor_external(__v.__begin_, v132.__begin_.__i_, (std::string::size_type)v132.__end_.__i_);
          }
          else
          {
            v34 = *(_OWORD *)&v132.__begin_.__i_;
            __v.__begin_->__r_.__value_.__r.__words[2] = (std::string::size_type)v132.__pregex_;
            *(_OWORD *)&begin->__r_.__value_.__l.__data_ = v34;
          }
          v35 = begin + 1;
        }
        __v.__begin_ = v35;
        if (SHIBYTE(v132.__pregex_) < 0)
          operator delete((void *)v132.__begin_.__i_);
        v30 = (__int128 *)((char *)v30 + 24);
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v132);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::ostream_iterator<std::string,char,std::char_traits<char>>,0>((uint64_t)__v.__first_, (uint64_t)&__v.__begin_[-1], (uint64_t)&v132, (uint64_t)"|", (uint64_t *)&v119);
      v36 = SHIBYTE(__v.__begin_[-1].__r_.__value_.__r.__words[2]);
      if (v36 >= 0)
        data = __v.__begin_ - 1;
      else
        data = (std::__split_buffer<std::string>::pointer)__v.__begin_[-1].__r_.__value_.__l.__data_;
      if (v36 >= 0)
        size = HIBYTE(__v.__begin_[-1].__r_.__value_.__r.__words[2]);
      else
        size = __v.__begin_[-1].__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v132, (uint64_t)data, size);
      std::stringbuf::str();
      if (SHIBYTE(v142) < 0)
        operator delete((void *)v141);
      v141 = *(_OWORD *)&v119.__begin_.__i_;
      v142 = v119.__pregex_;
      v132.__begin_.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)v11;
      *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v132.__begin_.__i_
                                                       + *((_QWORD *)v132.__begin_.__i_ - 3)) = *(std::__wrap_iter<const char *>::iterator_type *)(v11 + 24);
      v132.__end_.__i_ = (std::__wrap_iter<const char *>::iterator_type)(v12 + 16);
      if (SHIBYTE(v132.__match_.__prefix_.second.__i_) < 0)
        operator delete(*(void **)&v132.__match_.__unmatched_.matched);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1A1B0DFFC](&v132.__match_.__suffix_.second);
    }
    if (!std::string::compare(v113, "zh-Hans"))
    {
      std::operator+<char>();
      v47 = std::string::append((std::string *)&v119, ")");
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v132.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v132.__begin_.__i_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      pregex_high = (std::__wrap_iter<const char *>::iterator_type)HIBYTE(v132.__pregex_);
      if (SHIBYTE(v132.__pregex_) >= 0)
        v50 = (std::basic_regex<char> *)&v132;
      else
        v50 = (std::basic_regex<char> *)v132.__begin_.__i_;
      if (SHIBYTE(v132.__pregex_) < 0)
        pregex_high = v132.__end_.__i_;
      std::basic_regex<char,std::regex_traits<char>>::assign[abi:ne180100]<std::__wrap_iter<char const*>,0>((uint64_t)&v137, v50, (std::basic_regex<char> *)&pregex_high[(_QWORD)v50], 1);
      if (SHIBYTE(v132.__pregex_) < 0)
        operator delete((void *)v132.__begin_.__i_);
      if (SHIBYTE(v119.__pregex_) < 0)
        operator delete((void *)v119.__begin_.__i_);
      std::operator+<char>();
      v51 = std::string::append((std::string *)&v119, ")");
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v132.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v132.__begin_.__i_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      v45 = (std::__wrap_iter<const char *>::iterator_type)HIBYTE(v132.__pregex_);
      if (SHIBYTE(v132.__pregex_) >= 0)
        v46 = (std::basic_regex<char> *)&v132;
      else
        v46 = (std::basic_regex<char> *)v132.__begin_.__i_;
      if (SHIBYTE(v132.__pregex_) < 0)
        v45 = v132.__end_.__i_;
    }
    else
    {
      std::operator+<char>();
      v39 = std::string::append((std::string *)&v119, ")\\b");
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v132.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v132.__begin_.__i_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v41 = (std::__wrap_iter<const char *>::iterator_type)HIBYTE(v132.__pregex_);
      if (SHIBYTE(v132.__pregex_) >= 0)
        v42 = (std::basic_regex<char> *)&v132;
      else
        v42 = (std::basic_regex<char> *)v132.__begin_.__i_;
      if (SHIBYTE(v132.__pregex_) < 0)
        v41 = v132.__end_.__i_;
      std::basic_regex<char,std::regex_traits<char>>::assign[abi:ne180100]<std::__wrap_iter<char const*>,0>((uint64_t)&v137, v42, (std::basic_regex<char> *)&v41[(_QWORD)v42], 1);
      if (SHIBYTE(v132.__pregex_) < 0)
        operator delete((void *)v132.__begin_.__i_);
      if (SHIBYTE(v119.__pregex_) < 0)
        operator delete((void *)v119.__begin_.__i_);
      std::operator+<char>();
      v43 = std::string::append((std::string *)&v119, ")\\b");
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v132.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v132.__begin_.__i_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = (std::__wrap_iter<const char *>::iterator_type)HIBYTE(v132.__pregex_);
      if (SHIBYTE(v132.__pregex_) >= 0)
        v46 = (std::basic_regex<char> *)&v132;
      else
        v46 = (std::basic_regex<char> *)v132.__begin_.__i_;
      if (SHIBYTE(v132.__pregex_) < 0)
        v45 = v132.__end_.__i_;
    }
    std::basic_regex<char,std::regex_traits<char>>::assign[abi:ne180100]<std::__wrap_iter<char const*>,0>((uint64_t)&v133, v46, (std::basic_regex<char> *)&v45[(_QWORD)v46], 1);
    if (SHIBYTE(v132.__pregex_) < 0)
      operator delete((void *)v132.__begin_.__i_);
    if (SHIBYTE(v119.__pregex_) < 0)
      operator delete((void *)v119.__begin_.__i_);
    v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)v113;
    v53 = std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v113[1], (unsigned __int8 *)v113, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
    std::locale::operator=((std::locale *)v53 + 5, &v137.__loc_);
    v54 = v138;
    *((_OWORD *)v53 + 3) = *(_OWORD *)&v137.__ct_;
    *((_OWORD *)v53 + 4) = v54;
    std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)v53 + 10, (uint64_t *)&v139);
    *((_QWORD *)v53 + 12) = v140;
    v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)v113;
    v55 = std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v113[2].__r_.__value_.__r.__words[2], (unsigned __int8 *)v113, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
    std::locale::operator=((std::locale *)v55 + 5, &v133.__loc_);
    v56 = v134;
    *((_OWORD *)v55 + 3) = *(_OWORD *)&v133.__ct_;
    *((_OWORD *)v55 + 4) = v56;
    std::shared_ptr<NL::ParseIntent>::operator=[abi:ne180100]((_QWORD *)v55 + 10, (uint64_t *)&v135);
    *((_QWORD *)v55 + 12) = v136;
    v132.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&__v;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
    v132.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
    this = v113;
  }
  std::string::basic_string[abi:ne180100]<0>(&v130, "");
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  memset(__p, 0, 41);
  v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)this;
  v57 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&this[4].__r_.__value_.__l.__size_, (unsigned __int8 *)this, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
  std::string::basic_string[abi:ne180100]<0>(&v132, "nouns");
  v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v132;
  v58 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v57 + 40), (unsigned __int8 *)&v132, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
  v59 = *((_QWORD *)v58 + 5);
  v60 = *((_QWORD *)v58 + 6);
  if (SHIBYTE(v132.__pregex_) < 0)
    operator delete((void *)v132.__begin_.__i_);
  if (v59 == v60)
  {
    v77 = 0;
    v78 = 0;
    v79 = (_QWORD *)a3;
    goto LABEL_197;
  }
  memset(&v120, 0, sizeof(v120));
  if (!std::string::compare(this, "zh-Hans"))
  {
    v80 = HIBYTE(v147.__r_.__value_.__r.__words[2]);
    v81 = *(_OWORD *)&v147.__r_.__value_.__l.__data_;
    v119.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)this;
    v82 = std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&this[1], (unsigned __int8 *)this, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
    if ((v80 & 0x80u) == 0)
      v83.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v147;
    else
      v83.__i_ = (std::__wrap_iter<const char *>::iterator_type)v81;
    if ((v80 & 0x80u) == 0)
      v84 = v80;
    else
      v84 = *((_QWORD *)&v81 + 1);
    v85.__i_ = &v83.__i_[v84];
    std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v132, v83, v85, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)(v82 + 40), match_default);
    for (j = 0; ; j = 1)
    {
      memset(&v119.__match_.__prefix_, 0, 17);
      memset(&v119.__match_.__suffix_, 0, 17);
      v119.__match_.__ready_ = 0;
      v119.__match_.__position_start_.__i_ = 0;
      memset(&v119.__match_, 0, 41);
      memset(&v119, 0, 28);
      v86 = std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v132, &v119);
      if (v119.__match_.__matches_.__begin_)
      {
        v119.__match_.__matches_.__end_ = v119.__match_.__matches_.__begin_;
        operator delete(v119.__match_.__matches_.__begin_);
      }
      if (v86)
        break;
      memset(&v119, 0, 24);
      std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>((char *)&v119, (__int128 *)v132.__match_.__matches_.__begin_, (__int128 *)v132.__match_.__matches_.__end_, 0xAAAAAAAAAAAAAAABLL* (((char *)v132.__match_.__matches_.__end_ - (char *)v132.__match_.__matches_.__begin_) >> 3));
      v119.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v132.__match_.__prefix_.second.__i_;
      *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v119.__match_.__unmatched_.matched = v132.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
      *(_OWORD *)&v119.__match_.__prefix_.second.__i_ = *(_OWORD *)&v132.__match_.__suffix_.matched;
      v119.__match_.__suffix_.first.__i_ = v132.__match_.__position_start_.__i_;
      *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v119.__flags_ = v132.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
      *(_OWORD *)&v119.__match_.__matches_.__end_ = *(_OWORD *)&v132.__match_.__unmatched_.matched;
      std::match_results<std::__wrap_iter<char const*>>::str[abi:ne180100](&v119, 0, v117);
      v87 = v120.__end_;
      if (v120.__end_ >= v120.__end_cap_.__value_)
      {
        v89 = 0xAAAAAAAAAAAAAAABLL * (((char *)v120.__end_ - (char *)v120.__begin_) >> 3);
        v90 = v89 + 1;
        if (v89 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v120.__end_cap_.__value_ - (char *)v120.__begin_) >> 3) > v90)
          v90 = 0x5555555555555556 * (((char *)v120.__end_cap_.__value_ - (char *)v120.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v120.__end_cap_.__value_ - (char *)v120.__begin_) >> 3) >= 0x555555555555555)
          v91 = 0xAAAAAAAAAAAAAAALL;
        else
          v91 = v90;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v120.__end_cap_;
        if (v91)
          v92 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v120.__end_cap_, v91);
        else
          v92 = 0;
        v93 = v92 + v89;
        __v.__first_ = v92;
        __v.__begin_ = v93;
        __v.__end_cap_.__value_ = &v92[v91];
        v94 = *(_OWORD *)v117;
        v93->__r_.__value_.__r.__words[2] = v118;
        *(_OWORD *)&v93->__r_.__value_.__l.__data_ = v94;
        v117[1] = 0;
        v118 = 0;
        v117[0] = 0;
        __v.__end_ = v93 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v120, &__v);
        v95 = v120.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v120.__end_ = v95;
        if (SHIBYTE(v118) < 0)
          operator delete(v117[0]);
      }
      else
      {
        v88 = *(_OWORD *)v117;
        v120.__end_->__r_.__value_.__r.__words[2] = v118;
        *(_OWORD *)&v87->__r_.__value_.__l.__data_ = v88;
        v120.__end_ = v87 + 1;
      }
      if (v119.__begin_.__i_)
      {
        v119.__end_.__i_ = v119.__begin_.__i_;
        operator delete((void *)v119.__begin_.__i_);
      }
      std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++[abi:ne180100]((uint64_t)&v132, (uint64_t)v114);
      if (v115)
      {
        v116 = v115;
        operator delete(v115);
      }
    }
    if (v132.__match_.__matches_.__begin_)
    {
      v132.__match_.__matches_.__end_ = v132.__match_.__matches_.__begin_;
      operator delete(v132.__match_.__matches_.__begin_);
    }
  }
  else
  {
    v61 = v146.__begin_;
    if (v146.__end_ == v146.__begin_)
    {
      j = 0;
    }
    else
    {
      v62 = 0;
      v63 = 0;
      j = 0;
      do
      {
        v65 = &v61[v62];
        if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v119, v65->__r_.__value_.__l.__data_, v65->__r_.__value_.__l.__size_);
        }
        else
        {
          v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          v119.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v119.__begin_.__i_ = v66;
        }
        __v.__first_ = v113;
        v67 = std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&this[1], (unsigned __int8 *)v113, (uint64_t)&std::piecewise_construct, (__int128 **)&__v)+ 40;
        memset(&v132.__match_.__matches_.__end_cap_, 0, 17);
        memset(&v132.__match_.__unmatched_.matched, 0, 17);
        v132.__match_.__prefix_.matched = 0;
        v132.__match_.__suffix_.first.__i_ = 0;
        memset(&v132, 0, 41);
        v68 = (std::__wrap_iter<const char *>::iterator_type)HIBYTE(v119.__pregex_);
        if (SHIBYTE(v119.__pregex_) >= 0)
          v69 = (char *)&v119;
        else
          v69 = (char *)v119.__begin_.__i_;
        if (SHIBYTE(v119.__pregex_) < 0)
          v68 = v119.__end_.__i_;
        v70 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v67, v69, (char *)&v68[(_QWORD)v69], (std::match_results<const char *> *)&v132, 0);
        v71 = (std::__wrap_iter<const char *>::iterator_type)HIBYTE(v119.__pregex_);
        if (SHIBYTE(v119.__pregex_) >= 0)
          v72 = (uint64_t)&v119;
        else
          v72 = (uint64_t)v119.__begin_.__i_;
        if (SHIBYTE(v119.__pregex_) < 0)
          v71 = v119.__end_.__i_;
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(__p, v72, (std::sub_match<std::__wrap_iter<const char *>> *)&v71[v72], (uint64_t *)&v132, 0);
        if (v132.__begin_.__i_)
        {
          v132.__end_.__i_ = v132.__begin_.__i_;
          operator delete((void *)v132.__begin_.__i_);
        }
        if (v70)
        {
          v73 = &v145.__begin_[v62];
          v74 = v120.__end_;
          if (v120.__end_ >= v120.__end_cap_.__value_)
          {
            v76 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v120, (__int128 *)v73);
          }
          else
          {
            if (SHIBYTE(v73->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v120.__end_, v145.__begin_[v62].__r_.__value_.__l.__data_, v145.__begin_[v62].__r_.__value_.__l.__size_);
            }
            else
            {
              v75 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
              v120.__end_->__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v75;
            }
            v76 = v74 + 1;
          }
          v120.__end_ = v76;
          j = 1;
        }
        if (SHIBYTE(v119.__pregex_) < 0)
          operator delete((void *)v119.__begin_.__i_);
        ++v63;
        v61 = v146.__begin_;
        ++v62;
      }
      while (0xAAAAAAAAAAAAAAABLL * (((char *)v146.__end_ - (char *)v146.__begin_) >> 3) > v63);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v119, ",");
  join((uint64_t *)&v120, (uint64_t)&v119, (std::string *)&v132);
  v79 = (_QWORD *)a3;
  v149[0] = v132.__end_.__i_;
  v78 = (char *)v132.__begin_.__i_;
  *(_QWORD *)((char *)v149 + 7) = *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v132.__end_.__i_ + 7);
  v77 = HIBYTE(v132.__pregex_);
  HIBYTE(v132.__pregex_) = 0;
  LOBYTE(v132.__begin_.__i_) = 0;
  if ((SHIBYTE(v119.__pregex_) & 0x80000000) == 0)
  {
    if ((j & 1) != 0)
      goto LABEL_176;
LABEL_196:
    v132.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v120;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
    goto LABEL_197;
  }
  operator delete((void *)v119.__begin_.__i_);
  if ((j & 1) == 0)
    goto LABEL_196;
LABEL_176:
  memset(&v119.__match_.__matches_.__end_cap_, 0, 17);
  memset(&v119.__match_.__unmatched_.matched, 0, 17);
  v119.__match_.__prefix_.matched = 0;
  v119.__match_.__suffix_.first.__i_ = 0;
  memset(&v119, 0, 41);
  __v.__first_ = v113;
  v96 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&this[4].__r_.__value_.__l.__size_, (unsigned __int8 *)v113, (uint64_t)&std::piecewise_construct, (__int128 **)&__v);
  std::string::basic_string[abi:ne180100]<0>(&v132, "verbs");
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v132;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v96 + 40), (unsigned __int8 *)&v132, (uint64_t)&std::piecewise_construct, (__int128 **)&__v);
  v98 = *((_QWORD *)v97 + 5);
  v99 = *((_QWORD *)v97 + 6);
  if (SHIBYTE(v132.__pregex_) < 0)
    operator delete((void *)v132.__begin_.__i_);
  if (v98 == v99)
  {
    if (v119.__begin_.__i_)
    {
      v119.__end_.__i_ = v119.__begin_.__i_;
      operator delete((void *)v119.__begin_.__i_);
    }
    v132.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v120;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
    goto LABEL_201;
  }
  __v.__first_ = v113;
  v100 = std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v113[2].__r_.__value_.__r.__words[2], (unsigned __int8 *)v113, (uint64_t)&std::piecewise_construct, (__int128 **)&__v)+ 40;
  memset(&v132.__match_.__matches_.__end_cap_, 0, 17);
  memset(&v132.__match_.__unmatched_.matched, 0, 17);
  v132.__match_.__prefix_.matched = 0;
  v132.__match_.__suffix_.first.__i_ = 0;
  memset(&v132, 0, 41);
  v101 = HIBYTE(v147.__r_.__value_.__r.__words[2]);
  if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = &v147;
  else
    v102 = (std::string *)v147.__r_.__value_.__r.__words[0];
  if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v101 = v147.__r_.__value_.__l.__size_;
  v103 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v100, (char *)v102, (char *)v102 + v101, (std::match_results<const char *> *)&v132, 0);
  v104 = HIBYTE(v147.__r_.__value_.__r.__words[2]);
  if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v105 = &v147;
  else
    v105 = (std::string *)v147.__r_.__value_.__r.__words[0];
  if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v104 = v147.__r_.__value_.__l.__size_;
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)&v119, (uint64_t)v105, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v105 + v104), (uint64_t *)&v132, 0);
  if (v132.__begin_.__i_)
  {
    v132.__end_.__i_ = v132.__begin_.__i_;
    operator delete((void *)v132.__begin_.__i_);
  }
  if (v119.__begin_.__i_)
  {
    v119.__end_.__i_ = v119.__begin_.__i_;
    operator delete((void *)v119.__begin_.__i_);
  }
  v132.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  if ((v103 & 1) == 0)
  {
LABEL_197:
    std::string::basic_string[abi:ne180100]<0>(v79, "");
    goto LABEL_202;
  }
LABEL_201:
  v106 = v149[0];
  *(_QWORD *)a3 = v78;
  *(_QWORD *)(a3 + 8) = v106;
  *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v149 + 7);
  *(_BYTE *)(a3 + 23) = v77;
  v149[0] = 0;
  *(_QWORD *)((char *)v149 + 7) = 0;
  v77 = 0;
  v78 = 0;
LABEL_202:
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }
  if (v131 < 0)
    operator delete(v130);
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
  if (*((_QWORD *)&v135 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  std::locale::~locale(&v133.__loc_);
  v110 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v111 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  std::locale::~locale(&v137.__loc_);
  if (SHIBYTE(v142) < 0)
    operator delete((void *)v141);
  if (SHIBYTE(pregex) < 0)
  {
    operator delete((void *)v143);
    if ((v77 & 0x80) == 0)
      goto LABEL_220;
  }
  else if ((v77 & 0x80) == 0)
  {
    goto LABEL_220;
  }
  operator delete(v78);
LABEL_220:
  v132.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v145;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  v132.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v146;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
}

void sub_1A186F288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  uint64_t v58;

  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (a38 < 0)
    operator delete(a33);
  STACK[0x200] = v58 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
  STACK[0x200] = (unint64_t)&a58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x338]);
  std::locale::~locale((std::locale *)&STACK[0x310]);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x378]);
  std::locale::~locale((std::locale *)&STACK[0x350]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  STACK[0x200] = v58 - 240;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
  STACK[0x200] = v58 - 216;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
  if (*(char *)(v58 - 169) < 0)
    operator delete(*(void **)(v58 - 192));
  _Unwind_Resume(a1);
}

void **std::pair<std::vector<std::string>,std::vector<std::string>>::~pair(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1A186F734(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1B0DFFC](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1B0DFFC](a1 + 112);
  return a1;
}

_QWORD *std::match_results<std::__wrap_iter<char const*>>::str[abi:ne180100]@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 3) <= a2)
    v3 = (uint64_t)(result + 3);
  else
    v3 = *result + 24 * a2;
  if (*(_BYTE *)(v3 + 16))
    return std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a3, *(char **)v3, *(char **)(v3 + 8), *(_QWORD *)(v3 + 8) - *(_QWORD *)v3);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++[abi:ne180100]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 12) = *(_OWORD *)(a1 + 12);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>((char *)(a2 + 32), *(__int128 **)(a1 + 32), *(__int128 **)(a1 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3));
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 120);
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  return std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++((std::regex_iterator<std::__wrap_iter<const char *>, char> *)a1);
}

void sub_1A186F8CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void NLMessageIntentDomainDetector::getCandidateIntentTypes(std::string *a1@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, uint64_t *a4@<X8>)
{
  size_t v8;
  std::string *v9;
  const void *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  void *v15;
  int v16;
  CFStringRef CFStringFromString;
  std::string::size_type size;
  unsigned __int8 *v19;
  _DWORD *v20;
  uint64_t v21;
  _BYTE v22[40];
  std::string v23;
  _OWORD v24[2];
  int v25;
  std::string __str;
  std::string v27;
  std::string *v28;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v27 = *(std::string *)a2;
  if (*((char *)a3 + 23) >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  v9 = &v23;
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, v8 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if (*((char *)a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = *a3;
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 32;
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)a2;
  else
    v12 = *(const std::string::value_type **)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  v14 = std::string::append(&v23, v12, v13);
  v15 = (void *)v14->__r_.__value_.__r.__words[0];
  v16 = SHIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  CFStringFromString = createCFStringFromString((uint64_t)&v27);
  NLMessageIntentDomainDetector::hasPhotoSharingKeywords(a1, a2, (uint64_t)&__str);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    memset(v24, 0, sizeof(v24));
    v25 = 1065353216;
    getUTF8StringFromCFString(kNLMessageIntentAttributeKeywordsKey, &v23);
    v28 = &v23;
    v19 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v24, (unsigned __int8 *)&v23, (uint64_t)&std::piecewise_construct, (__int128 **)&v28);
    std::string::operator=((std::string *)(v19 + 40), &__str);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v22, (uint64_t)v24);
    NLMessageIntentTypeWithMetadata::NLMessageIntentTypeWithMetadata(&v23, 1, (uint64_t)v22);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v22);
    v20 = (_DWORD *)a4[1];
    if ((unint64_t)v20 >= a4[2])
    {
      v21 = std::vector<NLMessageIntentTypeWithMetadata>::__push_back_slow_path<NLMessageIntentTypeWithMetadata const&>(a4, &v23);
    }
    else
    {
      *v20 = v23.__r_.__value_.__l.__data_;
      std::unordered_map<std::string,std::string>::unordered_map((uint64_t)(v20 + 2), (uint64_t)&v23.__r_.__value_.__l.__size_);
      v21 = (uint64_t)(v20 + 12);
      a4[1] = (uint64_t)(v20 + 12);
    }
    a4[1] = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v23.__r_.__value_.__l.__size_);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v24);
  }
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_35;
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(v15);
LABEL_35:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_1A186FB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  int v35;
  uint64_t v36;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a16);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a24);
  if (a34 < 0)
    operator delete(__p);
  std::vector<NLMessageIntentTypeWithMetadata>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (v35 < 0)
    operator delete(v34);
  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  _Unwind_Resume(a1);
}

os_log_t ___ZL41LogHandleForNLMessageIntentDomainDetectorv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.NLP", "NLMessageIntentDomainDetector");
  LogHandleForNLMessageIntentDomainDetector(void)::logHandle = (uint64_t)result;
  return result;
}

std::string *std::pair<std::vector<std::string>,std::vector<std::string>>::pair[abi:ne180100]<std::vector<std::string>&,std::vector<std::string>&,0>(std::string *a1, __int128 **a2, __int128 **a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return a1;
}

void sub_1A186FCBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1A186FD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1A186FE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

char *std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1A186FF3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A18701D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1A1870284(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<std::string>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A1870560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1A1870600(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1A18707C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1A18707C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v19 = **a4;
  v17[4] = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1A1870BAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::ostream_iterator<std::string,char,std::char_traits<char>>,0>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  v8 = a3;
  v9 = a4;
  if (result != a2)
  {
    do
    {
      result = std::ostream_iterator<std::string,char,std::char_traits<char>>::operator=[abi:ne180100]((uint64_t)&v8, v5);
      v5 += 24;
    }
    while (v5 != a2);
    a3 = v8;
    a4 = v9;
    v5 = a2;
  }
  *a5 = v5;
  a5[1] = a3;
  a5[2] = a4;
  return result;
}

uint64_t std::ostream_iterator<std::string,char,std::char_traits<char>>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, a2, v5);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = strlen(*(const char **)(a1 + 8));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)a1, v6, v7);
  }
  return a1;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1A1B0DEF4](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1A1B0DF00](v13);
  return a1;
}

void sub_1A1870DA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1A1B0DF00](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1A1870D80);
}

void sub_1A1870DE8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1A1870F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::assign[abi:ne180100]<std::__wrap_iter<char const*>,0>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3, int a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::regex_traits<char> v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::__wrap_iter<char const*>>(&v9, a2, a3, a4);
  std::locale::operator=((std::locale *)a1, &v9.__loc_);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v9.__ct_;
  *(_OWORD *)(a1 + 24) = v10;
  std::shared_ptr<NL::ParseAttribute>::operator=[abi:ne180100](a1 + 40, &v11);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  *(_QWORD *)(a1 + 56) = v12;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::locale::~locale(&v9.__loc_);
  return a1;
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::__wrap_iter<char const*>>(std::regex_traits<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3, int a4)
{
  std::regex_traits<char> *v8;

  v8 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v8[1].__loc_.__locale_) = a4;
  *(_OWORD *)((char *)&v8[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v8[1].__col_ + 4) = 0u;
  HIDWORD(v8[2].__ct_) = 0;
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v8, a2, a3) != a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1A1871040(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E45CE968;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (char *)a3);
  }
}

void sub_1A18711B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A1871204(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *first;
  std::__owns_one_state<char> *v11;
  unsigned __int8 *v12;
  std::__node<char> *v13;
  std::__owns_one_state<char> *v14;
  std::__node<char> *v15;

  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2)
  {
    v8 = (std::__node<char> *)operator new();
    v9 = a1->__end_;
    first = v9->__first_;
    v8[1].__vftable = (std::__node<char>_vtbl *)first;
    v9->__first_ = v8;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v7 == (unsigned __int8 *)a3)
    return a3;
  while (*v7 == 124)
  {
    v11 = a1->__end_;
    v12 = v7 + 1;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(a1, v7 + 1, a3);
    if (v12 == v7)
    {
      v13 = (std::__node<char> *)operator new();
      v14 = a1->__end_;
      v15 = v14->__first_;
      v13[1].__vftable = (std::__node<char>_vtbl *)v15;
      v14->__first_ = v13;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v11);
    if (v7 == (unsigned __int8 *)a3)
      return a3;
  }
  return (char *)v7;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return (char *)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_1E45CEC60;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)v3, v4);
    }
    while (v10 != v3);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_1E45CECC0;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (std::basic_regex<char> *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, (std::basic_regex<char> *)(v8 + 1), a3);
    if (v8 + 1 == v10)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>((uint64_t)a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = v8 + 1;
  while (v12 != a3)
  {
    v13 = (unsigned __int8 *)memchr(v12, 10, a3 - v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>((uint64_t)a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = v14 + 1;
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *end;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::basic_regex<char> *v12;
  std::basic_regex<char> *v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
  while (v12 != a3)
  {
    v13 = (std::basic_regex<char> *)memchr(v12, 10, (char *)a3 - (char *)v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A187187C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

_QWORD *std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E45CF1F8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1A1871900(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x1A1B0E068);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v5;

  do
  {
    v5 = a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, (char *)a2, a3);
  }
  while (v5 != a2);
  return v5;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, (unsigned __int8 *)a2, a3);
    result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v14;
  int v16;
  BOOL v17;
  unsigned int marked_count;
  std::basic_regex<char> v19;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        v7 = a2[2];
        if (v7 == 33)
        {
          std::regex_traits<char>::regex_traits(&v19.__traits_);
          memset(&v19.__flags_, 0, 40);
          v19.__flags_ = this->__flags_;
          v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v19, v3 + 3, a3);
          marked_count = v19.__marked_count_;
          std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v19, 1, this->__marked_count_);
          this->__marked_count_ += marked_count;
          if (v8 == a3 || *v8 != 41)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          goto LABEL_27;
        }
        if (v7 == 61)
        {
          std::regex_traits<char>::regex_traits(&v19.__traits_);
          memset(&v19.__flags_, 0, 40);
          v19.__flags_ = this->__flags_;
          v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v19, v3 + 3, a3);
          v9 = v19.__marked_count_;
          std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v19, 0, this->__marked_count_);
          this->__marked_count_ += v9;
          if (v8 == a3 || *v8 != 41)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_27:
          v3 = v8 + 1;
          std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&v19.__start_);
          std::locale::~locale(&v19.__traits_.__loc_);
          return v3;
        }
      }
      return v3;
    }
    v10 = operator new();
    v11 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
LABEL_17:
    *(_QWORD *)v10 = v14 + 16;
    *(_QWORD *)(v10 + 8) = first;
    *(_BYTE *)(v10 + 16) = v11;
    end->__first_ = (std::__node<char> *)v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v10 = operator new();
    v11 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    goto LABEL_17;
  }
  if (a2 + 1 != a3)
  {
    v16 = a2[1];
    if (v16 == 66)
    {
      v17 = 1;
    }
    else
    {
      if (v16 != 98)
        return v3;
      v17 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v17);
    v3 += 2;
  }
  return v3;
}

void sub_1A1871DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v3;
  int v6;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  _BYTE *v11;
  char *v12;
  unsigned int marked_count;
  char *v14;
  char *v15;

  v3 = a2;
  if (a2 != (unsigned __int8 *)a3)
  {
    v6 = (char)*a2;
    if (v6 <= 62)
    {
      if (v6 == 40)
      {
        v11 = a2 + 1;
        if (a2 + 1 != (unsigned __int8 *)a3)
        {
          if (a2 + 2 != (unsigned __int8 *)a3 && *v11 == 63 && a2[2] == 58)
          {
            ++this->__open_count_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, a2 + 3, a3);
            if (v12 != a3 && *v12 == 41)
            {
              --this->__open_count_;
              return (unsigned __int8 *)(v12 + 1);
            }
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
            marked_count = this->__marked_count_;
            ++this->__open_count_;
            v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, v11, a3);
            if (v14 != a3)
            {
              v15 = v14;
              if (*v14 == 41)
              {
                std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
                --this->__open_count_;
                return (unsigned __int8 *)(v15 + 1);
              }
            }
          }
        }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if (v6 == 46)
      {
        v7 = (std::__node<char> *)operator new();
        end = this->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_1E45CF260;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        return ++v3;
      }
      if ((v6 - 42) >= 2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
LABEL_28:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    }
    if (v6 > 91)
    {
      if (v6 == 92)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, a2, (unsigned __int8 *)a3);
      if (v6 == 123)
        goto LABEL_28;
    }
    else
    {
      if (v6 == 91)
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, a3);
      if (v6 == 63)
        goto LABEL_28;
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    v13 = a2;
    if (v12 != 123)
      return v13;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(a1, a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v10, v23, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  v13 = a2;
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &unk_1E45CEAB8;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  std::__node<char> *v8;

  v8 = (std::__node<char> *)operator new();
  std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100]((uint64_t)v8, (uint64_t)a2, a3, (uint64_t)this->__end_->__first_, a4);
  this->__end_->__first_ = v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1A18723F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1B0E068](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A1872454(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E45CEAB8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E45CEAB8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &unk_1E45CE998;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(_BYTE *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E45CE998;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E45CE998;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1A1B0E068);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::sub_match<const char *> *begin;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  std::vector<std::csub_match>::value_type v22;
  char v23;
  uint64_t v24;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  memset(&v22, 0, 17);
  v23 = 0;
  v24 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  v19 = v5;
  v20 = v5;
  v21 = 0;
  v22 = v18;
  v24 = v5;
  v23 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1A1872AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A1872B88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A1872BD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 85) = *(_QWORD *)(a2 + 85);
  *((_QWORD *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_1A1872D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 - 48);
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 11) = *(_QWORD *)(a3 - 11);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 96;
      *((_QWORD *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void std::__split_buffer<std::__state<char>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100](v4, (_QWORD *)(i - 96));
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::__compressed_pair<std::csub_match *> *p_end_cap;
  std::sub_match<const char *> *v7;
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  std::sub_match<const char *> *v15;
  std::vector<std::csub_match>::size_type v16;
  std::pair<const char *, const char *> v17;
  std::sub_match<const char *> *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> *v21;
  std::pair<const char *, const char *> v22;
  std::sub_match<const char *> *v23;
  std::sub_match<const char *> *end;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v26;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      v15 = &v9[__n];
      v16 = 24 * __n;
      do
      {
        v17 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&v9->matched = *(_QWORD *)&__x->matched;
        v9->std::pair<const char *, const char *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v13);
    else
      v14 = 0;
    v18 = (std::sub_match<const char *> *)&v14[24 * v10];
    v19 = &v18[__n];
    v20 = 24 * __n;
    v21 = v18;
    do
    {
      v22 = __x->std::pair<const char *, const char *>;
      v21[1].first = *(const char **)&__x->matched;
      *v21 = v22;
      v21 = (std::pair<const char *, const char *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    v23 = (std::sub_match<const char *> *)&v14[24 * v13];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v26 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v18[-1].matched = *(_QWORD *)&end[-1].matched;
        v18[-1].std::pair<const char *, const char *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
      operator delete(end);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1A1873138(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<NL::Entity>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1A18731A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
  if (v5 == result)
  {
    result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(a1, (char *)a2 + 1, (char *)a3);
    if (v5 == result)
    {
      result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (v5 == result)
        return a2;
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t *v7;
  char *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v5, a3, v7);
    }
    while (v8 != v5);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &unk_1E45CF2C0;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &unk_1E45CF290;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A1873510(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1B0E068);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A18735F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v4;
  unsigned int v5;
  int v6;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = *a2;
    v5 = v4 - 48;
    if (v4 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return ++v3;
    }
    if ((v4 - 49) > 8)
      return v3;
    if (++v3 == a3)
    {
      v3 = a3;
    }
    else
    {
      while (1)
      {
        v6 = *v3;
        if ((v6 - 48) > 9)
          break;
        if (v5 >= 0x19999999)
          goto LABEL_16;
        ++v3;
        v5 = v6 + 10 * v5 - 48;
        if (v3 == a3)
        {
          v3 = a3;
          break;
        }
      }
      if (!v5)
        goto LABEL_16;
    }
    if (v5 <= a1->__marked_count_)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
      return v3;
    }
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  int v4;
  BOOL v5;
  BOOL v6;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v8;
  BOOL v9;
  std::__bracket_expression<char, std::regex_traits<char>> *v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100)
      return v3;
    v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      v6 = 1;
      goto LABEL_12;
    case 'S':
      v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      v5 = 1;
LABEL_15:
      v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  char v6;
  std::string *v7;
  std::basic_regex<char>::value_type locale;
  int v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  std::string::value_type v16;
  unsigned int v17;
  std::string::value_type v18;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v7 = a4;
            locale = 10;
            goto LABEL_52;
          }
          locale = 10;
          goto LABEL_61;
        case 'r':
          if (a4)
          {
            v7 = a4;
            locale = 13;
            goto LABEL_52;
          }
          locale = 13;
          goto LABEL_61;
        case 't':
          if (a4)
          {
            v7 = a4;
            locale = 9;
            goto LABEL_52;
          }
          locale = 9;
          goto LABEL_61;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_66;
          v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
            goto LABEL_66;
          v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_66;
          v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_24;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6)
            goto LABEL_66;
          v11 = -87;
LABEL_24:
          v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_66;
          v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_30;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6)
            goto LABEL_66;
          v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_66;
          v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
            goto LABEL_35;
          v14 |= 0x20u;
          if ((v14 - 97) >= 6)
            goto LABEL_66;
          v15 = -87;
LABEL_35:
          v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4)
            std::string::operator=(a4, v16);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            v7 = a4;
            locale = 11;
            goto LABEL_52;
          }
          locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_47;
      }
      goto LABEL_61;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v7 = a4;
        locale = 0;
        goto LABEL_52;
      }
      locale = 0;
LABEL_61:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v7 = a4;
          locale = 12;
LABEL_52:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_61;
      }
LABEL_47:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v7 = a4;
          goto LABEL_52;
        }
        goto LABEL_61;
      }
LABEL_66:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_66;
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65)
      goto LABEL_66;
    v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v17 >= 0x5B && (v17 - 97) > 0x19u)
      goto LABEL_66;
    v18 = v17 & 0x1F;
    if (a4)
      std::string::operator=(a4, v18);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](v8, (uint64_t)this, v2, (uint64_t)this->__end_->__first_);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E45CEC90;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1E45CE9F8;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1A1873B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1B0E068](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A1873BC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1E45CE648;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_1E45CEC00;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1A1873D3C(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E45CEC00;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E45CEC00;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E45CEC90;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E45CEC90;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E45CEAE8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E45CEAE8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E45CEBD0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E45CEBD0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = *(unsigned __int8 **)(a2 + 16);
      v10 = v6;
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v9++;
        if (v11 != v13)
          break;
        if (!--v10)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1B0E068);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 40);
  v5 = *(_BYTE **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_1A1874818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  _Unwind_Resume(a1);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_1A18749D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1A1874B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1A1874C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A1874CB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char *v4;
  int v5;
  uint64_t v6;
  int v9;
  char *v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  std::string *v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  std::string::size_type size;
  char v21;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_38;
    }
    if (v9 == 61)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
LABEL_38:
      v6 = (uint64_t)v10;
      v21 = 0;
      goto LABEL_42;
    }
    goto LABEL_9;
  }
  v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = v19;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = v19;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_40:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
          goto LABEL_41;
        }
        v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_25;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v16 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_40;
LABEL_25:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0]);
    }
LABEL_41:
    v21 = 1;
    v4 = v14;
    goto LABEL_42;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v17 == 91 && *v4 == 46)
  {
    v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = v18;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v17) = *v17;
    if ((_DWORD)v17 == 92)
    {
      if (v11)
        v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      else
        v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v17) = *v17;
  }
  std::string::operator=(&v25, (std::string::value_type)v17);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v21 = 1;
LABEL_42:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v21 & 1) != 0)
    return v4;
  return (char *)v6;
}

void sub_1A1875014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char *v6;
  char *v7;
  char *v8;
  char *i;
  int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *__p[2];
  unsigned __int8 v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 v22;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  v6 = a3 - 2;
  v7 = a2;
  v8 = a2;
  for (i = a2; ; v8 = i)
  {
    v10 = *i++;
    if (v10 == 61 && *i == 93)
      break;
    if (a2 == v6)
      goto LABEL_33;
    ++v7;
    --v6;
  }
  if (v8 == a3)
LABEL_33:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, v7, (uint64_t)&v20);
  if (((char)v22 & 0x80000000) == 0)
  {
    v11 = v22;
    if (v22)
    {
      v12 = (char *)&v20;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v11 = v21;
  if (!v21)
    goto LABEL_34;
  v12 = (char *)v20;
LABEL_14:
  std::regex_traits<char>::__transform_primary<char *>(a1, v12, &v12[v11], (uint64_t)__p);
  v13 = v19;
  if ((v19 & 0x80u) != 0)
    v13 = (unint64_t)__p[1];
  if (v13)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (__int128 *)__p);
  }
  else
  {
    v14 = v22;
    if ((v22 & 0x80u) != 0)
      v14 = v21;
    if (v14 == 2)
    {
      v16 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v16 = (char *)v20;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v15 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v15 = (char *)v20;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v15);
    }
  }
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if ((char)v22 < 0)
    operator delete(v20);
  return v7 + 2;
}

void sub_1A1875230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *i;
  int v9;
  int v10;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  for (i = a2; ; v7 = i)
  {
    v9 = *i++;
    if (v9 == 58 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_11;
    ++v6;
    --v5;
  }
  if (v7 == a3)
LABEL_11:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  v10 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, a2, v6, *(_DWORD *)(a1 + 24) & 1);
  if (!v10)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  *(_DWORD *)(a4 + 160) |= v10;
  return v6 + 2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *i;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  unint64_t v14;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  for (i = a2; ; v7 = i)
  {
    v9 = *i++;
    if (v9 == 46 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_15;
    ++v6;
    --v5;
  }
  if (v7 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v13;
  v10 = v14;
  *(_QWORD *)(a4 + 16) = v14;
  v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  unint64_t v7;
  char *v8;
  char v9;
  char *v10;
  unint64_t j;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v16;
  unint64_t k;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t m;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  _BYTE *v32;
  char *v33;
  char v34;
  _BYTE *v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  uint64_t v43;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        v7 = v4[23] < 0 ? *((_QWORD *)v4 + 1) : v4[23];
        if (i >= v7)
          break;
        v8 = v4;
        if (v4[23] < 0)
          v8 = *(char **)v4;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v8[i]);
        v10 = v4;
        if (v4[23] < 0)
          v10 = *(char **)v4;
        v10[i] = v9;
      }
      for (j = 0; ; ++j)
      {
        v12 = v3[23] < 0 ? *((_QWORD *)v3 + 1) : v3[23];
        if (j >= v12)
          break;
        v13 = v3;
        if (v3[23] < 0)
          v13 = *(char **)v3;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v13[j]);
        v15 = v3;
        if (v3[23] < 0)
          v15 = *(char **)v3;
        v15[j] = v14;
      }
    }
    else
    {
      for (k = 0; ; ++k)
      {
        v18 = a2[23] < 0 ? *((_QWORD *)a2 + 1) : a2[23];
        if (k >= v18)
          break;
        v19 = a2;
        if (a2[23] < 0)
          v19 = *(char **)a2;
        v20 = a2;
        if (a2[23] < 0)
          v20 = *(char **)a2;
        v20[k] = v19[k];
      }
      for (m = 0; ; ++m)
      {
        v22 = a3[23] < 0 ? *((_QWORD *)a3 + 1) : a3[23];
        if (m >= v22)
          break;
        v23 = a3;
        if (a3[23] < 0)
          v23 = *(char **)a3;
        v24 = a3;
        if (a3[23] < 0)
          v24 = *(char **)a3;
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      v26 = v4;
      v4 = *(char **)v4;
      v25 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v25 = v4[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      v28 = v3;
      v3 = *(char **)v3;
      v27 = *((_QWORD *)v28 + 1);
    }
    else
    {
      v27 = v3[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)v40 = v38;
    v41 = v39;
    *(_OWORD *)__p = *(_OWORD *)v36;
    v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
  else
  {
    if (a2[23] < 0)
      v16 = *((_QWORD *)a2 + 1);
    else
      v16 = a2[23];
    if (v16 != 1 || (a3[23] < 0 ? (v29 = *((_QWORD *)a3 + 1)) : (v29 = a3[23]), v29 != 1))
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    if (*(_BYTE *)(a1 + 169))
    {
      v30 = a2;
      if (a2[23] < 0)
        v30 = *(char **)a2;
      v31 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v30);
      v32 = v4;
      if (v4[23] < 0)
        v32 = *(_BYTE **)v4;
      *v32 = v31;
      v33 = v3;
      if (v3[23] < 0)
        v33 = *(char **)v3;
      v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v33);
      v35 = v3;
      if (v3[23] < 0)
        v35 = *(_BYTE **)v3;
      *v35 = v34;
    }
    *(_OWORD *)v40 = *(_OWORD *)v4;
    v41 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v43 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
}

void sub_1A1875A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  __int16 v8;
  _WORD *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _WORD *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;

  if (!*(_BYTE *)(a1 + 169))
  {
    v18 = a1 + 128;
    v19 = *(_QWORD *)(a1 + 128);
    v10 = (char **)(a1 + 112);
    v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v9 = *(_WORD **)(a1 + 120);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        v21 = v20 >> 1;
        v22 = v19 - (_QWORD)*v10;
        if (v22 <= (v20 >> 1) + 1)
          v23 = v21 + 1;
        else
          v23 = v22;
        if (v22 >= 0x7FFFFFFFFFFFFFFELL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v18, v24);
        else
          v25 = 0;
        v27 = &v25[2 * v21];
        v28 = &v25[2 * v24];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v38 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v38)
          goto LABEL_46;
        do
        {
          v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        v33 = v32 >> 1;
        v34 = v19 - (_QWORD)*v10;
        if (v34 <= (v32 >> 1) + 1)
          v35 = v33 + 1;
        else
          v35 = v34;
        if (v34 >= 0x7FFFFFFFFFFFFFFELL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v18, v36);
        else
          v37 = 0;
        v27 = &v37[2 * v33];
        v28 = &v37[2 * v36];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v40 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v40)
          goto LABEL_46;
        do
        {
          v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = v5 | (unsigned __int16)(v6 << 8);
  v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *v9 = v8;
    v26 = v9 + 1;
    goto LABEL_48;
  }
  v10 = (char **)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3)
    goto LABEL_49;
  v13 = v12 >> 1;
  v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1)
    v15 = v13 + 1;
  else
    v15 = v14;
  if (v14 >= 0x7FFFFFFFFFFFFFFELL)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a1 + 128, v16);
  else
    v17 = 0;
  v27 = &v17[2 * v13];
  v28 = &v17[2 * v16];
  *(_WORD *)v27 = v8;
  v26 = v27 + 2;
  v30 = *(char **)(a1 + 112);
  v29 = *(char **)(a1 + 120);
  if (v29 == v30)
    goto LABEL_46;
  do
  {
    v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  v29 = *v10;
LABEL_46:
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 128) = v28;
  if (v29)
    operator delete(v29);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A1875D1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A1875DA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t classname;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_1A1875E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 64);
  v5 = *(_BYTE **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 72) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A18760D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A18762BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A1876308(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E45CEB48;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E45CEB48;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E45CEB48;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1A1B0E068);
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(_QWORD *)(v7 - 8) = v5;
      *(_QWORD *)v7 = v5;
      *(_BYTE *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E45CEB48;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_RE_expression<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  do
  {
    v5 = a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  }
  while (v5 != a2);
  return v5;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A1B0DDC8](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A18765EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v8;

  if (a2 == a3)
    return (unsigned __int8 *)a2;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2)
    return (unsigned __int8 *)a2;
  else
    return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  uint64_t v9;
  unsigned int marked_count;
  char *v11;
  _BOOL4 v12;
  uint64_t v13;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  v7 = v6;
  if (a2 == v6 && a2 != a3 && a2 + 1 != a3)
  {
    v9 = (uint64_t)v6;
    if (*a2 == 92)
      v9 = (uint64_t)&a2[2 * (a2[1] == 40)];
    if ((char *)v9 == a2)
    {
      if (*a2 == 92)
      {
        v12 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, a2[1]);
        v13 = 2;
        if (!v12)
          v13 = 0;
        return &a2[v13];
      }
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      marked_count = a1->__marked_count_;
      v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_RE_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (uint64_t)a3);
      if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      v7 = v11 + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  std::basic_regex<char> *v22;
  int v24;
  int v25;

  v6 = a2;
  if (a2 != a3)
  {
    v7 = __mexp_end;
    v8 = __mexp_begin;
    v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v13 = a2 + 2;
      v25 = 0;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 2, a3, &v25);
      if (v13 == v14)
        goto LABEL_16;
      if (v14 != a3)
      {
        v15 = v14 + 1;
        v16 = *v14;
        if (v16 == 44)
        {
          v24 = -1;
          v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            v19 = v24;
            v18 = v25;
            if (v24 == -1)
            {
              v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            v6 = &v17[2 * (v17[1] == 125)];
            v20 = v8;
            v21 = v7;
            v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          v6 = v14 + 2;
          v18 = v25;
          v20 = v8;
          v21 = v7;
          v22 = this;
          v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v6;
  char *result;
  std::__node<char> *v9;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
    if (result != a2)
      return result;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
    return a2 + 1;
  }
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  v9 = (std::__node<char> *)operator new();
  end = this->__end_;
  first = end->__first_;
  v9->__vftable = (std::__node<char>_vtbl *)&unk_1E45CE9C8;
  v9[1].__vftable = (std::__node<char>_vtbl *)first;
  end->__first_ = v9;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  return a2 + 1;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1B0E068);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  int locale_low;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  std::basic_regex<char> *v17;
  std::basic_regex<char> *v18;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3)
    goto LABEL_12;
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      goto LABEL_8;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v17 == a3 || (v18 = v17, LOBYTE(v17->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)&v18->__traits_.__loc_.__locale_ + 1;
LABEL_12:
      if (v9 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
LABEL_8:
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = v14 + 16;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (unsigned __int8 *)a2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  char *result;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (result == (char *)a2)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
      }
      else
      {
        v7 = (std::__node<char> *)operator new();
        end = a1->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_1E45CE9C8;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        return (char *)&a2->__traits_.__loc_.__locale_ + 1;
      }
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int locale_low;
  uint64_t v5;

  v3 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    v5 = (locale_low - 36);
    if (v5 > 0x3A)
      goto LABEL_8;
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0)
      return v3;
    if (v5 == 5)
    {
      if (a1->__open_count_)
        return v3;
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2)
        return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  char v6;
  BOOL v7;
  _BOOL4 v9;
  uint64_t v10;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = a2 + 1;
    if (v3 + 1 != a3 && *v3 == 92)
    {
      v5 = *v4;
      v6 = *v4;
      v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
      if (v7 && (v5 - 123) >= 3)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
        {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
        }
        else
        {
          v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
          v10 = 2;
          if (!v9)
            v10 = 0;
          v3 += v10;
        }
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
        v3 += 2;
      }
    }
  }
  return v3;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A187729C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x68uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::basic_regex<char,std::regex_traits<char>>>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1A1877308(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::basic_regex<char,std::regex_traits<char>>>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  std::regex_traits<char>::regex_traits((std::regex_traits<char> *)&this[1]);
  this[3].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  return this;
}

void sub_1A1877380(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::basic_regex<char,std::regex_traits<char>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *a1, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  std::vector<std::ssub_match>::pointer begin;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  std::vector<std::ssub_match>::pointer end;
  std::sub_match<std::__wrap_iter<const char *>> *v23;

  v10 = a4[6];
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  begin = a1->__begin_;
  if (a1->__end_ != a1->__begin_)
  {
    v12 = 0;
    v13 = 0;
    v15 = *a4;
    v14 = a4[1];
    do
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      v17 = (_QWORD *)(v15 + v12 * 24);
      if (v16 <= v13)
        v18 = a4 + 3;
      else
        v18 = v17;
      begin[v12].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v18 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13)
        v19 = a4 + 3;
      else
        v19 = (uint64_t *)(*a4 + v12 * 24);
      a1->__begin_[v12].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + v19[1] - v10);
      v15 = *a4;
      v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13)
        v20 = a4 + 3;
      else
        v20 = (uint64_t *)(*a4 + v12 * 24);
      v21 = *((_BYTE *)v20 + 16);
      begin = a1->__begin_;
      end = a1->__end_;
      a1->__begin_[v12].matched = v21;
      ++v13;
      ++v12;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  }
  a1[1].__begin_ = a3;
  a1[1].__end_ = a3;
  LOBYTE(a1[1].__end_cap_.__value_) = 0;
  v23 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  a1[2].__begin_ = v23;
  a1[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(a1[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  a1[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  a1[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(a1[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    a1[4].__end_ = v23;
  LOBYTE(a1[4].__begin_) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v55[40];
  __int128 v56;
  void *__p[2];
  _QWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)v55 = 0;
    memset(&v55[8], 0, 32);
    v56 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    memset(v58, 0, 21);
    std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v55[32])
    {
      *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
      operator delete(*(void **)&v55[32]);
    }
    v12 = *((_QWORD *)&v59 + 1);
    v13 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v13 / 0x2A));
    v16 = 3 * (v13 % 0x2A);
    v17 = v15 + 32 * v16;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    v53 = 0;
    v18 = 0;
    v51 = 0;
    v52 = a2;
    v19 = a3 - a2;
    v20 = *((_QWORD *)&v61 + 1);
    v21 = *((_QWORD *)&v59 + 1);
    v22 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v23 = v22 / 0x2A;
    v24 = 3 * (v22 % 0x2A);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    v25 = *(_QWORD *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(_BYTE *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v27 = v20 + v61 - 1;
      v28 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v27 / 0x2A));
      v29 = v27 % 0x2A;
      v30 = v28 + 96 * (v27 % 0x2A);
      v32 = (_QWORD *)(v30 + 80);
      v31 = *(_QWORD *)(v30 + 80);
      if (v31)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v28 + 96 * v29);
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          v33 = *(_QWORD *)(v28 + 96 * v29 + 16);
          v35 = (a5 & 0x1000) == 0 || v33 == a3;
          v36 = v33 != v52 || (a5 & 0x20) == 0;
          if (!v36 || !v35)
            goto LABEL_37;
          v37 = v33 - *(_QWORD *)(v28 + 96 * v29 + 8);
          v38 = v51;
          if ((v53 & (v51 >= v37)) == 0)
            v38 = v37;
          if (v38 != v19)
          {
            v51 = v38;
            std::deque<std::__state<char>>::pop_back(&v59);
            v53 = 1;
            goto LABEL_38;
          }
          v39 = (void **)*((_QWORD *)&v59 + 1);
          v40 = v60;
          if ((_QWORD)v60 == *((_QWORD *)&v59 + 1))
          {
            v40 = *((_QWORD *)&v59 + 1);
          }
          else
          {
            v41 = (_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((unint64_t)v61 / 0x2A));
            v42 = (_QWORD *)(*v41 + 96 * ((unint64_t)v61 % 0x2A));
            v43 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) % 0x2AuLL);
            if (v42 != (_QWORD *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v61 + 8, v42);
                v42 += 12;
                if ((_QWORD *)((char *)v42 - *v41) == (_QWORD *)4032)
                {
                  v44 = (_QWORD *)v41[1];
                  ++v41;
                  v42 = v44;
                }
              }
              while (v42 != (_QWORD *)v43);
              v39 = (void **)*((_QWORD *)&v59 + 1);
              v40 = v60;
            }
          }
          *((_QWORD *)&v61 + 1) = 0;
          v47 = v40 - (_QWORD)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              v39 = (void **)(*((_QWORD *)&v59 + 1) + 8);
              *((_QWORD *)&v59 + 1) = v39;
              v47 = v60 - (_QWORD)v39;
            }
            while ((_QWORD)v60 - (_QWORD)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2)
              goto LABEL_53;
            v48 = 42;
          }
          *(_QWORD *)&v61 = v48;
LABEL_53:
          v53 = 1;
          v51 = v19;
LABEL_38:
          v20 = *((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1))
            continue;
          if ((v53 & 1) != 0)
          {
            v49 = *a4;
            *(_QWORD *)v49 = v52;
            *(_QWORD *)(v49 + 8) = v52 + v51;
            v6 = 1;
            *(_BYTE *)(v49 + 16) = 1;
          }
          else
          {
            v6 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v59, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v59);
          goto LABEL_38;
        case 0xFFFFFC20:
          v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)v55 = *(_OWORD *)v30;
          *(_OWORD *)&v55[16] = v45;
          v56 = 0uLL;
          *(_QWORD *)&v55[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v55[32], *(__int128 **)(v28 + 96 * v29 + 32), *(__int128 **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 40) - *(_QWORD *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v58[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v28 + 96 * v29 + 56), *(__int128 **)(v28 + 96 * v29 + 64), (uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 64) - *(_QWORD *)(v28 + 96 * v29 + 56)) >> 4);
          v46 = *v32;
          *(_QWORD *)((char *)&v58[1] + 5) = *(_QWORD *)(v30 + 85);
          v58[1] = v46;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v58[1] + 24))(v58[1], 0, v55);
          std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v55[32])
          {
            *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
            operator delete(*(void **)&v55[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v59);
  return v6;
}

void sub_1A1877A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((_QWORD *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  unsigned int v12;
  const char *v13;
  _OWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  const char *v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  __int128 v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v41;
  const char *v42;
  char v43;
  _BYTE v46[56];
  void *__p[2];
  _QWORD v48[4];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v50[40];
  __int128 v51;
  void *v52[6];
  _OWORD *v53;
  _OWORD *v54;
  _QWORD v55[3];

  v53 = 0;
  v54 = 0;
  v55[0] = 0;
  *(_DWORD *)v50 = 0;
  memset(&v50[8], 0, 32);
  v51 = 0u;
  memset(v52, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_43;
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v46 = 0;
  memset(&v46[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v48, 0, 21);
  v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v46[32])
  {
    *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  v41 = a4;
  v11 = v54;
  *((_DWORD *)v54 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
  std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v54 - 40), *(unsigned int *)(a1 + 32));
  v42 = 0;
  v43 = 0;
  v12 = 0;
  v13 = (const char *)(a3 - a2);
  v14 = v54;
  *((_QWORD *)v54 - 2) = v6;
  *((_DWORD *)v14 - 2) = a5;
  *((_BYTE *)v14 - 4) = a6;
  do
  {
    v15 = (++v12 & 0xFFF) != 0 || (int)(v12 >> 12) < (int)v13;
    if (!v15)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v17 = v14 - 1;
    v16 = *((_QWORD *)v14 - 2);
    v18 = v14 - 6;
    if (v16)
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 16))(v16, v14 - 6);
    switch(*(_DWORD *)v18)
    {
      case 0xFFFFFC18:
        v19 = (const char *)*((_QWORD *)v14 - 10);
        if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != a3)
          goto LABEL_19;
        v26 = &v19[-*((_QWORD *)v14 - 11)];
        v27 = v42;
        if ((v43 & ((uint64_t)v42 >= (uint64_t)v26)) == 0)
        {
          v28 = *(v14 - 5);
          *(_OWORD *)v50 = *(_OWORD *)v18;
          *(_OWORD *)&v50[16] = v28;
          if (v50 != v18)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v50[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v52, *((uint64_t **)v14 - 5), *((uint64_t **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          }
          v29 = (void *)*v17;
          *(void **)((char *)&v52[3] + 5) = *(void **)((char *)v14 - 11);
          v52[3] = v29;
          v27 = v26;
        }
        v30 = v54;
        if (v27 == v13)
        {
          v31 = (uint64_t)v53;
          while (v30 != (_QWORD *)v31)
          {
            v30 -= 12;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, v30);
          }
          v54 = (_OWORD *)v31;
          v43 = 1;
          v42 = (const char *)(a3 - a2);
        }
        else
        {
          v42 = v27;
          v32 = v54 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
          v54 = v32;
          v43 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        v20 = v54 - 6;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
        v54 = v20;
        break;
      case 0xFFFFFC20:
        v21 = *(v14 - 5);
        *(_OWORD *)v46 = *(_OWORD *)v18;
        *(_OWORD *)&v46[16] = v21;
        memset(&v46[32], 0, 24);
        std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v46[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v48[0] = 0;
        std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
        v22 = (void *)*v17;
        *(_QWORD *)((char *)&v48[1] + 5) = *(_QWORD *)((char *)v14 - 11);
        v48[1] = v22;
        (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 6);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v48[1] + 24))(v48[1], 0, v46);
        v23 = v54;
        if ((unint64_t)v54 >= v55[0])
        {
          v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v24 = *(_OWORD *)&v46[16];
          *v54 = *(_OWORD *)v46;
          v23[1] = v24;
          *((_QWORD *)v23 + 4) = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 7) = 0;
          v23[2] = *(_OWORD *)&v46[32];
          *((_QWORD *)v23 + 6) = *(_QWORD *)&v46[48];
          memset(&v46[32], 0, 24);
          *((_QWORD *)v23 + 8) = 0;
          *((_QWORD *)v23 + 9) = 0;
          *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v23 + 9) = v48[0];
          __p[0] = 0;
          __p[1] = 0;
          v48[0] = 0;
          v25 = v48[1];
          *(_QWORD *)((char *)v23 + 85) = *(_QWORD *)((char *)&v48[1] + 5);
          *((_QWORD *)v23 + 10) = v25;
          v54 = v23 + 6;
        }
        if (*(_QWORD *)&v46[32])
        {
          *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v14 = v54;
  }
  while (v53 != v54);
  if ((v43 & 1) != 0)
  {
    v33 = *v41;
    *(_QWORD *)v33 = a2;
    *(_QWORD *)(v33 + 8) = &v42[(_QWORD)a2];
    *(_BYTE *)(v33 + 16) = 1;
    if ((_QWORD)v51 != *(_QWORD *)&v50[32])
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(_QWORD *)&v50[32]) >> 3);
      v35 = (_BYTE *)(*(_QWORD *)&v50[32] + 16);
      v36 = 1;
      do
      {
        v37 = v33 + 24 * v36;
        *(_OWORD *)v37 = *((_OWORD *)v35 - 1);
        v38 = *v35;
        v35 += 24;
        *(_BYTE *)(v37 + 16) = v38;
        v15 = v34 > v36++;
      }
      while (v15);
    }
    v39 = 1;
  }
  else
  {
LABEL_43:
    v39 = 0;
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (*(_QWORD *)&v50[32])
  {
    *(_QWORD *)&v51 = *(_QWORD *)&v50[32];
    operator delete(*(void **)&v50[32]);
  }
  *(_QWORD *)v50 = &v53;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  return v39;
}

void sub_1A1877FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a19);
  std::__state<char>::~__state(&a35);
  a35 = v35 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v8 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = a1 + 5;
  v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;
  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x2A));
  v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4032;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_QWORD *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v7 - 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_QWORD *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v7 - 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v7 - 11) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v7 - 16) = v9;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1A18D4760);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1A1878544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 42 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A)
    a2 = 1;
  if (v5 < 0x54)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x2A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 21;
      else
        v40 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 21;
      else
        v35 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1A1878D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  __int128 *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    v19 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v19;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      v25 = result;
      if (a2 != a3)
      {
        v26 = result;
        do
        {
          *(_OWORD *)v26 = *v6;
          v26[16] = *((_BYTE *)v6 + 16);
          v25 += 24;
          v6 = (__int128 *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      v18 = v25 - result;
      v13 = result;
    }
    else
    {
      v21 = (__int128 *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)result = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          v6 = (__int128 *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      v22 = v13;
      if (v21 != a3)
      {
        v23 = v13;
        do
        {
          v24 = *v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          v23 += 24;
          v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<std::string>::__vallocate[abi:ne180100](a1, v12);
    v15 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v15;
    v16 = v15;
    if (v6 != a3)
    {
      v16 = v13;
      do
      {
        v17 = *v6;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v16 = v17;
        v16 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    v18 = v16 - v13;
  }
  *v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          v29 = v6[1];
          v6 += 2;
          *(_QWORD *)v27 = v28;
          *((_QWORD *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = (__int128 *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          *(_QWORD *)result = v21;
          *((_QWORD *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      v23 = v12;
      if (v20 != (__int128 *)a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_OWORD *)v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (__int128 *)a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::shared_ptr<NL::Entity>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::__compressed_pair<std::ssub_match *> *p_end_cap;
  std::sub_match<std::__wrap_iter<const char *>> *v5;
  std::sub_match<std::__wrap_iter<const char *>> *value;
  std::sub_match<std::__wrap_iter<const char *>> *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<std::__wrap_iter<const char *>> *v13;
  std::vector<std::ssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const char *>> *v15;
  std::sub_match<std::__wrap_iter<const char *>> *v16;
  std::vector<std::ssub_match>::size_type v17;
  std::sub_match<std::__wrap_iter<const char *>> *v18;
  std::sub_match<std::__wrap_iter<const char *>> *v19;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  std::vector<std::ssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &v7[__n];
      v14 = 24 * __n;
      do
      {
        v7->first.__i_ = 0;
        v7->second.__i_ = 0;
        v7->matched = 0;
        ++v7;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    v15 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v8];
    v16 = &v15[__n];
    v17 = 24 * __n;
    v18 = v15;
    do
    {
      v18->first.__i_ = 0;
      v18->second.__i_ = 0;
      v18->matched = 0;
      ++v18;
      v17 -= 24;
    }
    while (v17);
    v19 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v11];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(_QWORD *)&v15[-1].matched = *(_QWORD *)&end[-1].matched;
        v15[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v22;
        --v15;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v15;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v19;
    if (end)
      operator delete(end);
  }
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  size_t v4;
  void **v5;
  char v6;
  size_t v7;
  const void *p_p;
  size_t v9;
  void **v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  void **v15;
  size_t v16;
  uint64_t v17;
  void *__p;
  size_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, *(char **)a1, *(char **)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
  else
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v15, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v3 = HIBYTE(v17);
    v5 = v15;
    v4 = v16;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  v6 = HIBYTE(v20);
  if (v20 >= 0)
    v7 = HIBYTE(v20);
  else
    v7 = v19;
  if (v20 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v3 & 0x80u) == 0)
    v9 = v3;
  else
    v9 = v4;
  if ((v3 & 0x80u) == 0)
    v10 = (void **)&v15;
  else
    v10 = v5;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_24;
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  v13 = v9 < v7;
  if (v7 < v9)
    v13 = -1;
  if (v12)
    return v12;
  else
    return v13;
}

void sub_1A1879480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_iterator<std::__wrap_iter<const char *>, char> *this)
{
  std::sub_match<std::__wrap_iter<const char *>> *begin;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  int i;
  unsigned __int32 flags;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  char *v7;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *pregex;
  char *v9;
  char v10;
  char *v11;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *v12;
  char v13;
  std::match_results<const char *> __p;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  i = (int)p_match[-1].__position_start_.__i_;
  flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin)
    p_unmatched = &p_match->__unmatched_;
  else
    p_unmatched = begin;
  v7 = (char *)p_unmatched->second.__i_;
  if (p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    v9 = (char *)this->__end_.__i_;
    pregex = this->__pregex_;
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    v10 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)pregex, v7, v9, &__p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const char *>> *)v9, (uint64_t *)&__p, (flags & 0x800) != 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if ((v10 & 1) == 0)
    {
      begin = p_match->__matches_.__begin_;
LABEL_14:
      if (begin)
      {
        this->__match_.__matches_.__end_ = begin;
        operator delete(begin);
        p_match->__matches_.__begin_ = 0;
        p_match->__matches_.__end_ = 0;
        p_match->__matches_.__end_cap_.__value_ = 0;
      }
      this->__match_.__ready_ = 0;
      *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
      *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
      *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                                   + 1) = 0u;
      this->__match_.__prefix_.first.__i_ = 0;
      this->__match_.__prefix_.second.__i_ = 0;
      this->__match_.__prefix_.matched = 0;
      this->__match_.__suffix_.first.__i_ = 0;
      this->__match_.__suffix_.second.__i_ = 0;
      this->__match_.__suffix_.matched = 0;
      this->__match_.__position_start_.__i_ = 0;
      return this;
    }
    return this;
  }
  v11 = (char *)this->__end_.__i_;
  if (v11 == v7)
    goto LABEL_14;
  v12 = this->__pregex_;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v12, v7, v11, &__p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const char *>> *)v11, (uint64_t *)&__p, 1);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if ((v13 & 1) == 0)
  {
    ++v7;
    flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_1A187963C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<NLMessageIntentTypeWithMetadata>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 48;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(v4 - 40));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v19 = **a4;
  v17[4] = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1A187995C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::vector<NLMessageIntentTypeWithMetadata>::__push_back_slow_path<NLMessageIntentTypeWithMetadata const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[48 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[48 * v9];
  *(_DWORD *)v11 = *a2;
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)(v11 + 8), (uint64_t)(a2 + 2));
  v15 += 48;
  std::vector<NLMessageIntentTypeWithMetadata>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<NLMessageIntentTypeWithMetadata>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1A1879A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<NLMessageIntentTypeWithMetadata>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<NLMessageIntentTypeWithMetadata>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v7 = *(_DWORD *)(v4 - 48);
    v4 -= 48;
    *(_DWORD *)(v6 - 48) = v7;
    v6 -= 48;
    result = (uint64_t *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(v6 + 8, (uint64_t *)(v4 + 8));
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::__split_buffer<NLMessageIntentTypeWithMetadata>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void NLGujaratiWordLanguageModeler::NLGujaratiWordLanguageModeler(NLGujaratiWordLanguageModeler *this, CFDictionaryRef theDict)
{
  _QWORD *v4;

  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E45CE240;
  if (CFDictionaryGetValue(theDict, CFSTR("useLanguageModel")) == (const void *)*MEMORY[0x1E0C9AE50])
    NLGujaratiWordLanguageModeler::loadLanguageModel(this, theDict);
  else
    *v4 = 0;
}

void sub_1A1879C4C(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler *v1;

  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

void NLGujaratiWordLanguageModeler::loadLanguageModel(NLGujaratiWordLanguageModeler *this, CFDictionaryRef theDict)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  NL::CFLogger *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t valuePtr;

  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0D43450], (const void *)*MEMORY[0x1E0C9AE50]);
  valuePtr = 0x3FD0000000000000;
  v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43488], v5);
  CFRelease(v5);
  v9 = 1;
  v6 = CFNumberCreate(0, kCFNumberLongType, &v9);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43490], v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D434A0], v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D43498], v6);
  CFRelease(v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0D434C8], CFSTR("gu"));
  *((_QWORD *)this + 1) = LMLanguageModelCreate();
  CFRelease(v4);
  if (!*((_QWORD *)this + 1))
  {
    v8 = NL::CFLogger::sharedInstance(v7);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v8 + 16))(v8, 3, "Could not locate Gujarati language model");
  }
}

void NLGujaratiWordLanguageModeler::removeDiacritics(uint64_t a1@<X1>, char a2@<W2>, std::string *a3@<X8>)
{
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "ઁ");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "ં");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "઼");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
  {
    operator delete(v7[0]);
    if ((a2 & 1) != 0)
      goto LABEL_22;
  }
  else if ((a2 & 1) != 0)
  {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "્");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
LABEL_22:
  std::string::basic_string[abi:ne180100]<0>(v7, "ઃ");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1A1879FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void NLGujaratiWordLanguageModeler::~NLGujaratiWordLanguageModeler(NLGujaratiWordLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);
  JUMPOUT(0x1A1B0E068);
}

uint64_t NLCommons::isVowel(NLCommons *this, int8x16_t a2)
{
  a2.i32[0] = this & 0xFFFFFFFB;
  a2.i8[1] = (char)this;
  a2.i8[8] = this & 0xFB;
  a2.i8[9] = (char)this;
  return vmaxv_u8((uint8x8_t)vceq_s8(vqtbl1_s8(a2, (int8x8_t)0x101010001010100), (int8x8_t)0x554F4941756F6961)) & 1;
}

uint64_t NLCommons::isConsonant(NLCommons *this)
{
  return (((_DWORD)this - 66) < 0x39) & (0x1F7DF7701F7DF77uLL >> (this - 66));
}

BOOL NLCommons::isPunct(const std::string *a1)
{
  return !std::string::compare(a1, ",")
      || !std::string::compare(a1, ",")
      || !std::string::compare(a1, ";")
      || !std::string::compare(a1, ":")
      || !std::string::compare(a1, "{")
      || !std::string::compare(a1, "}")
      || !std::string::compare(a1, "[")
      || !std::string::compare(a1, "]")
      || !std::string::compare(a1, "<")
      || !std::string::compare(a1, ">")
      || !std::string::compare(a1, "'")
      || !std::string::compare(a1, "\"")
      || !std::string::compare(a1, "/")
      || !std::string::compare(a1, "\\")
      || !std::string::compare(a1, "~")
      || !std::string::compare(a1, "!")
      || !std::string::compare(a1, "@")
      || !std::string::compare(a1, "#")
      || !std::string::compare(a1, "$")
      || !std::string::compare(a1, "%")
      || !std::string::compare(a1, "^")
      || !std::string::compare(a1, "&")
      || !std::string::compare(a1, "*")
      || !std::string::compare(a1, ")")
      || !std::string::compare(a1, "(")
      || !std::string::compare(a1, "-")
      || !std::string::compare(a1, "_")
      || !std::string::compare(a1, "+")
      || !std::string::compare(a1, "=")
      || !std::string::compare(a1, "|")
      || !std::string::compare(a1, ".")
      || std::string::compare(a1, "?") == 0;
}

uint64_t NLCommons::isPunct(NLCommons *this, int8x16_t a2)
{
  uint8x16_t v2;
  __int32 v3;

  a2.i32[0] = this & 0xFFFFFFFE;
  a2.i8[1] = (char)this;
  a2.i8[6] = this & 0xFD;
  v2 = (uint8x16_t)vceqq_s8(vqtbl1q_s8(a2, (int8x16_t)xmmword_1A18D47B0), (int8x16_t)xmmword_1A18D47C0);
  v2.i8[0] = vmaxvq_u8(v2);
  v3 = v2.i32[0];
  *(int8x8_t *)v2.i8 = vceq_s8(vdup_n_s8(this), (int8x8_t)0x3F2E7C3D2B5F2D26);
  v2.i8[0] = vmaxv_u8(*(uint8x8_t *)v2.i8);
  return (v3 | v2.i32[0]) & 1 | (((_DWORD)this - 35) < 3) | (((_DWORD)this - 40) < 3);
}

uint64_t NLCommons::isNumeric(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;

  v1 = a1[23];
  if ((v1 & 0x80u) == 0)
    v2 = a1;
  else
    v2 = *(unsigned __int8 **)a1;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 1;
  while (((char)*v2 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v2 + 60) & 0x400) != 0)
  {
    ++v2;
    if (!--v1)
      return 1;
  }
  return 0;
}

uint64_t NLCommons::isNonAlphaNumericStr(char *a1, int8x16_t a2)
{
  int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NLCommons *v6;

  v2 = a1[23];
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = *(char **)a1;
  if (v2 >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  if (!v4)
    return 0;
  v5 = MEMORY[0x1E0C80978];
  while (1)
  {
    v6 = (NLCommons *)*v3;
    if ((v6 & 0x80000000) != 0)
      break;
    if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x500) == 0)
      goto LABEL_13;
LABEL_14:
    ++v3;
    if (!--v4)
      return 0;
  }
  if (__maskrune(*v3, 0x500uLL))
    goto LABEL_14;
LABEL_13:
  if (NLCommons::isPunct(v6, a2))
    goto LABEL_14;
  return 1;
}

uint64_t NLCommons::min(uint64_t this, uint64_t a2)
{
  if (a2 < this)
    return a2;
  return this;
}

_QWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x1E0DE4FD0];
  v6 = MEMORY[0x1E0DE4FD0] + 104;
  a1[16] = MEMORY[0x1E0DE4FD0] + 104;
  a1[2] = v5 + 64;
  v7 = a1 + 2;
  v8 = (uint64_t)(a1 + 3);
  v9 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v11;
  a1[1] = 0;
  v12 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v12, a1 + 3);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  a1[2] = v13;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *a1 = v15;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *a1 = v5 + 24;
  a1[16] = v6;
  a1[2] = v5 + 64;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3);
  return a1;
}

void sub_1A187A600(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1A1B0DFFC](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1B0DFFC](a1 + 128);
  return a1;
}

uint64_t NLCommons::split@<X0>(const std::string *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v12;
  _QWORD v13[13];
  char v14;
  uint64_t v15;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v13, a1, 24);
  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  while (1)
  {
    v5 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (uint64_t)__p, a2);
    if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)
      break;
    v6 = a3[1];
    if (v6 >= a3[2])
    {
      v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(v12) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v7 = *(_OWORD *)__p;
        *(_QWORD *)(v6 + 16) = v12;
        *(_OWORD *)v6 = v7;
      }
      v8 = v6 + 24;
      a3[1] = v6 + 24;
    }
    a3[1] = v8;
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  v13[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v13[2] = v9;
  v13[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1B0DFFC](&v15);
}

void sub_1A187A7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

std::string *NLCommons::trim(std::string *this)
{
  uint64_t v2;
  int v3;
  char *v4;
  std::string::size_type v5;
  std::string *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  char *v12;
  std::string *v13;
  int v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  std::string *v19;
  unsigned int v20;
  std::string *v21;

  v2 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v3 = (char)v2;
  v4 = (char *)this + v2;
  if (v3 >= 0)
    v5 = (std::string::size_type)v4;
  else
    v5 = this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_;
  if (v3 >= 0)
    v6 = this;
  else
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
  v7 = MEMORY[0x1E0C80978];
  while ((std::string *)v5 != v6)
  {
    v9 = *(char *)--v5;
    v8 = v9;
    if ((v9 & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x4000uLL))
      {
LABEL_13:
        v6 = (std::string *)(v5 + 1);
        break;
      }
    }
    else if ((*(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000) == 0)
    {
      goto LABEL_13;
    }
  }
  v10 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v11 = (char)v10;
  v12 = (char *)this + v10;
  if (v11 >= 0)
  {
    v13 = this;
  }
  else
  {
    v12 = (char *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
    v13 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  std::string::erase(this, (char *)v6 - (char *)v13, v12 - (char *)v6);
  v14 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v15 = this->__r_.__value_.__r.__words[0];
  if (v14 >= 0)
    v16 = this;
  else
    v16 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (v14 >= 0)
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  else
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v18 = (std::string *)((char *)v16 + size);
    v19 = v16;
    do
    {
      v20 = v19->__r_.__value_.__s.__data_[0];
      if ((v20 & 0x80000000) != 0)
      {
        if (!__maskrune(v20, 0x4000uLL))
          goto LABEL_31;
      }
      else if ((*(_DWORD *)(v7 + 4 * v20 + 60) & 0x4000) == 0)
      {
        goto LABEL_31;
      }
      v19 = (std::string *)((char *)v19 + 1);
      --size;
    }
    while (size);
    v19 = v18;
LABEL_31:
    LOBYTE(v14) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    v15 = this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v19 = v16;
  }
  if ((v14 & 0x80u) == 0)
    v21 = this;
  else
    v21 = (std::string *)v15;
  std::string::erase(this, (char *)v16 - (char *)v21, (char *)v19 - (char *)v16);
  return this;
}

void NLCommons::normalize(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  const __CFString *v4;
  const __CFString *v5;
  CFMutableStringRef MutableCopy;

  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, 0x8000100u);
  if (v4)
  {
    v5 = v4;
    MutableCopy = CFStringCreateMutableCopy(0, 0, v4);
    CFStringNormalize(MutableCopy, kCFStringNormalizationFormC);
    getUTF8StringFromCFString(MutableCopy, a2);
    CFRelease(v5);
    CFRelease(MutableCopy);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1A187AA2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL NLCommons::isAbbreviation(_BYTE *a1)
{
  _BYTE *v1;
  char v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;
  _BOOL8 result;
  int v7;

  v1 = *(_BYTE **)a1;
  if ((char)a1[23] >= 0)
    v1 = a1;
  v2 = *v1;
  if (!*v1)
    return 1;
  v3 = v1 + 1;
  v4 = MEMORY[0x1E0C80978];
  do
  {
    if (v2 < 0)
      v5 = __maskrune(v2, 0x8000uLL);
    else
      v5 = *(_DWORD *)(v4 + 4 * v2 + 60) & 0x8000;
    result = v5 != 0;
    if (!v5)
      break;
    v7 = *v3++;
    v2 = v7;
  }
  while (v7);
  return result;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_1A187AB30(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void NLBengaliOrthographyChecker::NLBengaliOrthographyChecker(NLBengaliOrthographyChecker *this)
{
  CFMutableStringRef Mutable;
  CFMutableStringRef v3;
  CFMutableStringRef v4;
  __CFCharacterSet *MutableCopy;

  *(_QWORD *)this = &off_1E45CDFE8;
  *((_QWORD *)this + 1) = CFSTR("‍");
  *((_QWORD *)this + 2) = CFSTR("়");
  *((_QWORD *)this + 3) = CFSTR("্");
  *((_QWORD *)this + 4) = CFSTR("ঃ");
  *((_QWORD *)this + 5) = CFSTR("ং");
  *((_QWORD *)this + 6) = CFSTR("ঁ");
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, *((CFStringRef *)this + 2));
  CFStringAppend(Mutable, *((CFStringRef *)this + 3));
  CFStringAppend(Mutable, *((CFStringRef *)this + 4));
  CFStringAppend(Mutable, *((CFStringRef *)this + 5));
  CFStringAppend(Mutable, *((CFStringRef *)this + 6));
  CFStringAppend(Mutable, CFSTR("া"));
  CFStringAppend(Mutable, CFSTR("ি"));
  CFStringAppend(Mutable, CFSTR("ী"));
  CFStringAppend(Mutable, CFSTR("ু"));
  CFStringAppend(Mutable, CFSTR("ূ"));
  CFStringAppend(Mutable, CFSTR("ৃ"));
  CFStringAppend(Mutable, CFSTR("ে"));
  CFStringAppend(Mutable, CFSTR("ৈ"));
  CFStringAppend(Mutable, CFSTR("ো"));
  CFStringAppend(Mutable, CFSTR("ৌ"));
  *((_QWORD *)this + 7) = CFCharacterSetCreateWithCharactersInString(0, Mutable);
  CFRelease(Mutable);
  v3 = CFStringCreateMutable(0, 0);
  CFStringAppend(v3, CFSTR("ক"));
  CFStringAppend(v3, CFSTR("খ"));
  CFStringAppend(v3, CFSTR("গ"));
  CFStringAppend(v3, CFSTR("ঘ"));
  CFStringAppend(v3, CFSTR("ঙ"));
  CFStringAppend(v3, CFSTR("চ"));
  CFStringAppend(v3, CFSTR("ছ"));
  CFStringAppend(v3, CFSTR("জ"));
  CFStringAppend(v3, CFSTR("ঝ"));
  CFStringAppend(v3, CFSTR("ঞ"));
  CFStringAppend(v3, CFSTR("ট"));
  CFStringAppend(v3, CFSTR("ঠ"));
  CFStringAppend(v3, CFSTR("ড"));
  CFStringAppend(v3, CFSTR("ঢ"));
  CFStringAppend(v3, CFSTR("ণ"));
  CFStringAppend(v3, CFSTR("ত"));
  CFStringAppend(v3, CFSTR("থ"));
  CFStringAppend(v3, CFSTR("দ"));
  CFStringAppend(v3, CFSTR("ধ"));
  CFStringAppend(v3, CFSTR("ন"));
  CFStringAppend(v3, CFSTR("প"));
  CFStringAppend(v3, CFSTR("ফ"));
  CFStringAppend(v3, CFSTR("ব"));
  CFStringAppend(v3, CFSTR("ভ"));
  CFStringAppend(v3, CFSTR("ম"));
  CFStringAppend(v3, CFSTR("য"));
  CFStringAppend(v3, CFSTR("র"));
  CFStringAppend(v3, CFSTR("ল"));
  CFStringAppend(v3, CFSTR("শ"));
  CFStringAppend(v3, CFSTR("ষ"));
  CFStringAppend(v3, CFSTR("স"));
  CFStringAppend(v3, CFSTR("হ"));
  CFStringAppend(v3, CFSTR("ৎ"));
  CFStringAppend(v3, CFSTR("ড়"));
  CFStringAppend(v3, CFSTR("ঢ়"));
  CFStringAppend(v3, CFSTR("য়"));
  *((_QWORD *)this + 8) = CFCharacterSetCreateWithCharactersInString(0, v3);
  CFRelease(v3);
  v4 = CFStringCreateMutable(0, 0);
  CFStringAppend(v4, CFSTR("অ"));
  CFStringAppend(v4, CFSTR("আ"));
  CFStringAppend(v4, CFSTR("ই"));
  CFStringAppend(v4, CFSTR("ঈ"));
  CFStringAppend(v4, CFSTR("উ"));
  CFStringAppend(v4, CFSTR("ঊ"));
  CFStringAppend(v4, CFSTR("ঋ"));
  CFStringAppend(v4, CFSTR("এ"));
  CFStringAppend(v4, CFSTR("ঐ"));
  CFStringAppend(v4, CFSTR("ও"));
  CFStringAppend(v4, CFSTR("ঔ"));
  *((_QWORD *)this + 9) = CFCharacterSetCreateWithCharactersInString(0, v4);
  CFRelease(v4);
  MutableCopy = CFCharacterSetCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *((CFCharacterSetRef *)this + 9));
  CFCharacterSetUnion(MutableCopy, *((CFCharacterSetRef *)this + 8));
  CFCharacterSetUnion(MutableCopy, *((CFCharacterSetRef *)this + 7));
  *((_QWORD *)this + 10) = CFCharacterSetCreateInvertedSet(0, MutableCopy);
  CFRelease(MutableCopy);
}

void sub_1A187B148(_Unwind_Exception *a1)
{
  NLAbstractOrthographyConvertor *v1;

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(v1);
  _Unwind_Resume(a1);
}

void NLBengaliOrthographyChecker::~NLBengaliOrthographyChecker(CFTypeRef *this)
{
  *this = &off_1E45CDFE8;
  CFRelease(this[7]);
  CFRelease(this[8]);
  CFRelease(this[9]);
  CFRelease(this[10]);
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)this);
}

{
  NLBengaliOrthographyChecker::~NLBengaliOrthographyChecker(this);
  JUMPOUT(0x1A1B0E068);
}

BOOL NLBengaliOrthographyChecker::isVowelSign(NLBengaliOrthographyChecker *this, const __CFString *a2)
{
  CFMutableStringRef Mutable;
  const __CFCharacterSet *v4;
  const __CFCharacterSet *InvertedSet;
  _BOOL8 v6;
  CFRange v8;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, CFSTR("া"));
  CFStringAppend(Mutable, CFSTR("ি"));
  CFStringAppend(Mutable, CFSTR("ী"));
  CFStringAppend(Mutable, CFSTR("ু"));
  CFStringAppend(Mutable, CFSTR("ূ"));
  CFStringAppend(Mutable, CFSTR("ৃ"));
  CFStringAppend(Mutable, CFSTR("ে"));
  CFStringAppend(Mutable, CFSTR("ৈ"));
  CFStringAppend(Mutable, CFSTR("ো"));
  CFStringAppend(Mutable, CFSTR("ৌ"));
  v4 = CFCharacterSetCreateWithCharactersInString(0, Mutable);
  InvertedSet = CFCharacterSetCreateInvertedSet(0, v4);
  CFRelease(Mutable);
  CFRelease(v4);
  v8.length = CFStringGetLength(a2);
  v8.location = 0;
  v6 = CFStringFindCharacterFromSet(a2, InvertedSet, v8, 0, 0) == 0;
  CFRelease(InvertedSet);
  return v6;
}

BOOL NLBengaliOrthographyChecker::canNuktaFollowLetter(NLBengaliOrthographyChecker *this, const __CFString *a2)
{
  const __CFCharacterSet *v3;
  const __CFCharacterSet *InvertedSet;
  _BOOL8 v5;
  CFRange v7;

  v3 = CFCharacterSetCreateWithCharactersInString(0, CFSTR("ডঢয"));
  InvertedSet = CFCharacterSetCreateInvertedSet(0, v3);
  CFRelease(CFSTR("ডঢয"));
  CFRelease(v3);
  v7.length = CFStringGetLength(a2);
  v7.location = 0;
  v5 = CFStringFindCharacterFromSet(a2, InvertedSet, v7, 0, 0) == 0;
  CFRelease(InvertedSet);
  return v5;
}

BOOL NLBengaliOrthographyChecker::canViramaFollowLetter(CFStringRef *this, CFStringRef theString1)
{
  const __CFCharacterSet *v4;
  UniChar CharacterAtIndex;

  if (CFStringCompare(theString1, CFSTR("অ"), 0) == kCFCompareEqualTo
    || CFStringCompare(theString1, CFSTR("এ"), 0) == kCFCompareEqualTo
    || CFStringCompare(theString1, this[2], 0) == kCFCompareEqualTo)
  {
    return 1;
  }
  v4 = (const __CFCharacterSet *)this[8];
  CharacterAtIndex = CFStringGetCharacterAtIndex(theString1, 0);
  return CFCharacterSetIsCharacterMember(v4, CharacterAtIndex) != 0;
}

BOOL NLBengaliOrthographyChecker::canViramaPrecedeLetter(NLBengaliOrthographyChecker *this, CFStringRef theString)
{
  const __CFCharacterSet *v4;
  UniChar CharacterAtIndex;

  v4 = (const __CFCharacterSet *)*((_QWORD *)this + 8);
  CharacterAtIndex = CFStringGetCharacterAtIndex(theString, 0);
  return CFCharacterSetIsCharacterMember(v4, CharacterAtIndex)
      || CFStringCompare(theString, *((CFStringRef *)this + 1), 0) == kCFCompareEqualTo;
}

BOOL NLBengaliOrthographyChecker::checkSpelling(NLBengaliOrthographyChecker *this, CFStringRef theString, const __CFString **a3, const __CFString **a4)
{
  CFIndex Length;
  CFIndex v8;
  CFIndex location;
  CFStringRef v10;
  CFStringRef v11;
  const __CFString *v12;
  const __CFString *v13;
  CFRange v14;
  __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  CFRange v18;
  CFStringRef v19;
  CFStringRef v20;
  char v21;
  CFCharacterSetRef v22;
  CFIndex v23;
  const __CFCharacterSet *v24;
  const __CFString *v25;
  CFRange v26;
  UniChar CharacterAtIndex;
  int CharacterFromSet;
  _BOOL8 v29;
  CFStringRef v30;
  const __CFString *v31;
  CFRange result;
  CFRange v34;
  CFRange v35;
  CFRange v36;
  CFRange v37;
  CFRange v38;
  CFRange v39;
  CFRange v40;

  Length = CFStringGetLength(theString);
  result = (CFRange)xmmword_1A18D3A60;
  v34.location = 0;
  v34.length = Length;
  if (CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 7), v34, 0, &result))
  {
    v8 = 0;
    location = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      if (!result.location)
        goto LABEL_59;
      if (location != 0x7FFFFFFFFFFFFFFFLL && result.location == v8 + location)
      {
        v35.location = location;
        v35.length = v8;
        v10 = CFStringCreateWithSubstring(0, theString, v35);
        v11 = CFStringCreateWithSubstring(0, theString, result);
        if ((CFStringCompare(v10, *((CFStringRef *)this + 2), 0)
           || CFStringCompare(v11, *((CFStringRef *)this + 2), 0) == kCFCompareEqualTo)
          && (CFStringCompare(v11, *((CFStringRef *)this + 5), 0)
           || !NLBengaliOrthographyChecker::isVowelSign(0, v10))
          && (CFStringCompare(v11, *((CFStringRef *)this + 6), 0)
           || !NLBengaliOrthographyChecker::isVowelSign(0, v10))
          && (CFStringCompare(v11, *((CFStringRef *)this + 4), 0)
           || !NLBengaliOrthographyChecker::isVowelSign(0, v10)))
        {
          if (v10)
            CFRelease(v10);
          if (v11)
            CFRelease(v11);
LABEL_59:
          v29 = 0;
          v31 = CFSTR("illegal diacritic placement");
          if (!a4)
            goto LABEL_72;
          goto LABEL_70;
        }
        if (v10)
          CFRelease(v10);
        if (v11)
          CFRelease(v11);
      }
      location = result.location;
      v8 = result.length;
      v36.location = result.length + result.location;
      v36.length = Length - (result.length + result.location);
    }
    while (CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 7), v36, 0, &result));
  }
  result = (CFRange)xmmword_1A18D3A60;
  v12 = (const __CFString *)*((_QWORD *)this + 2);
  v13 = theString;
  v14.location = 0;
  v14.length = Length;
  while (CFStringFindWithOptions(v13, v12, v14, 0, &result))
  {
    if (!result.location)
      goto LABEL_53;
    v37.location = result.location - 1;
    v37.length = 1;
    v15 = (__CFString *)CFStringCreateWithSubstring(0, theString, v37);
    if (!NLBengaliOrthographyChecker::canNuktaFollowLetter((NLBengaliOrthographyChecker *)v15, v15))
    {
      if (v15)
        CFRelease(v15);
LABEL_53:
      v29 = 0;
      v31 = CFSTR("illegal nukta placement");
      if (!a4)
        goto LABEL_72;
LABEL_70:
      if (v29)
        goto LABEL_72;
      *a4 = v31;
      return v29;
    }
    if (v15)
      CFRelease(v15);
    v14.location = result.length + result.location;
    v14.length = Length - (result.length + result.location);
    v12 = (const __CFString *)*((_QWORD *)this + 2);
    v13 = theString;
  }
  result = (CFRange)xmmword_1A18D3A60;
  v16 = (const __CFString *)*((_QWORD *)this + 3);
  v17 = theString;
  v18.location = 0;
  v18.length = Length;
  while (1)
  {
    if (!CFStringFindWithOptions(v17, v16, v18, 0, &result))
    {
      v22 = CFCharacterSetCreateWithCharactersInString(0, CFSTR("ঁং্"));
      v23 = CFStringGetLength(theString);
      v24 = (const __CFCharacterSet *)*((_QWORD *)this + 9);
      v25 = theString;
      v26.location = 0;
      v26.length = v23;
      while (1)
      {
        if (!CFStringFindCharacterFromSet(v25, v24, v26, 0, &result))
        {
          CFRelease(v22);
          v40.length = CFStringGetLength(theString);
          v40.location = 0;
          CharacterFromSet = CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 10), v40, 0, &result);
          v29 = CharacterFromSet == 0;
          if (CharacterFromSet)
          {
            v30 = CFStringCreateWithSubstring(0, theString, result);
            v31 = CFStringCreateWithFormat(0, 0, CFSTR("invalid letter '%@'"), v30);
            CFRelease(v30);
            if (a4)
              goto LABEL_70;
          }
          else
          {
            v31 = 0;
            if (a4)
              goto LABEL_70;
          }
          goto LABEL_72;
        }
        if (result.location + 1 < v23)
        {
          CharacterAtIndex = CFStringGetCharacterAtIndex(theString, result.location + 1);
          if (CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 7), CharacterAtIndex))
          {
            if (!CFCharacterSetIsCharacterMember(v22, CharacterAtIndex))
              break;
          }
        }
        v26.location = result.length + result.location;
        v24 = (const __CFCharacterSet *)*((_QWORD *)this + 9);
        v26.length = v23 - (result.length + result.location);
        v25 = theString;
      }
      CFRelease(v22);
      v29 = 0;
      v31 = CFSTR("illegal diacritic after vowel letter");
      if (!a4)
        goto LABEL_72;
      goto LABEL_70;
    }
    if (!result.location)
      break;
    v38.location = result.location - 1;
    v38.length = 1;
    v19 = CFStringCreateWithSubstring(0, theString, v38);
    if (result.location + 1 >= Length)
    {
      v20 = 0;
      if (!NLBengaliOrthographyChecker::canViramaFollowLetter((CFStringRef *)this, v19))
      {
LABEL_61:
        if (v19)
          CFRelease(v19);
        if (v20)
          CFRelease(v20);
        break;
      }
LABEL_37:
      v21 = 1;
      if (!v19)
        goto LABEL_39;
LABEL_38:
      CFRelease(v19);
      goto LABEL_39;
    }
    v39.length = 1;
    v39.location = result.location + 1;
    v20 = CFStringCreateWithSubstring(0, theString, v39);
    if (!NLBengaliOrthographyChecker::canViramaFollowLetter((CFStringRef *)this, v19))
      goto LABEL_61;
    if (!v20)
      goto LABEL_37;
    if (!NLBengaliOrthographyChecker::canViramaPrecedeLetter(this, v20))
      goto LABEL_61;
    v21 = 0;
    if (v19)
      goto LABEL_38;
LABEL_39:
    if ((v21 & 1) == 0)
      CFRelease(v20);
    v18.location = result.length + result.location;
    v18.length = Length - (result.length + result.location);
    v16 = (const __CFString *)*((_QWORD *)this + 3);
    v17 = theString;
  }
  v29 = 0;
  v31 = CFSTR("illegal virama placement");
  if (a4)
    goto LABEL_70;
LABEL_72:
  if (!a4 && v31)
    CFRelease(v31);
  return v29;
}

uint64_t _CFInit_SentenceCorrectorWrapper(uint64_t result)
{
  *(_QWORD *)(result + 16) = &unk_1E45CDC20;
  return result;
}

uint64_t createSentenceCorrectorWrapper(NLSentenceCorrectorModel *a1)
{
  uint64_t result;

  CFAllocatorGetDefault();
  if (!g_CFTypeID_SentenceCorrectorWrapper)
  {
    qword_1EDBB19A8 = 0;
    unk_1EDBB19B8 = 0u;
    unk_1EDBB19C8 = 0u;
    g_CFTypeID_SentenceCorrectorWrapper = _CFRuntimeRegisterClass();
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

const __CFDictionary *NLSentenceCorrectorCreate(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  const __CFLocale *Value;
  const __CFString *v3;
  NLSentenceCorrectorModel *v4;

  if (result)
  {
    v1 = result;
    Value = (const __CFLocale *)CFDictionaryGetValue(result, (const void *)kNLSentenceCorrectorLocaleKey);
    if (CFDictionaryContainsKey(v1, (const void *)kNLSentenceCorrectorResourceDirectoryLocationKey))
      v3 = (const __CFString *)CFDictionaryGetValue(v1, (const void *)kNLSentenceCorrectorResourceDirectoryLocationKey);
    else
      v3 = 0;
    v4 = (NLSentenceCorrectorModel *)operator new();
    NLSentenceCorrectorModel::NLSentenceCorrectorModel(v4, Value, v3);
    return (const __CFDictionary *)createSentenceCorrectorWrapper(v4);
  }
  return result;
}

#error "1A187BB0C: call analysis failed (funcsize=29)"

void NLSentenceCorrectorEnumerateErrorsForSentenceWithBlock(uint64_t a1, const __CFString *a2, CFIndex a3, CFIndex a4, uint64_t a5)
{
  CFLocaleRef *v9;
  const __CFString *v10;
  const __CFString *v11;
  char *v12;
  char *v13;
  __CFArray *v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  CFRange v25;

  if (a1)
  {
    if (a2)
    {
      v9 = *(CFLocaleRef **)(a1 + 24);
      NLSentenceCorrectorModel::clearInputTokens(v9);
      v25.location = a3;
      v25.length = a4;
      v10 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, v25);
      if (v9)
      {
        v11 = v10;
        if (v10)
        {
          NLSentenceCorrectorModel::setInputTokens(v9, v10);
          NLSentenceCorrectorModel::getErrorCategoriesAndErrorRanges((NLSentenceCorrectorModel *)v9, v11, (void **)&v23);
          v12 = v24;
          if (v23 != v24)
          {
            v13 = v23 + 24;
            do
            {
              v21 = *(_OWORD *)(v13 - 24);
              v22 = *((_QWORD *)v13 - 1);
              v19 = v21;
              v20 = v22;
              v14 = NLSentenceCorrectorModel::possibleCorrectionsForSentenceError((uint64_t)v9, v11, (unsigned int *)&v19);
              v18 = 0;
              v16 = v21;
              v17 = v22;
              (*(void (**)(uint64_t, __int128 *, __CFArray *, char *))(a5 + 16))(a5, &v16, v14, &v18);
              if (v14)
                CFRelease(v14);
              if (v18)
                break;
              v15 = v13 == v12;
              v13 += 24;
            }
            while (!v15);
          }
          CFRelease(v11);
          if (v23)
          {
            v24 = v23;
            operator delete(v23);
          }
        }
      }
    }
  }
}

void sub_1A187BC6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(_QWORD *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void SentenceCorrectorWrapper::~SentenceCorrectorWrapper(SentenceCorrectorWrapper *this)
{
  SentenceCorrectorWrapper::~SentenceCorrectorWrapper(this);
  JUMPOUT(0x1A1B0E068);
}

{
  NLSentenceCorrectorModel *v2;

  *(_QWORD *)this = &unk_1E45CDC20;
  v2 = (NLSentenceCorrectorModel *)*((_QWORD *)this + 1);
  if (v2)
  {
    NLSentenceCorrectorModel::~NLSentenceCorrectorModel(v2);
    MEMORY[0x1A1B0E068]();
  }
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

void NLAbstractLanguageModeler::NLAbstractLanguageModeler(NLAbstractLanguageModeler *this, const __CFString *a2)
{
  *(_QWORD *)this = &off_1E45CDC68;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = createLexicon(a2);
}

void NLAbstractLanguageModeler::~NLAbstractLanguageModeler(NLAbstractLanguageModeler *this)
{
  const void *v2;

  *(_QWORD *)this = &off_1E45CDC68;
  if (*((_QWORD *)this + 1))
    LMLanguageModelRelease();
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
}

{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);
  JUMPOUT(0x1A1B0E068);
}

void NLAbstractLanguageModeler::getNBestCandidates(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  const __CFAllocator *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  CFStringRef v16;
  int v17;
  int v18;
  int v19;
  const __CFString *StringForTokenID;
  int v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  void *__p[2];
  uint64_t v27;
  uint64_t v28;
  int v29;
  _OWORD v30[2];
  int v31;
  uint64_t v32;
  uint64_t v33;
  std::string v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!*(_QWORD *)(a1 + 8))
    return;
  NLCommons::split((const std::string *)a2, 0x20u, &v32);
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
      goto LABEL_4;
LABEL_6:
    v7 = 0;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(a2 + 23))
    goto LABEL_6;
LABEL_4:
  v7 = operator new[]();
LABEL_7:
  v25 = a3;
  v8 = v32;
  if (v33 != v32)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v13 = NLCommons::trim((std::string *)(v8 + v9));
      if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v34, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
      }
      else
      {
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v14;
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v34;
      else
        v15 = (std::string *)v34.__r_.__value_.__r.__words[0];
      v16 = CFStringCreateWithCString(v12, (const char *)v15, 0x8000100u);
      if (v16)
      {
        *(_DWORD *)(v7 + 4 * v10) = LMLanguageModelGetTokenIDForString();
        CFRelease(v16);
        ++v11;
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      ++v10;
      v8 = v32;
      v9 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v33 - v32) >> 3) > v10);
  }
  LMLanguageModelCreatePredictionEnumerator();
  v17 = 0;
  memset(v30, 0, sizeof(v30));
  v31 = 1065353216;
  do
  {
    v18 = LMPredictionEnumeratorAdvance();
    if (v17 < 100)
      v19 = v18;
    else
      v19 = 0;
    if (v19 != 1)
      break;
    v29 = 0;
    v28 = 0;
    LMPredictionEnumeratorGetPrediction();
    StringForTokenID = (const __CFString *)LMLanguageModelCreateStringForTokenID();
    CFStringGetCString(StringForTokenID, (char *)&v34, 1024, 0x8000100u);
    CFRelease(StringForTokenID);
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&v34);
    if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v30, (unsigned __int8 *)__p))
    {
      v21 = 5;
    }
    else
    {
      v22 = a4[1];
      if (v22 >= a4[2])
      {
        v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, (__int128 *)__p);
      }
      else
      {
        if (SHIBYTE(v27) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)a4[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v23 = *(_OWORD *)__p;
          *(_QWORD *)(v22 + 16) = v27;
          *(_OWORD *)v22 = v23;
        }
        v24 = v22 + 24;
        a4[1] = v22 + 24;
      }
      a4[1] = v24;
      v21 = ++v17 >= v25 ? 6 : 0;
    }
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
  }
  while (v21 != 6);
  LMPredictionEnumeratorRelease();
  if (v7)
    MEMORY[0x1A1B0E068](v7, 0x1000C4052888210);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v30);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
}

void sub_1A187C5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  a26 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

uint64_t NLAbstractLanguageModeler::getLanguageModel(NLAbstractLanguageModeler *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t NLAbstractLanguageModeler::logProbability(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (a1[1])
    return (*(uint64_t (**)(void))(v1 + 88))();
  else
    return (*(uint64_t (**)(void))(v1 + 80))();
}

uint64_t NLAbstractLanguageModeler::logProbability(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

double NLAbstractLanguageModeler::calcNgramProb(uint64_t a1, const char *a2)
{
  CFStringRef v2;
  double v3;
  double v4;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  if (LMLanguageModelGetTokenIDForString())
  {
    LMLanguageModelConditionalProbability();
    v4 = v3;
    if (!v2)
      return v4;
    goto LABEL_7;
  }
  v4 = -15.6535598;
  if (v2)
LABEL_7:
    CFRelease(v2);
  return v4;
}

void sub_1A187C758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t caseInsensitiveCompare(char *a1, char *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  uint64_t v8;
  __darwin_ct_rune_t v9;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  __darwin_ct_rune_t v12;
  uint64_t result;
  BOOL v14;

  v2 = a1[23];
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v2 != v4)
    return 0;
  if (v3 >= 0)
    v6 = a1;
  else
    v6 = *(char **)a1;
  if (!v2)
    return 1;
  if (v5 >= 0)
    v7 = a2;
  else
    v7 = *(char **)a2;
  v8 = v2 - 1;
  do
  {
    v10 = *v6++;
    v9 = v10;
    v11 = *v7++;
    v12 = __toupper(v9);
    v14 = v12 == __toupper(v11);
    result = v14;
    v14 = !v14 || v8-- == 0;
  }
  while (!v14);
  return result;
}

double NLAbstractLanguageModeler::calcUnigramsProbability(uint64_t a1, uint64_t a2)
{
  CFStringRef CFStringFromString;
  const void *RootCursor;
  const void *v4;
  uint64_t v5;
  double v6;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  CFStringRef v14;

  CFStringFromString = createCFStringFromString(a2);
  v14 = CFStringFromString;
  RootCursor = (const void *)LXLexiconCreateRootCursor();
  v13 = RootCursor;
  v4 = (const void *)LXCursorCreateByAdvancing();
  v12 = v4;
  v8 = 0;
  v9 = (double *)&v8;
  v5 = *MEMORY[0x1E0D437E8];
  v10 = 0x2000000000;
  v11 = v5;
  if (!v4)
  {
    v6 = v9[3];
    _Block_object_dispose(&v8, 8);
    if (!RootCursor)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (LXCursorHasEntries())
    LXCursorEnumerateEntries();
  v6 = v9[3];
  _Block_object_dispose(&v8, 8);
  CFRelease(v4);
  if (RootCursor)
LABEL_7:
    CFRelease(RootCursor);
LABEL_8:
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  return v6;
}

void sub_1A187C960(_Unwind_Exception *a1)
{
  uint64_t v1;

  nlp::CFScopedPtr<_LXCursor const*>::reset((const void **)(v1 - 64), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void ___ZNK25NLAbstractLanguageModeler23calcUnigramsProbabilityERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const __CFString *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  void **v9;
  size_t v10;
  const void *v11;
  size_t v12;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v17;
  const __CFString *v18;

  v5 = (const __CFString *)LXEntryCopyString();
  v18 = v5;
  getUTF8StringFromCFString(v5, __p);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(char *)(v6 + 23);
  if ((v17 & 0x80u) == 0)
    v8 = v17;
  else
    v8 = (size_t)__p[1];
  if ((v17 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (v7 >= 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = *(_QWORD *)(v6 + 8);
  if (v7 >= 0)
    v11 = *(const void **)(a1 + 40);
  else
    v11 = *(const void **)v6;
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  if (!memcmp(v9, v11, v12) && v10 == v8)
  {
    LXEntryGetProbability();
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v15;
    *a3 = 1;
  }
  else if (caseInsensitiveCompare((char *)__p, (char *)v6))
  {
    LXEntryGetProbability();
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v14;
  }
  if ((char)v17 < 0)
  {
    operator delete(__p[0]);
    if (!v5)
      return;
    goto LABEL_27;
  }
  if (v5)
LABEL_27:
    CFRelease(v5);
}

void sub_1A187CAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a15, 0);
  _Unwind_Resume(a1);
}

BOOL NLAbstractLanguageModeler::isPresentInLexicon(uint64_t a1, uint64_t a2)
{
  CFStringRef CFStringFromString;
  int v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  CFStringFromString = createCFStringFromString(a2);
  LXLexiconEnumerateEntriesForString();
  v3 = *((unsigned __int8 *)v6 + 24);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  _Block_object_dispose(&v5, 8);
  return v3 != 0;
}

void sub_1A187CBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  const void *v9;
  va_list va;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void ___ZN25NLAbstractLanguageModeler18isPresentInLexiconERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERj_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const __CFString *v5;
  void *__p[2];
  char v7;
  const __CFString *v8;

  v5 = (const __CFString *)LXEntryCopyString();
  v8 = v5;
  getUTF8StringFromCFString(v5, __p);
  if (caseInsensitiveCompare((char *)__p, *(char **)(a1 + 40)))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (!v5)
      return;
    goto LABEL_7;
  }
  if (v5)
LABEL_7:
    CFRelease(v5);
}

void sub_1A187CC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
  if (a14 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFString const*>::reset(&a15, 0);
  _Unwind_Resume(a1);
}

uint64_t NLAbstractLanguageModeler::getTokenIDForStringFromUnigrams(uint64_t a1, uint64_t a2)
{
  CFStringRef CFStringFromString;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  CFStringFromString = createCFStringFromString(a2);
  LXLexiconEnumerateEntriesForString();
  v3 = *((unsigned int *)v6 + 6);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  _Block_object_dispose(&v5, 8);
  return v3;
}

void sub_1A187CD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  const void *v9;
  va_list va;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void ___ZN25NLAbstractLanguageModeler31getTokenIDForStringFromUnigramsERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const __CFString *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  void **v9;
  size_t v10;
  const void *v11;
  size_t v12;
  void *__p[2];
  unsigned __int8 v15;
  const __CFString *v16;

  v5 = (const __CFString *)LXEntryCopyString();
  v16 = v5;
  getUTF8StringFromCFString(v5, __p);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(char *)(v6 + 23);
  if ((v15 & 0x80u) == 0)
    v8 = v15;
  else
    v8 = (size_t)__p[1];
  if ((v15 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (v7 >= 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = *(_QWORD *)(v6 + 8);
  if (v7 >= 0)
    v11 = *(const void **)(a1 + 40);
  else
    v11 = *(const void **)v6;
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  if (!memcmp(v9, v11, v12) && v10 == v8)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = LXEntryGetTokenID();
    *a3 = 1;
  }
  else if (caseInsensitiveCompare((char *)__p, (char *)v6))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = LXEntryGetTokenID();
  }
  if ((char)v15 < 0)
  {
    operator delete(__p[0]);
    if (!v5)
      return;
    goto LABEL_27;
  }
  if (v5)
LABEL_27:
    CFRelease(v5);
}

void sub_1A187CEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a15, 0);
  _Unwind_Resume(a1);
}

void NLAbstractLanguageModeler::getDiacriticsInsensitiveCandidatesFromLexicon(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  CFStringRef CFStringFromString;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __n128 (*v8)(_QWORD *, uint64_t);
  void (*v9)(uint64_t);
  _QWORD v10[3];
  void **p_isa;

  v5 = 0;
  v6 = &v5;
  v7 = 0x4002000000;
  v8 = __Block_byref_object_copy__7;
  v9 = __Block_byref_object_dispose__7;
  memset(v10, 0, sizeof(v10));
  CFStringFromString = createCFStringFromString(a1);
  p_isa = &CFStringFromString->isa;
  LXLexiconEnumerateEntriesForString();
  v4 = v6;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, (__int128 *)v4[5], (__int128 *)v4[6], 0xAAAAAAAAAAAAAAABLL * ((v4[6] - v4[5]) >> 3));
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  _Block_object_dispose(&v5, 8);
  p_isa = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_isa);
}

void sub_1A187D008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v11 - 72) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 72));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN25NLAbstractLanguageModeler45getDiacriticsInsensitiveCandidatesFromLexiconERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  uint64_t v4;
  unsigned __int8 v5;
  size_t v6;
  unint64_t v7;
  int v8;
  void *v9;
  void **v10;
  void **p_s1;
  uint64_t v12;
  int v13;
  void *v14;
  void **v15;
  size_t v16;
  const void *v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  _QWORD *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *__p[2];
  unsigned __int8 v26;
  void *__s1;
  size_t __n;
  unsigned __int8 v29;
  void *v30[2];
  uint64_t v31;
  const __CFString *v32;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (const __CFString *)LXEntryCopyString();
  v32 = v3;
  getUTF8StringFromCFString(v3, v30);
  (*(void (**)(void **__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v2 + 72))(&__s1, v2, v30, *(unsigned __int8 *)(a1 + 56));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 72))(__p, v2, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  v4 = v29;
  v5 = v29;
  if ((v29 & 0x80u) == 0)
    v6 = v29;
  else
    v6 = __n;
  v7 = v26;
  v8 = (char)v26;
  if ((v26 & 0x80u) != 0)
    v7 = (unint64_t)__p[1];
  if (v6 == v7)
  {
    v9 = __p[0];
    if ((v26 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if (((char)v29 & 0x80000000) == 0)
    {
      if (v29)
      {
        p_s1 = &__s1;
        while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v10)
        {
          p_s1 = (void **)((char *)p_s1 + 1);
          v10 = (void **)((char *)v10 + 1);
          if (!--v4)
            goto LABEL_20;
        }
        goto LABEL_17;
      }
LABEL_20:
      v12 = *(_QWORD *)(a1 + 48);
      v13 = *(char *)(v12 + 23);
      if (v31 >= 0)
        v14 = (void *)HIBYTE(v31);
      else
        v14 = v30[1];
      if (v31 >= 0)
        v15 = v30;
      else
        v15 = (void **)v30[0];
      if (v13 >= 0)
        v16 = *(unsigned __int8 *)(v12 + 23);
      else
        v16 = *(_QWORD *)(v12 + 8);
      if (v13 >= 0)
        v17 = *(const void **)(a1 + 48);
      else
        v17 = *(const void **)v12;
      if (v16 >= (unint64_t)v14)
        v18 = (size_t)v14;
      else
        v18 = v16;
      v19 = memcmp(v15, v17, v18) == 0;
      v20 = (void *)v16 == v14 && v19;
      if (v8 < 0)
      {
        operator delete(v9);
        if ((v29 & 0x80) == 0)
        {
LABEL_40:
          if (v20)
            goto LABEL_53;
          goto LABEL_46;
        }
      }
      else if ((v5 & 0x80) == 0)
      {
        goto LABEL_40;
      }
      operator delete(__s1);
      if (v20)
        goto LABEL_53;
LABEL_46:
      v21 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
      v22 = v21[6];
      if (v22 >= v21[7])
      {
        v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v21 + 5, (__int128 *)v30);
      }
      else
      {
        if (SHIBYTE(v31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v21[6], (const std::string::value_type *)v30[0], (std::string::size_type)v30[1]);
        }
        else
        {
          v23 = *(_OWORD *)v30;
          *(_QWORD *)(v22 + 16) = v31;
          *(_OWORD *)v22 = v23;
        }
        v24 = v22 + 24;
        v21[6] = v22 + 24;
      }
      v21[6] = v24;
      goto LABEL_53;
    }
    if (!memcmp(__s1, v10, __n))
      goto LABEL_20;
  }
LABEL_17:
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if ((v29 & 0x80) == 0)
      goto LABEL_53;
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_53;
  }
  operator delete(__s1);
LABEL_53:
  if (SHIBYTE(v31) < 0)
  {
    operator delete(v30[0]);
    if (!v3)
      return;
    goto LABEL_57;
  }
  if (v3)
LABEL_57:
    CFRelease(v3);
}

void sub_1A187D2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24)
{
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v25 + 48) = v24;
  if (a23 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFString const*>::reset(&a24, 0);
  _Unwind_Resume(a1);
}

void NLAbstractLanguageModeler::removeDiacritics(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void nlp::CFScopedPtr<_LXCursor const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void NLSentenceCorrectorModel::NLSentenceCorrectorModel(NLSentenceCorrectorModel *this, const __CFLocale *a2, const __CFString *a3)
{
  char *v6;
  _QWORD *v7;
  const __CFAllocator *v8;
  const __CFString *v9;
  __CFDictionary *Mutable;
  __CFString *MutableCopy;
  const __CFString *v12;
  const __CFURL **AssetResource;
  uint64_t v14;
  uint64_t IOMappings;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v18;
  CFMutableStringRef v19;
  const __CFString *v20;
  const __CFString *Copy;
  char *v22;
  std::locale::id *v23;
  const std::locale::facet *v24;
  unsigned __int8 v25;
  _QWORD *v26;
  std::string *v27;
  uint64_t v28;
  std::string *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t i;
  const __CFURL **v39;
  _QWORD *v40;
  uint64_t v41;
  __CFArray *v42;
  __CFArray *v43;
  _QWORD *exception;
  _QWORD *v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  std::string *v49;
  uint64_t v50;
  uint64_t v51;
  std::string *v52;
  uint64_t v53;
  uint64_t v54;
  std::string v55;
  void *v56[2];
  uint64_t v57;
  std::string *v58;
  char v59;
  std::string *v60;
  std::string v61;
  std::string v62;
  std::string v63;
  void *__p[2];
  uint64_t v65;
  _QWORD v66[22];

  v66[19] = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 12) = 0;
  v6 = (char *)this + 96;
  *((_QWORD *)this + 11) = (char *)this + 96;
  v7 = (_QWORD *)((char *)this + 88);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *((_QWORD *)this + 3) = MEMORY[0x1A1B0D624](*MEMORY[0x1E0C9AE00]);
  Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a3)
  {
    MutableCopy = CFStringCreateMutableCopy(v8, 0, a3);
    if (MutableCopy)
    {
      v12 = (const __CFString *)MEMORY[0x1A1B0D63C](a2);
      CFStringAppend(MutableCopy, v12);
      CFStringAppend(MutableCopy, CFSTR("/scmodel.dat"));
      CFDictionaryAddValue(Mutable, kMRLModelFileLocationKey, MutableCopy);
      CFRelease(MutableCopy);
    }
  }
  else
  {
    AssetResource = (const __CFURL **)NL::Resource::createAssetResource(a2, (const __CFLocale *)CFSTR("SentenceCorrection"), CFSTR("scmodel.dat"), v9);
    if (AssetResource)
      NL::Resource::exists(AssetResource);
  }
  if (!CFDictionaryContainsKey(Mutable, kMRLModelFileLocationKey))
  {
    CFRelease(Mutable);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "OptionalAssets absent.");
    NL::ResourceCreationException::ResourceCreationException(exception, (__int128 *)__p);
  }
  v14 = MRLModelCreate();
  *(_QWORD *)this = v14;
  if (!v14)
  {
    CFRelease(Mutable);
    v45 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "Montreal model creation failed.");
    NL::ResourceCreationException::ResourceCreationException(v45, (__int128 *)__p);
  }
  *((_QWORD *)this + 1) = MRLModelGetOutputSize();
  IOMappings = MRLModelGetIOMappings();
  *((_QWORD *)this + 10) = IOMappings;
  std::string::basic_string[abi:ne180100]<0>(__p, "xOOVx");
  *((_DWORD *)this + 16) = *(_DWORD *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(IOMappings, (const void **)__p)+ 56);
  if (SHIBYTE(v65) < 0)
    operator delete(__p[0]);
  v16 = *((_QWORD *)this + 10);
  std::string::basic_string[abi:ne180100]<0>(__p, "xNUMx");
  *((_DWORD *)this + 17) = *(_DWORD *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v16, (const void **)__p)+ 56);
  if (SHIBYTE(v65) < 0)
    operator delete(__p[0]);
  v17 = *((_QWORD *)this + 10);
  std::string::basic_string[abi:ne180100]<0>(__p, "xCURx");
  *((_DWORD *)this + 18) = *(_DWORD *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v17, (const void **)__p)+ 56);
  if (SHIBYTE(v65) < 0)
    operator delete(__p[0]);
  v47 = 0;
  v48 = 0;
  v46 = (uint64_t *)&v47;
  if (a3)
  {
    v19 = CFStringCreateMutableCopy(v8, 0, a3);
    if (v19)
    {
      v20 = (const __CFString *)MEMORY[0x1A1B0D63C](a2);
      CFStringAppend(v19, v20);
      CFStringAppend(v19, CFSTR("/scsubs.dat"));
      Copy = CFStringCreateCopy(v8, v19);
      CFRelease(v19);
      if (Copy)
      {
        v22 = (char *)convertToCString(Copy);
        if (v22)
        {
          std::string::basic_string[abi:ne180100]<0>(&v61, v22);
          std::ifstream::basic_ifstream(__p);
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
          v56[0] = 0;
          v56[1] = 0;
          v57 = 0;
          memset(&v55, 0, sizeof(v55));
          v23 = (std::locale::id *)MEMORY[0x1E0DE4A90];
          while (1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3)));
            v24 = std::locale::use_facet((const std::locale *)&v61, v23);
            v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
            std::locale::~locale((std::locale *)&v61);
            v26 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (uint64_t)v56, v25);
            if ((*((_BYTE *)v26 + *(_QWORD *)(*v26 - 24) + 32) & 5) != 0)
              break;
            v52 = 0;
            v53 = 0;
            v54 = 0;
            splitWithChar((uint64_t)v56, 9u, (uint64_t)&v52);
            v27 = v52;
            v28 = v53;
            if (v53 - (_QWORD)v52 == 24)
            {
              std::string::operator=(&v55, v52);
              v49 = &v55;
              std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v46, (const void **)&v55.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v49);
              v27 = v52;
              v28 = v53;
            }
            if (v28 - (_QWORD)v27 == 48)
            {
              v49 = 0;
              v50 = 0;
              v51 = 0;
              splitWithChar((uint64_t)&v27[1], 0x2Fu, (uint64_t)&v49);
              v29 = v49;
              v30 = 0xAAAAAAAAAAAAAAABLL * ((v50 - (uint64_t)v49) >> 3);
              if (v30 == 1)
              {
                if (SHIBYTE(v49->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(&v63, v49->__r_.__value_.__l.__data_, v49->__r_.__value_.__l.__size_);
                }
                else
                {
                  v32 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
                  v63.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v32;
                }
                memset(&v61, 0, sizeof(v61));
                v58 = &v61;
                v59 = 0;
                v61.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
                v61.__r_.__value_.__l.__size_ = v61.__r_.__value_.__r.__words[0];
                v61.__r_.__value_.__r.__words[2] = v61.__r_.__value_.__r.__words[0] + 24;
                v61.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v61.__r_.__value_.__r.__words[2], (__int128 *)&v63, (__int128 *)__p, (std::string *)v61.__r_.__value_.__l.__data_);
                v60 = &v55;
                v34 = std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v46, (const void **)&v55.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v60);
                v60 = v52;
                v35 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v34 + 7, (const void **)&v52->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v60);
                std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v35 + 7));
                *(std::string *)(v35 + 7) = v61;
                memset(&v61, 0, sizeof(v61));
                v58 = &v61;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
                if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v63.__r_.__value_.__l.__data_);
              }
              else if (v30 == 2)
              {
                if (SHIBYTE(v49->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(&v61, v49->__r_.__value_.__l.__data_, v49->__r_.__value_.__l.__size_);
                  v29 = v49;
                }
                else
                {
                  v31 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
                  v61.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v31;
                }
                if (SHIBYTE(v29[1].__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(&v62, v29[1].__r_.__value_.__l.__data_, v29[1].__r_.__value_.__l.__size_);
                }
                else
                {
                  v33 = *(_OWORD *)&v29[1].__r_.__value_.__l.__data_;
                  v62.__r_.__value_.__r.__words[2] = v29[1].__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v33;
                }
                memset(&v63, 0, sizeof(v63));
                v58 = &v63;
                v59 = 0;
                v63.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
                v63.__r_.__value_.__l.__size_ = v63.__r_.__value_.__r.__words[0];
                v63.__r_.__value_.__r.__words[2] = v63.__r_.__value_.__r.__words[0] + 48;
                v63.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v63.__r_.__value_.__r.__words[2], (__int128 *)&v61, (__int128 *)&v63, (std::string *)v63.__r_.__value_.__l.__data_);
                v60 = &v55;
                v36 = std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v46, (const void **)&v55.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v60);
                v60 = v52;
                v37 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v36 + 7, (const void **)&v52->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v60);
                std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v37 + 7));
                *(std::string *)(v37 + 7) = v63;
                memset(&v63, 0, sizeof(v63));
                v58 = &v63;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
                for (i = 0; i != -6; i -= 3)
                {
                  if (SHIBYTE(v62.__r_.__value_.__r.__words[i + 2]) < 0)
                    operator delete(*(void **)((char *)&v61 + i * 8 + 24));
                }
              }
              v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
            }
            v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
          }
          free(v22);
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v55.__r_.__value_.__l.__data_);
          if (SHIBYTE(v57) < 0)
            operator delete(v56[0]);
          __p[0] = *(void **)MEMORY[0x1E0DE4F40];
          *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F40] + 24);
          MEMORY[0x1A1B0DEAC](&v65);
          std::istream::~istream();
          MEMORY[0x1A1B0DFFC](v66);
        }
        CFRelease(Copy);
      }
    }
  }
  else
  {
    v39 = (const __CFURL **)NL::Resource::createAssetResource(a2, (const __CFLocale *)CFSTR("SentenceCorrection"), CFSTR("scsubs.dat"), v18);
    if (v39)
      NL::Resource::exists(v39);
  }
  std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy((uint64_t)v7, *((_QWORD **)this + 12));
  v40 = v47;
  *((_QWORD *)this + 11) = v46;
  *((_QWORD *)this + 12) = v40;
  v41 = v48;
  *((_QWORD *)this + 13) = v48;
  if (v41)
  {
    v40[2] = v6;
    v46 = (uint64_t *)&v47;
    v47 = 0;
    v48 = 0;
    v40 = 0;
  }
  else
  {
    *v7 = v6;
  }
  std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy((uint64_t)&v46, v40);
  v42 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v43 = v42;
  if (v42)
  {
    CFArrayAppendValue(v42, (const void *)*MEMORY[0x1E0D174F0]);
    *((_QWORD *)this + 2) = NLTaggerCreate();
    CFRelease(v43);
  }
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1A187DCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::locale a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;
  uint64_t v54;
  void *v56;

  if (a53 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy((uint64_t)&a20, (_QWORD *)a21);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy(v54, *(_QWORD **)(v53 + 96));
  v56 = *(void **)(v53 + 40);
  if (v56)
  {
    *(_QWORD *)(v53 + 48) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(a1);
}

void NLSentenceCorrectorModel::~NLSentenceCorrectorModel(NLSentenceCorrectorModel *this)
{
  const void *v2;
  const void *v3;
  void *v4;

  if (*(_QWORD *)this)
    MRLModelRelease();
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
    CFRelease(v3);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy((uint64_t)this + 88, *((_QWORD **)this + 12));
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
}

uint64_t NLSentenceCorrectorModel::getLabelProbabilities@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(this + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(this + 8) * v3;
    v6 = 0;
    std::vector<float>::vector(&v7, v4, &v6);
    v5 = v8;
    *(_OWORD *)a2 = v7;
    a2[2] = v5;
    return MRLModelRecognize();
  }
  return this;
}

void sub_1A187DFFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void NLSentenceCorrectorModel::createLabelSequenceString(_QWORD *a1@<X0>, _QWORD *a2@<X1>, std::string *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  int v14;
  std::string *v15;
  std::string::size_type size;
  void **v17;
  std::string::size_type v18;
  uint64_t i;
  void *__p[2];
  unsigned __int8 v21;
  int v22;
  std::string v23;
  int v24;
  _QWORD v25[3];
  int v26;
  _QWORD v27[3];
  int v28;
  _QWORD v29[3];
  int v30;
  _QWORD v31[3];
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((v6 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "A");
    v24 = 1058642330;
    std::string::basic_string[abi:ne180100]<0>(v25, "B");
    v26 = 1056964608;
    std::string::basic_string[abi:ne180100]<0>(v27, "C");
    v28 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(v29, "D");
    v30 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(v31, "0");
    v32 = 1065353216;
    std::map<std::string,float>::map[abi:ne180100]((uint64_t)&NLSentenceCorrectorModel::createLabelSequenceString(std::vector<float>)::kIncorrectThresholdMap, (const void **)&v23.__r_.__value_.__l.__data_, 5);
    for (i = 0; i != -20; i -= 4)
    {
      if (SHIBYTE(v31[i + 2]) < 0)
        operator delete((void *)v31[i]);
    }
    __cxa_atexit((void (*)(void *))std::map<std::string,float>::~map[abi:ne180100], &NLSentenceCorrectorModel::createLabelSequenceString(std::vector<float>)::kIncorrectThresholdMap, &dword_1A1802000);
  }
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (!((unint64_t)((uint64_t)(a2[1] - *a2) >> 2) % a1[1]) && a1[4])
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v22 = 0;
      v9 = a1[1];
      if (v9)
      {
        v10 = 0;
        v11 = *a2 + v9 * v7;
        v12 = 0.0;
        do
        {
          v13 = *(float *)(v11 + 4 * v10);
          if (v13 > v12)
          {
            v22 = v10;
            v12 = v13;
          }
          ++v10;
        }
        while (v9 != v10);
      }
      else
      {
        v12 = 0.0;
      }
      v14 = *(_DWORD *)std::map<int,int>::at(a1[10] + 72, &v22);
      *((_BYTE *)&v23.__r_.__value_.__s + 23) = 1;
      LOWORD(v23.__r_.__value_.__l.__data_) = v14;
      if (!std::string::compare(&v23, "Y")
        || v12 > *(float *)std::map<std::string,float>::at((uint64_t)&NLSentenceCorrectorModel::createLabelSequenceString(std::vector<float>)::kIncorrectThresholdMap, (const void **)&v23.__r_.__value_.__l.__data_))
      {
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v23;
        else
          v15 = (std::string *)v23.__r_.__value_.__r.__words[0];
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        else
          size = v23.__r_.__value_.__l.__size_;
        std::string::append(a3, (const std::string::value_type *)v15, size);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Y");
        if ((v21 & 0x80u) == 0)
          v17 = __p;
        else
          v17 = (void **)__p[0];
        if ((v21 & 0x80u) == 0)
          v18 = v21;
        else
          v18 = (std::string::size_type)__p[1];
        std::string::append(a3, (const std::string::value_type *)v17, v18);
        if ((char)v21 < 0)
          operator delete(__p[0]);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      ++v8;
      v7 += 4;
    }
    while (a1[4] > v8);
  }
}

void sub_1A187E318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v23;

  v23 = 0;
  while (1)
  {
    if (*(char *)(v21 + v23 + 151) < 0)
      operator delete(*(void **)(v21 + v23 + 128));
    v23 -= 32;
    if (v23 == -160)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string,float>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t *std::map<int,int>::at(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 7);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 4;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

uint64_t std::map<std::string,float>::at(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::string>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

_QWORD *NLSentenceCorrectorModel::clearInputTokens(_QWORD *this)
{
  uint64_t v1;

  v1 = this[5];
  if (this[6] != v1)
    this[6] = v1;
  this[4] = 0;
  return this;
}

void findAndNormalizePunctuation(__CFString *theString)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  const __CFString *v5;
  const __CFString *v6;
  _QWORD v7[39];
  CFRange v8;

  v7[38] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    v7[1] = CFSTR("\"");
    v7[3] = CFSTR("'");
    v7[4] = CFSTR("‘");
    v7[5] = CFSTR("'");
    v7[6] = CFSTR("’");
    v7[7] = CFSTR("'");
    v7[8] = CFSTR("‚");
    v7[9] = CFSTR("'");
    v7[10] = CFSTR("‛");
    v7[11] = CFSTR("'");
    v7[12] = CFSTR("“");
    v7[13] = CFSTR("\"");
    v7[14] = CFSTR("”");
    v7[15] = CFSTR("\"");
    v7[16] = CFSTR("„");
    v7[17] = CFSTR("\"");
    v7[18] = CFSTR("‟");
    v7[19] = CFSTR("\"");
    v7[20] = CFSTR("--");
    v7[21] = CFSTR("—");
    v7[22] = CFSTR("‐‐");
    v7[23] = CFSTR("—");
    v7[24] = CFSTR(" - ");
    v7[25] = CFSTR("—");
    v7[26] = CFSTR(" ‑ ");
    v7[27] = CFSTR("—");
    v7[28] = CFSTR("-");
    v7[29] = CFSTR("‐");
    v7[30] = CFSTR("-");
    v7[31] = CFSTR("‐");
    v7[32] = CFSTR("‒");
    v7[33] = CFSTR("—");
    v7[34] = CFSTR("‒");
    v7[35] = CFSTR("—");
    v7[36] = CFSTR("‒");
    v7[37] = CFSTR("—");
    std::vector<std::pair<__CFString const*,__CFString const*>>::vector[abi:ne180100](findAndNormalizePunctuation(__CFString *)::punctuationMap, (uint64_t)v7, 0x13uLL);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<__CFString const*,__CFString const*>>::~vector[abi:ne180100], findAndNormalizePunctuation(__CFString *)::punctuationMap, &dword_1A1802000);
  }
  v3 = findAndNormalizePunctuation(__CFString *)::punctuationMap[0];
  v4 = unk_1EE645E60;
  while (v3 != v4)
  {
    v5 = *(const __CFString **)v3;
    v6 = *(const __CFString **)(v3 + 8);
    v8.length = CFStringGetLength(theString);
    v8.location = 0;
    CFStringFindAndReplace(theString, v5, v6, v8, 0);
    v3 += 16;
  }
}

void sub_1A187E69C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<__CFString const*,__CFString const*>>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<std::shared_ptr<NL::Entity>>::__vallocate[abi:ne180100](a1, a3);
    v6 = 0;
    v7 = a1[1];
    do
    {
      *(_OWORD *)(v7 + v6) = *(_OWORD *)(a2 + v6);
      v6 += 16;
    }
    while (16 * a3 != v6);
    a1[1] = v7 + v6;
  }
  return a1;
}

void sub_1A187E72C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<__CFString const*,__CFString const*>>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

BOOL isNumericalToken(const std::string *a1)
{
  int v1;
  int v3;
  _QWORD v4[12];
  char v5;
  uint64_t v6;

  std::istringstream::basic_istringstream[abi:ne180100](v4, a1, 8);
  v3 = 0;
  *(_DWORD *)((char *)&v4[1] + *(_QWORD *)(v4[0] - 24)) &= ~0x1000u;
  MEMORY[0x1A1B0DED0](v4, &v3);
  v1 = *(_DWORD *)((char *)&v4[4] + *(_QWORD *)(v4[0] - 24));
  v4[0] = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v4[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A1B0DFFC](&v6);
  return (v1 & 7) == 2;
}

void sub_1A187E85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x1E0DE4FD8];
  v7 = MEMORY[0x1E0DE4FD8] + 64;
  a1[15] = MEMORY[0x1E0DE4FD8] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_1A187E92C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1A1B0DFFC](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F58];
  v3 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A1B0DFFC](a1 + 120);
  return a1;
}

BOOL isCurrencyToken(unsigned __int8 **a1)
{
  unsigned __int8 v2;
  uint64_t i;
  __int128 v5;
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  {
    std::string::basic_string[abi:ne180100]<0>(&v5, "$");
    std::string::basic_string[abi:ne180100]<0>(v6, "usd");
    std::string::basic_string[abi:ne180100]<0>(v7, "£");
    std::string::basic_string[abi:ne180100]<0>(v8, "gbp");
    std::string::basic_string[abi:ne180100]<0>(v9, "€");
    std::string::basic_string[abi:ne180100]<0>(v10, "eur");
    std::string::basic_string[abi:ne180100]<0>(v11, "¥");
    std::string::basic_string[abi:ne180100]<0>(v12, "yen");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&isCurrencyToken(std::string const&)::currency, &v5, 8uLL);
    for (i = 0; i != -24; i -= 3)
    {
      if (SHIBYTE(v12[i + 2]) < 0)
        operator delete((void *)v12[i]);
    }
    __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &isCurrencyToken(std::string const&)::currency, &dword_1A1802000);
  }
  return std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(isCurrencyToken(std::string const&)::currency, qword_1EE645E80, a1) != qword_1EE645E80;
}

void sub_1A187EB88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 191) < 0)
      operator delete(*(void **)(v1 + v3 + 168));
    v3 -= 24;
    if (v3 == -192)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (__int128 *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1A187EC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void NLSentenceCorrectorModel::setInputTokens(CFLocaleRef *this, CFStringRef theString)
{
  __CFString *MutableCopy;
  __CFString *v4;
  __int128 **v5;
  __int128 *v6;
  __int128 *v7;
  void **v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFLocaleRef v13;
  _DWORD *v14;
  int v15;
  CFLocaleRef v16;
  CFLocaleRef v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  _BOOL4 v23;
  CFLocaleRef v24;
  const __CFLocale *v25;
  const __CFLocale *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  std::string v40;
  __n128 (*v41)(uint64_t, uint64_t);
  uint64_t (*v42)();
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  __n128 (*v47)(_QWORD *, uint64_t);
  void (*v48)(uint64_t);
  uint64_t v49;
  _QWORD v50[3];

  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
  if (MutableCopy)
  {
    v4 = MutableCopy;
    CFStringNormalize(MutableCopy, kCFStringNormalizationFormC);
    CFStringLowercase(v4, this[3]);
    findAndNormalizePunctuation(v4);
    v44 = 0;
    v45 = &v44;
    v46 = 0x4002000000;
    v47 = __Block_byref_object_copy__8;
    v48 = __Block_byref_object_dispose__8;
    v50[0] = 0;
    v50[1] = 0;
    v49 = 0;
    if (this[2])
    {
      NLTaggerSetString();
      CFStringGetLength(v4);
      NLTaggerSetLocaleForRange();
      CFStringGetLength(v4);
      v40.__r_.__value_.__r.__words[0] = 0;
      v40.__r_.__value_.__l.__size_ = (std::string::size_type)&v40;
      v40.__r_.__value_.__r.__words[2] = 0x4002000000;
      v41 = __Block_byref_object_copy__70;
      v42 = __Block_byref_object_dispose__71;
      v43 = xmmword_1A18D3A50;
      NLTaggerEnumerateTokens();
      _Block_object_dispose(&v40, 8);
      v5 = (__int128 **)(v45 + 6);
      v6 = (__int128 *)v45[5];
    }
    else
    {
      v6 = 0;
      v5 = (__int128 **)v50;
    }
    v7 = *v5;
    if (v6 != *v5)
    {
      v8 = (void **)(this + 5);
      do
      {
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v9 = *v6;
          v40.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v9;
        }
        v10 = (uint64_t)this[10];
        if (!v10)
          goto LABEL_74;
        v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v10, (const void **)&v40.__r_.__value_.__l.__data_);
        v12 = v11;
        if ((CFLocaleRef)((char *)this[10] + 8) == (CFLocaleRef)v11)
        {
          if (isNumericalToken(&v40))
          {
            v14 = this[6];
            v16 = this[7];
            if (v14 >= (_DWORD *)v16)
            {
              v17 = (CFLocaleRef)*v8;
              v28 = ((char *)v14 - (_BYTE *)*v8) >> 2;
              v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 62)
                goto LABEL_79;
              v30 = v16 - v17;
              if (v30 >> 1 > v29)
                v29 = v30 >> 1;
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                v21 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v21 = v29;
              if (v21)
              {
                v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)(this + 7), v21);
                v17 = this[5];
                v14 = this[6];
              }
              else
              {
                v22 = 0;
              }
              v25 = (const __CFLocale *)&v22[4 * v28];
              *(_DWORD *)v25 = *((_DWORD *)this + 17);
              v26 = (const __CFLocale *)((char *)v25 + 4);
              while (v14 != (_DWORD *)v17)
              {
                v37 = *--v14;
                *((_DWORD *)v25 - 1) = v37;
                v25 = (const __CFLocale *)((char *)v25 - 4);
              }
              goto LABEL_71;
            }
            v15 = *((_DWORD *)this + 17);
          }
          else
          {
            v23 = isCurrencyToken((unsigned __int8 **)&v40);
            v14 = this[6];
            v24 = this[7];
            if (v23)
            {
              if (v14 >= (_DWORD *)v24)
              {
                v17 = (CFLocaleRef)*v8;
                v31 = ((char *)v14 - (_BYTE *)*v8) >> 2;
                v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 62)
                  goto LABEL_79;
                v33 = v24 - v17;
                if (v33 >> 1 > v32)
                  v32 = v33 >> 1;
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
                  v21 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v21 = v32;
                if (v21)
                {
                  v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)(this + 7), v21);
                  v17 = this[5];
                  v14 = this[6];
                }
                else
                {
                  v22 = 0;
                }
                v25 = (const __CFLocale *)&v22[4 * v31];
                *(_DWORD *)v25 = *((_DWORD *)this + 18);
                v26 = (const __CFLocale *)((char *)v25 + 4);
                while (v14 != (_DWORD *)v17)
                {
                  v38 = *--v14;
                  *((_DWORD *)v25 - 1) = v38;
                  v25 = (const __CFLocale *)((char *)v25 - 4);
                }
                goto LABEL_71;
              }
              v15 = *((_DWORD *)this + 18);
            }
            else
            {
              if (v14 >= (_DWORD *)v24)
              {
                v17 = (CFLocaleRef)*v8;
                v34 = ((char *)v14 - (_BYTE *)*v8) >> 2;
                v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 62)
LABEL_79:
                  std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
                v36 = v24 - v17;
                if (v36 >> 1 > v35)
                  v35 = v36 >> 1;
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                  v21 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v21 = v35;
                if (v21)
                {
                  v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)(this + 7), v21);
                  v17 = this[5];
                  v14 = this[6];
                }
                else
                {
                  v22 = 0;
                }
                v25 = (const __CFLocale *)&v22[4 * v34];
                *(_DWORD *)v25 = *((_DWORD *)this + 16);
                v26 = (const __CFLocale *)((char *)v25 + 4);
                while (v14 != (_DWORD *)v17)
                {
                  v39 = *--v14;
                  *((_DWORD *)v25 - 1) = v39;
                  v25 = (const __CFLocale *)((char *)v25 - 4);
                }
                goto LABEL_71;
              }
              v15 = *((_DWORD *)this + 16);
            }
          }
        }
        else
        {
          v14 = this[6];
          v13 = this[7];
          if (v14 >= (_DWORD *)v13)
          {
            v17 = (CFLocaleRef)*v8;
            v18 = ((char *)v14 - (_BYTE *)*v8) >> 2;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62)
              goto LABEL_79;
            v20 = v13 - v17;
            if (v20 >> 1 > v19)
              v19 = v20 >> 1;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
              v21 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v21 = v19;
            if (v21)
            {
              v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)(this + 7), v21);
              v17 = this[5];
              v14 = this[6];
            }
            else
            {
              v22 = 0;
            }
            v25 = (const __CFLocale *)&v22[4 * v18];
            *(_DWORD *)v25 = *(_DWORD *)(v12 + 56);
            v26 = (const __CFLocale *)((char *)v25 + 4);
            while (v14 != (_DWORD *)v17)
            {
              v27 = *--v14;
              *((_DWORD *)v25 - 1) = v27;
              v25 = (const __CFLocale *)((char *)v25 - 4);
            }
LABEL_71:
            this[5] = v25;
            this[6] = v26;
            this[7] = (CFLocaleRef)&v22[4 * v21];
            if (v17)
              operator delete(v17);
            goto LABEL_73;
          }
          v15 = *(_DWORD *)(v11 + 56);
        }
        *v14 = v15;
        v26 = (const __CFLocale *)(v14 + 1);
LABEL_73:
        this[6] = v26;
LABEL_74:
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != v7);
    }
    this[4] = (CFLocaleRef)((this[6] - this[5]) >> 2);
    CFRelease(v4);
    _Block_object_dispose(&v44, 8);
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  }
}

void sub_1A187F164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&__p, 8);
  _Block_object_dispose(&a29, 8);
  __p = a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

__n128 __Block_byref_object_copy__70(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN24NLSentenceCorrectorModel14setInputTokensEPK10__CFString_block_invoke(uint64_t a1, CFRange *a2)
{
  uint64_t v4;
  CFRange v5;
  uint64_t v6;
  CFStringRef v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  __int128 v15;
  const __CFString *v16;
  char *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  CFRange v22;
  void *__p[2];
  uint64_t v24;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5.location = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  if (v6 + v5.location == a2->location && (a2[1].location & 0x410) == 0x10)
  {
    v5.length = a2->length + v6;
    v7 = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 48), v5);
    if (!v7)
      return;
    v8 = v7;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v10 = *(_QWORD *)(v9 + 48);
    v11 = (void **)(v10 - 24);
    if (*(char *)(v10 - 1) < 0)
      operator delete(*v11);
    *(_QWORD *)(v9 + 48) = v11;
    v12 = (char *)convertToCString(v8);
    std::string::basic_string[abi:ne180100]<0>(__p, v12);
    free(v12);
    v13 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
    v14 = v13[6];
    if (v14 < v13[7])
    {
      if (SHIBYTE(v24) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v13[6], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v15 = *(_OWORD *)__p;
        *(_QWORD *)(v14 + 16) = v24;
        *(_OWORD *)v14 = v15;
      }
      v20 = v14 + 24;
      v13[6] = v14 + 24;
      goto LABEL_19;
    }
  }
  else
  {
    v16 = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 48), *a2);
    if (!v16)
      return;
    v8 = v16;
    v17 = (char *)convertToCString(v16);
    std::string::basic_string[abi:ne180100]<0>(__p, v17);
    free(v17);
    v13 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
    v18 = v13[6];
    if (v18 < v13[7])
    {
      if (SHIBYTE(v24) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v13[6], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v19 = *(_OWORD *)__p;
        *(_QWORD *)(v18 + 16) = v24;
        *(_OWORD *)v18 = v19;
      }
      v20 = v18 + 24;
      v13[6] = v18 + 24;
      goto LABEL_19;
    }
  }
  v20 = std::vector<std::string>::__emplace_back_slow_path<std::string&>(v13 + 5, (__int128 *)__p);
LABEL_19:
  v13[6] = v20;
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v22 = *a2;
  *(_QWORD *)(v21 + 56) = a2[1].location;
  *(CFRange *)(v21 + 40) = v22;
  CFRelease(v8);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
}

void sub_1A187F42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v16 + 48) = v15;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NLSentenceCorrectorModel::getErrorCategoriesAndErrorRanges(NLSentenceCorrectorModel *this@<X0>, const __CFString *a2@<X1>, void **a3@<X8>)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  std::string *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFArray *Results;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex i;
  unint64_t *ValueAtIndex;
  CFIndex v19;
  CFIndex v20;
  CFIndex v21;
  const __CFString *v22;
  _OWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  const __CFArray *v36;
  const __CFArray *v37;
  CFIndex v38;
  CFIndex j;
  unint64_t *v40;
  CFIndex v41;
  CFIndex v42;
  CFIndex v43;
  const __CFString *v44;
  _OWORD *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  const __CFArray *v58;
  const __CFArray *v59;
  CFIndex v60;
  CFIndex k;
  unint64_t *v62;
  CFIndex v63;
  CFIndex v64;
  CFIndex v65;
  const __CFString *v66;
  _OWORD *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  const __CFArray *v80;
  const __CFArray *v81;
  CFIndex v82;
  CFIndex m;
  unint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  __int128 v100;
  const __CFString *v101;
  const __CFAllocator *v102;
  void *v103[2];
  char v104;
  std::vector<std::string> v105;
  void *v106;
  void *v107;
  uint64_t v108;
  std::string v109;
  void *__p;
  uint64_t v111;
  _OWORD *v112[2];
  CFRange v113;
  CFRange v114;
  CFRange v115;
  CFRange v116;
  CFRange v117;
  CFRange v118;
  CFRange v119;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  NLSentenceCorrectorModel::getLabelProbabilities((uint64_t)this, &__p);
  v6 = *((_QWORD *)this + 1);
  v7 = __p;
  if (!v6)
  {
LABEL_5:
    if (!__p)
      return;
    goto LABEL_6;
  }
  v8 = 0;
  v9 = 4 * v6;
  while (*(float *)((char *)__p + v8) == 0.0)
  {
    v8 += 4;
    if (v9 == v8)
      goto LABEL_5;
  }
  v107 = 0;
  v108 = 0;
  v106 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v106, __p, v111, (v111 - (uint64_t)__p) >> 2);
  NLSentenceCorrectorModel::createLabelSequenceString(this, &v106, &v109);
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v109;
  else
    v11 = (std::string *)v109.__r_.__value_.__r.__words[0];
  v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v11, 0x8000100u);
  v13 = v12;
  if (v12)
  {
    v116.length = CFStringGetLength(v12);
    v116.location = 0;
    Results = CFStringCreateArrayWithFindResults(v10, v13, CFSTR("A"), v116, 0);
    v15 = Results;
    v101 = v13;
    v102 = v10;
    if (Results)
    {
      Count = CFArrayGetCount(Results);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = (unint64_t *)CFArrayGetValueAtIndex(v15, i);
          v19 = sentenceRangeForErrorIndex(*((void **)this + 2), *((const __CFLocale **)this + 3), a2, *ValueAtIndex);
          v21 = v20;
          v113.location = v19;
          v113.length = v20;
          v22 = CFStringCreateWithSubstring(v10, a2, v113);
          if (v22)
          {
            std::string::basic_string[abi:ne180100]<0>(v103, (char *)kErrorTypeMap);
            v112[0] = v103;
            v23 = std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 11, (const void **)v103, (uint64_t)&std::piecewise_construct, v112);
            possibleCorrectionsForErrorString(v22, (uint64_t)v23 + 56, *((const __CFLocale **)this + 3), &v105);
            if (v104 < 0)
              operator delete(v103[0]);
            if (v105.__end_ != v105.__begin_)
            {
              v25 = (char *)a3[1];
              v24 = (char *)a3[2];
              if (v25 >= v24)
              {
                v27 = (char *)*a3;
                v28 = 0xAAAAAAAAAAAAAAABLL * ((v25 - (_BYTE *)*a3) >> 3);
                v29 = v28 + 1;
                if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
                v30 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v27) >> 3);
                if (2 * v30 > v29)
                  v29 = 2 * v30;
                if (v30 >= 0x555555555555555)
                  v31 = 0xAAAAAAAAAAAAAAALL;
                else
                  v31 = v29;
                if (v31)
                {
                  v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), v31);
                  v27 = (char *)*a3;
                  v25 = (char *)a3[1];
                }
                else
                {
                  v32 = 0;
                }
                v33 = &v32[24 * v28];
                *(_DWORD *)v33 = 0;
                *((_QWORD *)v33 + 1) = v19;
                *((_QWORD *)v33 + 2) = v21;
                v34 = v33;
                if (v25 != v27)
                {
                  do
                  {
                    v35 = *(_OWORD *)(v25 - 24);
                    *((_QWORD *)v34 - 1) = *((_QWORD *)v25 - 1);
                    *(_OWORD *)(v34 - 24) = v35;
                    v34 -= 24;
                    v25 -= 24;
                  }
                  while (v25 != v27);
                  v27 = (char *)*a3;
                }
                v26 = v33 + 24;
                *a3 = v34;
                a3[1] = v33 + 24;
                a3[2] = &v32[24 * v31];
                if (v27)
                  operator delete(v27);
              }
              else
              {
                *(_DWORD *)v25 = 0;
                v26 = v25 + 24;
                *((_QWORD *)v25 + 1) = v19;
                *((_QWORD *)v25 + 2) = v21;
              }
              a3[1] = v26;
              v10 = v102;
            }
            CFRelease(v22);
            v103[0] = &v105;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
          }
        }
      }
      CFRelease(v15);
      v13 = v101;
    }
    v117.length = CFStringGetLength(v13);
    v117.location = 0;
    v36 = CFStringCreateArrayWithFindResults(v10, v13, CFSTR("B"), v117, 0);
    v37 = v36;
    if (v36)
    {
      v38 = CFArrayGetCount(v36);
      if (v38 >= 1)
      {
        for (j = 0; j != v38; ++j)
        {
          v40 = (unint64_t *)CFArrayGetValueAtIndex(v37, j);
          v41 = sentenceRangeForErrorIndex(*((void **)this + 2), *((const __CFLocale **)this + 3), a2, *v40);
          v43 = v42;
          v114.location = v41;
          v114.length = v42;
          v44 = CFStringCreateWithSubstring(v10, a2, v114);
          if (v44)
          {
            std::string::basic_string[abi:ne180100]<0>(v103, (char *)qword_1EE645C00);
            v112[0] = v103;
            v45 = std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 11, (const void **)v103, (uint64_t)&std::piecewise_construct, v112);
            possibleCorrectionsForErrorString(v44, (uint64_t)v45 + 56, *((const __CFLocale **)this + 3), &v105);
            if (v104 < 0)
              operator delete(v103[0]);
            if (v105.__end_ != v105.__begin_)
            {
              v47 = (char *)a3[1];
              v46 = (char *)a3[2];
              if (v47 >= v46)
              {
                v49 = (char *)*a3;
                v50 = 0xAAAAAAAAAAAAAAABLL * ((v47 - (_BYTE *)*a3) >> 3);
                v51 = v50 + 1;
                if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
                v52 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v49) >> 3);
                if (2 * v52 > v51)
                  v51 = 2 * v52;
                if (v52 >= 0x555555555555555)
                  v53 = 0xAAAAAAAAAAAAAAALL;
                else
                  v53 = v51;
                if (v53)
                {
                  v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), v53);
                  v49 = (char *)*a3;
                  v47 = (char *)a3[1];
                }
                else
                {
                  v54 = 0;
                }
                v55 = &v54[24 * v50];
                *(_DWORD *)v55 = 1;
                *((_QWORD *)v55 + 1) = v41;
                *((_QWORD *)v55 + 2) = v43;
                v56 = v55;
                if (v47 != v49)
                {
                  do
                  {
                    v57 = *(_OWORD *)(v47 - 24);
                    *((_QWORD *)v56 - 1) = *((_QWORD *)v47 - 1);
                    *(_OWORD *)(v56 - 24) = v57;
                    v56 -= 24;
                    v47 -= 24;
                  }
                  while (v47 != v49);
                  v49 = (char *)*a3;
                }
                v48 = v55 + 24;
                *a3 = v56;
                a3[1] = v55 + 24;
                a3[2] = &v54[24 * v53];
                if (v49)
                  operator delete(v49);
              }
              else
              {
                *(_DWORD *)v47 = 1;
                v48 = v47 + 24;
                *((_QWORD *)v47 + 1) = v41;
                *((_QWORD *)v47 + 2) = v43;
              }
              a3[1] = v48;
              v10 = v102;
            }
            CFRelease(v44);
            v103[0] = &v105;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
          }
        }
      }
      CFRelease(v37);
      v13 = v101;
    }
    v118.length = CFStringGetLength(v13);
    v118.location = 0;
    v58 = CFStringCreateArrayWithFindResults(v10, v13, CFSTR("C"), v118, 0);
    v59 = v58;
    if (v58)
    {
      v60 = CFArrayGetCount(v58);
      if (v60 >= 1)
      {
        for (k = 0; k != v60; ++k)
        {
          v62 = (unint64_t *)CFArrayGetValueAtIndex(v59, k);
          v63 = sentenceRangeForErrorIndex(*((void **)this + 2), *((const __CFLocale **)this + 3), a2, *v62);
          v65 = v64;
          v115.location = v63;
          v115.length = v64;
          v66 = CFStringCreateWithSubstring(v10, a2, v115);
          if (v66)
          {
            std::string::basic_string[abi:ne180100]<0>(v103, (char *)qword_1EE645C08);
            v112[0] = v103;
            v67 = std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 11, (const void **)v103, (uint64_t)&std::piecewise_construct, v112);
            possibleCorrectionsForErrorString(v66, (uint64_t)v67 + 56, *((const __CFLocale **)this + 3), &v105);
            if (v104 < 0)
              operator delete(v103[0]);
            if (v105.__end_ != v105.__begin_)
            {
              v69 = (char *)a3[1];
              v68 = (char *)a3[2];
              if (v69 >= v68)
              {
                v71 = (char *)*a3;
                v72 = 0xAAAAAAAAAAAAAAABLL * ((v69 - (_BYTE *)*a3) >> 3);
                v73 = v72 + 1;
                if (v72 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
                v74 = 0xAAAAAAAAAAAAAAABLL * ((v68 - v71) >> 3);
                if (2 * v74 > v73)
                  v73 = 2 * v74;
                if (v74 >= 0x555555555555555)
                  v75 = 0xAAAAAAAAAAAAAAALL;
                else
                  v75 = v73;
                if (v75)
                {
                  v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), v75);
                  v71 = (char *)*a3;
                  v69 = (char *)a3[1];
                }
                else
                {
                  v76 = 0;
                }
                v77 = &v76[24 * v72];
                *(_DWORD *)v77 = 1;
                *((_QWORD *)v77 + 1) = v63;
                *((_QWORD *)v77 + 2) = v65;
                v78 = v77;
                if (v69 != v71)
                {
                  do
                  {
                    v79 = *(_OWORD *)(v69 - 24);
                    *((_QWORD *)v78 - 1) = *((_QWORD *)v69 - 1);
                    *(_OWORD *)(v78 - 24) = v79;
                    v78 -= 24;
                    v69 -= 24;
                  }
                  while (v69 != v71);
                  v71 = (char *)*a3;
                }
                v70 = v77 + 24;
                *a3 = v78;
                a3[1] = v77 + 24;
                a3[2] = &v76[24 * v75];
                if (v71)
                  operator delete(v71);
              }
              else
              {
                *(_DWORD *)v69 = 1;
                v70 = v69 + 24;
                *((_QWORD *)v69 + 1) = v63;
                *((_QWORD *)v69 + 2) = v65;
              }
              a3[1] = v70;
              v10 = v102;
            }
            CFRelease(v66);
            v103[0] = &v105;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
          }
        }
      }
      CFRelease(v59);
      v13 = v101;
    }
    v119.length = CFStringGetLength(v13);
    v119.location = 0;
    v80 = CFStringCreateArrayWithFindResults(v10, v13, CFSTR("D"), v119, 0);
    v81 = v80;
    if (v80)
    {
      v82 = CFArrayGetCount(v80);
      if (v82 >= 1)
      {
        for (m = 0; m != v82; ++m)
        {
          v84 = (unint64_t *)CFArrayGetValueAtIndex(v81, m);
          v85 = sentenceRangeForErrorIndex(*((void **)this + 2), *((const __CFLocale **)this + 3), a2, *v84);
          v87 = v85;
          v88 = v86;
          v90 = (char *)a3[1];
          v89 = (char *)a3[2];
          if (v90 >= v89)
          {
            v92 = (char *)*a3;
            v93 = 0xAAAAAAAAAAAAAAABLL * ((v90 - (_BYTE *)*a3) >> 3);
            v94 = v93 + 1;
            if (v93 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
            v95 = 0xAAAAAAAAAAAAAAABLL * ((v89 - v92) >> 3);
            if (2 * v95 > v94)
              v94 = 2 * v95;
            if (v95 >= 0x555555555555555)
              v96 = 0xAAAAAAAAAAAAAAALL;
            else
              v96 = v94;
            if (v96)
            {
              v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), v96);
              v92 = (char *)*a3;
              v90 = (char *)a3[1];
            }
            else
            {
              v97 = 0;
            }
            v98 = &v97[24 * v93];
            *(_DWORD *)v98 = 3;
            *((_QWORD *)v98 + 1) = v87;
            *((_QWORD *)v98 + 2) = v88;
            v99 = v98;
            if (v90 == v92)
            {
              v13 = v101;
            }
            else
            {
              v13 = v101;
              do
              {
                v100 = *(_OWORD *)(v90 - 24);
                *((_QWORD *)v99 - 1) = *((_QWORD *)v90 - 1);
                *(_OWORD *)(v99 - 24) = v100;
                v99 -= 24;
                v90 -= 24;
              }
              while (v90 != v92);
              v92 = (char *)*a3;
            }
            v91 = v98 + 24;
            *a3 = v99;
            a3[1] = v98 + 24;
            a3[2] = &v97[24 * v96];
            if (v92)
              operator delete(v92);
          }
          else
          {
            *(_DWORD *)v90 = 3;
            v91 = v90 + 24;
            *((_QWORD *)v90 + 1) = v85;
            *((_QWORD *)v90 + 2) = v86;
            v13 = v101;
          }
          a3[1] = v91;
        }
      }
      CFRelease(v81);
    }
    CFRelease(v13);
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  v7 = __p;
  if (__p)
LABEL_6:
    operator delete(v7);
}

void sub_1A187FDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28)
{
  uint64_t v28;
  void *v30;

  if (a27 < 0)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  v30 = *(void **)v28;
  if (*(_QWORD *)v28)
  {
    *(_QWORD *)(v28 + 8) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A187FEB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  JUMPOUT(0x1A187FE7CLL);
}

uint64_t sentenceRangeForErrorIndex(void *a1, const __CFLocale *a2, const __CFString *a3, unint64_t a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 (*v15)(_QWORD *, uint64_t);
  void (*v16)(uint64_t);
  void *__p;
  void *v18;
  uint64_t v19;

  v5 = &v12;
  v12 = 0;
  v13 = &v12;
  v14 = 0x4002000000;
  v15 = __Block_byref_object_copy__91;
  v16 = __Block_byref_object_dispose__92;
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (a1)
  {
    NLTaggerSetString();
    CFStringGetLength(a3);
    NLTaggerSetLocaleForRange();
    CFStringGetLength(a3);
    v10[0] = 0;
    v10[1] = v10;
    v10[2] = 0x4002000000;
    v10[3] = __Block_byref_object_copy__70;
    v10[4] = __Block_byref_object_dispose__71;
    v11 = xmmword_1A18D3A50;
    NLTaggerEnumerateTokens();
    _Block_object_dispose(v10, 8);
    v5 = v13;
    v7 = v13[5];
  }
  else
  {
    v7 = 0;
  }
  if (a4 >= (v5[6] - v7) >> 4)
    std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
  v8 = *(_QWORD *)(v7 + 16 * a4);
  _Block_object_dispose(&v12, 8);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_1A1880050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  _Block_object_dispose(&a15, 8);
  _Block_object_dispose(&a23, 8);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void possibleCorrectionsForErrorString(CFStringRef theString@<X0>, uint64_t a2@<X1>, const __CFLocale *a3@<X2>, std::vector<std::string> *a4@<X8>)
{
  CFMutableStringRef MutableCopy;
  char *v8;
  uint64_t v9;
  void *__p[2];
  char v11;

  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
  CFStringNormalize(MutableCopy, kCFStringNormalizationFormC);
  CFStringLowercase(MutableCopy, a3);
  findAndNormalizePunctuation(MutableCopy);
  if (MutableCopy)
  {
    v8 = (char *)convertToCString(MutableCopy);
    if (v8)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, v8);
      v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, (const void **)__p);
      if (v11 < 0)
        operator delete(__p[0]);
      if (a2 + 8 != v9 && (std::vector<std::string> *)(v9 + 56) != a4)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a4, *(std::string **)(v9 + 56), *(__int128 **)(v9 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56)) >> 3));
      free(v8);
    }
    CFRelease(MutableCopy);
  }
}

void sub_1A1880194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

__CFArray *NLSentenceCorrectorModel::possibleCorrectionsForSentenceError(uint64_t a1, const __CFString *a2, unsigned int *a3)
{
  const __CFAllocator *v6;
  __CFArray *Mutable;
  __CFArray *v8;
  CFStringRef v9;
  const __CFString *v10;
  _OWORD *v11;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer i;
  __int128 v14;
  std::string *v15;
  CFStringRef v16;
  std::string __p;
  std::vector<std::string> v19;
  std::string *p_p;

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v8 = Mutable;
  if (*a3 == 3)
  {
    CFArrayAppendValue(Mutable, CFSTR("a"));
    CFArrayAppendValue(v8, CFSTR("an"));
    CFArrayAppendValue(v8, CFSTR("the"));
  }
  else
  {
    v9 = CFStringCreateWithSubstring(v6, a2, *(CFRange *)(a3 + 2));
    if (v9)
    {
      v10 = v9;
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)kErrorTypeMap[*a3]);
      p_p = &__p;
      v11 = std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 88), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
      possibleCorrectionsForErrorString(v10, (uint64_t)v11 + 56, *(const __CFLocale **)(a1 + 24), &v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      CFRelease(v10);
      begin = v19.__begin_;
      for (i = v19.__end_; begin != i; ++begin)
      {
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
        }
        else
        {
          v14 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &__p;
        else
          v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v16 = CFStringCreateWithCString(v6, (const char *)v15, 0x8000100u);
        if (v16)
        {
          CFArrayAppendValue(v8, v16);
          CFRelease(v16);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
  }
  return v8;
}

void sub_1A1880398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *NL::ResourceCreationException::ResourceCreationException(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = &unk_1E45CE578;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1A1880440(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void NL::ResourceCreationException::~ResourceCreationException(std::exception *this)
{
  NL::ResourceCreationException::~ResourceCreationException(this);
  JUMPOUT(0x1A1B0E068);
}

{
  this->__vftable = (std::exception_vtbl *)&unk_1E45CE578;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

uint64_t NL::ResourceCreationException::what(NL::ResourceCreationException *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::string>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1A18805F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::vector<std::string>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::vector<std::string>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::string>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1A1880800(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

__n128 __Block_byref_object_copy__91(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__92(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 ___ZL26sentenceRangeForErrorIndexPvPK10__CFLocalePK10__CFStringl_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __n128 result;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48)
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != *(_QWORD *)a2
    || (*(_QWORD *)(a2 + 16) & 0x410) != 0x10)
  {
    v4 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
    v8 = (char *)v4[6];
    v10 = v4[7];
    if ((unint64_t)v8 < v10)
    {
      *(_OWORD *)v8 = *(_OWORD *)a2;
      goto LABEL_7;
    }
    v12 = v4[5];
    v13 = (uint64_t)&v8[-v12] >> 4;
    v14 = v13 + 1;
    if (!((unint64_t)(v13 + 1) >> 60))
    {
      v15 = v10 - v12;
      if (v15 >> 3 > v14)
        v14 = v15 >> 3;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)(v4 + 7), v16);
      else
        v17 = 0;
      v18 = &v17[16 * v13];
      v19 = &v17[16 * v16];
      *(_OWORD *)v18 = *(_OWORD *)a2;
      v11 = v18 + 16;
      v21 = (char *)v4[5];
      v20 = (char *)v4[6];
      if (v20 != v21)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
          v18 -= 16;
          v20 -= 16;
        }
        while (v20 != v21);
        v20 = (char *)v4[5];
      }
      v4[5] = v18;
      goto LABEL_34;
    }
LABEL_37:
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) -= 16;
  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(_QWORD *)(v5 + 40);
  v7 = *(_QWORD *)(a2 + 8) + *(_QWORD *)(v5 + 48);
  v8 = (char *)v4[6];
  v9 = v4[7];
  if ((unint64_t)v8 < v9)
  {
    *(_QWORD *)v8 = v6;
    *((_QWORD *)v8 + 1) = v7;
LABEL_7:
    v11 = v8 + 16;
    goto LABEL_36;
  }
  v20 = (char *)v4[5];
  v22 = (v8 - v20) >> 4;
  v23 = v22 + 1;
  if ((unint64_t)(v22 + 1) >> 60)
    goto LABEL_37;
  v24 = v9 - (_QWORD)v20;
  if (v24 >> 3 > v23)
    v23 = v24 >> 3;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
    v25 = 0xFFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)(v4 + 7), v25);
    v20 = (char *)v4[5];
    v8 = (char *)v4[6];
  }
  else
  {
    v26 = 0;
  }
  v27 = &v26[16 * v22];
  v19 = &v26[16 * v25];
  *(_QWORD *)v27 = v6;
  *((_QWORD *)v27 + 1) = v7;
  v11 = v27 + 16;
  if (v8 != v20)
  {
    do
    {
      *((_OWORD *)v27 - 1) = *((_OWORD *)v8 - 1);
      v27 -= 16;
      v8 -= 16;
    }
    while (v8 != v20);
    v20 = (char *)v4[5];
  }
  v4[5] = v27;
LABEL_34:
  v4[6] = v11;
  v4[7] = v19;
  if (v20)
    operator delete(v20);
LABEL_36:
  v4[6] = v11;
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  result = *(__n128 *)a2;
  *(_QWORD *)(v28 + 56) = *(_QWORD *)(a2 + 16);
  *(__n128 *)(v28 + 40) = result;
  return result;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::vector<std::string>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1A1880BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1A1880C34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t std::map<std::string,float>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,float> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1A1880CF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,float> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<std::string const,float> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

float std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<std::string const,float> const&>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  float result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(float *)(a2 + 24);
  *((float *)v6 + 14) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1A1880E14(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1A1880FF0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1A1881060(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 7) = v7 + 4;
    v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

NL::AssetResource *NL::AssetResource::AssetResource(NL::AssetResource *this, CFTypeRef cf, CFTypeRef a3, CFTypeRef a4)
{
  const void **v7;
  const void **v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;

  *((_QWORD *)this + 1) = 0;
  v7 = (const void **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  v8 = (const void **)((char *)this + 16);
  *(_QWORD *)this = 0;
  if (cf)
  {
    v9 = CFRetain(cf);
    nlp::CFScopedPtr<__CFURL const*>::reset((const void **)this, v9);
  }
  if (a3)
  {
    v10 = CFRetain(a3);
    nlp::CFScopedPtr<__CFLocale const*>::reset(v7, v10);
  }
  if (a4)
  {
    v11 = CFRetain(a4);
    nlp::CFScopedPtr<__CFString const*>::reset(v8, v11);
  }
  return this;
}

void sub_1A18811DC(_Unwind_Exception *a1)
{
  const void **v1;
  const void **v2;
  const void **v3;

  nlp::CFScopedPtr<__CFString const*>::reset(v3, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset(v2, 0);
  nlp::CFScopedPtr<__CFURL const*>::reset(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::AssetResource::URL(NL::AssetResource *this)
{
  return *(_QWORD *)this;
}

_QWORD *NL::AssetResource::path@<X0>(const __CFURL **this@<X0>, _QWORD *a2@<X8>)
{
  const __CFURL *v2;

  v2 = *this;
  if (v2)
    getFileSystemRepresentationFromCFURL(v2, a2);
  return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

BOOL NL::AssetResource::exists(const __CFURL **this)
{
  void **v1;
  int v2;
  int v3;
  void *__p[2];
  char v6;

  NL::AssetResource::path(this, __p);
  if (v6 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  v2 = open((const char *)v1, 0);
  v3 = v2;
  if ((v2 & 0x80000000) == 0)
    close(v2);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3 >= 0;
}

void sub_1A188129C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NL::AssetResourceManager *NL::AssetResourceManager::AssetResourceManager(NL::AssetResourceManager *this)
{
  int *v2;
  int *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v8[5];
  _QWORD handler[5];

  *(_BYTE *)this = 0;
  *((_DWORD *)this + 2) = 0;
  v2 = (int *)((char *)this + 8);
  *((_DWORD *)this + 1) = 0;
  v3 = (int *)((char *)this + 4);
  v4 = dispatch_queue_create("com.apple.NLP.assetmanager", 0);
  v5 = MEMORY[0x1E0C809B0];
  *((_QWORD *)this + 2) = v4;
  handler[0] = v5;
  handler[1] = 0x40000000;
  handler[2] = ___ZN2NL20AssetResourceManagerC2Ev_block_invoke;
  handler[3] = &__block_descriptor_tmp_10;
  handler[4] = this;
  notify_register_dispatch("com.apple.MobileAsset.LinguisticData.new-asset-installed", v3, v4, handler);
  v6 = *((_QWORD *)this + 2);
  v8[0] = v5;
  v8[1] = 0x40000000;
  v8[2] = ___ZN2NL20AssetResourceManagerC2Ev_block_invoke_2;
  v8[3] = &__block_descriptor_tmp_3_0;
  v8[4] = this;
  notify_register_dispatch("com.apple.MobileAsset.LinguisticData.cached-metadata-updated", v2, v6, v8);
  return this;
}

uint64_t ___ZN2NL20AssetResourceManagerC2Ev_block_invoke(uint64_t result)
{
  **(_BYTE **)(result + 32) = 1;
  return result;
}

uint64_t ___ZN2NL20AssetResourceManagerC2Ev_block_invoke_2(uint64_t result)
{
  **(_BYTE **)(result + 32) = 1;
  return result;
}

void NL::AssetResourceManager::~AssetResourceManager(NL::AssetResourceManager *this)
{
  NSObject *v2;

  notify_cancel(*((_DWORD *)this + 1));
  notify_cancel(*((_DWORD *)this + 2));
  v2 = *((_QWORD *)this + 2);
  if (v2)
    dispatch_release(v2);
}

uint64_t NL::AssetResourceManager::checkHasUpdatedAssetsAndReset(NL::AssetResourceManager *this)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *((_QWORD *)this + 2);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN2NL20AssetResourceManager29checkHasUpdatedAssetsAndResetEv_block_invoke;
  v4[3] = &unk_1E45CFF88;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t ___ZN2NL20AssetResourceManager29checkHasUpdatedAssetsAndResetEv_block_invoke(uint64_t result)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(result + 40);
  if (*v1)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
    *v1 = 0;
  }
  return result;
}

void NL::AssetResourceManager::enumerateAssetResourcesWithContentTypeOfType()
{
  _QWORD v0[3];
  char v1;

  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x2000000000;
  v1 = 0;
  LDEnumerateAssetDataItems();
  _Block_object_dispose(v0, 8);
}

void sub_1A188153C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN2NL20AssetResourceManager44enumerateAssetResourcesWithContentTypeOfTypeEPK10__CFLocalePK10__CFStringjU13block_pointerFvNSt3__110shared_ptrINS_13AssetResourceEEEPbE_block_invoke(uint64_t a1, const void *a2, int a3, const void *a4, const __CFString *a5, _BYTE *a6)
{
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NL::AssetResource *v18;
  std::__shared_weak_count *v19;
  NL::AssetResource *v20;
  std::__shared_weak_count *v21;
  CFTypeRef cf;
  CFTypeRef v23;
  CFTypeRef v24;

  v23 = a4;
  v24 = a2;
  if (a3 == 2)
  {
    if ((*(_BYTE *)(a1 + 56) & 8) == 0)
      return;
  }
  else if (a3 == 1)
  {
    if ((*(_BYTE *)(a1 + 56) & 4) == 0)
      return;
  }
  else if (a3 || (*(_BYTE *)(a1 + 56) & 2) == 0)
  {
    return;
  }
  if (CFStringsAreEqual(a5, *(const __CFString **)(a1 + 48)))
  {
    cf = CFURLCopyLastPathComponent((CFURLRef)a2);
    std::allocate_shared[abi:ne180100]<NL::AssetResource,std::allocator<NL::AssetResource>,__CFURL const*&,__CFLocale const*&,nlp::CFScopedPtr<__CFString const*> &,void>(&v24, &v23, &cf, &v20);
    if (NL::AssetResource::exists((const __CFURL **)v20))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v18 = v20;
      v19 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, NL::AssetResource **, uint64_t))(v9 + 16))(v9, &v18, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v12 = v19;
      if (v19)
      {
        v13 = (unint64_t *)&v19->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    *a6 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v15 = v21;
    if (v21)
    {
      v16 = (unint64_t *)&v21->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (cf)
      CFRelease(cf);
  }
}

void sub_1A18816C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, const void *a13)
{
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  nlp::CFScopedPtr<__CFString const*>::reset(&a13, 0);
  _Unwind_Resume(a1);
}

void NL::AssetResourceManager::createAssetResourceOfType(_QWORD *a1@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 (*v15)(uint64_t, uint64_t);
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  std::__shared_weak_count *v18;

  v12 = 0;
  v13 = &v12;
  v14 = 0x3802000000;
  v15 = __Block_byref_object_copy__9;
  v16 = __Block_byref_object_dispose__9;
  v17 = 0;
  v18 = 0;
  NL::AssetResourceManager::enumerateAssetResourcesWithContentTypeOfType();
  v6 = v13[6];
  *a1 = v13[5];
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  _Block_object_dispose(&v12, 8);
  v9 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1A1881800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](v8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__9(uint64_t a1)
{
  return std::shared_ptr<NL::DatePeriod>::~shared_ptr[abi:ne180100](a1 + 40);
}

void NL::AssetResourceManager::createAssetResourceFromBundle(NL::AssetResourceManager *this@<X0>, const __CFString *a2@<X1>, const __CFString *a3@<X2>, const __CFString *a4@<X3>, _QWORD *a5@<X8>)
{
  __CFBundle *BundleWithIdentifier;
  CFTypeRef cf;
  const __CFString *v12;
  CFTypeRef v13;

  v12 = a2;
  v13 = this;
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.NLP"));
  cf = CFBundleCopyResourceURL(BundleWithIdentifier, a2, a3, a4);
  std::allocate_shared[abi:ne180100]<NL::AssetResource,std::allocator<NL::AssetResource>,nlp::CFScopedPtr<__CFURL const*> &,__CFLocale const*&,__CFString const*&,void>(&cf, &v13, (CFTypeRef *)&v12, a5);
  if (cf)
    CFRelease(cf);
}

void sub_1A1881928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0);
  _Unwind_Resume(a1);
}

void NL::AssetResourceManager::createAssetResourceFromPathWithName(NL::AssetResourceManager *this@<X0>, CFURLRef baseURL@<X1>, CFStringRef URLString@<X2>, _QWORD *a4@<X8>)
{
  CFTypeRef cf;
  CFTypeRef v7;
  CFTypeRef v8;

  v7 = URLString;
  v8 = this;
  cf = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], URLString, baseURL);
  std::allocate_shared[abi:ne180100]<NL::AssetResource,std::allocator<NL::AssetResource>,nlp::CFScopedPtr<__CFURL const*> &,__CFLocale const*&,__CFString const*&,void>(&cf, &v8, &v7, a4);
  if (cf)
    CFRelease(cf);
}

void sub_1A18819B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<NL::AssetResource,std::allocator<NL::AssetResource>,__CFURL const*&,__CFLocale const*&,nlp::CFScopedPtr<__CFString const*> &,void>@<X0>(CFTypeRef *a1@<X1>, CFTypeRef *a2@<X2>, CFTypeRef *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<NL::AssetResource>::__shared_ptr_emplace[abi:ne180100]<__CFURL const*&,__CFLocale const*&,nlp::CFScopedPtr<__CFString const*> &,std::allocator<NL::AssetResource>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1A1881A24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<NL::AssetResource>::__shared_ptr_emplace[abi:ne180100]<__CFURL const*&,__CFLocale const*&,nlp::CFScopedPtr<__CFString const*> &,std::allocator<NL::AssetResource>,0>(_QWORD *a1, CFTypeRef *a2, CFTypeRef *a3, CFTypeRef *a4)
{
  a1[2] = 0;
  *a1 = &unk_1E45CEE78;
  a1[1] = 0;
  NL::AssetResource::AssetResource((NL::AssetResource *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_1A1881A7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NL::AssetResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEE78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::AssetResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E45CEE78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1B0E068);
}

void std::__shared_ptr_emplace<NL::AssetResource>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<NL::AssetResource>::destroy[abi:ne180100]((uint64_t)&v1, (const void **)(a1 + 24));
}

void std::allocator<NL::AssetResource>::destroy[abi:ne180100](uint64_t a1, const void **a2)
{
  nlp::CFScopedPtr<__CFString const*>::reset(a2 + 2, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset(a2 + 1, 0);
  nlp::CFScopedPtr<__CFURL const*>::reset(a2, 0);
}

_QWORD *std::allocate_shared[abi:ne180100]<NL::AssetResource,std::allocator<NL::AssetResource>,nlp::CFScopedPtr<__CFURL const*> &,__CFLocale const*&,__CFString const*&,void>@<X0>(CFTypeRef *a1@<X1>, CFTypeRef *a2@<X2>, CFTypeRef *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<NL::AssetResource>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFURL const*> &,__CFLocale const*&,__CFString const*&,std::allocator<NL::AssetResource>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1A1881B98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<NL::AssetResource>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFURL const*> &,__CFLocale const*&,__CFString const*&,std::allocator<NL::AssetResource>,0>(_QWORD *a1, CFTypeRef *a2, CFTypeRef *a3, CFTypeRef *a4)
{
  a1[2] = 0;
  *a1 = &unk_1E45CEE78;
  a1[1] = 0;
  NL::AssetResource::AssetResource((NL::AssetResource *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_1A1881BF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void NLGenericTransliterator::NLGenericTransliterator(NLGenericTransliterator *this, const __CFDictionary *a2)
{
  char *v4;
  NLAbstractTransMappings *v5;
  _QWORD *v6;
  _QWORD *v7;
  NLAbstractDictionaryLookup *v8;
  NLAbstractDictionaryLookup *v9;
  _QWORD *v10;
  uint64_t v11[5];

  *(_QWORD *)this = &off_1E45CD950;
  *((_OWORD *)this + 5) = 0u;
  v4 = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = xmmword_1A18D4870;
  *((_DWORD *)this + 34) = 2;
  *((_QWORD *)this + 18) = 0xC03E000000000000;
  *((_QWORD *)this + 19) = 0x3E800000005;
  *((_DWORD *)this + 40) = 3;
  *((_QWORD *)this + 21) = 0x3FF3333333333333;
  *((_QWORD *)this + 22) = 0x1F40000000ALL;
  v5 = (NLAbstractTransMappings *)operator new();
  NLAbstractTransMappings::NLAbstractTransMappings(v5, a2);
  *((_QWORD *)this + 1) = v5;
  (*(void (**)(uint64_t *__return_ptr, NLGenericTransliterator *))(*(_QWORD *)this + 120))(v11, this);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)v4, v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v11);
  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E45CDC68;
  *((_QWORD *)this + 2) = v6;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v7 = (_QWORD *)operator new();
  *v7 = &unk_1E45CE0A0;
  *((_QWORD *)this + 6) = v7;
  v8 = (NLAbstractDictionaryLookup *)operator new();
  NLAbstractDictionaryLookup::NLAbstractDictionaryLookup(v8);
  *((_QWORD *)this + 7) = v8;
  v9 = (NLAbstractDictionaryLookup *)operator new();
  NLAbstractDictionaryLookup::NLAbstractDictionaryLookup(v9);
  *((_QWORD *)this + 8) = v9;
  v10 = (_QWORD *)operator new();
  *v10 = &unk_1E45CE388;
  *((_QWORD *)this + 9) = v10;
}

void sub_1A1881DC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1A1B0E068](v2, 0xE1C40D30581F4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void NLGenericTransliterator::~NLGenericTransliterator(NLGenericTransliterator *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NLAbstractDictionaryLookup *v9;
  NLAbstractDictionaryLookup *v10;

  *(_QWORD *)this = &off_1E45CD950;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    *v2 = off_1E45CD918;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::~__hash_table((uint64_t)(v2 + 16));
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(v2 + 11));
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(v2 + 6));
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::~__hash_table((uint64_t)(v2 + 1));
    MEMORY[0x1A1B0E068](v2, 0x10A1C405853761CLL);
  }
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 3);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 6);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 9);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (NLAbstractDictionaryLookup *)*((_QWORD *)this + 7);
  if (v9)
  {
    NLAbstractDictionaryLookup::~NLAbstractDictionaryLookup(v9);
    MEMORY[0x1A1B0E068]();
  }
  v10 = (NLAbstractDictionaryLookup *)*((_QWORD *)this + 8);
  if (v10)
  {
    NLAbstractDictionaryLookup::~NLAbstractDictionaryLookup(v10);
    MEMORY[0x1A1B0E068]();
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 80);
}

{
  NLGenericTransliterator::~NLGenericTransliterator(this);
  JUMPOUT(0x1A1B0E068);
}

BOOL NLGenericTransliterator::isPresentInTargetLexicon(uint64_t a1, uint64_t a2)
{
  CFStringRef CFStringFromString;

  CFStringFromString = createCFStringFromString(a2);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
  LODWORD(a1) = LMLanguageModelGetTokenIDForString();
  CFRelease(CFStringFromString);
  return (_DWORD)a1 != 0;
}

void NLGenericTransliterator::acceptCandidateInDynamicLanguageModel(uint64_t a1, uint64_t *a2, NLTransliterationCandidate *this)
{
  uint64_t TransliteratedWord;
  const __CFString *CFStringFromString;
  NL::CFLogger *v7;
  int v8;
  uint64_t v9;
  int v10;
  std::string *v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  CFStringRef v18;
  std::string __p;
  int TokenIDForString;

  TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord(this);
  CFStringFromString = createCFStringFromString(TransliteratedWord);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
  TokenIDForString = LMLanguageModelGetTokenIDForString();
  if (!TokenIDForString)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
    v7 = (NL::CFLogger *)LMLanguageModelAddTokenForString();
    v8 = (int)v7;
    v9 = NL::CFLogger::sharedInstance(v7);
    if (v8)
    {
      v10 = TokenIDForString;
      getUTF8StringFromCFString(CFStringFromString, &__p);
      v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v9 + 16))(v9, 7, "Token ID: %u added\t for %s", v10, (const char *)v11);
    }
    else
    {
      getUTF8StringFromCFString(CFStringFromString, &__p);
      v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v9 + 16))(v9, 3, "Could not add %s in dynamic language model", (const char *)v12);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a2[1] == *a2)
  {
    v13 = 0;
  }
  else
  {
    v13 = operator new[]();
    v14 = *a2;
    if (a2[1] != *a2)
    {
      v15 = 0;
      do
      {
        v16 = NLTransliterationCandidate::getTransliteratedWord(*(NLTransliterationCandidate **)(v14 + 8 * v15));
        if (*(char *)(v16 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
        }
        else
        {
          v17 = *(_OWORD *)v16;
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
        }
        v18 = createCFStringFromString((uint64_t)&__p);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
        *(_DWORD *)(v13 + 4 * v15) = LMLanguageModelGetTokenIDForString();
        CFRelease(v18);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v15;
        v14 = *a2;
      }
      while (v15 < (a2[1] - *a2) >> 3);
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
  LMLanguageModelIncrementUsageCount();
  if (v13)
    MEMORY[0x1A1B0E068](v13, 0x1000C4052888210);
  CFRelease(CFStringFromString);
}

void sub_1A188223C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NLGenericTransliterator::flushDynamicData(NLGenericTransliterator *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2));
  return LMLanguageModelFlushDynamicData();
}

uint64_t NLGenericTransliterator::resetDynamicData(NLGenericTransliterator *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2));
  return LMLanguageModelResetDynamicData();
}

void NLGenericTransliterator::reRankOOVCandidates(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t TransliteratedWord;
  __int128 v13;
  double v14;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[3];
  std::string v22;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *a3;
    v5 = a3[1];
    v7 = (unint64_t)(v5 - *a3) >> 3;
    if (*(_DWORD *)(a1 + 180) >= (int)v7)
      v8 = (unint64_t)(v5 - *a3) >> 3;
    else
      v8 = *(_DWORD *)(a1 + 180);
    v9 = a2 - v8;
    if (a2 >= v8)
    {
      v10 = a2;
    }
    else
    {
      v10 = a2;
      v11 = a2;
      do
      {
        if (v11 >= (a3[1] - *a3) >> 3)
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord(*(NLTransliterationCandidate **)(*a3 + 8 * v11));
        if (*(char *)(TransliteratedWord + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)TransliteratedWord, *(_QWORD *)(TransliteratedWord + 8));
        }
        else
        {
          v13 = *(_OWORD *)TransliteratedWord;
          v22.__r_.__value_.__r.__words[2] = *(_QWORD *)(TransliteratedWord + 16);
          *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
        }
        stringToUTF32Characters((uint64_t *)&v22, (int **)__p);
        (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), &v22);
        if (v11 >= (a3[1] - *a3) >> 3)
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        NLTransliterationCandidate::setCharLMScore(*(_QWORD *)(*a3 + 8 * v11), v14);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        ++v11;
      }
      while (!__CFADD__(v9++, 1));
      v6 = *a3;
      v5 = a3[1];
      v7 = (unint64_t)(v5 - *a3) >> 3;
    }
    v16 = (uint64_t *)(v6 + 8 * v10);
    v17 = (uint64_t *)(v5 - 8 * ((int)v7 - v8));
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)NLTransliteratorUtils::greater_than_key_oov;
    if ((char *)v17 - (char *)v16 < 1025)
    {
      v18 = 0;
      v20 = 0;
    }
    else
    {
      v18 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<NLTransliterationCandidate *>(v17 - v16);
      v20 = v19;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(v16, v17, (uint64_t (**)(uint64_t, uint64_t))&v22, v17 - v16, v18, v20);
    if (v18)
      operator delete(v18);
  }
}

void sub_1A1882450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (v18)
    operator delete(v18);
  _Unwind_Resume(exception_object);
}

void NLGenericTransliterator::preProcessForCanonicalization(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string v5;

  (***(void (****)(std::string *__return_ptr))(a1 + 64))(&v5);
  if (!std::string::compare(&v5, ""))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    *a3 = v5;
    memset(&v5, 0, sizeof(v5));
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1A188253C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NLGenericTransliterator::getTargetNumberString(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  std::string::size_type i;
  std::string::const_reference v8;
  void **v9;
  std::string::size_type v10;
  std::string::size_type v11;
  void *__p[2];
  unsigned __int8 v13;

  std::string::basic_string[abi:ne180100]<0>(a3, "");
  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    for (i = 0; i < v11; ++i)
    {
      v8 = std::string::at((const std::string *)a2, i);
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(__p, a1, (*v8 - 48));
      if ((v13 & 0x80u) == 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      if ((v13 & 0x80u) == 0)
        v10 = v13;
      else
        v10 = (std::string::size_type)__p[1];
      std::string::append(a3, (const std::string::value_type *)v9, v10);
      if ((char)v13 < 0)
        operator delete(__p[0]);
      v11 = *(unsigned __int8 *)(a2 + 23);
      if ((v11 & 0x80u) != 0)
        v11 = *(_QWORD *)(a2 + 8);
    }
  }
}

void sub_1A188263C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void NLGenericTransliterator::getTargetDigit(NLGenericTransliterator *this@<X0>, int __val@<W1>, std::string *a3@<X8>)
{
  const std::string *v5;
  NLAbstractOrthographyConvertor *v6[3];
  NLAbstractOrthographyConvertor **v7;

  std::to_string(a3, __val);
  (*(void (**)(NLAbstractOrthographyConvertor **__return_ptr, _QWORD, std::string *))(**((_QWORD **)this + 1)
                                                                                               + 32))(v6, *((_QWORD *)this + 1), a3);
  if (v6[1] != v6[0])
  {
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(v6[0]);
    std::string::operator=(a3, v5);
  }
  v7 = v6;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
}

void sub_1A18826E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  _Unwind_Resume(exception_object);
}

void NLGenericTransliterator::makeNumericLattice(uint64_t a1, uint64_t a2, unsigned int *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  __int128 *v19[3];

  memset(v19, 0, sizeof(v19));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(v17, a1, (*(char *)(a2 + (int)*a3) - 48));
  NLExtendedString::NLExtendedString(__p, v17, *a3, 1.0);
  std::vector<NLExtendedString>::push_back[abi:ne180100]((uint64_t *)v19, (__int128 *)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  v9 = (int)*a3;
  v10 = *(_BYTE *)(a2 + v9);
  v14 = 1;
  LOWORD(v13) = v10;
  NLExtendedString::NLExtendedString(__p, &v13, v9, 1.0);
  std::vector<NLExtendedString>::push_back[abi:ne180100]((uint64_t *)v19, (__int128 *)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = a5[1];
  if (v11 >= a5[2])
  {
    v12 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>(a5, v19);
  }
  else
  {
    std::vector<std::vector<NLExtendedString>>::__construct_one_at_end[abi:ne180100]<std::vector<NLExtendedString> const&>((uint64_t)a5, v19);
    v12 = v11 + 24;
  }
  a5[1] = v12;
  ++*a4;
  if (v14 < 0)
    operator delete(v13);
  if (v18 < 0)
    operator delete(v17[0]);
  __p[0] = v19;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1A1882854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a15 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  a16 = (void *)(v30 - 56);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void NLGenericTransliterator::makePunctuationLattice(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13;
  char v14;
  __int128 *v15[3];

  memset(v15, 0, sizeof(v15));
  v7 = *a3;
  v8 = *(_BYTE *)(a2 + v7);
  v14 = 1;
  LOWORD(v13) = v8;
  NLExtendedString::NLExtendedString(__p, &v13, v7, 1.0);
  std::vector<NLExtendedString>::push_back[abi:ne180100]((uint64_t *)v15, (__int128 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  v9 = a5[1];
  if (v9 >= a5[2])
  {
    v10 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>(a5, v15);
  }
  else
  {
    std::vector<std::vector<NLExtendedString>>::__construct_one_at_end[abi:ne180100]<std::vector<NLExtendedString> const&>((uint64_t)a5, v15);
    v10 = v9 + 24;
  }
  a5[1] = v10;
  ++*a4;
  if (v14 < 0)
    operator delete(v13);
  __p[0] = v15;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1A18829A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  a9 = (void *)(v23 - 56);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void NLGenericTransliterator::addAbbreviationCandidates(uint64_t a1, __int128 *a2, uint64_t *a3, void **a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  unint64_t v15;
  std::string **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  std::string **v23;
  char *v24;
  char *v25;
  std::string *v26;
  uint64_t v28;
  uint64_t v29;
  void **v30;

  v5 = *a3;
  if (a3[1] != *a3)
  {
    v9 = 0;
    v10 = (uint64_t)(a4 + 2);
    do
    {
      NLCommons::split((const std::string *)(v5 + 24 * v9), 0x20u, &v28);
      v11 = v28;
      if (v29 != v28)
      {
        v12 = 0;
        do
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a5, (unsigned __int8 *)(v11 + 24 * v12)))
          {
            if (0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3) <= v12)
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a5, (unsigned __int8 *)(v28 + 24 * v12), v28 + 24 * v12);
            v13 = (std::string *)operator new();
            v14 = v13;
            if (0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3) <= v12)
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            NLTransliterationCandidate::NLTransliterationCandidate(v13, a2, (__int128 *)(v28 + 24 * v12), 0, 0, 1.0);
            v16 = (std::string **)a4[1];
            v15 = (unint64_t)a4[2];
            if ((unint64_t)v16 >= v15)
            {
              v18 = ((char *)v16 - (_BYTE *)*a4) >> 3;
              if ((unint64_t)(v18 + 1) >> 61)
                std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
              v19 = v15 - (_QWORD)*a4;
              v20 = v19 >> 2;
              if (v19 >> 2 <= (unint64_t)(v18 + 1))
                v20 = v18 + 1;
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
                v21 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v21 = v20;
              if (v21)
                v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v10, v21);
              else
                v22 = 0;
              v23 = (std::string **)&v22[8 * v18];
              *v23 = v14;
              v17 = v23 + 1;
              v25 = (char *)*a4;
              v24 = (char *)a4[1];
              if (v24 != *a4)
              {
                do
                {
                  v26 = (std::string *)*((_QWORD *)v24 - 1);
                  v24 -= 8;
                  *--v23 = v26;
                }
                while (v24 != v25);
                v24 = (char *)*a4;
              }
              *a4 = v23;
              a4[1] = v17;
              a4[2] = &v22[8 * v21];
              if (v24)
                operator delete(v24);
            }
            else
            {
              *v16 = v14;
              v17 = v16 + 1;
            }
            a4[1] = v17;
          }
          ++v12;
          v11 = v28;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3) > v12);
      }
      v30 = (void **)&v28;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
      ++v9;
      v5 = *a3;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > v9);
  }
}

void sub_1A1882C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t NLGenericTransliterator::getLetterType(NLGenericTransliterator *this, NLCommons *a2, int8x16_t a3)
{
  int8x16_t v5;

  if ((NLCommons::isVowel(a2, a3) & 1) != 0)
    return 1;
  if ((NLCommons::isConsonant(a2) & 1) != 0)
    return 2;
  if ((NLCommons::isPunct(a2, v5) & 1) != 0)
    return 3;
  if ((a2 & 0x80000000) == 0
    && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 60) & 0x400) != 0)
  {
    return 4;
  }
  return 0;
}

void NLGenericTransliterator::createTransliterationCandidates(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, void **a5@<X8>)
{
  uint64_t v9;
  unint64_t v11;
  uint64_t TransliteratedWord;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  unint64_t v22;
  std::vector<std::string>::pointer begin;
  unint64_t v24;
  std::string *v25;
  __int128 v26;
  std::string::size_type size;
  std::string *v28;
  std::string *v29;
  int8x16_t v30;
  std::string *v31;
  char *v32;
  void *v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  std::string *v38;
  char *v39;
  void *v40;
  std::string **v41;
  char *v42;
  char *v43;
  std::string *v44;
  char *v45;
  uint64_t v46;
  NL::CFLogger *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  std::string *v51;
  __int128 *v52;
  __int128 v53;
  int64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  std::string *v59;
  _BOOL4 isAbbreviation;
  BOOL v61;
  std::string **v62;
  char *v63;
  char *v64;
  std::string *v65;
  char *v66;
  uint64_t v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  std::string *v75;
  NLGenericTransliterator *v76;
  int8x16_t v77;
  unint64_t v78;
  int v79;
  uint64_t LetterType;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  void *v88;
  unint64_t v89;
  std::string::size_type v90;
  uint64_t i;
  uint64_t *v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  NLTransliterationCandidate **v98;
  unint64_t v99;
  std::string::size_type v100;
  uint64_t v101;
  unint64_t j;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  unint64_t k;
  char *v126;
  char *v127;
  unint64_t v128;
  unint64_t v129;
  double v130;
  double v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  const std::string::value_type *v135;
  std::string::size_type v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double LMScore;
  double v160;
  double SequenceScore;
  double v162;
  uint64_t Type;
  uint64_t isExtensionCandidate;
  unint64_t v165;
  uint64_t *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  uint64_t *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t *v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t *v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  _QWORD *v201;
  unint64_t v202;
  double v203;
  std::string v204;
  std::string v205;
  uint64_t v206;
  void *v207;
  uint64_t *v208;
  uint64_t v209;
  void *__p[2];
  __int128 v211;
  __int128 *v212;
  uint64_t v213;
  uint64_t v214;
  void *v215[2];
  uint64_t v216;
  void *v217;
  _BYTE *v218;
  uint64_t v219;
  std::string *v220;
  std::string *v221;
  unint64_t v222;
  std::string v223;
  std::string *v224;
  std::string *v225;
  unint64_t v226;
  std::string v227;
  std::string v228;
  char *v229;
  char *v230;
  unint64_t v231;
  std::vector<std::string> v232;
  uint64_t v233;
  std::string *v234;
  unint64_t v235;
  uint64_t v236;
  std::string *v237;
  unint64_t v238;
  std::string v239;
  uint64_t v240;

  v240 = *MEMORY[0x1E0C80C00];
  v236 = 0;
  v237 = 0;
  v238 = 0;
  v9 = *a3;
  if (a3[1] == *a3)
  {
    v233 = 0;
    v234 = 0;
    v235 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord(*(NLTransliterationCandidate **)(v9 + 8 * v11));
      v13 = v237;
      if ((unint64_t)v237 >= v238)
      {
        v15 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v236, (__int128 *)TransliteratedWord);
      }
      else
      {
        if (*(char *)(TransliteratedWord + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v237, *(const std::string::value_type **)TransliteratedWord, *(_QWORD *)(TransliteratedWord + 8));
        }
        else
        {
          v14 = *(_OWORD *)TransliteratedWord;
          v237->__r_.__value_.__r.__words[2] = *(_QWORD *)(TransliteratedWord + 16);
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
        }
        v15 = v13 + 1;
      }
      v237 = v15;
      ++v11;
      v9 = *a3;
      v16 = a3[1];
    }
    while (v11 < (v16 - *a3) >> 3);
    v233 = 0;
    v234 = 0;
    v235 = 0;
    if (v16 != v9)
    {
      v17 = 0;
      do
      {
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(*(NLAbstractOrthographyConvertor **)(v9 + 8 * v17));
        v19 = v234;
        if ((unint64_t)v234 >= v235)
        {
          v21 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v233, (__int128 *)v18);
        }
        else
        {
          if (*(char *)(v18 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v234, *(const std::string::value_type **)v18, *(_QWORD *)(v18 + 8));
          }
          else
          {
            v20 = *(_OWORD *)v18;
            v234->__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
          }
          v21 = v19 + 1;
        }
        v234 = v21;
        ++v17;
        v9 = *a3;
      }
      while (v17 < (a3[1] - *a3) >> 3);
    }
  }
  if (!std::string::compare((const std::string *)a2, ""))
    goto LABEL_25;
  v22 = *(unsigned __int8 *)(a2 + 23);
  if ((v22 & 0x80u) != 0)
    v22 = *(_QWORD *)(a2 + 8);
  if (v22 > a1[30])
  {
LABEL_25:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    goto LABEL_350;
  }
  memset(&v232, 0, sizeof(v232));
  (*(void (**)(void **__return_ptr, int *, uint64_t))(*(_QWORD *)a1 + 200))(__p, a1, a2);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 16) = v211;
  (*(void (**)(int *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
  NLTransliteratorUtils::separateByNonAlphanumericDelimeter(a2, (uint64_t *)__p);
  std::vector<std::string>::__vdeallocate(&v232);
  *(_OWORD *)&v232.__begin_ = *(_OWORD *)__p;
  v232.__end_cap_.__value_ = (std::string *)v211;
  __p[1] = 0;
  *(_QWORD *)&v211 = 0;
  __p[0] = 0;
  v239.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v239);
  v229 = 0;
  v230 = 0;
  v231 = 0;
  begin = v232.__begin_;
  v199 = a2;
  if (v232.__end_ != v232.__begin_)
  {
    v24 = 0;
    v198 = a4;
    while (1)
    {
      v25 = &begin[v24];
      if (SHIBYTE(v25->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v228, v25->__r_.__value_.__l.__data_, v25->__r_.__value_.__l.__size_);
      }
      else
      {
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v228.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v26;
      }
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v227, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        {
          size = v228.__r_.__value_.__l.__size_;
          v28 = (std::string *)v228.__r_.__value_.__r.__words[0];
          goto LABEL_38;
        }
        size = HIBYTE(v228.__r_.__value_.__r.__words[2]);
      }
      else
      {
        size = HIBYTE(v228.__r_.__value_.__r.__words[2]);
        v227 = v228;
      }
      v28 = &v228;
LABEL_38:
      v29 = (std::string *)((char *)v28 + size);
      while (v28 != v29)
      {
        v28->__r_.__value_.__s.__data_[0] = __tolower(v28->__r_.__value_.__s.__data_[0]);
        v28 = (std::string *)((char *)v28 + 1);
      }
      if (std::string::compare(&v228, ""))
      {
        if (NLCommons::isPunct(&v228) || NLCommons::isNonAlphaNumericStr((char *)&v228, v30))
        {
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v211 = 0;
          v31 = (std::string *)operator new();
          NLTransliterationCandidate::NLTransliterationCandidate(v31, (__int128 *)&v228, (__int128 *)&v228, 0, 0, 1.0);
          v32 = (char *)__p[1];
          if (__p[1] >= (void *)v211)
          {
            v34 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            if ((unint64_t)(v34 + 1) >> 61)
              std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
            v35 = (uint64_t)(v211 - (unint64_t)__p[0]) >> 2;
            if (v35 <= v34 + 1)
              v35 = v34 + 1;
            if ((unint64_t)v211 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v35;
            if (v36)
              v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v211, v36);
            else
              v37 = 0;
            v41 = (std::string **)&v37[8 * v34];
            *v41 = v31;
            v33 = v41 + 1;
            v43 = (char *)__p[0];
            v42 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                v44 = (std::string *)*((_QWORD *)v42 - 1);
                v42 -= 8;
                *--v41 = v44;
              }
              while (v42 != v43);
              v42 = (char *)__p[0];
            }
            __p[0] = v41;
            __p[1] = v33;
            *(_QWORD *)&v211 = &v37[8 * v36];
            if (v42)
              operator delete(v42);
          }
          else
          {
            *(_QWORD *)__p[1] = v31;
            v33 = v32 + 8;
          }
          __p[1] = v33;
          v45 = v230;
          if ((unint64_t)v230 >= v231)
          {
            v46 = std::vector<std::vector<NLTransliterationCandidate *>>::__push_back_slow_path<std::vector<NLTransliterationCandidate *> const&>((uint64_t *)&v229, (uint64_t)__p);
          }
          else
          {
            *(_QWORD *)v230 = 0;
            *((_QWORD *)v45 + 1) = 0;
            *((_QWORD *)v45 + 2) = 0;
            std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(v45, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
            v46 = (uint64_t)(v45 + 24);
          }
          v230 = (char *)v46;
        }
        else
        {
          if (!NLCommons::isNumeric((unsigned __int8 *)&v228))
          {
            v224 = 0;
            v225 = 0;
            v226 = 0;
            (***((void (****)(std::string *__return_ptr, _QWORD, std::string *))a1 + 7))(&v223, *((_QWORD *)a1 + 7), &v228);
            v47 = (NL::CFLogger *)std::string::compare(&v223, "");
            if ((_DWORD)v47)
            {
              NLCommons::split(&v223, 0x2Cu, (uint64_t *)__p);
              v48 = (char *)__p[0];
              if (__p[1] != __p[0])
              {
                v49 = 0;
                v50 = 0;
                v51 = v225;
                do
                {
                  v52 = (__int128 *)&v48[v49];
                  if ((unint64_t)v51 >= v226)
                  {
                    v51 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v224, v52);
                  }
                  else
                  {
                    if (*((char *)v52 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(v51, *(const std::string::value_type **)&v48[v49], *(_QWORD *)&v48[v49 + 8]);
                    }
                    else
                    {
                      v53 = *v52;
                      v51->__r_.__value_.__r.__words[2] = *((_QWORD *)v52 + 2);
                      *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v53;
                    }
                    ++v51;
                  }
                  v225 = v51;
                  ++v50;
                  v48 = (char *)__p[0];
                  v49 += 24;
                }
                while (0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) > v50);
              }
              v239.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v239);
            }
            else
            {
              v58 = NL::CFLogger::sharedInstance(v47);
              v59 = &v228;
              if ((v228.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v59 = (std::string *)v228.__r_.__value_.__r.__words[0];
              (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v58 + 16))(v58, 7, "%s\tNot found in dictionary\n", (const char *)v59);
            }
            v220 = 0;
            v221 = 0;
            v222 = 0;
            isAbbreviation = NLCommons::isAbbreviation(&v227);
            v61 = isAbbreviation;
            if (isAbbreviation)
            {
              (*(void (**)(void **__return_ptr, int *, std::string *))(*(_QWORD *)a1 + 96))(__p, a1, &v227);
              if (SBYTE7(v211) < 0)
              {
                std::string::__init_copy_ctor_external(&v239, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                *(_OWORD *)&v239.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
                v239.__r_.__value_.__r.__words[2] = v211;
              }
              std::string::basic_string[abi:ne180100]<0>(&v217, "॰");
              std::string::basic_string[abi:ne180100]<0>(v215, "");
              replaceAll(&v239, (char *)&v217, (uint64_t)v215);
              if (SHIBYTE(v216) < 0)
                operator delete(v215[0]);
              if (SHIBYTE(v219) < 0)
                operator delete(v217);
              v68 = v221;
              if ((unint64_t)v221 >= v222)
              {
                v70 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v220, (__int128 *)&v227);
              }
              else
              {
                if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v221, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
                }
                else
                {
                  v69 = *(_OWORD *)&v227.__r_.__value_.__l.__data_;
                  v221->__r_.__value_.__r.__words[2] = v227.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
                }
                v70 = v68 + 1;
              }
              v221 = v70;
              if ((unint64_t)v70 >= v222)
              {
                v72 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v220, (__int128 *)&v239);
              }
              else
              {
                if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v70, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
                }
                else
                {
                  v71 = *(_OWORD *)&v239.__r_.__value_.__l.__data_;
                  v70->__r_.__value_.__r.__words[2] = v239.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v71;
                }
                v72 = v70 + 1;
              }
              v221 = v72;
              if ((unint64_t)v72 >= v222)
              {
                v74 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v220, (__int128 *)__p);
              }
              else
              {
                if (SBYTE7(v211) < 0)
                {
                  std::string::__init_copy_ctor_external(v72, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
                }
                else
                {
                  v73 = *(_OWORD *)__p;
                  v72->__r_.__value_.__r.__words[2] = v211;
                  *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v73;
                }
                v74 = v72 + 1;
              }
              v221 = v74;
              if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v239.__r_.__value_.__l.__data_);
              if (SBYTE7(v211) < 0)
                operator delete(__p[0]);
            }
            if (((*(uint64_t (**)(int *, std::string *, char **))(*(_QWORD *)a1 + 320))(a1, &v228, &v229) & 1) == 0)
            {
              if ((v228.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v75 = &v228;
              else
                v75 = (std::string *)v228.__r_.__value_.__r.__words[0];
              v76 = (NLGenericTransliterator *)strcpy((char *)&v239, (const char *)v75);
              v214 = 0;
              v217 = 0;
              v218 = 0;
              v219 = 0;
              LODWORD(__p[0]) = 0;
              if (!v239.__r_.__value_.__s.__data_[0])
                goto LABEL_155;
              v78 = 0;
              v79 = 0;
              do
              {
                LODWORD(v214) = v79;
                LetterType = NLGenericTransliterator::getLetterType(v76, (NLCommons *)v239.__r_.__value_.__s.__data_[v78], v77);
                (*(void (**)(int *, std::string *, void **, uint64_t, uint64_t *, char *, void **))(*(_QWORD *)a1 + 104))(a1, &v239, __p, LetterType, &v214, (char *)&v214 + 4, &v217);
                v78 = SLODWORD(__p[0]) + 1;
                ++LODWORD(__p[0]);
                v76 = (NLGenericTransliterator *)strlen((const char *)&v239);
                v79 = v78;
              }
              while ((unint64_t)v76 > v78);
              if (v218 == v217)
              {
LABEL_155:
                v81 = 0;
                v84 = 1;
              }
              else
              {
                v81 = 0;
                if ((unint64_t)((v218 - (_BYTE *)v217) / 24) <= 1)
                  v82 = 1;
                else
                  v82 = (v218 - (_BYTE *)v217) / 24;
                v83 = (char *)v217 + 8;
                v84 = 1;
                do
                {
                  v85 = *(v83 - 1);
                  v86 = 0xAAAAAAAAAAAAAAABLL * ((*v83 - v85) >> 4);
                  if (v86 > v81)
                    v81 = 0xAAAAAAAAAAAAAAABLL * ((*v83 - v85) >> 4);
                  v84 *= v86;
                  v83 += 3;
                  --v82;
                }
                while (v82);
              }
              if (v84 > a1[32])
                LODWORD(v84) = (*(uint64_t (**)(int *, std::string *, void **))(*(_QWORD *)a1 + 152))(a1, &v228, &v217);
              v87 = (void *)operator new[]();
              v88 = v87;
              if (v218 != v217)
              {
                v89 = (v218 - (_BYTE *)v217) / 24;
                if (v89 <= 1)
                  v89 = 1;
                memset_pattern16(v87, &unk_1A18D4880, 8 * v89);
              }
              v215[0] = 0;
              v215[1] = 0;
              v216 = 0;
              v90 = HIBYTE(v228.__r_.__value_.__r.__words[2]);
              if ((v228.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v90 = v228.__r_.__value_.__l.__size_;
              if (v90 <= a1[44] || v225 == v224)
              {
                std::string::basic_string[abi:ne180100]<0>(&v207, "");
                NLLatticePath::NLLatticePath(__p, &v207, 0.0);
                if (SHIBYTE(v209) < 0)
                {
                  operator delete(v207);
                  if (v81)
                    goto LABEL_170;
                }
                else
                {
                  if (!v81)
                    goto LABEL_177;
LABEL_170:
                  for (i = 0; i != v81; ++i)
                  {
                    if (SBYTE7(v211) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v204, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
                    }
                    else
                    {
                      *(_OWORD *)&v204.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
                      v204.__r_.__value_.__r.__words[2] = v211;
                    }
                    memset(&v205, 0, sizeof(v205));
                    std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(&v205, *((__int128 **)&v211 + 1), v212, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v212 - *((_QWORD *)&v211 + 1)) >> 4));
                    v206 = v213;
                    HIDWORD(v197) = v84;
                    LOBYTE(v197) = 1;
                    (*(void (**)(int *, void **, std::string *, _QWORD, _QWORD, uint64_t, void **, unint64_t, uint64_t, void *))(*(_QWORD *)a1 + 112))(a1, &v217, &v204, 0, 0, i, v215, v81, v197, v88);
                    v207 = &v205;
                    std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                    if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v204.__r_.__value_.__l.__data_);
                  }
                }
LABEL_177:
                v207 = (char *)&v211 + 8;
                std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                if (SBYTE7(v211) < 0)
                  operator delete(__p[0]);
              }
              MEMORY[0x1A1B0E050](v88, 0x1000C8000313F17);
              *(_OWORD *)__p = 0u;
              v211 = 0u;
              LODWORD(v212) = 1065353216;
              v207 = 0;
              v208 = 0;
              v209 = 0;
              if (v221 != v220)
                (*(void (**)(int *, std::string *, std::string **, void **, void **))(*(_QWORD *)a1 + 176))(a1, &v228, &v220, &v207, __p);
              v203 = INFINITY;
              (*(void (**)(int *, std::string *, void **, uint64_t *, void **, void **, double *))(*(_QWORD *)a1 + 64))(a1, &v228, v215, &v236, &v207, __p, &v203);
              (*(void (**)(int *, std::string *, std::string **, void **, void **, double))(*(_QWORD *)a1 + 72))(a1, &v228, &v224, &v207, __p, v203);
              v92 = (uint64_t *)v207;
              v93 = v208;
              v200 = NLTransliteratorUtils::greater_than_key;
              v94 = ((char *)v208 - (_BYTE *)v207) >> 3;
              if ((char *)v208 - (_BYTE *)v207 < 1025)
              {
                v95 = 0;
                v97 = 0;
              }
              else
              {
                v95 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<NLTransliterationCandidate *>(((char *)v208 - (_BYTE *)v207) >> 3);
                v97 = v96;
              }
              std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(v92, v93, (uint64_t (**)(uint64_t, uint64_t))&v200, v94, v95, v97);
              if (v95)
                operator delete(v95);
              v98 = (NLTransliterationCandidate **)v207;
              if (v208 != v207)
              {
                v99 = 0;
                while (NLTransliterationCandidate::getType(v98[v99]) != 4)
                {
                  ++v99;
                  v98 = (NLTransliterationCandidate **)v207;
                  if (v99 >= ((char *)v208 - (_BYTE *)v207) >> 3)
                    goto LABEL_198;
                }
                if (!v61)
                {
                  if (!(_DWORD)v99)
                    goto LABEL_197;
                  if (a1[34] > (int)v99)
                  {
                    v100 = HIBYTE(v228.__r_.__value_.__r.__words[2]);
                    if ((v228.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v100 = v228.__r_.__value_.__l.__size_;
                    if (v100 > a1[33])
LABEL_197:
                      (*(void (**)(int *, unint64_t, void **))(*(_QWORD *)a1 + 232))(a1, v99, &v207);
                  }
                }
              }
LABEL_198:
              v200 = 0;
              v201 = 0;
              v202 = 0;
              v101 = NLCommons::min(((char *)v208 - (_BYTE *)v207) >> 3, v198);
              if (v101 >= 1)
              {
                for (j = 0; j != v101; ++j)
                {
                  v103 = v207;
                  if (j >= ((char *)v208 - (_BYTE *)v207) >> 3)
                    std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
                  v104 = v201;
                  if ((unint64_t)v201 >= v202)
                  {
                    v106 = ((char *)v201 - (_BYTE *)v200) >> 3;
                    if ((unint64_t)(v106 + 1) >> 61)
                      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
                    v107 = (uint64_t)(v202 - (_QWORD)v200) >> 2;
                    if (v107 <= v106 + 1)
                      v107 = v106 + 1;
                    if (v202 - (unint64_t)v200 >= 0x7FFFFFFFFFFFFFF8)
                      v108 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v108 = v107;
                    if (v108)
                      v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v202, v108);
                    else
                      v109 = 0;
                    v110 = &v109[8 * v106];
                    *(_QWORD *)v110 = v103[j];
                    v105 = v110 + 8;
                    v112 = v200;
                    v111 = v201;
                    if (v201 != v200)
                    {
                      do
                      {
                        v113 = *--v111;
                        *((_QWORD *)v110 - 1) = v113;
                        v110 -= 8;
                      }
                      while (v111 != v112);
                      v111 = v200;
                    }
                    v200 = v110;
                    v201 = v105;
                    v202 = (unint64_t)&v109[8 * v108];
                    if (v111)
                      operator delete(v111);
                  }
                  else
                  {
                    *v201 = *((_QWORD *)v207 + j);
                    v105 = v104 + 1;
                  }
                  v201 = v105;
                }
              }
              v114 = v230;
              if ((unint64_t)v230 >= v231)
              {
                v115 = std::vector<std::vector<NLTransliterationCandidate *>>::__push_back_slow_path<std::vector<NLTransliterationCandidate *> const&>((uint64_t *)&v229, (uint64_t)&v200);
              }
              else
              {
                *(_QWORD *)v230 = 0;
                *((_QWORD *)v114 + 1) = 0;
                *((_QWORD *)v114 + 2) = 0;
                std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(v114, v200, (uint64_t)v201, ((char *)v201 - (_BYTE *)v200) >> 3);
                v115 = (uint64_t)(v114 + 24);
              }
              v230 = (char *)v115;
              v116 = (uint64_t *)v207;
              v117 = v208;
              while (v101 < (unint64_t)(v117 - v116))
              {
                v118 = v116[v101];
                if (v118)
                {
                  if (*(char *)(v118 + 47) < 0)
                    operator delete(*(void **)(v118 + 24));
                  if (*(char *)(v118 + 23) < 0)
                    operator delete(*(void **)v118);
                  MEMORY[0x1A1B0E068](v118, 0x1012C40B0087DDBLL);
                  v116 = (uint64_t *)v207;
                  v117 = v208;
                }
                ++v101;
              }
              if (v200)
              {
                v201 = v200;
                operator delete(v200);
                v116 = (uint64_t *)v207;
              }
              if (v116)
              {
                v208 = v116;
                operator delete(v116);
              }
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
              __p[0] = v215;
              std::vector<NLLatticePath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              __p[0] = &v217;
              std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            }
            __p[0] = &v220;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v223.__r_.__value_.__l.__data_);
            __p[0] = &v224;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_70;
          }
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v211 = 0;
          (*(void (**)(std::string *__return_ptr, int *, std::string *))(*(_QWORD *)a1 + 168))(&v239, a1, &v228);
          v38 = (std::string *)operator new();
          NLTransliterationCandidate::NLTransliterationCandidate(v38, (__int128 *)&v228, (__int128 *)&v239, 0, 0, 1.0);
          v39 = (char *)__p[1];
          if (__p[1] >= (void *)v211)
          {
            v54 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            if ((unint64_t)(v54 + 1) >> 61)
              std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
            v55 = (uint64_t)(v211 - (unint64_t)__p[0]) >> 2;
            if (v55 <= v54 + 1)
              v55 = v54 + 1;
            if ((unint64_t)v211 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
              v56 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v56 = v55;
            if (v56)
              v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)&v211, v56);
            else
              v57 = 0;
            v62 = (std::string **)&v57[8 * v54];
            *v62 = v38;
            v40 = v62 + 1;
            v64 = (char *)__p[0];
            v63 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                v65 = (std::string *)*((_QWORD *)v63 - 1);
                v63 -= 8;
                *--v62 = v65;
              }
              while (v63 != v64);
              v63 = (char *)__p[0];
            }
            __p[0] = v62;
            __p[1] = v40;
            *(_QWORD *)&v211 = &v57[8 * v56];
            if (v63)
              operator delete(v63);
          }
          else
          {
            *(_QWORD *)__p[1] = v38;
            v40 = v39 + 8;
          }
          __p[1] = v40;
          v66 = v230;
          if ((unint64_t)v230 >= v231)
          {
            v67 = std::vector<std::vector<NLTransliterationCandidate *>>::__push_back_slow_path<std::vector<NLTransliterationCandidate *> const&>((uint64_t *)&v229, (uint64_t)__p);
          }
          else
          {
            *(_QWORD *)v230 = 0;
            *((_QWORD *)v66 + 1) = 0;
            *((_QWORD *)v66 + 2) = 0;
            std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(v66, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
            v67 = (uint64_t)(v66 + 24);
          }
          v230 = (char *)v67;
          if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v239.__r_.__value_.__l.__data_);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
LABEL_70:
      if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v227.__r_.__value_.__l.__data_);
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v228.__r_.__value_.__l.__data_);
      ++v24;
      begin = v232.__begin_;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v232.__end_ - (char *)v232.__begin_) >> 3) <= v24)
      {
        v119 = v229;
        v120 = v230;
        a2 = v199;
        goto LABEL_239;
      }
    }
  }
  v119 = 0;
  v120 = 0;
LABEL_239:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v121 = 0xAAAAAAAAAAAAAAABLL * ((v120 - v119) >> 3);
  if (v121 < 2)
  {
    if (v120 - v119 == 24)
    {
      if (v120 == v119)
LABEL_317:
        std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
      v156 = 0;
      while (v156 < (uint64_t)(*((_QWORD *)v119 + 1) - *(_QWORD *)v119) >> 3)
      {
        v157 = operator new();
        if (v230 == v229)
          goto LABEL_355;
        if (v156 >= (uint64_t)(*((_QWORD *)v229 + 1) - *(_QWORD *)v229) >> 3)
          goto LABEL_354;
        v158 = NLTransliterationCandidate::getTransliteratedWord(*(NLTransliterationCandidate **)(*(_QWORD *)v229
                                                                                                + 8 * v156));
        if (v230 == v229)
          goto LABEL_355;
        if (v156 >= (uint64_t)(*((_QWORD *)v229 + 1) - *(_QWORD *)v229) >> 3)
          goto LABEL_354;
        LMScore = NLTransliterationCandidate::getLMScore(*(NLTransliterationCandidate **)(*(_QWORD *)v229 + 8 * v156));
        if (v230 == v229)
          goto LABEL_355;
        if (v156 >= (uint64_t)(*((_QWORD *)v229 + 1) - *(_QWORD *)v229) >> 3)
          goto LABEL_354;
        v160 = LMScore;
        SequenceScore = NLTransliterationCandidate::getSequenceScore(*(NLTransliterationCandidate **)(*(_QWORD *)v229 + 8 * v156));
        if (v230 == v229)
          goto LABEL_355;
        if (v156 >= (uint64_t)(*((_QWORD *)v229 + 1) - *(_QWORD *)v229) >> 3)
          goto LABEL_354;
        v162 = SequenceScore;
        Type = NLTransliterationCandidate::getType(*(NLTransliterationCandidate **)(*(_QWORD *)v229 + 8 * v156));
        if (v230 == v229)
LABEL_355:
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        if (v156 >= (uint64_t)(*((_QWORD *)v229 + 1) - *(_QWORD *)v229) >> 3)
LABEL_354:
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        isExtensionCandidate = NLTransliterationCandidate::isExtensionCandidate(*(NLTransliterationCandidate **)(*(_QWORD *)v229 + 8 * v156));
        NLTransliterationCandidate::NLTransliterationCandidate(v157, v199, v158, Type, isExtensionCandidate, v160, v162);
        v166 = (uint64_t *)a5[1];
        v165 = (unint64_t)a5[2];
        if ((unint64_t)v166 >= v165)
        {
          v168 = ((char *)v166 - (_BYTE *)*a5) >> 3;
          if ((unint64_t)(v168 + 1) >> 61)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v169 = v165 - (_QWORD)*a5;
          v170 = v169 >> 2;
          if (v169 >> 2 <= (unint64_t)(v168 + 1))
            v170 = v168 + 1;
          if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8)
            v171 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v171 = v170;
          if (v171)
            v172 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(a5 + 2), v171);
          else
            v172 = 0;
          v173 = (uint64_t *)&v172[8 * v168];
          *v173 = v157;
          v167 = v173 + 1;
          v175 = (char *)*a5;
          v174 = (char *)a5[1];
          if (v174 != *a5)
          {
            do
            {
              v176 = *((_QWORD *)v174 - 1);
              v174 -= 8;
              *--v173 = v176;
            }
            while (v174 != v175);
            v174 = (char *)*a5;
          }
          *a5 = v173;
          a5[1] = v167;
          a5[2] = &v172[8 * v171];
          if (v174)
            operator delete(v174);
        }
        else
        {
          *v166 = v157;
          v167 = v166 + 1;
        }
        a5[1] = v167;
        ++v156;
        v119 = v229;
        if (v230 == v229)
          goto LABEL_317;
      }
    }
    else
    {
      v177 = operator new();
      NLTransliterationCandidate::NLTransliterationCandidate(v177, a2, a2, 4, 1, 1.0, 1.0);
      v178 = (unint64_t)a5[2];
      v179 = (uint64_t *)a5[1];
      if ((unint64_t)v179 >= v178)
      {
        v181 = ((char *)v179 - (_BYTE *)*a5) >> 3;
        if ((unint64_t)(v181 + 1) >> 61)
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        v182 = v178 - (_QWORD)*a5;
        v183 = v182 >> 2;
        if (v182 >> 2 <= (unint64_t)(v181 + 1))
          v183 = v181 + 1;
        if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8)
          v184 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v184 = v183;
        if (v184)
          v185 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(a5 + 2), v184);
        else
          v185 = 0;
        v186 = (uint64_t *)&v185[8 * v181];
        v187 = &v185[8 * v184];
        *v186 = v177;
        v180 = v186 + 1;
        v189 = (char *)*a5;
        v188 = (char *)a5[1];
        if (v188 != *a5)
        {
          do
          {
            v190 = *((_QWORD *)v188 - 1);
            v188 -= 8;
            *--v186 = v190;
          }
          while (v188 != v189);
          v188 = (char *)*a5;
        }
        *a5 = v186;
        a5[1] = v180;
        a5[2] = v187;
        if (v188)
          operator delete(v188);
      }
      else
      {
        *v179 = v177;
        v180 = v179 + 1;
      }
      a5[1] = v180;
    }
  }
  else
  {
    v122 = 0;
    v123 = v119 + 8;
    v124 = v121;
    do
    {
      if (v121 > v122)
        v122 = (uint64_t)(*v123 - *(v123 - 1)) >> 3;
      v123 += 3;
      --v124;
    }
    while (v124);
    if (v122 >= 1)
    {
      for (k = 0; k != v122; ++k)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        v127 = v229;
        v126 = v230;
        if (v230 == v229)
        {
          v131 = 0.0;
          v130 = 0.0;
        }
        else
        {
          v128 = 0;
          v129 = 0;
          v130 = 0.0;
          v131 = 0.0;
          do
          {
            v132 = *(_QWORD *)&v127[v128];
            if (k < (*(_QWORD *)&v127[v128 + 8] - v132) >> 3)
            {
              v133 = NLTransliterationCandidate::getTransliteratedWord(*(NLTransliterationCandidate **)(v132 + 8 * k));
              v134 = *(char *)(v133 + 23);
              if (v134 >= 0)
                v135 = (const std::string::value_type *)v133;
              else
                v135 = *(const std::string::value_type **)v133;
              if (v134 >= 0)
                v136 = *(unsigned __int8 *)(v133 + 23);
              else
                v136 = *(_QWORD *)(v133 + 8);
              std::string::append((std::string *)__p, v135, v136);
              if (0xAAAAAAAAAAAAAAABLL * ((v230 - v229) >> 3) <= v129)
                goto LABEL_353;
              v137 = *(_QWORD *)&v229[v128];
              if (k >= (*(_QWORD *)&v229[v128 + 8] - v137) >> 3)
                goto LABEL_352;
              v138 = NLTransliterationCandidate::getLMScore(*(NLTransliterationCandidate **)(v137 + 8 * k));
              if (0xAAAAAAAAAAAAAAABLL * ((v230 - v229) >> 3) <= v129)
LABEL_353:
                std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
              v139 = *(_QWORD *)&v229[v128];
              if (k >= (*(_QWORD *)&v229[v128 + 8] - v139) >> 3)
LABEL_352:
                std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
              v131 = v131 + v138;
              v130 = v130 + NLTransliterationCandidate::getSequenceScore(*(NLTransliterationCandidate **)(v139 + 8 * k));
              v127 = v229;
              v126 = v230;
            }
            ++v129;
            v128 += 24;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v126 - v127) >> 3) > v129);
        }
        LODWORD(v239.__r_.__value_.__l.__data_) = 0;
        v140 = (*(uint64_t (**)(_QWORD, void **, std::string *))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD *)a1 + 2), __p, &v239);
        v141 = operator new();
        v142 = v141;
        if (v140)
          v143 = 0;
        else
          v143 = 4;
        NLTransliterationCandidate::NLTransliterationCandidate(v141, v199, __p, v143, v140 ^ 1u, v131, v130);
        v145 = (uint64_t *)a5[1];
        v144 = (unint64_t)a5[2];
        if ((unint64_t)v145 >= v144)
        {
          v147 = ((char *)v145 - (_BYTE *)*a5) >> 3;
          if ((unint64_t)(v147 + 1) >> 61)
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          v148 = v144 - (_QWORD)*a5;
          v149 = v148 >> 2;
          if (v148 >> 2 <= (unint64_t)(v147 + 1))
            v149 = v147 + 1;
          if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8)
            v150 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v150 = v149;
          if (v150)
            v151 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(a5 + 2), v150);
          else
            v151 = 0;
          v152 = (uint64_t *)&v151[8 * v147];
          *v152 = v142;
          v146 = v152 + 1;
          v154 = (char *)*a5;
          v153 = (char *)a5[1];
          if (v153 != *a5)
          {
            do
            {
              v155 = *((_QWORD *)v153 - 1);
              v153 -= 8;
              *--v152 = v155;
            }
            while (v153 != v154);
            v153 = (char *)*a5;
          }
          *a5 = v152;
          a5[1] = v146;
          a5[2] = &v151[8 * v150];
          if (v153)
            operator delete(v153);
        }
        else
        {
          *v145 = v142;
          v146 = v145 + 1;
        }
        a5[1] = v146;
        if (SBYTE7(v211) < 0)
          operator delete(__p[0]);
      }
    }
  }
  v192 = v229;
  v191 = v230;
  if (v230 != v229)
  {
    v193 = 0;
    while (1)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v191 - v192) >> 3) <= v193)
        goto LABEL_351;
      v194 = *(_QWORD *)&v192[24 * v193];
      if (*(_QWORD *)&v192[24 * v193 + 8] != v194)
        break;
LABEL_348:
      if (0xAAAAAAAAAAAAAAABLL * ((v191 - v192) >> 3) <= ++v193)
        goto LABEL_349;
    }
    v195 = 0;
    while (1)
    {
      v196 = *(_QWORD *)(v194 + 8 * v195);
      if (v196)
      {
        if (*(char *)(v196 + 47) < 0)
          operator delete(*(void **)(v196 + 24));
        if (*(char *)(v196 + 23) < 0)
          operator delete(*(void **)v196);
        MEMORY[0x1A1B0E068](v196, 0x1012C40B0087DDBLL);
        v192 = v229;
        v191 = v230;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v191 - v192) >> 3) <= v193)
        break;
      ++v195;
      v194 = *(_QWORD *)&v192[24 * v193];
      if (v195 >= (*(_QWORD *)&v192[24 * v193 + 8] - v194) >> 3)
        goto LABEL_348;
    }
LABEL_351:
    std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_349:
  (*(void (**)(_QWORD))(**((_QWORD **)a1 + 1) + 24))(*((_QWORD *)a1 + 1));
  __p[0] = &v229;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v232;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_350:
  __p[0] = &v233;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v236;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1A18843D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  char a71;
  uint64_t v71;

  if (__p)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a31);
  a31 = &a40;
  std::vector<NLLatticePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = &a43;
  std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = &a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (a54 < 0)
    operator delete(a49);
  a31 = &a55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (a63 < 0)
    operator delete(a58);
  if (a70 < 0)
    operator delete(a65);
  a31 = &a71;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = (void *)(v71 - 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = (void *)(v71 - 208);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = (void *)(v71 - 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

void NLLatticePath::~NLLatticePath(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t NLGenericTransliterator::isOrthographyCorrect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  CFStringRef v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  std::string v11;
  CFTypeRef cf;
  const __CFString *v13;

  v13 = 0;
  cf = 0;
  NLCommons::normalize(a2, &v11);
  if (!std::string::compare(&v11, ""))
  {
    v7 = 0;
  }
  else
  {
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v11;
    else
      v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
    v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v5, 0x8000100u);
    if (v6)
    {
      v7 = (*(uint64_t (**)(_QWORD, CFStringRef, const __CFString **, CFTypeRef *))(**(_QWORD **)(a1 + 48)
                                                                                            + 16))(*(_QWORD *)(a1 + 48), v6, &v13, &cf);
      if (v13)
      {
        getUTF8StringFromCFString(v13, &v9);
        if (*(char *)(a3 + 23) < 0)
          operator delete(*(void **)a3);
        *(_OWORD *)a3 = v9;
        *(_QWORD *)(a3 + 16) = v10;
        CFRelease(v13);
      }
    }
    else
    {
      v7 = 0;
    }
    if (cf)
      CFRelease(cf);
    if (v6)
      CFRelease(v6);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1A188490C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NLGenericTransliterator::evaluatePaths(uint64_t a1, uint64_t *a2, NLLatticePath *this, int a4, int a5, int a6, uint64_t *a7, unint64_t a8, char a9, int a10, uint64_t a11)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v21;
  _QWORD *v22;
  double Weight;
  const std::string *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  const std::string *v36;
  uint64_t v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  void **v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::string v51;
  std::string v52;
  uint64_t v53;
  void *__p[2];
  unsigned __int8 v55;
  std::string v56;
  std::string v57;
  __int128 v58;
  std::string::size_type v59;

  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > a5)
  {
    v12 = a5;
    v14 = (uint64_t *)(*a2 + 24 * a5);
    v13 = *v14;
    if (0xAAAAAAAAAAAAAAABLL * ((v14[1] - *v14) >> 4) > a6)
    {
      v21 = a6;
      if (NLLatticePath::appendPathString((std::string *)this, (const NLExtendedString *)(v13 + 48 * a6)))
      {
        if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v12)
LABEL_63:
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        v22 = (_QWORD *)(*a2 + 24 * (int)v12);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22[1] - *v22) >> 4) <= v21)
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        Weight = NLExtendedString::getWeight((NLExtendedString *)(*v22 + 48 * (int)v21));
        NLLatticePath::addPathScore(this, Weight);
        v58 = 0uLL;
        v59 = 0;
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
        if (std::string::compare(v24, ""))
        {
          if (a9)
          {
            NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
            if (((*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 160))(a1, v25, &v58) & 1) == 0)
            {
              NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
              if ((NLCommons::isNumeric(v26) & 1) == 0)
                goto LABEL_21;
            }
          }
        }
        if (*(_DWORD *)(a1 + 152) < a5)
        {
          v27 = *(double *)(a11 + 8 * v12);
          if (fabs(v27) != INFINITY && v27 < *(double *)(a1 + 144))
            goto LABEL_21;
        }
        v28 = *(_QWORD *)(a1 + 40);
        if (!v28 || *(_DWORD *)(a1 + 160) >= a5 || *(_DWORD *)(a1 + 156) >= a10)
          goto LABEL_20;
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
        v30 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 32))(v28, v29);
        v31 = *(double *)(a11 + 8 * v12);
        if (v30 > v31)
        {
          *(double *)(a11 + 8 * v12) = v30;
          v31 = v30;
        }
        if (v31 == 0.0 || v30 / v31 <= *(double *)(a1 + 168))
LABEL_20:
          v32 = 1;
        else
LABEL_21:
          v32 = 0;
        if (SHIBYTE(v59) < 0)
        {
          operator delete((void *)v58);
          if ((v32 & 1) == 0)
            return;
        }
        else if ((v32 & 1) == 0)
        {
          return;
        }
        v33 = v12 + 1;
        v34 = *a2;
        v35 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
        if (v35 == v12 + 1)
        {
          NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
          if (!std::string::compare(v36, "") || (a9 & 1) != 0)
          {
            v48 = a7[1];
            if (v48 >= a7[2])
            {
              v49 = std::vector<NLLatticePath>::__push_back_slow_path<NLLatticePath const&>(a7, (__int128 *)this);
            }
            else
            {
              std::allocator<NLLatticePath>::construct[abi:ne180100]<NLLatticePath,NLLatticePath const&>((_DWORD)a7 + 16, (std::string *)a7[1], (__int128 *)this);
              v49 = v48 + 56;
              a7[1] = v48 + 56;
            }
            a7[1] = v49;
          }
          else
          {
            (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 304))(&v56, a1);
            NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
            v38 = *(char *)(v37 + 23);
            if (v38 >= 0)
              v39 = (const std::string::value_type *)v37;
            else
              v39 = *(const std::string::value_type **)v37;
            if (v38 >= 0)
              v40 = *(unsigned __int8 *)(v37 + 23);
            else
              v40 = *(_QWORD *)(v37 + 8);
            v41 = std::string::append(&v56, v39, v40);
            v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
            v57.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v42;
            v41->__r_.__value_.__l.__size_ = 0;
            v41->__r_.__value_.__r.__words[2] = 0;
            v41->__r_.__value_.__r.__words[0] = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 304))(__p, a1);
            if ((v55 & 0x80u) == 0)
              v43 = __p;
            else
              v43 = (void **)__p[0];
            if ((v55 & 0x80u) == 0)
              v44 = v55;
            else
              v44 = (std::string::size_type)__p[1];
            v45 = std::string::append(&v57, (const std::string::value_type *)v43, v44);
            v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
            v59 = v45->__r_.__value_.__r.__words[2];
            v58 = v46;
            v45->__r_.__value_.__l.__size_ = 0;
            v45->__r_.__value_.__r.__words[2] = 0;
            v45->__r_.__value_.__r.__words[0] = 0;
            if ((char)v55 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v57.__r_.__value_.__l.__data_);
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v56.__r_.__value_.__l.__data_);
            memset(&v57, 0, sizeof(v57));
            if ((*(unsigned int (**)(uint64_t, __int128 *, std::string *))(*(_QWORD *)a1 + 160))(a1, &v58, &v57))
            {
              std::vector<NLLatticePath>::push_back[abi:ne180100](a7, (__int128 *)this);
            }
            if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v57.__r_.__value_.__l.__data_);
            if (SHIBYTE(v59) < 0)
              operator delete((void *)v58);
          }
        }
        else if (v35 > v12 + 1)
        {
          v47 = 0;
          while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v34 + 24 * v33 + 8) - *(_QWORD *)(v34 + 24 * v33)) >> 4) >= v47)
          {
            if (v47 < a8)
            {
              if (*((char *)this + 23) < 0)
                std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
              else
                v51 = *(std::string *)this;
              memset(&v52, 0, sizeof(v52));
              std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(&v52, *((__int128 **)this + 3), *((__int128 **)this + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 4));
              v53 = *((_QWORD *)this + 6);
              HIDWORD(v50) = a10;
              LOBYTE(v50) = a9;
              (*(void (**)(uint64_t, uint64_t *, std::string *, _QWORD, unint64_t, unint64_t, uint64_t *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2, &v51, (a4 + 1), v33, v47, a7, a8, v50, a11);
              *(_QWORD *)&v58 = &v52;
              std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
              if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v51.__r_.__value_.__l.__data_);
            }
            ++v47;
            v34 = *a2;
            if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v33)
              goto LABEL_63;
          }
        }
      }
    }
  }
}

void sub_1A1884E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)(v37 + 8) = v38;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<NLLatticePath>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1[2];
  v3 = a1 + 2;
  v5 = *(v3 - 1);
  if (v5 >= v4)
  {
    result = std::vector<NLLatticePath>::__push_back_slow_path<NLLatticePath const&>(a1, a2);
  }
  else
  {
    std::allocator<NLLatticePath>::construct[abi:ne180100]<NLLatticePath,NLLatticePath const&>((int)v3, (std::string *)*(v3 - 1), a2);
    result = v5 + 56;
    a1[1] = v5 + 56;
  }
  a1[1] = result;
  return result;
}

void sub_1A1884F44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void NLGenericTransliterator::postProcessForNewOrthography(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void NLGenericTransliterator::postProcessForPhonetics(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t NLGenericTransliterator::pruneLattice(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int MaximumLayerSize;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  unint64_t v21;
  char v23;

  MaximumLayerSize = NLTransliteratorUtils::getMaximumLayerSize(a2);
  v5 = *a3;
  if (a3[1] == *a3)
    return 1;
  v6 = MaximumLayerSize;
  v7 = 0;
  v8 = 0;
  LODWORD(v9) = 1;
  do
  {
    v10 = v5 + v7;
    v11 = *(uint64_t **)v10;
    v12 = *(_QWORD *)(v10 + 8);
    v13 = v12 - *(_QWORD *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 4);
    if (v13 < 1)
    {
      v15 = 0;
      v17 = 0;
    }
    else
    {
      v15 = (__int128 *)std::get_temporary_buffer[abi:ne180100]<NLExtendedString>(0xAAAAAAAAAAAAAAABLL * (v13 >> 4));
      v17 = v16;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(v11, v12, (uint64_t)&v23, v14, v15, v17);
    if (v15)
      operator delete(v15);
    v18 = *a3;
    if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v8)
      goto LABEL_16;
    v19 = (uint64_t *)(v18 + v7);
    v20 = -1431655765 * ((*(_QWORD *)(v18 + v7 + 8) - *(_QWORD *)(v18 + v7)) >> 4);
    if (v6 < v20)
      v20 = v6;
    std::vector<NLExtendedString>::resize(v19, v20);
    v5 = *a3;
    v21 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
    if (v21 <= v8)
LABEL_16:
      std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
    v9 = -1431655765 * ((*(_QWORD *)(v5 + v7 + 8) - *(_QWORD *)(v5 + v7)) >> 4) * v9;
    ++v8;
    v7 += 24;
  }
  while (v21 > v8);
  return v9;
}

void sub_1A18850E8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::vector<NLExtendedString>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<NLExtendedString>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 48 * a2;
    while (v3 != v7)
    {
      if (*(char *)(v3 - 25) < 0)
        operator delete(*(void **)(v3 - 48));
      v3 -= 48;
    }
    a1[1] = v7;
  }
}

void NLGenericTransliterator::getBestCandidate(uint64_t a1, uint64_t *a2, int a3, int a4, const char *a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  int Pos;
  std::string *v18;
  int v19;
  size_t v20;
  size_t v21;
  __int128 v22;
  __int128 v23;
  std::string *v24;
  __int128 *v25;
  std::string *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 *v34;
  size_t v35;
  std::string v36;
  __int128 v37;
  std::string::value_type v38;
  __int128 *v39;
  std::string *v40;
  unint64_t v41;

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v11 = 0;
    v12 = 0;
    v35 = a3;
    v13 = a4;
    while (1)
    {
      v14 = (__int128 *)(v7 + v11);
      if (*(char *)(v7 + v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
      }
      else
      {
        v15 = *v14;
        v36.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v15;
      }
      v16 = *(_OWORD *)(v7 + v11 + 24);
      v38 = *(_BYTE *)(v7 + v11 + 40);
      v37 = v16;
      Pos = NLExtendedString::getPos((NLExtendedString *)&v36);
      if (!a3 && Pos == 1)
      {
        v18 = v40;
        if ((unint64_t)v40 < v41)
        {
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_23;
          goto LABEL_27;
        }
        goto LABEL_29;
      }
      v19 = NLExtendedString::getPos((NLExtendedString *)&v36);
      if (a3 >= 1 && v19 == 2)
      {
        v20 = strlen(a5) - 1;
        if (v20 > v35 && v20 != v13)
          break;
      }
      if (NLExtendedString::getPos((NLExtendedString *)&v36) == 3)
      {
        v21 = strlen(a5);
        if (a3)
        {
          if (v21 - 1 == v13)
          {
            v18 = v40;
            if ((unint64_t)v40 < v41)
            {
              if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_23;
              goto LABEL_27;
            }
            goto LABEL_29;
          }
        }
      }
      if (NLExtendedString::getPos((NLExtendedString *)&v36) == 4)
      {
        v18 = v40;
        if ((unint64_t)v40 < v41)
        {
          if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_27;
LABEL_23:
          std::string::__init_copy_ctor_external(v40, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
          goto LABEL_28;
        }
        goto LABEL_29;
      }
LABEL_31:
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      ++v12;
      v7 = *a2;
      v11 += 48;
      if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4) <= v12)
      {
        v25 = v39;
        v26 = v40;
        goto LABEL_37;
      }
    }
    v18 = v40;
    if ((unint64_t)v40 < v41)
    {
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_23;
LABEL_27:
      v22 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      v18->__r_.__value_.__r.__words[2] = v36.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v22;
LABEL_28:
      v23 = v37;
      v18[1].__r_.__value_.__s.__data_[16] = v38;
      *(_OWORD *)&v18[1].__r_.__value_.__l.__data_ = v23;
      v24 = v18 + 2;
LABEL_30:
      v40 = v24;
      goto LABEL_31;
    }
LABEL_29:
    v24 = (std::string *)std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>((uint64_t *)&v39, (__int128 *)&v36);
    goto LABEL_30;
  }
  v25 = 0;
  v26 = 0;
LABEL_37:
  v27 = (char *)v26 - (char *)v25;
  if (v27 == 48)
  {
    v28 = a6[1];
    if (v28 >= a6[2])
    {
      v29 = std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>(a6, v25);
    }
    else
    {
      std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)a6, v25);
      v29 = v28 + 48;
    }
    a6[1] = v29;
  }
  else if (0xAAAAAAAAAAAAAAABLL * (v27 >> 4) >= 2 && v40 != (std::string *)v25)
  {
    v31 = 0;
    v32 = 0;
    v33 = a6[1];
    do
    {
      v34 = &v25[v31];
      if (v33 >= a6[2])
      {
        v33 = std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>(a6, v34);
      }
      else
      {
        std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)a6, v34);
        v33 += 48;
      }
      a6[1] = v33;
      ++v32;
      v25 = v39;
      v31 += 3;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v40 - (char *)v39) >> 4) > v32);
  }
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
}

void sub_1A18854A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  if (a16 < 0)
    operator delete(__p);
  __p = &a21;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *NLGenericTransliterator::getCharLexiconSet@<X0>(unsigned __int8 *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (i = *((_QWORD *)this + 1) + 144;
        ;
        this = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, (unsigned __int8 *)(i + 16), i + 16))
  {
    i = *(_QWORD *)i;
    if (!i)
      break;
  }
  return this;
}

void sub_1A188554C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void NLGenericTransliterator::getTransliterationForAbbreviation(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  std::string::size_type v9;
  void *v10;
  BOOL v11;
  void **v12;
  std::string::size_type v13;
  int v14;
  NLAbstractOrthographyConvertor *v15[3];
  void *__p[2];
  char v17;
  NLAbstractOrthographyConvertor **v18;

  if ((a2[23] & 0x80u) == 0)
    v5 = a2;
  else
    v5 = *(unsigned __int8 **)a2;
  std::string::basic_string[abi:ne180100]<0>(a3, "");
  v6 = *v5;
  if (*v5)
  {
    v7 = v5 + 1;
    do
    {
      v17 = 1;
      LOWORD(__p[0]) = v6;
      (*(void (**)(NLAbstractOrthographyConvertor **__return_ptr, _QWORD, void **))(**(_QWORD **)(a1 + 8)
                                                                                             + 32))(v15, *(_QWORD *)(a1 + 8), __p);
      if (v15[1] == v15[0])
      {
        v9 = v17;
        v10 = __p[1];
        v11 = v17 < 0;
        if (v17 >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
      }
      else
      {
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(v15[0]);
        v9 = *(unsigned __int8 *)(v8 + 23);
        v10 = *(void **)(v8 + 8);
        v11 = (v9 & 0x80u) != 0;
        if ((v9 & 0x80u) == 0)
          v12 = (void **)v8;
        else
          v12 = *(void ***)v8;
      }
      if (v11)
        v13 = (std::string::size_type)v10;
      else
        v13 = v9;
      std::string::append(a3, (const std::string::value_type *)v12, v13);
      v18 = v15;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      if (v17 < 0)
        operator delete(__p[0]);
      v14 = *v7++;
      v6 = v14;
    }
    while (v14);
  }
}

void sub_1A1885664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  uint64_t v19;

  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v19 + 23) < 0)
    operator delete(*(void **)v19);
  _Unwind_Resume(exception_object);
}

void NLGenericTransliterator::getAllSubParts(uint64_t a1@<X0>, std::string::value_type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  std::string::value_type *v6;
  unsigned int i;
  std::string::value_type *v8;
  uint64_t v9;
  unsigned int v10;
  std::string::value_type v11;
  std::string::value_type v12;
  unsigned __int8 *v13;
  size_t size;
  void **v15;
  std::string *v16;
  void **v17;
  std::string::size_type v18;
  std::string *v19;
  int v20;
  size_t v21;
  std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  size_t v25;
  int v29;
  std::string::value_type *v30;
  uint64_t v31;
  void *__p[2];
  unsigned __int8 v33;
  std::string v34;
  std::string v35;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(std::string::value_type **)a2;
  v30 = v6;
  v31 = v4;
  v29 = (int)exp2((double)(v4 - 1));
  if (v29 >= 1)
  {
    for (i = 0; i != v29; ++i)
    {
      std::string::basic_string[abi:ne180100]<0>(&v35, "");
      std::string::basic_string[abi:ne180100]<0>(&v34, "");
      v8 = v30;
      v9 = v31;
      v10 = i;
      if (v31 >= 1)
      {
        do
        {
          v11 = *v8++;
          v12 = v11;
          if ((v10 & 1) != 0)
          {
            std::string::push_back(&v35, v12);
          }
          else
          {
            std::string::push_back(&v35, v12);
            v13 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(a1 + 80), (unsigned __int8 *)&v35);
            if (*(_QWORD *)(a1 + 104) && !v13)
              goto LABEL_54;
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
            else
              size = v35.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
            if ((v33 & 0x80u) == 0)
              v15 = __p;
            else
              v15 = (void **)__p[0];
            if (size)
            {
              if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v16 = &v35;
              else
                v16 = (std::string *)v35.__r_.__value_.__r.__words[0];
              memmove(v15, v16, size);
            }
            *(_WORD *)((char *)v15 + size) = 32;
            if ((v33 & 0x80u) == 0)
              v17 = __p;
            else
              v17 = (void **)__p[0];
            if ((v33 & 0x80u) == 0)
              v18 = v33;
            else
              v18 = (std::string::size_type)__p[1];
            std::string::append(&v34, (const std::string::value_type *)v17, v18);
            if ((char)v33 < 0)
              operator delete(__p[0]);
            MEMORY[0x1A1B0DE04](&v35, "");
          }
          v10 >>= 1;
          --v9;
        }
        while (v9);
      }
      v19 = NLCommons::trim(&v34);
      std::string::operator=(&v34, v19);
      v20 = a2[23];
      if (v20 >= 0)
        v21 = a2[23];
      else
        v21 = *((_QWORD *)a2 + 1);
      if (v20 >= 0)
        v22 = a2;
      else
        v22 = *(std::string::value_type **)a2;
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      else
        v23 = v34.__r_.__value_.__l.__size_;
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v34;
      else
        v24 = (std::string *)v34.__r_.__value_.__r.__words[0];
      if (v23 >= v21)
        v25 = v21;
      else
        v25 = v23;
      if (memcmp(v22, v24, v25) || v23 != v21)
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)&v34, (uint64_t)&v34);
LABEL_54:
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1A18858FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a10);
  _Unwind_Resume(a1);
}

uint64_t NLGenericTransliterator::createContextIDs(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  const __CFAllocator *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  std::string *v16;
  std::string *p_p;
  CFStringRef v18;
  std::string __p;

  v6 = a2[1];
  if (v6 == *a2)
  {
    v7 = 0;
    v8 = a2[1];
  }
  else
  {
    v7 = operator new[]();
    v6 = *a2;
    v8 = a2[1];
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v6) >> 3);
  if ((int)v9 <= 2)
    v10 = 2;
  else
    v10 = v9;
  v11 = (v10 - 2);
  if (v9 > v11)
  {
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v13 = 24 * v11;
    do
    {
      v14 = (__int128 *)(v6 + v13);
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
      }
      else
      {
        v15 = *v14;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
      }
      v16 = NLCommons::trim(&__p);
      std::string::operator=(&__p, v16);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v18 = CFStringCreateWithCString(v12, (const char *)p_p, 0x8000100u);
      if (v18)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
        *(_DWORD *)(v7 + 4 * v11) = LMLanguageModelGetTokenIDForString();
        ++*a3;
        CFRelease(v18);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v11;
      v6 = *a2;
      v13 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v11);
  }
  return v7;
}

void sub_1A1885B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NLGenericTransliterator::isCurrentEnglish(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  double v8;
  _BOOL4 v9;
  int v11;
  unsigned int v12;

  v12 = 0;
  v5 = ((uint64_t (*)(_QWORD **, uint64_t, unsigned int *))(*a1)[30])(a1, a3, &v12);
  v11 = 0;
  v6 = (*(uint64_t (**)(_QWORD *, uint64_t, int *))(*a1[3] + 16))(a1[3], a2, &v11);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(*a1[4] + 16))(a1[4], a2, &v11))
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    v9 = 1;
    if (!v5)
      return v9 & ~v6;
    goto LABEL_9;
  }
  v8 = (*(double (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*a1[3] + 24))(a1[3], a2, v5, v12);
  v9 = (*(double (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*a1[4] + 24))(a1[4], a2, v5, v12) > v8;
  if (v5)
LABEL_9:
    MEMORY[0x1A1B0E068](v5, 0x1000C4052888210);
  return v9 & ~v6;
}

void NLGenericTransliterator::preProcessForRomanSuffixes(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

uint64_t NLGenericTransliterator::shouldProcessForPhonetics()
{
  return 0;
}

uint64_t NLGenericTransliterator::shouldHandleNasalizationException()
{
  return 0;
}

uint64_t NLGenericTransliterator::addLatticeCandidates(_QWORD **a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t **a5, _QWORD *a6, double *a7)
{
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  uint64_t v14;
  double v15;
  double v16;
  _QWORD *v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  const void **v21;
  int v22;
  std::vector<std::string>::pointer value_high;
  const void *begin;
  size_t v25;
  const void *v26;
  size_t v27;
  NLTransliterationCandidate *ExistingCandidate;
  _BOOL4 v29;
  double v30;
  int v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  double Score;
  unint64_t v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  const void **v51;
  int v52;
  std::vector<std::string>::pointer end;
  const void *v54;
  size_t v55;
  const void *v56;
  size_t v57;
  BOOL v58;
  NLTransliterationCandidate *v59;
  _BOOL4 v60;
  double v61;
  int v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  double v66;
  unint64_t v67;
  uint64_t *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  unint64_t v84;
  uint64_t *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unsigned __int8 *v96;
  uint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  BOOL v101;
  char *v102;
  char *v103;
  void *v104;
  char *v105;
  char *v106;
  _QWORD *v107;
  uint64_t v108;
  _BOOL8 v110;
  std::vector<std::string>::pointer v111;
  unint64_t v112;
  double v113;
  uint64_t v114;
  std::vector<std::string>::pointer v115;
  double v116;
  unint64_t v117;
  uint64_t *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  std::vector<std::string>::pointer v130;
  unint64_t v131;
  double v132;
  double v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::vector<std::string>::pointer v137;
  double v138;
  unint64_t v139;
  uint64_t *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  NLTransliterationCandidate **v151;
  unint64_t v152;
  _QWORD *v153;
  uint64_t TransliteratedWord;
  uint64_t v155;
  int v156;
  std::vector<std::string>::pointer v157;
  const void *v158;
  size_t v159;
  const void *v160;
  size_t v161;
  BOOL v162;
  int v163;
  uint64_t v164;
  double v165;
  uint64_t v166;
  double SequenceScore;
  unint64_t v168;
  uint64_t *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  uint64_t *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t result;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v186;
  void *v189;
  void *v190;
  uint64_t v191;
  std::vector<std::string> v192;
  void *__p;
  void *v194;
  uint64_t v195;
  std::vector<std::string> v196;
  std::vector<std::string> v197;
  unsigned int v198;
  unsigned int v199[3];

  v199[0] = 0;
  v184 = ((uint64_t (*)(_QWORD **, uint64_t, unsigned int *))(*a1)[30])(a1, a4, v199);
  v10 = *a3;
  if (a3[1] != *a3)
  {
    v11 = 0;
    v182 = (uint64_t)(a5 + 2);
    while (1)
    {
      NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(v10 + 56 * v11));
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a6, v12))break;
LABEL_163:
      ++v11;
      v10 = *a3;
      if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11)
        goto LABEL_164;
    }
    if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11
      || (v13 = a1[2],
          NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*a3 + 56 * v11)),
          (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*v13 + 24))(v13, v14, v184, v199[0]),
          v198 = 0,
          0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11))
    {
LABEL_319:
      std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
    }
    v16 = v15;
    v17 = a1[2];
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*a3 + 56 * v11));
    if (((*(uint64_t (**)(_QWORD *, uint64_t, unsigned int *))(*v17 + 16))(v17, v18, &v198) & 1) != 0)
    {
      v19 = 1;
      goto LABEL_10;
    }
    if ((*(uint64_t (**)(_QWORD *))(*a1[2] + 56))(a1[2]))
    {
      v19 = fabs(v16) != INFINITY;
      if (v19)
      {
LABEL_10:
        if (v16 < *a7)
        {
          *a7 = v16;
          v19 = 1;
        }
      }
    }
    else
    {
      v19 = 0;
    }
    if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11)
      goto LABEL_319;
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*a3 + 56 * v11));
    ((void (*)(std::vector<std::string> *__return_ptr, _QWORD **, uint64_t))(*a1)[26])(&v197, a1, v20);
    memset(&v196, 0, sizeof(v196));
    if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11)
      goto LABEL_321;
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*a3 + 56 * v11));
    v22 = *((char *)v21 + 23);
    if (SHIBYTE(v197.__end_cap_.__value_) >= 0)
      value_high = (std::vector<std::string>::pointer)HIBYTE(v197.__end_cap_.__value_);
    else
      value_high = v197.__end_;
    begin = &v197;
    if (SHIBYTE(v197.__end_cap_.__value_) < 0)
      begin = v197.__begin_;
    if (v22 >= 0)
      v25 = *((unsigned __int8 *)v21 + 23);
    else
      v25 = (size_t)v21[1];
    if (v22 >= 0)
      v26 = v21;
    else
      v26 = *v21;
    if (v25 >= (unint64_t)value_high)
      v27 = (size_t)value_high;
    else
      v27 = v25;
    if ((memcmp(begin, v26, v27) || (std::vector<std::string>::pointer)v25 != value_high)
      && ((unsigned int (*)(_QWORD **, std::vector<std::string> *, std::vector<std::string> *))(*a1)[20])(a1, &v197, &v196))
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a6, (unsigned __int8 *)&v197))
      {
        __p = 0;
        v194 = 0;
        v195 = 0;
        std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(&__p, *a5, (uint64_t)a5[1], a5[1] - *a5);
        ExistingCandidate = (NLTransliterationCandidate *)NLTransliteratorUtils::findExistingCandidate((uint64_t *)&__p, (uint64_t)&v197);
        if (__p)
        {
          v194 = __p;
          operator delete(__p);
        }
        if (ExistingCandidate)
          v29 = v19;
        else
          v29 = 0;
        if (v29 && NLTransliterationCandidate::getType(ExistingCandidate) == 4)
        {
          v30 = (*(double (**)(_QWORD *, std::vector<std::string> *, uint64_t, _QWORD))(*a1[2] + 24))(a1[2], &v197, v184, v199[0]);
          NLTransliterationCandidate::setType((uint64_t)ExistingCandidate, 1);
          NLTransliterationCandidate::setLMScore((uint64_t)ExistingCandidate, v30);
        }
      }
      else
      {
        LODWORD(v192.__begin_) = 0;
        v31 = (*(uint64_t (**)(_QWORD *, std::vector<std::string> *, std::vector<std::string> *))(*a1[2] + 16))(a1[2], &v197, &v192);
        if (v31)
          v32 = 0;
        else
          v32 = 4;
        (*(void (**)(_QWORD *, std::vector<std::string> *, uint64_t, _QWORD))(*a1[2] + 24))(a1[2], &v197, v184, v199[0]);
        if (v31)
          v34 = v16 + 0.00001;
        else
          v34 = v33;
        v35 = operator new();
        if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11)
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        Score = NLMessageIntentCandidate::getScore((NLMessageIntentCandidate *)(*a3 + 56 * v11));
        NLTransliterationCandidate::NLTransliterationCandidate(v35, a2, &v197, v32, v31 ^ 1u, v34, Score);
        if (NLTransliteratorUtils::checkMetaFlags((NLTransliteratorUtils *)v35, (NLTransliterationCandidate *)LODWORD(v192.__begin_)))
        {
          v38 = a5[1];
          v37 = (unint64_t)a5[2];
          if ((unint64_t)v38 >= v37)
          {
            v40 = v38 - *a5;
            if ((unint64_t)(v40 + 1) >> 61)
              std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
            v41 = v37 - (_QWORD)*a5;
            v42 = v41 >> 2;
            if (v41 >> 2 <= (unint64_t)(v40 + 1))
              v42 = v40 + 1;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
              v43 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v43 = v42;
            if (v43)
              v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v182, v43);
            else
              v44 = 0;
            v45 = (uint64_t *)&v44[8 * v40];
            *v45 = v35;
            v39 = (char *)(v45 + 1);
            v47 = (char *)*a5;
            v46 = (char *)a5[1];
            if (v46 != (char *)*a5)
            {
              do
              {
                v48 = *((_QWORD *)v46 - 1);
                v46 -= 8;
                *--v45 = v48;
              }
              while (v46 != v47);
              v46 = (char *)*a5;
            }
            *a5 = v45;
            a5[1] = (uint64_t *)v39;
            a5[2] = (uint64_t *)&v44[8 * v43];
            if (v46)
              operator delete(v46);
          }
          else
          {
            *v38 = v35;
            v39 = (char *)(v38 + 1);
          }
          a5[1] = (uint64_t *)v39;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a6, (unsigned __int8 *)&v197, (uint64_t)&v197);
        }
        else
        {
          if (*(char *)(v35 + 47) < 0)
            operator delete(*(void **)(v35 + 24));
          if (*(char *)(v35 + 23) < 0)
            operator delete(*(void **)v35);
          MEMORY[0x1A1B0E068](v35, 0x1012C40B0087DDBLL);
        }
      }
    }
    if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11)
      std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
    v49 = a1[9];
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*a3 + 56 * v11));
    (*(void (**)(std::vector<std::string> *__return_ptr, _QWORD *, uint64_t))(*v49 + 24))(&v192, v49, v50);
    if (SHIBYTE(v197.__end_cap_.__value_) < 0)
      operator delete(v197.__begin_);
    v197 = v192;
    if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11)
LABEL_321:
      std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*a3 + 56 * v11));
    v52 = *((char *)v51 + 23);
    if (SHIBYTE(v197.__end_cap_.__value_) >= 0)
      end = (std::vector<std::string>::pointer)HIBYTE(v197.__end_cap_.__value_);
    else
      end = v197.__end_;
    v54 = &v197;
    if (SHIBYTE(v197.__end_cap_.__value_) < 0)
      v54 = v197.__begin_;
    if (v52 >= 0)
      v55 = *((unsigned __int8 *)v51 + 23);
    else
      v55 = (size_t)v51[1];
    if (v52 >= 0)
      v56 = v51;
    else
      v56 = *v51;
    if (v55 >= (unint64_t)end)
      v57 = (size_t)end;
    else
      v57 = v55;
    v58 = !memcmp(v54, v56, v57) && v55 == (_QWORD)end;
    if (!v58
      && ((unsigned int (*)(_QWORD **, std::vector<std::string> *, std::vector<std::string> *))(*a1)[20])(a1, &v197, &v196))
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a6, (unsigned __int8 *)&v197))
      {
        v189 = 0;
        v190 = 0;
        v191 = 0;
        std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(&v189, *a5, (uint64_t)a5[1], a5[1] - *a5);
        v59 = (NLTransliterationCandidate *)NLTransliteratorUtils::findExistingCandidate((uint64_t *)&v189, (uint64_t)&v197);
        if (v189)
        {
          v190 = v189;
          operator delete(v189);
        }
        if (v59)
          v60 = v19;
        else
          v60 = 0;
        if (v60 && NLTransliterationCandidate::getType(v59) == 4)
        {
          v61 = (*(double (**)(_QWORD *, std::vector<std::string> *, uint64_t, _QWORD))(*a1[2] + 24))(a1[2], &v197, v184, v199[0]);
          NLTransliterationCandidate::setType((uint64_t)v59, 1);
          NLTransliterationCandidate::setLMScore((uint64_t)v59, v61);
        }
      }
      else
      {
        LODWORD(v192.__begin_) = 0;
        v62 = (*(uint64_t (**)(_QWORD *, std::vector<std::string> *, std::vector<std::string> *))(*a1[2] + 16))(a1[2], &v197, &v192);
        if (v62)
          v63 = 1;
        else
          v63 = 4;
        v64 = (*(double (**)(_QWORD *, std::vector<std::string> *, uint64_t, _QWORD))(*a1[2] + 24))(a1[2], &v197, v184, v199[0]);
        v65 = operator new();
        if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11)
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        v66 = NLMessageIntentCandidate::getScore((NLMessageIntentCandidate *)(*a3 + 56 * v11));
        NLTransliterationCandidate::NLTransliterationCandidate(v65, a2, &v197, v63, v62 ^ 1u, v64, v66);
        if (NLTransliteratorUtils::checkMetaFlags((NLTransliteratorUtils *)v65, (NLTransliterationCandidate *)LODWORD(v192.__begin_)))
        {
          v68 = a5[1];
          v67 = (unint64_t)a5[2];
          if ((unint64_t)v68 >= v67)
          {
            v70 = v68 - *a5;
            if ((unint64_t)(v70 + 1) >> 61)
              std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
            v71 = v67 - (_QWORD)*a5;
            v72 = v71 >> 2;
            if (v71 >> 2 <= (unint64_t)(v70 + 1))
              v72 = v70 + 1;
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
              v73 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v73 = v72;
            if (v73)
              v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v182, v73);
            else
              v74 = 0;
            v75 = (uint64_t *)&v74[8 * v70];
            *v75 = v65;
            v69 = (char *)(v75 + 1);
            v77 = (char *)*a5;
            v76 = (char *)a5[1];
            if (v76 != (char *)*a5)
            {
              do
              {
                v78 = *((_QWORD *)v76 - 1);
                v76 -= 8;
                *--v75 = v78;
              }
              while (v76 != v77);
              v76 = (char *)*a5;
            }
            *a5 = v75;
            a5[1] = (uint64_t *)v69;
            a5[2] = (uint64_t *)&v74[8 * v73];
            if (v76)
              operator delete(v76);
          }
          else
          {
            *v68 = v65;
            v69 = (char *)(v68 + 1);
          }
          a5[1] = (uint64_t *)v69;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a6, (unsigned __int8 *)&v197, (uint64_t)&v197);
        }
        else
        {
          if (*(char *)(v65 + 47) < 0)
            operator delete(*(void **)(v65 + 24));
          if (*(char *)(v65 + 23) < 0)
            operator delete(*(void **)v65);
          MEMORY[0x1A1B0E068](v65, 0x1012C40B0087DDBLL);
        }
      }
    }
    if (v19)
      v79 = 0;
    else
      v79 = 4;
    v80 = operator new();
    if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11
      || (NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*a3 + 56 * v11)),
          0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11))
    {
      std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
    }
    v82 = v81;
    v83 = NLMessageIntentCandidate::getScore((NLMessageIntentCandidate *)(*a3 + 56 * v11));
    NLTransliterationCandidate::NLTransliterationCandidate(v80, a2, v82, v79, !v19, v16, v83);
    if (NLTransliteratorUtils::checkMetaFlags((NLTransliteratorUtils *)v80, (NLTransliterationCandidate *)v198))
    {
      v85 = a5[1];
      v84 = (unint64_t)a5[2];
      if ((unint64_t)v85 >= v84)
      {
        v87 = v85 - *a5;
        if ((unint64_t)(v87 + 1) >> 61)
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        v88 = v84 - (_QWORD)*a5;
        v89 = v88 >> 2;
        if (v88 >> 2 <= (unint64_t)(v87 + 1))
          v89 = v87 + 1;
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
          v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v182, v90);
        else
          v91 = 0;
        v92 = (uint64_t *)&v91[8 * v87];
        *v92 = v80;
        v86 = (char *)(v92 + 1);
        v94 = (char *)*a5;
        v93 = (char *)a5[1];
        if (v93 != (char *)*a5)
        {
          do
          {
            v95 = *((_QWORD *)v93 - 1);
            v93 -= 8;
            *--v92 = v95;
          }
          while (v93 != v94);
          v93 = (char *)*a5;
        }
        *a5 = v92;
        a5[1] = (uint64_t *)v86;
        a5[2] = (uint64_t *)&v91[8 * v90];
        if (v93)
          operator delete(v93);
      }
      else
      {
        *v85 = v80;
        v86 = (char *)(v85 + 1);
      }
      a5[1] = (uint64_t *)v86;
      if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11)
        std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
      NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*a3 + 56 * v11));
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a6, v96, (uint64_t)v96);
    }
    else
    {
      if (*(char *)(v80 + 47) < 0)
        operator delete(*(void **)(v80 + 24));
      if (*(char *)(v80 + 23) < 0)
        operator delete(*(void **)v80);
      MEMORY[0x1A1B0E068](v80, 0x1012C40B0087DDBLL);
    }
    if (SHIBYTE(v196.__end_cap_.__value_) < 0)
      operator delete(v196.__begin_);
    if (SHIBYTE(v197.__end_cap_.__value_) < 0)
      operator delete(v197.__begin_);
    goto LABEL_163;
  }
LABEL_164:
  v181 = ((uint64_t (*)(_QWORD **, char *))(*a1)[32])(a1, a2);
  v186 = a3;
  v98 = a3;
  v97 = *a3;
  if (v98[1] != v97)
  {
    v99 = 0;
    v183 = (uint64_t)(a5 + 2);
    do
    {
      memset(&v197, 0, sizeof(v197));
      v100 = a2[23];
      v101 = (v100 & 0x80u) != 0;
      if ((v100 & 0x80u) != 0)
        v100 = *((_QWORD *)a2 + 1);
      if (v101)
        v102 = *(char **)a2;
      else
        v102 = a2;
      v103 = &v102[v100];
      if (v100 >= 2)
      {
        v104 = v102;
        do
        {
          v105 = (char *)memchr(v104, 110, v100 - 1);
          if (!v105)
            break;
          v106 = v105;
          if (*(_WORD *)v105 == 24942)
            goto LABEL_177;
          v104 = v105 + 1;
          v100 = v103 - (v106 + 1);
        }
        while (v100 > 1);
      }
      v106 = v103;
LABEL_177:
      v107 = a1[2];
      NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(v97 + 56 * v99));
      v110 = v106 != v103 && v106 - v102 != -1;
      (*(void (**)(std::vector<std::string> *__return_ptr, _QWORD *, uint64_t, _BOOL8))(*v107 + 64))(&v196, v107, v108, v110);
      std::vector<std::string>::__vdeallocate(&v197);
      v197 = v196;
      memset(&v196, 0, sizeof(v196));
      v192.__begin_ = (std::vector<std::string>::pointer)&v196;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v192);
      v111 = v197.__begin_;
      if (v197.__end_ != v197.__begin_)
      {
        v112 = 0;
        do
        {
          if ((((uint64_t (*)(_QWORD **, char *, std::string *))(*a1)[34])(a1, a2, &v111[v112]) & 1) == 0)
          {
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v197.__end_ - (char *)v197.__begin_) >> 3) <= v112)
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a6, (unsigned __int8 *)&v197.__begin_[v112]))
            {
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v197.__end_ - (char *)v197.__begin_) >> 3) <= v112)
                goto LABEL_310;
              v113 = (*(double (**)(_QWORD *, std::string *, uint64_t, _QWORD))(*a1[2] + 24))(a1[2], &v197.__begin_[v112], v184, v199[0]);
              v114 = operator new();
              v115 = v197.__begin_;
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v197.__end_ - (char *)v197.__begin_) >> 3) <= v112)
                std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
              if (0x6DB6DB6DB6DB6DB7 * ((v186[1] - *v186) >> 3) <= v99)
                std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
              v116 = NLMessageIntentCandidate::getScore((NLMessageIntentCandidate *)(*v186 + 56 * v99));
              NLTransliterationCandidate::NLTransliterationCandidate(v114, a2, &v115[v112], 2, 0, v113, v116);
              v118 = a5[1];
              v117 = (unint64_t)a5[2];
              if ((unint64_t)v118 >= v117)
              {
                v120 = v118 - *a5;
                if ((unint64_t)(v120 + 1) >> 61)
                  std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
                v121 = v117 - (_QWORD)*a5;
                v122 = v121 >> 2;
                if (v121 >> 2 <= (unint64_t)(v120 + 1))
                  v122 = v120 + 1;
                if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
                  v123 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v123 = v122;
                if (v123)
                  v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v183, v123);
                else
                  v124 = 0;
                v125 = (uint64_t *)&v124[8 * v120];
                *v125 = v114;
                v119 = (char *)(v125 + 1);
                v127 = (char *)*a5;
                v126 = (char *)a5[1];
                if (v126 != (char *)*a5)
                {
                  do
                  {
                    v128 = *((_QWORD *)v126 - 1);
                    v126 -= 8;
                    *--v125 = v128;
                  }
                  while (v126 != v127);
                  v126 = (char *)*a5;
                }
                *a5 = v125;
                a5[1] = (uint64_t *)v119;
                a5[2] = (uint64_t *)&v124[8 * v123];
                if (v126)
                  operator delete(v126);
              }
              else
              {
                *v118 = v114;
                v119 = (char *)(v118 + 1);
              }
              a5[1] = (uint64_t *)v119;
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v197.__end_ - (char *)v197.__begin_) >> 3) <= v112)
LABEL_310:
                std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a6, (unsigned __int8 *)&v197.__begin_[v112], (uint64_t)&v197.__begin_[v112]);
            }
          }
          ++v112;
          v111 = v197.__begin_;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v197.__end_ - (char *)v197.__begin_) >> 3) > v112);
      }
      if ((v181 & 1) != 0)
      {
        if (0x6DB6DB6DB6DB6DB7 * ((v186[1] - *v186) >> 3) <= v99)
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*v186 + 56 * v99));
        ((void (*)(std::vector<std::string> *__return_ptr, _QWORD **, uint64_t))(*a1)[28])(&v196, a1, v129);
        v130 = v196.__begin_;
        if (v196.__end_ != v196.__begin_)
        {
          v131 = 0;
          do
          {
            if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a6, (unsigned __int8 *)&v130[v131]))
            {
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v196.__end_ - (char *)v196.__begin_) >> 3) <= v131)
                std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
              (*(void (**)(_QWORD *, std::string *, uint64_t, _QWORD))(*a1[2] + 24))(a1[2], &v196.__begin_[v131], v184, v199[0]);
              LODWORD(v192.__begin_) = 0;
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v196.__end_ - (char *)v196.__begin_) >> 3) <= v131)
                std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
              v133 = v132;
              if (((*(uint64_t (**)(_QWORD *, std::string *, std::vector<std::string> *))(*a1[2] + 16))(a1[2], &v196.__begin_[v131], &v192) & 1) != 0|| (*(uint64_t (**)(_QWORD *))(*a1[2] + 56))(a1[2]) && fabs(v133) != INFINITY)
              {
                v134 = 0;
                v135 = 0;
              }
              else
              {
                v135 = 4;
                v134 = 1;
              }
              v136 = operator new();
              v137 = v196.__begin_;
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v196.__end_ - (char *)v196.__begin_) >> 3) <= v131)
                std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
              if (0x6DB6DB6DB6DB6DB7 * ((v186[1] - *v186) >> 3) <= v99)
                std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
              v138 = NLMessageIntentCandidate::getScore((NLMessageIntentCandidate *)(*v186 + 56 * v99));
              NLTransliterationCandidate::NLTransliterationCandidate(v136, a2, &v137[v131], v135, v134, v133, v138);
              if (NLTransliteratorUtils::checkMetaFlags((NLTransliteratorUtils *)v136, (NLTransliterationCandidate *)LODWORD(v192.__begin_)))
              {
                v140 = a5[1];
                v139 = (unint64_t)a5[2];
                if ((unint64_t)v140 >= v139)
                {
                  v142 = v140 - *a5;
                  if ((unint64_t)(v142 + 1) >> 61)
                    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
                  v143 = v139 - (_QWORD)*a5;
                  v144 = v143 >> 2;
                  if (v143 >> 2 <= (unint64_t)(v142 + 1))
                    v144 = v142 + 1;
                  if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8)
                    v145 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v145 = v144;
                  if (v145)
                    v146 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v183, v145);
                  else
                    v146 = 0;
                  v147 = (uint64_t *)&v146[8 * v142];
                  *v147 = v136;
                  v141 = (char *)(v147 + 1);
                  v149 = (char *)*a5;
                  v148 = (char *)a5[1];
                  if (v148 != (char *)*a5)
                  {
                    do
                    {
                      v150 = *((_QWORD *)v148 - 1);
                      v148 -= 8;
                      *--v147 = v150;
                    }
                    while (v148 != v149);
                    v148 = (char *)*a5;
                  }
                  *a5 = v147;
                  a5[1] = (uint64_t *)v141;
                  a5[2] = (uint64_t *)&v146[8 * v145];
                  if (v148)
                    operator delete(v148);
                }
                else
                {
                  *v140 = v136;
                  v141 = (char *)(v140 + 1);
                }
                a5[1] = (uint64_t *)v141;
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v196.__end_ - (char *)v196.__begin_) >> 3) <= v131)
                  std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a6, (unsigned __int8 *)&v196.__begin_[v131], (uint64_t)&v196.__begin_[v131]);
              }
              else
              {
                if (*(char *)(v136 + 47) < 0)
                  operator delete(*(void **)(v136 + 24));
                if (*(char *)(v136 + 23) < 0)
                  operator delete(*(void **)v136);
                MEMORY[0x1A1B0E068](v136, 0x1012C40B0087DDBLL);
              }
            }
            ++v131;
            v130 = v196.__begin_;
          }
          while (0xAAAAAAAAAAAAAAABLL * (((char *)v196.__end_ - (char *)v196.__begin_) >> 3) > v131);
        }
        v192.__begin_ = (std::vector<std::string>::pointer)&v196;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v192);
      }
      v196.__begin_ = (std::vector<std::string>::pointer)&v197;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
      ++v99;
      v97 = *v186;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v186[1] - *v186) >> 3) > v99);
  }
  v151 = (NLTransliterationCandidate **)*a5;
  if (a5[1] != *a5)
  {
    v152 = 0;
    do
    {
      if (NLTransliterationCandidate::getType(v151[v152]) != 4)
      {
        if (v152 >= a5[1] - *a5)
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        v153 = a1[9];
        TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord((NLTransliterationCandidate *)(*a5)[v152]);
        (*(void (**)(std::vector<std::string> *__return_ptr, _QWORD *, uint64_t))(*v153 + 24))(&v197, v153, TransliteratedWord);
        if (v152 >= a5[1] - *a5)
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        v155 = NLTransliterationCandidate::getTransliteratedWord((NLTransliterationCandidate *)(*a5)[v152]);
        v156 = *(char *)(v155 + 23);
        if (SHIBYTE(v197.__end_cap_.__value_) >= 0)
          v157 = (std::vector<std::string>::pointer)HIBYTE(v197.__end_cap_.__value_);
        else
          v157 = v197.__end_;
        if (SHIBYTE(v197.__end_cap_.__value_) >= 0)
          v158 = &v197;
        else
          v158 = v197.__begin_;
        if (v156 >= 0)
          v159 = *(unsigned __int8 *)(v155 + 23);
        else
          v159 = *(_QWORD *)(v155 + 8);
        if (v156 >= 0)
          v160 = (const void *)v155;
        else
          v160 = *(const void **)v155;
        if (v159 >= (unint64_t)v157)
          v161 = (size_t)v157;
        else
          v161 = v159;
        v162 = !memcmp(v158, v160, v161) && v159 == (_QWORD)v157;
        if (!v162
          && !std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a6, (unsigned __int8 *)&v197))
        {
          LODWORD(v196.__begin_) = 0;
          v163 = (*(uint64_t (**)(_QWORD *, std::vector<std::string> *, std::vector<std::string> *))(*a1[2] + 16))(a1[2], &v197, &v196);
          if (v163)
            v164 = 1;
          else
            v164 = 4;
          v165 = (*(double (**)(_QWORD *, std::vector<std::string> *, uint64_t, _QWORD))(*a1[2] + 24))(a1[2], &v197, v184, v199[0]);
          v166 = operator new();
          if (v152 >= a5[1] - *a5)
            std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
          SequenceScore = NLTransliterationCandidate::getSequenceScore((NLTransliterationCandidate *)(*a5)[v152]);
          NLTransliterationCandidate::NLTransliterationCandidate(v166, a2, &v197, v164, v163 ^ 1u, v165, SequenceScore);
          if (NLTransliteratorUtils::checkMetaFlags((NLTransliteratorUtils *)v166, (NLTransliterationCandidate *)LODWORD(v196.__begin_)))
          {
            v169 = a5[1];
            v168 = (unint64_t)a5[2];
            if ((unint64_t)v169 >= v168)
            {
              v171 = v169 - *a5;
              if ((unint64_t)(v171 + 1) >> 61)
                std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
              v172 = v168 - (_QWORD)*a5;
              v173 = v172 >> 2;
              if (v172 >> 2 <= (unint64_t)(v171 + 1))
                v173 = v171 + 1;
              if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v173;
              if (v174)
                v175 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(a5 + 2), v174);
              else
                v175 = 0;
              v176 = (uint64_t *)&v175[8 * v171];
              *v176 = v166;
              v170 = (char *)(v176 + 1);
              v178 = (char *)*a5;
              v177 = (char *)a5[1];
              if (v177 != (char *)*a5)
              {
                do
                {
                  v179 = *((_QWORD *)v177 - 1);
                  v177 -= 8;
                  *--v176 = v179;
                }
                while (v177 != v178);
                v177 = (char *)*a5;
              }
              *a5 = v176;
              a5[1] = (uint64_t *)v170;
              a5[2] = (uint64_t *)&v175[8 * v174];
              if (v177)
                operator delete(v177);
            }
            else
            {
              *v169 = v166;
              v170 = (char *)(v169 + 1);
            }
            a5[1] = (uint64_t *)v170;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a6, (unsigned __int8 *)&v197, (uint64_t)&v197);
          }
          else
          {
            if (*(char *)(v166 + 47) < 0)
              operator delete(*(void **)(v166 + 24));
            if (*(char *)(v166 + 23) < 0)
              operator delete(*(void **)v166);
            MEMORY[0x1A1B0E068](v166, 0x1012C40B0087DDBLL);
          }
        }
        if (SHIBYTE(v197.__end_cap_.__value_) < 0)
          operator delete(v197.__begin_);
      }
      ++v152;
      v151 = (NLTransliterationCandidate **)*a5;
    }
    while (v152 < a5[1] - *a5);
  }
  result = v184;
  if (v184)
    return MEMORY[0x1A1B0E068](v184, 0x1000C4052888210);
  return result;
}

void sub_1A1887120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a30 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

uint64_t NLGenericTransliterator::splitCharacters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  double Weight;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  unint64_t v21;
  __int128 *v22;
  __int128 v23;
  std::string::size_type size;
  char v25;
  std::string::size_type v26;
  std::string *v27;
  size_t v28;
  void **v29;
  size_t v30;
  int v31;
  _BOOL4 v32;
  int v33;
  void *v34;
  std::string::size_type v35;
  std::string *v36;
  size_t v37;
  const void *p_p;
  size_t v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t Pos;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int128 *v50;
  __int128 *v51;
  std::string *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v59;
  uint64_t *v60;
  std::string v61;
  std::string v62;
  std::string __str;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  __int128 *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 **v72;
  std::string *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *__p;
  size_t v78;
  unsigned __int8 v79;
  void **v80;
  size_t v81;
  unsigned __int8 v82;
  const void *v83[2];
  char v84;
  _QWORD v85[2];
  uint64_t v86;
  char v87[9];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 128))(v85);
  *a3 = 0;
  a3[1] = 0;
  v59 = a3;
  a3[2] = 0;
  (*(void (**)(const void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 280))(v83, a1);
  (*(void (**)(void ***__return_ptr, uint64_t))(*(_QWORD *)a1 + 288))(&v80, a1);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 296))(&__p, a1);
  v5 = v86;
  if (!v86)
    goto LABEL_113;
  do
  {
    v60 = (uint64_t *)v5;
    NLCommons::split((const std::string *)(v5 + 16), 0x20u, &v75);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v6 = v75;
    if (v76 == v75)
      goto LABEL_103;
    v7 = 0;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 32))(&v70, *(_QWORD *)(a1 + 8), v6 + 24 * v7);
      v8 = v70;
      if (v71 == v70)
      {
        v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
        std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
        goto LABEL_112;
      }
      v9 = 0;
      v10 = 0;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      do
      {
        v11 = *(_QWORD *)(a1 + 72);
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(v8 + v9));
        v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v12);
        v14 = 0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 4);
        if (v13)
        {
          if (v14 <= v10
            || (v15 = v70 + v9,
                Weight = NLExtendedString::getWeight((NLExtendedString *)(v70 + v9)),
                NLExtendedString::setWeight(v15, Weight * 0.5),
                0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 4) <= v10))
          {
LABEL_120:
            std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
          }
          v17 = v68;
          if ((unint64_t)v68 < v69)
          {
            std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)&v67, (__int128 *)(v70 + v9));
LABEL_14:
            v19 = v17 + 3;
            goto LABEL_17;
          }
          v18 = (__int128 *)(v70 + 48 * v10);
        }
        else
        {
          if (v14 <= v10)
            goto LABEL_120;
          v18 = (__int128 *)(v70 + v9);
          v17 = v68;
          if ((unint64_t)v68 < v69)
          {
            std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)&v67, v18);
            goto LABEL_14;
          }
        }
        v19 = (__int128 *)std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>((uint64_t *)&v67, v18);
LABEL_17:
        v68 = v19;
        ++v10;
        v8 = v70;
        v9 += 48;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 4) > v10);
      v64 = 0;
      v65 = 0;
      v66 = 0;
      if (v71 == v70)
        goto LABEL_99;
      v20 = 0;
      v21 = 0;
      while (2)
      {
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(v8 + v20));
        if (*((char *)v22 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
        }
        else
        {
          v23 = *v22;
          __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v23;
        }
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __str.__r_.__value_.__l.__size_;
        if (size)
        {
          if ((char)v82 < 0)
          {
            if (!v81)
              goto LABEL_79;
          }
          else if (!v82)
          {
            goto LABEL_79;
          }
          if ((char)v79 < 0)
          {
            if (!v78)
              goto LABEL_79;
          }
          else if (!v79)
          {
LABEL_79:
            if (0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 4) <= v21)
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            Pos = NLExtendedString::getPos((NLExtendedString *)(v70 + v20));
            if (0xAAAAAAAAAAAAAAABLL * ((v76 - v75) >> 3) - 1 > v7)
            {
              v44 = Pos;
              if ((*(unsigned int (**)(_QWORD, std::string *))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), &__str))
              {
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str.__r_.__value_.__l.__data_, v83, (uint64_t)&v62);
                if (0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 4) <= v21)
                  std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
                v45 = NLExtendedString::getWeight((NLExtendedString *)(v70 + v20));
                NLExtendedString::NLExtendedString(&v61, &v62, v44, v45 * 0.35);
                std::vector<NLExtendedString>::push_back[abi:ne180100](&v64, (__int128 *)&v61);
              }
              else
              {
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str.__r_.__value_.__l.__data_, v83, (uint64_t)&v62);
                if (0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 4) <= v21)
                  std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
                v46 = NLExtendedString::getWeight((NLExtendedString *)(v70 + v20));
                NLExtendedString::NLExtendedString(&v61, &v62, v44, v46 * 1.001);
                std::vector<NLExtendedString>::push_back[abi:ne180100](&v64, (__int128 *)&v61);
              }
              if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v61.__r_.__value_.__l.__data_);
              if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v62.__r_.__value_.__l.__data_);
            }
            goto LABEL_90;
          }
          std::string::basic_string(&v61, &__str, 0, 1uLL, (std::allocator<char> *)&v62);
          v25 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
          else
            v26 = v61.__r_.__value_.__l.__size_;
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v61;
          else
            v27 = (std::string *)v61.__r_.__value_.__r.__words[0];
          if ((v82 & 0x80u) == 0)
            v28 = v82;
          else
            v28 = v81;
          if ((v82 & 0x80u) == 0)
            v29 = (void **)&v80;
          else
            v29 = v80;
          if (v28 >= v26)
            v30 = v26;
          else
            v30 = v28;
          v31 = memcmp(v27, v29, v30);
          v32 = v26 < v28;
          if (v31)
            v32 = v31 < 0;
          if (v32)
          {
            std::string::basic_string(&v62, &__str, 0, 1uLL, (std::allocator<char> *)v87);
            v33 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
            v34 = (void *)v62.__r_.__value_.__r.__words[0];
            if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v35 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
            else
              v35 = v62.__r_.__value_.__l.__size_;
            if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v36 = &v62;
            else
              v36 = (std::string *)v62.__r_.__value_.__r.__words[0];
            if ((v79 & 0x80u) == 0)
              v37 = v79;
            else
              v37 = v78;
            if ((v79 & 0x80u) == 0)
              p_p = &__p;
            else
              p_p = __p;
            if (v37 >= v35)
              v39 = v35;
            else
              v39 = v37;
            v40 = memcmp(v36, p_p, v39);
            if (v35 < v37)
              v41 = -1;
            else
              v41 = v37 < v35;
            if (v40)
              v41 = v40;
            v42 = v41 > 0;
            if (v33 < 0)
              operator delete(v34);
            if ((*((_BYTE *)&v61.__r_.__value_.__s + 23) & 0x80) != 0)
              goto LABEL_75;
LABEL_78:
            if (!v42)
              goto LABEL_79;
          }
          else
          {
            v42 = 0;
            if ((v25 & 0x80) == 0)
              goto LABEL_78;
LABEL_75:
            operator delete(v61.__r_.__value_.__l.__data_);
            if (!v42)
              goto LABEL_79;
          }
        }
LABEL_90:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        ++v21;
        v8 = v70;
        v20 += 48;
        if (0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 4) > v21)
          continue;
        break;
      }
      v47 = v64;
      if (v65 != v64)
      {
        v48 = 0;
        v49 = 0;
        v50 = v68;
        do
        {
          v51 = (__int128 *)(v47 + v48);
          if ((unint64_t)v50 >= v69)
          {
            v50 = (__int128 *)std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>((uint64_t *)&v67, v51);
          }
          else
          {
            std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)&v67, v51);
            v50 += 3;
          }
          v68 = v50;
          ++v49;
          v47 = v64;
          v48 += 48;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v65 - v64) >> 4) > v49);
      }
LABEL_99:
      v52 = v73;
      if ((unint64_t)v73 >= v74)
      {
        v53 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>((uint64_t *)&v72, &v67);
      }
      else
      {
        v73->__r_.__value_.__r.__words[0] = 0;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(v52, v67, v68, 0xAAAAAAAAAAAAAAABLL * (v68 - v67));
        v53 = (uint64_t)&v52[1];
      }
      v73 = (std::string *)v53;
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      ++v7;
      v6 = v75;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v76 - v75) >> 3) > v7);
LABEL_103:
    v54 = v59[1];
    if (v54 == *v59)
      goto LABEL_107;
    v55 = *(unsigned __int8 *)(a2 + 23);
    if ((v55 & 0x80u) != 0)
      v55 = *(_QWORD *)(a2 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v73 - (char *)v72) >> 3) != v55)
    {
LABEL_107:
      if (v54 >= v59[2])
      {
        v56 = std::vector<std::vector<std::vector<NLExtendedString>>>::__push_back_slow_path<std::vector<std::vector<NLExtendedString>> const&>(v59, &v72);
      }
      else
      {
        std::vector<std::vector<std::vector<NLExtendedString>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<NLExtendedString>> const&>((uint64_t)v59, &v72);
        v56 = v54 + 24;
      }
      v59[1] = v56;
    }
LABEL_112:
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
    std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    v5 = *v60;
  }
  while (*v60);
LABEL_113:
  if ((char)v79 < 0)
    operator delete(__p);
  if ((char)v82 < 0)
    operator delete(v80);
  if (v84 < 0)
    operator delete((void *)v83[0]);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v85);
}

void sub_1A1887A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  if (*(char *)(v53 - 193) < 0)
    operator delete(*(void **)(v53 - 216));
  if (*(char *)(v53 - 169) < 0)
    operator delete(*(void **)(v53 - 192));
  a12 = a10;
  std::vector<std::vector<std::vector<NLExtendedString>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v53 - 168);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

_QWORD *NLGenericTransliterator::getHalantCharacter@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

_QWORD *NLGenericTransliterator::getFirstLetter@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

_QWORD *NLGenericTransliterator::getLastLetter@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

_QWORD *NLGenericTransliterator::getAnyConsonant@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t NLGenericTransliterator::addSpecialCandidates()
{
  return 0;
}

double NLGenericTransliterator::getEnglishCandidateSequenceScore(uint64_t a1, uint64_t *a2)
{
  int *v2;
  int *v3;
  int *v5;
  int *v6;

  stringToUTF32Characters(a2, &v5);
  v2 = v5;
  v3 = v6;
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  return (double)(unint64_t)(v3 - v2);
}

void NLGenericTransliterator::addEnglishCandidates(_QWORD **a1, uint64_t a2, uint64_t *a3, char **a4, _QWORD *a5, double a6)
{
  double v11;
  uint64_t v12;
  double v13;
  unint64_t v14;
  double v15;
  int v16;
  double v17;
  double v18;
  uint64_t v19;
  NLTransliterationCandidate *ExistingCandidate;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double LMScore;
  unint64_t v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v53;
  void *__p;
  void *v55;
  uint64_t v56;
  int v57;
  std::string v58;
  std::string __str;
  int v60;

  if (a3[1] != *a3)
  {
    ((void (*)(_QWORD **))(*a1)[42])(a1);
    v12 = *a3;
    if (a3[1] != *a3)
    {
      v13 = v11;
      v14 = 0;
      v53 = fabs(a6) == INFINITY;
      v15 = a6 + -0.0001;
      v51 = (uint64_t)(a4 + 2);
      while (1)
      {
        v60 = 0;
        v16 = (*(uint64_t (**)(_QWORD *, unint64_t, int *))(*a1[2] + 16))(a1[2], v12 + 24 * v14, &v60);
        memset(&__str, 0, sizeof(__str));
        std::string::basic_string[abi:ne180100]<0>(&v58, "");
        v57 = 0;
        if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v14)
LABEL_91:
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        if ((NLCommons::isNumeric((unsigned __int8 *)(*a3 + 24 * v14)) & 1) != 0)
          break;
        if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v14)
          goto LABEL_91;
        if ((((uint64_t (*)(_QWORD **, unint64_t, std::string *))(*a1)[20])(a1, *a3 + 24 * v14, &__str) & 1) != 0)break;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          if (!__str.__r_.__value_.__l.__size_)
            break;
        }
        else if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
        {
          break;
        }
        std::string::operator=(&v58, &__str);
        if ((v16 & 1) != 0)
          v16 = 1;
        else
          v16 = (*(uint64_t (**)(_QWORD *, std::string *, int *))(*a1[2] + 16))(a1[2], &v58, &v57);
        v17 = (*(double (**)(_QWORD *, std::string *, _QWORD, _QWORD))(*a1[2] + 24))(a1[2], &v58, 0, 0);
        if (!v16)
        {
LABEL_20:
          v17 = 1.0;
          v19 = 3;
          goto LABEL_21;
        }
LABEL_9:
        v18 = (*(double (**)(_QWORD *, unint64_t, _QWORD, _QWORD))(*a1[2] + 24))(a1[2], *a3 + 24 * v14, 0, 0);
        v19 = 0;
        if (v18 >= v17)
          v17 = v18;
LABEL_21:
        if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v14)
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a5, (unsigned __int8 *)(*a3 + 24 * v14)))
        {
          if ((v53 | v16) == 1)
          {
            v22 = operator new();
            v23 = v22;
            if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v14)
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            NLTransliterationCandidate::NLTransliterationCandidate(v22, a2, *a3 + 24 * v14, v19, 0, v17, v13);
          }
          else
          {
            v24 = operator new();
            v23 = v24;
            if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v14)
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            NLTransliterationCandidate::NLTransliterationCandidate(v24, a2, *a3 + 24 * v14, v19, 0, v15, v13);
          }
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v58.__r_.__value_.__l.__size_)
              goto LABEL_60;
          }
          else if (!*((_BYTE *)&v58.__r_.__value_.__s + 23))
          {
            goto LABEL_60;
          }
          if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a5, (unsigned __int8 *)&v58))
          {
            v25 = operator new();
            LMScore = NLTransliterationCandidate::getLMScore((NLTransliterationCandidate *)v23);
            NLTransliterationCandidate::NLTransliterationCandidate(v25, a2, &v58, v19, 0, LMScore, v13);
            v28 = (uint64_t *)a4[1];
            v27 = (unint64_t)a4[2];
            if ((unint64_t)v28 >= v27)
            {
              v30 = ((char *)v28 - *a4) >> 3;
              if ((unint64_t)(v30 + 1) >> 61)
                std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
              v31 = v27 - (_QWORD)*a4;
              v32 = v31 >> 2;
              if (v31 >> 2 <= (unint64_t)(v30 + 1))
                v32 = v30 + 1;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
                v33 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v33 = v32;
              if (v33)
                v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v51, v33);
              else
                v34 = 0;
              v35 = (uint64_t *)&v34[8 * v30];
              *v35 = v25;
              v29 = (char *)(v35 + 1);
              v37 = *a4;
              v36 = a4[1];
              if (v36 != *a4)
              {
                do
                {
                  v38 = *((_QWORD *)v36 - 1);
                  v36 -= 8;
                  *--v35 = v38;
                }
                while (v36 != v37);
                v36 = *a4;
              }
              *a4 = (char *)v35;
              a4[1] = v29;
              a4[2] = &v34[8 * v33];
              if (v36)
                operator delete(v36);
            }
            else
            {
              *v28 = v25;
              v29 = (char *)(v28 + 1);
            }
            a4[1] = v29;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a5, (unsigned __int8 *)&v58, (uint64_t)&v58);
          }
LABEL_60:
          if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v14)
            goto LABEL_94;
          if (((unsigned int (*)(_QWORD **, unint64_t, std::string *))(*a1)[20])(a1, *a3 + 24 * v14, &__str))
          {
            v40 = (uint64_t *)a4[1];
            v39 = (unint64_t)a4[2];
            if ((unint64_t)v40 >= v39)
            {
              v42 = ((char *)v40 - *a4) >> 3;
              if ((unint64_t)(v42 + 1) >> 61)
                std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
              v43 = v39 - (_QWORD)*a4;
              v44 = v43 >> 2;
              if (v43 >> 2 <= (unint64_t)(v42 + 1))
                v44 = v42 + 1;
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
                v45 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v45 = v44;
              if (v45)
                v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v51, v45);
              else
                v46 = 0;
              v47 = (uint64_t *)&v46[8 * v42];
              *v47 = v23;
              v41 = (char *)(v47 + 1);
              v49 = *a4;
              v48 = a4[1];
              if (v48 != *a4)
              {
                do
                {
                  v50 = *((_QWORD *)v48 - 1);
                  v48 -= 8;
                  *--v47 = v50;
                }
                while (v48 != v49);
                v48 = *a4;
              }
              *a4 = (char *)v47;
              a4[1] = v41;
              a4[2] = &v46[8 * v45];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *v40 = v23;
              v41 = (char *)(v40 + 1);
            }
            a4[1] = v41;
            if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v14)
LABEL_94:
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a5, (unsigned __int8 *)(*a3 + 24 * v14), *a3 + 24 * v14);
          }
          else
          {
            if (*(char *)(v23 + 47) < 0)
              operator delete(*(void **)(v23 + 24));
            if (*(char *)(v23 + 23) < 0)
              operator delete(*(void **)v23);
            MEMORY[0x1A1B0E068](v23, 0x1012C40B0087DDBLL);
          }
          goto LABEL_85;
        }
        __p = 0;
        v55 = 0;
        v56 = 0;
        std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(&__p, *a4, (uint64_t)a4[1], (a4[1] - *a4) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v14)
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        ExistingCandidate = (NLTransliterationCandidate *)NLTransliteratorUtils::findExistingCandidate((uint64_t *)&__p, *a3 + 24 * v14);
        if (__p)
        {
          v55 = __p;
          operator delete(__p);
        }
        if (v53
          || (!NLTransliterationCandidate::getType(ExistingCandidate) ? (v21 = 1) : (v21 = v16),
              v17 = v15,
              (v21 & 1) == 0))
        {
          NLTransliterationCandidate::setLMScore((uint64_t)ExistingCandidate, v17);
        }
        NLTransliterationCandidate::setType((uint64_t)ExistingCandidate, v19);
LABEL_85:
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v58.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        ++v14;
        v12 = *a3;
        if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v14)
          return;
      }
      v17 = -INFINITY;
      if (!v16)
        goto LABEL_20;
      goto LABEL_9;
    }
  }
}

void sub_1A1888368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t NLGenericTransliterator::isSpecialCharSeq()
{
  return 0;
}

void NLGenericTransliterator::makeCharacterLattice(_QWORD **a1, unint64_t a2, NLGenericTransliterator *a3, uint64_t a4, int *a5, _DWORD *a6, uint64_t *a7)
{
  int v12;
  NLGenericTransliterator *v13;
  int8x16_t v14;
  int LetterType;
  BOOL v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  std::string::size_type size;
  uint64_t *v26;
  std::string *v27;
  uint64_t v28;
  unint64_t v29;
  NLAbstractOrthographyConvertor *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  void **v39;
  std::string::size_type v40;
  int v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  unint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  int v47;
  __int128 *v48;
  __int128 *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  std::string *v54;
  void **v55;
  int *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  std::string::size_type v60;
  std::string::__raw *v61;
  std::string::size_type v62;
  std::string *v63;
  uint64_t v64;
  std::string *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  __int128 *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void **p_size;
  int v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  void *v80;
  unint64_t v81;
  uint64_t i;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int JoinNext;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double Score;
  __int128 *v92;
  __int128 *v93;
  int v94;
  double v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  std::string *v99;
  int v100;
  uint64_t v101;
  uint64_t *v102;
  int v103;
  __int128 **v104;
  unint64_t v105;
  int *v106;
  std::string v108;
  std::string v109;
  std::string v110;
  uint64_t v111;
  std::string v112;
  __int128 *v113;
  __int128 *v114;
  uint64_t v115;
  std::string v116;
  void *__p[2];
  int64_t v118;
  std::string *v119;
  void **v120;
  unint64_t v121;
  std::string v122;
  std::string *v123;
  void **v124;
  __int128 *v125;
  __int128 *v126;
  uint64_t v127;
  std::string *v128;
  __int128 *v129;
  uint64_t v130;
  std::string v131;
  __int128 *v132;
  __int128 *v133;
  uint64_t v134;
  std::string *v135;

  v132 = 0;
  v133 = 0;
  v134 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v131, "");
  v106 = (int *)a3;
  v12 = *(_DWORD *)a3;
  v13 = (NLGenericTransliterator *)strlen((const char *)a2);
  LODWORD(a3) = v12;
  if ((unint64_t)v13 > v12)
  {
    a3 = (NLGenericTransliterator *)v12;
    do
    {
      LetterType = NLGenericTransliterator::getLetterType(v13, (NLCommons *)*((char *)a3 + a2), v14);
      v18 = (_DWORD)a4 == 4 && LetterType == 3;
      LODWORD(a3) = *v106;
      if (LetterType != (_DWORD)a4 && !v18)
        break;
      std::string::push_back(&v131, *(_BYTE *)(a2 + (int)a3));
      v19 = *v106;
      a3 = (NLGenericTransliterator *)(v19 + 1);
      *v106 = v19 + 1;
      v13 = (NLGenericTransliterator *)strlen((const char *)a2);
    }
    while (v13 > a3);
  }
  *v106 = (_DWORD)a3 - 1;
  (*(void (**)(std::string *__return_ptr, _QWORD *, std::string *))(*a1[1] + 32))(&v112, a1[1], &v131);
  std::vector<NLExtendedString>::__assign_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>((uint64_t)&v132, (std::string *)v112.__r_.__value_.__l.__data_, (__int128 *)v112.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112.__r_.__value_.__l.__size_ - v112.__r_.__value_.__r.__words[0]) >> 4));
  v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  v20 = v132;
  v21 = v133;
  if (v132 == v133)
  {
    if ((((uint64_t (*)(_QWORD **, std::string *))(*a1)[33])(a1, &v131) & 1) != 0)
    {
      ((void (*)(std::string *__return_ptr, _QWORD **, std::string *, unint64_t, _QWORD))(*a1)[27])(&v112, a1, &v131, a2, *a5);
      v22 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = v131.__r_.__value_.__r.__words[1];
      *a6 += v22;
      v23 = a7[1];
      if (v23 >= a7[2])
      {
        v24 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>(a7, (__int128 **)&v112);
      }
      else
      {
        std::vector<std::vector<NLExtendedString>>::__construct_one_at_end[abi:ne180100]<std::vector<NLExtendedString> const&>((uint64_t)a7, (__int128 **)&v112);
        v24 = v23 + 24;
      }
      a7[1] = v24;
      v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
      v99 = &v108;
LABEL_151:
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
      goto LABEL_152;
    }
    v20 = v132;
    v21 = v133;
  }
  if (v20 != v21)
    goto LABEL_64;
  size = HIBYTE(v131.__r_.__value_.__r.__words[2]);
  if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v131.__r_.__value_.__l.__size_;
  if (size <= *((int *)a1 + 31))
  {
LABEL_64:
    v47 = ((uint64_t (*)(_QWORD **, uint64_t, unint64_t, _QWORD))(*a1)[41])(a1, a4, a2, *v106);
    v128 = 0;
    v129 = 0;
    v130 = 0;
    if (v47)
    {
      LODWORD(v112.__r_.__value_.__l.__data_) = *v106 + 1;
      ((void (*)(_QWORD **, unint64_t, int *, int *, std::string *, std::string **))(*a1)[39])(a1, a2, v106, v106, &v112, &v128);
    }
    v125 = 0;
    v126 = 0;
    v127 = 0;
    if (v132 != v133)
    {
      v48 = (__int128 *)std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>((uint64_t *)&v125, &v132);
      v49 = v125;
      v126 = v48;
      if (v48 != v125)
      {
        v50 = 0;
        v51 = 0;
        do
        {
          memset(&v112, 0, sizeof(v112));
          std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(&v112, *(__int128 **)((char *)v49 + v50), *(__int128 **)((char *)v49 + v50 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)((char *)v49 + v50 + 8) - *(_QWORD *)((char *)v49 + v50)) >> 4));
          memset(&v108, 0, sizeof(v108));
          if (v112.__r_.__value_.__l.__size_ - v112.__r_.__value_.__r.__words[0] == 48)
            v108.__r_.__value_.__l.__size_ = std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>((uint64_t *)&v108, (__int128 *)v112.__r_.__value_.__l.__data_);
          else
            ((void (*)(_QWORD **, std::string *, _QWORD, _QWORD, unint64_t, std::string *))(*a1)[18])(a1, &v112, (v51 + *a5), *v106, a2, &v108);
          if (v47)
            std::vector<NLExtendedString>::__insert_with_size[abi:ne180100]<std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>((uint64_t *)&v108, (std::string *)v108.__r_.__value_.__l.__size_, v128, v129, 0xAAAAAAAAAAAAAAABLL * (((char *)v129 - (char *)v128) >> 4));
          v52 = a7[1];
          if (v52 >= a7[2])
          {
            v53 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>(a7, (__int128 **)&v108);
          }
          else
          {
            std::vector<std::vector<NLExtendedString>>::__construct_one_at_end[abi:ne180100]<std::vector<NLExtendedString> const&>((uint64_t)a7, (__int128 **)&v108);
            v53 = v52 + 24;
          }
          a7[1] = v53;
          v123 = &v108;
          std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
          v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
          std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
          ++v51;
          v49 = v125;
          v50 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v126 - (char *)v125) >> 3) > v51);
      }
LABEL_146:
      v98 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v98 = v131.__r_.__value_.__r.__words[1];
      *a6 += v98;
      v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v125;
      std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
      v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
      v99 = &v112;
      goto LABEL_151;
    }
    v103 = v47;
    v105 = a2;
    ((void (*)(std::string **__return_ptr, _QWORD **, std::string *))(*a1)[7])(&v123, a1, &v131);
    memset(&v122, 0, sizeof(v122));
    v54 = v123;
    v55 = v124;
    v56 = v106;
    if (v124 == (void **)v123)
      goto LABEL_142;
    v57 = 0;
    v104 = &v113;
LABEL_81:
    v119 = 0;
    v120 = 0;
    v121 = 0;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v54) >> 3) <= v57)
LABEL_160:
      std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
    v58 = 0;
    v59 = 0;
    while (1)
    {
      v61 = (std::string::__raw *)&v54[v57];
      v60 = v61->__words[0];
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61->__words[1] - v61->__words[0]) >> 3) <= v59)
      {
        if (v103)
        {
          v65 = v128;
          if (v129 != (__int128 *)v128)
          {
            v66 = 0;
            v67 = 0;
            do
            {
              if (v120 == (void **)v119)
                std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
              v68 = (uint64_t *)(v120 - 2);
              v69 = (unint64_t)*(v120 - 2);
              v70 = (uint64_t *)(v120 - 3);
              v71 = (__int128 *)&v65[v66];
              if (v69 >= (unint64_t)*(v120 - 1))
              {
                v72 = std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>(v70, v71);
              }
              else
              {
                std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)v70, v71);
                v72 = v69 + 48;
              }
              *v68 = v72;
              ++v67;
              v65 = v128;
              v66 += 2;
            }
            while (0xAAAAAAAAAAAAAAABLL * (((char *)v129 - (char *)v128) >> 4) > v67);
          }
        }
        v73 = 0;
        if (v120 == (void **)v119)
        {
          v76 = 1;
        }
        else
        {
          if ((unint64_t)(((char *)v120 - (char *)v119) / 24) <= 1)
            v74 = 1;
          else
            v74 = ((char *)v120 - (char *)v119) / 24;
          p_size = (void **)&v119->__r_.__value_.__l.__size_;
          v76 = 1;
          do
          {
            v77 = (uint64_t)*(p_size - 1);
            v78 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)*p_size - v77) >> 4);
            if (v78 > v73)
              v73 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)*p_size - v77) >> 4);
            v76 *= (_DWORD)v78;
            p_size += 3;
            --v74;
          }
          while (v74);
        }
        v79 = (void *)operator new[]();
        v80 = v79;
        if (v120 != (void **)v119)
        {
          v81 = ((char *)v120 - (char *)v119) / 24;
          if (v81 <= 1)
            v81 = 1;
          memset_pattern16(v79, &unk_1A18D4880, 8 * v81);
        }
        __p[0] = 0;
        __p[1] = 0;
        v118 = 0;
        std::string::basic_string[abi:ne180100]<0>(&v108, "");
        NLLatticePath::NLLatticePath(&v112, &v108, 0.0);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v108.__r_.__value_.__l.__data_);
          if (!v73)
            goto LABEL_125;
        }
        else if (!v73)
        {
          goto LABEL_125;
        }
        for (i = 0; i != v73; ++i)
        {
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v109, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
          else
            v109 = v112;
          memset(&v110, 0, sizeof(v110));
          std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(&v110, v113, v114, 0xAAAAAAAAAAAAAAABLL * (v114 - v113));
          v111 = v115;
          HIDWORD(v101) = v76;
          LOBYTE(v101) = 0;
          ((void (*)(_QWORD **, std::string **, std::string *, _QWORD, _QWORD, uint64_t, void **, unint64_t, uint64_t, void *))(*a1)[14])(a1, &v119, &v109, 0, 0, i, __p, v73, v101, v80);
          v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
          std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v109.__r_.__value_.__l.__data_);
        }
LABEL_125:
        MEMORY[0x1A1B0E050](v80, 0x1000C8000313F17);
        v83 = (char *)__p[0];
        if (__p[1] != __p[0])
        {
          v84 = 0;
          v85 = 0;
          do
          {
            NLLatticePath::getNodeVector((__int128 **)&v83[v84], &v108);
            if (0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 3) <= v85)
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            NLLatticePath::getNodeVector((__int128 **)((char *)__p[0] + v84), &v116);
            v86 = -1
                - 0x5555555555555555
                * ((uint64_t)(v116.__r_.__value_.__l.__size_ - v116.__r_.__value_.__r.__words[0]) >> 4);
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v108.__r_.__value_.__l.__size_ - v108.__r_.__value_.__r.__words[0]) >> 4) <= v86)
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            JoinNext = NLExtendedString::getJoinNext((NLExtendedString *)(v108.__r_.__value_.__r.__words[0] + 48 * v86));
            v135 = &v116;
            std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
            v116.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
            std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
            if (JoinNext)
            {
              if (0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 3) <= v85
                || (NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)((char *)__p[0] + v84)),
                    0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 3) <= v85))
              {
                std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
              }
              v89 = v88;
              v90 = *a5;
              Score = NLMessageIntentCandidate::getScore((NLMessageIntentCandidate *)((char *)__p[0] + v84));
              NLExtendedString::NLExtendedString(&v108, v89, v90, Score);
              std::vector<NLExtendedString>::push_back[abi:ne180100]((uint64_t *)&v122, (__int128 *)&v108);
            }
            else
            {
              if (0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 3) <= v85
                || (NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)((char *)__p[0] + v84)),
                    0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 3) <= v85))
              {
                std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
              }
              v93 = v92;
              v94 = *a5;
              v95 = NLMessageIntentCandidate::getScore((NLMessageIntentCandidate *)((char *)__p[0] + v84));
              LODWORD(v104) = v104 & 0xFFFFFFFC | 1;
              a2 = a2 & 0xFFFFFFFF00000000 | v104;
              NLExtendedString::NLExtendedString(&v108, v93, v94, a2, v95);
              std::vector<NLExtendedString>::push_back[abi:ne180100]((uint64_t *)&v122, (__int128 *)&v108);
            }
            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v108.__r_.__value_.__l.__data_);
            ++v85;
            v83 = (char *)__p[0];
            v84 += 56;
          }
          while (0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 3) > v85);
        }
        v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
        std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        v112.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<NLLatticePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
        v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
        std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
        ++v57;
        v54 = v123;
        v55 = v124;
        v56 = v106;
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v124 - (char *)v123) >> 3) <= v57)
        {
LABEL_142:
          v96 = a7[1];
          if (v96 >= a7[2])
          {
            v97 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>(a7, (__int128 **)&v122);
          }
          else
          {
            std::vector<std::vector<NLExtendedString>>::__construct_one_at_end[abi:ne180100]<std::vector<NLExtendedString> const&>((uint64_t)a7, (__int128 **)&v122);
            v97 = v96 + 24;
          }
          a7[1] = v97;
          v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
          std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
          v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
          std::vector<std::vector<std::vector<NLExtendedString>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
          goto LABEL_146;
        }
        goto LABEL_81;
      }
      memset(&v112, 0, sizeof(v112));
      std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(&v112, *(__int128 **)(v60 + v58), *(__int128 **)(v60 + v58 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v60 + v58 + 8) - *(_QWORD *)(v60 + v58)) >> 4));
      if (v112.__r_.__value_.__l.__size_ - v112.__r_.__value_.__r.__words[0] == 48)
      {
        memset(&v108, 0, sizeof(v108));
        v62 = std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>((uint64_t *)&v108, (__int128 *)v112.__r_.__value_.__l.__data_);
        v63 = (std::string *)v120;
        v108.__r_.__value_.__l.__size_ = v62;
        if ((unint64_t)v120 >= v121)
          goto LABEL_89;
      }
      else
      {
        memset(&v108, 0, sizeof(v108));
        ((void (*)(_QWORD **, std::string *, _QWORD, _QWORD, unint64_t, std::string *))(*a1)[18])(a1, &v112, (v59 + *a5), *v56, v105, &v108);
        v63 = (std::string *)v120;
        if ((unint64_t)v120 >= v121)
        {
LABEL_89:
          v64 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>((uint64_t *)&v119, (__int128 **)&v108);
          goto LABEL_90;
        }
      }
      *v120 = 0;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(v63, (__int128 *)v108.__r_.__value_.__l.__data_, (__int128 *)v108.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108.__r_.__value_.__l.__size_ - v108.__r_.__value_.__r.__words[0]) >> 4));
      v64 = (uint64_t)&v63[1];
LABEL_90:
      v120 = (void **)v64;
      __p[0] = &v108;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
      ++v59;
      v54 = v123;
      v58 += 24;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v124 - (char *)v123) >> 3) <= v57)
        goto LABEL_160;
    }
  }
  v102 = a7;
  std::string::basic_string[abi:ne180100]<0>(&v128, "");
  ((void (*)(std::string *__return_ptr, _QWORD **, std::string *))(*a1)[16])(&v108, a1, &v131);
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v26 = (uint64_t *)v108.__r_.__value_.__r.__words[2];
  if (v108.__r_.__value_.__r.__words[2])
  {
    while (1)
    {
      NLCommons::split((const std::string *)(v26 + 2), 0x20u, (uint64_t *)&v123);
      std::string::basic_string[abi:ne180100]<0>(&v122, "");
      v27 = v123;
      if (v124 != (void **)v123)
        break;
LABEL_57:
      NLExtendedString::NLExtendedString(&v112, &v122, *v106);
      std::vector<NLExtendedString>::push_back[abi:ne180100]((uint64_t *)&v125, (__int128 *)&v112);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v122.__r_.__value_.__l.__data_);
      v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
      v26 = (uint64_t *)*v26;
      if (!v26)
        goto LABEL_62;
    }
    v28 = 0;
    v29 = 0;
    while (1)
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, std::string *))(*a1[1] + 32))(&v112, a1[1], &v27[v28]);
      v119 = 0;
      v120 = 0;
      v121 = 0;
      ((void (*)(_QWORD **, std::string *, _QWORD, _QWORD, unint64_t, std::string **))(*a1)[18])(a1, &v112, (v29 + *a5), *v106, a2, &v119);
      v30 = (NLAbstractOrthographyConvertor *)v119;
      if (v120 != (void **)v119)
        break;
LABEL_56:
      __p[0] = &v119;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v119 = &v112;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
      ++v29;
      v27 = v123;
      ++v28;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v124 - (char *)v123) >> 3) <= v29)
        goto LABEL_57;
    }
    if ((_DWORD)a4 == 1)
    {
      if (!v29)
      {
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)v119);
        goto LABEL_49;
      }
      v30 = (NLAbstractOrthographyConvertor *)v112.__r_.__value_.__r.__words[0];
      if (v112.__r_.__value_.__l.__size_ == v112.__r_.__value_.__r.__words[0])
        std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
    }
    else if (v29 != -1 - 0x5555555555555555 * (((char *)v124 - (char *)v123) >> 3))
    {
      NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)v119);
      v33 = v32;
      ((void (*)(std::string *__return_ptr, _QWORD **))(*a1)[35])(&v116, a1);
      v34 = *(char *)(v33 + 23);
      if (v34 >= 0)
        v35 = (const std::string::value_type *)v33;
      else
        v35 = *(const std::string::value_type **)v33;
      if (v34 >= 0)
        v36 = *(unsigned __int8 *)(v33 + 23);
      else
        v36 = *(_QWORD *)(v33 + 8);
      v37 = std::string::insert(&v116, 0, v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v118 = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (v118 >= 0)
        v39 = __p;
      else
        v39 = (void **)__p[0];
      if (v118 >= 0)
        v40 = HIBYTE(v118);
      else
        v40 = (std::string::size_type)__p[1];
      std::string::append(&v122, (const std::string::value_type *)v39, v40);
      if (SHIBYTE(v118) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      goto LABEL_56;
    }
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(v30);
LABEL_49:
    v41 = *(char *)(v31 + 23);
    if (v41 >= 0)
      v42 = (const std::string::value_type *)v31;
    else
      v42 = *(const std::string::value_type **)v31;
    if (v41 >= 0)
      v43 = *(unsigned __int8 *)(v31 + 23);
    else
      v43 = *(_QWORD *)(v31 + 8);
    std::string::append(&v122, v42, v43);
    goto LABEL_56;
  }
LABEL_62:
  v44 = v102[1];
  if (v44 >= v102[2])
  {
    v46 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>(v102, &v125);
    v45 = a6;
  }
  else
  {
    std::vector<std::vector<NLExtendedString>>::__construct_one_at_end[abi:ne180100]<std::vector<NLExtendedString> const&>((uint64_t)v102, &v125);
    v45 = a6;
    v46 = v44 + 24;
  }
  v102[1] = v46;
  v100 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
  if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v100 = v131.__r_.__value_.__r.__words[1];
  *v45 += v100;
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v125;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v108);
  if (SHIBYTE(v130) < 0)
    operator delete(v128);
LABEL_152:
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
}

void sub_1A1889270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
  uint64_t v35;

  __p = (void *)(v35 - 192);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a21);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  if (*(char *)(v35 - 121) < 0)
    operator delete(*(void **)(v35 - 144));
  __p = (void *)(v35 - 120);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t NLGenericTransliterator::shouldHandleExaggeration()
{
  return 0;
}

void NLGenericTransliterator::postProcessForExaggeration(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void *std::get_temporary_buffer[abi:ne180100]<NLTransliterationCandidate *>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0xFFFFFFFFFFFFFFFLL)
    v1 = 0xFFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(8 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t *std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      result = (uint64_t *)(*a3)(*(a2 - 1), *result);
      if ((_DWORD)result)
      {
        v9 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v13 = a4 >> 1;
      v14 = &result[a4 >> 1];
      v15 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(result, v14, a3, v15, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v13]);
        return (uint64_t *)std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),NLTransliterationCandidate**,NLTransliterationCandidate**,std::__wrap_iter<NLTransliterationCandidate**>>((uint64_t)a5, &a5[v13], &a5[v13], &a5[a4], v8, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(result, v14, a3, v15, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return (uint64_t *)std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>((uint64_t)v8, (char *)&v8[a4 >> 1], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else
    {
      return (uint64_t *)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>((uint64_t)result, a2, a3);
    }
  }
  return result;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  if ((uint64_t *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      v7 = 0;
      v8 = (uint64_t *)result;
      do
      {
        v9 = *v8;
        v8 = v5;
        result = (*a3)(*v5, v9);
        if ((_DWORD)result)
        {
          v10 = *v8;
          v11 = v7;
          while (1)
          {
            *(_QWORD *)((char *)v4 + v11 + 8) = *(_QWORD *)((char *)v4 + v11);
            if (!v11)
              break;
            result = (*a3)(v10, *(_QWORD *)((char *)v4 + v11 - 8));
            v11 -= 8;
            if ((result & 1) == 0)
            {
              v12 = (_QWORD *)((char *)v4 + v11 + 8);
              goto LABEL_10;
            }
          }
          v12 = v4;
LABEL_10:
          *v12 = v10;
        }
        v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t *a5)
{
  uint64_t *v9;
  uint64_t v10;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      result = (uint64_t *)(*a3)(*(a2 - 1), *result);
      if ((_DWORD)result)
      {
        *a5 = *(a2 - 1);
        v10 = *v9;
      }
      else
      {
        *a5 = *v9;
        v10 = *(a2 - 1);
      }
      a5[1] = v10;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return (uint64_t *)std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>,std::__wrap_iter<NLTransliterationCandidate**>>((uint64_t)v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(result, a2, a5, a3);
    }
  }
  return result;
}

uint64_t std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),NLTransliterationCandidate**,NLTransliterationCandidate**,std::__wrap_iter<NLTransliterationCandidate**>>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if ((uint64_t *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v13 = *a3++;
      *a5++ = v13;
    }
  }
  else
  {
    v11 = (uint64_t *)result;
    while (a3 != a4)
    {
      result = (*a6)(*a3, *v11);
      if ((_DWORD)result)
        v12 = a3;
      else
        v12 = v11;
      v11 += result ^ 1;
      a3 += result;
      *a5++ = *v12;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v14 = 0;
      do
      {
        a5[v14] = v11[v14];
        ++v14;
      }
      while (&v11[v14] != a2);
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(uint64_t result, char *a2, char *a3, uint64_t (**a4)(_QWORD, uint64_t), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, _QWORD);
  uint64_t v55;

  v52 = a6;
  if (a6)
  {
    v14 = (char *)result;
    do
    {
      if (v52 <= a8 || a5 <= a8)
        return (uint64_t)std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(v14, a2, a3, a4, a5, v52, a7);
      if (!a5)
        return result;
      v15 = 0;
      v16 = -a5;
      while (1)
      {
        result = (*a4)(*(_QWORD *)a2, *(_QWORD *)&v14[v15]);
        if ((result & 1) != 0)
          break;
        v15 += 8;
        if (__CFADD__(v16++, 1))
          return result;
      }
      v18 = -v16;
      v19 = v52;
      v49 = a8;
      v50 = a7;
      v51 = a3;
      v48 = &v14[v15];
      if (-v16 >= v52)
      {
        if (v16 == -1)
        {
          v46 = *(_QWORD *)&v14[v15];
          *(_QWORD *)&v14[v15] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v46;
          return result;
        }
        if (v16 > 0)
          v18 = 1 - v16;
        v28 = v18 >> 1;
        v23 = &v14[8 * (v18 >> 1) + v15];
        v29 = a3;
        v22 = a2;
        if (a2 != v29)
        {
          v47 = v28;
          v54 = *a4;
          v30 = (v51 - a2) >> 3;
          v22 = a2;
          do
          {
            v31 = &v22[8 * (v30 >> 1)];
            v33 = *(_QWORD *)v31;
            v32 = v31 + 8;
            v34 = v54(v33, *(_QWORD *)v23);
            if (v34)
              v30 += ~(v30 >> 1);
            else
              v30 >>= 1;
            if (v34)
              v22 = v32;
          }
          while (v30);
          v19 = v52;
          v28 = v47;
        }
        v21 = (v22 - a2) >> 3;
      }
      else
      {
        if (v52 >= 0)
          v20 = v52;
        else
          v20 = v52 + 1;
        v21 = v20 >> 1;
        v22 = &a2[8 * (v20 >> 1)];
        v23 = a2;
        if (a2 - v14 != v15)
        {
          v53 = v20 >> 1;
          v24 = (a2 - v14 - v15) >> 3;
          v23 = &v14[v15];
          do
          {
            v25 = &v23[8 * (v24 >> 1)];
            v27 = *(_QWORD *)v25;
            v26 = v25 + 8;
            if ((*a4)(*(_QWORD *)v22, v27))
            {
              v24 >>= 1;
            }
            else
            {
              v23 = v26;
              v24 += ~(v24 >> 1);
            }
          }
          while (v24);
          v19 = v52;
          v21 = v53;
        }
        v28 = (v23 - v14 - v15) >> 3;
      }
      a5 = -(v28 + v16);
      v55 = v19 - v21;
      v35 = a2;
      v36 = v19;
      v37 = v28;
      v38 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<NLTransliterationCandidate **>,std::__wrap_iter<NLTransliterationCandidate **>>(v23, v35, v22);
      v39 = v21;
      v40 = v38;
      if (v37 + v39 >= v36 - (v37 + v39) - v16)
      {
        v44 = v22;
        v45 = v37;
        v43 = v39;
        a7 = v50;
        a3 = v38;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(v38, v44, v51, a4, a5, v55, v50, v49);
        a2 = v23;
        a8 = v49;
        a5 = v45;
        v14 = v48;
      }
      else
      {
        v41 = v23;
        v42 = v37;
        a8 = v49;
        a7 = v50;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(&v14[v15], v41, v38, a4, v42, v39, v50, v49);
        v14 = v40;
        a2 = v22;
        a3 = v51;
        v43 = v55;
      }
      v52 = v43;
    }
    while (v43);
  }
  return result;
}

uint64_t *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v6 = result + 1;
    *a3 = *result;
    if (result + 1 != a2)
    {
      v8 = 0;
      v9 = a3;
      do
      {
        v10 = v9;
        v11 = *v9++;
        result = (uint64_t *)(*a4)(*v6, v11);
        v12 = v9;
        if ((_DWORD)result)
        {
          v10[1] = *v10;
          v12 = a3;
          if (v10 != a3)
          {
            v13 = v8;
            while (1)
            {
              v12 = (uint64_t *)((char *)a3 + v13);
              result = (uint64_t *)(*a4)(*v6, *(uint64_t *)((char *)a3 + v13 - 8));
              if (!(_DWORD)result)
                break;
              *v12 = *(v12 - 1);
              v13 -= 8;
              if (!v13)
              {
                v12 = a3;
                break;
              }
            }
          }
        }
        v14 = *v6++;
        *v12 = v14;
        v8 += 8;
      }
      while (v6 != a2);
    }
  }
  return result;
}

uint64_t std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>,std::__wrap_iter<NLTransliterationCandidate**>>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if ((uint64_t *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v13 = *a3++;
      *a5++ = v13;
    }
  }
  else
  {
    v11 = (uint64_t *)result;
    while (a3 != a4)
    {
      result = (*a6)(*a3, *v11);
      if ((_DWORD)result)
        v12 = a3;
      else
        v12 = v11;
      a3 += result;
      v11 += result ^ 1;
      *a5++ = *v12;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v14 = 0;
      do
      {
        a5[v14] = v11[v14];
        ++v14;
      }
      while (&v11[v14] != a2);
    }
  }
  return result;
}

char *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(char *__dst, char *a2, char *a3, uint64_t (**a4)(_QWORD, _QWORD), uint64_t a5, uint64_t a6, char *__src)
{
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v10 = a2;
  v11 = __dst;
  if (a5 <= a6)
  {
    if (__dst != a2)
    {
      v16 = 0;
      do
      {
        *(_QWORD *)&__src[v16] = *(_QWORD *)&__dst[v16];
        v16 += 8;
      }
      while (&__dst[v16] != a2);
      if (v16)
      {
        v17 = &__src[v16];
        v18 = __src;
        while (v10 != a3)
        {
          __dst = (char *)(*a4)(*(_QWORD *)v10, *(_QWORD *)v18);
          if ((_DWORD)__dst)
            v19 = v10;
          else
            v19 = v18;
          v10 += 8 * __dst;
          v18 += 8 * (__dst ^ 1);
          *(_QWORD *)v11 = *(_QWORD *)v19;
          v11 += 8;
          if (v17 == v18)
            return __dst;
        }
        return (char *)memmove(v11, v18, __src - v18 + v16);
      }
    }
  }
  else if (a2 != a3)
  {
    v12 = 0;
    do
    {
      *(_QWORD *)&__src[v12] = *(_QWORD *)&a2[v12];
      v12 += 8;
    }
    while (&a2[v12] != a3);
    if (v12)
    {
      v13 = &__src[v12];
      v14 = a3 - 8;
      while (v10 != v11)
      {
        __dst = (char *)(*a4)(*((_QWORD *)v13 - 1), *((_QWORD *)v10 - 1));
        if ((_DWORD)__dst)
          v15 = v10;
        else
          v15 = v13;
        if ((_DWORD)__dst)
          v10 -= 8;
        else
          v13 -= 8;
        *(_QWORD *)v14 = *((_QWORD *)v15 - 1);
        v14 -= 8;
        if (v13 == __src)
          return __dst;
      }
      v20 = 0;
      do
      {
        *(_QWORD *)&v14[v20] = *(_QWORD *)&v13[v20 - 8];
        v20 -= 8;
      }
      while (&v13[v20] != __src);
    }
  }
  return __dst;
}

